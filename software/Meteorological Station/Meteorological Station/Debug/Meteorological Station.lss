
Meteorological Station.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ba  00800100  0000763c  000076d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000763c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003fe  008002ba  008002ba  0000788a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000788a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000078e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006a8  00000000  00000000  00007928  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000929d  00000000  00000000  00007fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002346  00000000  00000000  0001126d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000052d1  00000000  00000000  000135b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001460  00000000  00000000  00018884  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000019e5  00000000  00000000  00019ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009e16  00000000  00000000  0001b6c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005b0  00000000  00000000  000254df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8a c1       	rjmp	.+788    	; 0x316 <__ctors_end>
       2:	00 00       	nop
       4:	a7 c1       	rjmp	.+846    	; 0x354 <__bad_interrupt>
       6:	00 00       	nop
       8:	a5 c1       	rjmp	.+842    	; 0x354 <__bad_interrupt>
       a:	00 00       	nop
       c:	a3 c1       	rjmp	.+838    	; 0x354 <__bad_interrupt>
       e:	00 00       	nop
      10:	a1 c1       	rjmp	.+834    	; 0x354 <__bad_interrupt>
      12:	00 00       	nop
      14:	9f c1       	rjmp	.+830    	; 0x354 <__bad_interrupt>
      16:	00 00       	nop
      18:	9d c1       	rjmp	.+826    	; 0x354 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9b c1       	rjmp	.+822    	; 0x354 <__bad_interrupt>
      1e:	00 00       	nop
      20:	99 c1       	rjmp	.+818    	; 0x354 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 da 0e 	jmp	0x1db4	; 0x1db4 <__vector_9>
      28:	95 c1       	rjmp	.+810    	; 0x354 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	93 c1       	rjmp	.+806    	; 0x354 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 24 28 	jmp	0x5048	; 0x5048 <__vector_12>
      34:	8f c1       	rjmp	.+798    	; 0x354 <__bad_interrupt>
      36:	00 00       	nop
      38:	8d c1       	rjmp	.+794    	; 0x354 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8b c1       	rjmp	.+790    	; 0x354 <__bad_interrupt>
      3e:	00 00       	nop
      40:	89 c1       	rjmp	.+786    	; 0x354 <__bad_interrupt>
      42:	00 00       	nop
      44:	87 c1       	rjmp	.+782    	; 0x354 <__bad_interrupt>
      46:	00 00       	nop
      48:	85 c1       	rjmp	.+778    	; 0x354 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	83 c1       	rjmp	.+774    	; 0x354 <__bad_interrupt>
      4e:	00 00       	nop
      50:	81 c1       	rjmp	.+770    	; 0x354 <__bad_interrupt>
      52:	00 00       	nop
      54:	7f c1       	rjmp	.+766    	; 0x354 <__bad_interrupt>
      56:	00 00       	nop
      58:	7d c1       	rjmp	.+762    	; 0x354 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7b c1       	rjmp	.+758    	; 0x354 <__bad_interrupt>
      5e:	00 00       	nop
      60:	79 c1       	rjmp	.+754    	; 0x354 <__bad_interrupt>
      62:	00 00       	nop
      64:	77 c1       	rjmp	.+750    	; 0x354 <__bad_interrupt>
      66:	00 00       	nop
      68:	75 c1       	rjmp	.+746    	; 0x354 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	73 c1       	rjmp	.+742    	; 0x354 <__bad_interrupt>
      6e:	00 00       	nop
      70:	71 c1       	rjmp	.+738    	; 0x354 <__bad_interrupt>
      72:	00 00       	nop
      74:	6f c1       	rjmp	.+734    	; 0x354 <__bad_interrupt>
      76:	00 00       	nop
      78:	6d c1       	rjmp	.+730    	; 0x354 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	6b c1       	rjmp	.+726    	; 0x354 <__bad_interrupt>
      7e:	00 00       	nop
      80:	69 c1       	rjmp	.+722    	; 0x354 <__bad_interrupt>
      82:	00 00       	nop
      84:	67 c1       	rjmp	.+718    	; 0x354 <__bad_interrupt>
      86:	00 00       	nop
      88:	65 c1       	rjmp	.+714    	; 0x354 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	04 24       	eor	r0, r4
      8e:	0b 24       	eor	r0, r11
      90:	5d 25       	eor	r21, r13
      92:	7b 24       	eor	r7, r11
      94:	5d 25       	eor	r21, r13
      96:	5d 25       	eor	r21, r13
      98:	5d 25       	eor	r21, r13
      9a:	56 25       	eor	r21, r6
      9c:	5d 25       	eor	r21, r13
      9e:	5d 25       	eor	r21, r13
      a0:	5d 25       	eor	r21, r13
      a2:	5d 25       	eor	r21, r13
      a4:	5d 25       	eor	r21, r13
      a6:	5d 25       	eor	r21, r13
      a8:	5d 25       	eor	r21, r13
      aa:	5d 25       	eor	r21, r13
      ac:	5d 25       	eor	r21, r13
      ae:	5d 25       	eor	r21, r13
      b0:	5d 25       	eor	r21, r13
      b2:	5d 25       	eor	r21, r13
      b4:	5d 25       	eor	r21, r13
      b6:	5d 25       	eor	r21, r13
      b8:	5d 25       	eor	r21, r13
      ba:	5d 25       	eor	r21, r13
      bc:	5d 25       	eor	r21, r13
      be:	5d 25       	eor	r21, r13
      c0:	5d 25       	eor	r21, r13
      c2:	5d 25       	eor	r21, r13
      c4:	5d 25       	eor	r21, r13
      c6:	5d 25       	eor	r21, r13
      c8:	5d 25       	eor	r21, r13
      ca:	5d 25       	eor	r21, r13
      cc:	5d 25       	eor	r21, r13
      ce:	5d 25       	eor	r21, r13
      d0:	5d 25       	eor	r21, r13
      d2:	5d 25       	eor	r21, r13
      d4:	5d 25       	eor	r21, r13
      d6:	5d 25       	eor	r21, r13
      d8:	5d 25       	eor	r21, r13
      da:	5d 25       	eor	r21, r13
      dc:	5d 25       	eor	r21, r13
      de:	5d 25       	eor	r21, r13
      e0:	5d 25       	eor	r21, r13
      e2:	5d 25       	eor	r21, r13
      e4:	5d 25       	eor	r21, r13
      e6:	5d 25       	eor	r21, r13
      e8:	5d 25       	eor	r21, r13
      ea:	5d 25       	eor	r21, r13
      ec:	5d 25       	eor	r21, r13
      ee:	5d 25       	eor	r21, r13
      f0:	08 25       	eor	r16, r8
      f2:	0e 25       	eor	r16, r14
      f4:	1f 25       	eor	r17, r15
      f6:	30 25       	eor	r19, r0
      f8:	44 25       	eor	r20, r4

000000fa <__trampolines_end>:
      fa:	63 64       	ori	r22, 0x43	; 67
      fc:	69 6e       	ori	r22, 0xE9	; 233
      fe:	6f 70       	andi	r22, 0x0F	; 15
     100:	73 75       	andi	r23, 0x53	; 83
     102:	78 58       	subi	r23, 0x88	; 136
     104:	5b 00       	.word	0x005b	; ????
     106:	00 40       	sbci	r16, 0x00	; 0
     108:	7a 10       	cpse	r7, r10
     10a:	f3 5a       	subi	r31, 0xA3	; 163
     10c:	00 a0       	ldd	r0, Z+32	; 0x20
     10e:	72 4e       	sbci	r23, 0xE2	; 226
     110:	18 09       	sbc	r17, r8
     112:	00 10       	cpse	r0, r0
     114:	a5 d4       	rcall	.+2378   	; 0xa60 <udp_client_check_for_dns_answer+0xa2>
     116:	e8 00       	.word	0x00e8	; ????
     118:	00 e8       	ldi	r16, 0x80	; 128
     11a:	76 48       	sbci	r23, 0x86	; 134
     11c:	17 00       	.word	0x0017	; ????
     11e:	00 e4       	ldi	r16, 0x40	; 64
     120:	0b 54       	subi	r16, 0x4B	; 75
     122:	02 00       	.word	0x0002	; ????
     124:	00 ca       	rjmp	.-3072   	; 0xfffff526 <__eeprom_end+0xff7ef526>
     126:	9a 3b       	cpi	r25, 0xBA	; 186
     128:	00 00       	nop
     12a:	00 e1       	ldi	r16, 0x10	; 16
     12c:	f5 05       	cpc	r31, r5
     12e:	00 00       	nop
     130:	80 96       	adiw	r24, 0x20	; 32
     132:	98 00       	.word	0x0098	; ????
     134:	00 00       	nop
     136:	40 42       	sbci	r20, 0x20	; 32
     138:	0f 00       	.word	0x000f	; ????
     13a:	00 00       	nop
     13c:	a0 86       	std	Z+8, r10	; 0x08
     13e:	01 00       	.word	0x0001	; ????
     140:	00 00       	nop
     142:	10 27       	eor	r17, r16
     144:	00 00       	nop
     146:	00 00       	nop
     148:	e8 03       	fmulsu	r22, r16
     14a:	00 00       	nop
     14c:	00 00       	nop
     14e:	64 00       	.word	0x0064	; ????
     150:	00 00       	nop
     152:	00 00       	nop
     154:	0a 00       	.word	0x000a	; ????
     156:	00 00       	nop
     158:	00 00       	nop
     15a:	01 00       	.word	0x0001	; ????
     15c:	00 00       	nop
     15e:	00 00       	nop
     160:	2c 76       	andi	r18, 0x6C	; 108
     162:	d8 88       	ldd	r13, Y+16	; 0x10
     164:	dc 67       	ori	r29, 0x7C	; 124
     166:	4f 08       	sbc	r4, r15
     168:	23 df       	rcall	.-442    	; 0xffffffb0 <__eeprom_end+0xff7effb0>
     16a:	c1 df       	rcall	.-126    	; 0xee <__SREG__+0xaf>
     16c:	ae 59       	subi	r26, 0x9E	; 158
     16e:	e1 b1       	in	r30, 0x01	; 1
     170:	b7 96       	adiw	r30, 0x27	; 39
     172:	e5 e3       	ldi	r30, 0x35	; 53
     174:	e4 53       	subi	r30, 0x34	; 52
     176:	c6 3a       	cpi	r28, 0xA6	; 166
     178:	e6 51       	subi	r30, 0x16	; 22
     17a:	99 76       	andi	r25, 0x69	; 105
     17c:	96 e8       	ldi	r25, 0x86	; 134
     17e:	e6 c2       	rjmp	.+1484   	; 0x74c <bmp280_readPressure+0x322>
     180:	84 26       	eor	r8, r20
     182:	eb 89       	ldd	r30, Y+19	; 0x13
     184:	8c 9b       	sbis	0x11, 4	; 17
     186:	62 ed       	ldi	r22, 0xD2	; 210
     188:	40 7c       	andi	r20, 0xC0	; 192
     18a:	6f fc       	.word	0xfc6f	; ????
     18c:	ef bc       	out	0x2f, r14	; 47
     18e:	9c 9f       	mul	r25, r28
     190:	40 f2       	brcs	.-112    	; 0x122 <__trampolines_end+0x28>
     192:	ba a5       	ldd	r27, Y+42	; 0x2a
     194:	6f a5       	ldd	r22, Y+47	; 0x2f
     196:	f4 90       	lpm	r15, Z
     198:	05 5a       	subi	r16, 0xA5	; 165
     19a:	2a f7       	brpl	.-54     	; 0x166 <__trampolines_end+0x6c>
     19c:	5c 93       	st	X, r21
     19e:	6b 6c       	ori	r22, 0xCB	; 203
     1a0:	f9 67       	ori	r31, 0x79	; 121
     1a2:	6d c1       	rjmp	.+730    	; 0x47e <bmp280_readPressure+0x54>
     1a4:	1b fc       	.word	0xfc1b	; ????
     1a6:	e0 e4       	ldi	r30, 0x40	; 64
     1a8:	0d 47       	sbci	r16, 0x7D	; 125
     1aa:	fe f5       	brtc	.+126    	; 0x22a <__c.2463+0x2a>
     1ac:	20 e6       	ldi	r18, 0x60	; 96
     1ae:	b5 00       	.word	0x00b5	; ????
     1b0:	d0 ed       	ldi	r29, 0xD0	; 208
     1b2:	90 2e       	mov	r9, r16
     1b4:	03 00       	.word	0x0003	; ????
     1b6:	94 35       	cpi	r25, 0x54	; 84
     1b8:	77 05       	cpc	r23, r7
     1ba:	00 80       	ld	r0, Z
     1bc:	84 1e       	adc	r8, r20
     1be:	08 00       	.word	0x0008	; ????
     1c0:	00 20       	and	r0, r0
     1c2:	4e 0a       	sbc	r4, r30
     1c4:	00 00       	nop
     1c6:	00 c8       	rjmp	.-4096   	; 0xfffff1c8 <__eeprom_end+0xff7ef1c8>
     1c8:	0c 33       	cpi	r16, 0x3C	; 60
     1ca:	33 33       	cpi	r19, 0x33	; 51
     1cc:	33 0f       	add	r19, r19
     1ce:	98 6e       	ori	r25, 0xE8	; 232
     1d0:	12 83       	std	Z+2, r17	; 0x02
     1d2:	11 41       	sbci	r17, 0x11	; 17
     1d4:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1d6:	21 14       	cp	r2, r1
     1d8:	89 3b       	cpi	r24, 0xB9	; 185
     1da:	e6 55       	subi	r30, 0x56	; 86
     1dc:	16 cf       	rjmp	.-468    	; 0xa <__FUSE_REGION_LENGTH__+0x7>
     1de:	fe e6       	ldi	r31, 0x6E	; 110
     1e0:	db 18       	sub	r13, r11
     1e2:	d1 84       	ldd	r13, Z+9	; 0x09
     1e4:	4b 38       	cpi	r20, 0x8B	; 139
     1e6:	1b f7       	brvc	.-58     	; 0x1ae <__trampolines_end+0xb4>
     1e8:	7c 1d       	adc	r23, r12
     1ea:	90 1d       	adc	r25, r0
     1ec:	a4 bb       	out	0x14, r26	; 20
     1ee:	e4 24       	eor	r14, r4
     1f0:	20 32       	cpi	r18, 0x20	; 32
     1f2:	84 72       	andi	r24, 0x24	; 36
     1f4:	5e 22       	and	r5, r30
     1f6:	81 00       	.word	0x0081	; ????
     1f8:	c9 f1       	breq	.+114    	; 0x26c <__c.2457>
     1fa:	24 ec       	ldi	r18, 0xC4	; 196
     1fc:	a1 e5       	ldi	r26, 0x51	; 81
     1fe:	3d 27       	eor	r19, r29

00000200 <__c.2463>:
     200:	0d 0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20     ..Content-Type: 
     210:	61 70 70 6c 69 63 61 74 69 6f 6e 2f 78 2d 77 77     application/x-ww
     220:	77 2d 66 6f 72 6d 2d 75 72 6c 65 6e 63 6f 64 65     w-form-urlencode
     230:	64 0d 0a 0d 0a 00                                   d.....

00000236 <__c.2461>:
     236:	43 6f 6e 74 65 6e 74 2d 4c 65 6e 67 74 68 3a 20     Content-Length: 
	...

00000247 <__c.2459>:
     247:	0d 0a 55 73 65 72 2d 41 67 65 6e 74 3a 20 74 67     ..User-Agent: tg
     257:	72 2f 31 2e 31 0d 0a 41 63 63 65 70 74 3a 20 2a     r/1.1..Accept: *
     267:	2f 2a 0d 0a 00                                      /*...

0000026c <__c.2457>:
     26c:	0d 0a 00                                            ...

0000026f <__c.2455>:
     26f:	20 48 54 54 50 2f 31 2e 31 0d 0a 48 6f 73 74 3a      HTTP/1.1..Host:
     27f:	20 00                                                .

00000281 <__c.2453>:
     281:	50 4f 53 54 20 00                                   POST .

00000287 <__c.2451>:
     287:	0d 0a 55 73 65 72 2d 41 67 65 6e 74 3a 20 74 67     ..User-Agent: tg
     297:	72 2f 31 2e 31 0d 0a 41 63 63 65 70 74 3a 20 74     r/1.1..Accept: t
     2a7:	65 78 74 2f 68 74 6d 6c 0d 0a 0d 0a 00              ext/html.....

000002b4 <__c.2449>:
     2b4:	20 48 54 54 50 2f 31 2e 31 0d 0a 48 6f 73 74 3a      HTTP/1.1..Host:
     2c4:	20 00                                                .

000002c6 <__c.2447>:
     2c6:	47 45 54 20 00                                      GET .

000002cb <arpreqhdr>:
     2cb:	00 01 08 00 06 04 00 01                             ........

000002d3 <iphdr>:
     2d3:	45 00 00 82 00 00 40 00 20                          E.....@. 

000002dc <__c.2782>:
     2dc:	43 61 6c 69 62 72 61 74 69 6f 6e 20 63 6f 6d 70     Calibration comp
     2ec:	6c 65 74 65 21 0a 00                                lete!..

000002f3 <__c.2777>:
     2f3:	43 61 6c 69 62 72 61 74 69 6f 6e 20 73 74 61 72     Calibration star
     303:	74 65 64 21 0a 00                                   ted!..

00000309 <__c.2810>:
     309:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 00              Initializing.

00000316 <__ctors_end>:
     316:	11 24       	eor	r1, r1
     318:	1f be       	out	0x3f, r1	; 63
     31a:	cf ef       	ldi	r28, 0xFF	; 255
     31c:	d0 e4       	ldi	r29, 0x40	; 64
     31e:	de bf       	out	0x3e, r29	; 62
     320:	cd bf       	out	0x3d, r28	; 61

00000322 <__do_copy_data>:
     322:	12 e0       	ldi	r17, 0x02	; 2
     324:	a0 e0       	ldi	r26, 0x00	; 0
     326:	b1 e0       	ldi	r27, 0x01	; 1
     328:	ec e3       	ldi	r30, 0x3C	; 60
     32a:	f6 e7       	ldi	r31, 0x76	; 118
     32c:	00 e0       	ldi	r16, 0x00	; 0
     32e:	0b bf       	out	0x3b, r16	; 59
     330:	02 c0       	rjmp	.+4      	; 0x336 <__do_copy_data+0x14>
     332:	07 90       	elpm	r0, Z+
     334:	0d 92       	st	X+, r0
     336:	aa 3b       	cpi	r26, 0xBA	; 186
     338:	b1 07       	cpc	r27, r17
     33a:	d9 f7       	brne	.-10     	; 0x332 <__do_copy_data+0x10>

0000033c <__do_clear_bss>:
     33c:	26 e0       	ldi	r18, 0x06	; 6
     33e:	aa eb       	ldi	r26, 0xBA	; 186
     340:	b2 e0       	ldi	r27, 0x02	; 2
     342:	01 c0       	rjmp	.+2      	; 0x346 <.do_clear_bss_start>

00000344 <.do_clear_bss_loop>:
     344:	1d 92       	st	X+, r1

00000346 <.do_clear_bss_start>:
     346:	a8 3b       	cpi	r26, 0xB8	; 184
     348:	b2 07       	cpc	r27, r18
     34a:	e1 f7       	brne	.-8      	; 0x344 <.do_clear_bss_loop>
     34c:	0e 94 db 28 	call	0x51b6	; 0x51b6 <main>
     350:	0c 94 1c 3b 	jmp	0x7638	; 0x7638 <_exit>

00000354 <__bad_interrupt>:
     354:	55 ce       	rjmp	.-854    	; 0x0 <__vectors>

00000356 <bmp280_init>:

	p = ((p + var1 + var2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
	return (float)p / 256;
}

void bmp280_init() {
     356:	cf 93       	push	r28
     358:	df 93       	push	r29
	DDRD |= (1 << BMP_CS);
     35a:	52 9a       	sbi	0x0a, 2	; 10
	PORT_CS &= ~(1<<BMP_CS); // Power On the module
     35c:	5a 98       	cbi	0x0b, 2	; 11
	spi_rwSPI(0b01110100);
     35e:	84 e7       	ldi	r24, 0x74	; 116
     360:	0e 94 64 27 	call	0x4ec8	; 0x4ec8 <spi_rwSPI>
	spi_rwSPI(0xFF);
     364:	8f ef       	ldi	r24, 0xFF	; 255
     366:	0e 94 64 27 	call	0x4ec8	; 0x4ec8 <spi_rwSPI>
	
	spi_rwSPI(0xF4);
     36a:	84 ef       	ldi	r24, 0xF4	; 244
     36c:	0e 94 64 27 	call	0x4ec8	; 0x4ec8 <spi_rwSPI>
	spi_rwSPI(0b01010111);
     370:	87 e5       	ldi	r24, 0x57	; 87
     372:	0e 94 64 27 	call	0x4ec8	; 0x4ec8 <spi_rwSPI>
	PORT_CS |= (1<<BMP_CS);
     376:	5a 9a       	sbi	0x0b, 2	; 11
#include "BMP280_SPI.h"
#include "../SPI/SPI.h"
#include "../../Options.h"

static void readCalibration() {
	_bmp280_calib.dig_T1 = spi_read16(0x88, BMP_CS);
     378:	62 e0       	ldi	r22, 0x02	; 2
     37a:	70 e0       	ldi	r23, 0x00	; 0
     37c:	88 e8       	ldi	r24, 0x88	; 136
     37e:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <spi_read16>
     382:	c9 ea       	ldi	r28, 0xA9	; 169
     384:	d3 e0       	ldi	r29, 0x03	; 3
     386:	99 83       	std	Y+1, r25	; 0x01
     388:	88 83       	st	Y, r24
	_bmp280_calib.dig_T2 = spi_readS16(0x8A, BMP_CS);
     38a:	62 e0       	ldi	r22, 0x02	; 2
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	8a e8       	ldi	r24, 0x8A	; 138
     390:	0e 94 b6 27 	call	0x4f6c	; 0x4f6c <spi_readS16>
     394:	9b 83       	std	Y+3, r25	; 0x03
     396:	8a 83       	std	Y+2, r24	; 0x02
	_bmp280_calib.dig_T3 = spi_readS16(0x8C, BMP_CS);
     398:	62 e0       	ldi	r22, 0x02	; 2
     39a:	70 e0       	ldi	r23, 0x00	; 0
     39c:	8c e8       	ldi	r24, 0x8C	; 140
     39e:	0e 94 b6 27 	call	0x4f6c	; 0x4f6c <spi_readS16>
     3a2:	9d 83       	std	Y+5, r25	; 0x05
     3a4:	8c 83       	std	Y+4, r24	; 0x04

	_bmp280_calib.dig_P1 = spi_read16(0x8E, BMP_CS);
     3a6:	62 e0       	ldi	r22, 0x02	; 2
     3a8:	70 e0       	ldi	r23, 0x00	; 0
     3aa:	8e e8       	ldi	r24, 0x8E	; 142
     3ac:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <spi_read16>
     3b0:	9f 83       	std	Y+7, r25	; 0x07
     3b2:	8e 83       	std	Y+6, r24	; 0x06
	_bmp280_calib.dig_P2 = spi_readS16(0x90, BMP_CS);
     3b4:	62 e0       	ldi	r22, 0x02	; 2
     3b6:	70 e0       	ldi	r23, 0x00	; 0
     3b8:	80 e9       	ldi	r24, 0x90	; 144
     3ba:	0e 94 b6 27 	call	0x4f6c	; 0x4f6c <spi_readS16>
     3be:	99 87       	std	Y+9, r25	; 0x09
     3c0:	88 87       	std	Y+8, r24	; 0x08
	_bmp280_calib.dig_P3 = spi_readS16(0x92, BMP_CS);
     3c2:	62 e0       	ldi	r22, 0x02	; 2
     3c4:	70 e0       	ldi	r23, 0x00	; 0
     3c6:	82 e9       	ldi	r24, 0x92	; 146
     3c8:	0e 94 b6 27 	call	0x4f6c	; 0x4f6c <spi_readS16>
     3cc:	9b 87       	std	Y+11, r25	; 0x0b
     3ce:	8a 87       	std	Y+10, r24	; 0x0a
	_bmp280_calib.dig_P4 = spi_readS16(0x94, BMP_CS);
     3d0:	62 e0       	ldi	r22, 0x02	; 2
     3d2:	70 e0       	ldi	r23, 0x00	; 0
     3d4:	84 e9       	ldi	r24, 0x94	; 148
     3d6:	0e 94 b6 27 	call	0x4f6c	; 0x4f6c <spi_readS16>
     3da:	9d 87       	std	Y+13, r25	; 0x0d
     3dc:	8c 87       	std	Y+12, r24	; 0x0c
	_bmp280_calib.dig_P5 = spi_readS16(0x96, BMP_CS);
     3de:	62 e0       	ldi	r22, 0x02	; 2
     3e0:	70 e0       	ldi	r23, 0x00	; 0
     3e2:	86 e9       	ldi	r24, 0x96	; 150
     3e4:	0e 94 b6 27 	call	0x4f6c	; 0x4f6c <spi_readS16>
     3e8:	9f 87       	std	Y+15, r25	; 0x0f
     3ea:	8e 87       	std	Y+14, r24	; 0x0e
	_bmp280_calib.dig_P6 = spi_readS16(0x98, BMP_CS);
     3ec:	62 e0       	ldi	r22, 0x02	; 2
     3ee:	70 e0       	ldi	r23, 0x00	; 0
     3f0:	88 e9       	ldi	r24, 0x98	; 152
     3f2:	0e 94 b6 27 	call	0x4f6c	; 0x4f6c <spi_readS16>
     3f6:	99 8b       	std	Y+17, r25	; 0x11
     3f8:	88 8b       	std	Y+16, r24	; 0x10
	_bmp280_calib.dig_P7 = spi_readS16(0x9A, BMP_CS);
     3fa:	62 e0       	ldi	r22, 0x02	; 2
     3fc:	70 e0       	ldi	r23, 0x00	; 0
     3fe:	8a e9       	ldi	r24, 0x9A	; 154
     400:	0e 94 b6 27 	call	0x4f6c	; 0x4f6c <spi_readS16>
     404:	9b 8b       	std	Y+19, r25	; 0x13
     406:	8a 8b       	std	Y+18, r24	; 0x12
	_bmp280_calib.dig_P8 = spi_readS16(0x9C, BMP_CS);
     408:	62 e0       	ldi	r22, 0x02	; 2
     40a:	70 e0       	ldi	r23, 0x00	; 0
     40c:	8c e9       	ldi	r24, 0x9C	; 156
     40e:	0e 94 b6 27 	call	0x4f6c	; 0x4f6c <spi_readS16>
     412:	9d 8b       	std	Y+21, r25	; 0x15
     414:	8c 8b       	std	Y+20, r24	; 0x14
	_bmp280_calib.dig_P9 = spi_readS16(0x9E, BMP_CS);
     416:	62 e0       	ldi	r22, 0x02	; 2
     418:	70 e0       	ldi	r23, 0x00	; 0
     41a:	8e e9       	ldi	r24, 0x9E	; 158
     41c:	0e 94 b6 27 	call	0x4f6c	; 0x4f6c <spi_readS16>
     420:	9f 8b       	std	Y+23, r25	; 0x17
     422:	8e 8b       	std	Y+22, r24	; 0x16
	spi_rwSPI(0xF4);
	spi_rwSPI(0b01010111);
	PORT_CS |= (1<<BMP_CS);
	
	readCalibration();
}
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	08 95       	ret

0000042a <bmp280_readPressure>:

float bmp280_readPressure()
{
     42a:	2f 92       	push	r2
     42c:	3f 92       	push	r3
     42e:	4f 92       	push	r4
     430:	5f 92       	push	r5
     432:	6f 92       	push	r6
     434:	7f 92       	push	r7
     436:	8f 92       	push	r8
     438:	9f 92       	push	r9
     43a:	af 92       	push	r10
     43c:	bf 92       	push	r11
     43e:	cf 92       	push	r12
     440:	df 92       	push	r13
     442:	ef 92       	push	r14
     444:	ff 92       	push	r15
     446:	0f 93       	push	r16
     448:	1f 93       	push	r17
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
     44e:	cd b7       	in	r28, 0x3d	; 61
     450:	de b7       	in	r29, 0x3e	; 62
     452:	6f 97       	sbiw	r28, 0x1f	; 31
     454:	0f b6       	in	r0, 0x3f	; 63
     456:	f8 94       	cli
     458:	de bf       	out	0x3e, r29	; 62
     45a:	0f be       	out	0x3f, r0	; 63
     45c:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[6]; // Array to hold temp/pressure values (pressure in indices 0:2, and temp in indices 3:5)
	uint32_t pressureUncomp, tempUncomp;
	
	spi_BurstRead(0xF7, data, 6, BMP_CS);
     45e:	22 e0       	ldi	r18, 0x02	; 2
     460:	30 e0       	ldi	r19, 0x00	; 0
     462:	46 e0       	ldi	r20, 0x06	; 6
     464:	be 01       	movw	r22, r28
     466:	6f 5f       	subi	r22, 0xFF	; 255
     468:	7f 4f       	sbci	r23, 0xFF	; 255
     46a:	87 ef       	ldi	r24, 0xF7	; 247
     46c:	0e 94 6a 27 	call	0x4ed4	; 0x4ed4 <spi_BurstRead>
	tempUncomp = ((uint32_t)data[3]<<12) | ((uint32_t)data[4] << 4) | data[5]; // 20 bit temp val
	pressureUncomp = ((uint32_t)data[0]<<12) | ((uint32_t)data[1] << 4) | data[2]; // 20 bit pressure value
     470:	89 80       	ldd	r8, Y+1	; 0x01
     472:	8d 8e       	std	Y+29, r8	; 0x1d
     474:	9a 80       	ldd	r9, Y+2	; 0x02
     476:	9e 8e       	std	Y+30, r9	; 0x1e
     478:	8b 80       	ldd	r8, Y+3	; 0x03
     47a:	8f 8e       	std	Y+31, r8	; 0x1f
	bmp280_compensate_T_int32(tempUncomp);
     47c:	8c 81       	ldd	r24, Y+4	; 0x04
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	a0 e0       	ldi	r26, 0x00	; 0
     482:	b0 e0       	ldi	r27, 0x00	; 0
     484:	ac 01       	movw	r20, r24
     486:	bd 01       	movw	r22, r26
     488:	03 2e       	mov	r0, r19
     48a:	3c e0       	ldi	r19, 0x0C	; 12
     48c:	44 0f       	add	r20, r20
     48e:	55 1f       	adc	r21, r21
     490:	66 1f       	adc	r22, r22
     492:	77 1f       	adc	r23, r23
     494:	3a 95       	dec	r19
     496:	d1 f7       	brne	.-12     	; 0x48c <bmp280_readPressure+0x62>
     498:	30 2d       	mov	r19, r0
     49a:	9d 81       	ldd	r25, Y+5	; 0x05
     49c:	89 2f       	mov	r24, r25
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	a0 e0       	ldi	r26, 0x00	; 0
     4a2:	b0 e0       	ldi	r27, 0x00	; 0
     4a4:	88 0f       	add	r24, r24
     4a6:	99 1f       	adc	r25, r25
     4a8:	aa 1f       	adc	r26, r26
     4aa:	bb 1f       	adc	r27, r27
     4ac:	88 0f       	add	r24, r24
     4ae:	99 1f       	adc	r25, r25
     4b0:	aa 1f       	adc	r26, r26
     4b2:	bb 1f       	adc	r27, r27
     4b4:	88 0f       	add	r24, r24
     4b6:	99 1f       	adc	r25, r25
     4b8:	aa 1f       	adc	r26, r26
     4ba:	bb 1f       	adc	r27, r27
     4bc:	88 0f       	add	r24, r24
     4be:	99 1f       	adc	r25, r25
     4c0:	aa 1f       	adc	r26, r26
     4c2:	bb 1f       	adc	r27, r27
     4c4:	84 2b       	or	r24, r20
     4c6:	95 2b       	or	r25, r21
     4c8:	a6 2b       	or	r26, r22
     4ca:	b7 2b       	or	r27, r23
     4cc:	2e 81       	ldd	r18, Y+6	; 0x06
     4ce:	82 2b       	or	r24, r18
}

static float bmp280_compensate_T_int32(int32_t adc_T)
{
	int32_t var1, var2;
	var1 = ((((adc_T>>3) - ((int32_t)_bmp280_calib.dig_T1<<1))) * ((int32_t)_bmp280_calib.dig_T2)) >> 11;
     4d0:	0f 2e       	mov	r0, r31
     4d2:	f9 ea       	ldi	r31, 0xA9	; 169
     4d4:	6f 2e       	mov	r6, r31
     4d6:	f3 e0       	ldi	r31, 0x03	; 3
     4d8:	7f 2e       	mov	r7, r31
     4da:	f0 2d       	mov	r31, r0
     4dc:	f3 01       	movw	r30, r6
     4de:	40 81       	ld	r20, Z
     4e0:	51 81       	ldd	r21, Z+1	; 0x01
     4e2:	60 e0       	ldi	r22, 0x00	; 0
     4e4:	70 e0       	ldi	r23, 0x00	; 0
	var2 = (((((adc_T>>4) - ((int32_t)_bmp280_calib.dig_T1)) * ((adc_T>>4) - ((int32_t)_bmp280_calib.dig_T1))) >> 12) * ((int32_t)_bmp280_calib.dig_T3)) >> 14;
     4e6:	6c 01       	movw	r12, r24
     4e8:	7d 01       	movw	r14, r26
     4ea:	68 94       	set
     4ec:	13 f8       	bld	r1, 3
     4ee:	f5 94       	asr	r15
     4f0:	e7 94       	ror	r14
     4f2:	d7 94       	ror	r13
     4f4:	c7 94       	ror	r12
     4f6:	16 94       	lsr	r1
     4f8:	d1 f7       	brne	.-12     	; 0x4ee <bmp280_readPressure+0xc4>
     4fa:	c4 1a       	sub	r12, r20
     4fc:	d5 0a       	sbc	r13, r21
     4fe:	e6 0a       	sbc	r14, r22
     500:	f7 0a       	sbc	r15, r23
	t_fine = var1 + var2;
     502:	68 94       	set
     504:	12 f8       	bld	r1, 2
     506:	b5 95       	asr	r27
     508:	a7 95       	ror	r26
     50a:	97 95       	ror	r25
     50c:	87 95       	ror	r24
     50e:	16 94       	lsr	r1
     510:	d1 f7       	brne	.-12     	; 0x506 <bmp280_readPressure+0xdc>
     512:	44 0f       	add	r20, r20
     514:	55 1f       	adc	r21, r21
     516:	66 1f       	adc	r22, r22
     518:	77 1f       	adc	r23, r23
     51a:	4c 01       	movw	r8, r24
     51c:	5d 01       	movw	r10, r26
     51e:	84 1a       	sub	r8, r20
     520:	95 0a       	sbc	r9, r21
     522:	a6 0a       	sbc	r10, r22
     524:	b7 0a       	sbc	r11, r23
     526:	a5 01       	movw	r20, r10
     528:	94 01       	movw	r18, r8
     52a:	a2 81       	ldd	r26, Z+2	; 0x02
     52c:	b3 81       	ldd	r27, Z+3	; 0x03
     52e:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__mulshisi3>
     532:	4b 01       	movw	r8, r22
     534:	5c 01       	movw	r10, r24
     536:	07 2e       	mov	r0, r23
     538:	7b e0       	ldi	r23, 0x0B	; 11
     53a:	b5 94       	asr	r11
     53c:	a7 94       	ror	r10
     53e:	97 94       	ror	r9
     540:	87 94       	ror	r8
     542:	7a 95       	dec	r23
     544:	d1 f7       	brne	.-12     	; 0x53a <bmp280_readPressure+0x110>
     546:	70 2d       	mov	r23, r0
     548:	a7 01       	movw	r20, r14
     54a:	96 01       	movw	r18, r12
     54c:	c7 01       	movw	r24, r14
     54e:	b6 01       	movw	r22, r12
     550:	0e 94 e9 2d 	call	0x5bd2	; 0x5bd2 <__mulsi3>
     554:	9b 01       	movw	r18, r22
     556:	ac 01       	movw	r20, r24
     558:	01 2e       	mov	r0, r17
     55a:	1c e0       	ldi	r17, 0x0C	; 12
     55c:	55 95       	asr	r21
     55e:	47 95       	ror	r20
     560:	37 95       	ror	r19
     562:	27 95       	ror	r18
     564:	1a 95       	dec	r17
     566:	d1 f7       	brne	.-12     	; 0x55c <bmp280_readPressure+0x132>
     568:	10 2d       	mov	r17, r0
     56a:	a4 81       	ldd	r26, Z+4	; 0x04
     56c:	b5 81       	ldd	r27, Z+5	; 0x05
     56e:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__mulshisi3>
     572:	dc 01       	movw	r26, r24
     574:	cb 01       	movw	r24, r22
     576:	07 2e       	mov	r0, r23
     578:	7e e0       	ldi	r23, 0x0E	; 14
     57a:	b5 95       	asr	r27
     57c:	a7 95       	ror	r26
     57e:	97 95       	ror	r25
     580:	87 95       	ror	r24
     582:	7a 95       	dec	r23
     584:	d1 f7       	brne	.-12     	; 0x57a <bmp280_readPressure+0x150>
     586:	70 2d       	mov	r23, r0
     588:	88 0d       	add	r24, r8
     58a:	99 1d       	adc	r25, r9
     58c:	aa 1d       	adc	r26, r10
     58e:	bb 1d       	adc	r27, r11
     590:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <t_fine>
     594:	90 93 cb 03 	sts	0x03CB, r25	; 0x8003cb <t_fine+0x1>
     598:	a0 93 cc 03 	sts	0x03CC, r26	; 0x8003cc <t_fine+0x2>
     59c:	b0 93 cd 03 	sts	0x03CD, r27	; 0x8003cd <t_fine+0x3>

static float bmp280_compensate_pressure(int32_t adc_P)
{
	int64_t var1, var2, p;

	var1 = ((int64_t)t_fine) - 128000;
     5a0:	6c 01       	movw	r12, r24
     5a2:	7d 01       	movw	r14, r26
     5a4:	ff 0c       	add	r15, r15
     5a6:	cc 08       	sbc	r12, r12
     5a8:	dc 2c       	mov	r13, r12
     5aa:	76 01       	movw	r14, r12
     5ac:	28 2f       	mov	r18, r24
     5ae:	39 2f       	mov	r19, r25
     5b0:	4a 2f       	mov	r20, r26
     5b2:	5b 2f       	mov	r21, r27
     5b4:	6c 2d       	mov	r22, r12
     5b6:	7c 2d       	mov	r23, r12
     5b8:	8c 2d       	mov	r24, r12
     5ba:	9c 2d       	mov	r25, r12
     5bc:	34 5f       	subi	r19, 0xF4	; 244
     5be:	41 40       	sbci	r20, 0x01	; 1
     5c0:	51 09       	sbc	r21, r1
     5c2:	61 09       	sbc	r22, r1
     5c4:	71 09       	sbc	r23, r1
     5c6:	81 09       	sbc	r24, r1
     5c8:	91 09       	sbc	r25, r1
     5ca:	2f 83       	std	Y+7, r18	; 0x07
     5cc:	3a 87       	std	Y+10, r19	; 0x0a
     5ce:	4b 87       	std	Y+11, r20	; 0x0b
     5d0:	5c 87       	std	Y+12, r21	; 0x0c
     5d2:	6d 87       	std	Y+13, r22	; 0x0d
     5d4:	7e 87       	std	Y+14, r23	; 0x0e
     5d6:	8f 87       	std	Y+15, r24	; 0x0f
     5d8:	98 8b       	std	Y+16, r25	; 0x10
	var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
     5da:	a2 2e       	mov	r10, r18
     5dc:	b3 2e       	mov	r11, r19
     5de:	c4 2e       	mov	r12, r20
     5e0:	d5 2e       	mov	r13, r21
     5e2:	e6 2e       	mov	r14, r22
     5e4:	f7 2e       	mov	r15, r23
     5e6:	08 2f       	mov	r16, r24
     5e8:	19 2f       	mov	r17, r25
     5ea:	0e 94 33 2e 	call	0x5c66	; 0x5c66 <__muldi3>
     5ee:	29 8b       	std	Y+17, r18	; 0x11
     5f0:	3a 8b       	std	Y+18, r19	; 0x12
     5f2:	4b 8b       	std	Y+19, r20	; 0x13
     5f4:	5c 8b       	std	Y+20, r21	; 0x14
     5f6:	69 8f       	std	Y+25, r22	; 0x19
     5f8:	7a 8f       	std	Y+26, r23	; 0x1a
     5fa:	8b 8f       	std	Y+27, r24	; 0x1b
     5fc:	9c 8f       	std	Y+28, r25	; 0x1c
	var2 = var2 + ((var1 * (int64_t)_bmp280_calib.dig_P5) << 17);
	var2 = var2 + (((int64_t)_bmp280_calib.dig_P4) << 35);
	var1 = ((var1 * var1 * (int64_t)_bmp280_calib.dig_P3) >> 8) +
	((var1 * (int64_t)_bmp280_calib.dig_P2) << 12);
     5fe:	d3 01       	movw	r26, r6
     600:	19 96       	adiw	r26, 0x09	; 9
     602:	3c 91       	ld	r19, X
     604:	19 97       	sbiw	r26, 0x09	; 9
     606:	18 96       	adiw	r26, 0x08	; 8
     608:	2c 91       	ld	r18, X
     60a:	93 2f       	mov	r25, r19
     60c:	99 0f       	add	r25, r25
     60e:	99 0b       	sbc	r25, r25
     610:	49 2f       	mov	r20, r25
     612:	59 2f       	mov	r21, r25
     614:	69 2f       	mov	r22, r25
     616:	79 2f       	mov	r23, r25
     618:	89 2f       	mov	r24, r25
     61a:	0e 94 33 2e 	call	0x5c66	; 0x5c66 <__muldi3>
     61e:	0c e0       	ldi	r16, 0x0C	; 12
     620:	0e 94 54 2f 	call	0x5ea8	; 0x5ea8 <__ashldi3>
     624:	22 2e       	mov	r2, r18
     626:	33 2e       	mov	r3, r19
     628:	44 2e       	mov	r4, r20
     62a:	55 2e       	mov	r5, r21
     62c:	68 87       	std	Y+8, r22	; 0x08
     62e:	79 87       	std	Y+9, r23	; 0x09
     630:	88 2e       	mov	r8, r24
     632:	99 2e       	mov	r9, r25
	var1 =
	(((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;
     634:	f3 01       	movw	r30, r6
     636:	33 85       	ldd	r19, Z+11	; 0x0b
     638:	22 85       	ldd	r18, Z+10	; 0x0a
     63a:	93 2f       	mov	r25, r19
     63c:	99 0f       	add	r25, r25
     63e:	99 0b       	sbc	r25, r25
     640:	a9 88       	ldd	r10, Y+17	; 0x11
     642:	ba 88       	ldd	r11, Y+18	; 0x12
     644:	cb 88       	ldd	r12, Y+19	; 0x13
     646:	dc 88       	ldd	r13, Y+20	; 0x14
     648:	e9 8c       	ldd	r14, Y+25	; 0x19
     64a:	fa 8c       	ldd	r15, Y+26	; 0x1a
     64c:	0b 8d       	ldd	r16, Y+27	; 0x1b
     64e:	1c 8d       	ldd	r17, Y+28	; 0x1c
     650:	49 2f       	mov	r20, r25
     652:	59 2f       	mov	r21, r25
     654:	69 2f       	mov	r22, r25
     656:	79 2f       	mov	r23, r25
     658:	89 2f       	mov	r24, r25
     65a:	0e 94 33 2e 	call	0x5c66	; 0x5c66 <__muldi3>
     65e:	08 e0       	ldi	r16, 0x08	; 8
     660:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <__ashrdi3>
     664:	a2 2c       	mov	r10, r2
     666:	b3 2c       	mov	r11, r3
     668:	c4 2c       	mov	r12, r4
     66a:	d5 2c       	mov	r13, r5
     66c:	e8 84       	ldd	r14, Y+8	; 0x08
     66e:	f9 84       	ldd	r15, Y+9	; 0x09
     670:	08 2d       	mov	r16, r8
     672:	19 2d       	mov	r17, r9
     674:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <__adddi3>
     678:	70 58       	subi	r23, 0x80	; 128
     67a:	8f 4f       	sbci	r24, 0xFF	; 255
     67c:	9f 4f       	sbci	r25, 0xFF	; 255
     67e:	d3 01       	movw	r26, r6
     680:	16 96       	adiw	r26, 0x06	; 6
     682:	2d 90       	ld	r2, X+
     684:	3c 90       	ld	r3, X
     686:	17 97       	sbiw	r26, 0x07	; 7
     688:	a2 2c       	mov	r10, r2
     68a:	b3 2c       	mov	r11, r3
     68c:	c1 2c       	mov	r12, r1
     68e:	d1 2c       	mov	r13, r1
     690:	e1 2c       	mov	r14, r1
     692:	f1 2c       	mov	r15, r1
     694:	00 e0       	ldi	r16, 0x00	; 0
     696:	10 e0       	ldi	r17, 0x00	; 0
     698:	0e 94 33 2e 	call	0x5c66	; 0x5c66 <__muldi3>
	var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
	var2 = var2 + ((var1 * (int64_t)_bmp280_calib.dig_P5) << 17);
	var2 = var2 + (((int64_t)_bmp280_calib.dig_P4) << 35);
	var1 = ((var1 * var1 * (int64_t)_bmp280_calib.dig_P3) >> 8) +
	((var1 * (int64_t)_bmp280_calib.dig_P2) << 12);
	var1 =
     69c:	01 e2       	ldi	r16, 0x21	; 33
     69e:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <__ashrdi3>
     6a2:	28 87       	std	Y+8, r18	; 0x08
     6a4:	39 87       	std	Y+9, r19	; 0x09
     6a6:	4d 8b       	std	Y+21, r20	; 0x15
     6a8:	5e 8b       	std	Y+22, r21	; 0x16
     6aa:	6f 8b       	std	Y+23, r22	; 0x17
     6ac:	78 8f       	std	Y+24, r23	; 0x18
     6ae:	58 2e       	mov	r5, r24
     6b0:	49 2e       	mov	r4, r25
	(((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;

	if (var1 == 0) {
     6b2:	a0 e0       	ldi	r26, 0x00	; 0
     6b4:	0e 94 9d 2f 	call	0x5f3a	; 0x5f3a <__cmpdi2_s8>
     6b8:	09 f4       	brne	.+2      	; 0x6bc <bmp280_readPressure+0x292>
     6ba:	65 c1       	rjmp	.+714    	; 0x986 <bmp280_readPressure+0x55c>
static float bmp280_compensate_pressure(int32_t adc_P)
{
	int64_t var1, var2, p;

	var1 = ((int64_t)t_fine) - 128000;
	var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
     6bc:	0f 2e       	mov	r0, r31
     6be:	f9 ea       	ldi	r31, 0xA9	; 169
     6c0:	2f 2e       	mov	r2, r31
     6c2:	f3 e0       	ldi	r31, 0x03	; 3
     6c4:	3f 2e       	mov	r3, r31
     6c6:	f0 2d       	mov	r31, r0
     6c8:	f1 01       	movw	r30, r2
     6ca:	31 89       	ldd	r19, Z+17	; 0x11
     6cc:	20 89       	ldd	r18, Z+16	; 0x10
     6ce:	93 2f       	mov	r25, r19
     6d0:	99 0f       	add	r25, r25
     6d2:	99 0b       	sbc	r25, r25
     6d4:	a9 88       	ldd	r10, Y+17	; 0x11
     6d6:	ba 88       	ldd	r11, Y+18	; 0x12
     6d8:	cb 88       	ldd	r12, Y+19	; 0x13
     6da:	dc 88       	ldd	r13, Y+20	; 0x14
     6dc:	e9 8c       	ldd	r14, Y+25	; 0x19
     6de:	fa 8c       	ldd	r15, Y+26	; 0x1a
     6e0:	0b 8d       	ldd	r16, Y+27	; 0x1b
     6e2:	1c 8d       	ldd	r17, Y+28	; 0x1c
     6e4:	49 2f       	mov	r20, r25
     6e6:	59 2f       	mov	r21, r25
     6e8:	69 2f       	mov	r22, r25
     6ea:	79 2f       	mov	r23, r25
     6ec:	89 2f       	mov	r24, r25
     6ee:	0e 94 33 2e 	call	0x5c66	; 0x5c66 <__muldi3>
     6f2:	29 8b       	std	Y+17, r18	; 0x11
     6f4:	3a 8b       	std	Y+18, r19	; 0x12
     6f6:	4b 8b       	std	Y+19, r20	; 0x13
     6f8:	5c 8b       	std	Y+20, r21	; 0x14
     6fa:	66 2e       	mov	r6, r22
     6fc:	77 2e       	mov	r7, r23
     6fe:	88 2e       	mov	r8, r24
     700:	99 2e       	mov	r9, r25
	var2 = var2 + ((var1 * (int64_t)_bmp280_calib.dig_P5) << 17);
     702:	d1 01       	movw	r26, r2
     704:	1f 96       	adiw	r26, 0x0f	; 15
     706:	3c 91       	ld	r19, X
     708:	1f 97       	sbiw	r26, 0x0f	; 15
     70a:	1e 96       	adiw	r26, 0x0e	; 14
     70c:	2c 91       	ld	r18, X
     70e:	93 2f       	mov	r25, r19
     710:	99 0f       	add	r25, r25
     712:	99 0b       	sbc	r25, r25
     714:	af 80       	ldd	r10, Y+7	; 0x07
     716:	ba 84       	ldd	r11, Y+10	; 0x0a
     718:	cb 84       	ldd	r12, Y+11	; 0x0b
     71a:	dc 84       	ldd	r13, Y+12	; 0x0c
     71c:	ed 84       	ldd	r14, Y+13	; 0x0d
     71e:	fe 84       	ldd	r15, Y+14	; 0x0e
     720:	0f 85       	ldd	r16, Y+15	; 0x0f
     722:	18 89       	ldd	r17, Y+16	; 0x10
     724:	49 2f       	mov	r20, r25
     726:	59 2f       	mov	r21, r25
     728:	69 2f       	mov	r22, r25
     72a:	79 2f       	mov	r23, r25
     72c:	89 2f       	mov	r24, r25
     72e:	0e 94 33 2e 	call	0x5c66	; 0x5c66 <__muldi3>
     732:	01 e1       	ldi	r16, 0x11	; 17
     734:	0e 94 54 2f 	call	0x5ea8	; 0x5ea8 <__ashldi3>
     738:	a9 88       	ldd	r10, Y+17	; 0x11
     73a:	ba 88       	ldd	r11, Y+18	; 0x12
     73c:	cb 88       	ldd	r12, Y+19	; 0x13
     73e:	dc 88       	ldd	r13, Y+20	; 0x14
     740:	e6 2c       	mov	r14, r6
     742:	f7 2c       	mov	r15, r7
     744:	08 2d       	mov	r16, r8
     746:	19 2d       	mov	r17, r9
     748:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <__adddi3>
     74c:	a2 2e       	mov	r10, r18
     74e:	b3 2e       	mov	r11, r19
     750:	c4 2e       	mov	r12, r20
     752:	d5 2e       	mov	r13, r21
     754:	e6 2e       	mov	r14, r22
     756:	f7 2e       	mov	r15, r23
     758:	8f 83       	std	Y+7, r24	; 0x07
     75a:	19 2f       	mov	r17, r25

	if (var1 == 0) {
		return 0; // avoid exception caused by division by zero
	}
	p = 1048576 - adc_P;
	p = (((p << 31) - var2) * 3125) / var1;
     75c:	8d 8c       	ldd	r8, Y+29	; 0x1d
     75e:	48 2d       	mov	r20, r8
     760:	50 e0       	ldi	r21, 0x00	; 0
     762:	60 e0       	ldi	r22, 0x00	; 0
     764:	70 e0       	ldi	r23, 0x00	; 0
     766:	db 01       	movw	r26, r22
     768:	ca 01       	movw	r24, r20
     76a:	07 2e       	mov	r0, r23
     76c:	7c e0       	ldi	r23, 0x0C	; 12
     76e:	88 0f       	add	r24, r24
     770:	99 1f       	adc	r25, r25
     772:	aa 1f       	adc	r26, r26
     774:	bb 1f       	adc	r27, r27
     776:	7a 95       	dec	r23
     778:	d1 f7       	brne	.-12     	; 0x76e <bmp280_readPressure+0x344>
     77a:	70 2d       	mov	r23, r0
     77c:	9e 8c       	ldd	r9, Y+30	; 0x1e
     77e:	49 2d       	mov	r20, r9
     780:	50 e0       	ldi	r21, 0x00	; 0
     782:	60 e0       	ldi	r22, 0x00	; 0
     784:	70 e0       	ldi	r23, 0x00	; 0
     786:	44 0f       	add	r20, r20
     788:	55 1f       	adc	r21, r21
     78a:	66 1f       	adc	r22, r22
     78c:	77 1f       	adc	r23, r23
     78e:	44 0f       	add	r20, r20
     790:	55 1f       	adc	r21, r21
     792:	66 1f       	adc	r22, r22
     794:	77 1f       	adc	r23, r23
     796:	44 0f       	add	r20, r20
     798:	55 1f       	adc	r21, r21
     79a:	66 1f       	adc	r22, r22
     79c:	77 1f       	adc	r23, r23
     79e:	44 0f       	add	r20, r20
     7a0:	55 1f       	adc	r21, r21
     7a2:	66 1f       	adc	r22, r22
     7a4:	77 1f       	adc	r23, r23
     7a6:	48 2b       	or	r20, r24
     7a8:	59 2b       	or	r21, r25
     7aa:	6a 2b       	or	r22, r26
     7ac:	7b 2b       	or	r23, r27
     7ae:	8f 8c       	ldd	r8, Y+31	; 0x1f
     7b0:	48 29       	or	r20, r8
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	a0 e1       	ldi	r26, 0x10	; 16
     7b8:	b0 e0       	ldi	r27, 0x00	; 0
     7ba:	84 1b       	sub	r24, r20
     7bc:	95 0b       	sbc	r25, r21
     7be:	a6 0b       	sbc	r26, r22
     7c0:	b7 0b       	sbc	r27, r23
     7c2:	3c 01       	movw	r6, r24
     7c4:	4d 01       	movw	r8, r26
     7c6:	99 0c       	add	r9, r9
     7c8:	66 08       	sbc	r6, r6
     7ca:	76 2c       	mov	r7, r6
     7cc:	43 01       	movw	r8, r6
     7ce:	28 2f       	mov	r18, r24
     7d0:	39 2f       	mov	r19, r25
     7d2:	4a 2f       	mov	r20, r26
     7d4:	5b 2f       	mov	r21, r27
     7d6:	66 2d       	mov	r22, r6
     7d8:	76 2d       	mov	r23, r6
     7da:	86 2d       	mov	r24, r6
     7dc:	96 2d       	mov	r25, r6
     7de:	0f e1       	ldi	r16, 0x1F	; 31
     7e0:	0e 94 54 2f 	call	0x5ea8	; 0x5ea8 <__ashldi3>
     7e4:	62 2e       	mov	r6, r18
     7e6:	73 2e       	mov	r7, r19
     7e8:	84 2e       	mov	r8, r20
     7ea:	95 2e       	mov	r9, r21
     7ec:	b6 2f       	mov	r27, r22
     7ee:	a7 2f       	mov	r26, r23
     7f0:	8a 87       	std	Y+10, r24	; 0x0a
     7f2:	9b 87       	std	Y+11, r25	; 0x0b
     7f4:	f1 01       	movw	r30, r2
     7f6:	35 85       	ldd	r19, Z+13	; 0x0d
     7f8:	24 85       	ldd	r18, Z+12	; 0x0c
     7fa:	93 2f       	mov	r25, r19
     7fc:	99 0f       	add	r25, r25
     7fe:	99 0b       	sbc	r25, r25
     800:	49 2f       	mov	r20, r25
     802:	59 2f       	mov	r21, r25
     804:	69 2f       	mov	r22, r25
     806:	79 2f       	mov	r23, r25
     808:	89 2f       	mov	r24, r25
     80a:	03 e2       	ldi	r16, 0x23	; 35
     80c:	0e 94 54 2f 	call	0x5ea8	; 0x5ea8 <__ashldi3>
     810:	0f 81       	ldd	r16, Y+7	; 0x07
     812:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <__adddi3>
     816:	a2 2e       	mov	r10, r18
     818:	b3 2e       	mov	r11, r19
     81a:	c4 2e       	mov	r12, r20
     81c:	d5 2e       	mov	r13, r21
     81e:	e6 2e       	mov	r14, r22
     820:	f7 2e       	mov	r15, r23
     822:	08 2f       	mov	r16, r24
     824:	19 2f       	mov	r17, r25
     826:	26 2d       	mov	r18, r6
     828:	37 2d       	mov	r19, r7
     82a:	48 2d       	mov	r20, r8
     82c:	59 2d       	mov	r21, r9
     82e:	6b 2f       	mov	r22, r27
     830:	7a 2f       	mov	r23, r26
     832:	8a 85       	ldd	r24, Y+10	; 0x0a
     834:	9b 85       	ldd	r25, Y+11	; 0x0b
     836:	0e 94 94 2f 	call	0x5f28	; 0x5f28 <__subdi3>
     83a:	0f 2e       	mov	r0, r31
     83c:	f5 e3       	ldi	r31, 0x35	; 53
     83e:	af 2e       	mov	r10, r31
     840:	f0 2d       	mov	r31, r0
     842:	0f 2e       	mov	r0, r31
     844:	fc e0       	ldi	r31, 0x0C	; 12
     846:	bf 2e       	mov	r11, r31
     848:	f0 2d       	mov	r31, r0
     84a:	c1 2c       	mov	r12, r1
     84c:	d1 2c       	mov	r13, r1
     84e:	e1 2c       	mov	r14, r1
     850:	f1 2c       	mov	r15, r1
     852:	00 e0       	ldi	r16, 0x00	; 0
     854:	10 e0       	ldi	r17, 0x00	; 0
     856:	0e 94 33 2e 	call	0x5c66	; 0x5c66 <__muldi3>
     85a:	a8 84       	ldd	r10, Y+8	; 0x08
     85c:	b9 84       	ldd	r11, Y+9	; 0x09
     85e:	cd 88       	ldd	r12, Y+21	; 0x15
     860:	de 88       	ldd	r13, Y+22	; 0x16
     862:	ef 88       	ldd	r14, Y+23	; 0x17
     864:	f8 8c       	ldd	r15, Y+24	; 0x18
     866:	05 2d       	mov	r16, r5
     868:	14 2d       	mov	r17, r4
     86a:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <__divdi3>
     86e:	2f 83       	std	Y+7, r18	; 0x07
     870:	3a 87       	std	Y+10, r19	; 0x0a
     872:	4b 87       	std	Y+11, r20	; 0x0b
     874:	5c 87       	std	Y+12, r21	; 0x0c
     876:	6d 87       	std	Y+13, r22	; 0x0d
     878:	7e 87       	std	Y+14, r23	; 0x0e
     87a:	8f 87       	std	Y+15, r24	; 0x0f
     87c:	98 8b       	std	Y+16, r25	; 0x10
	var1 = (((int64_t)_bmp280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
     87e:	0d e0       	ldi	r16, 0x0D	; 13
     880:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <__ashrdi3>
     884:	92 2e       	mov	r9, r18
     886:	83 2e       	mov	r8, r19
     888:	74 2e       	mov	r7, r20
     88a:	65 2e       	mov	r6, r21
     88c:	56 2e       	mov	r5, r22
     88e:	47 2e       	mov	r4, r23
     890:	88 87       	std	Y+8, r24	; 0x08
     892:	99 87       	std	Y+9, r25	; 0x09
	var2 = (((int64_t)_bmp280_calib.dig_P8) * p) >> 19;

	p = ((p + var1 + var2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
     894:	d1 01       	movw	r26, r2
     896:	57 96       	adiw	r26, 0x17	; 23
     898:	3c 91       	ld	r19, X
     89a:	57 97       	sbiw	r26, 0x17	; 23
     89c:	56 96       	adiw	r26, 0x16	; 22
     89e:	2c 91       	ld	r18, X
     8a0:	93 2f       	mov	r25, r19
     8a2:	99 0f       	add	r25, r25
     8a4:	99 0b       	sbc	r25, r25
     8a6:	a9 2c       	mov	r10, r9
     8a8:	b8 2c       	mov	r11, r8
     8aa:	c7 2c       	mov	r12, r7
     8ac:	d6 2c       	mov	r13, r6
     8ae:	e5 2c       	mov	r14, r5
     8b0:	f4 2c       	mov	r15, r4
     8b2:	08 2f       	mov	r16, r24
     8b4:	19 85       	ldd	r17, Y+9	; 0x09
     8b6:	49 2f       	mov	r20, r25
     8b8:	59 2f       	mov	r21, r25
     8ba:	69 2f       	mov	r22, r25
     8bc:	79 2f       	mov	r23, r25
     8be:	89 2f       	mov	r24, r25
     8c0:	0e 94 33 2e 	call	0x5c66	; 0x5c66 <__muldi3>
     8c4:	0e 94 33 2e 	call	0x5c66	; 0x5c66 <__muldi3>
     8c8:	09 e1       	ldi	r16, 0x19	; 25
     8ca:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <__ashrdi3>
     8ce:	af 80       	ldd	r10, Y+7	; 0x07
     8d0:	ba 84       	ldd	r11, Y+10	; 0x0a
     8d2:	cb 84       	ldd	r12, Y+11	; 0x0b
     8d4:	dc 84       	ldd	r13, Y+12	; 0x0c
     8d6:	ed 84       	ldd	r14, Y+13	; 0x0d
     8d8:	fe 84       	ldd	r15, Y+14	; 0x0e
     8da:	0f 85       	ldd	r16, Y+15	; 0x0f
     8dc:	18 89       	ldd	r17, Y+16	; 0x10
     8de:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <__adddi3>
     8e2:	28 87       	std	Y+8, r18	; 0x08
     8e4:	39 87       	std	Y+9, r19	; 0x09
     8e6:	44 2e       	mov	r4, r20
     8e8:	55 2e       	mov	r5, r21
     8ea:	66 2e       	mov	r6, r22
     8ec:	77 2e       	mov	r7, r23
     8ee:	88 2e       	mov	r8, r24
     8f0:	99 2e       	mov	r9, r25
     8f2:	f1 01       	movw	r30, r2
     8f4:	35 89       	ldd	r19, Z+21	; 0x15
     8f6:	24 89       	ldd	r18, Z+20	; 0x14
     8f8:	93 2f       	mov	r25, r19
     8fa:	99 0f       	add	r25, r25
     8fc:	99 0b       	sbc	r25, r25
     8fe:	49 2f       	mov	r20, r25
     900:	59 2f       	mov	r21, r25
     902:	69 2f       	mov	r22, r25
     904:	79 2f       	mov	r23, r25
     906:	89 2f       	mov	r24, r25
     908:	0e 94 33 2e 	call	0x5c66	; 0x5c66 <__muldi3>
     90c:	03 e1       	ldi	r16, 0x13	; 19
     90e:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <__ashrdi3>
     912:	a2 2e       	mov	r10, r18
     914:	b3 2e       	mov	r11, r19
     916:	c4 2e       	mov	r12, r20
     918:	d5 2e       	mov	r13, r21
     91a:	e6 2e       	mov	r14, r22
     91c:	f7 2e       	mov	r15, r23
     91e:	08 2f       	mov	r16, r24
     920:	19 2f       	mov	r17, r25
     922:	28 85       	ldd	r18, Y+8	; 0x08
     924:	39 85       	ldd	r19, Y+9	; 0x09
     926:	44 2d       	mov	r20, r4
     928:	55 2d       	mov	r21, r5
     92a:	66 2d       	mov	r22, r6
     92c:	77 2d       	mov	r23, r7
     92e:	88 2d       	mov	r24, r8
     930:	99 2d       	mov	r25, r9
     932:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <__adddi3>
     936:	08 e0       	ldi	r16, 0x08	; 8
     938:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <__ashrdi3>
     93c:	a2 2e       	mov	r10, r18
     93e:	b3 2e       	mov	r11, r19
     940:	c4 2e       	mov	r12, r20
     942:	d5 2e       	mov	r13, r21
     944:	e6 2e       	mov	r14, r22
     946:	f7 2e       	mov	r15, r23
     948:	e8 2f       	mov	r30, r24
     94a:	19 2f       	mov	r17, r25
	return (float)p / 256;
     94c:	d1 01       	movw	r26, r2
     94e:	53 96       	adiw	r26, 0x13	; 19
     950:	3c 91       	ld	r19, X
     952:	53 97       	sbiw	r26, 0x13	; 19
     954:	52 96       	adiw	r26, 0x12	; 18
     956:	2c 91       	ld	r18, X
     958:	93 2f       	mov	r25, r19
     95a:	99 0f       	add	r25, r25
     95c:	99 0b       	sbc	r25, r25
     95e:	49 2f       	mov	r20, r25
     960:	59 2f       	mov	r21, r25
     962:	69 2f       	mov	r22, r25
     964:	79 2f       	mov	r23, r25
     966:	89 2f       	mov	r24, r25
     968:	04 e0       	ldi	r16, 0x04	; 4
     96a:	0e 94 54 2f 	call	0x5ea8	; 0x5ea8 <__ashldi3>
     96e:	0e 2f       	mov	r16, r30
     970:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <__adddi3>
     974:	0e 94 7e 2c 	call	0x58fc	; 0x58fc <__floatdisf>
     978:	20 e0       	ldi	r18, 0x00	; 0
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	40 e8       	ldi	r20, 0x80	; 128
     97e:	5b e3       	ldi	r21, 0x3B	; 59
     980:	0e 94 86 2d 	call	0x5b0c	; 0x5b0c <__mulsf3>
     984:	03 c0       	rjmp	.+6      	; 0x98c <bmp280_readPressure+0x562>
	((var1 * (int64_t)_bmp280_calib.dig_P2) << 12);
	var1 =
	(((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;

	if (var1 == 0) {
		return 0; // avoid exception caused by division by zero
     986:	60 e0       	ldi	r22, 0x00	; 0
     988:	70 e0       	ldi	r23, 0x00	; 0
     98a:	cb 01       	movw	r24, r22
	spi_BurstRead(0xF7, data, 6, BMP_CS);
	tempUncomp = ((uint32_t)data[3]<<12) | ((uint32_t)data[4] << 4) | data[5]; // 20 bit temp val
	pressureUncomp = ((uint32_t)data[0]<<12) | ((uint32_t)data[1] << 4) | data[2]; // 20 bit pressure value
	bmp280_compensate_T_int32(tempUncomp);
	return bmp280_compensate_pressure(pressureUncomp);
}
     98c:	6f 96       	adiw	r28, 0x1f	; 31
     98e:	0f b6       	in	r0, 0x3f	; 63
     990:	f8 94       	cli
     992:	de bf       	out	0x3e, r29	; 62
     994:	0f be       	out	0x3f, r0	; 63
     996:	cd bf       	out	0x3d, r28	; 61
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	1f 91       	pop	r17
     99e:	0f 91       	pop	r16
     9a0:	ff 90       	pop	r15
     9a2:	ef 90       	pop	r14
     9a4:	df 90       	pop	r13
     9a6:	cf 90       	pop	r12
     9a8:	bf 90       	pop	r11
     9aa:	af 90       	pop	r10
     9ac:	9f 90       	pop	r9
     9ae:	8f 90       	pop	r8
     9b0:	7f 90       	pop	r7
     9b2:	6f 90       	pop	r6
     9b4:	5f 90       	pop	r5
     9b6:	4f 90       	pop	r4
     9b8:	3f 90       	pop	r3
     9ba:	2f 90       	pop	r2
     9bc:	08 95       	ret

000009be <udp_client_check_for_dns_answer>:
}

// process the answer from the dns server:
// return 1 on sucessful processing of answer.
// We set also the variable haveDNSanswer
uint8_t udp_client_check_for_dns_answer(uint8_t *buf,uint16_t plen){
     9be:	fc 01       	movw	r30, r24
        uint8_t j,i;
        if (plen<70){
     9c0:	66 34       	cpi	r22, 0x46	; 70
     9c2:	71 05       	cpc	r23, r1
     9c4:	08 f4       	brcc	.+2      	; 0x9c8 <udp_client_check_for_dns_answer+0xa>
     9c6:	73 c0       	rjmp	.+230    	; 0xaae <udp_client_check_for_dns_answer+0xf0>
                return(0);
        }
        if (buf[UDP_SRC_PORT_L_P]!=53){
     9c8:	83 a1       	ldd	r24, Z+35	; 0x23
     9ca:	85 33       	cpi	r24, 0x35	; 53
     9cc:	09 f0       	breq	.+2      	; 0x9d0 <udp_client_check_for_dns_answer+0x12>
     9ce:	71 c0       	rjmp	.+226    	; 0xab2 <udp_client_check_for_dns_answer+0xf4>
                // not from a DNS
                return(0);
        }
        if (buf[UDP_DST_PORT_H_P]!=DNSCLIENT_SRC_PORT_H){ 
     9d0:	84 a1       	ldd	r24, Z+36	; 0x24
     9d2:	80 3e       	cpi	r24, 0xE0	; 224
     9d4:	09 f0       	breq	.+2      	; 0x9d8 <udp_client_check_for_dns_answer+0x1a>
     9d6:	6f c0       	rjmp	.+222    	; 0xab6 <udp_client_check_for_dns_answer+0xf8>
                return(0);
        }
        // we use the TID also as port:
        if (buf[UDP_DST_PORT_L_P]!=dnstid_l){ 
     9d8:	85 a1       	ldd	r24, Z+37	; 0x25
     9da:	90 91 c0 02 	lds	r25, 0x02C0	; 0x8002c0 <dnstid_l>
     9de:	89 13       	cpse	r24, r25
     9e0:	6c c0       	rjmp	.+216    	; 0xaba <udp_client_check_for_dns_answer+0xfc>
        // is the packet for my IP:
        if(eth_type_is_ip_and_my_ip(buf,plen)==0){
                return(0);
        }
        */
        if (buf[UDP_DATA_P+1]!=dnstid_l){ 
     9e2:	93 a5       	ldd	r25, Z+43	; 0x2b
     9e4:	89 13       	cpse	r24, r25
     9e6:	6b c0       	rjmp	.+214    	; 0xabe <udp_client_check_for_dns_answer+0x100>
                return(0);
        }
        // check flags lower byte:
        if ((buf[UDP_DATA_P+3]&0x8F)!=0x80){ 
     9e8:	85 a5       	ldd	r24, Z+45	; 0x2d
     9ea:	8f 78       	andi	r24, 0x8F	; 143
     9ec:	80 38       	cpi	r24, 0x80	; 128
     9ee:	29 f0       	breq	.+10     	; 0x9fa <udp_client_check_for_dns_answer+0x3c>
                // there is an error or server does not support recursive
                // queries. We can only work with servers that support recursive
                // queries.
                dns_ansError=1;
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <__data_end>
                return(0);
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	08 95       	ret
        //
        // UDP_DATA_P+12+querylen is first byte of first answer.
        // The answer contains again the domain name and we need to
        // jump over it to find the IP. This part can be abbreviated by
        // the use of 2 byte pointers. See RFC 1035.
        i=12+buf[UDP_DATA_P]; // we encoded the query len into tid
     9fa:	92 a5       	ldd	r25, Z+42	; 0x2a
     9fc:	94 5f       	subi	r25, 0xF4	; 244
                // pointer
                i+=2;
        }else{
                // we just search for the first, zero=root domain
                // all other octets must be non zero
                while(i<plen-UDP_DATA_P-7){
     9fe:	61 53       	subi	r22, 0x31	; 49
     a00:	71 09       	sbc	r23, r1
        // The answer contains again the domain name and we need to
        // jump over it to find the IP. This part can be abbreviated by
        // the use of 2 byte pointers. See RFC 1035.
        i=12+buf[UDP_DATA_P]; // we encoded the query len into tid
ChecNextResp:
        if (buf[UDP_DATA_P+i] & 0xc0){
     a02:	df 01       	movw	r26, r30
     a04:	a9 0f       	add	r26, r25
     a06:	b1 1d       	adc	r27, r1
     a08:	9a 96       	adiw	r26, 0x2a	; 42
     a0a:	8c 91       	ld	r24, X
     a0c:	80 7c       	andi	r24, 0xC0	; 192
     a0e:	71 f0       	breq	.+28     	; 0xa2c <udp_client_check_for_dns_answer+0x6e>
                // pointer
                i+=2;
     a10:	9e 5f       	subi	r25, 0xFE	; 254
     a12:	11 c0       	rjmp	.+34     	; 0xa36 <udp_client_check_for_dns_answer+0x78>
        }else{
                // we just search for the first, zero=root domain
                // all other octets must be non zero
                while(i<plen-UDP_DATA_P-7){
                        i++;
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	89 0f       	add	r24, r25
                        if (buf[UDP_DATA_P+i]==0){
     a18:	df 01       	movw	r26, r30
     a1a:	a8 0f       	add	r26, r24
     a1c:	b1 1d       	adc	r27, r1
     a1e:	9a 96       	adiw	r26, 0x2a	; 42
     a20:	2c 91       	ld	r18, X
     a22:	21 11       	cpse	r18, r1
     a24:	02 c0       	rjmp	.+4      	; 0xa2a <udp_client_check_for_dns_answer+0x6c>
                                i++;
     a26:	9e 5f       	subi	r25, 0xFE	; 254
                                break;
     a28:	06 c0       	rjmp	.+12     	; 0xa36 <udp_client_check_for_dns_answer+0x78>
                i+=2;
        }else{
                // we just search for the first, zero=root domain
                // all other octets must be non zero
                while(i<plen-UDP_DATA_P-7){
                        i++;
     a2a:	98 2f       	mov	r25, r24
                // pointer
                i+=2;
        }else{
                // we just search for the first, zero=root domain
                // all other octets must be non zero
                while(i<plen-UDP_DATA_P-7){
     a2c:	29 2f       	mov	r18, r25
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	26 17       	cp	r18, r22
     a32:	37 07       	cpc	r19, r23
     a34:	78 f3       	brcs	.-34     	; 0xa14 <udp_client_check_for_dns_answer+0x56>
                }
        }
        // There might be multipe records in the answer. 
        // We are searching for an A record (contains IP).
        // Contributed by Andras Tucsni
        if (buf[UDP_DATA_P+i+1] != 1){    // check type == 1 for "A"
     a36:	29 2f       	mov	r18, r25
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	df 01       	movw	r26, r30
     a3c:	a2 0f       	add	r26, r18
     a3e:	b3 1f       	adc	r27, r19
     a40:	9b 96       	adiw	r26, 0x2b	; 43
     a42:	8c 91       	ld	r24, X
     a44:	81 30       	cpi	r24, 0x01	; 1
     a46:	99 f0       	breq	.+38     	; 0xa6e <udp_client_check_for_dns_answer+0xb0>
                i += 2 + 2 + 4;    // skip type & class & TTL
                i += buf[UDP_DATA_P+i+1] + 2;    // skip datalength bytes
     a48:	88 e0       	ldi	r24, 0x08	; 8
     a4a:	89 0f       	add	r24, r25
     a4c:	df 01       	movw	r26, r30
     a4e:	a8 0f       	add	r26, r24
     a50:	b1 1d       	adc	r27, r1
     a52:	9b 96       	adiw	r26, 0x2b	; 43
     a54:	8c 91       	ld	r24, X
     a56:	96 5f       	subi	r25, 0xF6	; 246
     a58:	98 0f       	add	r25, r24
                if (i < plen-UDP_DATA_P-7){
     a5a:	29 2f       	mov	r18, r25
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	26 17       	cp	r18, r22
     a60:	37 07       	cpc	r19, r23
     a62:	78 f2       	brcs	.-98     	; 0xa02 <udp_client_check_for_dns_answer+0x44>
                        goto ChecNextResp;
                }
                dns_ansError=3; // no A record found but packet ends 
     a64:	83 e0       	ldi	r24, 0x03	; 3
     a66:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <__data_end>
                return(0);
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	08 95       	ret
        } 
        // We have an A record
        // i is now pointing to the high octet of the type field
        if (buf[UDP_DATA_P+i+9] !=4 ){
     a6e:	df 01       	movw	r26, r30
     a70:	a2 0f       	add	r26, r18
     a72:	b3 1f       	adc	r27, r19
     a74:	d3 96       	adiw	r26, 0x33	; 51
     a76:	2c 91       	ld	r18, X
     a78:	24 30       	cpi	r18, 0x04	; 4
     a7a:	29 f0       	breq	.+10     	; 0xa86 <udp_client_check_for_dns_answer+0xc8>
                dns_ansError=2; // not IPv4
     a7c:	82 e0       	ldi	r24, 0x02	; 2
     a7e:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <__data_end>
                return(0);
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	08 95       	ret
     a86:	2a e0       	ldi	r18, 0x0A	; 10
     a88:	29 0f       	add	r18, r25
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	26 5d       	subi	r18, 0xD6	; 214
     a8e:	3f 4f       	sbci	r19, 0xFF	; 255
     a90:	e2 0f       	add	r30, r18
     a92:	f3 1f       	adc	r31, r19
     a94:	ab eb       	ldi	r26, 0xBB	; 187
     a96:	b2 e0       	ldi	r27, 0x02	; 2
     a98:	2f eb       	ldi	r18, 0xBF	; 191
     a9a:	32 e0       	ldi	r19, 0x02	; 2
        }
        i+=10;
        j=0;
        while(j<4){
                dns_answerip[j]=buf[UDP_DATA_P+i+j];
     a9c:	91 91       	ld	r25, Z+
     a9e:	9d 93       	st	X+, r25
                dns_ansError=2; // not IPv4
                return(0);
        }
        i+=10;
        j=0;
        while(j<4){
     aa0:	a2 17       	cp	r26, r18
     aa2:	b3 07       	cpc	r27, r19
     aa4:	d9 f7       	brne	.-10     	; 0xa9c <udp_client_check_for_dns_answer+0xde>
                dns_answerip[j]=buf[UDP_DATA_P+i+j];
                j++;
        }
        haveDNSanswer=1;
     aa6:	91 e0       	ldi	r25, 0x01	; 1
     aa8:	90 93 bf 02 	sts	0x02BF, r25	; 0x8002bf <haveDNSanswer>
        return(1);
     aac:	08 95       	ret
// return 1 on sucessful processing of answer.
// We set also the variable haveDNSanswer
uint8_t udp_client_check_for_dns_answer(uint8_t *buf,uint16_t plen){
        uint8_t j,i;
        if (plen<70){
                return(0);
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	08 95       	ret
        }
        if (buf[UDP_SRC_PORT_L_P]!=53){
                // not from a DNS
                return(0);
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	08 95       	ret
        }
        if (buf[UDP_DST_PORT_H_P]!=DNSCLIENT_SRC_PORT_H){ 
                return(0);
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	08 95       	ret
        }
        // we use the TID also as port:
        if (buf[UDP_DST_PORT_L_P]!=dnstid_l){ 
                return(0);
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	08 95       	ret
        if(eth_type_is_ip_and_my_ip(buf,plen)==0){
                return(0);
        }
        */
        if (buf[UDP_DATA_P+1]!=dnstid_l){ 
                return(0);
     abe:	80 e0       	ldi	r24, 0x00	; 0
                dns_answerip[j]=buf[UDP_DATA_P+i+j];
                j++;
        }
        haveDNSanswer=1;
        return(1);
}
     ac0:	08 95       	ret

00000ac2 <enc28j60ReadOp>:
{
	if( enc28j60Read(EPKTCNT) ==0 ){
		return(0);
        }
        return(1);
}
     ac2:	2a 98       	cbi	0x05, 2	; 5
     ac4:	96 2f       	mov	r25, r22
     ac6:	6f 71       	andi	r22, 0x1F	; 31
     ac8:	86 2b       	or	r24, r22
     aca:	8e bd       	out	0x2e, r24	; 46
     acc:	0d b4       	in	r0, 0x2d	; 45
     ace:	07 fe       	sbrs	r0, 7
     ad0:	fd cf       	rjmp	.-6      	; 0xacc <enc28j60ReadOp+0xa>
     ad2:	1e bc       	out	0x2e, r1	; 46
     ad4:	0d b4       	in	r0, 0x2d	; 45
     ad6:	07 fe       	sbrs	r0, 7
     ad8:	fd cf       	rjmp	.-6      	; 0xad4 <enc28j60ReadOp+0x12>
     ada:	99 23       	and	r25, r25
     adc:	24 f4       	brge	.+8      	; 0xae6 <enc28j60ReadOp+0x24>
     ade:	1e bc       	out	0x2e, r1	; 46
     ae0:	0d b4       	in	r0, 0x2d	; 45
     ae2:	07 fe       	sbrs	r0, 7
     ae4:	fd cf       	rjmp	.-6      	; 0xae0 <enc28j60ReadOp+0x1e>
     ae6:	2a 9a       	sbi	0x05, 2	; 5
     ae8:	8e b5       	in	r24, 0x2e	; 46
     aea:	08 95       	ret

00000aec <enc28j60WriteOp>:
     aec:	2a 98       	cbi	0x05, 2	; 5
     aee:	6f 71       	andi	r22, 0x1F	; 31
     af0:	86 2b       	or	r24, r22
     af2:	8e bd       	out	0x2e, r24	; 46
     af4:	0d b4       	in	r0, 0x2d	; 45
     af6:	07 fe       	sbrs	r0, 7
     af8:	fd cf       	rjmp	.-6      	; 0xaf4 <enc28j60WriteOp+0x8>
     afa:	4e bd       	out	0x2e, r20	; 46
     afc:	0d b4       	in	r0, 0x2d	; 45
     afe:	07 fe       	sbrs	r0, 7
     b00:	fd cf       	rjmp	.-6      	; 0xafc <enc28j60WriteOp+0x10>
     b02:	2a 9a       	sbi	0x05, 2	; 5
     b04:	08 95       	ret

00000b06 <enc28j60ReadBuffer>:
     b06:	fb 01       	movw	r30, r22
     b08:	2a 98       	cbi	0x05, 2	; 5
     b0a:	2a e3       	ldi	r18, 0x3A	; 58
     b0c:	2e bd       	out	0x2e, r18	; 46
     b0e:	0d b4       	in	r0, 0x2d	; 45
     b10:	07 fe       	sbrs	r0, 7
     b12:	fd cf       	rjmp	.-6      	; 0xb0e <enc28j60ReadBuffer+0x8>
     b14:	00 97       	sbiw	r24, 0x00	; 0
     b16:	69 f0       	breq	.+26     	; 0xb32 <enc28j60ReadBuffer+0x2c>
     b18:	df 01       	movw	r26, r30
     b1a:	a8 0f       	add	r26, r24
     b1c:	b9 1f       	adc	r27, r25
     b1e:	1e bc       	out	0x2e, r1	; 46
     b20:	0d b4       	in	r0, 0x2d	; 45
     b22:	07 fe       	sbrs	r0, 7
     b24:	fd cf       	rjmp	.-6      	; 0xb20 <enc28j60ReadBuffer+0x1a>
     b26:	9e b5       	in	r25, 0x2e	; 46
     b28:	91 93       	st	Z+, r25
     b2a:	ea 17       	cp	r30, r26
     b2c:	fb 07       	cpc	r31, r27
     b2e:	b9 f7       	brne	.-18     	; 0xb1e <enc28j60ReadBuffer+0x18>
     b30:	01 c0       	rjmp	.+2      	; 0xb34 <enc28j60ReadBuffer+0x2e>
     b32:	df 01       	movw	r26, r30
     b34:	1c 92       	st	X, r1
     b36:	2a 9a       	sbi	0x05, 2	; 5
     b38:	08 95       	ret

00000b3a <enc28j60WriteBuffer>:
     b3a:	fb 01       	movw	r30, r22
     b3c:	2a 98       	cbi	0x05, 2	; 5
     b3e:	2a e7       	ldi	r18, 0x7A	; 122
     b40:	2e bd       	out	0x2e, r18	; 46
     b42:	0d b4       	in	r0, 0x2d	; 45
     b44:	07 fe       	sbrs	r0, 7
     b46:	fd cf       	rjmp	.-6      	; 0xb42 <enc28j60WriteBuffer+0x8>
     b48:	09 c0       	rjmp	.+18     	; 0xb5c <enc28j60WriteBuffer+0x22>
     b4a:	9f 01       	movw	r18, r30
     b4c:	28 0f       	add	r18, r24
     b4e:	39 1f       	adc	r19, r25
     b50:	91 91       	ld	r25, Z+
     b52:	9e bd       	out	0x2e, r25	; 46
     b54:	0d b4       	in	r0, 0x2d	; 45
     b56:	07 fe       	sbrs	r0, 7
     b58:	fd cf       	rjmp	.-6      	; 0xb54 <enc28j60WriteBuffer+0x1a>
     b5a:	03 c0       	rjmp	.+6      	; 0xb62 <enc28j60WriteBuffer+0x28>
     b5c:	00 97       	sbiw	r24, 0x00	; 0
     b5e:	a9 f7       	brne	.-22     	; 0xb4a <enc28j60WriteBuffer+0x10>
     b60:	03 c0       	rjmp	.+6      	; 0xb68 <enc28j60WriteBuffer+0x2e>
     b62:	2e 17       	cp	r18, r30
     b64:	3f 07       	cpc	r19, r31
     b66:	a1 f7       	brne	.-24     	; 0xb50 <enc28j60WriteBuffer+0x16>
     b68:	2a 9a       	sbi	0x05, 2	; 5
     b6a:	08 95       	ret

00000b6c <enc28j60SetBank>:
     b6c:	1f 93       	push	r17
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	18 2f       	mov	r17, r24
     b74:	10 76       	andi	r17, 0x60	; 96
     b76:	c1 2f       	mov	r28, r17
     b78:	d0 e0       	ldi	r29, 0x00	; 0
     b7a:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <Enc28j60Bank>
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	c8 17       	cp	r28, r24
     b82:	d9 07       	cpc	r29, r25
     b84:	a1 f0       	breq	.+40     	; 0xbae <enc28j60SetBank+0x42>
     b86:	43 e0       	ldi	r20, 0x03	; 3
     b88:	6f e1       	ldi	r22, 0x1F	; 31
     b8a:	80 ea       	ldi	r24, 0xA0	; 160
     b8c:	af df       	rcall	.-162    	; 0xaec <enc28j60WriteOp>
     b8e:	ae 01       	movw	r20, r28
     b90:	55 95       	asr	r21
     b92:	47 95       	ror	r20
     b94:	55 95       	asr	r21
     b96:	47 95       	ror	r20
     b98:	55 95       	asr	r21
     b9a:	47 95       	ror	r20
     b9c:	55 95       	asr	r21
     b9e:	47 95       	ror	r20
     ba0:	55 95       	asr	r21
     ba2:	47 95       	ror	r20
     ba4:	6f e1       	ldi	r22, 0x1F	; 31
     ba6:	80 e8       	ldi	r24, 0x80	; 128
     ba8:	a1 df       	rcall	.-190    	; 0xaec <enc28j60WriteOp>
     baa:	10 93 c3 02 	sts	0x02C3, r17	; 0x8002c3 <Enc28j60Bank>
     bae:	df 91       	pop	r29
     bb0:	cf 91       	pop	r28
     bb2:	1f 91       	pop	r17
     bb4:	08 95       	ret

00000bb6 <enc28j60Read>:
     bb6:	cf 93       	push	r28
     bb8:	c8 2f       	mov	r28, r24
     bba:	d8 df       	rcall	.-80     	; 0xb6c <enc28j60SetBank>
     bbc:	6c 2f       	mov	r22, r28
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	80 df       	rcall	.-256    	; 0xac2 <enc28j60ReadOp>
     bc2:	cf 91       	pop	r28
     bc4:	08 95       	ret

00000bc6 <enc28j60Write>:
     bc6:	cf 93       	push	r28
     bc8:	df 93       	push	r29
     bca:	c8 2f       	mov	r28, r24
     bcc:	d6 2f       	mov	r29, r22
     bce:	ce df       	rcall	.-100    	; 0xb6c <enc28j60SetBank>
     bd0:	4d 2f       	mov	r20, r29
     bd2:	6c 2f       	mov	r22, r28
     bd4:	80 e4       	ldi	r24, 0x40	; 64
     bd6:	8a df       	rcall	.-236    	; 0xaec <enc28j60WriteOp>
     bd8:	df 91       	pop	r29
     bda:	cf 91       	pop	r28
     bdc:	08 95       	ret

00000bde <enc28j60PhyRead>:
     bde:	cf 93       	push	r28
     be0:	68 2f       	mov	r22, r24
     be2:	84 ed       	ldi	r24, 0xD4	; 212
     be4:	f0 df       	rcall	.-32     	; 0xbc6 <enc28j60Write>
     be6:	61 e0       	ldi	r22, 0x01	; 1
     be8:	82 ed       	ldi	r24, 0xD2	; 210
     bea:	ed df       	rcall	.-38     	; 0xbc6 <enc28j60Write>
     bec:	8a ee       	ldi	r24, 0xEA	; 234
     bee:	e3 df       	rcall	.-58     	; 0xbb6 <enc28j60Read>
     bf0:	80 fd       	sbrc	r24, 0
     bf2:	fc cf       	rjmp	.-8      	; 0xbec <enc28j60PhyRead+0xe>
     bf4:	60 e0       	ldi	r22, 0x00	; 0
     bf6:	82 ed       	ldi	r24, 0xD2	; 210
     bf8:	e6 df       	rcall	.-52     	; 0xbc6 <enc28j60Write>
     bfa:	89 ed       	ldi	r24, 0xD9	; 217
     bfc:	dc df       	rcall	.-72     	; 0xbb6 <enc28j60Read>
     bfe:	c8 2f       	mov	r28, r24
     c00:	88 ed       	ldi	r24, 0xD8	; 216
     c02:	d9 df       	rcall	.-78     	; 0xbb6 <enc28j60Read>
     c04:	2c 2f       	mov	r18, r28
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	32 2f       	mov	r19, r18
     c0a:	22 27       	eor	r18, r18
     c0c:	a9 01       	movw	r20, r18
     c0e:	48 2b       	or	r20, r24
     c10:	ca 01       	movw	r24, r20
     c12:	cf 91       	pop	r28
     c14:	08 95       	ret

00000c16 <enc28j60PhyWrite>:
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
     c1a:	d6 2f       	mov	r29, r22
     c1c:	c7 2f       	mov	r28, r23
     c1e:	68 2f       	mov	r22, r24
     c20:	84 ed       	ldi	r24, 0xD4	; 212
     c22:	d1 df       	rcall	.-94     	; 0xbc6 <enc28j60Write>
     c24:	6d 2f       	mov	r22, r29
     c26:	86 ed       	ldi	r24, 0xD6	; 214
     c28:	ce df       	rcall	.-100    	; 0xbc6 <enc28j60Write>
     c2a:	6c 2f       	mov	r22, r28
     c2c:	87 ed       	ldi	r24, 0xD7	; 215
     c2e:	cb df       	rcall	.-106    	; 0xbc6 <enc28j60Write>
     c30:	c8 e2       	ldi	r28, 0x28	; 40
     c32:	03 c0       	rjmp	.+6      	; 0xc3a <enc28j60PhyWrite+0x24>
     c34:	8c 2f       	mov	r24, r28
     c36:	8a 95       	dec	r24
     c38:	f1 f7       	brne	.-4      	; 0xc36 <enc28j60PhyWrite+0x20>
     c3a:	8a ee       	ldi	r24, 0xEA	; 234
     c3c:	bc df       	rcall	.-136    	; 0xbb6 <enc28j60Read>
     c3e:	80 fd       	sbrc	r24, 0
     c40:	f9 cf       	rjmp	.-14     	; 0xc34 <enc28j60PhyWrite+0x1e>
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	08 95       	ret

00000c48 <enc28j60clkout>:
     c48:	68 2f       	mov	r22, r24
     c4a:	67 70       	andi	r22, 0x07	; 7
     c4c:	85 e7       	ldi	r24, 0x75	; 117
     c4e:	bb cf       	rjmp	.-138    	; 0xbc6 <enc28j60Write>
     c50:	08 95       	ret

00000c52 <enc28j60Init>:
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
     c56:	ec 01       	movw	r28, r24
     c58:	22 9a       	sbi	0x04, 2	; 4
     c5a:	2a 9a       	sbi	0x05, 2	; 5
     c5c:	84 b1       	in	r24, 0x04	; 4
     c5e:	88 62       	ori	r24, 0x28	; 40
     c60:	84 b9       	out	0x04, r24	; 4
     c62:	24 98       	cbi	0x04, 4	; 4
     c64:	2b 98       	cbi	0x05, 3	; 5
     c66:	2d 98       	cbi	0x05, 5	; 5
     c68:	80 e5       	ldi	r24, 0x50	; 80
     c6a:	8c bd       	out	0x2c, r24	; 44
     c6c:	8d b5       	in	r24, 0x2d	; 45
     c6e:	81 60       	ori	r24, 0x01	; 1
     c70:	8d bd       	out	0x2d, r24	; 45
     c72:	4f ef       	ldi	r20, 0xFF	; 255
     c74:	60 e0       	ldi	r22, 0x00	; 0
     c76:	8f ef       	ldi	r24, 0xFF	; 255
     c78:	39 df       	rcall	.-398    	; 0xaec <enc28j60WriteOp>
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	01 97       	sbiw	r24, 0x01	; 1
     c80:	f1 f7       	brne	.-4      	; 0xc7e <enc28j60Init+0x2c>
     c82:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <gNextPacketPtr+0x1>
     c86:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <gNextPacketPtr>
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	88 e0       	ldi	r24, 0x08	; 8
     c8e:	9b df       	rcall	.-202    	; 0xbc6 <enc28j60Write>
     c90:	60 e0       	ldi	r22, 0x00	; 0
     c92:	89 e0       	ldi	r24, 0x09	; 9
     c94:	98 df       	rcall	.-208    	; 0xbc6 <enc28j60Write>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	8c e0       	ldi	r24, 0x0C	; 12
     c9a:	95 df       	rcall	.-214    	; 0xbc6 <enc28j60Write>
     c9c:	60 e0       	ldi	r22, 0x00	; 0
     c9e:	8d e0       	ldi	r24, 0x0D	; 13
     ca0:	92 df       	rcall	.-220    	; 0xbc6 <enc28j60Write>
     ca2:	6f ef       	ldi	r22, 0xFF	; 255
     ca4:	8a e0       	ldi	r24, 0x0A	; 10
     ca6:	8f df       	rcall	.-226    	; 0xbc6 <enc28j60Write>
     ca8:	69 e1       	ldi	r22, 0x19	; 25
     caa:	8b e0       	ldi	r24, 0x0B	; 11
     cac:	8c df       	rcall	.-232    	; 0xbc6 <enc28j60Write>
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	84 e0       	ldi	r24, 0x04	; 4
     cb2:	89 df       	rcall	.-238    	; 0xbc6 <enc28j60Write>
     cb4:	6a e1       	ldi	r22, 0x1A	; 26
     cb6:	85 e0       	ldi	r24, 0x05	; 5
     cb8:	86 df       	rcall	.-244    	; 0xbc6 <enc28j60Write>
     cba:	6f ef       	ldi	r22, 0xFF	; 255
     cbc:	86 e0       	ldi	r24, 0x06	; 6
     cbe:	83 df       	rcall	.-250    	; 0xbc6 <enc28j60Write>
     cc0:	6f e1       	ldi	r22, 0x1F	; 31
     cc2:	87 e0       	ldi	r24, 0x07	; 7
     cc4:	80 df       	rcall	.-256    	; 0xbc6 <enc28j60Write>
     cc6:	60 eb       	ldi	r22, 0xB0	; 176
     cc8:	88 e3       	ldi	r24, 0x38	; 56
     cca:	7d df       	rcall	.-262    	; 0xbc6 <enc28j60Write>
     ccc:	6f e3       	ldi	r22, 0x3F	; 63
     cce:	88 e2       	ldi	r24, 0x28	; 40
     cd0:	7a df       	rcall	.-268    	; 0xbc6 <enc28j60Write>
     cd2:	60 e3       	ldi	r22, 0x30	; 48
     cd4:	89 e2       	ldi	r24, 0x29	; 41
     cd6:	77 df       	rcall	.-274    	; 0xbc6 <enc28j60Write>
     cd8:	69 ef       	ldi	r22, 0xF9	; 249
     cda:	80 e3       	ldi	r24, 0x30	; 48
     cdc:	74 df       	rcall	.-280    	; 0xbc6 <enc28j60Write>
     cde:	67 ef       	ldi	r22, 0xF7	; 247
     ce0:	81 e3       	ldi	r24, 0x31	; 49
     ce2:	71 df       	rcall	.-286    	; 0xbc6 <enc28j60Write>
     ce4:	6d e0       	ldi	r22, 0x0D	; 13
     ce6:	80 ec       	ldi	r24, 0xC0	; 192
     ce8:	6e df       	rcall	.-292    	; 0xbc6 <enc28j60Write>
     cea:	60 e0       	ldi	r22, 0x00	; 0
     cec:	81 ec       	ldi	r24, 0xC1	; 193
     cee:	6b df       	rcall	.-298    	; 0xbc6 <enc28j60Write>
     cf0:	42 e3       	ldi	r20, 0x32	; 50
     cf2:	62 ec       	ldi	r22, 0xC2	; 194
     cf4:	80 e8       	ldi	r24, 0x80	; 128
     cf6:	fa de       	rcall	.-524    	; 0xaec <enc28j60WriteOp>
     cf8:	62 e1       	ldi	r22, 0x12	; 18
     cfa:	86 ec       	ldi	r24, 0xC6	; 198
     cfc:	64 df       	rcall	.-312    	; 0xbc6 <enc28j60Write>
     cfe:	6c e0       	ldi	r22, 0x0C	; 12
     d00:	87 ec       	ldi	r24, 0xC7	; 199
     d02:	61 df       	rcall	.-318    	; 0xbc6 <enc28j60Write>
     d04:	62 e1       	ldi	r22, 0x12	; 18
     d06:	84 ec       	ldi	r24, 0xC4	; 196
     d08:	5e df       	rcall	.-324    	; 0xbc6 <enc28j60Write>
     d0a:	6c ed       	ldi	r22, 0xDC	; 220
     d0c:	8a ec       	ldi	r24, 0xCA	; 202
     d0e:	5b df       	rcall	.-330    	; 0xbc6 <enc28j60Write>
     d10:	65 e0       	ldi	r22, 0x05	; 5
     d12:	8b ec       	ldi	r24, 0xCB	; 203
     d14:	58 df       	rcall	.-336    	; 0xbc6 <enc28j60Write>
     d16:	68 81       	ld	r22, Y
     d18:	84 ee       	ldi	r24, 0xE4	; 228
     d1a:	55 df       	rcall	.-342    	; 0xbc6 <enc28j60Write>
     d1c:	69 81       	ldd	r22, Y+1	; 0x01
     d1e:	85 ee       	ldi	r24, 0xE5	; 229
     d20:	52 df       	rcall	.-348    	; 0xbc6 <enc28j60Write>
     d22:	6a 81       	ldd	r22, Y+2	; 0x02
     d24:	82 ee       	ldi	r24, 0xE2	; 226
     d26:	4f df       	rcall	.-354    	; 0xbc6 <enc28j60Write>
     d28:	6b 81       	ldd	r22, Y+3	; 0x03
     d2a:	83 ee       	ldi	r24, 0xE3	; 227
     d2c:	4c df       	rcall	.-360    	; 0xbc6 <enc28j60Write>
     d2e:	6c 81       	ldd	r22, Y+4	; 0x04
     d30:	80 ee       	ldi	r24, 0xE0	; 224
     d32:	49 df       	rcall	.-366    	; 0xbc6 <enc28j60Write>
     d34:	6d 81       	ldd	r22, Y+5	; 0x05
     d36:	81 ee       	ldi	r24, 0xE1	; 225
     d38:	46 df       	rcall	.-372    	; 0xbc6 <enc28j60Write>
     d3a:	60 e0       	ldi	r22, 0x00	; 0
     d3c:	71 e0       	ldi	r23, 0x01	; 1
     d3e:	80 e1       	ldi	r24, 0x10	; 16
     d40:	6a df       	rcall	.-300    	; 0xc16 <enc28j60PhyWrite>
     d42:	8f e1       	ldi	r24, 0x1F	; 31
     d44:	13 df       	rcall	.-474    	; 0xb6c <enc28j60SetBank>
     d46:	40 ec       	ldi	r20, 0xC0	; 192
     d48:	6b e1       	ldi	r22, 0x1B	; 27
     d4a:	80 e8       	ldi	r24, 0x80	; 128
     d4c:	cf de       	rcall	.-610    	; 0xaec <enc28j60WriteOp>
     d4e:	44 e0       	ldi	r20, 0x04	; 4
     d50:	6f e1       	ldi	r22, 0x1F	; 31
     d52:	80 e8       	ldi	r24, 0x80	; 128
     d54:	cb de       	rcall	.-618    	; 0xaec <enc28j60WriteOp>
     d56:	df 91       	pop	r29
     d58:	cf 91       	pop	r28
     d5a:	08 95       	ret

00000d5c <enc28j60linkup>:
     d5c:	81 e1       	ldi	r24, 0x11	; 17
     d5e:	3f df       	rcall	.-386    	; 0xbde <enc28j60PhyRead>
     d60:	92 fb       	bst	r25, 2
     d62:	88 27       	eor	r24, r24
     d64:	80 f9       	bld	r24, 0
     d66:	08 95       	ret

00000d68 <enc28j60PacketSend>:
     d68:	0f 93       	push	r16
     d6a:	1f 93       	push	r17
     d6c:	cf 93       	push	r28
     d6e:	df 93       	push	r29
     d70:	ec 01       	movw	r28, r24
     d72:	8b 01       	movw	r16, r22
     d74:	6f e1       	ldi	r22, 0x1F	; 31
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	a4 de       	rcall	.-696    	; 0xac2 <enc28j60ReadOp>
     d7a:	83 fd       	sbrc	r24, 3
     d7c:	fb cf       	rjmp	.-10     	; 0xd74 <enc28j60PacketSend+0xc>
     d7e:	8c e1       	ldi	r24, 0x1C	; 28
     d80:	1a df       	rcall	.-460    	; 0xbb6 <enc28j60Read>
     d82:	81 ff       	sbrs	r24, 1
     d84:	10 c0       	rjmp	.+32     	; 0xda6 <enc28j60PacketSend+0x3e>
     d86:	40 e8       	ldi	r20, 0x80	; 128
     d88:	6f e1       	ldi	r22, 0x1F	; 31
     d8a:	80 e8       	ldi	r24, 0x80	; 128
     d8c:	af de       	rcall	.-674    	; 0xaec <enc28j60WriteOp>
     d8e:	40 e8       	ldi	r20, 0x80	; 128
     d90:	6f e1       	ldi	r22, 0x1F	; 31
     d92:	80 ea       	ldi	r24, 0xA0	; 160
     d94:	ab de       	rcall	.-682    	; 0xaec <enc28j60WriteOp>
     d96:	42 e0       	ldi	r20, 0x02	; 2
     d98:	6c e1       	ldi	r22, 0x1C	; 28
     d9a:	80 ea       	ldi	r24, 0xA0	; 160
     d9c:	a7 de       	rcall	.-690    	; 0xaec <enc28j60WriteOp>
     d9e:	80 e3       	ldi	r24, 0x30	; 48
     da0:	95 e7       	ldi	r25, 0x75	; 117
     da2:	01 97       	sbiw	r24, 0x01	; 1
     da4:	f1 f7       	brne	.-4      	; 0xda2 <enc28j60PacketSend+0x3a>
     da6:	60 e0       	ldi	r22, 0x00	; 0
     da8:	82 e0       	ldi	r24, 0x02	; 2
     daa:	0d df       	rcall	.-486    	; 0xbc6 <enc28j60Write>
     dac:	6a e1       	ldi	r22, 0x1A	; 26
     dae:	83 e0       	ldi	r24, 0x03	; 3
     db0:	0a df       	rcall	.-492    	; 0xbc6 <enc28j60Write>
     db2:	6c 2f       	mov	r22, r28
     db4:	86 e0       	ldi	r24, 0x06	; 6
     db6:	07 df       	rcall	.-498    	; 0xbc6 <enc28j60Write>
     db8:	ce 01       	movw	r24, r28
     dba:	96 5e       	subi	r25, 0xE6	; 230
     dbc:	69 2f       	mov	r22, r25
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	02 df       	rcall	.-508    	; 0xbc6 <enc28j60Write>
     dc2:	40 e0       	ldi	r20, 0x00	; 0
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	8a e7       	ldi	r24, 0x7A	; 122
     dc8:	91 de       	rcall	.-734    	; 0xaec <enc28j60WriteOp>
     dca:	b8 01       	movw	r22, r16
     dcc:	ce 01       	movw	r24, r28
     dce:	b5 de       	rcall	.-662    	; 0xb3a <enc28j60WriteBuffer>
     dd0:	48 e0       	ldi	r20, 0x08	; 8
     dd2:	6f e1       	ldi	r22, 0x1F	; 31
     dd4:	80 e8       	ldi	r24, 0x80	; 128
     dd6:	8a de       	rcall	.-748    	; 0xaec <enc28j60WriteOp>
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	1f 91       	pop	r17
     dde:	0f 91       	pop	r16
     de0:	08 95       	ret

00000de2 <enc28j60PacketReceive>:
// The packet will by headed by an ethernet header.
//      maxlen  The maximum acceptable length of a retrieved packet.
//      packet  Pointer where packet data should be stored.
// Returns: Packet length in bytes if a packet was retrieved, zero otherwise.
uint16_t enc28j60PacketReceive(uint16_t maxlen, uint8_t* packet)
{
     de2:	af 92       	push	r10
     de4:	bf 92       	push	r11
     de6:	cf 92       	push	r12
     de8:	df 92       	push	r13
     dea:	ef 92       	push	r14
     dec:	ff 92       	push	r15
     dee:	0f 93       	push	r16
     df0:	1f 93       	push	r17
     df2:	cf 93       	push	r28
     df4:	df 93       	push	r29
     df6:	6c 01       	movw	r12, r24
     df8:	7b 01       	movw	r14, r22
	uint16_t rxstat;
	uint16_t len;
	// check if a packet has been received and buffered
	//if( !(enc28j60Read(EIR) & EIR_PKTIF) )
        // The above does not work. See Rev. B4 Silicon Errata point 6.
	if( enc28j60Read(EPKTCNT) ==0 ){
     dfa:	89 e3       	ldi	r24, 0x39	; 57
     dfc:	dc de       	rcall	.-584    	; 0xbb6 <enc28j60Read>
     dfe:	88 23       	and	r24, r24
     e00:	09 f4       	brne	.+2      	; 0xe04 <enc28j60PacketReceive+0x22>
     e02:	56 c0       	rjmp	.+172    	; 0xeb0 <enc28j60PacketReceive+0xce>
		return(0);
        }

	// Set the read pointer to the start of the received packet
	enc28j60Write(ERDPTL, (gNextPacketPtr &0xFF));
     e04:	60 91 c1 02 	lds	r22, 0x02C1	; 0x8002c1 <gNextPacketPtr>
     e08:	c0 91 c2 02 	lds	r28, 0x02C2	; 0x8002c2 <gNextPacketPtr+0x1>
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	db de       	rcall	.-586    	; 0xbc6 <enc28j60Write>
	enc28j60Write(ERDPTH, (gNextPacketPtr)>>8);
     e10:	6c 2f       	mov	r22, r28
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	d8 de       	rcall	.-592    	; 0xbc6 <enc28j60Write>
	// read the next packet pointer
	gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     e16:	60 e0       	ldi	r22, 0x00	; 0
     e18:	8a e3       	ldi	r24, 0x3A	; 58
     e1a:	53 de       	rcall	.-858    	; 0xac2 <enc28j60ReadOp>
     e1c:	c8 2f       	mov	r28, r24
	gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     e1e:	60 e0       	ldi	r22, 0x00	; 0
     e20:	8a e3       	ldi	r24, 0x3A	; 58
     e22:	4f de       	rcall	.-866    	; 0xac2 <enc28j60ReadOp>
     e24:	d0 e0       	ldi	r29, 0x00	; 0
     e26:	d8 2b       	or	r29, r24
     e28:	d0 93 c2 02 	sts	0x02C2, r29	; 0x8002c2 <gNextPacketPtr+0x1>
     e2c:	c0 93 c1 02 	sts	0x02C1, r28	; 0x8002c1 <gNextPacketPtr>
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     e30:	60 e0       	ldi	r22, 0x00	; 0
     e32:	8a e3       	ldi	r24, 0x3A	; 58
     e34:	46 de       	rcall	.-884    	; 0xac2 <enc28j60ReadOp>
     e36:	b8 2e       	mov	r11, r24
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	8a e3       	ldi	r24, 0x3A	; 58
     e3c:	42 de       	rcall	.-892    	; 0xac2 <enc28j60ReadOp>
     e3e:	a8 2e       	mov	r10, r24
        len-=4; //remove the CRC count
	// read the receive status (see datasheet page 43)
	rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     e40:	60 e0       	ldi	r22, 0x00	; 0
     e42:	8a e3       	ldi	r24, 0x3A	; 58
     e44:	3e de       	rcall	.-900    	; 0xac2 <enc28j60ReadOp>
     e46:	08 2f       	mov	r16, r24
     e48:	60 e0       	ldi	r22, 0x00	; 0
	rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
     e4a:	8a e3       	ldi	r24, 0x3A	; 58
     e4c:	3a de       	rcall	.-908    	; 0xac2 <enc28j60ReadOp>
     e4e:	07 ff       	sbrs	r16, 7
     e50:	10 c0       	rjmp	.+32     	; 0xe72 <enc28j60PacketReceive+0x90>
                len=maxlen-1;
        }
        // check CRC and symbol errors (see datasheet page 44, table 7-3):
        // The ERXFCON.CRCEN is set by default. Normally we should not
        // need to check this.
        if ((rxstat & 0x80)==0){
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	c8 1a       	sub	r12, r24
        len-=4; //remove the CRC count
	// read the receive status (see datasheet page 43)
	rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
	// limit retrieve length
        if (len>maxlen-1){
     e56:	d1 08       	sbc	r13, r1
     e58:	0b 2d       	mov	r16, r11
     e5a:	10 e0       	ldi	r17, 0x00	; 0
	// read the next packet pointer
	gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     e5c:	1a 29       	or	r17, r10
     e5e:	04 50       	subi	r16, 0x04	; 4
     e60:	11 09       	sbc	r17, r1
     e62:	c0 16       	cp	r12, r16
     e64:	d1 06       	cpc	r13, r17
     e66:	08 f4       	brcc	.+2      	; 0xe6a <enc28j60PacketReceive+0x88>
     e68:	86 01       	movw	r16, r12
     e6a:	b7 01       	movw	r22, r14
        if ((rxstat & 0x80)==0){
                // invalid
                len=0;
        }else{
                // copy the packet from the receive buffer
                enc28j60ReadBuffer(len, packet);
     e6c:	c8 01       	movw	r24, r16
     e6e:	4b de       	rcall	.-874    	; 0xb06 <enc28j60ReadBuffer>
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <enc28j60PacketReceive+0x94>
     e72:	00 e0       	ldi	r16, 0x00	; 0
     e74:	10 e0       	ldi	r17, 0x00	; 0
        // check CRC and symbol errors (see datasheet page 44, table 7-3):
        // The ERXFCON.CRCEN is set by default. Normally we should not
        // need to check this.
        if ((rxstat & 0x80)==0){
                // invalid
                len=0;
     e76:	7e 01       	movw	r14, r28
     e78:	81 e0       	ldi	r24, 0x01	; 1
        //
        // Move the RX read pointer to the start of the next received packet
        // This frees the memory we just read out. 
        // However, compensate for the errata point 13, rev B4: never write an even address!
        // gNextPacketPtr is always an even address if RXSTOP_INIT is odd.
        if (gNextPacketPtr -1 > RXSTOP_INIT){ // RXSTART_INIT is zero, no test for gNextPacketPtr less than RXSTART_INIT.
     e7a:	e8 1a       	sub	r14, r24
     e7c:	f1 08       	sbc	r15, r1
     e7e:	e1 14       	cp	r14, r1
     e80:	8a e1       	ldi	r24, 0x1A	; 26
     e82:	f8 06       	cpc	r15, r24
     e84:	3c f0       	brlt	.+14     	; 0xe94 <enc28j60PacketReceive+0xb2>
                enc28j60Write(ERXRDPTL, (RXSTOP_INIT)&0xFF);
     e86:	6f ef       	ldi	r22, 0xFF	; 255
     e88:	8c e0       	ldi	r24, 0x0C	; 12
     e8a:	9d de       	rcall	.-710    	; 0xbc6 <enc28j60Write>
                enc28j60Write(ERXRDPTH, (RXSTOP_INIT)>>8);
     e8c:	69 e1       	ldi	r22, 0x19	; 25
     e8e:	8d e0       	ldi	r24, 0x0D	; 13
     e90:	9a de       	rcall	.-716    	; 0xbc6 <enc28j60Write>
     e92:	07 c0       	rjmp	.+14     	; 0xea2 <enc28j60PacketReceive+0xc0>
        } else {
                enc28j60Write(ERXRDPTL, (gNextPacketPtr-1)&0xFF);
     e94:	6c 2f       	mov	r22, r28
     e96:	61 50       	subi	r22, 0x01	; 1
     e98:	8c e0       	ldi	r24, 0x0C	; 12
     e9a:	95 de       	rcall	.-726    	; 0xbc6 <enc28j60Write>
     e9c:	6f 2d       	mov	r22, r15
                enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
     e9e:	8d e0       	ldi	r24, 0x0D	; 13
     ea0:	92 de       	rcall	.-732    	; 0xbc6 <enc28j60Write>
     ea2:	40 e4       	ldi	r20, 0x40	; 64
     ea4:	6e e1       	ldi	r22, 0x1E	; 30
        }
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
     ea6:	80 e8       	ldi	r24, 0x80	; 128
     ea8:	21 de       	rcall	.-958    	; 0xaec <enc28j60WriteOp>
     eaa:	80 2f       	mov	r24, r16
     eac:	91 2f       	mov	r25, r17
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <enc28j60PacketReceive+0xd2>
	return(len);
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	df 91       	pop	r29
	uint16_t len;
	// check if a packet has been received and buffered
	//if( !(enc28j60Read(EIR) & EIR_PKTIF) )
        // The above does not work. See Rev. B4 Silicon Errata point 6.
	if( enc28j60Read(EPKTCNT) ==0 ){
		return(0);
     eb6:	cf 91       	pop	r28
     eb8:	1f 91       	pop	r17
                enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
        }
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
	return(len);
}
     eba:	0f 91       	pop	r16
     ebc:	ff 90       	pop	r15
     ebe:	ef 90       	pop	r14
     ec0:	df 90       	pop	r13
     ec2:	cf 90       	pop	r12
     ec4:	bf 90       	pop	r11
     ec6:	af 90       	pop	r10
     ec8:	08 95       	ret

00000eca <www_client_internal_result_callback>:
     eca:	cf 92       	push	r12
     ecc:	df 92       	push	r13
     ece:	ef 92       	push	r14
}
#endif // WWW_client

void register_ping_rec_callback(void (*callback)(uint8_t *srcip))
{
        icmp_callback=callback;
     ed0:	ff 92       	push	r15
     ed2:	0f 93       	push	r16
     ed4:	1f 93       	push	r17
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	ea 01       	movw	r28, r20
     edc:	89 01       	movw	r16, r18
     ede:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <www_fd>
     ee2:	98 17       	cp	r25, r24
     ee4:	61 f0       	breq	.+24     	; 0xefe <www_client_internal_result_callback+0x34>
     ee6:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <client_browser_callback>
     eea:	f0 91 da 02 	lds	r31, 0x02DA	; 0x8002da <client_browser_callback+0x1>
     eee:	40 e0       	ldi	r20, 0x00	; 0
     ef0:	50 e0       	ldi	r21, 0x00	; 0
     ef2:	60 e0       	ldi	r22, 0x00	; 0
     ef4:	70 e0       	ldi	r23, 0x00	; 0
     ef6:	84 ef       	ldi	r24, 0xF4	; 244
     ef8:	91 e0       	ldi	r25, 0x01	; 1
     efa:	09 95       	icall
     efc:	5e c0       	rjmp	.+188    	; 0xfba <www_client_internal_result_callback+0xf0>
     efe:	61 11       	cpse	r22, r1
     f00:	5c c0       	rjmp	.+184    	; 0xfba <www_client_internal_result_callback+0xf0>
     f02:	2d 30       	cpi	r18, 0x0D	; 13
     f04:	31 05       	cpc	r19, r1
     f06:	08 f4       	brcc	.+2      	; 0xf0a <www_client_internal_result_callback+0x40>
     f08:	58 c0       	rjmp	.+176    	; 0xfba <www_client_internal_result_callback+0xf0>
     f0a:	e0 90 d9 02 	lds	r14, 0x02D9	; 0x8002d9 <client_browser_callback>
     f0e:	f0 90 da 02 	lds	r15, 0x02DA	; 0x8002da <client_browser_callback+0x1>
     f12:	e1 14       	cp	r14, r1
     f14:	f1 04       	cpc	r15, r1
     f16:	09 f4       	brne	.+2      	; 0xf1a <www_client_internal_result_callback+0x50>
     f18:	50 c0       	rjmp	.+160    	; 0xfba <www_client_internal_result_callback+0xf0>
     f1a:	c0 90 cd 02 	lds	r12, 0x02CD	; 0x8002cd <bufptr>
     f1e:	d0 90 ce 02 	lds	r13, 0x02CE	; 0x8002ce <bufptr+0x1>
     f22:	f6 01       	movw	r30, r12
     f24:	e4 0f       	add	r30, r20
     f26:	f5 1f       	adc	r31, r21
     f28:	80 85       	ldd	r24, Z+8	; 0x08
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	0e 94 2a 31 	call	0x6254	; 0x6254 <isblank>
     f30:	89 2b       	or	r24, r25
     f32:	b9 f1       	breq	.+110    	; 0xfa2 <www_client_internal_result_callback+0xd8>
     f34:	f6 01       	movw	r30, r12
     f36:	ec 0f       	add	r30, r28
     f38:	fd 1f       	adc	r31, r29
     f3a:	21 85       	ldd	r18, Z+9	; 0x09
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	20 53       	subi	r18, 0x30	; 48
     f40:	31 09       	sbc	r19, r1
     f42:	2a 30       	cpi	r18, 0x0A	; 10
     f44:	31 05       	cpc	r19, r1
     f46:	80 f5       	brcc	.+96     	; 0xfa8 <www_client_internal_result_callback+0xde>
     f48:	f6 01       	movw	r30, r12
     f4a:	ec 0f       	add	r30, r28
     f4c:	fd 1f       	adc	r31, r29
     f4e:	83 85       	ldd	r24, Z+11	; 0x0b
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	ac 01       	movw	r20, r24
     f54:	40 53       	subi	r20, 0x30	; 48
     f56:	51 09       	sbc	r21, r1
     f58:	4a 30       	cpi	r20, 0x0A	; 10
     f5a:	51 05       	cpc	r21, r1
     f5c:	40 f5       	brcc	.+80     	; 0xfae <www_client_internal_result_callback+0xe4>
     f5e:	c9 01       	movw	r24, r18
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	22 0f       	add	r18, r18
     f66:	33 1f       	adc	r19, r19
     f68:	22 0f       	add	r18, r18
     f6a:	33 1f       	adc	r19, r19
     f6c:	22 0f       	add	r18, r18
     f6e:	33 1f       	adc	r19, r19
     f70:	28 0f       	add	r18, r24
     f72:	39 1f       	adc	r19, r25
     f74:	f6 01       	movw	r30, r12
     f76:	ec 0f       	add	r30, r28
     f78:	fd 1f       	adc	r31, r29
     f7a:	82 85       	ldd	r24, Z+10	; 0x0a
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	c0 97       	sbiw	r24, 0x30	; 48
     f80:	28 0f       	add	r18, r24
     f82:	39 1f       	adc	r19, r25
     f84:	c9 01       	movw	r24, r18
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	22 0f       	add	r18, r18
     f8c:	33 1f       	adc	r19, r19
     f8e:	22 0f       	add	r18, r18
     f90:	33 1f       	adc	r19, r19
     f92:	22 0f       	add	r18, r18
     f94:	33 1f       	adc	r19, r19
     f96:	28 0f       	add	r18, r24
     f98:	39 1f       	adc	r19, r25
     f9a:	ca 01       	movw	r24, r20
     f9c:	82 0f       	add	r24, r18
     f9e:	93 1f       	adc	r25, r19
     fa0:	08 c0       	rjmp	.+16     	; 0xfb2 <www_client_internal_result_callback+0xe8>
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	05 c0       	rjmp	.+10     	; 0xfb2 <www_client_internal_result_callback+0xe8>
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <www_client_internal_result_callback+0xe8>
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	a8 01       	movw	r20, r16
     fb4:	be 01       	movw	r22, r28
     fb6:	f7 01       	movw	r30, r14
     fb8:	09 95       	icall
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	1f 91       	pop	r17
     fc2:	0f 91       	pop	r16
     fc4:	ff 90       	pop	r15
     fc6:	ef 90       	pop	r14
     fc8:	df 90       	pop	r13
     fca:	cf 90       	pop	r12
     fcc:	08 95       	ret

00000fce <checksum>:
     fce:	cf 92       	push	r12
     fd0:	df 92       	push	r13
     fd2:	ef 92       	push	r14
     fd4:	ff 92       	push	r15
     fd6:	cf 93       	push	r28
     fd8:	df 93       	push	r29
     fda:	ec 01       	movw	r28, r24
     fdc:	db 01       	movw	r26, r22
     fde:	41 30       	cpi	r20, 0x01	; 1
     fe0:	61 f4       	brne	.+24     	; 0xffa <checksum+0x2c>
     fe2:	6b 01       	movw	r12, r22
     fe4:	88 e0       	ldi	r24, 0x08	; 8
     fe6:	c8 1a       	sub	r12, r24
     fe8:	d1 08       	sbc	r13, r1
     fea:	e1 2c       	mov	r14, r1
     fec:	f1 2c       	mov	r15, r1
     fee:	81 e1       	ldi	r24, 0x11	; 17
     ff0:	c8 0e       	add	r12, r24
     ff2:	d1 1c       	adc	r13, r1
     ff4:	e1 1c       	adc	r14, r1
     ff6:	f1 1c       	adc	r15, r1
     ff8:	11 c0       	rjmp	.+34     	; 0x101c <checksum+0x4e>
     ffa:	42 30       	cpi	r20, 0x02	; 2
     ffc:	61 f4       	brne	.+24     	; 0x1016 <checksum+0x48>
     ffe:	6b 01       	movw	r12, r22
    1000:	88 e0       	ldi	r24, 0x08	; 8
    1002:	c8 1a       	sub	r12, r24
    1004:	d1 08       	sbc	r13, r1
    1006:	e1 2c       	mov	r14, r1
    1008:	f1 2c       	mov	r15, r1
    100a:	86 e0       	ldi	r24, 0x06	; 6
    100c:	c8 0e       	add	r12, r24
    100e:	d1 1c       	adc	r13, r1
    1010:	e1 1c       	adc	r14, r1
    1012:	f1 1c       	adc	r15, r1
    1014:	03 c0       	rjmp	.+6      	; 0x101c <checksum+0x4e>
    1016:	c1 2c       	mov	r12, r1
    1018:	d1 2c       	mov	r13, r1
    101a:	76 01       	movw	r14, r12
    101c:	a2 30       	cpi	r26, 0x02	; 2
    101e:	b1 05       	cpc	r27, r1
    1020:	f0 f0       	brcs	.+60     	; 0x105e <checksum+0x90>
    1022:	9d 01       	movw	r18, r26
    1024:	fe 01       	movw	r30, r28
    1026:	40 81       	ld	r20, Z
    1028:	50 e0       	ldi	r21, 0x00	; 0
    102a:	60 e0       	ldi	r22, 0x00	; 0
    102c:	70 e0       	ldi	r23, 0x00	; 0
    102e:	76 2f       	mov	r23, r22
    1030:	65 2f       	mov	r22, r21
    1032:	54 2f       	mov	r21, r20
    1034:	44 27       	eor	r20, r20
    1036:	81 81       	ldd	r24, Z+1	; 0x01
    1038:	48 2b       	or	r20, r24
    103a:	c4 0e       	add	r12, r20
    103c:	d5 1e       	adc	r13, r21
    103e:	e6 1e       	adc	r14, r22
    1040:	f7 1e       	adc	r15, r23
    1042:	32 96       	adiw	r30, 0x02	; 2
    1044:	22 50       	subi	r18, 0x02	; 2
    1046:	31 09       	sbc	r19, r1
    1048:	22 30       	cpi	r18, 0x02	; 2
    104a:	31 05       	cpc	r19, r1
    104c:	60 f7       	brcc	.-40     	; 0x1026 <checksum+0x58>
    104e:	cd 01       	movw	r24, r26
    1050:	02 97       	sbiw	r24, 0x02	; 2
    1052:	8e 7f       	andi	r24, 0xFE	; 254
    1054:	02 96       	adiw	r24, 0x02	; 2
    1056:	c8 0f       	add	r28, r24
    1058:	d9 1f       	adc	r29, r25
    105a:	a1 70       	andi	r26, 0x01	; 1
    105c:	bb 27       	eor	r27, r27
    105e:	ab 2b       	or	r26, r27
    1060:	61 f0       	breq	.+24     	; 0x107a <checksum+0xac>
    1062:	88 81       	ld	r24, Y
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	a0 e0       	ldi	r26, 0x00	; 0
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	ba 2f       	mov	r27, r26
    106c:	a9 2f       	mov	r26, r25
    106e:	98 2f       	mov	r25, r24
    1070:	88 27       	eor	r24, r24
    1072:	c8 0e       	add	r12, r24
    1074:	d9 1e       	adc	r13, r25
    1076:	ea 1e       	adc	r14, r26
    1078:	fb 1e       	adc	r15, r27
    107a:	a7 01       	movw	r20, r14
    107c:	66 27       	eor	r22, r22
    107e:	77 27       	eor	r23, r23
    1080:	41 15       	cp	r20, r1
    1082:	51 05       	cpc	r21, r1
    1084:	61 05       	cpc	r22, r1
    1086:	71 05       	cpc	r23, r1
    1088:	71 f0       	breq	.+28     	; 0x10a6 <checksum+0xd8>
    108a:	ee 24       	eor	r14, r14
    108c:	ff 24       	eor	r15, r15
    108e:	c4 0e       	add	r12, r20
    1090:	d5 1e       	adc	r13, r21
    1092:	e6 1e       	adc	r14, r22
    1094:	f7 1e       	adc	r15, r23
    1096:	a7 01       	movw	r20, r14
    1098:	66 27       	eor	r22, r22
    109a:	77 27       	eor	r23, r23
    109c:	41 15       	cp	r20, r1
    109e:	51 05       	cpc	r21, r1
    10a0:	61 05       	cpc	r22, r1
    10a2:	71 05       	cpc	r23, r1
    10a4:	91 f7       	brne	.-28     	; 0x108a <checksum+0xbc>
    10a6:	c6 01       	movw	r24, r12
    10a8:	80 95       	com	r24
    10aa:	90 95       	com	r25
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	ff 90       	pop	r15
    10b2:	ef 90       	pop	r14
    10b4:	df 90       	pop	r13
    10b6:	cf 90       	pop	r12
    10b8:	08 95       	ret

000010ba <init_mac>:
    10ba:	00 97       	sbiw	r24, 0x00	; 0
    10bc:	41 f0       	breq	.+16     	; 0x10ce <init_mac+0x14>
    10be:	26 e0       	ldi	r18, 0x06	; 6
    10c0:	fc 01       	movw	r30, r24
    10c2:	a5 ef       	ldi	r26, 0xF5	; 245
    10c4:	b2 e0       	ldi	r27, 0x02	; 2
    10c6:	01 90       	ld	r0, Z+
    10c8:	0d 92       	st	X+, r0
    10ca:	2a 95       	dec	r18
    10cc:	e1 f7       	brne	.-8      	; 0x10c6 <init_mac+0xc>
    10ce:	08 95       	ret

000010d0 <route_via_gw>:
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
    10d4:	fc 01       	movw	r30, r24
    10d6:	30 81       	ld	r19, Z
    10d8:	20 91 f1 02 	lds	r18, 0x02F1	; 0x8002f1 <ipaddr>
    10dc:	23 27       	eor	r18, r19
    10de:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <ipnetmask>
    10e2:	23 23       	and	r18, r19
    10e4:	91 f4       	brne	.+36     	; 0x110a <route_via_gw+0x3a>
    10e6:	31 96       	adiw	r30, 0x01	; 1
    10e8:	c2 ef       	ldi	r28, 0xF2	; 242
    10ea:	d2 e0       	ldi	r29, 0x02	; 2
    10ec:	a2 e0       	ldi	r26, 0x02	; 2
    10ee:	b1 e0       	ldi	r27, 0x01	; 1
    10f0:	ac 01       	movw	r20, r24
    10f2:	4c 5f       	subi	r20, 0xFC	; 252
    10f4:	5f 4f       	sbci	r21, 0xFF	; 255
    10f6:	81 91       	ld	r24, Z+
    10f8:	29 91       	ld	r18, Y+
    10fa:	9d 91       	ld	r25, X+
    10fc:	82 27       	eor	r24, r18
    10fe:	89 23       	and	r24, r25
    1100:	31 f4       	brne	.+12     	; 0x110e <route_via_gw+0x3e>
    1102:	e4 17       	cp	r30, r20
    1104:	f5 07       	cpc	r31, r21
    1106:	b9 f7       	brne	.-18     	; 0x10f6 <route_via_gw+0x26>
    1108:	03 c0       	rjmp	.+6      	; 0x1110 <route_via_gw+0x40>
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	01 c0       	rjmp	.+2      	; 0x1110 <route_via_gw+0x40>
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	df 91       	pop	r29
    1112:	cf 91       	pop	r28
    1114:	08 95       	ret

00001116 <check_ip_message_is_from>:
    1116:	fc 01       	movw	r30, r24
    1118:	32 8d       	ldd	r19, Z+26	; 0x1a
    111a:	fb 01       	movw	r30, r22
    111c:	20 81       	ld	r18, Z
    111e:	32 13       	cpse	r19, r18
    1120:	0d c0       	rjmp	.+26     	; 0x113c <check_ip_message_is_from+0x26>
    1122:	dc 01       	movw	r26, r24
    1124:	5b 96       	adiw	r26, 0x1b	; 27
    1126:	31 96       	adiw	r30, 0x01	; 1
    1128:	4e 96       	adiw	r24, 0x1e	; 30
    112a:	3d 91       	ld	r19, X+
    112c:	21 91       	ld	r18, Z+
    112e:	32 13       	cpse	r19, r18
    1130:	07 c0       	rjmp	.+14     	; 0x1140 <check_ip_message_is_from+0x2a>
    1132:	a8 17       	cp	r26, r24
    1134:	b9 07       	cpc	r27, r25
    1136:	c9 f7       	brne	.-14     	; 0x112a <check_ip_message_is_from+0x14>
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	08 95       	ret
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	08 95       	ret
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	08 95       	ret

00001144 <eth_type_is_arp_and_my_ip>:
    1144:	69 32       	cpi	r22, 0x29	; 41
    1146:	71 05       	cpc	r23, r1
    1148:	c8 f0       	brcs	.+50     	; 0x117c <eth_type_is_arp_and_my_ip+0x38>
    114a:	fc 01       	movw	r30, r24
    114c:	24 85       	ldd	r18, Z+12	; 0x0c
    114e:	28 30       	cpi	r18, 0x08	; 8
    1150:	b9 f4       	brne	.+46     	; 0x1180 <eth_type_is_arp_and_my_ip+0x3c>
    1152:	25 85       	ldd	r18, Z+13	; 0x0d
    1154:	26 30       	cpi	r18, 0x06	; 6
    1156:	b1 f4       	brne	.+44     	; 0x1184 <eth_type_is_arp_and_my_ip+0x40>
    1158:	36 a1       	ldd	r19, Z+38	; 0x26
    115a:	20 91 f1 02 	lds	r18, 0x02F1	; 0x8002f1 <ipaddr>
    115e:	32 13       	cpse	r19, r18
    1160:	13 c0       	rjmp	.+38     	; 0x1188 <eth_type_is_arp_and_my_ip+0x44>
    1162:	b7 96       	adiw	r30, 0x27	; 39
    1164:	a2 ef       	ldi	r26, 0xF2	; 242
    1166:	b2 e0       	ldi	r27, 0x02	; 2
    1168:	8a 96       	adiw	r24, 0x2a	; 42
    116a:	31 91       	ld	r19, Z+
    116c:	2d 91       	ld	r18, X+
    116e:	32 13       	cpse	r19, r18
    1170:	0d c0       	rjmp	.+26     	; 0x118c <eth_type_is_arp_and_my_ip+0x48>
    1172:	e8 17       	cp	r30, r24
    1174:	f9 07       	cpc	r31, r25
    1176:	c9 f7       	brne	.-14     	; 0x116a <eth_type_is_arp_and_my_ip+0x26>
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	08 95       	ret
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	08 95       	ret
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	08 95       	ret
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	08 95       	ret
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	08 95       	ret
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	08 95       	ret

00001190 <eth_type_is_ip_and_my_ip>:
    1190:	cf 93       	push	r28
    1192:	df 93       	push	r29
    1194:	fc 01       	movw	r30, r24
    1196:	6a 32       	cpi	r22, 0x2A	; 42
    1198:	71 05       	cpc	r23, r1
    119a:	e0 f0       	brcs	.+56     	; 0x11d4 <eth_type_is_ip_and_my_ip+0x44>
    119c:	84 85       	ldd	r24, Z+12	; 0x0c
    119e:	88 30       	cpi	r24, 0x08	; 8
    11a0:	d9 f4       	brne	.+54     	; 0x11d8 <eth_type_is_ip_and_my_ip+0x48>
    11a2:	85 85       	ldd	r24, Z+13	; 0x0d
    11a4:	81 11       	cpse	r24, r1
    11a6:	1a c0       	rjmp	.+52     	; 0x11dc <eth_type_is_ip_and_my_ip+0x4c>
    11a8:	96 85       	ldd	r25, Z+14	; 0x0e
    11aa:	95 34       	cpi	r25, 0x45	; 69
    11ac:	c1 f4       	brne	.+48     	; 0x11de <eth_type_is_ip_and_my_ip+0x4e>
    11ae:	26 8d       	ldd	r18, Z+30	; 0x1e
    11b0:	90 91 f1 02 	lds	r25, 0x02F1	; 0x8002f1 <ipaddr>
    11b4:	29 13       	cpse	r18, r25
    11b6:	13 c0       	rjmp	.+38     	; 0x11de <eth_type_is_ip_and_my_ip+0x4e>
    11b8:	df 01       	movw	r26, r30
    11ba:	5f 96       	adiw	r26, 0x1f	; 31
    11bc:	c2 ef       	ldi	r28, 0xF2	; 242
    11be:	d2 e0       	ldi	r29, 0x02	; 2
    11c0:	b2 96       	adiw	r30, 0x22	; 34
    11c2:	2d 91       	ld	r18, X+
    11c4:	99 91       	ld	r25, Y+
    11c6:	29 13       	cpse	r18, r25
    11c8:	0a c0       	rjmp	.+20     	; 0x11de <eth_type_is_ip_and_my_ip+0x4e>
    11ca:	ae 17       	cp	r26, r30
    11cc:	bf 07       	cpc	r27, r31
    11ce:	c9 f7       	brne	.-14     	; 0x11c2 <eth_type_is_ip_and_my_ip+0x32>
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	05 c0       	rjmp	.+10     	; 0x11de <eth_type_is_ip_and_my_ip+0x4e>
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	03 c0       	rjmp	.+6      	; 0x11de <eth_type_is_ip_and_my_ip+0x4e>
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	01 c0       	rjmp	.+2      	; 0x11de <eth_type_is_ip_and_my_ip+0x4e>
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	df 91       	pop	r29
    11e0:	cf 91       	pop	r28
    11e2:	08 95       	ret

000011e4 <make_eth>:
    11e4:	fc 01       	movw	r30, r24
    11e6:	a5 ef       	ldi	r26, 0xF5	; 245
    11e8:	b2 e0       	ldi	r27, 0x02	; 2
    11ea:	9c 01       	movw	r18, r24
    11ec:	2a 5f       	subi	r18, 0xFA	; 250
    11ee:	3f 4f       	sbci	r19, 0xFF	; 255
    11f0:	86 81       	ldd	r24, Z+6	; 0x06
    11f2:	81 93       	st	Z+, r24
    11f4:	8d 91       	ld	r24, X+
    11f6:	85 83       	std	Z+5, r24	; 0x05
    11f8:	e2 17       	cp	r30, r18
    11fa:	f3 07       	cpc	r31, r19
    11fc:	c9 f7       	brne	.-14     	; 0x11f0 <make_eth+0xc>
    11fe:	08 95       	ret

00001200 <fill_ip_hdr_checksum>:
    1200:	cf 93       	push	r28
    1202:	df 93       	push	r29
    1204:	ec 01       	movw	r28, r24
    1206:	18 8e       	std	Y+24, r1	; 0x18
    1208:	19 8e       	std	Y+25, r1	; 0x19
    120a:	80 e4       	ldi	r24, 0x40	; 64
    120c:	8c 8b       	std	Y+20, r24	; 0x14
    120e:	1d 8a       	std	Y+21, r1	; 0x15
    1210:	8e 8b       	std	Y+22, r24	; 0x16
    1212:	40 e0       	ldi	r20, 0x00	; 0
    1214:	64 e1       	ldi	r22, 0x14	; 20
    1216:	70 e0       	ldi	r23, 0x00	; 0
    1218:	ce 01       	movw	r24, r28
    121a:	0e 96       	adiw	r24, 0x0e	; 14
    121c:	d8 de       	rcall	.-592    	; 0xfce <checksum>
    121e:	98 8f       	std	Y+24, r25	; 0x18
    1220:	89 8f       	std	Y+25, r24	; 0x19
    1222:	df 91       	pop	r29
    1224:	cf 91       	pop	r28
    1226:	08 95       	ret

00001228 <make_ip>:
    1228:	ac 01       	movw	r20, r24
    122a:	a1 ef       	ldi	r26, 0xF1	; 241
    122c:	b2 e0       	ldi	r27, 0x02	; 2
    122e:	fc 01       	movw	r30, r24
    1230:	7a 96       	adiw	r30, 0x1a	; 26
    1232:	25 ef       	ldi	r18, 0xF5	; 245
    1234:	32 e0       	ldi	r19, 0x02	; 2
    1236:	90 81       	ld	r25, Z
    1238:	94 83       	std	Z+4, r25	; 0x04
    123a:	9d 91       	ld	r25, X+
    123c:	91 93       	st	Z+, r25
    123e:	a2 17       	cp	r26, r18
    1240:	b3 07       	cpc	r27, r19
    1242:	c9 f7       	brne	.-14     	; 0x1236 <make_ip+0xe>
    1244:	ca 01       	movw	r24, r20
    1246:	dc cf       	rjmp	.-72     	; 0x1200 <fill_ip_hdr_checksum>
    1248:	08 95       	ret

0000124a <step_seq>:
    124a:	fc 01       	movw	r30, r24
    124c:	ba 96       	adiw	r30, 0x2a	; 42
    124e:	86 96       	adiw	r24, 0x26	; 38
    1250:	22 91       	ld	r18, -Z
    1252:	62 0f       	add	r22, r18
    1254:	71 1d       	adc	r23, r1
    1256:	24 81       	ldd	r18, Z+4	; 0x04
    1258:	64 83       	std	Z+4, r22	; 0x04
    125a:	44 23       	and	r20, r20
    125c:	11 f0       	breq	.+4      	; 0x1262 <step_seq+0x18>
    125e:	20 83       	st	Z, r18
    1260:	01 c0       	rjmp	.+2      	; 0x1264 <step_seq+0x1a>
    1262:	10 82       	st	Z, r1
    1264:	67 2f       	mov	r22, r23
    1266:	77 27       	eor	r23, r23
    1268:	e8 17       	cp	r30, r24
    126a:	f9 07       	cpc	r31, r25
    126c:	89 f7       	brne	.-30     	; 0x1250 <step_seq+0x6>
    126e:	08 95       	ret

00001270 <make_tcphead>:
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	ec 01       	movw	r28, r24
    1276:	8c a1       	ldd	r24, Y+36	; 0x24
    1278:	9a a1       	ldd	r25, Y+34	; 0x22
    127a:	9c a3       	std	Y+36, r25	; 0x24
    127c:	8a a3       	std	Y+34, r24	; 0x22
    127e:	8d a1       	ldd	r24, Y+37	; 0x25
    1280:	9b a1       	ldd	r25, Y+35	; 0x23
    1282:	9d a3       	std	Y+37, r25	; 0x25
    1284:	8b a3       	std	Y+35, r24	; 0x23
    1286:	ce 01       	movw	r24, r28
    1288:	e0 df       	rcall	.-64     	; 0x124a <step_seq>
    128a:	1a aa       	std	Y+50, r1	; 0x32
    128c:	1b aa       	std	Y+51, r1	; 0x33
    128e:	80 e5       	ldi	r24, 0x50	; 80
    1290:	8e a7       	std	Y+46, r24	; 0x2e
    1292:	df 91       	pop	r29
    1294:	cf 91       	pop	r28
    1296:	08 95       	ret

00001298 <make_arp_answer_from_request>:
    1298:	cf 93       	push	r28
    129a:	df 93       	push	r29
    129c:	ec 01       	movw	r28, r24
    129e:	a2 df       	rcall	.-188    	; 0x11e4 <make_eth>
    12a0:	1c 8a       	std	Y+20, r1	; 0x14
    12a2:	82 e0       	ldi	r24, 0x02	; 2
    12a4:	8d 8b       	std	Y+21, r24	; 0x15
    12a6:	a5 ef       	ldi	r26, 0xF5	; 245
    12a8:	b2 e0       	ldi	r27, 0x02	; 2
    12aa:	fe 01       	movw	r30, r28
    12ac:	76 96       	adiw	r30, 0x16	; 22
    12ae:	2b ef       	ldi	r18, 0xFB	; 251
    12b0:	32 e0       	ldi	r19, 0x02	; 2
    12b2:	80 81       	ld	r24, Z
    12b4:	82 87       	std	Z+10, r24	; 0x0a
    12b6:	8d 91       	ld	r24, X+
    12b8:	81 93       	st	Z+, r24
    12ba:	a2 17       	cp	r26, r18
    12bc:	b3 07       	cpc	r27, r19
    12be:	c9 f7       	brne	.-14     	; 0x12b2 <make_arp_answer_from_request+0x1a>
    12c0:	a1 ef       	ldi	r26, 0xF1	; 241
    12c2:	b2 e0       	ldi	r27, 0x02	; 2
    12c4:	fe 01       	movw	r30, r28
    12c6:	7c 96       	adiw	r30, 0x1c	; 28
    12c8:	25 ef       	ldi	r18, 0xF5	; 245
    12ca:	32 e0       	ldi	r19, 0x02	; 2
    12cc:	80 81       	ld	r24, Z
    12ce:	82 87       	std	Z+10, r24	; 0x0a
    12d0:	8d 91       	ld	r24, X+
    12d2:	81 93       	st	Z+, r24
    12d4:	a2 17       	cp	r26, r18
    12d6:	b3 07       	cpc	r27, r19
    12d8:	c9 f7       	brne	.-14     	; 0x12cc <make_arp_answer_from_request+0x34>
    12da:	be 01       	movw	r22, r28
    12dc:	8a e2       	ldi	r24, 0x2A	; 42
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	43 dd       	rcall	.-1402   	; 0xd68 <enc28j60PacketSend>
    12e2:	df 91       	pop	r29
    12e4:	cf 91       	pop	r28
    12e6:	08 95       	ret

000012e8 <make_echo_reply_from_request>:
    12e8:	0f 93       	push	r16
    12ea:	1f 93       	push	r17
    12ec:	cf 93       	push	r28
    12ee:	df 93       	push	r29
    12f0:	ec 01       	movw	r28, r24
    12f2:	8b 01       	movw	r16, r22
    12f4:	77 df       	rcall	.-274    	; 0x11e4 <make_eth>
    12f6:	ce 01       	movw	r24, r28
    12f8:	97 df       	rcall	.-210    	; 0x1228 <make_ip>
    12fa:	1a a2       	std	Y+34, r1	; 0x22
    12fc:	8c a1       	ldd	r24, Y+36	; 0x24
    12fe:	88 3f       	cpi	r24, 0xF8	; 248
    1300:	18 f0       	brcs	.+6      	; 0x1308 <make_echo_reply_from_request+0x20>
    1302:	9d a1       	ldd	r25, Y+37	; 0x25
    1304:	9f 5f       	subi	r25, 0xFF	; 255
    1306:	9d a3       	std	Y+37, r25	; 0x25
    1308:	88 5f       	subi	r24, 0xF8	; 248
    130a:	8c a3       	std	Y+36, r24	; 0x24
    130c:	be 01       	movw	r22, r28
    130e:	c8 01       	movw	r24, r16
    1310:	2b dd       	rcall	.-1450   	; 0xd68 <enc28j60PacketSend>
    1312:	df 91       	pop	r29
    1314:	cf 91       	pop	r28
    1316:	1f 91       	pop	r17
    1318:	0f 91       	pop	r16
    131a:	08 95       	ret

0000131c <get_tcp_data_len>:
    131c:	fc 01       	movw	r30, r24
    131e:	20 89       	ldd	r18, Z+16	; 0x10
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	32 2f       	mov	r19, r18
    1324:	22 27       	eor	r18, r18
    1326:	81 89       	ldd	r24, Z+17	; 0x11
    1328:	28 2b       	or	r18, r24
    132a:	24 51       	subi	r18, 0x14	; 20
    132c:	31 09       	sbc	r19, r1
    132e:	86 a5       	ldd	r24, Z+46	; 0x2e
    1330:	82 95       	swap	r24
    1332:	8f 70       	andi	r24, 0x0F	; 15
    1334:	a9 01       	movw	r20, r18
    1336:	64 e0       	ldi	r22, 0x04	; 4
    1338:	86 9f       	mul	r24, r22
    133a:	40 19       	sub	r20, r0
    133c:	51 09       	sbc	r21, r1
    133e:	11 24       	eor	r1, r1
    1340:	ca 01       	movw	r24, r20
    1342:	99 23       	and	r25, r25
    1344:	14 f4       	brge	.+4      	; 0x134a <get_tcp_data_len+0x2e>
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	08 95       	ret

0000134c <fill_tcp_data_p>:
    134c:	9a 01       	movw	r18, r20
    134e:	2f 5f       	subi	r18, 0xFF	; 255
    1350:	3f 4f       	sbci	r19, 0xFF	; 255
    1352:	fa 01       	movw	r30, r20
    1354:	44 91       	lpm	r20, Z
    1356:	44 23       	and	r20, r20
    1358:	69 f0       	breq	.+26     	; 0x1374 <fill_tcp_data_p+0x28>
    135a:	fb 01       	movw	r30, r22
    135c:	f6 96       	adiw	r30, 0x36	; 54
    135e:	dc 01       	movw	r26, r24
    1360:	ae 0f       	add	r26, r30
    1362:	bf 1f       	adc	r27, r31
    1364:	f9 01       	movw	r30, r18
    1366:	4d 93       	st	X+, r20
    1368:	6f 5f       	subi	r22, 0xFF	; 255
    136a:	7f 4f       	sbci	r23, 0xFF	; 255
    136c:	44 91       	lpm	r20, Z
    136e:	31 96       	adiw	r30, 0x01	; 1
    1370:	41 11       	cpse	r20, r1
    1372:	f9 cf       	rjmp	.-14     	; 0x1366 <fill_tcp_data_p+0x1a>
    1374:	cb 01       	movw	r24, r22
    1376:	08 95       	ret

00001378 <fill_tcp_data_len>:
    1378:	22 23       	and	r18, r18
    137a:	91 f0       	breq	.+36     	; 0x13a0 <fill_tcp_data_len+0x28>
    137c:	a4 2f       	mov	r26, r20
    137e:	b5 2f       	mov	r27, r21
    1380:	ab 01       	movw	r20, r22
    1382:	4a 5c       	subi	r20, 0xCA	; 202
    1384:	5f 4f       	sbci	r21, 0xFF	; 255
    1386:	fc 01       	movw	r30, r24
    1388:	e4 0f       	add	r30, r20
    138a:	f5 1f       	adc	r31, r21
    138c:	92 2f       	mov	r25, r18
    138e:	3d 91       	ld	r19, X+
    1390:	31 93       	st	Z+, r19
    1392:	91 50       	subi	r25, 0x01	; 1
    1394:	e1 f7       	brne	.-8      	; 0x138e <fill_tcp_data_len+0x16>
    1396:	21 50       	subi	r18, 0x01	; 1
    1398:	62 0f       	add	r22, r18
    139a:	71 1d       	adc	r23, r1
    139c:	6f 5f       	subi	r22, 0xFF	; 255
    139e:	7f 4f       	sbci	r23, 0xFF	; 255
    13a0:	cb 01       	movw	r24, r22
    13a2:	08 95       	ret

000013a4 <fill_tcp_data>:
    13a4:	fa 01       	movw	r30, r20
    13a6:	01 90       	ld	r0, Z+
    13a8:	00 20       	and	r0, r0
    13aa:	e9 f7       	brne	.-6      	; 0x13a6 <fill_tcp_data+0x2>
    13ac:	31 97       	sbiw	r30, 0x01	; 1
    13ae:	9f 01       	movw	r18, r30
    13b0:	24 1b       	sub	r18, r20
    13b2:	35 0b       	sbc	r19, r21
    13b4:	e1 cf       	rjmp	.-62     	; 0x1378 <fill_tcp_data_len>
    13b6:	08 95       	ret

000013b8 <www_client_internal_datafill_callback>:
    13b8:	ef 92       	push	r14
    13ba:	ff 92       	push	r15
    13bc:	0f 93       	push	r16
    13be:	1f 93       	push	r17
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <www_client_internal_datafill_callback+0xe>
    13c6:	00 d0       	rcall	.+0      	; 0x13c8 <www_client_internal_datafill_callback+0x10>
    13c8:	1f 92       	push	r1
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <www_fd>
    13d2:	98 13       	cpse	r25, r24
    13d4:	a5 c0       	rjmp	.+330    	; 0x1520 <www_client_internal_datafill_callback+0x168>
    13d6:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <browsertype>
    13da:	81 11       	cpse	r24, r1
    13dc:	2a c0       	rjmp	.+84     	; 0x1432 <www_client_internal_datafill_callback+0x7a>
    13de:	00 91 cd 02 	lds	r16, 0x02CD	; 0x8002cd <bufptr>
    13e2:	10 91 ce 02 	lds	r17, 0x02CE	; 0x8002ce <bufptr+0x1>
    13e6:	46 ec       	ldi	r20, 0xC6	; 198
    13e8:	52 e0       	ldi	r21, 0x02	; 2
    13ea:	60 e0       	ldi	r22, 0x00	; 0
    13ec:	70 e0       	ldi	r23, 0x00	; 0
    13ee:	c8 01       	movw	r24, r16
    13f0:	ad df       	rcall	.-166    	; 0x134c <fill_tcp_data_p>
    13f2:	40 91 d3 02 	lds	r20, 0x02D3	; 0x8002d3 <client_urlbuf_p>
    13f6:	50 91 d4 02 	lds	r21, 0x02D4	; 0x8002d4 <client_urlbuf_p+0x1>
    13fa:	bc 01       	movw	r22, r24
    13fc:	c8 01       	movw	r24, r16
    13fe:	a6 df       	rcall	.-180    	; 0x134c <fill_tcp_data_p>
    1400:	40 91 d1 02 	lds	r20, 0x02D1	; 0x8002d1 <client_urlbuf_var>
    1404:	50 91 d2 02 	lds	r21, 0x02D2	; 0x8002d2 <client_urlbuf_var+0x1>
    1408:	bc 01       	movw	r22, r24
    140a:	c8 01       	movw	r24, r16
    140c:	cb df       	rcall	.-106    	; 0x13a4 <fill_tcp_data>
    140e:	44 eb       	ldi	r20, 0xB4	; 180
    1410:	52 e0       	ldi	r21, 0x02	; 2
    1412:	bc 01       	movw	r22, r24
    1414:	c8 01       	movw	r24, r16
    1416:	9a df       	rcall	.-204    	; 0x134c <fill_tcp_data_p>
    1418:	40 91 cf 02 	lds	r20, 0x02CF	; 0x8002cf <client_hoststr>
    141c:	50 91 d0 02 	lds	r21, 0x02D0	; 0x8002d0 <client_hoststr+0x1>
    1420:	bc 01       	movw	r22, r24
    1422:	c8 01       	movw	r24, r16
    1424:	93 df       	rcall	.-218    	; 0x134c <fill_tcp_data_p>
    1426:	47 e8       	ldi	r20, 0x87	; 135
    1428:	52 e0       	ldi	r21, 0x02	; 2
    142a:	bc 01       	movw	r22, r24
    142c:	c8 01       	movw	r24, r16
    142e:	8e df       	rcall	.-228    	; 0x134c <fill_tcp_data_p>
    1430:	79 c0       	rjmp	.+242    	; 0x1524 <www_client_internal_datafill_callback+0x16c>
    1432:	81 30       	cpi	r24, 0x01	; 1
    1434:	09 f0       	breq	.+2      	; 0x1438 <www_client_internal_datafill_callback+0x80>
    1436:	68 c0       	rjmp	.+208    	; 0x1508 <www_client_internal_datafill_callback+0x150>
    1438:	00 91 cd 02 	lds	r16, 0x02CD	; 0x8002cd <bufptr>
    143c:	10 91 ce 02 	lds	r17, 0x02CE	; 0x8002ce <bufptr+0x1>
    1440:	41 e8       	ldi	r20, 0x81	; 129
    1442:	52 e0       	ldi	r21, 0x02	; 2
    1444:	60 e0       	ldi	r22, 0x00	; 0
    1446:	70 e0       	ldi	r23, 0x00	; 0
    1448:	c8 01       	movw	r24, r16
    144a:	80 df       	rcall	.-256    	; 0x134c <fill_tcp_data_p>
    144c:	40 91 d3 02 	lds	r20, 0x02D3	; 0x8002d3 <client_urlbuf_p>
    1450:	50 91 d4 02 	lds	r21, 0x02D4	; 0x8002d4 <client_urlbuf_p+0x1>
    1454:	bc 01       	movw	r22, r24
    1456:	c8 01       	movw	r24, r16
    1458:	79 df       	rcall	.-270    	; 0x134c <fill_tcp_data_p>
    145a:	40 91 d1 02 	lds	r20, 0x02D1	; 0x8002d1 <client_urlbuf_var>
    145e:	50 91 d2 02 	lds	r21, 0x02D2	; 0x8002d2 <client_urlbuf_var+0x1>
    1462:	bc 01       	movw	r22, r24
    1464:	c8 01       	movw	r24, r16
    1466:	9e df       	rcall	.-196    	; 0x13a4 <fill_tcp_data>
    1468:	4f e6       	ldi	r20, 0x6F	; 111
    146a:	52 e0       	ldi	r21, 0x02	; 2
    146c:	bc 01       	movw	r22, r24
    146e:	c8 01       	movw	r24, r16
    1470:	6d df       	rcall	.-294    	; 0x134c <fill_tcp_data_p>
    1472:	40 91 cf 02 	lds	r20, 0x02CF	; 0x8002cf <client_hoststr>
    1476:	50 91 d0 02 	lds	r21, 0x02D0	; 0x8002d0 <client_hoststr+0x1>
    147a:	bc 01       	movw	r22, r24
    147c:	c8 01       	movw	r24, r16
    147e:	66 df       	rcall	.-308    	; 0x134c <fill_tcp_data_p>
    1480:	e0 90 d7 02 	lds	r14, 0x02D7	; 0x8002d7 <client_additionalheaderline_p>
    1484:	f0 90 d8 02 	lds	r15, 0x02D8	; 0x8002d8 <client_additionalheaderline_p+0x1>
    1488:	e1 14       	cp	r14, r1
    148a:	f1 04       	cpc	r15, r1
    148c:	49 f0       	breq	.+18     	; 0x14a0 <www_client_internal_datafill_callback+0xe8>
    148e:	4c e6       	ldi	r20, 0x6C	; 108
    1490:	52 e0       	ldi	r21, 0x02	; 2
    1492:	bc 01       	movw	r22, r24
    1494:	c8 01       	movw	r24, r16
    1496:	5a df       	rcall	.-332    	; 0x134c <fill_tcp_data_p>
    1498:	a7 01       	movw	r20, r14
    149a:	bc 01       	movw	r22, r24
    149c:	c8 01       	movw	r24, r16
    149e:	56 df       	rcall	.-340    	; 0x134c <fill_tcp_data_p>
    14a0:	47 e4       	ldi	r20, 0x47	; 71
    14a2:	52 e0       	ldi	r21, 0x02	; 2
    14a4:	bc 01       	movw	r22, r24
    14a6:	c8 01       	movw	r24, r16
    14a8:	51 df       	rcall	.-350    	; 0x134c <fill_tcp_data_p>
    14aa:	46 e3       	ldi	r20, 0x36	; 54
    14ac:	52 e0       	ldi	r21, 0x02	; 2
    14ae:	bc 01       	movw	r22, r24
    14b0:	c8 01       	movw	r24, r16
    14b2:	4c df       	rcall	.-360    	; 0x134c <fill_tcp_data_p>
    14b4:	7c 01       	movw	r14, r24
    14b6:	e0 91 d5 02 	lds	r30, 0x02D5	; 0x8002d5 <client_postval>
    14ba:	f0 91 d6 02 	lds	r31, 0x02D6	; 0x8002d6 <client_postval+0x1>
    14be:	df 01       	movw	r26, r30
    14c0:	0d 90       	ld	r0, X+
    14c2:	00 20       	and	r0, r0
    14c4:	e9 f7       	brne	.-6      	; 0x14c0 <www_client_internal_datafill_callback+0x108>
    14c6:	cd 01       	movw	r24, r26
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	4a e0       	ldi	r20, 0x0A	; 10
    14cc:	be 01       	movw	r22, r28
    14ce:	6f 5f       	subi	r22, 0xFF	; 255
    14d0:	7f 4f       	sbci	r23, 0xFF	; 255
    14d2:	8e 1b       	sub	r24, r30
    14d4:	9f 0b       	sbc	r25, r31
    14d6:	0e 94 53 31 	call	0x62a6	; 0x62a6 <__itoa_ncheck>
    14da:	00 91 cd 02 	lds	r16, 0x02CD	; 0x8002cd <bufptr>
    14de:	10 91 ce 02 	lds	r17, 0x02CE	; 0x8002ce <bufptr+0x1>
    14e2:	ae 01       	movw	r20, r28
    14e4:	4f 5f       	subi	r20, 0xFF	; 255
    14e6:	5f 4f       	sbci	r21, 0xFF	; 255
    14e8:	b7 01       	movw	r22, r14
    14ea:	c8 01       	movw	r24, r16
    14ec:	5b df       	rcall	.-330    	; 0x13a4 <fill_tcp_data>
    14ee:	40 e0       	ldi	r20, 0x00	; 0
    14f0:	52 e0       	ldi	r21, 0x02	; 2
    14f2:	bc 01       	movw	r22, r24
    14f4:	c8 01       	movw	r24, r16
    14f6:	2a df       	rcall	.-428    	; 0x134c <fill_tcp_data_p>
    14f8:	40 91 d5 02 	lds	r20, 0x02D5	; 0x8002d5 <client_postval>
    14fc:	50 91 d6 02 	lds	r21, 0x02D6	; 0x8002d6 <client_postval+0x1>
    1500:	bc 01       	movw	r22, r24
    1502:	c8 01       	movw	r24, r16
    1504:	4f df       	rcall	.-354    	; 0x13a4 <fill_tcp_data>
    1506:	0e c0       	rjmp	.+28     	; 0x1524 <www_client_internal_datafill_callback+0x16c>
    1508:	40 91 d1 02 	lds	r20, 0x02D1	; 0x8002d1 <client_urlbuf_var>
    150c:	50 91 d2 02 	lds	r21, 0x02D2	; 0x8002d2 <client_urlbuf_var+0x1>
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	70 e0       	ldi	r23, 0x00	; 0
    1514:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <bufptr>
    1518:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <bufptr+0x1>
    151c:	43 df       	rcall	.-378    	; 0x13a4 <fill_tcp_data>
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <www_client_internal_datafill_callback+0x16c>
    1520:	80 e0       	ldi	r24, 0x00	; 0
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	0f 90       	pop	r0
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	df 91       	pop	r29
    1530:	cf 91       	pop	r28
    1532:	1f 91       	pop	r17
    1534:	0f 91       	pop	r16
    1536:	ff 90       	pop	r15
    1538:	ef 90       	pop	r14
    153a:	08 95       	ret

0000153c <make_tcp_ack_from_any>:
    153c:	ff 92       	push	r15
    153e:	0f 93       	push	r16
    1540:	1f 93       	push	r17
    1542:	cf 93       	push	r28
    1544:	df 93       	push	r29
    1546:	ec 01       	movw	r28, r24
    1548:	8b 01       	movw	r16, r22
    154a:	f4 2e       	mov	r15, r20
    154c:	4b de       	rcall	.-874    	; 0x11e4 <make_eth>
    154e:	8f 2d       	mov	r24, r15
    1550:	80 61       	ori	r24, 0x10	; 16
    1552:	8f a7       	std	Y+47, r24	; 0x2f
    1554:	84 e0       	ldi	r24, 0x04	; 4
    1556:	f8 12       	cpse	r15, r24
    1558:	05 c0       	rjmp	.+10     	; 0x1564 <make_tcp_ack_from_any+0x28>
    155a:	41 e0       	ldi	r20, 0x01	; 1
    155c:	b8 01       	movw	r22, r16
    155e:	ce 01       	movw	r24, r28
    1560:	87 de       	rcall	.-754    	; 0x1270 <make_tcphead>
    1562:	09 c0       	rjmp	.+18     	; 0x1576 <make_tcp_ack_from_any+0x3a>
    1564:	01 15       	cp	r16, r1
    1566:	11 05       	cpc	r17, r1
    1568:	11 f4       	brne	.+4      	; 0x156e <make_tcp_ack_from_any+0x32>
    156a:	01 e0       	ldi	r16, 0x01	; 1
    156c:	10 e0       	ldi	r17, 0x00	; 0
    156e:	41 e0       	ldi	r20, 0x01	; 1
    1570:	b8 01       	movw	r22, r16
    1572:	ce 01       	movw	r24, r28
    1574:	7d de       	rcall	.-774    	; 0x1270 <make_tcphead>
    1576:	18 8a       	std	Y+16, r1	; 0x10
    1578:	88 e2       	ldi	r24, 0x28	; 40
    157a:	89 8b       	std	Y+17, r24	; 0x11
    157c:	ce 01       	movw	r24, r28
    157e:	54 de       	rcall	.-856    	; 0x1228 <make_ip>
    1580:	84 e0       	ldi	r24, 0x04	; 4
    1582:	88 ab       	std	Y+48, r24	; 0x30
    1584:	19 aa       	std	Y+49, r1	; 0x31
    1586:	42 e0       	ldi	r20, 0x02	; 2
    1588:	6c e1       	ldi	r22, 0x1C	; 28
    158a:	70 e0       	ldi	r23, 0x00	; 0
    158c:	ce 01       	movw	r24, r28
    158e:	4a 96       	adiw	r24, 0x1a	; 26
    1590:	1e dd       	rcall	.-1476   	; 0xfce <checksum>
    1592:	9a ab       	std	Y+50, r25	; 0x32
    1594:	8b ab       	std	Y+51, r24	; 0x33
    1596:	be 01       	movw	r22, r28
    1598:	86 e3       	ldi	r24, 0x36	; 54
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	e5 db       	rcall	.-2102   	; 0xd68 <enc28j60PacketSend>
    159e:	df 91       	pop	r29
    15a0:	cf 91       	pop	r28
    15a2:	1f 91       	pop	r17
    15a4:	0f 91       	pop	r16
    15a6:	ff 90       	pop	r15
    15a8:	08 95       	ret

000015aa <make_tcp_ack_with_data_noflags>:
    15aa:	0f 93       	push	r16
    15ac:	1f 93       	push	r17
    15ae:	cf 93       	push	r28
    15b0:	df 93       	push	r29
    15b2:	ec 01       	movw	r28, r24
    15b4:	8b 01       	movw	r16, r22
    15b6:	cb 01       	movw	r24, r22
    15b8:	88 96       	adiw	r24, 0x28	; 40
    15ba:	98 8b       	std	Y+16, r25	; 0x10
    15bc:	89 8b       	std	Y+17, r24	; 0x11
    15be:	ce 01       	movw	r24, r28
    15c0:	1f de       	rcall	.-962    	; 0x1200 <fill_ip_hdr_checksum>
    15c2:	1a aa       	std	Y+50, r1	; 0x32
    15c4:	1b aa       	std	Y+51, r1	; 0x33
    15c6:	b8 01       	movw	r22, r16
    15c8:	64 5e       	subi	r22, 0xE4	; 228
    15ca:	7f 4f       	sbci	r23, 0xFF	; 255
    15cc:	42 e0       	ldi	r20, 0x02	; 2
    15ce:	ce 01       	movw	r24, r28
    15d0:	4a 96       	adiw	r24, 0x1a	; 26
    15d2:	fd dc       	rcall	.-1542   	; 0xfce <checksum>
    15d4:	9a ab       	std	Y+50, r25	; 0x32
    15d6:	8b ab       	std	Y+51, r24	; 0x33
    15d8:	be 01       	movw	r22, r28
    15da:	c8 01       	movw	r24, r16
    15dc:	c6 96       	adiw	r24, 0x36	; 54
    15de:	c4 db       	rcall	.-2168   	; 0xd68 <enc28j60PacketSend>
    15e0:	df 91       	pop	r29
    15e2:	cf 91       	pop	r28
    15e4:	1f 91       	pop	r17
    15e6:	0f 91       	pop	r16
    15e8:	08 95       	ret

000015ea <init_udp_or_www_server>:
    15ea:	9c 01       	movw	r18, r24
    15ec:	61 15       	cp	r22, r1
    15ee:	71 05       	cpc	r23, r1
    15f0:	51 f0       	breq	.+20     	; 0x1606 <init_udp_or_www_server+0x1c>
    15f2:	db 01       	movw	r26, r22
    15f4:	e1 ef       	ldi	r30, 0xF1	; 241
    15f6:	f2 e0       	ldi	r31, 0x02	; 2
    15f8:	45 ef       	ldi	r20, 0xF5	; 245
    15fa:	52 e0       	ldi	r21, 0x02	; 2
    15fc:	9d 91       	ld	r25, X+
    15fe:	91 93       	st	Z+, r25
    1600:	e4 17       	cp	r30, r20
    1602:	f5 07       	cpc	r31, r21
    1604:	d9 f7       	brne	.-10     	; 0x15fc <init_udp_or_www_server+0x12>
    1606:	21 15       	cp	r18, r1
    1608:	31 05       	cpc	r19, r1
    160a:	11 f0       	breq	.+4      	; 0x1610 <init_udp_or_www_server+0x26>
    160c:	c9 01       	movw	r24, r18
    160e:	55 cd       	rjmp	.-1366   	; 0x10ba <init_mac>
    1610:	08 95       	ret

00001612 <www_server_port>:
    1612:	90 93 c6 02 	sts	0x02C6, r25	; 0x8002c6 <wwwport_h>
    1616:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <wwwport_l>
    161a:	08 95       	ret

0000161c <make_tcp_synack_from_syn>:
    161c:	cf 93       	push	r28
    161e:	df 93       	push	r29
    1620:	ec 01       	movw	r28, r24
    1622:	e0 dd       	rcall	.-1088   	; 0x11e4 <make_eth>
    1624:	18 8a       	std	Y+16, r1	; 0x10
    1626:	8c e2       	ldi	r24, 0x2C	; 44
    1628:	89 8b       	std	Y+17, r24	; 0x11
    162a:	ce 01       	movw	r24, r28
    162c:	fd dd       	rcall	.-1030   	; 0x1228 <make_ip>
    162e:	82 e1       	ldi	r24, 0x12	; 18
    1630:	8f a7       	std	Y+47, r24	; 0x2f
    1632:	40 e0       	ldi	r20, 0x00	; 0
    1634:	61 e0       	ldi	r22, 0x01	; 1
    1636:	70 e0       	ldi	r23, 0x00	; 0
    1638:	ce 01       	movw	r24, r28
    163a:	1a de       	rcall	.-972    	; 0x1270 <make_tcphead>
    163c:	1e a2       	std	Y+38, r1	; 0x26
    163e:	1f a2       	std	Y+39, r1	; 0x27
    1640:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <seqnum>
    1644:	88 a7       	std	Y+40, r24	; 0x28
    1646:	19 a6       	std	Y+41, r1	; 0x29
    1648:	8d 5f       	subi	r24, 0xFD	; 253
    164a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <seqnum>
    164e:	82 e0       	ldi	r24, 0x02	; 2
    1650:	8e ab       	std	Y+54, r24	; 0x36
    1652:	84 e0       	ldi	r24, 0x04	; 4
    1654:	8f ab       	std	Y+55, r24	; 0x37
    1656:	85 e0       	ldi	r24, 0x05	; 5
    1658:	88 af       	std	Y+56, r24	; 0x38
    165a:	19 ae       	std	Y+57, r1	; 0x39
    165c:	80 e6       	ldi	r24, 0x60	; 96
    165e:	8e a7       	std	Y+46, r24	; 0x2e
    1660:	8a e0       	ldi	r24, 0x0A	; 10
    1662:	88 ab       	std	Y+48, r24	; 0x30
    1664:	19 aa       	std	Y+49, r1	; 0x31
    1666:	42 e0       	ldi	r20, 0x02	; 2
    1668:	60 e2       	ldi	r22, 0x20	; 32
    166a:	70 e0       	ldi	r23, 0x00	; 0
    166c:	ce 01       	movw	r24, r28
    166e:	4a 96       	adiw	r24, 0x1a	; 26
    1670:	ae dc       	rcall	.-1700   	; 0xfce <checksum>
    1672:	9a ab       	std	Y+50, r25	; 0x32
    1674:	8b ab       	std	Y+51, r24	; 0x33
    1676:	be 01       	movw	r22, r28
    1678:	8a e3       	ldi	r24, 0x3A	; 58
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	75 db       	rcall	.-2326   	; 0xd68 <enc28j60PacketSend>
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
    1682:	08 95       	ret

00001684 <fill_buf_p>:
    1684:	dc 01       	movw	r26, r24
    1686:	fa 01       	movw	r30, r20
    1688:	61 15       	cp	r22, r1
    168a:	71 05       	cpc	r23, r1
    168c:	41 f0       	breq	.+16     	; 0x169e <fill_buf_p+0x1a>
    168e:	68 0f       	add	r22, r24
    1690:	79 1f       	adc	r23, r25
    1692:	84 91       	lpm	r24, Z
    1694:	8d 93       	st	X+, r24
    1696:	31 96       	adiw	r30, 0x01	; 1
    1698:	6a 17       	cp	r22, r26
    169a:	7b 07       	cpc	r23, r27
    169c:	d1 f7       	brne	.-12     	; 0x1692 <fill_buf_p+0xe>
    169e:	08 95       	ret

000016a0 <client_arp_whohas>:
    16a0:	cf 92       	push	r12
    16a2:	df 92       	push	r13
    16a4:	ef 92       	push	r14
    16a6:	ff 92       	push	r15
    16a8:	0f 93       	push	r16
    16aa:	1f 93       	push	r17
    16ac:	cf 93       	push	r28
    16ae:	df 93       	push	r29
    16b0:	7c 01       	movw	r14, r24
    16b2:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <ipaddr>
    16b6:	88 23       	and	r24, r24
    16b8:	c1 f1       	breq	.+112    	; 0x172a <client_arp_whohas+0x8a>
    16ba:	d7 01       	movw	r26, r14
    16bc:	c5 ef       	ldi	r28, 0xF5	; 245
    16be:	d2 e0       	ldi	r29, 0x02	; 2
    16c0:	0b ef       	ldi	r16, 0xFB	; 251
    16c2:	12 e0       	ldi	r17, 0x02	; 2
    16c4:	fe 01       	movw	r30, r28
    16c6:	2f ef       	ldi	r18, 0xFF	; 255
    16c8:	2d 93       	st	X+, r18
    16ca:	91 91       	ld	r25, Z+
    16cc:	15 96       	adiw	r26, 0x05	; 5
    16ce:	9c 93       	st	X, r25
    16d0:	15 97       	sbiw	r26, 0x05	; 5
    16d2:	0e 17       	cp	r16, r30
    16d4:	1f 07       	cpc	r17, r31
    16d6:	c1 f7       	brne	.-16     	; 0x16c8 <client_arp_whohas+0x28>
    16d8:	d7 2e       	mov	r13, r23
    16da:	c6 2e       	mov	r12, r22
    16dc:	88 e0       	ldi	r24, 0x08	; 8
    16de:	f7 01       	movw	r30, r14
    16e0:	84 87       	std	Z+12, r24	; 0x0c
    16e2:	86 e0       	ldi	r24, 0x06	; 6
    16e4:	85 87       	std	Z+13, r24	; 0x0d
    16e6:	4b ec       	ldi	r20, 0xCB	; 203
    16e8:	52 e0       	ldi	r21, 0x02	; 2
    16ea:	68 e0       	ldi	r22, 0x08	; 8
    16ec:	70 e0       	ldi	r23, 0x00	; 0
    16ee:	c7 01       	movw	r24, r14
    16f0:	0e 96       	adiw	r24, 0x0e	; 14
    16f2:	c8 df       	rcall	.-112    	; 0x1684 <fill_buf_p>
    16f4:	f7 01       	movw	r30, r14
    16f6:	76 96       	adiw	r30, 0x16	; 22
    16f8:	89 91       	ld	r24, Y+
    16fa:	81 93       	st	Z+, r24
    16fc:	11 86       	std	Z+9, r1	; 0x09
    16fe:	0c 17       	cp	r16, r28
    1700:	1d 07       	cpc	r17, r29
    1702:	d1 f7       	brne	.-12     	; 0x16f8 <client_arp_whohas+0x58>
    1704:	cc 2d       	mov	r28, r12
    1706:	dd 2d       	mov	r29, r13
    1708:	a1 ef       	ldi	r26, 0xF1	; 241
    170a:	b2 e0       	ldi	r27, 0x02	; 2
    170c:	f7 01       	movw	r30, r14
    170e:	7c 96       	adiw	r30, 0x1c	; 28
    1710:	25 ef       	ldi	r18, 0xF5	; 245
    1712:	32 e0       	ldi	r19, 0x02	; 2
    1714:	89 91       	ld	r24, Y+
    1716:	82 87       	std	Z+10, r24	; 0x0a
    1718:	8d 91       	ld	r24, X+
    171a:	81 93       	st	Z+, r24
    171c:	a2 17       	cp	r26, r18
    171e:	b3 07       	cpc	r27, r19
    1720:	c9 f7       	brne	.-14     	; 0x1714 <client_arp_whohas+0x74>
    1722:	b7 01       	movw	r22, r14
    1724:	8a e2       	ldi	r24, 0x2A	; 42
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	1f db       	rcall	.-2498   	; 0xd68 <enc28j60PacketSend>
    172a:	df 91       	pop	r29
    172c:	cf 91       	pop	r28
    172e:	1f 91       	pop	r17
    1730:	0f 91       	pop	r16
    1732:	ff 90       	pop	r15
    1734:	ef 90       	pop	r14
    1736:	df 90       	pop	r13
    1738:	cf 90       	pop	r12
    173a:	08 95       	ret

0000173c <get_mac_with_arp_wait>:
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	90 91 c8 02 	lds	r25, 0x02C8	; 0x8002c8 <arpip_state>
    1742:	92 30       	cpi	r25, 0x02	; 2
    1744:	09 f4       	brne	.+2      	; 0x1748 <get_mac_with_arp_wait+0xc>
    1746:	80 e0       	ldi	r24, 0x00	; 0
    1748:	08 95       	ret

0000174a <get_mac_with_arp>:
    174a:	50 93 cf 03 	sts	0x03CF, r21	; 0x8003cf <client_arp_result_callback+0x1>
    174e:	40 93 ce 03 	sts	0x03CE, r20	; 0x8003ce <client_arp_result_callback>
    1752:	21 e0       	ldi	r18, 0x01	; 1
    1754:	20 93 c8 02 	sts	0x02C8, r18	; 0x8002c8 <arpip_state>
    1758:	60 93 c7 02 	sts	0x02C7, r22	; 0x8002c7 <arp_reference_number>
    175c:	dc 01       	movw	r26, r24
    175e:	e9 ec       	ldi	r30, 0xC9	; 201
    1760:	f2 e0       	ldi	r31, 0x02	; 2
    1762:	2d ec       	ldi	r18, 0xCD	; 205
    1764:	32 e0       	ldi	r19, 0x02	; 2
    1766:	8d 91       	ld	r24, X+
    1768:	81 93       	st	Z+, r24
    176a:	e2 17       	cp	r30, r18
    176c:	f3 07       	cpc	r31, r19
    176e:	d9 f7       	brne	.-10     	; 0x1766 <get_mac_with_arp+0x1c>
    1770:	08 95       	ret

00001772 <tcp_client_syn>:
    1772:	df 92       	push	r13
    1774:	ef 92       	push	r14
    1776:	ff 92       	push	r15
    1778:	0f 93       	push	r16
    177a:	1f 93       	push	r17
    177c:	cf 93       	push	r28
    177e:	df 93       	push	r29
    1780:	ec 01       	movw	r28, r24
    1782:	f6 2e       	mov	r15, r22
    1784:	e4 2e       	mov	r14, r20
    1786:	d5 2e       	mov	r13, r21
    1788:	a4 ee       	ldi	r26, 0xE4	; 228
    178a:	b2 e0       	ldi	r27, 0x02	; 2
    178c:	bc 01       	movw	r22, r24
    178e:	85 ef       	ldi	r24, 0xF5	; 245
    1790:	92 e0       	ldi	r25, 0x02	; 2
    1792:	4a ee       	ldi	r20, 0xEA	; 234
    1794:	52 e0       	ldi	r21, 0x02	; 2
    1796:	2d 91       	ld	r18, X+
    1798:	fb 01       	movw	r30, r22
    179a:	21 93       	st	Z+, r18
    179c:	bf 01       	movw	r22, r30
    179e:	fc 01       	movw	r30, r24
    17a0:	21 91       	ld	r18, Z+
    17a2:	cf 01       	movw	r24, r30
    17a4:	fb 01       	movw	r30, r22
    17a6:	25 83       	std	Z+5, r18	; 0x05
    17a8:	a4 17       	cp	r26, r20
    17aa:	b5 07       	cpc	r27, r21
    17ac:	a1 f7       	brne	.-24     	; 0x1796 <tcp_client_syn+0x24>
    17ae:	88 e0       	ldi	r24, 0x08	; 8
    17b0:	8c 87       	std	Y+12, r24	; 0x0c
    17b2:	1d 86       	std	Y+13, r1	; 0x0d
    17b4:	43 ed       	ldi	r20, 0xD3	; 211
    17b6:	52 e0       	ldi	r21, 0x02	; 2
    17b8:	69 e0       	ldi	r22, 0x09	; 9
    17ba:	70 e0       	ldi	r23, 0x00	; 0
    17bc:	ce 01       	movw	r24, r28
    17be:	0e 96       	adiw	r24, 0x0e	; 14
    17c0:	61 df       	rcall	.-318    	; 0x1684 <fill_buf_p>
    17c2:	8c e2       	ldi	r24, 0x2C	; 44
    17c4:	89 8b       	std	Y+17, r24	; 0x11
    17c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    17ca:	8b 8b       	std	Y+19, r24	; 0x13
    17cc:	8f 5f       	subi	r24, 0xFF	; 255
    17ce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    17d2:	86 e0       	ldi	r24, 0x06	; 6
    17d4:	8f 8b       	std	Y+23, r24	; 0x17
    17d6:	aa ee       	ldi	r26, 0xEA	; 234
    17d8:	b2 e0       	ldi	r27, 0x02	; 2
    17da:	81 ef       	ldi	r24, 0xF1	; 241
    17dc:	92 e0       	ldi	r25, 0x02	; 2
    17de:	8e 01       	movw	r16, r28
    17e0:	06 5e       	subi	r16, 0xE6	; 230
    17e2:	1f 4f       	sbci	r17, 0xFF	; 255
    17e4:	b8 01       	movw	r22, r16
    17e6:	4e ee       	ldi	r20, 0xEE	; 238
    17e8:	52 e0       	ldi	r21, 0x02	; 2
    17ea:	2d 91       	ld	r18, X+
    17ec:	fb 01       	movw	r30, r22
    17ee:	24 83       	std	Z+4, r18	; 0x04
    17f0:	fc 01       	movw	r30, r24
    17f2:	21 91       	ld	r18, Z+
    17f4:	cf 01       	movw	r24, r30
    17f6:	fb 01       	movw	r30, r22
    17f8:	21 93       	st	Z+, r18
    17fa:	bf 01       	movw	r22, r30
    17fc:	a4 17       	cp	r26, r20
    17fe:	b5 07       	cpc	r27, r21
    1800:	a1 f7       	brne	.-24     	; 0x17ea <tcp_client_syn+0x78>
    1802:	ce 01       	movw	r24, r28
    1804:	fd dc       	rcall	.-1542   	; 0x1200 <fill_ip_hdr_checksum>
    1806:	dc a2       	std	Y+36, r13	; 0x24
    1808:	ed a2       	std	Y+37, r14	; 0x25
    180a:	8b e0       	ldi	r24, 0x0B	; 11
    180c:	8a a3       	std	Y+34, r24	; 0x22
    180e:	fb a2       	std	Y+35, r15	; 0x23
    1810:	fe 01       	movw	r30, r28
    1812:	b6 96       	adiw	r30, 0x26	; 38
    1814:	ce 01       	movw	r24, r28
    1816:	8e 96       	adiw	r24, 0x2e	; 46
    1818:	11 92       	st	Z+, r1
    181a:	8e 17       	cp	r24, r30
    181c:	9f 07       	cpc	r25, r31
    181e:	e1 f7       	brne	.-8      	; 0x1818 <tcp_client_syn+0xa6>
    1820:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <seqnum>
    1824:	88 a7       	std	Y+40, r24	; 0x28
    1826:	8d 5f       	subi	r24, 0xFD	; 253
    1828:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <seqnum>
    182c:	80 e6       	ldi	r24, 0x60	; 96
    182e:	8e a7       	std	Y+46, r24	; 0x2e
    1830:	82 e0       	ldi	r24, 0x02	; 2
    1832:	8f a7       	std	Y+47, r24	; 0x2f
    1834:	93 e0       	ldi	r25, 0x03	; 3
    1836:	98 ab       	std	Y+48, r25	; 0x30
    1838:	19 aa       	std	Y+49, r1	; 0x31
    183a:	1a aa       	std	Y+50, r1	; 0x32
    183c:	1b aa       	std	Y+51, r1	; 0x33
    183e:	1c aa       	std	Y+52, r1	; 0x34
    1840:	1d aa       	std	Y+53, r1	; 0x35
    1842:	8e ab       	std	Y+54, r24	; 0x36
    1844:	94 e0       	ldi	r25, 0x04	; 4
    1846:	9f ab       	std	Y+55, r25	; 0x37
    1848:	88 af       	std	Y+56, r24	; 0x38
    184a:	8e ee       	ldi	r24, 0xEE	; 238
    184c:	89 af       	std	Y+57, r24	; 0x39
    184e:	42 e0       	ldi	r20, 0x02	; 2
    1850:	60 e2       	ldi	r22, 0x20	; 32
    1852:	70 e0       	ldi	r23, 0x00	; 0
    1854:	c8 01       	movw	r24, r16
    1856:	bb db       	rcall	.-2186   	; 0xfce <checksum>
    1858:	9a ab       	std	Y+50, r25	; 0x32
    185a:	8b ab       	std	Y+51, r24	; 0x33
    185c:	be 01       	movw	r22, r28
    185e:	8a e3       	ldi	r24, 0x3A	; 58
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	82 da       	rcall	.-2812   	; 0xd68 <enc28j60PacketSend>
    1864:	df 91       	pop	r29
    1866:	cf 91       	pop	r28
    1868:	1f 91       	pop	r17
    186a:	0f 91       	pop	r16
    186c:	ff 90       	pop	r15
    186e:	ef 90       	pop	r14
    1870:	df 90       	pop	r13
    1872:	08 95       	ret

00001874 <client_tcp_req>:
    1874:	0f 93       	push	r16
    1876:	1f 93       	push	r17
    1878:	90 93 e0 02 	sts	0x02E0, r25	; 0x8002e0 <client_tcp_result_callback+0x1>
    187c:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <client_tcp_result_callback>
    1880:	70 93 de 02 	sts	0x02DE, r23	; 0x8002de <client_tcp_datafill_callback+0x1>
    1884:	60 93 dd 02 	sts	0x02DD, r22	; 0x8002dd <client_tcp_datafill_callback>
    1888:	a2 2f       	mov	r26, r18
    188a:	b3 2f       	mov	r27, r19
    188c:	ea ee       	ldi	r30, 0xEA	; 234
    188e:	f2 e0       	ldi	r31, 0x02	; 2
    1890:	2e ee       	ldi	r18, 0xEE	; 238
    1892:	32 e0       	ldi	r19, 0x02	; 2
    1894:	8d 91       	ld	r24, X+
    1896:	81 93       	st	Z+, r24
    1898:	e2 17       	cp	r30, r18
    189a:	f3 07       	cpc	r31, r19
    189c:	d9 f7       	brne	.-10     	; 0x1894 <client_tcp_req+0x20>
    189e:	a0 2f       	mov	r26, r16
    18a0:	b1 2f       	mov	r27, r17
    18a2:	e4 ee       	ldi	r30, 0xE4	; 228
    18a4:	f2 e0       	ldi	r31, 0x02	; 2
    18a6:	2a ee       	ldi	r18, 0xEA	; 234
    18a8:	32 e0       	ldi	r19, 0x02	; 2
    18aa:	8d 91       	ld	r24, X+
    18ac:	81 93       	st	Z+, r24
    18ae:	e2 17       	cp	r30, r18
    18b0:	f3 07       	cpc	r31, r19
    18b2:	d9 f7       	brne	.-10     	; 0x18aa <client_tcp_req+0x36>
    18b4:	50 93 e2 02 	sts	0x02E2, r21	; 0x8002e2 <tcp_client_port+0x1>
    18b8:	40 93 e1 02 	sts	0x02E1, r20	; 0x8002e1 <tcp_client_port>
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <tcp_client_state>
    18c2:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <tcp_fd>
    18c6:	8f 5f       	subi	r24, 0xFF	; 255
    18c8:	88 30       	cpi	r24, 0x08	; 8
    18ca:	18 f4       	brcc	.+6      	; 0x18d2 <client_tcp_req+0x5e>
    18cc:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <tcp_fd>
    18d0:	02 c0       	rjmp	.+4      	; 0x18d6 <client_tcp_req+0x62>
    18d2:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <tcp_fd>
    18d6:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <tcp_fd>
    18da:	1f 91       	pop	r17
    18dc:	0f 91       	pop	r16
    18de:	08 95       	ret

000018e0 <client_tcpSend>:
    18e0:	8f 92       	push	r8
    18e2:	9f 92       	push	r9
    18e4:	af 92       	push	r10
    18e6:	bf 92       	push	r11
    18e8:	cf 92       	push	r12
    18ea:	df 92       	push	r13
    18ec:	ef 92       	push	r14
    18ee:	ff 92       	push	r15
    18f0:	0f 93       	push	r16
    18f2:	1f 93       	push	r17
    18f4:	cf 93       	push	r28
    18f6:	df 93       	push	r29
    18f8:	4c 01       	movw	r8, r24
    18fa:	5b 01       	movw	r10, r22
    18fc:	7a 01       	movw	r14, r20
    18fe:	69 01       	movw	r12, r18
    1900:	e8 01       	movw	r28, r16
    1902:	2c da       	rcall	.-2984   	; 0xd5c <enc28j60linkup>
    1904:	88 23       	and	r24, r24
    1906:	a9 f0       	breq	.+42     	; 0x1932 <client_tcpSend+0x52>
    1908:	90 92 d2 02 	sts	0x02D2, r9	; 0x8002d2 <client_urlbuf_var+0x1>
    190c:	80 92 d1 02 	sts	0x02D1, r8	; 0x8002d1 <client_urlbuf_var>
    1910:	82 e0       	ldi	r24, 0x02	; 2
    1912:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <browsertype>
    1916:	b0 92 da 02 	sts	0x02DA, r11	; 0x8002da <client_browser_callback+0x1>
    191a:	a0 92 d9 02 	sts	0x02D9, r10	; 0x8002d9 <client_browser_callback>
    191e:	86 01       	movw	r16, r12
    1920:	97 01       	movw	r18, r14
    1922:	ae 01       	movw	r20, r28
    1924:	6c ed       	ldi	r22, 0xDC	; 220
    1926:	79 e0       	ldi	r23, 0x09	; 9
    1928:	85 e6       	ldi	r24, 0x65	; 101
    192a:	97 e0       	ldi	r25, 0x07	; 7
    192c:	a3 df       	rcall	.-186    	; 0x1874 <client_tcp_req>
    192e:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <www_fd>
    1932:	df 91       	pop	r29
    1934:	cf 91       	pop	r28
    1936:	1f 91       	pop	r17
    1938:	0f 91       	pop	r16
    193a:	ff 90       	pop	r15
    193c:	ef 90       	pop	r14
    193e:	df 90       	pop	r13
    1940:	cf 90       	pop	r12
    1942:	bf 90       	pop	r11
    1944:	af 90       	pop	r10
    1946:	9f 90       	pop	r9
    1948:	8f 90       	pop	r8
    194a:	08 95       	ret

0000194c <packetloop_arp_icmp_tcp>:


// return 0 to just continue in the packet loop and return the position 
// of the tcp data if there is tcp data part
uint16_t packetloop_arp_icmp_tcp(uint8_t *buf,uint16_t plen)
{
    194c:	df 92       	push	r13
    194e:	ef 92       	push	r14
    1950:	ff 92       	push	r15
    1952:	0f 93       	push	r16
    1954:	1f 93       	push	r17
    1956:	cf 93       	push	r28
    1958:	df 93       	push	r29
    195a:	8c 01       	movw	r16, r24
    195c:	eb 01       	movw	r28, r22
        uint16_t save_len;
#endif
#ifdef ARP_MAC_resolver_client
        //plen will be unequal to zero if there is a valid 
        // packet (without crc error):
        if(plen==0){
    195e:	20 97       	sbiw	r28, 0x00	; 0
    1960:	09 f0       	breq	.+2      	; 0x1964 <packetloop_arp_icmp_tcp+0x18>
    1962:	50 c0       	rjmp	.+160    	; 0x1a04 <packetloop_arp_icmp_tcp+0xb8>
                if (arpip_state == (WGW_ACCEPT_ARP_REPLY|WGW_INITIAL_ARP) && arp_delaycnt==0 ){
    1964:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <arpip_state>
    1968:	89 30       	cpi	r24, 0x09	; 9
    196a:	69 f4       	brne	.+26     	; 0x1986 <packetloop_arp_icmp_tcp+0x3a>
    196c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <arp_delaycnt>
    1970:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <arp_delaycnt+0x1>
    1974:	89 2b       	or	r24, r25
    1976:	d9 f4       	brne	.+54     	; 0x19ae <packetloop_arp_icmp_tcp+0x62>
                        // arp_delaycnt has wrapped no arp reply yet
                        if (enc28j60linkup()) client_arp_whohas(buf,arpip);
    1978:	f1 d9       	rcall	.-3102   	; 0xd5c <enc28j60linkup>
    197a:	88 23       	and	r24, r24
    197c:	21 f0       	breq	.+8      	; 0x1986 <packetloop_arp_icmp_tcp+0x3a>
    197e:	69 ec       	ldi	r22, 0xC9	; 201
    1980:	72 e0       	ldi	r23, 0x02	; 2
    1982:	c8 01       	movw	r24, r16
    1984:	8d de       	rcall	.-742    	; 0x16a0 <client_arp_whohas>
                }
                if (arpip_state == WGW_INITIAL_ARP && enc28j60linkup()){
    1986:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <arpip_state>
    198a:	81 30       	cpi	r24, 0x01	; 1
    198c:	81 f4       	brne	.+32     	; 0x19ae <packetloop_arp_icmp_tcp+0x62>
    198e:	e6 d9       	rcall	.-3124   	; 0xd5c <enc28j60linkup>
    1990:	88 23       	and	r24, r24
    1992:	69 f0       	breq	.+26     	; 0x19ae <packetloop_arp_icmp_tcp+0x62>
                        client_arp_whohas(buf,arpip);
    1994:	69 ec       	ldi	r22, 0xC9	; 201
    1996:	72 e0       	ldi	r23, 0x02	; 2
    1998:	c8 01       	movw	r24, r16
    199a:	82 de       	rcall	.-764    	; 0x16a0 <client_arp_whohas>
                        arpip_state|=WGW_ACCEPT_ARP_REPLY; // WGW_INITIAL_ARP and WGW_ACCEPT_ARP_REPLY set
    199c:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <arpip_state>
    19a0:	88 60       	ori	r24, 0x08	; 8
    19a2:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <arpip_state>
                        arp_delaycnt=0; // this is like a timer, not so precise but good enough, it wraps in about 2 sec
    19a6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <arp_delaycnt+0x1>
    19aa:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <arp_delaycnt>
                }
                arp_delaycnt++;
    19ae:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <arp_delaycnt>
    19b2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <arp_delaycnt+0x1>
    19b6:	01 96       	adiw	r24, 0x01	; 1
    19b8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <arp_delaycnt+0x1>
    19bc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <arp_delaycnt>
#if defined (TCP_client)
                if (tcp_client_state==1 && enc28j60linkup()){ // send a syn
    19c0:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <tcp_client_state>
    19c4:	81 30       	cpi	r24, 0x01	; 1
    19c6:	09 f0       	breq	.+2      	; 0x19ca <packetloop_arp_icmp_tcp+0x7e>
    19c8:	96 c1       	rjmp	.+812    	; 0x1cf6 <packetloop_arp_icmp_tcp+0x3aa>
    19ca:	c8 d9       	rcall	.-3184   	; 0xd5c <enc28j60linkup>
    19cc:	88 23       	and	r24, r24
    19ce:	09 f4       	brne	.+2      	; 0x19d2 <packetloop_arp_icmp_tcp+0x86>
    19d0:	95 c1       	rjmp	.+810    	; 0x1cfc <packetloop_arp_icmp_tcp+0x3b0>
                        tcp_client_state=2;
    19d2:	82 e0       	ldi	r24, 0x02	; 2
    19d4:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <tcp_client_state>
                        tcpclient_src_port_l++; // allocate a new port
    19d8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <tcpclient_src_port_l>
    19dc:	8f 5f       	subi	r24, 0xFF	; 255
    19de:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <tcpclient_src_port_l>
                        // we encode our 3 bit fd into the src port this
                        // way we get it back in every message that comes
                        // from the server:
                        tcp_client_syn(buf,((tcp_fd<<5) | (0x1f & tcpclient_src_port_l)),tcp_client_port);
    19e2:	40 91 e1 02 	lds	r20, 0x02E1	; 0x8002e1 <tcp_client_port>
    19e6:	50 91 e2 02 	lds	r21, 0x02E2	; 0x8002e2 <tcp_client_port+0x1>
    19ea:	60 91 ee 02 	lds	r22, 0x02EE	; 0x8002ee <tcp_fd>
    19ee:	90 e2       	ldi	r25, 0x20	; 32
    19f0:	69 9f       	mul	r22, r25
    19f2:	b0 01       	movw	r22, r0
    19f4:	11 24       	eor	r1, r1
    19f6:	8f 71       	andi	r24, 0x1F	; 31
    19f8:	68 2b       	or	r22, r24
    19fa:	c8 01       	movw	r24, r16
                }
#endif
                return(0);
    19fc:	ba de       	rcall	.-652    	; 0x1772 <tcp_client_syn>
    19fe:	e1 2c       	mov	r14, r1
    1a00:	f1 2c       	mov	r15, r1
        }
#endif // ARP_MAC_resolver_client
        // arp is broadcast if unknown but a host may also
        // verify the mac address by sending it to 
        // a unicast address.
        if(eth_type_is_arp_and_my_ip(buf,plen)){
    1a02:	b0 c1       	rjmp	.+864    	; 0x1d64 <packetloop_arp_icmp_tcp+0x418>
    1a04:	9f db       	rcall	.-2242   	; 0x1144 <eth_type_is_arp_and_my_ip>
    1a06:	88 23       	and	r24, r24
                if (buf[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V){
    1a08:	69 f1       	breq	.+90     	; 0x1a64 <packetloop_arp_icmp_tcp+0x118>
    1a0a:	d8 01       	movw	r26, r16
    1a0c:	55 96       	adiw	r26, 0x15	; 21
    1a0e:	8c 91       	ld	r24, X
    1a10:	81 30       	cpi	r24, 0x01	; 1
                        // is it an arp request 
                        make_arp_answer_from_request(buf);
    1a12:	11 f4       	brne	.+4      	; 0x1a18 <packetloop_arp_icmp_tcp+0xcc>
    1a14:	c8 01       	movw	r24, r16
    1a16:	40 dc       	rcall	.-1920   	; 0x1298 <make_arp_answer_from_request>
                }
#ifdef ARP_MAC_resolver_client
                if ((arpip_state & WGW_ACCEPT_ARP_REPLY) && (buf[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V)){
    1a18:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <arpip_state>
    1a1c:	83 ff       	sbrs	r24, 3
    1a1e:	71 c1       	rjmp	.+738    	; 0x1d02 <packetloop_arp_icmp_tcp+0x3b6>
    1a20:	f8 01       	movw	r30, r16
    1a22:	85 89       	ldd	r24, Z+21	; 0x15
    1a24:	82 30       	cpi	r24, 0x02	; 2
    1a26:	09 f0       	breq	.+2      	; 0x1a2a <packetloop_arp_icmp_tcp+0xde>
    1a28:	6f c1       	rjmp	.+734    	; 0x1d08 <packetloop_arp_icmp_tcp+0x3bc>
                        // is it an arp reply 
                        if (memcmp(&buf[ETH_ARP_SRC_IP_P],arpip,4)!=0) return(0); // not an arp reply for the IP we were searching           
    1a2a:	44 e0       	ldi	r20, 0x04	; 4
    1a2c:	50 e0       	ldi	r21, 0x00	; 0
    1a2e:	69 ec       	ldi	r22, 0xC9	; 201
    1a30:	72 e0       	ldi	r23, 0x02	; 2
    1a32:	c8 01       	movw	r24, r16
    1a34:	4c 96       	adiw	r24, 0x1c	; 28
    1a36:	0e 94 31 31 	call	0x6262	; 0x6262 <memcmp>
    1a3a:	89 2b       	or	r24, r25
    1a3c:	09 f0       	breq	.+2      	; 0x1a40 <packetloop_arp_icmp_tcp+0xf4>
    1a3e:	67 c1       	rjmp	.+718    	; 0x1d0e <packetloop_arp_icmp_tcp+0x3c2>
                        (*client_arp_result_callback)(arpip,arp_reference_number,buf+ETH_ARP_SRC_MAC_P);
    1a40:	a8 01       	movw	r20, r16
    1a42:	4a 5e       	subi	r20, 0xEA	; 234
    1a44:	5f 4f       	sbci	r21, 0xFF	; 255
    1a46:	e0 91 ce 03 	lds	r30, 0x03CE	; 0x8003ce <client_arp_result_callback>
    1a4a:	f0 91 cf 03 	lds	r31, 0x03CF	; 0x8003cf <client_arp_result_callback+0x1>
    1a4e:	60 91 c7 02 	lds	r22, 0x02C7	; 0x8002c7 <arp_reference_number>
    1a52:	89 ec       	ldi	r24, 0xC9	; 201
    1a54:	92 e0       	ldi	r25, 0x02	; 2
    1a56:	09 95       	icall
                        arpip_state=WGW_HAVE_MAC;
    1a58:	82 e0       	ldi	r24, 0x02	; 2
    1a5a:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <arpip_state>
                }
#endif // ARP_MAC_resolver_client
                return(0);
    1a5e:	e1 2c       	mov	r14, r1
    1a60:	f1 2c       	mov	r15, r1

        }
        // check if ip packets are for us:
        if(eth_type_is_ip_and_my_ip(buf,plen)==0){
    1a62:	80 c1       	rjmp	.+768    	; 0x1d64 <packetloop_arp_icmp_tcp+0x418>
    1a64:	be 01       	movw	r22, r28
    1a66:	c8 01       	movw	r24, r16
    1a68:	93 db       	rcall	.-2266   	; 0x1190 <eth_type_is_ip_and_my_ip>
    1a6a:	88 23       	and	r24, r24
    1a6c:	09 f4       	brne	.+2      	; 0x1a70 <packetloop_arp_icmp_tcp+0x124>
    1a6e:	52 c1       	rjmp	.+676    	; 0x1d14 <packetloop_arp_icmp_tcp+0x3c8>
                return(0);
        }
        if(buf[IP_PROTO_P]==IP_PROTO_ICMP_V && buf[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V){
    1a70:	d8 01       	movw	r26, r16
    1a72:	57 96       	adiw	r26, 0x17	; 23
    1a74:	8c 91       	ld	r24, X
    1a76:	57 97       	sbiw	r26, 0x17	; 23
    1a78:	81 30       	cpi	r24, 0x01	; 1
    1a7a:	a1 f4       	brne	.+40     	; 0x1aa4 <packetloop_arp_icmp_tcp+0x158>
    1a7c:	92 96       	adiw	r26, 0x22	; 34
    1a7e:	8c 91       	ld	r24, X
    1a80:	88 30       	cpi	r24, 0x08	; 8
    1a82:	09 f0       	breq	.+2      	; 0x1a86 <packetloop_arp_icmp_tcp+0x13a>
    1a84:	4a c1       	rjmp	.+660    	; 0x1d1a <packetloop_arp_icmp_tcp+0x3ce>
                if (icmp_callback){
    1a86:	e0 91 ef 02 	lds	r30, 0x02EF	; 0x8002ef <icmp_callback>
    1a8a:	f0 91 f0 02 	lds	r31, 0x02F0	; 0x8002f0 <icmp_callback+0x1>
    1a8e:	30 97       	sbiw	r30, 0x00	; 0
                        (*icmp_callback)(&(buf[IP_SRC_P]));
    1a90:	19 f0       	breq	.+6      	; 0x1a98 <packetloop_arp_icmp_tcp+0x14c>
    1a92:	c8 01       	movw	r24, r16
    1a94:	4a 96       	adiw	r24, 0x1a	; 26
                }
                // a ping packet, let's send pong
                make_echo_reply_from_request(buf,plen);
    1a96:	09 95       	icall
    1a98:	be 01       	movw	r22, r28
    1a9a:	c8 01       	movw	r24, r16
    1a9c:	25 dc       	rcall	.-1974   	; 0x12e8 <make_echo_reply_from_request>
                return(0);
    1a9e:	e1 2c       	mov	r14, r1
    1aa0:	f1 2c       	mov	r15, r1
    1aa2:	60 c1       	rjmp	.+704    	; 0x1d64 <packetloop_arp_icmp_tcp+0x418>
        }
        // this is an important check to avoid working on the wrong packets:
        if (plen<54 || buf[IP_PROTO_P]!=IP_PROTO_TCP_V ){
    1aa4:	c6 33       	cpi	r28, 0x36	; 54
    1aa6:	d1 05       	cpc	r29, r1
    1aa8:	08 f4       	brcc	.+2      	; 0x1aac <packetloop_arp_icmp_tcp+0x160>
    1aaa:	3a c1       	rjmp	.+628    	; 0x1d20 <packetloop_arp_icmp_tcp+0x3d4>
    1aac:	86 30       	cpi	r24, 0x06	; 6
    1aae:	09 f0       	breq	.+2      	; 0x1ab2 <packetloop_arp_icmp_tcp+0x166>
    1ab0:	3a c1       	rjmp	.+628    	; 0x1d26 <packetloop_arp_icmp_tcp+0x3da>
                // smaller than the smallest TCP packet (TCP packet with no options section) or not tcp port
                return(0);
        }
#if defined (TCP_client)
        // a message for the tcp client, tcp_client_state is zero if client was never used
        if ( buf[TCP_DST_PORT_H_P]==TCPCLIENT_SRC_PORT_H){
    1ab2:	f8 01       	movw	r30, r16
    1ab4:	84 a1       	ldd	r24, Z+36	; 0x24
    1ab6:	8b 30       	cpi	r24, 0x0B	; 11
    1ab8:	09 f0       	breq	.+2      	; 0x1abc <packetloop_arp_icmp_tcp+0x170>
#if defined (WWW_client)
                // workaround to pass pointer to www_client_internal..
                bufptr=buf; 
    1aba:	e7 c0       	rjmp	.+462    	; 0x1c8a <packetloop_arp_icmp_tcp+0x33e>
    1abc:	10 93 ce 02 	sts	0x02CE, r17	; 0x8002ce <bufptr+0x1>
    1ac0:	00 93 cd 02 	sts	0x02CD, r16	; 0x8002cd <bufptr>
#endif // WWW_client
                if (check_ip_message_is_from(buf,tcp_otherside_ip)==0){
    1ac4:	6a ee       	ldi	r22, 0xEA	; 234
    1ac6:	72 e0       	ldi	r23, 0x02	; 2
    1ac8:	c8 01       	movw	r24, r16
    1aca:	25 db       	rcall	.-2486   	; 0x1116 <check_ip_message_is_from>
    1acc:	88 23       	and	r24, r24
    1ace:	09 f4       	brne	.+2      	; 0x1ad2 <packetloop_arp_icmp_tcp+0x186>
    1ad0:	2d c1       	rjmp	.+602    	; 0x1d2c <packetloop_arp_icmp_tcp+0x3e0>
                        return(0);
                }
                // if we get a reset:
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_RST_V){
    1ad2:	d8 01       	movw	r26, r16
    1ad4:	9f 96       	adiw	r26, 0x2f	; 47
    1ad6:	dc 90       	ld	r13, X
    1ad8:	9f 97       	sbiw	r26, 0x2f	; 47
    1ada:	d2 fe       	sbrs	r13, 2
    1adc:	17 c0       	rjmp	.+46     	; 0x1b0c <packetloop_arp_icmp_tcp+0x1c0>
                        if (client_tcp_result_callback){
    1ade:	e0 91 df 02 	lds	r30, 0x02DF	; 0x8002df <client_tcp_result_callback>
    1ae2:	f0 91 e0 02 	lds	r31, 0x02E0	; 0x8002e0 <client_tcp_result_callback+0x1>
    1ae6:	30 97       	sbiw	r30, 0x00	; 0
    1ae8:	59 f0       	breq	.+22     	; 0x1b00 <packetloop_arp_icmp_tcp+0x1b4>
                                // parameters in client_tcp_result_callback: fd, status, buf_start, len
                                (*client_tcp_result_callback)((buf[TCP_DST_PORT_L_P]>>5)&0x7,3,0,0);
    1aea:	95 96       	adiw	r26, 0x25	; 37
    1aec:	8c 91       	ld	r24, X
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	40 e0       	ldi	r20, 0x00	; 0
    1af4:	50 e0       	ldi	r21, 0x00	; 0
    1af6:	63 e0       	ldi	r22, 0x03	; 3
    1af8:	82 95       	swap	r24
    1afa:	86 95       	lsr	r24
    1afc:	87 70       	andi	r24, 0x07	; 7
                        }
                        tcp_client_state=6;
    1afe:	09 95       	icall
    1b00:	86 e0       	ldi	r24, 0x06	; 6
    1b02:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <tcp_client_state>
                        return(0);
    1b06:	e1 2c       	mov	r14, r1
    1b08:	f1 2c       	mov	r15, r1
                }
                len=get_tcp_data_len(buf);
    1b0a:	2c c1       	rjmp	.+600    	; 0x1d64 <packetloop_arp_icmp_tcp+0x418>
    1b0c:	c8 01       	movw	r24, r16
    1b0e:	06 dc       	rcall	.-2036   	; 0x131c <get_tcp_data_len>
    1b10:	7c 01       	movw	r14, r24
                if (tcp_client_state==2){
    1b12:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <tcp_client_state>
    1b16:	82 30       	cpi	r24, 0x02	; 2
    1b18:	c1 f5       	brne	.+112    	; 0x1b8a <packetloop_arp_icmp_tcp+0x23e>
    1b1a:	9d 2d       	mov	r25, r13
                        if ((buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V) && (buf[TCP_FLAGS_P] &TCP_FLAGS_ACK_V)){
    1b1c:	90 71       	andi	r25, 0x10	; 16
    1b1e:	8d 2d       	mov	r24, r13
    1b20:	82 71       	andi	r24, 0x12	; 18
    1b22:	82 31       	cpi	r24, 0x12	; 18
                                // synack, answer with ack
                                make_tcp_ack_from_any(buf,0,0);
    1b24:	09 f5       	brne	.+66     	; 0x1b68 <packetloop_arp_icmp_tcp+0x21c>
    1b26:	40 e0       	ldi	r20, 0x00	; 0
    1b28:	60 e0       	ldi	r22, 0x00	; 0
    1b2a:	70 e0       	ldi	r23, 0x00	; 0
    1b2c:	c8 01       	movw	r24, r16
    1b2e:	06 dd       	rcall	.-1524   	; 0x153c <make_tcp_ack_from_any>
                                buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V;
    1b30:	88 e1       	ldi	r24, 0x18	; 24
    1b32:	f8 01       	movw	r30, r16
    1b34:	87 a7       	std	Z+47, r24	; 0x2f

                                // Make a tcp message with data. When calling this function we must
                                // still have a valid tcp-ack in the buffer. In other words
                                // you have just called make_tcp_ack_from_any(buf,0).
                                if (client_tcp_datafill_callback){
    1b36:	e0 91 dd 02 	lds	r30, 0x02DD	; 0x8002dd <client_tcp_datafill_callback>
    1b3a:	f0 91 de 02 	lds	r31, 0x02DE	; 0x8002de <client_tcp_datafill_callback+0x1>
    1b3e:	30 97       	sbiw	r30, 0x00	; 0
    1b40:	41 f0       	breq	.+16     	; 0x1b52 <packetloop_arp_icmp_tcp+0x206>
                                        // in this case it is src port because the above 
                                        // make_tcp_ack_from_any swaps the dst and src port:
                                        len=(*client_tcp_datafill_callback)((buf[TCP_SRC_PORT_L_P]>>5)&0x7);
    1b42:	d8 01       	movw	r26, r16
    1b44:	93 96       	adiw	r26, 0x23	; 35
    1b46:	8c 91       	ld	r24, X
    1b48:	82 95       	swap	r24
    1b4a:	86 95       	lsr	r24
    1b4c:	87 70       	andi	r24, 0x07	; 7
    1b4e:	09 95       	icall
                                }else{
                                        // this is just to prevent a crash
                                        len=0;
    1b50:	02 c0       	rjmp	.+4      	; 0x1b56 <packetloop_arp_icmp_tcp+0x20a>
    1b52:	80 e0       	ldi	r24, 0x00	; 0
                                }
                                tcp_client_state=3;
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	23 e0       	ldi	r18, 0x03	; 3
    1b58:	20 93 e3 02 	sts	0x02E3, r18	; 0x8002e3 <tcp_client_state>
                                make_tcp_ack_with_data_noflags(buf,len);
    1b5c:	bc 01       	movw	r22, r24
    1b5e:	c8 01       	movw	r24, r16
    1b60:	24 dd       	rcall	.-1464   	; 0x15aa <make_tcp_ack_with_data_noflags>
                                return(0);
    1b62:	e1 2c       	mov	r14, r1
    1b64:	f1 2c       	mov	r15, r1
                        }else{
                                // reset only if we have sent a syn and don't get syn-ack back.
                                // If we connect to a non listen port then we get a RST
                                // which will be handeled above. In other words there is
                                // normally no danger for an endless loop.
                                tcp_client_state=1; // retry
    1b66:	fe c0       	rjmp	.+508    	; 0x1d64 <packetloop_arp_icmp_tcp+0x418>
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <tcp_client_state>
                                // do not inform application layer as we retry.
                                len++;
                                if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
    1b6e:	91 11       	cpse	r25, r1
                                // If we connect to a non listen port then we get a RST
                                // which will be handeled above. In other words there is
                                // normally no danger for an endless loop.
                                tcp_client_state=1; // retry
                                // do not inform application layer as we retry.
                                len++;
    1b70:	04 c0       	rjmp	.+8      	; 0x1b7a <packetloop_arp_icmp_tcp+0x22e>
    1b72:	b7 01       	movw	r22, r14
    1b74:	6f 5f       	subi	r22, 0xFF	; 255
    1b76:	7f 4f       	sbci	r23, 0xFF	; 255
                                if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
                                        // if packet was an ack then do not step the ack number
                                        len=0;
    1b78:	02 c0       	rjmp	.+4      	; 0x1b7e <packetloop_arp_icmp_tcp+0x232>
    1b7a:	60 e0       	ldi	r22, 0x00	; 0
                                }
                                // refuse and reset the connection
                                make_tcp_ack_from_any(buf,len,TCP_FLAGS_RST_V);
    1b7c:	70 e0       	ldi	r23, 0x00	; 0
    1b7e:	44 e0       	ldi	r20, 0x04	; 4
    1b80:	c8 01       	movw	r24, r16
    1b82:	dc dc       	rcall	.-1608   	; 0x153c <make_tcp_ack_from_any>
                                return(0);
    1b84:	e1 2c       	mov	r14, r1
    1b86:	f1 2c       	mov	r15, r1
    1b88:	ed c0       	rjmp	.+474    	; 0x1d64 <packetloop_arp_icmp_tcp+0x418>
                        }
                }
                // in tcp_client_state==3 we will normally first get an empty
                // ack-packet and then a ack-packet with data.
                if (tcp_client_state==3 && len>0){ 
    1b8a:	83 30       	cpi	r24, 0x03	; 3
    1b8c:	09 f0       	breq	.+2      	; 0x1b90 <packetloop_arp_icmp_tcp+0x244>
    1b8e:	3e c0       	rjmp	.+124    	; 0x1c0c <packetloop_arp_icmp_tcp+0x2c0>
    1b90:	e1 14       	cp	r14, r1
    1b92:	f1 04       	cpc	r15, r1
    1b94:	09 f4       	brne	.+2      	; 0x1b98 <packetloop_arp_icmp_tcp+0x24c>
    1b96:	df c0       	rjmp	.+446    	; 0x1d56 <packetloop_arp_icmp_tcp+0x40a>
                        // our first real data packet
                        tcp_client_state=4;
    1b98:	84 e0       	ldi	r24, 0x04	; 4
    1b9a:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <tcp_client_state>
                        // return the data we received
                        if (client_tcp_result_callback){
    1b9e:	e0 91 df 02 	lds	r30, 0x02DF	; 0x8002df <client_tcp_result_callback>
    1ba2:	f0 91 e0 02 	lds	r31, 0x02E0	; 0x8002e0 <client_tcp_result_callback+0x1>
    1ba6:	30 97       	sbiw	r30, 0x00	; 0
    1ba8:	09 f4       	brne	.+2      	; 0x1bac <packetloop_arp_icmp_tcp+0x260>
    1baa:	54 c0       	rjmp	.+168    	; 0x1c54 <packetloop_arp_icmp_tcp+0x308>
                                tcpstart=TCP_DATA_START; // TCP_DATA_START is a formula
    1bac:	d8 01       	movw	r26, r16
    1bae:	9e 96       	adiw	r26, 0x2e	; 46
    1bb0:	4c 91       	ld	r20, X
    1bb2:	42 95       	swap	r20
    1bb4:	4f 70       	andi	r20, 0x0F	; 15
    1bb6:	b4 e0       	ldi	r27, 0x04	; 4
    1bb8:	4b 9f       	mul	r20, r27
    1bba:	a0 01       	movw	r20, r0
    1bbc:	11 24       	eor	r1, r1
                                // out of buffer bounds check, needed in case of fragmented IP packets
                                if (tcpstart>plen-8){
    1bbe:	ce 01       	movw	r24, r28
    1bc0:	08 97       	sbiw	r24, 0x08	; 8
    1bc2:	4e 5d       	subi	r20, 0xDE	; 222
    1bc4:	5f 4f       	sbci	r21, 0xFF	; 255
    1bc6:	84 17       	cp	r24, r20
    1bc8:	95 07       	cpc	r25, r21
    1bca:	08 f4       	brcc	.+2      	; 0x1bce <packetloop_arp_icmp_tcp+0x282>
    1bcc:	ac 01       	movw	r20, r24
                                        tcpstart=plen-8; // dummy but save
                                }
                                save_len=len;
                                if (tcpstart+len>plen){
    1bce:	c7 01       	movw	r24, r14
    1bd0:	84 0f       	add	r24, r20
    1bd2:	95 1f       	adc	r25, r21
    1bd4:	c8 17       	cp	r28, r24
    1bd6:	d9 07       	cpc	r29, r25
    1bd8:	20 f4       	brcc	.+8      	; 0x1be2 <packetloop_arp_icmp_tcp+0x296>
                                        save_len=plen-tcpstart;
    1bda:	9e 01       	movw	r18, r28
    1bdc:	24 1b       	sub	r18, r20
    1bde:	35 0b       	sbc	r19, r21
                                tcpstart=TCP_DATA_START; // TCP_DATA_START is a formula
                                // out of buffer bounds check, needed in case of fragmented IP packets
                                if (tcpstart>plen-8){
                                        tcpstart=plen-8; // dummy but save
                                }
                                save_len=len;
    1be0:	01 c0       	rjmp	.+2      	; 0x1be4 <packetloop_arp_icmp_tcp+0x298>
                                if (tcpstart+len>plen){
                                        save_len=plen-tcpstart;
                                }
                                send_fin=(*client_tcp_result_callback)((buf[TCP_DST_PORT_L_P]>>5)&0x7,0,tcpstart,save_len);
    1be2:	97 01       	movw	r18, r14
    1be4:	d8 01       	movw	r26, r16
    1be6:	95 96       	adiw	r26, 0x25	; 37
    1be8:	8c 91       	ld	r24, X
    1bea:	60 e0       	ldi	r22, 0x00	; 0
    1bec:	82 95       	swap	r24
    1bee:	86 95       	lsr	r24
    1bf0:	87 70       	andi	r24, 0x07	; 7
                        }
                        if (send_fin){
    1bf2:	09 95       	icall
    1bf4:	88 23       	and	r24, r24
                                make_tcp_ack_from_any(buf,len,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
    1bf6:	51 f0       	breq	.+20     	; 0x1c0c <packetloop_arp_icmp_tcp+0x2c0>
    1bf8:	49 e0       	ldi	r20, 0x09	; 9
    1bfa:	b7 01       	movw	r22, r14
    1bfc:	c8 01       	movw	r24, r16
    1bfe:	9e dc       	rcall	.-1732   	; 0x153c <make_tcp_ack_from_any>
                                tcp_client_state=5;
    1c00:	85 e0       	ldi	r24, 0x05	; 5
    1c02:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <tcp_client_state>
                                return(0);
    1c06:	e1 2c       	mov	r14, r1
    1c08:	f1 2c       	mov	r15, r1
    1c0a:	ac c0       	rjmp	.+344    	; 0x1d64 <packetloop_arp_icmp_tcp+0x418>
                        }
                }
                if(tcp_client_state==5){
    1c0c:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <tcp_client_state>
    1c10:	85 30       	cpi	r24, 0x05	; 5
    1c12:	51 f4       	brne	.+20     	; 0x1c28 <packetloop_arp_icmp_tcp+0x2dc>
                        // we get one more final ack to our fin-ack:
                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
    1c14:	f8 01       	movw	r30, r16
    1c16:	87 a5       	ldd	r24, Z+47	; 0x2f
    1c18:	84 ff       	sbrs	r24, 4
    1c1a:	8b c0       	rjmp	.+278    	; 0x1d32 <packetloop_arp_icmp_tcp+0x3e6>
                                tcp_client_state=6; // in state 6 communication should be finished
    1c1c:	86 e0       	ldi	r24, 0x06	; 6
    1c1e:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <tcp_client_state>
                        }
                        return(0);
    1c22:	e1 2c       	mov	r14, r1
    1c24:	f1 2c       	mov	r15, r1
                }
                if(tcp_client_state==6){
    1c26:	9e c0       	rjmp	.+316    	; 0x1d64 <packetloop_arp_icmp_tcp+0x418>
    1c28:	86 30       	cpi	r24, 0x06	; 6
                        // something wrong, can't deal with this, reset the connection
                        len++;
                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V) len=0; // if packet was an ack then do not step the ack number
    1c2a:	a1 f4       	brne	.+40     	; 0x1c54 <packetloop_arp_icmp_tcp+0x308>
    1c2c:	d8 01       	movw	r26, r16
    1c2e:	9f 96       	adiw	r26, 0x2f	; 47
    1c30:	8c 91       	ld	r24, X
    1c32:	84 fd       	sbrc	r24, 4
                        }
                        return(0);
                }
                if(tcp_client_state==6){
                        // something wrong, can't deal with this, reset the connection
                        len++;
    1c34:	04 c0       	rjmp	.+8      	; 0x1c3e <packetloop_arp_icmp_tcp+0x2f2>
    1c36:	b7 01       	movw	r22, r14
    1c38:	6f 5f       	subi	r22, 0xFF	; 255
    1c3a:	7f 4f       	sbci	r23, 0xFF	; 255
                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V) len=0; // if packet was an ack then do not step the ack number
    1c3c:	02 c0       	rjmp	.+4      	; 0x1c42 <packetloop_arp_icmp_tcp+0x2f6>
    1c3e:	60 e0       	ldi	r22, 0x00	; 0
                        make_tcp_ack_from_any(buf,len,TCP_FLAGS_RST_V);
    1c40:	70 e0       	ldi	r23, 0x00	; 0
    1c42:	44 e0       	ldi	r20, 0x04	; 4
    1c44:	c8 01       	movw	r24, r16
                        // just a single reset, do not repeat if more messages:
                        tcp_client_state=7;
    1c46:	7a dc       	rcall	.-1804   	; 0x153c <make_tcp_ack_from_any>
    1c48:	87 e0       	ldi	r24, 0x07	; 7
    1c4a:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <tcp_client_state>
                        return(0);
    1c4e:	e1 2c       	mov	r14, r1
    1c50:	f1 2c       	mov	r15, r1
                }
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
    1c52:	88 c0       	rjmp	.+272    	; 0x1d64 <packetloop_arp_icmp_tcp+0x418>
    1c54:	f8 01       	movw	r30, r16
    1c56:	87 a5       	ldd	r24, Z+47	; 0x2f
    1c58:	80 ff       	sbrs	r24, 0
                        // this normally a fin ack message but it could be
                        // any message with fin we answer with fin-ack:
                        make_tcp_ack_from_any(buf,len+1,TCP_FLAGS_FIN_V);
    1c5a:	0c c0       	rjmp	.+24     	; 0x1c74 <packetloop_arp_icmp_tcp+0x328>
    1c5c:	b7 01       	movw	r22, r14
    1c5e:	6f 5f       	subi	r22, 0xFF	; 255
    1c60:	7f 4f       	sbci	r23, 0xFF	; 255
    1c62:	41 e0       	ldi	r20, 0x01	; 1
    1c64:	c8 01       	movw	r24, r16
                        tcp_client_state=5; // connection terminated
    1c66:	6a dc       	rcall	.-1836   	; 0x153c <make_tcp_ack_from_any>
    1c68:	85 e0       	ldi	r24, 0x05	; 5
    1c6a:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <tcp_client_state>
                        return(0);
    1c6e:	e1 2c       	mov	r14, r1
    1c70:	f1 2c       	mov	r15, r1
                }
                // ack all data (the web page may be long):
                // if we just get a fragment then len will be zero
                // and we ack only once we have the full packet
                if (len>0){
    1c72:	78 c0       	rjmp	.+240    	; 0x1d64 <packetloop_arp_icmp_tcp+0x418>
    1c74:	e1 14       	cp	r14, r1
    1c76:	f1 04       	cpc	r15, r1
    1c78:	09 f4       	brne	.+2      	; 0x1c7c <packetloop_arp_icmp_tcp+0x330>
                        make_tcp_ack_from_any(buf,len,0);
    1c7a:	5e c0       	rjmp	.+188    	; 0x1d38 <packetloop_arp_icmp_tcp+0x3ec>
    1c7c:	40 e0       	ldi	r20, 0x00	; 0
    1c7e:	b7 01       	movw	r22, r14
    1c80:	c8 01       	movw	r24, r16
                }
                return(0);
    1c82:	5c dc       	rcall	.-1864   	; 0x153c <make_tcp_ack_from_any>
    1c84:	e1 2c       	mov	r14, r1
    1c86:	f1 2c       	mov	r15, r1
        }
#endif // TCP_client
        //
#ifdef WWW_server
        // tcp port web server start
        if (buf[TCP_DST_PORT_H_P]==wwwport_h && buf[TCP_DST_PORT_L_P]==wwwport_l){
    1c88:	6d c0       	rjmp	.+218    	; 0x1d64 <packetloop_arp_icmp_tcp+0x418>
    1c8a:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <wwwport_h>
    1c8e:	89 13       	cpse	r24, r25
    1c90:	56 c0       	rjmp	.+172    	; 0x1d3e <packetloop_arp_icmp_tcp+0x3f2>
    1c92:	95 a1       	ldd	r25, Z+37	; 0x25
    1c94:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <wwwport_l>
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V){
    1c98:	98 13       	cpse	r25, r24
    1c9a:	54 c0       	rjmp	.+168    	; 0x1d44 <packetloop_arp_icmp_tcp+0x3f8>
    1c9c:	d7 a4       	ldd	r13, Z+47	; 0x2f
                        make_tcp_synack_from_syn(buf);
    1c9e:	d1 fe       	sbrs	r13, 1
    1ca0:	05 c0       	rjmp	.+10     	; 0x1cac <packetloop_arp_icmp_tcp+0x360>
    1ca2:	c8 01       	movw	r24, r16
                        // make_tcp_synack_from_syn does already send the syn,ack
                        return(0);
    1ca4:	bb dc       	rcall	.-1674   	; 0x161c <make_tcp_synack_from_syn>
    1ca6:	e1 2c       	mov	r14, r1
                }
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
    1ca8:	f1 2c       	mov	r15, r1
    1caa:	5c c0       	rjmp	.+184    	; 0x1d64 <packetloop_arp_icmp_tcp+0x418>
                        info_data_len=get_tcp_data_len(buf);
    1cac:	d4 fe       	sbrs	r13, 4
    1cae:	4d c0       	rjmp	.+154    	; 0x1d4a <packetloop_arp_icmp_tcp+0x3fe>
    1cb0:	c8 01       	movw	r24, r16
    1cb2:	34 db       	rcall	.-2456   	; 0x131c <get_tcp_data_len>
    1cb4:	7c 01       	movw	r14, r24
    1cb6:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <info_data_len+0x1>
    1cba:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <info_data_len>
                        // we can possibly have no data, just ack:
                        // Here we misuse plen for something else to save a variable.
                        // plen is now the position of start of the tcp user data.
                        if (info_data_len==0){
    1cbe:	89 2b       	or	r24, r25
                                if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
    1cc0:	41 f4       	brne	.+16     	; 0x1cd2 <packetloop_arp_icmp_tcp+0x386>
    1cc2:	d0 fe       	sbrs	r13, 0
                                        // finack, answer with ack
                                        make_tcp_ack_from_any(buf,0,0);
    1cc4:	4f c0       	rjmp	.+158    	; 0x1d64 <packetloop_arp_icmp_tcp+0x418>
    1cc6:	40 e0       	ldi	r20, 0x00	; 0
    1cc8:	60 e0       	ldi	r22, 0x00	; 0
    1cca:	70 e0       	ldi	r23, 0x00	; 0
    1ccc:	c8 01       	movw	r24, r16
    1cce:	36 dc       	rcall	.-1940   	; 0x153c <make_tcp_ack_from_any>
    1cd0:	49 c0       	rjmp	.+146    	; 0x1d64 <packetloop_arp_icmp_tcp+0x418>
                                }
                                // just an ack with no data, wait for next packet
                                return(0);
                        }
                        // Here we misuse len for something else to save a variable
                        len=TCP_DATA_START; // TCP_DATA_START is a formula
    1cd2:	f8 01       	movw	r30, r16
    1cd4:	e6 a4       	ldd	r14, Z+46	; 0x2e
    1cd6:	e6 94       	lsr	r14
    1cd8:	e6 94       	lsr	r14
    1cda:	e6 94       	lsr	r14
    1cdc:	e6 94       	lsr	r14
    1cde:	f4 e0       	ldi	r31, 0x04	; 4
    1ce0:	ef 9e       	mul	r14, r31
    1ce2:	70 01       	movw	r14, r0
    1ce4:	11 24       	eor	r1, r1
    1ce6:	82 e2       	ldi	r24, 0x22	; 34
    1ce8:	e8 0e       	add	r14, r24
    1cea:	f1 1c       	adc	r15, r1
                        // check for data corruption
                        if (len>plen-8){
    1cec:	28 97       	sbiw	r28, 0x08	; 8
    1cee:	ce 15       	cp	r28, r14
    1cf0:	df 05       	cpc	r29, r15
    1cf2:	70 f1       	brcs	.+92     	; 0x1d50 <packetloop_arp_icmp_tcp+0x404>
    1cf4:	37 c0       	rjmp	.+110    	; 0x1d64 <packetloop_arp_icmp_tcp+0x418>
                        // way we get it back in every message that comes
                        // from the server:
                        tcp_client_syn(buf,((tcp_fd<<5) | (0x1f & tcpclient_src_port_l)),tcp_client_port);
                }
#endif
                return(0);
    1cf6:	e1 2c       	mov	r14, r1
    1cf8:	f1 2c       	mov	r15, r1
    1cfa:	34 c0       	rjmp	.+104    	; 0x1d64 <packetloop_arp_icmp_tcp+0x418>
    1cfc:	e1 2c       	mov	r14, r1
    1cfe:	f1 2c       	mov	r15, r1
    1d00:	31 c0       	rjmp	.+98     	; 0x1d64 <packetloop_arp_icmp_tcp+0x418>
                        if (memcmp(&buf[ETH_ARP_SRC_IP_P],arpip,4)!=0) return(0); // not an arp reply for the IP we were searching           
                        (*client_arp_result_callback)(arpip,arp_reference_number,buf+ETH_ARP_SRC_MAC_P);
                        arpip_state=WGW_HAVE_MAC;
                }
#endif // ARP_MAC_resolver_client
                return(0);
    1d02:	e1 2c       	mov	r14, r1
    1d04:	f1 2c       	mov	r15, r1
    1d06:	2e c0       	rjmp	.+92     	; 0x1d64 <packetloop_arp_icmp_tcp+0x418>
    1d08:	e1 2c       	mov	r14, r1
    1d0a:	f1 2c       	mov	r15, r1
    1d0c:	2b c0       	rjmp	.+86     	; 0x1d64 <packetloop_arp_icmp_tcp+0x418>
                        make_arp_answer_from_request(buf);
                }
#ifdef ARP_MAC_resolver_client
                if ((arpip_state & WGW_ACCEPT_ARP_REPLY) && (buf[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V)){
                        // is it an arp reply 
                        if (memcmp(&buf[ETH_ARP_SRC_IP_P],arpip,4)!=0) return(0); // not an arp reply for the IP we were searching           
    1d0e:	e1 2c       	mov	r14, r1
    1d10:	f1 2c       	mov	r15, r1
    1d12:	28 c0       	rjmp	.+80     	; 0x1d64 <packetloop_arp_icmp_tcp+0x418>
                return(0);

        }
        // check if ip packets are for us:
        if(eth_type_is_ip_and_my_ip(buf,plen)==0){
                return(0);
    1d14:	e1 2c       	mov	r14, r1
    1d16:	f1 2c       	mov	r15, r1
    1d18:	25 c0       	rjmp	.+74     	; 0x1d64 <packetloop_arp_icmp_tcp+0x418>
                return(0);
        }
        // this is an important check to avoid working on the wrong packets:
        if (plen<54 || buf[IP_PROTO_P]!=IP_PROTO_TCP_V ){
                // smaller than the smallest TCP packet (TCP packet with no options section) or not tcp port
                return(0);
    1d1a:	e1 2c       	mov	r14, r1
    1d1c:	f1 2c       	mov	r15, r1
    1d1e:	22 c0       	rjmp	.+68     	; 0x1d64 <packetloop_arp_icmp_tcp+0x418>
    1d20:	e1 2c       	mov	r14, r1
    1d22:	f1 2c       	mov	r15, r1
    1d24:	1f c0       	rjmp	.+62     	; 0x1d64 <packetloop_arp_icmp_tcp+0x418>
    1d26:	e1 2c       	mov	r14, r1
    1d28:	f1 2c       	mov	r15, r1
    1d2a:	1c c0       	rjmp	.+56     	; 0x1d64 <packetloop_arp_icmp_tcp+0x418>
#if defined (WWW_client)
                // workaround to pass pointer to www_client_internal..
                bufptr=buf; 
#endif // WWW_client
                if (check_ip_message_is_from(buf,tcp_otherside_ip)==0){
                        return(0);
    1d2c:	e1 2c       	mov	r14, r1
    1d2e:	f1 2c       	mov	r15, r1
    1d30:	19 c0       	rjmp	.+50     	; 0x1d64 <packetloop_arp_icmp_tcp+0x418>
                if(tcp_client_state==5){
                        // we get one more final ack to our fin-ack:
                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
                                tcp_client_state=6; // in state 6 communication should be finished
                        }
                        return(0);
    1d32:	e1 2c       	mov	r14, r1
    1d34:	f1 2c       	mov	r15, r1
    1d36:	16 c0       	rjmp	.+44     	; 0x1d64 <packetloop_arp_icmp_tcp+0x418>
                // if we just get a fragment then len will be zero
                // and we ack only once we have the full packet
                if (len>0){
                        make_tcp_ack_from_any(buf,len,0);
                }
                return(0);
    1d38:	e1 2c       	mov	r14, r1
    1d3a:	f1 2c       	mov	r15, r1
    1d3c:	13 c0       	rjmp	.+38     	; 0x1d64 <packetloop_arp_icmp_tcp+0x418>
                        }
                        return(len);
                }
        }
#endif // WWW_server
        return(0);
    1d3e:	e1 2c       	mov	r14, r1
    1d40:	f1 2c       	mov	r15, r1
    1d42:	10 c0       	rjmp	.+32     	; 0x1d64 <packetloop_arp_icmp_tcp+0x418>
    1d44:	e1 2c       	mov	r14, r1
    1d46:	f1 2c       	mov	r15, r1
    1d48:	0d c0       	rjmp	.+26     	; 0x1d64 <packetloop_arp_icmp_tcp+0x418>
    1d4a:	e1 2c       	mov	r14, r1
    1d4c:	f1 2c       	mov	r15, r1
    1d4e:	0a c0       	rjmp	.+20     	; 0x1d64 <packetloop_arp_icmp_tcp+0x418>
                        }
                        // Here we misuse len for something else to save a variable
                        len=TCP_DATA_START; // TCP_DATA_START is a formula
                        // check for data corruption
                        if (len>plen-8){
                                return(0);
    1d50:	e1 2c       	mov	r14, r1
    1d52:	f1 2c       	mov	r15, r1
    1d54:	07 c0       	rjmp	.+14     	; 0x1d64 <packetloop_arp_icmp_tcp+0x418>
                        make_tcp_ack_from_any(buf,len,TCP_FLAGS_RST_V);
                        // just a single reset, do not repeat if more messages:
                        tcp_client_state=7;
                        return(0);
                }
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
    1d56:	d8 01       	movw	r26, r16
    1d58:	9f 96       	adiw	r26, 0x2f	; 47
    1d5a:	8c 91       	ld	r24, X
    1d5c:	80 fd       	sbrc	r24, 0
    1d5e:	7e cf       	rjmp	.-260    	; 0x1c5c <packetloop_arp_icmp_tcp+0x310>
                // if we just get a fragment then len will be zero
                // and we ack only once we have the full packet
                if (len>0){
                        make_tcp_ack_from_any(buf,len,0);
                }
                return(0);
    1d60:	e1 2c       	mov	r14, r1
    1d62:	f1 2c       	mov	r15, r1
                        return(len);
                }
        }
#endif // WWW_server
        return(0);
}
    1d64:	c7 01       	movw	r24, r14
    1d66:	df 91       	pop	r29
    1d68:	cf 91       	pop	r28
    1d6a:	1f 91       	pop	r17
    1d6c:	0f 91       	pop	r16
    1d6e:	ff 90       	pop	r15
    1d70:	ef 90       	pop	r14
    1d72:	df 90       	pop	r13
    1d74:	08 95       	ret

00001d76 <browserresult_callback>:
                sec++; // stepped every second
	}
}

// the __attribute__((unused)) is a gcc compiler directive to avoid warnings about unsed variables.
void browserresult_callback(uint16_t webstatuscode,uint16_t datapos __attribute__((unused)), uint16_t len __attribute__((unused))){
    1d76:	08 95       	ret

00001d78 <arpresolver_result_callback>:
}

// the __attribute__((unused)) is a gcc compiler directive to avoid warnings about unsed variables.
void arpresolver_result_callback(uint8_t *ip __attribute__((unused)),uint8_t transaction_number,uint8_t *mac){
        uint8_t i=0;
        if (transaction_number==TRANS_NUM_GWMAC){
    1d78:	61 30       	cpi	r22, 0x01	; 1
    1d7a:	59 f4       	brne	.+22     	; 0x1d92 <arpresolver_result_callback+0x1a>
    1d7c:	a4 2f       	mov	r26, r20
    1d7e:	b5 2f       	mov	r27, r21
    1d80:	e5 e8       	ldi	r30, 0x85	; 133
    1d82:	f3 e0       	ldi	r31, 0x03	; 3
    1d84:	2b e8       	ldi	r18, 0x8B	; 139
    1d86:	33 e0       	ldi	r19, 0x03	; 3
                // copy mac address over:
                while(i<6){gwmac[i]=mac[i];i++;}
    1d88:	8d 91       	ld	r24, X+
    1d8a:	81 93       	st	Z+, r24
    1d8c:	e2 17       	cp	r30, r18
    1d8e:	f3 07       	cpc	r31, r19
    1d90:	d9 f7       	brne	.-10     	; 0x1d88 <arpresolver_result_callback+0x10>
    1d92:	08 95       	ret

00001d94 <init_cnt2>:

/* setup timer T2 as an interrupt generating time base.
* You must call once sei() in the main program */
void init_cnt2(void)
{
	cnt2step=0;
    1d94:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <cnt2step>
	//PRR&=~(1<<PRTIM2); // write power reduction register to zero
	TIMSK2=(1<<OCIE2A); // compare match on OCR2A
    1d98:	82 e0       	ldi	r24, 0x02	; 2
    1d9a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	TCNT2=0;  // init counter
    1d9e:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	OCR2A=244; // value to compare against
    1da2:	94 ef       	ldi	r25, 0xF4	; 244
    1da4:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	TCCR2A=(1<<WGM21); // do not change any output pin, clear at compare match
    1da8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	// divide clock by 1024: 12.5MHz/128=12207 Hz
	TCCR2B=(1<<CS22)|(1<<CS21)|(1<<CS20); // clock divider, start counter
    1dac:	87 e0       	ldi	r24, 0x07	; 7
    1dae:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    1db2:	08 95       	ret

00001db4 <__vector_9>:
	// 12207/244=50Hz
}

// called when TCNT2==OCR2A
// that is in 50Hz intervals
ISR(TIMER2_COMPA_vect){
    1db4:	1f 92       	push	r1
    1db6:	0f 92       	push	r0
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	0f 92       	push	r0
    1dbc:	11 24       	eor	r1, r1
    1dbe:	8f 93       	push	r24
	cnt2step++;
    1dc0:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <cnt2step>
    1dc4:	8f 5f       	subi	r24, 0xFF	; 255
    1dc6:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <cnt2step>
	if (cnt2step>50){
    1dca:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <cnt2step>
    1dce:	83 33       	cpi	r24, 0x33	; 51
    1dd0:	38 f0       	brcs	.+14     	; 0x1de0 <__vector_9+0x2c>
                cnt2step=0;
    1dd2:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <cnt2step>
                sec++; // stepped every second
    1dd6:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <sec>
    1dda:	8f 5f       	subi	r24, 0xFF	; 255
    1ddc:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <sec>
	}
}
    1de0:	8f 91       	pop	r24
    1de2:	0f 90       	pop	r0
    1de4:	0f be       	out	0x3f, r0	; 63
    1de6:	0f 90       	pop	r0
    1de8:	1f 90       	pop	r1
    1dea:	18 95       	reti

00001dec <Ether_SendPacket>:
}




void Ether_SendPacket(char* text){
    1dec:	cf 92       	push	r12
    1dee:	df 92       	push	r13
    1df0:	ef 92       	push	r14
    1df2:	ff 92       	push	r15
    1df4:	0f 93       	push	r16
    1df6:	1f 93       	push	r17
    1df8:	cf 93       	push	r28
    1dfa:	df 93       	push	r29
    1dfc:	6c 01       	movw	r12, r24
	uint16_t dat_p,plen;
	
	sendingPacket = 1;
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <sendingPacket>
	plen=enc28j60PacketReceive(BUFFER_SIZE, buf);
    1e04:	60 e0       	ldi	r22, 0x00	; 0
    1e06:	73 e0       	ldi	r23, 0x03	; 3
    1e08:	80 e8       	ldi	r24, 0x80	; 128
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	0e 94 f1 06 	call	0xde2	; 0xde2 <enc28j60PacketReceive>
    1e10:	7c 01       	movw	r14, r24
	buf[BUFFER_SIZE]='\0';
    1e12:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <buf+0x80>
	dat_p=packetloop_arp_icmp_tcp(buf,plen);
    1e16:	bc 01       	movw	r22, r24
    1e18:	80 e0       	ldi	r24, 0x00	; 0
    1e1a:	93 e0       	ldi	r25, 0x03	; 3
    1e1c:	97 dd       	rcall	.-1234   	; 0x194c <packetloop_arp_icmp_tcp>
    1e1e:	ec 01       	movw	r28, r24
	if(plen == 0){
    1e20:	e1 14       	cp	r14, r1
    1e22:	f1 04       	cpc	r15, r1
    1e24:	91 f4       	brne	.+36     	; 0x1e4a <Ether_SendPacket+0x5e>
		if(start_web_client == 1)
    1e26:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <start_web_client>
    1e2a:	81 30       	cpi	r24, 0x01	; 1
    1e2c:	71 f4       	brne	.+28     	; 0x1e4a <Ether_SendPacket+0x5e>
		{
			sec = 0;
    1e2e:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <sec>
			start_web_client = 0;
    1e32:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <start_web_client>
			
			client_tcpSend(text,&browserresult_callback,otherside_www_ip,gwmac,(uint8_t*)80);
    1e36:	00 e5       	ldi	r16, 0x50	; 80
    1e38:	10 e0       	ldi	r17, 0x00	; 0
    1e3a:	25 e8       	ldi	r18, 0x85	; 133
    1e3c:	33 e0       	ldi	r19, 0x03	; 3
    1e3e:	41 e8       	ldi	r20, 0x81	; 129
    1e40:	53 e0       	ldi	r21, 0x03	; 3
    1e42:	6b eb       	ldi	r22, 0xBB	; 187
    1e44:	7e e0       	ldi	r23, 0x0E	; 14
    1e46:	c6 01       	movw	r24, r12
    1e48:	4b dd       	rcall	.-1386   	; 0x18e0 <client_tcpSend>
		}
	}
	if(sec > timeout)
    1e4a:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <sec>
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	20 91 0c 06 	lds	r18, 0x060C	; 0x80060c <timeout>
    1e54:	30 91 0d 06 	lds	r19, 0x060D	; 0x80060d <timeout+0x1>
    1e58:	28 17       	cp	r18, r24
    1e5a:	39 07       	cpc	r19, r25
    1e5c:	28 f4       	brcc	.+10     	; 0x1e68 <Ether_SendPacket+0x7c>
	{
		sendingPacket = 0;
    1e5e:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <sendingPacket>
		start_web_client = 1;
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <start_web_client>
	}
	
	if(dat_p==0){ // plen!=0
    1e68:	20 97       	sbiw	r28, 0x00	; 0
    1e6a:	31 f4       	brne	.+12     	; 0x1e78 <Ether_SendPacket+0x8c>
		                         // check for incomming messages not processed
		                         // as part of packetloop_arp_icmp_tcp, e.g udp messages
		                         udp_client_check_for_dns_answer(buf,plen);
    1e6c:	b7 01       	movw	r22, r14
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	93 e0       	ldi	r25, 0x03	; 3
    1e72:	0e 94 df 04 	call	0x9be	; 0x9be <udp_client_check_for_dns_answer>
		                         return;
    1e76:	5b c0       	rjmp	.+182    	; 0x1f2e <Ether_SendPacket+0x142>
		                 }
		if (strncmp("POST / timeout",(char *)&(buf[dat_p]),14)==0){
    1e78:	c0 50       	subi	r28, 0x00	; 0
    1e7a:	dd 4f       	sbci	r29, 0xFD	; 253
    1e7c:	4e e0       	ldi	r20, 0x0E	; 14
    1e7e:	50 e0       	ldi	r21, 0x00	; 0
    1e80:	be 01       	movw	r22, r28
    1e82:	8d e4       	ldi	r24, 0x4D	; 77
    1e84:	91 e0       	ldi	r25, 0x01	; 1
    1e86:	0e 94 45 31 	call	0x628a	; 0x628a <strncmp>
    1e8a:	89 2b       	or	r24, r25
    1e8c:	d9 f4       	brne	.+54     	; 0x1ec4 <Ether_SendPacket+0xd8>
			sscanf((char *)&(buf[dat_p]), "POST / timeout %d", &timeout);
    1e8e:	8c e0       	ldi	r24, 0x0C	; 12
    1e90:	96 e0       	ldi	r25, 0x06	; 6
    1e92:	9f 93       	push	r25
    1e94:	8f 93       	push	r24
    1e96:	8c e5       	ldi	r24, 0x5C	; 92
    1e98:	91 e0       	ldi	r25, 0x01	; 1
    1e9a:	9f 93       	push	r25
    1e9c:	8f 93       	push	r24
    1e9e:	df 93       	push	r29
    1ea0:	cf 93       	push	r28
    1ea2:	0e 94 c2 32 	call	0x6584	; 0x6584 <sscanf>
			eeprom_write_word((uint16_t*)0x10, (uint16_t)timeout);
    1ea6:	60 91 0c 06 	lds	r22, 0x060C	; 0x80060c <timeout>
    1eaa:	70 91 0d 06 	lds	r23, 0x060D	; 0x80060d <timeout+0x1>
    1eae:	80 e1       	ldi	r24, 0x10	; 16
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	0e 94 19 3b 	call	0x7632	; 0x7632 <eeprom_write_word>
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	0f 90       	pop	r0
    1ec2:	35 c0       	rjmp	.+106    	; 0x1f2e <Ether_SendPacket+0x142>
		}
		else if (strncmp("POST / setrtc",(char *)&(buf[dat_p]),13)==0){
    1ec4:	4d e0       	ldi	r20, 0x0D	; 13
    1ec6:	50 e0       	ldi	r21, 0x00	; 0
    1ec8:	be 01       	movw	r22, r28
    1eca:	8e e6       	ldi	r24, 0x6E	; 110
    1ecc:	91 e0       	ldi	r25, 0x01	; 1
    1ece:	0e 94 45 31 	call	0x628a	; 0x628a <strncmp>
    1ed2:	89 2b       	or	r24, r25
    1ed4:	61 f5       	brne	.+88     	; 0x1f2e <Ether_SendPacket+0x142>
			//rtc_t tempRtc;
			sscanf((char *)&(buf[dat_p]), "POST / setrtc %"SCNu8"/%"SCNu8"/%"SCNu8" %"SCNu8"/%"SCNu8"/%"SCNu8, &rtc.date, &rtc.month, &rtc.year, &rtc.hour, &rtc.min, &rtc.sec);
    1ed6:	85 e0       	ldi	r24, 0x05	; 5
    1ed8:	96 e0       	ldi	r25, 0x06	; 6
    1eda:	9f 93       	push	r25
    1edc:	8f 93       	push	r24
    1ede:	86 e0       	ldi	r24, 0x06	; 6
    1ee0:	96 e0       	ldi	r25, 0x06	; 6
    1ee2:	9f 93       	push	r25
    1ee4:	8f 93       	push	r24
    1ee6:	87 e0       	ldi	r24, 0x07	; 7
    1ee8:	96 e0       	ldi	r25, 0x06	; 6
    1eea:	9f 93       	push	r25
    1eec:	8f 93       	push	r24
    1eee:	8b e0       	ldi	r24, 0x0B	; 11
    1ef0:	96 e0       	ldi	r25, 0x06	; 6
    1ef2:	9f 93       	push	r25
    1ef4:	8f 93       	push	r24
    1ef6:	8a e0       	ldi	r24, 0x0A	; 10
    1ef8:	96 e0       	ldi	r25, 0x06	; 6
    1efa:	9f 93       	push	r25
    1efc:	8f 93       	push	r24
    1efe:	89 e0       	ldi	r24, 0x09	; 9
    1f00:	96 e0       	ldi	r25, 0x06	; 6
    1f02:	9f 93       	push	r25
    1f04:	8f 93       	push	r24
    1f06:	8c e7       	ldi	r24, 0x7C	; 124
    1f08:	91 e0       	ldi	r25, 0x01	; 1
    1f0a:	9f 93       	push	r25
    1f0c:	8f 93       	push	r24
    1f0e:	df 93       	push	r29
    1f10:	cf 93       	push	r28
    1f12:	0e 94 c2 32 	call	0x6584	; 0x6584 <sscanf>
			RTC_SetDateTime(&rtc);
    1f16:	85 e0       	ldi	r24, 0x05	; 5
    1f18:	96 e0       	ldi	r25, 0x06	; 6
    1f1a:	0e 94 52 26 	call	0x4ca4	; 0x4ca4 <RTC_SetDateTime>
    1f1e:	8d b7       	in	r24, 0x3d	; 61
    1f20:	9e b7       	in	r25, 0x3e	; 62
    1f22:	40 96       	adiw	r24, 0x10	; 16
    1f24:	0f b6       	in	r0, 0x3f	; 63
    1f26:	f8 94       	cli
    1f28:	9e bf       	out	0x3e, r25	; 62
    1f2a:	0f be       	out	0x3f, r0	; 63
    1f2c:	8d bf       	out	0x3d, r24	; 61
		}
}
    1f2e:	df 91       	pop	r29
    1f30:	cf 91       	pop	r28
    1f32:	1f 91       	pop	r17
    1f34:	0f 91       	pop	r16
    1f36:	ff 90       	pop	r15
    1f38:	ef 90       	pop	r14
    1f3a:	df 90       	pop	r13
    1f3c:	cf 90       	pop	r12
    1f3e:	08 95       	ret

00001f40 <Ether_init>:


void Ether_init()
{
    1f40:	cf 93       	push	r28
    1f42:	df 93       	push	r29
	 // full external speed)
	 // set the clock prescaler. First write CLKPCE to enable setting
	 // of clock the next four instructions.
	 // Note that the CKDIV8 Fuse determines the initial
	 // value of the CKKPS bits.
	 CLKPR=(1<<CLKPCE); // change enable
    1f44:	e1 e6       	ldi	r30, 0x61	; 97
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 e8       	ldi	r24, 0x80	; 128
    1f4a:	80 83       	st	Z, r24
	 CLKPR=0; // "no pre-scaler"
    1f4c:	10 82       	st	Z, r1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f4e:	c0 e0       	ldi	r28, 0x00	; 0
    1f50:	8c 2f       	mov	r24, r28
    1f52:	8a 95       	dec	r24
    1f54:	f1 f7       	brne	.-4      	; 0x1f52 <Ether_init+0x12>
	 _delay_loop_1(0); // 60us

	 /*initialize enc28j60*/
	 enc28j60Init(mymac);
    1f56:	82 e2       	ldi	r24, 0x22	; 34
    1f58:	91 e0       	ldi	r25, 0x01	; 1
    1f5a:	0e 94 29 06 	call	0xc52	; 0xc52 <enc28j60Init>
	 enc28j60clkout(1); // change clkout from 6.25MHz to 12.5MHz
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	0e 94 24 06 	call	0xc48	; 0xc48 <enc28j60clkout>
    1f64:	ca 95       	dec	r28
    1f66:	f1 f7       	brne	.-4      	; 0x1f64 <Ether_init+0x24>
	 _delay_loop_1(0); // 60us
	 
	 init_cnt2();
    1f68:	15 df       	rcall	.-470    	; 0x1d94 <init_cnt2>
	 sei();
    1f6a:	78 94       	sei
	 /* Magjack leds configuration, see enc28j60 datasheet, page 11 */
	 // LEDB=yellow LEDA=green
	 //
	 // 0x476 is PHLCON LEDA=links status, LEDB=receive/transmit
	 // enc28j60PhyWrite(PHLCON,0b0000 0100 0111 01 10);
	 enc28j60PhyWrite(PHLCON,0x476);
    1f6c:	66 e7       	ldi	r22, 0x76	; 118
    1f6e:	74 e0       	ldi	r23, 0x04	; 4
    1f70:	84 e1       	ldi	r24, 0x14	; 20
    1f72:	0e 94 0b 06 	call	0xc16	; 0xc16 <enc28j60PhyWrite>

	 
	 //init the web server ethernet/ip layer:
	 init_udp_or_www_server(mymac,myip);
    1f76:	6e e1       	ldi	r22, 0x1E	; 30
    1f78:	71 e0       	ldi	r23, 0x01	; 1
    1f7a:	82 e2       	ldi	r24, 0x22	; 34
    1f7c:	91 e0       	ldi	r25, 0x01	; 1
    1f7e:	35 db       	rcall	.-2454   	; 0x15ea <init_udp_or_www_server>
	 www_server_port(MYWWWPORT);
    1f80:	80 e5       	ldi	r24, 0x50	; 80
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	46 db       	rcall	.-2420   	; 0x1612 <www_server_port>

	 get_mac_with_arp(gwip,TRANS_NUM_GWMAC,&arpresolver_result_callback);
    1f86:	4c eb       	ldi	r20, 0xBC	; 188
    1f88:	5e e0       	ldi	r21, 0x0E	; 14
    1f8a:	61 e0       	ldi	r22, 0x01	; 1
    1f8c:	8a e0       	ldi	r24, 0x0A	; 10
    1f8e:	91 e0       	ldi	r25, 0x01	; 1
    1f90:	dc db       	rcall	.-2120   	; 0x174a <get_mac_with_arp>
	 while(get_mac_with_arp_wait()){
    1f92:	0a c0       	rjmp	.+20     	; 0x1fa8 <Ether_init+0x68>
		 // to process the ARP reply we must call the packetloop
		 plen=enc28j60PacketReceive(BUFFER_SIZE, buf);
    1f94:	60 e0       	ldi	r22, 0x00	; 0
    1f96:	73 e0       	ldi	r23, 0x03	; 3
    1f98:	80 e8       	ldi	r24, 0x80	; 128
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	0e 94 f1 06 	call	0xde2	; 0xde2 <enc28j60PacketReceive>
		 packetloop_arp_icmp_tcp(buf,plen);
    1fa0:	bc 01       	movw	r22, r24
    1fa2:	80 e0       	ldi	r24, 0x00	; 0
    1fa4:	93 e0       	ldi	r25, 0x03	; 3
	 //init the web server ethernet/ip layer:
	 init_udp_or_www_server(mymac,myip);
	 www_server_port(MYWWWPORT);

	 get_mac_with_arp(gwip,TRANS_NUM_GWMAC,&arpresolver_result_callback);
	 while(get_mac_with_arp_wait()){
    1fa6:	d2 dc       	rcall	.-1628   	; 0x194c <packetloop_arp_icmp_tcp>
    1fa8:	c9 db       	rcall	.-2158   	; 0x173c <get_mac_with_arp_wait>
    1faa:	81 11       	cpse	r24, r1
		 // to process the ARP reply we must call the packetloop
		 plen=enc28j60PacketReceive(BUFFER_SIZE, buf);
		 packetloop_arp_icmp_tcp(buf,plen);
	 }

	 parse_ip(otherside_www_ip,serverip);
    1fac:	f3 cf       	rjmp	.-26     	; 0x1f94 <Ether_init+0x54>
    1fae:	6e e0       	ldi	r22, 0x0E	; 14
    1fb0:	71 e0       	ldi	r23, 0x01	; 1
    1fb2:	81 e8       	ldi	r24, 0x81	; 129
    1fb4:	93 e0       	ldi	r25, 0x03	; 3
    1fb6:	28 d0       	rcall	.+80     	; 0x2008 <parse_ip>
	 processing_state=2; // no need to do any dns look-up
    1fb8:	82 e0       	ldi	r24, 0x02	; 2
    1fba:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <processing_state>
				 processing_state=3;
			 }
			 continue;
		 }
		 if (processing_state==3 && get_mac_with_arp_wait()==0){
			 processing_state=4;
    1fbe:	d3 e0       	ldi	r29, 0x03	; 3
    1fc0:	c4 e0       	ldi	r28, 0x04	; 4
	 parse_ip(otherside_www_ip,serverip);
	 processing_state=2; // no need to do any dns look-up
	 
	 while(processing_state != 4)
	 {
		 if (processing_state==2){
    1fc2:	02 c0       	rjmp	.+4      	; 0x1fc8 <Ether_init+0x88>
    1fc4:	82 30       	cpi	r24, 0x02	; 2
			 if (route_via_gw(otherside_www_ip)){
    1fc6:	91 f4       	brne	.+36     	; 0x1fec <Ether_init+0xac>
    1fc8:	81 e8       	ldi	r24, 0x81	; 129
    1fca:	93 e0       	ldi	r25, 0x03	; 3
    1fcc:	81 d8       	rcall	.-3838   	; 0x10d0 <route_via_gw>
    1fce:	88 23       	and	r24, r24
    1fd0:	21 f0       	breq	.+8      	; 0x1fda <Ether_init+0x9a>
				 i=0;
				 while(i<6){
					 otherside_www_gwmac[i]=gwmac[i];
					 i++;
				 }
				 processing_state=4;
    1fd2:	84 e0       	ldi	r24, 0x04	; 4
    1fd4:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <processing_state>
				 }else{
				 get_mac_with_arp(otherside_www_ip,TRANS_NUM_WEBMAC,&arpresolver_result_callback);
    1fd8:	14 c0       	rjmp	.+40     	; 0x2002 <Ether_init+0xc2>
    1fda:	4c eb       	ldi	r20, 0xBC	; 188
    1fdc:	5e e0       	ldi	r21, 0x0E	; 14
    1fde:	62 e0       	ldi	r22, 0x02	; 2
    1fe0:	81 e8       	ldi	r24, 0x81	; 129
    1fe2:	93 e0       	ldi	r25, 0x03	; 3
				 processing_state=3;
    1fe4:	b2 db       	rcall	.-2204   	; 0x174a <get_mac_with_arp>
    1fe6:	d0 93 fb 02 	sts	0x02FB, r29	; 0x8002fb <processing_state>
			 }
			 continue;
		 }
		 if (processing_state==3 && get_mac_with_arp_wait()==0){
    1fea:	07 c0       	rjmp	.+14     	; 0x1ffa <Ether_init+0xba>
    1fec:	83 30       	cpi	r24, 0x03	; 3
    1fee:	29 f4       	brne	.+10     	; 0x1ffa <Ether_init+0xba>
    1ff0:	a5 db       	rcall	.-2230   	; 0x173c <get_mac_with_arp_wait>
    1ff2:	81 11       	cpse	r24, r1
    1ff4:	02 c0       	rjmp	.+4      	; 0x1ffa <Ether_init+0xba>
			 processing_state=4;
    1ff6:	c0 93 fb 02 	sts	0x02FB, r28	; 0x8002fb <processing_state>
	 }

	 parse_ip(otherside_www_ip,serverip);
	 processing_state=2; // no need to do any dns look-up
	 
	 while(processing_state != 4)
    1ffa:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <processing_state>
    1ffe:	84 30       	cpi	r24, 0x04	; 4
    2000:	09 f7       	brne	.-62     	; 0x1fc4 <Ether_init+0x84>
		 }
		 if (processing_state==3 && get_mac_with_arp_wait()==0){
			 processing_state=4;
		 }
	 }
}
    2002:	df 91       	pop	r29
    2004:	cf 91       	pop	r28
    2006:	08 95       	ret

00002008 <parse_ip>:

#endif // URLENCODE_websrv_help

// parse a string that is an IP address and extract the IP to ip_byte_str
uint8_t parse_ip(uint8_t *ip_byte_str,const char *str)
{
    2008:	af 92       	push	r10
    200a:	bf 92       	push	r11
    200c:	df 92       	push	r13
    200e:	ef 92       	push	r14
    2010:	ff 92       	push	r15
    2012:	0f 93       	push	r16
    2014:	1f 93       	push	r17
    2016:	cf 93       	push	r28
    2018:	df 93       	push	r29
    201a:	00 d0       	rcall	.+0      	; 0x201c <parse_ip+0x14>
    201c:	00 d0       	rcall	.+0      	; 0x201e <parse_ip+0x16>
    201e:	cd b7       	in	r28, 0x3d	; 61
    2020:	de b7       	in	r29, 0x3e	; 62
    2022:	fc 01       	movw	r30, r24
        char strbuf[4];
        uint8_t bufpos=0;
        uint8_t i=0;
        while(i<4){
                ip_byte_str[i]=0;
    2024:	10 82       	st	Z, r1
    2026:	11 82       	std	Z+1, r1	; 0x01
    2028:	12 82       	std	Z+2, r1	; 0x02
    202a:	13 82       	std	Z+3, r1	; 0x03
                i++;
        }
        i=0;
        while(*str && i<4){
    202c:	db 01       	movw	r26, r22
    202e:	9c 91       	ld	r25, X
    2030:	99 23       	and	r25, r25
    2032:	09 f4       	brne	.+2      	; 0x2036 <parse_ip+0x2e>
    2034:	48 c0       	rjmp	.+144    	; 0x20c6 <parse_ip+0xbe>
    2036:	7f 01       	movw	r14, r30
    2038:	8b 01       	movw	r16, r22
    203a:	0f 5f       	subi	r16, 0xFF	; 255
    203c:	1f 4f       	sbci	r17, 0xFF	; 255
    203e:	d1 2c       	mov	r13, r1
    2040:	20 e0       	ldi	r18, 0x00	; 0
                // if a number then start
                if (bufpos < 3 && isdigit(*str)){
    2042:	23 30       	cpi	r18, 0x03	; 3
    2044:	78 f4       	brcc	.+30     	; 0x2064 <parse_ip+0x5c>
    2046:	49 2f       	mov	r20, r25
    2048:	50 e0       	ldi	r21, 0x00	; 0
    204a:	40 53       	subi	r20, 0x30	; 48
    204c:	51 09       	sbc	r21, r1
    204e:	4a 30       	cpi	r20, 0x0A	; 10
    2050:	51 05       	cpc	r21, r1
    2052:	40 f4       	brcc	.+16     	; 0x2064 <parse_ip+0x5c>
                        strbuf[bufpos]=*str; // copy
    2054:	e1 e0       	ldi	r30, 0x01	; 1
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	ec 0f       	add	r30, r28
    205a:	fd 1f       	adc	r31, r29
    205c:	e2 0f       	add	r30, r18
    205e:	f1 1d       	adc	r31, r1
    2060:	90 83       	st	Z, r25
                        bufpos++;
    2062:	2f 5f       	subi	r18, 0xFF	; 255
                }
                if (bufpos && *str == '.'){
    2064:	22 23       	and	r18, r18
    2066:	a1 f0       	breq	.+40     	; 0x2090 <parse_ip+0x88>
    2068:	9e 32       	cpi	r25, 0x2E	; 46
    206a:	91 f4       	brne	.+36     	; 0x2090 <parse_ip+0x88>
                        strbuf[bufpos]='\0';
    206c:	e1 e0       	ldi	r30, 0x01	; 1
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	ec 0f       	add	r30, r28
    2072:	fd 1f       	adc	r31, r29
    2074:	e2 0f       	add	r30, r18
    2076:	f1 1d       	adc	r31, r1
    2078:	10 82       	st	Z, r1
                        ip_byte_str[i]=(atoi(strbuf)&0xff);
    207a:	57 01       	movw	r10, r14
    207c:	ad 0c       	add	r10, r13
    207e:	b1 1c       	adc	r11, r1
    2080:	ce 01       	movw	r24, r28
    2082:	01 96       	adiw	r24, 0x01	; 1
    2084:	0e 94 02 31 	call	0x6204	; 0x6204 <atoi>
    2088:	f5 01       	movw	r30, r10
    208a:	80 83       	st	Z, r24
                        i++;
    208c:	d3 94       	inc	r13
                        bufpos=0;
    208e:	20 e0       	ldi	r18, 0x00	; 0
        while(i<4){
                ip_byte_str[i]=0;
                i++;
        }
        i=0;
        while(*str && i<4){
    2090:	d8 01       	movw	r26, r16
    2092:	9d 91       	ld	r25, X+
    2094:	8d 01       	movw	r16, r26
    2096:	99 23       	and	r25, r25
    2098:	19 f0       	breq	.+6      	; 0x20a0 <parse_ip+0x98>
    209a:	b3 e0       	ldi	r27, 0x03	; 3
    209c:	bd 15       	cp	r27, r13
    209e:	88 f6       	brcc	.-94     	; 0x2042 <parse_ip+0x3a>
                        i++;
                        bufpos=0;
                }
                str++;
        }
        if (i==3){ // must have read the first componets of the IP
    20a0:	e3 e0       	ldi	r30, 0x03	; 3
    20a2:	de 12       	cpse	r13, r30
    20a4:	12 c0       	rjmp	.+36     	; 0x20ca <parse_ip+0xc2>
                strbuf[bufpos]='\0';
    20a6:	e1 e0       	ldi	r30, 0x01	; 1
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	ec 0f       	add	r30, r28
    20ac:	fd 1f       	adc	r31, r29
    20ae:	e2 0f       	add	r30, r18
    20b0:	f1 1d       	adc	r31, r1
    20b2:	10 82       	st	Z, r1
                ip_byte_str[i]=(atoi(strbuf)&0xff);
    20b4:	ce 01       	movw	r24, r28
    20b6:	01 96       	adiw	r24, 0x01	; 1
    20b8:	0e 94 02 31 	call	0x6204	; 0x6204 <atoi>
    20bc:	d7 01       	movw	r26, r14
    20be:	13 96       	adiw	r26, 0x03	; 3
    20c0:	8c 93       	st	X, r24
                return(0);
    20c2:	80 e0       	ldi	r24, 0x00	; 0
    20c4:	03 c0       	rjmp	.+6      	; 0x20cc <parse_ip+0xc4>
        }
        return(1);
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	01 c0       	rjmp	.+2      	; 0x20cc <parse_ip+0xc4>
    20ca:	81 e0       	ldi	r24, 0x01	; 1
}
    20cc:	0f 90       	pop	r0
    20ce:	0f 90       	pop	r0
    20d0:	0f 90       	pop	r0
    20d2:	0f 90       	pop	r0
    20d4:	df 91       	pop	r29
    20d6:	cf 91       	pop	r28
    20d8:	1f 91       	pop	r17
    20da:	0f 91       	pop	r16
    20dc:	ff 90       	pop	r15
    20de:	ef 90       	pop	r14
    20e0:	df 90       	pop	r13
    20e2:	bf 90       	pop	r11
    20e4:	af 90       	pop	r10
    20e6:	08 95       	ret

000020e8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    20e8:	cf 93       	push	r28
    20ea:	df 93       	push	r29
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

#if _WORD_ACCESS == 1
	while (cnt >= sizeof (int)) {
    20ec:	42 30       	cpi	r20, 0x02	; 2
    20ee:	51 05       	cpc	r21, r1
    20f0:	c0 f0       	brcs	.+48     	; 0x2122 <mem_cpy+0x3a>
    20f2:	db 01       	movw	r26, r22
    20f4:	fc 01       	movw	r30, r24
    20f6:	9a 01       	movw	r18, r20
		*(int*)d = *(int*)s;
    20f8:	cd 91       	ld	r28, X+
    20fa:	dd 91       	ld	r29, X+
    20fc:	c1 93       	st	Z+, r28
    20fe:	d1 93       	st	Z+, r29
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
    2100:	22 50       	subi	r18, 0x02	; 2
    2102:	31 09       	sbc	r19, r1
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

#if _WORD_ACCESS == 1
	while (cnt >= sizeof (int)) {
    2104:	22 30       	cpi	r18, 0x02	; 2
    2106:	31 05       	cpc	r19, r1
    2108:	b8 f7       	brcc	.-18     	; 0x20f8 <mem_cpy+0x10>
    210a:	9a 01       	movw	r18, r20
    210c:	22 50       	subi	r18, 0x02	; 2
    210e:	31 09       	sbc	r19, r1
    2110:	2e 7f       	andi	r18, 0xFE	; 254
    2112:	2e 5f       	subi	r18, 0xFE	; 254
    2114:	3f 4f       	sbci	r19, 0xFF	; 255
    2116:	82 0f       	add	r24, r18
    2118:	93 1f       	adc	r25, r19
    211a:	62 0f       	add	r22, r18
    211c:	73 1f       	adc	r23, r19
    211e:	41 70       	andi	r20, 0x01	; 1
    2120:	55 27       	eor	r21, r21
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
    2122:	41 15       	cp	r20, r1
    2124:	51 05       	cpc	r21, r1
    2126:	49 f0       	breq	.+18     	; 0x213a <mem_cpy+0x52>
    2128:	db 01       	movw	r26, r22
    212a:	fc 01       	movw	r30, r24
    212c:	48 0f       	add	r20, r24
    212e:	59 1f       	adc	r21, r25
		*d++ = *s++;
    2130:	9d 91       	ld	r25, X+
    2132:	91 93       	st	Z+, r25
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
    2134:	e4 17       	cp	r30, r20
    2136:	f5 07       	cpc	r31, r21
    2138:	d9 f7       	brne	.-10     	; 0x2130 <mem_cpy+0x48>
		*d++ = *s++;
}
    213a:	df 91       	pop	r29
    213c:	cf 91       	pop	r28
    213e:	08 95       	ret

00002140 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
    2140:	cf 93       	push	r28
    2142:	df 93       	push	r29
    2144:	ec 01       	movw	r28, r24
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
    2146:	a8 81       	ld	r26, Y
    2148:	b9 81       	ldd	r27, Y+1	; 0x01
    214a:	10 97       	sbiw	r26, 0x00	; 0
    214c:	f9 f0       	breq	.+62     	; 0x218c <get_ldnumber+0x4c>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
    214e:	4c 91       	ld	r20, X
    2150:	41 32       	cpi	r20, 0x21	; 33
    2152:	58 f0       	brcs	.+22     	; 0x216a <get_ldnumber+0x2a>
    2154:	4a 33       	cpi	r20, 0x3A	; 58
    2156:	31 f1       	breq	.+76     	; 0x21a4 <get_ldnumber+0x64>
    2158:	fd 01       	movw	r30, r26
    215a:	31 96       	adiw	r30, 0x01	; 1
    215c:	9f 01       	movw	r18, r30
    215e:	91 91       	ld	r25, Z+
    2160:	91 32       	cpi	r25, 0x21	; 33
    2162:	28 f0       	brcs	.+10     	; 0x216e <get_ldnumber+0x2e>
    2164:	9a 33       	cpi	r25, 0x3A	; 58
    2166:	d1 f7       	brne	.-12     	; 0x215c <get_ldnumber+0x1c>
    2168:	04 c0       	rjmp	.+8      	; 0x2172 <get_ldnumber+0x32>
    216a:	94 2f       	mov	r25, r20
    216c:	9d 01       	movw	r18, r26
		if (*tt == ':') {	/* If a ':' is exist in the path name */
    216e:	9a 33       	cpi	r25, 0x3A	; 58
    2170:	81 f4       	brne	.+32     	; 0x2192 <get_ldnumber+0x52>
			tp = *path;
			i = *tp++ - '0'; 
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
    2172:	cd 01       	movw	r24, r26
    2174:	01 96       	adiw	r24, 0x01	; 1
    2176:	28 17       	cp	r18, r24
    2178:	39 07       	cpc	r19, r25
    217a:	71 f4       	brne	.+28     	; 0x2198 <get_ldnumber+0x58>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
    217c:	40 33       	cpi	r20, 0x30	; 48
    217e:	79 f4       	brne	.+30     	; 0x219e <get_ldnumber+0x5e>
					vol = (int)i;
					*path = ++tt;
    2180:	12 96       	adiw	r26, 0x02	; 2
    2182:	b9 83       	std	Y+1, r27	; 0x01
    2184:	a8 83       	st	Y, r26
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
					vol = (int)i;
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	0e c0       	rjmp	.+28     	; 0x21a8 <get_ldnumber+0x68>
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
    218c:	8f ef       	ldi	r24, 0xFF	; 255
    218e:	9f ef       	ldi	r25, 0xFF	; 255
    2190:	0b c0       	rjmp	.+22     	; 0x21a8 <get_ldnumber+0x68>
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	08 c0       	rjmp	.+16     	; 0x21a8 <get_ldnumber+0x68>
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
    2198:	8f ef       	ldi	r24, 0xFF	; 255
    219a:	9f ef       	ldi	r25, 0xFF	; 255
    219c:	05 c0       	rjmp	.+10     	; 0x21a8 <get_ldnumber+0x68>
    219e:	8f ef       	ldi	r24, 0xFF	; 255
    21a0:	9f ef       	ldi	r25, 0xFF	; 255
    21a2:	02 c0       	rjmp	.+4      	; 0x21a8 <get_ldnumber+0x68>
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
    21a4:	9d 01       	movw	r18, r26
    21a6:	e5 cf       	rjmp	.-54     	; 0x2172 <get_ldnumber+0x32>
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
    21a8:	df 91       	pop	r29
    21aa:	cf 91       	pop	r28
    21ac:	08 95       	ret

000021ae <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
    21ae:	8f 92       	push	r8
    21b0:	9f 92       	push	r9
    21b2:	af 92       	push	r10
    21b4:	bf 92       	push	r11
    21b6:	cf 92       	push	r12
    21b8:	df 92       	push	r13
    21ba:	ef 92       	push	r14
    21bc:	ff 92       	push	r15
    21be:	0f 93       	push	r16
    21c0:	1f 93       	push	r17
    21c2:	cf 93       	push	r28
    21c4:	df 93       	push	r29
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;


	if (fs->wflag) {	/* Write back the sector if it is dirty */
    21c6:	fc 01       	movw	r30, r24
    21c8:	24 81       	ldd	r18, Z+4	; 0x04
    21ca:	22 23       	and	r18, r18
    21cc:	09 f4       	brne	.+2      	; 0x21d0 <sync_window+0x22>
    21ce:	46 c0       	rjmp	.+140    	; 0x225c <sync_window+0xae>
    21d0:	ec 01       	movw	r28, r24
		wsect = fs->winsect;	/* Current sector number */
    21d2:	c2 a4       	ldd	r12, Z+42	; 0x2a
    21d4:	d3 a4       	ldd	r13, Z+43	; 0x2b
    21d6:	e4 a4       	ldd	r14, Z+44	; 0x2c
    21d8:	f5 a4       	ldd	r15, Z+45	; 0x2d
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
    21da:	5c 01       	movw	r10, r24
    21dc:	fe e2       	ldi	r31, 0x2E	; 46
    21de:	af 0e       	add	r10, r31
    21e0:	b1 1c       	adc	r11, r1
    21e2:	01 e0       	ldi	r16, 0x01	; 1
    21e4:	10 e0       	ldi	r17, 0x00	; 0
    21e6:	a7 01       	movw	r20, r14
    21e8:	96 01       	movw	r18, r12
    21ea:	b5 01       	movw	r22, r10
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	0e 94 76 23 	call	0x46ec	; 0x46ec <disk_write>
    21f2:	81 11       	cpse	r24, r1
    21f4:	35 c0       	rjmp	.+106    	; 0x2260 <sync_window+0xb2>
			res = FR_DISK_ERR;
		} else {
			fs->wflag = 0;
    21f6:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
    21f8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21fa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    21fc:	a8 a1       	ldd	r26, Y+32	; 0x20
    21fe:	b9 a1       	ldd	r27, Y+33	; 0x21
    2200:	b7 01       	movw	r22, r14
    2202:	a6 01       	movw	r20, r12
    2204:	48 1b       	sub	r20, r24
    2206:	59 0b       	sbc	r21, r25
    2208:	6a 0b       	sbc	r22, r26
    220a:	7b 0b       	sbc	r23, r27
    220c:	8e 89       	ldd	r24, Y+22	; 0x16
    220e:	9f 89       	ldd	r25, Y+23	; 0x17
    2210:	a8 8d       	ldd	r26, Y+24	; 0x18
    2212:	b9 8d       	ldd	r27, Y+25	; 0x19
    2214:	48 17       	cp	r20, r24
    2216:	59 07       	cpc	r21, r25
    2218:	6a 07       	cpc	r22, r26
    221a:	7b 07       	cpc	r23, r27
    221c:	18 f5       	brcc	.+70     	; 0x2264 <sync_window+0xb6>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
    221e:	8b 80       	ldd	r8, Y+3	; 0x03
    2220:	91 2c       	mov	r9, r1
    2222:	82 e0       	ldi	r24, 0x02	; 2
    2224:	88 16       	cp	r8, r24
    2226:	91 04       	cpc	r9, r1
    2228:	f8 f0       	brcs	.+62     	; 0x2268 <sync_window+0xba>
					wsect += fs->fsize;
    222a:	8e 89       	ldd	r24, Y+22	; 0x16
    222c:	9f 89       	ldd	r25, Y+23	; 0x17
    222e:	a8 8d       	ldd	r26, Y+24	; 0x18
    2230:	b9 8d       	ldd	r27, Y+25	; 0x19
    2232:	c8 0e       	add	r12, r24
    2234:	d9 1e       	adc	r13, r25
    2236:	ea 1e       	adc	r14, r26
    2238:	fb 1e       	adc	r15, r27
					disk_write(fs->drv, fs->win, wsect, 1);
    223a:	01 e0       	ldi	r16, 0x01	; 1
    223c:	10 e0       	ldi	r17, 0x00	; 0
    223e:	a7 01       	movw	r20, r14
    2240:	96 01       	movw	r18, r12
    2242:	b5 01       	movw	r22, r10
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	0e 94 76 23 	call	0x46ec	; 0x46ec <disk_write>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
			res = FR_DISK_ERR;
		} else {
			fs->wflag = 0;
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
    224a:	e1 e0       	ldi	r30, 0x01	; 1
    224c:	8e 1a       	sub	r8, r30
    224e:	91 08       	sbc	r9, r1
    2250:	f1 e0       	ldi	r31, 0x01	; 1
    2252:	8f 16       	cp	r8, r31
    2254:	91 04       	cpc	r9, r1
    2256:	49 f7       	brne	.-46     	; 0x222a <sync_window+0x7c>
	FATFS* fs		/* File system object */
)
{
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
    2258:	80 e0       	ldi	r24, 0x00	; 0
    225a:	07 c0       	rjmp	.+14     	; 0x226a <sync_window+0xbc>
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	05 c0       	rjmp	.+10     	; 0x226a <sync_window+0xbc>


	if (fs->wflag) {	/* Write back the sector if it is dirty */
		wsect = fs->winsect;	/* Current sector number */
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
			res = FR_DISK_ERR;
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	03 c0       	rjmp	.+6      	; 0x226a <sync_window+0xbc>
	FATFS* fs		/* File system object */
)
{
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	01 c0       	rjmp	.+2      	; 0x226a <sync_window+0xbc>
    2268:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		}
	}
	return res;
}
    226a:	df 91       	pop	r29
    226c:	cf 91       	pop	r28
    226e:	1f 91       	pop	r17
    2270:	0f 91       	pop	r16
    2272:	ff 90       	pop	r15
    2274:	ef 90       	pop	r14
    2276:	df 90       	pop	r13
    2278:	cf 90       	pop	r12
    227a:	bf 90       	pop	r11
    227c:	af 90       	pop	r10
    227e:	9f 90       	pop	r9
    2280:	8f 90       	pop	r8
    2282:	08 95       	ret

00002284 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)
{
    2284:	8f 92       	push	r8
    2286:	9f 92       	push	r9
    2288:	af 92       	push	r10
    228a:	bf 92       	push	r11
    228c:	ff 92       	push	r15
    228e:	0f 93       	push	r16
    2290:	1f 93       	push	r17
    2292:	cf 93       	push	r28
    2294:	df 93       	push	r29
    2296:	ec 01       	movw	r28, r24
    2298:	4a 01       	movw	r8, r20
    229a:	5b 01       	movw	r10, r22
	FRESULT res = FR_OK;


	if (sector != fs->winsect) {	/* Window offset changed? */
    229c:	8a a5       	ldd	r24, Y+42	; 0x2a
    229e:	9b a5       	ldd	r25, Y+43	; 0x2b
    22a0:	ac a5       	ldd	r26, Y+44	; 0x2c
    22a2:	bd a5       	ldd	r27, Y+45	; 0x2d
    22a4:	84 17       	cp	r24, r20
    22a6:	95 07       	cpc	r25, r21
    22a8:	a6 07       	cpc	r26, r22
    22aa:	b7 07       	cpc	r27, r23
    22ac:	e1 f0       	breq	.+56     	; 0x22e6 <move_window+0x62>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
    22ae:	ce 01       	movw	r24, r28
    22b0:	7e df       	rcall	.-260    	; 0x21ae <sync_window>
    22b2:	f8 2e       	mov	r15, r24
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
    22b4:	81 11       	cpse	r24, r1
    22b6:	18 c0       	rjmp	.+48     	; 0x22e8 <move_window+0x64>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
    22b8:	01 e0       	ldi	r16, 0x01	; 1
    22ba:	10 e0       	ldi	r17, 0x00	; 0
    22bc:	a5 01       	movw	r20, r10
    22be:	94 01       	movw	r18, r8
    22c0:	be 01       	movw	r22, r28
    22c2:	62 5d       	subi	r22, 0xD2	; 210
    22c4:	7f 4f       	sbci	r23, 0xFF	; 255
    22c6:	89 81       	ldd	r24, Y+1	; 0x01
    22c8:	0e 94 24 23 	call	0x4648	; 0x4648 <disk_read>
    22cc:	88 23       	and	r24, r24
    22ce:	31 f0       	breq	.+12     	; 0x22dc <move_window+0x58>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
				res = FR_DISK_ERR;
    22d0:	ff 24       	eor	r15, r15
    22d2:	f3 94       	inc	r15
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
    22d4:	88 24       	eor	r8, r8
    22d6:	8a 94       	dec	r8
    22d8:	98 2c       	mov	r9, r8
    22da:	54 01       	movw	r10, r8
				res = FR_DISK_ERR;
			}
			fs->winsect = sector;
    22dc:	8a a6       	std	Y+42, r8	; 0x2a
    22de:	9b a6       	std	Y+43, r9	; 0x2b
    22e0:	ac a6       	std	Y+44, r10	; 0x2c
    22e2:	bd a6       	std	Y+45, r11	; 0x2d
    22e4:	01 c0       	rjmp	.+2      	; 0x22e8 <move_window+0x64>
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)
{
	FRESULT res = FR_OK;
    22e6:	f1 2c       	mov	r15, r1
			}
			fs->winsect = sector;
		}
	}
	return res;
}
    22e8:	8f 2d       	mov	r24, r15
    22ea:	df 91       	pop	r29
    22ec:	cf 91       	pop	r28
    22ee:	1f 91       	pop	r17
    22f0:	0f 91       	pop	r16
    22f2:	ff 90       	pop	r15
    22f4:	bf 90       	pop	r11
    22f6:	af 90       	pop	r10
    22f8:	9f 90       	pop	r9
    22fa:	8f 90       	pop	r8
    22fc:	08 95       	ret

000022fe <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    22fe:	cf 93       	push	r28
    2300:	df 93       	push	r29
    2302:	ec 01       	movw	r28, r24
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
    2304:	1c 82       	std	Y+4, r1	; 0x04
    2306:	8f ef       	ldi	r24, 0xFF	; 255
    2308:	9f ef       	ldi	r25, 0xFF	; 255
    230a:	dc 01       	movw	r26, r24
    230c:	8a a7       	std	Y+42, r24	; 0x2a
    230e:	9b a7       	std	Y+43, r25	; 0x2b
    2310:	ac a7       	std	Y+44, r26	; 0x2c
    2312:	bd a7       	std	Y+45, r27	; 0x2d
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
    2314:	ce 01       	movw	r24, r28
    2316:	b6 df       	rcall	.-148    	; 0x2284 <move_window>
    2318:	81 11       	cpse	r24, r1
    231a:	23 c0       	rjmp	.+70     	; 0x2362 <check_fs+0x64>
		return 3;

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
    231c:	fe 01       	movw	r30, r28
    231e:	e4 5d       	subi	r30, 0xD4	; 212
    2320:	fd 4f       	sbci	r31, 0xFD	; 253
    2322:	80 81       	ld	r24, Z
    2324:	91 81       	ldd	r25, Z+1	; 0x01
    2326:	85 35       	cpi	r24, 0x55	; 85
    2328:	9a 4a       	sbci	r25, 0xAA	; 170
    232a:	e9 f4       	brne	.+58     	; 0x2366 <check_fs+0x68>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
    232c:	e8 5c       	subi	r30, 0xC8	; 200
    232e:	f1 40       	sbci	r31, 0x01	; 1
    2330:	80 81       	ld	r24, Z
    2332:	91 81       	ldd	r25, Z+1	; 0x01
    2334:	a2 81       	ldd	r26, Z+2	; 0x02
    2336:	b3 81       	ldd	r27, Z+3	; 0x03
    2338:	bb 27       	eor	r27, r27
    233a:	86 34       	cpi	r24, 0x46	; 70
    233c:	91 44       	sbci	r25, 0x41	; 65
    233e:	a4 45       	sbci	r26, 0x54	; 84
    2340:	b1 05       	cpc	r27, r1
    2342:	99 f0       	breq	.+38     	; 0x236a <check_fs+0x6c>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    2344:	c0 58       	subi	r28, 0x80	; 128
    2346:	df 4f       	sbci	r29, 0xFF	; 255
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
		return 3;
    2348:	48 81       	ld	r20, Y
    234a:	59 81       	ldd	r21, Y+1	; 0x01
    234c:	6a 81       	ldd	r22, Y+2	; 0x02
    234e:	7b 81       	ldd	r23, Y+3	; 0x03
    2350:	77 27       	eor	r23, r23
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	46 34       	cpi	r20, 0x46	; 70
    2356:	51 44       	sbci	r21, 0x41	; 65
    2358:	64 45       	sbci	r22, 0x54	; 84
    235a:	71 05       	cpc	r23, r1
    235c:	39 f4       	brne	.+14     	; 0x236c <check_fs+0x6e>
    235e:	80 e0       	ldi	r24, 0x00	; 0
    2360:	05 c0       	rjmp	.+10     	; 0x236c <check_fs+0x6e>
    2362:	83 e0       	ldi	r24, 0x03	; 3
    2364:	03 c0       	rjmp	.+6      	; 0x236c <check_fs+0x6e>

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
    2366:	82 e0       	ldi	r24, 0x02	; 2
    2368:	01 c0       	rjmp	.+2      	; 0x236c <check_fs+0x6e>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
		return 0;
    236a:	80 e0       	ldi	r24, 0x00	; 0
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
		return 0;

	return 1;
}
    236c:	df 91       	pop	r29
    236e:	cf 91       	pop	r28
    2370:	08 95       	ret

00002372 <validate>:
)
{
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
    2372:	00 97       	sbiw	r24, 0x00	; 0
    2374:	c9 f0       	breq	.+50     	; 0x23a8 <validate+0x36>
    2376:	dc 01       	movw	r26, r24
    2378:	ed 91       	ld	r30, X+
    237a:	fc 91       	ld	r31, X
    237c:	11 97       	sbiw	r26, 0x01	; 1
    237e:	30 97       	sbiw	r30, 0x00	; 0
    2380:	a9 f0       	breq	.+42     	; 0x23ac <validate+0x3a>
    2382:	20 81       	ld	r18, Z
    2384:	22 23       	and	r18, r18
    2386:	a1 f0       	breq	.+40     	; 0x23b0 <validate+0x3e>
    2388:	26 81       	ldd	r18, Z+6	; 0x06
    238a:	37 81       	ldd	r19, Z+7	; 0x07
    238c:	12 96       	adiw	r26, 0x02	; 2
    238e:	8d 91       	ld	r24, X+
    2390:	9c 91       	ld	r25, X
    2392:	13 97       	sbiw	r26, 0x03	; 3
    2394:	28 17       	cp	r18, r24
    2396:	39 07       	cpc	r19, r25
    2398:	69 f4       	brne	.+26     	; 0x23b4 <validate+0x42>
		return FR_INVALID_OBJECT;

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
    239a:	81 81       	ldd	r24, Z+1	; 0x01
    239c:	0e 94 1d 23 	call	0x463a	; 0x463a <disk_status>
    23a0:	80 fd       	sbrc	r24, 0
    23a2:	0a c0       	rjmp	.+20     	; 0x23b8 <validate+0x46>
		return FR_NOT_READY;

	return FR_OK;
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	08 95       	ret
{
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
		return FR_INVALID_OBJECT;
    23a8:	89 e0       	ldi	r24, 0x09	; 9
    23aa:	08 95       	ret
    23ac:	89 e0       	ldi	r24, 0x09	; 9
    23ae:	08 95       	ret
    23b0:	89 e0       	ldi	r24, 0x09	; 9
    23b2:	08 95       	ret
    23b4:	89 e0       	ldi	r24, 0x09	; 9
    23b6:	08 95       	ret

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
		return FR_NOT_READY;
    23b8:	83 e0       	ldi	r24, 0x03	; 3

	return FR_OK;
}
    23ba:	08 95       	ret

000023bc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
    23bc:	2f 92       	push	r2
    23be:	3f 92       	push	r3
    23c0:	4f 92       	push	r4
    23c2:	5f 92       	push	r5
    23c4:	6f 92       	push	r6
    23c6:	7f 92       	push	r7
    23c8:	8f 92       	push	r8
    23ca:	9f 92       	push	r9
    23cc:	af 92       	push	r10
    23ce:	bf 92       	push	r11
    23d0:	cf 92       	push	r12
    23d2:	df 92       	push	r13
    23d4:	ef 92       	push	r14
    23d6:	ff 92       	push	r15
    23d8:	0f 93       	push	r16
    23da:	1f 93       	push	r17
    23dc:	cf 93       	push	r28
    23de:	df 93       	push	r29
    23e0:	cd b7       	in	r28, 0x3d	; 61
    23e2:	de b7       	in	r29, 0x3e	; 62
    23e4:	6d 97       	sbiw	r28, 0x1d	; 29
    23e6:	0f b6       	in	r0, 0x3f	; 63
    23e8:	f8 94       	cli
    23ea:	de bf       	out	0x3e, r29	; 62
    23ec:	0f be       	out	0x3f, r0	; 63
    23ee:	cd bf       	out	0x3d, r28	; 61
    23f0:	6c 01       	movw	r12, r24
    23f2:	cb 01       	movw	r24, r22
    23f4:	b4 2e       	mov	r11, r20
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
    23f6:	d6 01       	movw	r26, r12
    23f8:	1d 92       	st	X+, r1
    23fa:	1c 92       	st	X, r1
	vol = get_ldnumber(path);
    23fc:	a1 de       	rcall	.-702    	; 0x2140 <get_ldnumber>
    23fe:	7c 01       	movw	r14, r24
	if (vol < 0) return FR_INVALID_DRIVE;
    2400:	99 23       	and	r25, r25
    2402:	0c f4       	brge	.+2      	; 0x2406 <find_volume+0x4a>
    2404:	02 c2       	rjmp	.+1028   	; 0x280a <find_volume+0x44e>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
    2406:	fc 01       	movw	r30, r24
    2408:	ee 0f       	add	r30, r30
    240a:	ff 1f       	adc	r31, r31
    240c:	e3 57       	subi	r30, 0x73	; 115
    240e:	fc 4f       	sbci	r31, 0xFC	; 252
    2410:	00 81       	ld	r16, Z
    2412:	11 81       	ldd	r17, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    2414:	01 15       	cp	r16, r1
    2416:	11 05       	cpc	r17, r1
    2418:	09 f4       	brne	.+2      	; 0x241c <find_volume+0x60>
    241a:	f9 c1       	rjmp	.+1010   	; 0x280e <find_volume+0x452>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
    241c:	f6 01       	movw	r30, r12
    241e:	11 83       	std	Z+1, r17	; 0x01
    2420:	00 83       	st	Z, r16

	if (fs->fs_type) {					/* If the volume has been mounted */
    2422:	d8 01       	movw	r26, r16
    2424:	8c 91       	ld	r24, X
    2426:	88 23       	and	r24, r24
    2428:	69 f0       	breq	.+26     	; 0x2444 <find_volume+0x88>
		stat = disk_status(fs->drv);
    242a:	11 96       	adiw	r26, 0x01	; 1
    242c:	8c 91       	ld	r24, X
    242e:	0e 94 1d 23 	call	0x463a	; 0x463a <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
    2432:	80 fd       	sbrc	r24, 0
    2434:	07 c0       	rjmp	.+14     	; 0x2444 <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
    2436:	bb 20       	and	r11, r11
    2438:	09 f4       	brne	.+2      	; 0x243c <find_volume+0x80>
    243a:	eb c1       	rjmp	.+982    	; 0x2812 <find_volume+0x456>
    243c:	82 ff       	sbrs	r24, 2
    243e:	eb c1       	rjmp	.+982    	; 0x2816 <find_volume+0x45a>
				return FR_WRITE_PROTECTED;
    2440:	8a e0       	ldi	r24, 0x0A	; 10
    2442:	8b c2       	rjmp	.+1302   	; 0x295a <find_volume+0x59e>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    2444:	f8 01       	movw	r30, r16
    2446:	10 82       	st	Z, r1
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    2448:	e1 82       	std	Z+1, r14	; 0x01
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
    244a:	8e 2d       	mov	r24, r14
    244c:	0e 94 66 22 	call	0x44cc	; 0x44cc <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    2450:	80 fd       	sbrc	r24, 0
    2452:	e3 c1       	rjmp	.+966    	; 0x281a <find_volume+0x45e>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    2454:	bb 20       	and	r11, r11
    2456:	09 f4       	brne	.+2      	; 0x245a <find_volume+0x9e>
    2458:	00 c2       	rjmp	.+1024   	; 0x285a <find_volume+0x49e>
    245a:	82 fd       	sbrc	r24, 2
    245c:	e0 c1       	rjmp	.+960    	; 0x281e <find_volume+0x462>
    245e:	fd c1       	rjmp	.+1018   	; 0x285a <find_volume+0x49e>
	bsect = 0;
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
		for (i = 0; i < 4; i++) {			/* Get partition offset */
			pt = fs->win + MBR_Table + i * SZ_PTE;
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
    2460:	80 81       	ld	r24, Z
    2462:	88 23       	and	r24, r24
    2464:	29 f0       	breq	.+10     	; 0x2470 <find_volume+0xb4>
    2466:	44 80       	ldd	r4, Z+4	; 0x04
    2468:	55 80       	ldd	r5, Z+5	; 0x05
    246a:	66 80       	ldd	r6, Z+6	; 0x06
    246c:	77 80       	ldd	r7, Z+7	; 0x07
    246e:	04 c0       	rjmp	.+8      	; 0x2478 <find_volume+0xbc>
    2470:	4e 2c       	mov	r4, r14
    2472:	5f 2c       	mov	r5, r15
    2474:	67 2e       	mov	r6, r23
    2476:	76 2e       	mov	r7, r22
    2478:	d9 01       	movw	r26, r18
    247a:	4d 92       	st	X+, r4
    247c:	5d 92       	st	X+, r5
    247e:	6d 92       	st	X+, r6
    2480:	7d 92       	st	X+, r7
    2482:	9d 01       	movw	r18, r26
    2484:	70 96       	adiw	r30, 0x10	; 16
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
		for (i = 0; i < 4; i++) {			/* Get partition offset */
    2486:	4e 17       	cp	r20, r30
    2488:	5f 07       	cpc	r21, r31
    248a:	51 f7       	brne	.-44     	; 0x2460 <find_volume+0xa4>
    248c:	4e 01       	movw	r8, r28
    248e:	b1 e1       	ldi	r27, 0x11	; 17
    2490:	8b 0e       	add	r8, r27
    2492:	91 1c       	adc	r9, r1
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
    2494:	68 94       	set
    2496:	77 24       	eor	r7, r7
    2498:	71 f8       	bld	r7, 1
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
    249a:	f5 01       	movw	r30, r10
    249c:	c1 90       	ld	r12, Z+
    249e:	d1 90       	ld	r13, Z+
    24a0:	e1 90       	ld	r14, Z+
    24a2:	f1 90       	ld	r15, Z+
    24a4:	5f 01       	movw	r10, r30
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
    24a6:	c1 14       	cp	r12, r1
    24a8:	d1 04       	cpc	r13, r1
    24aa:	e1 04       	cpc	r14, r1
    24ac:	f1 04       	cpc	r15, r1
    24ae:	39 f0       	breq	.+14     	; 0x24be <find_volume+0x102>
    24b0:	b7 01       	movw	r22, r14
    24b2:	a6 01       	movw	r20, r12
    24b4:	c8 01       	movw	r24, r16
    24b6:	23 df       	rcall	.-442    	; 0x22fe <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
    24b8:	81 11       	cpse	r24, r1
    24ba:	02 c0       	rjmp	.+4      	; 0x24c0 <find_volume+0x104>
    24bc:	0d c0       	rjmp	.+26     	; 0x24d8 <find_volume+0x11c>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
    24be:	87 2d       	mov	r24, r7
		} while (!LD2PT(vol) && fmt && ++i < 4);
    24c0:	a8 14       	cp	r10, r8
    24c2:	b9 04       	cpc	r11, r9
    24c4:	51 f7       	brne	.-44     	; 0x249a <find_volume+0xde>
    24c6:	03 c0       	rjmp	.+6      	; 0x24ce <find_volume+0x112>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
    24c8:	c1 2c       	mov	r12, r1
    24ca:	d1 2c       	mov	r13, r1
    24cc:	76 01       	movw	r14, r12
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
		} while (!LD2PT(vol) && fmt && ++i < 4);
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
    24ce:	83 30       	cpi	r24, 0x03	; 3
    24d0:	09 f4       	brne	.+2      	; 0x24d4 <find_volume+0x118>
    24d2:	a7 c1       	rjmp	.+846    	; 0x2822 <find_volume+0x466>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    24d4:	81 11       	cpse	r24, r1
    24d6:	a7 c1       	rjmp	.+846    	; 0x2826 <find_volume+0x46a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
    24d8:	d8 01       	movw	r26, r16
    24da:	d9 96       	adiw	r26, 0x39	; 57
    24dc:	8d 91       	ld	r24, X+
    24de:	9c 91       	ld	r25, X
    24e0:	da 97       	sbiw	r26, 0x3a	; 58
    24e2:	81 15       	cp	r24, r1
    24e4:	92 40       	sbci	r25, 0x02	; 2
    24e6:	09 f0       	breq	.+2      	; 0x24ea <find_volume+0x12e>
    24e8:	a0 c1       	rjmp	.+832    	; 0x282a <find_volume+0x46e>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
    24ea:	f8 01       	movw	r30, r16
    24ec:	ec 5b       	subi	r30, 0xBC	; 188
    24ee:	ff 4f       	sbci	r31, 0xFF	; 255
    24f0:	40 80       	ld	r4, Z
    24f2:	51 80       	ldd	r5, Z+1	; 0x01
    24f4:	61 2c       	mov	r6, r1
    24f6:	71 2c       	mov	r7, r1
	if (!fasize) fasize = LD_DWORD(fs->win + BPB_FATSz32);
    24f8:	41 14       	cp	r4, r1
    24fa:	51 04       	cpc	r5, r1
    24fc:	61 04       	cpc	r6, r1
    24fe:	71 04       	cpc	r7, r1
    2500:	29 f4       	brne	.+10     	; 0x250c <find_volume+0x150>
    2502:	3e 96       	adiw	r30, 0x0e	; 14
    2504:	40 80       	ld	r4, Z
    2506:	51 80       	ldd	r5, Z+1	; 0x01
    2508:	62 80       	ldd	r6, Z+2	; 0x02
    250a:	73 80       	ldd	r7, Z+3	; 0x03
	fs->fsize = fasize;
    250c:	f8 01       	movw	r30, r16
    250e:	46 8a       	std	Z+22, r4	; 0x16
    2510:	57 8a       	std	Z+23, r5	; 0x17
    2512:	60 8e       	std	Z+24, r6	; 0x18
    2514:	71 8e       	std	Z+25, r7	; 0x19

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
    2516:	a6 ad       	ldd	r26, Z+62	; 0x3e
    2518:	a3 83       	std	Z+3, r26	; 0x03
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
    251a:	8f ef       	ldi	r24, 0xFF	; 255
    251c:	8a 0f       	add	r24, r26
    251e:	82 30       	cpi	r24, 0x02	; 2
    2520:	08 f0       	brcs	.+2      	; 0x2524 <find_volume+0x168>
    2522:	85 c1       	rjmp	.+778    	; 0x282e <find_volume+0x472>
		return FR_NO_FILESYSTEM;
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */

	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
    2524:	f3 ad       	ldd	r31, Z+59	; 0x3b
    2526:	f9 8b       	std	Y+17, r31	; 0x11
    2528:	2f 2f       	mov	r18, r31
    252a:	f8 01       	movw	r30, r16
    252c:	22 83       	std	Z+2, r18	; 0x02
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
    252e:	22 23       	and	r18, r18
    2530:	09 f4       	brne	.+2      	; 0x2534 <find_volume+0x178>
    2532:	7f c1       	rjmp	.+766    	; 0x2832 <find_volume+0x476>
    2534:	82 2f       	mov	r24, r18
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	9c 01       	movw	r18, r24
    253a:	21 50       	subi	r18, 0x01	; 1
    253c:	31 09       	sbc	r19, r1
    253e:	82 23       	and	r24, r18
    2540:	93 23       	and	r25, r19
    2542:	89 2b       	or	r24, r25
    2544:	09 f0       	breq	.+2      	; 0x2548 <find_volume+0x18c>
    2546:	77 c1       	rjmp	.+750    	; 0x2836 <find_volume+0x47a>
		return FR_NO_FILESYSTEM;

	fs->n_rootdir = LD_WORD(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
    2548:	ff 96       	adiw	r30, 0x3f	; 63
    254a:	20 80       	ld	r2, Z
    254c:	31 80       	ldd	r3, Z+1	; 0x01
    254e:	f8 01       	movw	r30, r16
    2550:	31 86       	std	Z+9, r3	; 0x09
    2552:	20 86       	std	Z+8, r2	; 0x08
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
    2554:	c1 01       	movw	r24, r2
    2556:	8f 70       	andi	r24, 0x0F	; 15
    2558:	99 27       	eor	r25, r25
    255a:	89 2b       	or	r24, r25
    255c:	09 f0       	breq	.+2      	; 0x2560 <find_volume+0x1a4>
    255e:	6d c1       	rjmp	.+730    	; 0x283a <find_volume+0x47e>
		return FR_NO_FILESYSTEM;

	tsect = LD_WORD(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
    2560:	ef 5b       	subi	r30, 0xBF	; 191
    2562:	ff 4f       	sbci	r31, 0xFF	; 255
    2564:	80 80       	ld	r8, Z
    2566:	91 80       	ldd	r9, Z+1	; 0x01
    2568:	a1 2c       	mov	r10, r1
    256a:	b1 2c       	mov	r11, r1
	if (!tsect) tsect = LD_DWORD(fs->win + BPB_TotSec32);
    256c:	81 14       	cp	r8, r1
    256e:	91 04       	cpc	r9, r1
    2570:	a1 04       	cpc	r10, r1
    2572:	b1 04       	cpc	r11, r1
    2574:	29 f4       	brne	.+10     	; 0x2580 <find_volume+0x1c4>
    2576:	3d 96       	adiw	r30, 0x0d	; 13
    2578:	80 80       	ld	r8, Z
    257a:	91 80       	ldd	r9, Z+1	; 0x01
    257c:	a2 80       	ldd	r10, Z+2	; 0x02
    257e:	b3 80       	ldd	r11, Z+3	; 0x03

	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
    2580:	f8 01       	movw	r30, r16
    2582:	04 ac       	ldd	r0, Z+60	; 0x3c
    2584:	f5 ad       	ldd	r31, Z+61	; 0x3d
    2586:	e0 2d       	mov	r30, r0
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
    2588:	30 97       	sbiw	r30, 0x00	; 0
    258a:	09 f4       	brne	.+2      	; 0x258e <find_volume+0x1d2>
    258c:	58 c1       	rjmp	.+688    	; 0x283e <find_volume+0x482>
	fs->fsize = fasize;

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
		return FR_NO_FILESYSTEM;
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
    258e:	b0 e0       	ldi	r27, 0x00	; 0
    2590:	a3 01       	movw	r20, r6
    2592:	92 01       	movw	r18, r4
    2594:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__muluhisi3>
    2598:	6a 8f       	std	Y+26, r22	; 0x1a
    259a:	7b 8f       	std	Y+27, r23	; 0x1b
    259c:	8c 8f       	std	Y+28, r24	; 0x1c
    259e:	9d 8f       	std	Y+29, r25	; 0x1d

	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
    25a0:	9f 01       	movw	r18, r30
    25a2:	40 e0       	ldi	r20, 0x00	; 0
    25a4:	50 e0       	ldi	r21, 0x00	; 0
    25a6:	2e 8b       	std	Y+22, r18	; 0x16
    25a8:	3f 8b       	std	Y+23, r19	; 0x17
    25aa:	48 8f       	std	Y+24, r20	; 0x18
    25ac:	59 8f       	std	Y+25, r21	; 0x19
    25ae:	c1 01       	movw	r24, r2
    25b0:	92 95       	swap	r25
    25b2:	82 95       	swap	r24
    25b4:	8f 70       	andi	r24, 0x0F	; 15
    25b6:	89 27       	eor	r24, r25
    25b8:	9f 70       	andi	r25, 0x0F	; 15
    25ba:	89 27       	eor	r24, r25
    25bc:	28 0f       	add	r18, r24
    25be:	39 1f       	adc	r19, r25
    25c0:	41 1d       	adc	r20, r1
    25c2:	51 1d       	adc	r21, r1
    25c4:	da 01       	movw	r26, r20
    25c6:	c9 01       	movw	r24, r18
    25c8:	2a 8d       	ldd	r18, Y+26	; 0x1a
    25ca:	3b 8d       	ldd	r19, Y+27	; 0x1b
    25cc:	4c 8d       	ldd	r20, Y+28	; 0x1c
    25ce:	5d 8d       	ldd	r21, Y+29	; 0x1d
    25d0:	28 0f       	add	r18, r24
    25d2:	39 1f       	adc	r19, r25
    25d4:	4a 1f       	adc	r20, r26
    25d6:	5b 1f       	adc	r21, r27
    25d8:	2a 8b       	std	Y+18, r18	; 0x12
    25da:	3b 8b       	std	Y+19, r19	; 0x13
    25dc:	4c 8b       	std	Y+20, r20	; 0x14
    25de:	5d 8b       	std	Y+21, r21	; 0x15
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    25e0:	82 16       	cp	r8, r18
    25e2:	93 06       	cpc	r9, r19
    25e4:	a4 06       	cpc	r10, r20
    25e6:	b5 06       	cpc	r11, r21
    25e8:	08 f4       	brcc	.+2      	; 0x25ec <find_volume+0x230>
    25ea:	2b c1       	rjmp	.+598    	; 0x2842 <find_volume+0x486>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    25ec:	c5 01       	movw	r24, r10
    25ee:	b4 01       	movw	r22, r8
    25f0:	62 1b       	sub	r22, r18
    25f2:	73 0b       	sbc	r23, r19
    25f4:	84 0b       	sbc	r24, r20
    25f6:	95 0b       	sbc	r25, r21
    25f8:	e9 89       	ldd	r30, Y+17	; 0x11
    25fa:	2e 2f       	mov	r18, r30
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	40 e0       	ldi	r20, 0x00	; 0
    2600:	50 e0       	ldi	r21, 0x00	; 0
    2602:	0e 94 f8 2d 	call	0x5bf0	; 0x5bf0 <__udivmodsi4>
    2606:	da 01       	movw	r26, r20
    2608:	c9 01       	movw	r24, r18
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    260a:	21 15       	cp	r18, r1
    260c:	31 05       	cpc	r19, r1
    260e:	41 05       	cpc	r20, r1
    2610:	51 05       	cpc	r21, r1
    2612:	09 f4       	brne	.+2      	; 0x2616 <find_volume+0x25a>
    2614:	18 c1       	rjmp	.+560    	; 0x2846 <find_volume+0x48a>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    2616:	26 3f       	cpi	r18, 0xF6	; 246
    2618:	ff e0       	ldi	r31, 0x0F	; 15
    261a:	3f 07       	cpc	r19, r31
    261c:	41 05       	cpc	r20, r1
    261e:	51 05       	cpc	r21, r1
    2620:	18 f0       	brcs	.+6      	; 0x2628 <find_volume+0x26c>
    2622:	e2 e0       	ldi	r30, 0x02	; 2
    2624:	e9 8b       	std	Y+17, r30	; 0x11
    2626:	02 c0       	rjmp	.+4      	; 0x262c <find_volume+0x270>
	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
    2628:	f1 e0       	ldi	r31, 0x01	; 1
    262a:	f9 8b       	std	Y+17, r31	; 0x11
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    262c:	86 3f       	cpi	r24, 0xF6	; 246
    262e:	9f 4f       	sbci	r25, 0xFF	; 255
    2630:	a1 05       	cpc	r26, r1
    2632:	b1 05       	cpc	r27, r1
    2634:	08 f0       	brcs	.+2      	; 0x2638 <find_volume+0x27c>
    2636:	28 c1       	rjmp	.+592    	; 0x2888 <find_volume+0x4cc>

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    2638:	49 01       	movw	r8, r18
    263a:	5a 01       	movw	r10, r20
    263c:	82 e0       	ldi	r24, 0x02	; 2
    263e:	88 0e       	add	r8, r24
    2640:	91 1c       	adc	r9, r1
    2642:	a1 1c       	adc	r10, r1
    2644:	b1 1c       	adc	r11, r1
    2646:	d8 01       	movw	r26, r16
    2648:	52 96       	adiw	r26, 0x12	; 18
    264a:	8d 92       	st	X+, r8
    264c:	9d 92       	st	X+, r9
    264e:	ad 92       	st	X+, r10
    2650:	bc 92       	st	X, r11
    2652:	55 97       	sbiw	r26, 0x15	; 21
	fs->volbase = bsect;								/* Volume start sector */
    2654:	f8 01       	movw	r30, r16
    2656:	c2 8e       	std	Z+26, r12	; 0x1a
    2658:	d3 8e       	std	Z+27, r13	; 0x1b
    265a:	e4 8e       	std	Z+28, r14	; 0x1c
    265c:	f5 8e       	std	Z+29, r15	; 0x1d
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    265e:	8e 89       	ldd	r24, Y+22	; 0x16
    2660:	9f 89       	ldd	r25, Y+23	; 0x17
    2662:	a8 8d       	ldd	r26, Y+24	; 0x18
    2664:	b9 8d       	ldd	r27, Y+25	; 0x19
    2666:	8c 0d       	add	r24, r12
    2668:	9d 1d       	adc	r25, r13
    266a:	ae 1d       	adc	r26, r14
    266c:	bf 1d       	adc	r27, r15
    266e:	86 8f       	std	Z+30, r24	; 0x1e
    2670:	97 8f       	std	Z+31, r25	; 0x1f
    2672:	a0 a3       	std	Z+32, r26	; 0x20
    2674:	b1 a3       	std	Z+33, r27	; 0x21
	fs->database = bsect + sysect;						/* Data start sector */
    2676:	4a 89       	ldd	r20, Y+18	; 0x12
    2678:	5b 89       	ldd	r21, Y+19	; 0x13
    267a:	6c 89       	ldd	r22, Y+20	; 0x14
    267c:	7d 89       	ldd	r23, Y+21	; 0x15
    267e:	4c 0d       	add	r20, r12
    2680:	5d 1d       	adc	r21, r13
    2682:	6e 1d       	adc	r22, r14
    2684:	7f 1d       	adc	r23, r15
    2686:	46 a3       	std	Z+38, r20	; 0x26
    2688:	57 a3       	std	Z+39, r21	; 0x27
    268a:	60 a7       	std	Z+40, r22	; 0x28
    268c:	71 a7       	std	Z+41, r23	; 0x29
	if (fmt == FS_FAT32) {
    268e:	f9 89       	ldd	r31, Y+17	; 0x11
    2690:	f3 30       	cpi	r31, 0x03	; 3
    2692:	69 f5       	brne	.+90     	; 0x26ee <find_volume+0x332>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    2694:	23 28       	or	r2, r3
    2696:	09 f0       	breq	.+2      	; 0x269a <find_volume+0x2de>
    2698:	d8 c0       	rjmp	.+432    	; 0x284a <find_volume+0x48e>
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
    269a:	f8 01       	movw	r30, r16
    269c:	e6 5a       	subi	r30, 0xA6	; 166
    269e:	ff 4f       	sbci	r31, 0xFF	; 255
    26a0:	80 81       	ld	r24, Z
    26a2:	91 81       	ldd	r25, Z+1	; 0x01
    26a4:	a2 81       	ldd	r26, Z+2	; 0x02
    26a6:	b3 81       	ldd	r27, Z+3	; 0x03
    26a8:	f8 01       	movw	r30, r16
    26aa:	82 a3       	std	Z+34, r24	; 0x22
    26ac:	93 a3       	std	Z+35, r25	; 0x23
    26ae:	a4 a3       	std	Z+36, r26	; 0x24
    26b0:	b5 a3       	std	Z+37, r27	; 0x25
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
    26b2:	88 0c       	add	r8, r8
    26b4:	99 1c       	adc	r9, r9
    26b6:	aa 1c       	adc	r10, r10
    26b8:	bb 1c       	adc	r11, r11
    26ba:	88 0c       	add	r8, r8
    26bc:	99 1c       	adc	r9, r9
    26be:	aa 1c       	adc	r10, r10
    26c0:	bb 1c       	adc	r11, r11
    26c2:	ff ef       	ldi	r31, 0xFF	; 255
    26c4:	8f 0e       	add	r8, r31
    26c6:	f1 e0       	ldi	r31, 0x01	; 1
    26c8:	9f 1e       	adc	r9, r31
    26ca:	a1 1c       	adc	r10, r1
    26cc:	b1 1c       	adc	r11, r1
    26ce:	07 2e       	mov	r0, r23
    26d0:	79 e0       	ldi	r23, 0x09	; 9
    26d2:	b6 94       	lsr	r11
    26d4:	a7 94       	ror	r10
    26d6:	97 94       	ror	r9
    26d8:	87 94       	ror	r8
    26da:	7a 95       	dec	r23
    26dc:	d1 f7       	brne	.-12     	; 0x26d2 <find_volume+0x316>
    26de:	70 2d       	mov	r23, r0
    26e0:	48 14       	cp	r4, r8
    26e2:	59 04       	cpc	r5, r9
    26e4:	6a 04       	cpc	r6, r10
    26e6:	7b 04       	cpc	r7, r11
    26e8:	08 f4       	brcc	.+2      	; 0x26ec <find_volume+0x330>
    26ea:	b1 c0       	rjmp	.+354    	; 0x284e <find_volume+0x492>
    26ec:	f9 c0       	rjmp	.+498    	; 0x28e0 <find_volume+0x524>
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    26ee:	23 28       	or	r2, r3
    26f0:	09 f4       	brne	.+2      	; 0x26f4 <find_volume+0x338>
    26f2:	af c0       	rjmp	.+350    	; 0x2852 <find_volume+0x496>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    26f4:	2a 8d       	ldd	r18, Y+26	; 0x1a
    26f6:	3b 8d       	ldd	r19, Y+27	; 0x1b
    26f8:	4c 8d       	ldd	r20, Y+28	; 0x1c
    26fa:	5d 8d       	ldd	r21, Y+29	; 0x1d
    26fc:	82 0f       	add	r24, r18
    26fe:	93 1f       	adc	r25, r19
    2700:	a4 1f       	adc	r26, r20
    2702:	b5 1f       	adc	r27, r21
    2704:	f8 01       	movw	r30, r16
    2706:	82 a3       	std	Z+34, r24	; 0x22
    2708:	93 a3       	std	Z+35, r25	; 0x23
    270a:	a4 a3       	std	Z+36, r26	; 0x24
    270c:	b5 a3       	std	Z+37, r27	; 0x25
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    270e:	f9 89       	ldd	r31, Y+17	; 0x11
    2710:	f2 30       	cpi	r31, 0x02	; 2
    2712:	29 f4       	brne	.+10     	; 0x271e <find_volume+0x362>
    2714:	88 0c       	add	r8, r8
    2716:	99 1c       	adc	r9, r9
    2718:	aa 1c       	adc	r10, r10
    271a:	bb 1c       	adc	r11, r11
    271c:	08 c1       	rjmp	.+528    	; 0x292e <find_volume+0x572>
    271e:	a3 e0       	ldi	r26, 0x03	; 3
    2720:	b0 e0       	ldi	r27, 0x00	; 0
    2722:	a5 01       	movw	r20, r10
    2724:	94 01       	movw	r18, r8
    2726:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__muluhisi3>
    272a:	dc 01       	movw	r26, r24
    272c:	cb 01       	movw	r24, r22
    272e:	b6 95       	lsr	r27
    2730:	a7 95       	ror	r26
    2732:	97 95       	ror	r25
    2734:	87 95       	ror	r24
    2736:	21 e0       	ldi	r18, 0x01	; 1
    2738:	82 22       	and	r8, r18
    273a:	99 24       	eor	r9, r9
    273c:	aa 24       	eor	r10, r10
    273e:	bb 24       	eor	r11, r11
    2740:	88 0e       	add	r8, r24
    2742:	99 1e       	adc	r9, r25
    2744:	aa 1e       	adc	r10, r26
    2746:	bb 1e       	adc	r11, r27
    2748:	f2 c0       	rjmp	.+484    	; 0x292e <find_volume+0x572>
	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
		&& LD_WORD(fs->win + BPB_FSInfo) == 1
		&& move_window(fs, bsect + 1) == FR_OK)
    274a:	b7 01       	movw	r22, r14
    274c:	a6 01       	movw	r20, r12
    274e:	4f 5f       	subi	r20, 0xFF	; 255
    2750:	5f 4f       	sbci	r21, 0xFF	; 255
    2752:	6f 4f       	sbci	r22, 0xFF	; 255
    2754:	7f 4f       	sbci	r23, 0xFF	; 255
    2756:	c8 01       	movw	r24, r16
    2758:	95 dd       	rcall	.-1238   	; 0x2284 <move_window>
    275a:	81 11       	cpse	r24, r1
    275c:	39 c0       	rjmp	.+114    	; 0x27d0 <find_volume+0x414>
	{
		fs->fsi_flag = 0;
    275e:	d8 01       	movw	r26, r16
    2760:	15 96       	adiw	r26, 0x05	; 5
    2762:	1c 92       	st	X, r1
		if (LD_WORD(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
    2764:	f8 01       	movw	r30, r16
    2766:	e4 5d       	subi	r30, 0xD4	; 212
    2768:	fd 4f       	sbci	r31, 0xFD	; 253
    276a:	80 81       	ld	r24, Z
    276c:	91 81       	ldd	r25, Z+1	; 0x01
    276e:	85 35       	cpi	r24, 0x55	; 85
    2770:	9a 4a       	sbci	r25, 0xAA	; 170
    2772:	89 f5       	brne	.+98     	; 0x27d6 <find_volume+0x41a>
			&& LD_DWORD(fs->win + FSI_LeadSig) == 0x41615252
    2774:	f8 01       	movw	r30, r16
    2776:	86 a5       	ldd	r24, Z+46	; 0x2e
    2778:	97 a5       	ldd	r25, Z+47	; 0x2f
    277a:	a0 a9       	ldd	r26, Z+48	; 0x30
    277c:	b1 a9       	ldd	r27, Z+49	; 0x31
    277e:	82 35       	cpi	r24, 0x52	; 82
    2780:	92 45       	sbci	r25, 0x52	; 82
    2782:	a1 46       	sbci	r26, 0x61	; 97
    2784:	b1 44       	sbci	r27, 0x41	; 65
    2786:	51 f5       	brne	.+84     	; 0x27dc <find_volume+0x420>
			&& LD_DWORD(fs->win + FSI_StrucSig) == 0x61417272)
    2788:	f8 01       	movw	r30, r16
    278a:	ee 5e       	subi	r30, 0xEE	; 238
    278c:	fd 4f       	sbci	r31, 0xFD	; 253
    278e:	80 81       	ld	r24, Z
    2790:	91 81       	ldd	r25, Z+1	; 0x01
    2792:	a2 81       	ldd	r26, Z+2	; 0x02
    2794:	b3 81       	ldd	r27, Z+3	; 0x03
    2796:	82 37       	cpi	r24, 0x72	; 114
    2798:	92 47       	sbci	r25, 0x72	; 114
    279a:	a1 44       	sbci	r26, 0x41	; 65
    279c:	b1 46       	sbci	r27, 0x61	; 97
    279e:	09 f5       	brne	.+66     	; 0x27e2 <find_volume+0x426>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win + FSI_Free_Count);
    27a0:	34 96       	adiw	r30, 0x04	; 4
    27a2:	80 81       	ld	r24, Z
    27a4:	91 81       	ldd	r25, Z+1	; 0x01
    27a6:	a2 81       	ldd	r26, Z+2	; 0x02
    27a8:	b3 81       	ldd	r27, Z+3	; 0x03
    27aa:	f8 01       	movw	r30, r16
    27ac:	86 87       	std	Z+14, r24	; 0x0e
    27ae:	97 87       	std	Z+15, r25	; 0x0f
    27b0:	a0 8b       	std	Z+16, r26	; 0x10
    27b2:	b1 8b       	std	Z+17, r27	; 0x11
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win + FSI_Nxt_Free);
    27b4:	e6 5e       	subi	r30, 0xE6	; 230
    27b6:	fd 4f       	sbci	r31, 0xFD	; 253
    27b8:	80 81       	ld	r24, Z
    27ba:	91 81       	ldd	r25, Z+1	; 0x01
    27bc:	a2 81       	ldd	r26, Z+2	; 0x02
    27be:	b3 81       	ldd	r27, Z+3	; 0x03
    27c0:	f8 01       	movw	r30, r16
    27c2:	82 87       	std	Z+10, r24	; 0x0a
    27c4:	93 87       	std	Z+11, r25	; 0x0b
    27c6:	a4 87       	std	Z+12, r26	; 0x0c
    27c8:	b5 87       	std	Z+13, r27	; 0x0d
    27ca:	f3 e0       	ldi	r31, 0x03	; 3
    27cc:	f9 8b       	std	Y+17, r31	; 0x11
    27ce:	0b c0       	rjmp	.+22     	; 0x27e6 <find_volume+0x42a>
    27d0:	e3 e0       	ldi	r30, 0x03	; 3
    27d2:	e9 8b       	std	Y+17, r30	; 0x11
    27d4:	08 c0       	rjmp	.+16     	; 0x27e6 <find_volume+0x42a>
    27d6:	f3 e0       	ldi	r31, 0x03	; 3
    27d8:	f9 8b       	std	Y+17, r31	; 0x11
    27da:	05 c0       	rjmp	.+10     	; 0x27e6 <find_volume+0x42a>
    27dc:	e3 e0       	ldi	r30, 0x03	; 3
    27de:	e9 8b       	std	Y+17, r30	; 0x11
    27e0:	02 c0       	rjmp	.+4      	; 0x27e6 <find_volume+0x42a>
    27e2:	f3 e0       	ldi	r31, 0x03	; 3
    27e4:	f9 8b       	std	Y+17, r31	; 0x11
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
    27e6:	e9 89       	ldd	r30, Y+17	; 0x11
    27e8:	d8 01       	movw	r26, r16
    27ea:	ec 93       	st	X, r30
	fs->id = ++Fsid;	/* File system mount ID */
    27ec:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <Fsid>
    27f0:	90 91 8c 03 	lds	r25, 0x038C	; 0x80038c <Fsid+0x1>
    27f4:	01 96       	adiw	r24, 0x01	; 1
    27f6:	90 93 8c 03 	sts	0x038C, r25	; 0x80038c <Fsid+0x1>
    27fa:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <Fsid>
    27fe:	17 96       	adiw	r26, 0x07	; 7
    2800:	9c 93       	st	X, r25
    2802:	8e 93       	st	-X, r24
    2804:	16 97       	sbiw	r26, 0x06	; 6
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
    2806:	80 e0       	ldi	r24, 0x00	; 0
    2808:	a8 c0       	rjmp	.+336    	; 0x295a <find_volume+0x59e>


	/* Get logical drive number from the path name */
	*rfs = 0;
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
    280a:	8b e0       	ldi	r24, 0x0B	; 11
    280c:	a6 c0       	rjmp	.+332    	; 0x295a <find_volume+0x59e>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    280e:	8c e0       	ldi	r24, 0x0C	; 12
    2810:	a4 c0       	rjmp	.+328    	; 0x295a <find_volume+0x59e>
	if (fs->fs_type) {					/* If the volume has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
    2812:	80 e0       	ldi	r24, 0x00	; 0
    2814:	a2 c0       	rjmp	.+324    	; 0x295a <find_volume+0x59e>
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	a0 c0       	rjmp	.+320    	; 0x295a <find_volume+0x59e>

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
    281a:	83 e0       	ldi	r24, 0x03	; 3
    281c:	9e c0       	rjmp	.+316    	; 0x295a <find_volume+0x59e>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
    281e:	8a e0       	ldi	r24, 0x0A	; 10
    2820:	9c c0       	rjmp	.+312    	; 0x295a <find_volume+0x59e>
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
		} while (!LD2PT(vol) && fmt && ++i < 4);
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	9a c0       	rjmp	.+308    	; 0x295a <find_volume+0x59e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    2826:	8d e0       	ldi	r24, 0x0D	; 13
    2828:	98 c0       	rjmp	.+304    	; 0x295a <find_volume+0x59e>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
		return FR_NO_FILESYSTEM;
    282a:	8d e0       	ldi	r24, 0x0D	; 13
    282c:	96 c0       	rjmp	.+300    	; 0x295a <find_volume+0x59e>
	if (!fasize) fasize = LD_DWORD(fs->win + BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
		return FR_NO_FILESYSTEM;
    282e:	8d e0       	ldi	r24, 0x0D	; 13
    2830:	94 c0       	rjmp	.+296    	; 0x295a <find_volume+0x59e>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */

	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
		return FR_NO_FILESYSTEM;
    2832:	8d e0       	ldi	r24, 0x0D	; 13
    2834:	92 c0       	rjmp	.+292    	; 0x295a <find_volume+0x59e>
    2836:	8d e0       	ldi	r24, 0x0D	; 13
    2838:	90 c0       	rjmp	.+288    	; 0x295a <find_volume+0x59e>

	fs->n_rootdir = LD_WORD(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
		return FR_NO_FILESYSTEM;
    283a:	8d e0       	ldi	r24, 0x0D	; 13
    283c:	8e c0       	rjmp	.+284    	; 0x295a <find_volume+0x59e>

	tsect = LD_WORD(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
	if (!tsect) tsect = LD_DWORD(fs->win + BPB_TotSec32);

	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
    283e:	8d e0       	ldi	r24, 0x0D	; 13
    2840:	8c c0       	rjmp	.+280    	; 0x295a <find_volume+0x59e>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    2842:	8d e0       	ldi	r24, 0x0D	; 13
    2844:	8a c0       	rjmp	.+276    	; 0x295a <find_volume+0x59e>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    2846:	8d e0       	ldi	r24, 0x0D	; 13
    2848:	88 c0       	rjmp	.+272    	; 0x295a <find_volume+0x59e>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
	fs->volbase = bsect;								/* Volume start sector */
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
	fs->database = bsect + sysect;						/* Data start sector */
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    284a:	8d e0       	ldi	r24, 0x0D	; 13
    284c:	86 c0       	rjmp	.+268    	; 0x295a <find_volume+0x59e>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
		return FR_NO_FILESYSTEM;
    284e:	8d e0       	ldi	r24, 0x0D	; 13
    2850:	84 c0       	rjmp	.+264    	; 0x295a <find_volume+0x59e>
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    2852:	8d e0       	ldi	r24, 0x0D	; 13
    2854:	82 c0       	rjmp	.+260    	; 0x295a <find_volume+0x59e>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
		return FR_NO_FILESYSTEM;
    2856:	8d e0       	ldi	r24, 0x0D	; 13
    2858:	80 c0       	rjmp	.+256    	; 0x295a <find_volume+0x59e>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
    285a:	40 e0       	ldi	r20, 0x00	; 0
    285c:	50 e0       	ldi	r21, 0x00	; 0
    285e:	ba 01       	movw	r22, r20
    2860:	c8 01       	movw	r24, r16
    2862:	4d dd       	rcall	.-1382   	; 0x22fe <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
    2864:	81 30       	cpi	r24, 0x01	; 1
    2866:	09 f0       	breq	.+2      	; 0x286a <find_volume+0x4ae>
    2868:	2f ce       	rjmp	.-930    	; 0x24c8 <find_volume+0x10c>
    286a:	f8 01       	movw	r30, r16
    286c:	e0 51       	subi	r30, 0x10	; 16
    286e:	fe 4f       	sbci	r31, 0xFE	; 254
    2870:	9e 01       	movw	r18, r28
    2872:	2f 5f       	subi	r18, 0xFF	; 255
    2874:	3f 4f       	sbci	r19, 0xFF	; 255
    2876:	59 01       	movw	r10, r18
    2878:	a8 01       	movw	r20, r16
    287a:	40 5d       	subi	r20, 0xD0	; 208
    287c:	5d 4f       	sbci	r21, 0xFD	; 253
		for (i = 0; i < 4; i++) {			/* Get partition offset */
			pt = fs->win + MBR_Table + i * SZ_PTE;
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
    287e:	e1 2c       	mov	r14, r1
    2880:	f1 2c       	mov	r15, r1
    2882:	70 e0       	ldi	r23, 0x00	; 0
    2884:	60 e0       	ldi	r22, 0x00	; 0
    2886:	ec cd       	rjmp	.-1064   	; 0x2460 <find_volume+0xa4>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    2888:	49 01       	movw	r8, r18
    288a:	5a 01       	movw	r10, r20
    288c:	62 e0       	ldi	r22, 0x02	; 2
    288e:	86 0e       	add	r8, r22
    2890:	91 1c       	adc	r9, r1
    2892:	a1 1c       	adc	r10, r1
    2894:	b1 1c       	adc	r11, r1
    2896:	d8 01       	movw	r26, r16
    2898:	52 96       	adiw	r26, 0x12	; 18
    289a:	8d 92       	st	X+, r8
    289c:	9d 92       	st	X+, r9
    289e:	ad 92       	st	X+, r10
    28a0:	bc 92       	st	X, r11
    28a2:	55 97       	sbiw	r26, 0x15	; 21
	fs->volbase = bsect;								/* Volume start sector */
    28a4:	f8 01       	movw	r30, r16
    28a6:	c2 8e       	std	Z+26, r12	; 0x1a
    28a8:	d3 8e       	std	Z+27, r13	; 0x1b
    28aa:	e4 8e       	std	Z+28, r14	; 0x1c
    28ac:	f5 8e       	std	Z+29, r15	; 0x1d
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    28ae:	8e 89       	ldd	r24, Y+22	; 0x16
    28b0:	9f 89       	ldd	r25, Y+23	; 0x17
    28b2:	a8 8d       	ldd	r26, Y+24	; 0x18
    28b4:	b9 8d       	ldd	r27, Y+25	; 0x19
    28b6:	8c 0d       	add	r24, r12
    28b8:	9d 1d       	adc	r25, r13
    28ba:	ae 1d       	adc	r26, r14
    28bc:	bf 1d       	adc	r27, r15
    28be:	86 8f       	std	Z+30, r24	; 0x1e
    28c0:	97 8f       	std	Z+31, r25	; 0x1f
    28c2:	a0 a3       	std	Z+32, r26	; 0x20
    28c4:	b1 a3       	std	Z+33, r27	; 0x21
	fs->database = bsect + sysect;						/* Data start sector */
    28c6:	8a 89       	ldd	r24, Y+18	; 0x12
    28c8:	9b 89       	ldd	r25, Y+19	; 0x13
    28ca:	ac 89       	ldd	r26, Y+20	; 0x14
    28cc:	bd 89       	ldd	r27, Y+21	; 0x15
    28ce:	8c 0d       	add	r24, r12
    28d0:	9d 1d       	adc	r25, r13
    28d2:	ae 1d       	adc	r26, r14
    28d4:	bf 1d       	adc	r27, r15
    28d6:	86 a3       	std	Z+38, r24	; 0x26
    28d8:	97 a3       	std	Z+39, r25	; 0x27
    28da:	a0 a7       	std	Z+40, r26	; 0x28
    28dc:	b1 a7       	std	Z+41, r27	; 0x29
    28de:	da ce       	rjmp	.-588    	; 0x2694 <find_volume+0x2d8>
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
    28e0:	8f ef       	ldi	r24, 0xFF	; 255
    28e2:	9f ef       	ldi	r25, 0xFF	; 255
    28e4:	dc 01       	movw	r26, r24
    28e6:	f8 01       	movw	r30, r16
    28e8:	86 87       	std	Z+14, r24	; 0x0e
    28ea:	97 87       	std	Z+15, r25	; 0x0f
    28ec:	a0 8b       	std	Z+16, r26	; 0x10
    28ee:	b1 8b       	std	Z+17, r27	; 0x11
    28f0:	82 87       	std	Z+10, r24	; 0x0a
    28f2:	93 87       	std	Z+11, r25	; 0x0b
    28f4:	a4 87       	std	Z+12, r26	; 0x0c
    28f6:	b5 87       	std	Z+13, r27	; 0x0d

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
    28f8:	80 e8       	ldi	r24, 0x80	; 128
    28fa:	85 83       	std	Z+5, r24	; 0x05
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
		&& LD_WORD(fs->win + BPB_FSInfo) == 1
    28fc:	e2 5a       	subi	r30, 0xA2	; 162
    28fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2900:	80 81       	ld	r24, Z
    2902:	91 81       	ldd	r25, Z+1	; 0x01
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	09 f4       	brne	.+2      	; 0x290a <find_volume+0x54e>
    2908:	20 cf       	rjmp	.-448    	; 0x274a <find_volume+0x38e>
    290a:	f3 e0       	ldi	r31, 0x03	; 3
    290c:	f9 8b       	std	Y+17, r31	; 0x11
    290e:	6b cf       	rjmp	.-298    	; 0x27e6 <find_volume+0x42a>
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
    2910:	8f ef       	ldi	r24, 0xFF	; 255
    2912:	9f ef       	ldi	r25, 0xFF	; 255
    2914:	dc 01       	movw	r26, r24
    2916:	f8 01       	movw	r30, r16
    2918:	86 87       	std	Z+14, r24	; 0x0e
    291a:	97 87       	std	Z+15, r25	; 0x0f
    291c:	a0 8b       	std	Z+16, r26	; 0x10
    291e:	b1 8b       	std	Z+17, r27	; 0x11
    2920:	82 87       	std	Z+10, r24	; 0x0a
    2922:	93 87       	std	Z+11, r25	; 0x0b
    2924:	a4 87       	std	Z+12, r26	; 0x0c
    2926:	b5 87       	std	Z+13, r27	; 0x0d

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
    2928:	80 e8       	ldi	r24, 0x80	; 128
    292a:	85 83       	std	Z+5, r24	; 0x05
    292c:	5c cf       	rjmp	.-328    	; 0x27e6 <find_volume+0x42a>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
    292e:	ff ef       	ldi	r31, 0xFF	; 255
    2930:	8f 0e       	add	r8, r31
    2932:	f1 e0       	ldi	r31, 0x01	; 1
    2934:	9f 1e       	adc	r9, r31
    2936:	a1 1c       	adc	r10, r1
    2938:	b1 1c       	adc	r11, r1
    293a:	07 2e       	mov	r0, r23
    293c:	79 e0       	ldi	r23, 0x09	; 9
    293e:	b6 94       	lsr	r11
    2940:	a7 94       	ror	r10
    2942:	97 94       	ror	r9
    2944:	87 94       	ror	r8
    2946:	7a 95       	dec	r23
    2948:	d1 f7       	brne	.-12     	; 0x293e <find_volume+0x582>
    294a:	70 2d       	mov	r23, r0
    294c:	48 14       	cp	r4, r8
    294e:	59 04       	cpc	r5, r9
    2950:	6a 04       	cpc	r6, r10
    2952:	7b 04       	cpc	r7, r11
    2954:	08 f4       	brcc	.+2      	; 0x2958 <find_volume+0x59c>
    2956:	7f cf       	rjmp	.-258    	; 0x2856 <find_volume+0x49a>
    2958:	db cf       	rjmp	.-74     	; 0x2910 <find_volume+0x554>
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
}
    295a:	6d 96       	adiw	r28, 0x1d	; 29
    295c:	0f b6       	in	r0, 0x3f	; 63
    295e:	f8 94       	cli
    2960:	de bf       	out	0x3e, r29	; 62
    2962:	0f be       	out	0x3f, r0	; 63
    2964:	cd bf       	out	0x3d, r28	; 61
    2966:	df 91       	pop	r29
    2968:	cf 91       	pop	r28
    296a:	1f 91       	pop	r17
    296c:	0f 91       	pop	r16
    296e:	ff 90       	pop	r15
    2970:	ef 90       	pop	r14
    2972:	df 90       	pop	r13
    2974:	cf 90       	pop	r12
    2976:	bf 90       	pop	r11
    2978:	af 90       	pop	r10
    297a:	9f 90       	pop	r9
    297c:	8f 90       	pop	r8
    297e:	7f 90       	pop	r7
    2980:	6f 90       	pop	r6
    2982:	5f 90       	pop	r5
    2984:	4f 90       	pop	r4
    2986:	3f 90       	pop	r3
    2988:	2f 90       	pop	r2
    298a:	08 95       	ret

0000298c <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    298c:	0f 93       	push	r16
    298e:	1f 93       	push	r17
    2990:	fc 01       	movw	r30, r24
	clst -= 2;
    2992:	9a 01       	movw	r18, r20
    2994:	ab 01       	movw	r20, r22
    2996:	22 50       	subi	r18, 0x02	; 2
    2998:	31 09       	sbc	r19, r1
    299a:	41 09       	sbc	r20, r1
    299c:	51 09       	sbc	r21, r1
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    299e:	82 89       	ldd	r24, Z+18	; 0x12
    29a0:	93 89       	ldd	r25, Z+19	; 0x13
    29a2:	a4 89       	ldd	r26, Z+20	; 0x14
    29a4:	b5 89       	ldd	r27, Z+21	; 0x15
    29a6:	02 97       	sbiw	r24, 0x02	; 2
    29a8:	a1 09       	sbc	r26, r1
    29aa:	b1 09       	sbc	r27, r1
    29ac:	28 17       	cp	r18, r24
    29ae:	39 07       	cpc	r19, r25
    29b0:	4a 07       	cpc	r20, r26
    29b2:	5b 07       	cpc	r21, r27
    29b4:	68 f4       	brcc	.+26     	; 0x29d0 <clust2sect+0x44>
	return clst * fs->csize + fs->database;
    29b6:	a2 81       	ldd	r26, Z+2	; 0x02
    29b8:	b0 e0       	ldi	r27, 0x00	; 0
    29ba:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__muluhisi3>
    29be:	06 a1       	ldd	r16, Z+38	; 0x26
    29c0:	17 a1       	ldd	r17, Z+39	; 0x27
    29c2:	20 a5       	ldd	r18, Z+40	; 0x28
    29c4:	31 a5       	ldd	r19, Z+41	; 0x29
    29c6:	60 0f       	add	r22, r16
    29c8:	71 1f       	adc	r23, r17
    29ca:	82 1f       	adc	r24, r18
    29cc:	93 1f       	adc	r25, r19
    29ce:	03 c0       	rjmp	.+6      	; 0x29d6 <clust2sect+0x4a>
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    29d0:	60 e0       	ldi	r22, 0x00	; 0
    29d2:	70 e0       	ldi	r23, 0x00	; 0
    29d4:	cb 01       	movw	r24, r22
	return clst * fs->csize + fs->database;
}
    29d6:	1f 91       	pop	r17
    29d8:	0f 91       	pop	r16
    29da:	08 95       	ret

000029dc <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
    29dc:	af 92       	push	r10
    29de:	bf 92       	push	r11
    29e0:	cf 92       	push	r12
    29e2:	df 92       	push	r13
    29e4:	ef 92       	push	r14
    29e6:	ff 92       	push	r15
    29e8:	0f 93       	push	r16
    29ea:	1f 93       	push	r17
    29ec:	cf 93       	push	r28
    29ee:	df 93       	push	r29
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    29f0:	42 30       	cpi	r20, 0x02	; 2
    29f2:	51 05       	cpc	r21, r1
    29f4:	61 05       	cpc	r22, r1
    29f6:	71 05       	cpc	r23, r1
    29f8:	08 f4       	brcc	.+2      	; 0x29fc <get_fat+0x20>
    29fa:	aa c0       	rjmp	.+340    	; 0x2b50 <get_fat+0x174>
    29fc:	fc 01       	movw	r30, r24
    29fe:	c2 88       	ldd	r12, Z+18	; 0x12
    2a00:	d3 88       	ldd	r13, Z+19	; 0x13
    2a02:	e4 88       	ldd	r14, Z+20	; 0x14
    2a04:	f5 88       	ldd	r15, Z+21	; 0x15
    2a06:	4c 15       	cp	r20, r12
    2a08:	5d 05       	cpc	r21, r13
    2a0a:	6e 05       	cpc	r22, r14
    2a0c:	7f 05       	cpc	r23, r15
    2a0e:	08 f0       	brcs	.+2      	; 0x2a12 <get_fat+0x36>
    2a10:	a4 c0       	rjmp	.+328    	; 0x2b5a <get_fat+0x17e>
    2a12:	6a 01       	movw	r12, r20
    2a14:	7b 01       	movw	r14, r22
    2a16:	ec 01       	movw	r28, r24
		val = 1;	/* Internal error */

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */

		switch (fs->fs_type) {
    2a18:	80 81       	ld	r24, Z
    2a1a:	82 30       	cpi	r24, 0x02	; 2
    2a1c:	09 f4       	brne	.+2      	; 0x2a20 <get_fat+0x44>
    2a1e:	4b c0       	rjmp	.+150    	; 0x2ab6 <get_fat+0xda>
    2a20:	83 30       	cpi	r24, 0x03	; 3
    2a22:	09 f4       	brne	.+2      	; 0x2a26 <get_fat+0x4a>
    2a24:	69 c0       	rjmp	.+210    	; 0x2af8 <get_fat+0x11c>
    2a26:	81 30       	cpi	r24, 0x01	; 1
    2a28:	09 f0       	breq	.+2      	; 0x2a2c <get_fat+0x50>
    2a2a:	9c c0       	rjmp	.+312    	; 0x2b64 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
    2a2c:	8a 01       	movw	r16, r20
    2a2e:	16 95       	lsr	r17
    2a30:	07 95       	ror	r16
    2a32:	04 0f       	add	r16, r20
    2a34:	15 1f       	adc	r17, r21
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    2a36:	c8 01       	movw	r24, r16
    2a38:	89 2f       	mov	r24, r25
    2a3a:	99 27       	eor	r25, r25
    2a3c:	86 95       	lsr	r24
    2a3e:	46 8d       	ldd	r20, Z+30	; 0x1e
    2a40:	57 8d       	ldd	r21, Z+31	; 0x1f
    2a42:	60 a1       	ldd	r22, Z+32	; 0x20
    2a44:	71 a1       	ldd	r23, Z+33	; 0x21
    2a46:	48 0f       	add	r20, r24
    2a48:	59 1f       	adc	r21, r25
    2a4a:	61 1d       	adc	r22, r1
    2a4c:	71 1d       	adc	r23, r1
    2a4e:	cf 01       	movw	r24, r30
    2a50:	19 dc       	rcall	.-1998   	; 0x2284 <move_window>
    2a52:	81 11       	cpse	r24, r1
    2a54:	8c c0       	rjmp	.+280    	; 0x2b6e <get_fat+0x192>
			wc = fs->win[bc++ % SS(fs)];
    2a56:	58 01       	movw	r10, r16
    2a58:	ff ef       	ldi	r31, 0xFF	; 255
    2a5a:	af 1a       	sub	r10, r31
    2a5c:	bf 0a       	sbc	r11, r31
    2a5e:	11 70       	andi	r17, 0x01	; 1
    2a60:	fe 01       	movw	r30, r28
    2a62:	e0 0f       	add	r30, r16
    2a64:	f1 1f       	adc	r31, r17
    2a66:	16 a5       	ldd	r17, Z+46	; 0x2e
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    2a68:	c5 01       	movw	r24, r10
    2a6a:	89 2f       	mov	r24, r25
    2a6c:	99 27       	eor	r25, r25
    2a6e:	86 95       	lsr	r24
    2a70:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2a72:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2a74:	68 a1       	ldd	r22, Y+32	; 0x20
    2a76:	79 a1       	ldd	r23, Y+33	; 0x21
    2a78:	48 0f       	add	r20, r24
    2a7a:	59 1f       	adc	r21, r25
    2a7c:	61 1d       	adc	r22, r1
    2a7e:	71 1d       	adc	r23, r1
    2a80:	ce 01       	movw	r24, r28
    2a82:	00 dc       	rcall	.-2048   	; 0x2284 <move_window>
    2a84:	81 11       	cpse	r24, r1
    2a86:	77 c0       	rjmp	.+238    	; 0x2b76 <get_fat+0x19a>
			wc |= fs->win[bc % SS(fs)] << 8;
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	b8 22       	and	r11, r24
    2a8c:	ca 0d       	add	r28, r10
    2a8e:	db 1d       	adc	r29, r11
    2a90:	8e a5       	ldd	r24, Y+46	; 0x2e
    2a92:	61 2f       	mov	r22, r17
    2a94:	70 e0       	ldi	r23, 0x00	; 0
    2a96:	78 2b       	or	r23, r24
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
    2a98:	c0 fe       	sbrs	r12, 0
    2a9a:	09 c0       	rjmp	.+18     	; 0x2aae <get_fat+0xd2>
    2a9c:	72 95       	swap	r23
    2a9e:	62 95       	swap	r22
    2aa0:	6f 70       	andi	r22, 0x0F	; 15
    2aa2:	67 27       	eor	r22, r23
    2aa4:	7f 70       	andi	r23, 0x0F	; 15
    2aa6:	67 27       	eor	r22, r23
    2aa8:	80 e0       	ldi	r24, 0x00	; 0
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	6f c0       	rjmp	.+222    	; 0x2b8c <get_fat+0x1b0>
    2aae:	7f 70       	andi	r23, 0x0F	; 15
    2ab0:	80 e0       	ldi	r24, 0x00	; 0
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	6b c0       	rjmp	.+214    	; 0x2b8c <get_fat+0x1b0>
			break;

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
    2ab6:	45 2f       	mov	r20, r21
    2ab8:	56 2f       	mov	r21, r22
    2aba:	67 2f       	mov	r22, r23
    2abc:	77 27       	eor	r23, r23
    2abe:	86 8d       	ldd	r24, Z+30	; 0x1e
    2ac0:	97 8d       	ldd	r25, Z+31	; 0x1f
    2ac2:	a0 a1       	ldd	r26, Z+32	; 0x20
    2ac4:	b1 a1       	ldd	r27, Z+33	; 0x21
    2ac6:	48 0f       	add	r20, r24
    2ac8:	59 1f       	adc	r21, r25
    2aca:	6a 1f       	adc	r22, r26
    2acc:	7b 1f       	adc	r23, r27
    2ace:	cf 01       	movw	r24, r30
    2ad0:	d9 db       	rcall	.-2126   	; 0x2284 <move_window>
    2ad2:	81 11       	cpse	r24, r1
    2ad4:	54 c0       	rjmp	.+168    	; 0x2b7e <get_fat+0x1a2>
			p = &fs->win[clst * 2 % SS(fs)];
    2ad6:	b7 01       	movw	r22, r14
    2ad8:	a6 01       	movw	r20, r12
    2ada:	44 0f       	add	r20, r20
    2adc:	55 1f       	adc	r21, r21
    2ade:	66 1f       	adc	r22, r22
    2ae0:	77 1f       	adc	r23, r23
    2ae2:	4e 7f       	andi	r20, 0xFE	; 254
    2ae4:	51 70       	andi	r21, 0x01	; 1
    2ae6:	66 27       	eor	r22, r22
    2ae8:	77 27       	eor	r23, r23
			val = LD_WORD(p);
    2aea:	c4 0f       	add	r28, r20
    2aec:	d5 1f       	adc	r29, r21
    2aee:	6e a5       	ldd	r22, Y+46	; 0x2e
    2af0:	7f a5       	ldd	r23, Y+47	; 0x2f
    2af2:	80 e0       	ldi	r24, 0x00	; 0
    2af4:	90 e0       	ldi	r25, 0x00	; 0
			break;
    2af6:	4a c0       	rjmp	.+148    	; 0x2b8c <get_fat+0x1b0>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
    2af8:	86 8d       	ldd	r24, Z+30	; 0x1e
    2afa:	97 8d       	ldd	r25, Z+31	; 0x1f
    2afc:	a0 a1       	ldd	r26, Z+32	; 0x20
    2afe:	b1 a1       	ldd	r27, Z+33	; 0x21
    2b00:	68 94       	set
    2b02:	16 f8       	bld	r1, 6
    2b04:	76 95       	lsr	r23
    2b06:	67 95       	ror	r22
    2b08:	57 95       	ror	r21
    2b0a:	47 95       	ror	r20
    2b0c:	16 94       	lsr	r1
    2b0e:	d1 f7       	brne	.-12     	; 0x2b04 <get_fat+0x128>
    2b10:	48 0f       	add	r20, r24
    2b12:	59 1f       	adc	r21, r25
    2b14:	6a 1f       	adc	r22, r26
    2b16:	7b 1f       	adc	r23, r27
    2b18:	cf 01       	movw	r24, r30
    2b1a:	b4 db       	rcall	.-2200   	; 0x2284 <move_window>
    2b1c:	81 11       	cpse	r24, r1
    2b1e:	33 c0       	rjmp	.+102    	; 0x2b86 <get_fat+0x1aa>
			p = &fs->win[clst * 4 % SS(fs)];
    2b20:	b7 01       	movw	r22, r14
    2b22:	a6 01       	movw	r20, r12
    2b24:	44 0f       	add	r20, r20
    2b26:	55 1f       	adc	r21, r21
    2b28:	66 1f       	adc	r22, r22
    2b2a:	77 1f       	adc	r23, r23
    2b2c:	44 0f       	add	r20, r20
    2b2e:	55 1f       	adc	r21, r21
    2b30:	66 1f       	adc	r22, r22
    2b32:	77 1f       	adc	r23, r23
    2b34:	4c 7f       	andi	r20, 0xFC	; 252
    2b36:	51 70       	andi	r21, 0x01	; 1
    2b38:	66 27       	eor	r22, r22
    2b3a:	77 27       	eor	r23, r23
			val = LD_DWORD(p) & 0x0FFFFFFF;
    2b3c:	c4 0f       	add	r28, r20
    2b3e:	d5 1f       	adc	r29, r21
    2b40:	8e a5       	ldd	r24, Y+46	; 0x2e
    2b42:	9f a5       	ldd	r25, Y+47	; 0x2f
    2b44:	a8 a9       	ldd	r26, Y+48	; 0x30
    2b46:	b9 a9       	ldd	r27, Y+49	; 0x31
    2b48:	bc 01       	movw	r22, r24
    2b4a:	cd 01       	movw	r24, r26
    2b4c:	9f 70       	andi	r25, 0x0F	; 15
			break;
    2b4e:	1e c0       	rjmp	.+60     	; 0x2b8c <get_fat+0x1b0>
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		val = 1;	/* Internal error */
    2b50:	61 e0       	ldi	r22, 0x01	; 1
    2b52:	70 e0       	ldi	r23, 0x00	; 0
    2b54:	80 e0       	ldi	r24, 0x00	; 0
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	19 c0       	rjmp	.+50     	; 0x2b8c <get_fat+0x1b0>
    2b5a:	61 e0       	ldi	r22, 0x01	; 1
    2b5c:	70 e0       	ldi	r23, 0x00	; 0
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	14 c0       	rjmp	.+40     	; 0x2b8c <get_fat+0x1b0>
			p = &fs->win[clst * 4 % SS(fs)];
			val = LD_DWORD(p) & 0x0FFFFFFF;
			break;

		default:
			val = 1;	/* Internal error */
    2b64:	61 e0       	ldi	r22, 0x01	; 1
    2b66:	70 e0       	ldi	r23, 0x00	; 0
    2b68:	80 e0       	ldi	r24, 0x00	; 0
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	0f c0       	rjmp	.+30     	; 0x2b8c <get_fat+0x1b0>

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		val = 1;	/* Internal error */

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    2b6e:	6f ef       	ldi	r22, 0xFF	; 255
    2b70:	7f ef       	ldi	r23, 0xFF	; 255
    2b72:	cb 01       	movw	r24, r22
    2b74:	0b c0       	rjmp	.+22     	; 0x2b8c <get_fat+0x1b0>
    2b76:	6f ef       	ldi	r22, 0xFF	; 255
    2b78:	7f ef       	ldi	r23, 0xFF	; 255
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	07 c0       	rjmp	.+14     	; 0x2b8c <get_fat+0x1b0>
    2b7e:	6f ef       	ldi	r22, 0xFF	; 255
    2b80:	7f ef       	ldi	r23, 0xFF	; 255
    2b82:	cb 01       	movw	r24, r22
    2b84:	03 c0       	rjmp	.+6      	; 0x2b8c <get_fat+0x1b0>
    2b86:	6f ef       	ldi	r22, 0xFF	; 255
    2b88:	7f ef       	ldi	r23, 0xFF	; 255
    2b8a:	cb 01       	movw	r24, r22
			val = 1;	/* Internal error */
		}
	}

	return val;
}
    2b8c:	df 91       	pop	r29
    2b8e:	cf 91       	pop	r28
    2b90:	1f 91       	pop	r17
    2b92:	0f 91       	pop	r16
    2b94:	ff 90       	pop	r15
    2b96:	ef 90       	pop	r14
    2b98:	df 90       	pop	r13
    2b9a:	cf 90       	pop	r12
    2b9c:	bf 90       	pop	r11
    2b9e:	af 90       	pop	r10
    2ba0:	08 95       	ret

00002ba2 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
    2ba2:	af 92       	push	r10
    2ba4:	bf 92       	push	r11
    2ba6:	cf 92       	push	r12
    2ba8:	df 92       	push	r13
    2baa:	ef 92       	push	r14
    2bac:	ff 92       	push	r15
    2bae:	0f 93       	push	r16
    2bb0:	1f 93       	push	r17
    2bb2:	cf 93       	push	r28
    2bb4:	df 93       	push	r29
    2bb6:	ec 01       	movw	r28, r24
    2bb8:	8b 01       	movw	r16, r22
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
    2bba:	7d 83       	std	Y+5, r23	; 0x05
    2bbc:	6c 83       	std	Y+4, r22	; 0x04
	clst = dp->sclust;		/* Table start cluster (0:root) */
    2bbe:	ce 80       	ldd	r12, Y+6	; 0x06
    2bc0:	df 80       	ldd	r13, Y+7	; 0x07
    2bc2:	e8 84       	ldd	r14, Y+8	; 0x08
    2bc4:	f9 84       	ldd	r15, Y+9	; 0x09
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	c8 16       	cp	r12, r24
    2bca:	d1 04       	cpc	r13, r1
    2bcc:	e1 04       	cpc	r14, r1
    2bce:	f1 04       	cpc	r15, r1
    2bd0:	09 f4       	brne	.+2      	; 0x2bd4 <dir_sdi+0x32>
    2bd2:	89 c0       	rjmp	.+274    	; 0x2ce6 <dir_sdi+0x144>
    2bd4:	e8 81       	ld	r30, Y
    2bd6:	f9 81       	ldd	r31, Y+1	; 0x01
    2bd8:	82 89       	ldd	r24, Z+18	; 0x12
    2bda:	93 89       	ldd	r25, Z+19	; 0x13
    2bdc:	a4 89       	ldd	r26, Z+20	; 0x14
    2bde:	b5 89       	ldd	r27, Z+21	; 0x15
    2be0:	c8 16       	cp	r12, r24
    2be2:	d9 06       	cpc	r13, r25
    2be4:	ea 06       	cpc	r14, r26
    2be6:	fb 06       	cpc	r15, r27
    2be8:	08 f0       	brcs	.+2      	; 0x2bec <dir_sdi+0x4a>
    2bea:	7f c0       	rjmp	.+254    	; 0x2cea <dir_sdi+0x148>
		return FR_INT_ERR;
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    2bec:	c1 14       	cp	r12, r1
    2bee:	d1 04       	cpc	r13, r1
    2bf0:	e1 04       	cpc	r14, r1
    2bf2:	f1 04       	cpc	r15, r1
    2bf4:	c1 f4       	brne	.+48     	; 0x2c26 <dir_sdi+0x84>
    2bf6:	80 81       	ld	r24, Z
    2bf8:	83 30       	cpi	r24, 0x03	; 3
    2bfa:	41 f4       	brne	.+16     	; 0x2c0c <dir_sdi+0x6a>
		clst = dp->fs->dirbase;
    2bfc:	82 a1       	ldd	r24, Z+34	; 0x22
    2bfe:	93 a1       	ldd	r25, Z+35	; 0x23
    2c00:	a4 a1       	ldd	r26, Z+36	; 0x24
    2c02:	b5 a1       	ldd	r27, Z+37	; 0x25

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
    2c04:	00 97       	sbiw	r24, 0x00	; 0
    2c06:	a1 05       	cpc	r26, r1
    2c08:	b1 05       	cpc	r27, r1
    2c0a:	59 f4       	brne	.+22     	; 0x2c22 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
    2c0c:	80 85       	ldd	r24, Z+8	; 0x08
    2c0e:	91 85       	ldd	r25, Z+9	; 0x09
    2c10:	08 17       	cp	r16, r24
    2c12:	19 07       	cpc	r17, r25
    2c14:	08 f0       	brcs	.+2      	; 0x2c18 <dir_sdi+0x76>
    2c16:	6b c0       	rjmp	.+214    	; 0x2cee <dir_sdi+0x14c>
			return FR_INT_ERR;
		sect = dp->fs->dirbase;
    2c18:	62 a1       	ldd	r22, Z+34	; 0x22
    2c1a:	73 a1       	ldd	r23, Z+35	; 0x23
    2c1c:	84 a1       	ldd	r24, Z+36	; 0x24
    2c1e:	95 a1       	ldd	r25, Z+37	; 0x25
    2c20:	35 c0       	rjmp	.+106    	; 0x2c8c <dir_sdi+0xea>
	dp->index = (WORD)idx;	/* Current index */
	clst = dp->sclust;		/* Table start cluster (0:root) */
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
		return FR_INT_ERR;
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = dp->fs->dirbase;
    2c22:	6c 01       	movw	r12, r24
    2c24:	7d 01       	movw	r14, r26
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
			return FR_INT_ERR;
		sect = dp->fs->dirbase;
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
    2c26:	a2 80       	ldd	r10, Z+2	; 0x02
    2c28:	80 e1       	ldi	r24, 0x10	; 16
    2c2a:	a8 9e       	mul	r10, r24
    2c2c:	50 01       	movw	r10, r0
    2c2e:	11 24       	eor	r1, r1
		while (idx >= ic) {	/* Follow cluster chain */
    2c30:	0a 15       	cp	r16, r10
    2c32:	1b 05       	cpc	r17, r11
    2c34:	30 f1       	brcs	.+76     	; 0x2c82 <dir_sdi+0xe0>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
    2c36:	b7 01       	movw	r22, r14
    2c38:	a6 01       	movw	r20, r12
    2c3a:	88 81       	ld	r24, Y
    2c3c:	99 81       	ldd	r25, Y+1	; 0x01
    2c3e:	ce de       	rcall	.-612    	; 0x29dc <get_fat>
    2c40:	6b 01       	movw	r12, r22
    2c42:	7c 01       	movw	r14, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    2c44:	8f ef       	ldi	r24, 0xFF	; 255
    2c46:	c8 16       	cp	r12, r24
    2c48:	d8 06       	cpc	r13, r24
    2c4a:	e8 06       	cpc	r14, r24
    2c4c:	f8 06       	cpc	r15, r24
    2c4e:	09 f4       	brne	.+2      	; 0x2c52 <dir_sdi+0xb0>
    2c50:	50 c0       	rjmp	.+160    	; 0x2cf2 <dir_sdi+0x150>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
    2c52:	82 e0       	ldi	r24, 0x02	; 2
    2c54:	c8 16       	cp	r12, r24
    2c56:	d1 04       	cpc	r13, r1
    2c58:	e1 04       	cpc	r14, r1
    2c5a:	f1 04       	cpc	r15, r1
    2c5c:	08 f4       	brcc	.+2      	; 0x2c60 <dir_sdi+0xbe>
    2c5e:	4b c0       	rjmp	.+150    	; 0x2cf6 <dir_sdi+0x154>
    2c60:	e8 81       	ld	r30, Y
    2c62:	f9 81       	ldd	r31, Y+1	; 0x01
    2c64:	82 89       	ldd	r24, Z+18	; 0x12
    2c66:	93 89       	ldd	r25, Z+19	; 0x13
    2c68:	a4 89       	ldd	r26, Z+20	; 0x14
    2c6a:	b5 89       	ldd	r27, Z+21	; 0x15
    2c6c:	c8 16       	cp	r12, r24
    2c6e:	d9 06       	cpc	r13, r25
    2c70:	ea 06       	cpc	r14, r26
    2c72:	fb 06       	cpc	r15, r27
    2c74:	08 f0       	brcs	.+2      	; 0x2c78 <dir_sdi+0xd6>
    2c76:	41 c0       	rjmp	.+130    	; 0x2cfa <dir_sdi+0x158>
				return FR_INT_ERR;
			idx -= ic;
    2c78:	0a 19       	sub	r16, r10
    2c7a:	1b 09       	sbc	r17, r11
			return FR_INT_ERR;
		sect = dp->fs->dirbase;
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    2c7c:	0a 15       	cp	r16, r10
    2c7e:	1b 05       	cpc	r17, r11
    2c80:	d0 f6       	brcc	.-76     	; 0x2c36 <dir_sdi+0x94>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
				return FR_INT_ERR;
			idx -= ic;
		}
		sect = clust2sect(dp->fs, clst);
    2c82:	b7 01       	movw	r22, r14
    2c84:	a6 01       	movw	r20, r12
    2c86:	88 81       	ld	r24, Y
    2c88:	99 81       	ldd	r25, Y+1	; 0x01
    2c8a:	80 de       	rcall	.-768    	; 0x298c <clust2sect>
	}
	dp->clust = clst;	/* Current cluster# */
    2c8c:	ca 86       	std	Y+10, r12	; 0x0a
    2c8e:	db 86       	std	Y+11, r13	; 0x0b
    2c90:	ec 86       	std	Y+12, r14	; 0x0c
    2c92:	fd 86       	std	Y+13, r15	; 0x0d
	if (!sect) return FR_INT_ERR;
    2c94:	61 15       	cp	r22, r1
    2c96:	71 05       	cpc	r23, r1
    2c98:	81 05       	cpc	r24, r1
    2c9a:	91 05       	cpc	r25, r1
    2c9c:	81 f1       	breq	.+96     	; 0x2cfe <dir_sdi+0x15c>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
    2c9e:	98 01       	movw	r18, r16
    2ca0:	32 95       	swap	r19
    2ca2:	22 95       	swap	r18
    2ca4:	2f 70       	andi	r18, 0x0F	; 15
    2ca6:	23 27       	eor	r18, r19
    2ca8:	3f 70       	andi	r19, 0x0F	; 15
    2caa:	23 27       	eor	r18, r19
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	82 0f       	add	r24, r18
    2cb2:	93 1f       	adc	r25, r19
    2cb4:	a1 1d       	adc	r26, r1
    2cb6:	b1 1d       	adc	r27, r1
    2cb8:	8e 87       	std	Y+14, r24	; 0x0e
    2cba:	9f 87       	std	Y+15, r25	; 0x0f
    2cbc:	a8 8b       	std	Y+16, r26	; 0x10
    2cbe:	b9 8b       	std	Y+17, r27	; 0x11
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
    2cc0:	88 81       	ld	r24, Y
    2cc2:	99 81       	ldd	r25, Y+1	; 0x01
    2cc4:	8e 96       	adiw	r24, 0x2e	; 46
    2cc6:	0f 70       	andi	r16, 0x0F	; 15
    2cc8:	11 27       	eor	r17, r17
    2cca:	00 0f       	add	r16, r16
    2ccc:	11 1f       	adc	r17, r17
    2cce:	02 95       	swap	r16
    2cd0:	12 95       	swap	r17
    2cd2:	10 7f       	andi	r17, 0xF0	; 240
    2cd4:	10 27       	eor	r17, r16
    2cd6:	00 7f       	andi	r16, 0xF0	; 240
    2cd8:	10 27       	eor	r17, r16
    2cda:	08 0f       	add	r16, r24
    2cdc:	19 1f       	adc	r17, r25
    2cde:	1b 8b       	std	Y+19, r17	; 0x13
    2ce0:	0a 8b       	std	Y+18, r16	; 0x12

	return FR_OK;
    2ce2:	80 e0       	ldi	r24, 0x00	; 0
    2ce4:	0d c0       	rjmp	.+26     	; 0x2d00 <dir_sdi+0x15e>


	dp->index = (WORD)idx;	/* Current index */
	clst = dp->sclust;		/* Table start cluster (0:root) */
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
		return FR_INT_ERR;
    2ce6:	82 e0       	ldi	r24, 0x02	; 2
    2ce8:	0b c0       	rjmp	.+22     	; 0x2d00 <dir_sdi+0x15e>
    2cea:	82 e0       	ldi	r24, 0x02	; 2
    2cec:	09 c0       	rjmp	.+18     	; 0x2d00 <dir_sdi+0x15e>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = dp->fs->dirbase;

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
			return FR_INT_ERR;
    2cee:	82 e0       	ldi	r24, 0x02	; 2
    2cf0:	07 c0       	rjmp	.+14     	; 0x2d00 <dir_sdi+0x15e>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    2cf2:	81 e0       	ldi	r24, 0x01	; 1
    2cf4:	05 c0       	rjmp	.+10     	; 0x2d00 <dir_sdi+0x15e>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
				return FR_INT_ERR;
    2cf6:	82 e0       	ldi	r24, 0x02	; 2
    2cf8:	03 c0       	rjmp	.+6      	; 0x2d00 <dir_sdi+0x15e>
    2cfa:	82 e0       	ldi	r24, 0x02	; 2
    2cfc:	01 c0       	rjmp	.+2      	; 0x2d00 <dir_sdi+0x15e>
			idx -= ic;
		}
		sect = clust2sect(dp->fs, clst);
	}
	dp->clust = clst;	/* Current cluster# */
	if (!sect) return FR_INT_ERR;
    2cfe:	82 e0       	ldi	r24, 0x02	; 2
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */

	return FR_OK;
}
    2d00:	df 91       	pop	r29
    2d02:	cf 91       	pop	r28
    2d04:	1f 91       	pop	r17
    2d06:	0f 91       	pop	r16
    2d08:	ff 90       	pop	r15
    2d0a:	ef 90       	pop	r14
    2d0c:	df 90       	pop	r13
    2d0e:	cf 90       	pop	r12
    2d10:	bf 90       	pop	r11
    2d12:	af 90       	pop	r10
    2d14:	08 95       	ret

00002d16 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
    2d16:	4f 92       	push	r4
    2d18:	5f 92       	push	r5
    2d1a:	6f 92       	push	r6
    2d1c:	7f 92       	push	r7
    2d1e:	9f 92       	push	r9
    2d20:	af 92       	push	r10
    2d22:	bf 92       	push	r11
    2d24:	cf 92       	push	r12
    2d26:	df 92       	push	r13
    2d28:	ef 92       	push	r14
    2d2a:	ff 92       	push	r15
    2d2c:	0f 93       	push	r16
    2d2e:	1f 93       	push	r17
    2d30:	cf 93       	push	r28
    2d32:	df 93       	push	r29
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    2d34:	42 30       	cpi	r20, 0x02	; 2
    2d36:	51 05       	cpc	r21, r1
    2d38:	61 05       	cpc	r22, r1
    2d3a:	71 05       	cpc	r23, r1
    2d3c:	08 f4       	brcc	.+2      	; 0x2d40 <put_fat+0x2a>
    2d3e:	d6 c0       	rjmp	.+428    	; 0x2eec <put_fat+0x1d6>
    2d40:	fc 01       	movw	r30, r24
    2d42:	c2 88       	ldd	r12, Z+18	; 0x12
    2d44:	d3 88       	ldd	r13, Z+19	; 0x13
    2d46:	e4 88       	ldd	r14, Z+20	; 0x14
    2d48:	f5 88       	ldd	r15, Z+21	; 0x15
    2d4a:	4c 15       	cp	r20, r12
    2d4c:	5d 05       	cpc	r21, r13
    2d4e:	6e 05       	cpc	r22, r14
    2d50:	7f 05       	cpc	r23, r15
    2d52:	08 f0       	brcs	.+2      	; 0x2d56 <put_fat+0x40>
    2d54:	cf c0       	rjmp	.+414    	; 0x2ef4 <put_fat+0x1de>
    2d56:	68 01       	movw	r12, r16
    2d58:	79 01       	movw	r14, r18
    2d5a:	2a 01       	movw	r4, r20
    2d5c:	3b 01       	movw	r6, r22
    2d5e:	ec 01       	movw	r28, r24
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
    2d60:	80 81       	ld	r24, Z
    2d62:	82 30       	cpi	r24, 0x02	; 2
    2d64:	09 f4       	brne	.+2      	; 0x2d68 <put_fat+0x52>
    2d66:	62 c0       	rjmp	.+196    	; 0x2e2c <put_fat+0x116>
    2d68:	83 30       	cpi	r24, 0x03	; 3
    2d6a:	09 f4       	brne	.+2      	; 0x2d6e <put_fat+0x58>
    2d6c:	84 c0       	rjmp	.+264    	; 0x2e76 <put_fat+0x160>
    2d6e:	81 30       	cpi	r24, 0x01	; 1
    2d70:	09 f0       	breq	.+2      	; 0x2d74 <put_fat+0x5e>
    2d72:	c4 c0       	rjmp	.+392    	; 0x2efc <put_fat+0x1e6>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
    2d74:	8a 01       	movw	r16, r20
    2d76:	16 95       	lsr	r17
    2d78:	07 95       	ror	r16
    2d7a:	04 0f       	add	r16, r20
    2d7c:	15 1f       	adc	r17, r21
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    2d7e:	c8 01       	movw	r24, r16
    2d80:	89 2f       	mov	r24, r25
    2d82:	99 27       	eor	r25, r25
    2d84:	86 95       	lsr	r24
    2d86:	46 8d       	ldd	r20, Z+30	; 0x1e
    2d88:	57 8d       	ldd	r21, Z+31	; 0x1f
    2d8a:	60 a1       	ldd	r22, Z+32	; 0x20
    2d8c:	71 a1       	ldd	r23, Z+33	; 0x21
    2d8e:	48 0f       	add	r20, r24
    2d90:	59 1f       	adc	r21, r25
    2d92:	61 1d       	adc	r22, r1
    2d94:	71 1d       	adc	r23, r1
    2d96:	cf 01       	movw	r24, r30
    2d98:	75 da       	rcall	.-2838   	; 0x2284 <move_window>
    2d9a:	98 2e       	mov	r9, r24
			if (res != FR_OK) break;
    2d9c:	81 11       	cpse	r24, r1
    2d9e:	cd c0       	rjmp	.+410    	; 0x2f3a <put_fat+0x224>
			p = &fs->win[bc++ % SS(fs)];
    2da0:	58 01       	movw	r10, r16
    2da2:	ff ef       	ldi	r31, 0xFF	; 255
    2da4:	af 1a       	sub	r10, r31
    2da6:	bf 0a       	sbc	r11, r31
    2da8:	11 70       	andi	r17, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    2daa:	40 fe       	sbrs	r4, 0
    2dac:	20 c0       	rjmp	.+64     	; 0x2dee <put_fat+0xd8>
    2dae:	fe 01       	movw	r30, r28
    2db0:	e0 0f       	add	r30, r16
    2db2:	f1 1f       	adc	r31, r17
    2db4:	86 a5       	ldd	r24, Z+46	; 0x2e
    2db6:	28 2f       	mov	r18, r24
    2db8:	2f 70       	andi	r18, 0x0F	; 15
    2dba:	30 e1       	ldi	r19, 0x10	; 16
    2dbc:	c3 9e       	mul	r12, r19
    2dbe:	c0 01       	movw	r24, r0
    2dc0:	11 24       	eor	r1, r1
    2dc2:	82 2b       	or	r24, r18
    2dc4:	86 a7       	std	Z+46, r24	; 0x2e
			fs->wflag = 1;
    2dc6:	81 e0       	ldi	r24, 0x01	; 1
    2dc8:	8c 83       	std	Y+4, r24	; 0x04
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    2dca:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2dcc:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2dce:	68 a1       	ldd	r22, Y+32	; 0x20
    2dd0:	79 a1       	ldd	r23, Y+33	; 0x21
    2dd2:	c5 01       	movw	r24, r10
    2dd4:	89 2f       	mov	r24, r25
    2dd6:	99 27       	eor	r25, r25
    2dd8:	86 95       	lsr	r24
    2dda:	48 0f       	add	r20, r24
    2ddc:	59 1f       	adc	r21, r25
    2dde:	61 1d       	adc	r22, r1
    2de0:	71 1d       	adc	r23, r1
    2de2:	ce 01       	movw	r24, r28
    2de4:	4f da       	rcall	.-2914   	; 0x2284 <move_window>
			if (res != FR_OK) break;
    2de6:	88 23       	and	r24, r24
    2de8:	09 f4       	brne	.+2      	; 0x2dec <put_fat+0xd6>
    2dea:	90 c0       	rjmp	.+288    	; 0x2f0c <put_fat+0x1f6>
    2dec:	8b c0       	rjmp	.+278    	; 0x2f04 <put_fat+0x1ee>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc++ % SS(fs)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    2dee:	fe 01       	movw	r30, r28
    2df0:	e0 0f       	add	r30, r16
    2df2:	f1 1f       	adc	r31, r17
    2df4:	c6 a6       	std	Z+46, r12	; 0x2e
			fs->wflag = 1;
    2df6:	81 e0       	ldi	r24, 0x01	; 1
    2df8:	8c 83       	std	Y+4, r24	; 0x04
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    2dfa:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2dfc:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2dfe:	68 a1       	ldd	r22, Y+32	; 0x20
    2e00:	79 a1       	ldd	r23, Y+33	; 0x21
    2e02:	c5 01       	movw	r24, r10
    2e04:	89 2f       	mov	r24, r25
    2e06:	99 27       	eor	r25, r25
    2e08:	86 95       	lsr	r24
    2e0a:	48 0f       	add	r20, r24
    2e0c:	59 1f       	adc	r21, r25
    2e0e:	61 1d       	adc	r22, r1
    2e10:	71 1d       	adc	r23, r1
    2e12:	ce 01       	movw	r24, r28
    2e14:	37 da       	rcall	.-2962   	; 0x2284 <move_window>
			if (res != FR_OK) break;
    2e16:	88 23       	and	r24, r24
    2e18:	09 f4       	brne	.+2      	; 0x2e1c <put_fat+0x106>
    2e1a:	83 c0       	rjmp	.+262    	; 0x2f22 <put_fat+0x20c>
    2e1c:	75 c0       	rjmp	.+234    	; 0x2f08 <put_fat+0x1f2>
			p = &fs->win[bc % SS(fs)];
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    2e1e:	fe 01       	movw	r30, r28
    2e20:	ea 0d       	add	r30, r10
    2e22:	fb 1d       	adc	r31, r11
    2e24:	c6 a6       	std	Z+46, r12	; 0x2e
			fs->wflag = 1;
    2e26:	81 e0       	ldi	r24, 0x01	; 1
    2e28:	8c 83       	std	Y+4, r24	; 0x04
			break;
    2e2a:	87 c0       	rjmp	.+270    	; 0x2f3a <put_fat+0x224>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    2e2c:	45 2f       	mov	r20, r21
    2e2e:	56 2f       	mov	r21, r22
    2e30:	67 2f       	mov	r22, r23
    2e32:	77 27       	eor	r23, r23
    2e34:	86 8d       	ldd	r24, Z+30	; 0x1e
    2e36:	97 8d       	ldd	r25, Z+31	; 0x1f
    2e38:	a0 a1       	ldd	r26, Z+32	; 0x20
    2e3a:	b1 a1       	ldd	r27, Z+33	; 0x21
    2e3c:	48 0f       	add	r20, r24
    2e3e:	59 1f       	adc	r21, r25
    2e40:	6a 1f       	adc	r22, r26
    2e42:	7b 1f       	adc	r23, r27
    2e44:	cf 01       	movw	r24, r30
    2e46:	1e da       	rcall	.-3012   	; 0x2284 <move_window>
    2e48:	98 2e       	mov	r9, r24
			if (res != FR_OK) break;
    2e4a:	81 11       	cpse	r24, r1
    2e4c:	76 c0       	rjmp	.+236    	; 0x2f3a <put_fat+0x224>
			p = &fs->win[clst * 2 % SS(fs)];
    2e4e:	b3 01       	movw	r22, r6
    2e50:	a2 01       	movw	r20, r4
    2e52:	44 0f       	add	r20, r20
    2e54:	55 1f       	adc	r21, r21
    2e56:	66 1f       	adc	r22, r22
    2e58:	77 1f       	adc	r23, r23
    2e5a:	4e 7f       	andi	r20, 0xFE	; 254
    2e5c:	51 70       	andi	r21, 0x01	; 1
    2e5e:	66 27       	eor	r22, r22
    2e60:	77 27       	eor	r23, r23
    2e62:	42 5d       	subi	r20, 0xD2	; 210
    2e64:	5f 4f       	sbci	r21, 0xFF	; 255
			ST_WORD(p, (WORD)val);
    2e66:	fe 01       	movw	r30, r28
    2e68:	e4 0f       	add	r30, r20
    2e6a:	f5 1f       	adc	r31, r21
    2e6c:	d1 82       	std	Z+1, r13	; 0x01
    2e6e:	c0 82       	st	Z, r12
			fs->wflag = 1;
    2e70:	81 e0       	ldi	r24, 0x01	; 1
    2e72:	8c 83       	std	Y+4, r24	; 0x04
			break;
    2e74:	62 c0       	rjmp	.+196    	; 0x2f3a <put_fat+0x224>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    2e76:	86 8d       	ldd	r24, Z+30	; 0x1e
    2e78:	97 8d       	ldd	r25, Z+31	; 0x1f
    2e7a:	a0 a1       	ldd	r26, Z+32	; 0x20
    2e7c:	b1 a1       	ldd	r27, Z+33	; 0x21
    2e7e:	68 94       	set
    2e80:	16 f8       	bld	r1, 6
    2e82:	76 95       	lsr	r23
    2e84:	67 95       	ror	r22
    2e86:	57 95       	ror	r21
    2e88:	47 95       	ror	r20
    2e8a:	16 94       	lsr	r1
    2e8c:	d1 f7       	brne	.-12     	; 0x2e82 <put_fat+0x16c>
    2e8e:	48 0f       	add	r20, r24
    2e90:	59 1f       	adc	r21, r25
    2e92:	6a 1f       	adc	r22, r26
    2e94:	7b 1f       	adc	r23, r27
    2e96:	cf 01       	movw	r24, r30
    2e98:	f5 d9       	rcall	.-3094   	; 0x2284 <move_window>
    2e9a:	98 2e       	mov	r9, r24
			if (res != FR_OK) break;
    2e9c:	81 11       	cpse	r24, r1
    2e9e:	4d c0       	rjmp	.+154    	; 0x2f3a <put_fat+0x224>
			p = &fs->win[clst * 4 % SS(fs)];
    2ea0:	b3 01       	movw	r22, r6
    2ea2:	a2 01       	movw	r20, r4
    2ea4:	44 0f       	add	r20, r20
    2ea6:	55 1f       	adc	r21, r21
    2ea8:	66 1f       	adc	r22, r22
    2eaa:	77 1f       	adc	r23, r23
    2eac:	44 0f       	add	r20, r20
    2eae:	55 1f       	adc	r21, r21
    2eb0:	66 1f       	adc	r22, r22
    2eb2:	77 1f       	adc	r23, r23
    2eb4:	4c 7f       	andi	r20, 0xFC	; 252
    2eb6:	51 70       	andi	r21, 0x01	; 1
    2eb8:	66 27       	eor	r22, r22
    2eba:	77 27       	eor	r23, r23
    2ebc:	42 5d       	subi	r20, 0xD2	; 210
    2ebe:	5f 4f       	sbci	r21, 0xFF	; 255
    2ec0:	fe 01       	movw	r30, r28
    2ec2:	e4 0f       	add	r30, r20
    2ec4:	f5 1f       	adc	r31, r21
			val |= LD_DWORD(p) & 0xF0000000;
			ST_DWORD(p, val);
    2ec6:	00 81       	ld	r16, Z
    2ec8:	11 81       	ldd	r17, Z+1	; 0x01
    2eca:	22 81       	ldd	r18, Z+2	; 0x02
    2ecc:	33 81       	ldd	r19, Z+3	; 0x03
    2ece:	00 27       	eor	r16, r16
    2ed0:	11 27       	eor	r17, r17
    2ed2:	22 27       	eor	r18, r18
    2ed4:	30 7f       	andi	r19, 0xF0	; 240
    2ed6:	c0 2a       	or	r12, r16
    2ed8:	d1 2a       	or	r13, r17
    2eda:	e2 2a       	or	r14, r18
    2edc:	f3 2a       	or	r15, r19
    2ede:	c0 82       	st	Z, r12
    2ee0:	d1 82       	std	Z+1, r13	; 0x01
    2ee2:	e2 82       	std	Z+2, r14	; 0x02
    2ee4:	f3 82       	std	Z+3, r15	; 0x03
			fs->wflag = 1;
    2ee6:	81 e0       	ldi	r24, 0x01	; 1
    2ee8:	8c 83       	std	Y+4, r24	; 0x04
			break;
    2eea:	27 c0       	rjmp	.+78     	; 0x2f3a <put_fat+0x224>
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
    2eec:	68 94       	set
    2eee:	99 24       	eor	r9, r9
    2ef0:	91 f8       	bld	r9, 1
    2ef2:	23 c0       	rjmp	.+70     	; 0x2f3a <put_fat+0x224>
    2ef4:	68 94       	set
    2ef6:	99 24       	eor	r9, r9
    2ef8:	91 f8       	bld	r9, 1
    2efa:	1f c0       	rjmp	.+62     	; 0x2f3a <put_fat+0x224>
			ST_DWORD(p, val);
			fs->wflag = 1;
			break;

		default :
			res = FR_INT_ERR;
    2efc:	68 94       	set
    2efe:	99 24       	eor	r9, r9
    2f00:	91 f8       	bld	r9, 1
    2f02:	1b c0       	rjmp	.+54     	; 0x2f3a <put_fat+0x224>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc++ % SS(fs)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    2f04:	98 2e       	mov	r9, r24
    2f06:	19 c0       	rjmp	.+50     	; 0x2f3a <put_fat+0x224>
    2f08:	98 2e       	mov	r9, r24
		default :
			res = FR_INT_ERR;
		}
	}

	return res;
    2f0a:	17 c0       	rjmp	.+46     	; 0x2f3a <put_fat+0x224>
			p = &fs->win[bc++ % SS(fs)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc % SS(fs)];
    2f0c:	81 e0       	ldi	r24, 0x01	; 1
    2f0e:	b8 22       	and	r11, r24
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    2f10:	68 94       	set
    2f12:	13 f8       	bld	r1, 3
    2f14:	f6 94       	lsr	r15
    2f16:	e7 94       	ror	r14
    2f18:	d7 94       	ror	r13
    2f1a:	c7 94       	ror	r12
    2f1c:	16 94       	lsr	r1
    2f1e:	d1 f7       	brne	.-12     	; 0x2f14 <put_fat+0x1fe>
    2f20:	7e cf       	rjmp	.-260    	; 0x2e1e <put_fat+0x108>
			p = &fs->win[bc++ % SS(fs)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc % SS(fs)];
    2f22:	e1 e0       	ldi	r30, 0x01	; 1
    2f24:	be 22       	and	r11, r30
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    2f26:	fe 01       	movw	r30, r28
    2f28:	ea 0d       	add	r30, r10
    2f2a:	fb 1d       	adc	r31, r11
    2f2c:	96 a5       	ldd	r25, Z+46	; 0x2e
    2f2e:	90 7f       	andi	r25, 0xF0	; 240
    2f30:	8d 2d       	mov	r24, r13
    2f32:	8f 70       	andi	r24, 0x0F	; 15
    2f34:	c9 2e       	mov	r12, r25
    2f36:	c8 2a       	or	r12, r24
    2f38:	72 cf       	rjmp	.-284    	; 0x2e1e <put_fat+0x108>
			res = FR_INT_ERR;
		}
	}

	return res;
}
    2f3a:	89 2d       	mov	r24, r9
    2f3c:	df 91       	pop	r29
    2f3e:	cf 91       	pop	r28
    2f40:	1f 91       	pop	r17
    2f42:	0f 91       	pop	r16
    2f44:	ff 90       	pop	r15
    2f46:	ef 90       	pop	r14
    2f48:	df 90       	pop	r13
    2f4a:	cf 90       	pop	r12
    2f4c:	bf 90       	pop	r11
    2f4e:	af 90       	pop	r10
    2f50:	9f 90       	pop	r9
    2f52:	7f 90       	pop	r7
    2f54:	6f 90       	pop	r6
    2f56:	5f 90       	pop	r5
    2f58:	4f 90       	pop	r4
    2f5a:	08 95       	ret

00002f5c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    2f5c:	4f 92       	push	r4
    2f5e:	5f 92       	push	r5
    2f60:	6f 92       	push	r6
    2f62:	7f 92       	push	r7
    2f64:	8f 92       	push	r8
    2f66:	9f 92       	push	r9
    2f68:	af 92       	push	r10
    2f6a:	bf 92       	push	r11
    2f6c:	cf 92       	push	r12
    2f6e:	df 92       	push	r13
    2f70:	ef 92       	push	r14
    2f72:	ff 92       	push	r15
    2f74:	0f 93       	push	r16
    2f76:	1f 93       	push	r17
    2f78:	cf 93       	push	r28
    2f7a:	df 93       	push	r29
    2f7c:	ec 01       	movw	r28, r24
    2f7e:	2a 01       	movw	r4, r20
    2f80:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    2f82:	41 15       	cp	r20, r1
    2f84:	51 05       	cpc	r21, r1
    2f86:	61 05       	cpc	r22, r1
    2f88:	71 05       	cpc	r23, r1
    2f8a:	b9 f4       	brne	.+46     	; 0x2fba <create_chain+0x5e>
		scl = fs->last_clust;			/* Get suggested start point */
    2f8c:	8a 84       	ldd	r8, Y+10	; 0x0a
    2f8e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f90:	ac 84       	ldd	r10, Y+12	; 0x0c
    2f92:	bd 84       	ldd	r11, Y+13	; 0x0d
		if (!scl || scl >= fs->n_fatent) scl = 1;
    2f94:	81 14       	cp	r8, r1
    2f96:	91 04       	cpc	r9, r1
    2f98:	a1 04       	cpc	r10, r1
    2f9a:	b1 04       	cpc	r11, r1
    2f9c:	59 f1       	breq	.+86     	; 0x2ff4 <create_chain+0x98>
    2f9e:	8a 89       	ldd	r24, Y+18	; 0x12
    2fa0:	9b 89       	ldd	r25, Y+19	; 0x13
    2fa2:	ac 89       	ldd	r26, Y+20	; 0x14
    2fa4:	bd 89       	ldd	r27, Y+21	; 0x15
    2fa6:	88 16       	cp	r8, r24
    2fa8:	99 06       	cpc	r9, r25
    2faa:	aa 06       	cpc	r10, r26
    2fac:	bb 06       	cpc	r11, r27
    2fae:	30 f1       	brcs	.+76     	; 0x2ffc <create_chain+0xa0>
    2fb0:	81 2c       	mov	r8, r1
    2fb2:	91 2c       	mov	r9, r1
    2fb4:	54 01       	movw	r10, r8
    2fb6:	83 94       	inc	r8
    2fb8:	21 c0       	rjmp	.+66     	; 0x2ffc <create_chain+0xa0>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    2fba:	10 dd       	rcall	.-1504   	; 0x29dc <get_fat>
    2fbc:	6b 01       	movw	r12, r22
    2fbe:	7c 01       	movw	r14, r24
		if (cs < 2) return 1;			/* Invalid value */
    2fc0:	62 30       	cpi	r22, 0x02	; 2
    2fc2:	71 05       	cpc	r23, r1
    2fc4:	81 05       	cpc	r24, r1
    2fc6:	91 05       	cpc	r25, r1
    2fc8:	08 f4       	brcc	.+2      	; 0x2fcc <create_chain+0x70>
    2fca:	8b c0       	rjmp	.+278    	; 0x30e2 <create_chain+0x186>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
    2fcc:	8f ef       	ldi	r24, 0xFF	; 255
    2fce:	c8 16       	cp	r12, r24
    2fd0:	d8 06       	cpc	r13, r24
    2fd2:	e8 06       	cpc	r14, r24
    2fd4:	f8 06       	cpc	r15, r24
    2fd6:	09 f4       	brne	.+2      	; 0x2fda <create_chain+0x7e>
    2fd8:	89 c0       	rjmp	.+274    	; 0x30ec <create_chain+0x190>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    2fda:	8a 89       	ldd	r24, Y+18	; 0x12
    2fdc:	9b 89       	ldd	r25, Y+19	; 0x13
    2fde:	ac 89       	ldd	r26, Y+20	; 0x14
    2fe0:	bd 89       	ldd	r27, Y+21	; 0x15
    2fe2:	c8 16       	cp	r12, r24
    2fe4:	d9 06       	cpc	r13, r25
    2fe6:	ea 06       	cpc	r14, r26
    2fe8:	fb 06       	cpc	r15, r27
    2fea:	08 f4       	brcc	.+2      	; 0x2fee <create_chain+0x92>
    2fec:	84 c0       	rjmp	.+264    	; 0x30f6 <create_chain+0x19a>
		scl = clst;
    2fee:	53 01       	movw	r10, r6
    2ff0:	42 01       	movw	r8, r4
    2ff2:	04 c0       	rjmp	.+8      	; 0x2ffc <create_chain+0xa0>
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
    2ff4:	81 2c       	mov	r8, r1
    2ff6:	91 2c       	mov	r9, r1
    2ff8:	54 01       	movw	r10, r8
    2ffa:	83 94       	inc	r8
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
    2ffc:	75 01       	movw	r14, r10
    2ffe:	64 01       	movw	r12, r8
	for (;;) {
		ncl++;							/* Next cluster */
    3000:	2f ef       	ldi	r18, 0xFF	; 255
    3002:	c2 1a       	sub	r12, r18
    3004:	d2 0a       	sbc	r13, r18
    3006:	e2 0a       	sbc	r14, r18
    3008:	f2 0a       	sbc	r15, r18
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
    300a:	8a 89       	ldd	r24, Y+18	; 0x12
    300c:	9b 89       	ldd	r25, Y+19	; 0x13
    300e:	ac 89       	ldd	r26, Y+20	; 0x14
    3010:	bd 89       	ldd	r27, Y+21	; 0x15
    3012:	c8 16       	cp	r12, r24
    3014:	d9 06       	cpc	r13, r25
    3016:	ea 06       	cpc	r14, r26
    3018:	fb 06       	cpc	r15, r27
    301a:	60 f0       	brcs	.+24     	; 0x3034 <create_chain+0xd8>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    301c:	82 e0       	ldi	r24, 0x02	; 2
    301e:	88 16       	cp	r8, r24
    3020:	91 04       	cpc	r9, r1
    3022:	a1 04       	cpc	r10, r1
    3024:	b1 04       	cpc	r11, r1
    3026:	08 f4       	brcc	.+2      	; 0x302a <create_chain+0xce>
    3028:	6b c0       	rjmp	.+214    	; 0x3100 <create_chain+0x1a4>

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
			ncl = 2;
    302a:	c1 2c       	mov	r12, r1
    302c:	d1 2c       	mov	r13, r1
    302e:	76 01       	movw	r14, r12
    3030:	68 94       	set
    3032:	c1 f8       	bld	r12, 1
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    3034:	b7 01       	movw	r22, r14
    3036:	a6 01       	movw	r20, r12
    3038:	ce 01       	movw	r24, r28
    303a:	d0 dc       	rcall	.-1632   	; 0x29dc <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
    303c:	61 15       	cp	r22, r1
    303e:	71 05       	cpc	r23, r1
    3040:	81 05       	cpc	r24, r1
    3042:	91 05       	cpc	r25, r1
    3044:	99 f0       	breq	.+38     	; 0x306c <create_chain+0x110>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    3046:	6f 3f       	cpi	r22, 0xFF	; 255
    3048:	2f ef       	ldi	r18, 0xFF	; 255
    304a:	72 07       	cpc	r23, r18
    304c:	82 07       	cpc	r24, r18
    304e:	92 07       	cpc	r25, r18
    3050:	09 f4       	brne	.+2      	; 0x3054 <create_chain+0xf8>
    3052:	5b c0       	rjmp	.+182    	; 0x310a <create_chain+0x1ae>
    3054:	61 30       	cpi	r22, 0x01	; 1
    3056:	71 05       	cpc	r23, r1
    3058:	81 05       	cpc	r24, r1
    305a:	91 05       	cpc	r25, r1
    305c:	09 f4       	brne	.+2      	; 0x3060 <create_chain+0x104>
    305e:	5a c0       	rjmp	.+180    	; 0x3114 <create_chain+0x1b8>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    3060:	c8 14       	cp	r12, r8
    3062:	d9 04       	cpc	r13, r9
    3064:	ea 04       	cpc	r14, r10
    3066:	fb 04       	cpc	r15, r11
    3068:	59 f6       	brne	.-106    	; 0x3000 <create_chain+0xa4>
    306a:	59 c0       	rjmp	.+178    	; 0x311e <create_chain+0x1c2>
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    306c:	0f ef       	ldi	r16, 0xFF	; 255
    306e:	1f ef       	ldi	r17, 0xFF	; 255
    3070:	2f ef       	ldi	r18, 0xFF	; 255
    3072:	3f e0       	ldi	r19, 0x0F	; 15
    3074:	b7 01       	movw	r22, r14
    3076:	a6 01       	movw	r20, r12
    3078:	ce 01       	movw	r24, r28
    307a:	4d de       	rcall	.-870    	; 0x2d16 <put_fat>
	if (res == FR_OK && clst != 0) {
    307c:	81 11       	cpse	r24, r1
    307e:	2a c0       	rjmp	.+84     	; 0x30d4 <create_chain+0x178>
    3080:	41 14       	cp	r4, r1
    3082:	51 04       	cpc	r5, r1
    3084:	61 04       	cpc	r6, r1
    3086:	71 04       	cpc	r7, r1
    3088:	41 f0       	breq	.+16     	; 0x309a <create_chain+0x13e>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    308a:	97 01       	movw	r18, r14
    308c:	86 01       	movw	r16, r12
    308e:	b3 01       	movw	r22, r6
    3090:	a2 01       	movw	r20, r4
    3092:	ce 01       	movw	r24, r28
    3094:	40 de       	rcall	.-896    	; 0x2d16 <put_fat>
	}
	if (res == FR_OK) {
    3096:	81 11       	cpse	r24, r1
    3098:	1d c0       	rjmp	.+58     	; 0x30d4 <create_chain+0x178>
		fs->last_clust = ncl;			/* Update FSINFO */
    309a:	ca 86       	std	Y+10, r12	; 0x0a
    309c:	db 86       	std	Y+11, r13	; 0x0b
    309e:	ec 86       	std	Y+12, r14	; 0x0c
    30a0:	fd 86       	std	Y+13, r15	; 0x0d
		if (fs->free_clust != 0xFFFFFFFF) {
    30a2:	8e 85       	ldd	r24, Y+14	; 0x0e
    30a4:	9f 85       	ldd	r25, Y+15	; 0x0f
    30a6:	a8 89       	ldd	r26, Y+16	; 0x10
    30a8:	b9 89       	ldd	r27, Y+17	; 0x11
    30aa:	8f 3f       	cpi	r24, 0xFF	; 255
    30ac:	2f ef       	ldi	r18, 0xFF	; 255
    30ae:	92 07       	cpc	r25, r18
    30b0:	a2 07       	cpc	r26, r18
    30b2:	b2 07       	cpc	r27, r18
    30b4:	c9 f1       	breq	.+114    	; 0x3128 <create_chain+0x1cc>
			fs->free_clust--;
    30b6:	01 97       	sbiw	r24, 0x01	; 1
    30b8:	a1 09       	sbc	r26, r1
    30ba:	b1 09       	sbc	r27, r1
    30bc:	8e 87       	std	Y+14, r24	; 0x0e
    30be:	9f 87       	std	Y+15, r25	; 0x0f
    30c0:	a8 8b       	std	Y+16, r26	; 0x10
    30c2:	b9 8b       	std	Y+17, r27	; 0x11
			fs->fsi_flag |= 1;
    30c4:	8d 81       	ldd	r24, Y+5	; 0x05
    30c6:	81 60       	ori	r24, 0x01	; 1
    30c8:	8d 83       	std	Y+5, r24	; 0x05
    30ca:	6c 2d       	mov	r22, r12
    30cc:	7d 2d       	mov	r23, r13
    30ce:	8e 2d       	mov	r24, r14
    30d0:	9f 2d       	mov	r25, r15
    30d2:	33 c0       	rjmp	.+102    	; 0x313a <create_chain+0x1de>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    30d4:	81 30       	cpi	r24, 0x01	; 1
    30d6:	69 f1       	breq	.+90     	; 0x3132 <create_chain+0x1d6>
    30d8:	61 e0       	ldi	r22, 0x01	; 1
    30da:	70 e0       	ldi	r23, 0x00	; 0
    30dc:	80 e0       	ldi	r24, 0x00	; 0
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	2c c0       	rjmp	.+88     	; 0x313a <create_chain+0x1de>
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
		if (cs < 2) return 1;			/* Invalid value */
    30e2:	61 e0       	ldi	r22, 0x01	; 1
    30e4:	70 e0       	ldi	r23, 0x00	; 0
    30e6:	80 e0       	ldi	r24, 0x00	; 0
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	27 c0       	rjmp	.+78     	; 0x313a <create_chain+0x1de>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
    30ec:	6f ef       	ldi	r22, 0xFF	; 255
    30ee:	7f ef       	ldi	r23, 0xFF	; 255
    30f0:	8f ef       	ldi	r24, 0xFF	; 255
    30f2:	9f ef       	ldi	r25, 0xFF	; 255
    30f4:	22 c0       	rjmp	.+68     	; 0x313a <create_chain+0x1de>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    30f6:	6c 2d       	mov	r22, r12
    30f8:	7d 2d       	mov	r23, r13
    30fa:	8e 2d       	mov	r24, r14
    30fc:	9f 2d       	mov	r25, r15
    30fe:	1d c0       	rjmp	.+58     	; 0x313a <create_chain+0x1de>
	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    3100:	60 e0       	ldi	r22, 0x00	; 0
    3102:	70 e0       	ldi	r23, 0x00	; 0
    3104:	80 e0       	ldi	r24, 0x00	; 0
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	18 c0       	rjmp	.+48     	; 0x313a <create_chain+0x1de>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
    310a:	6f ef       	ldi	r22, 0xFF	; 255
    310c:	7f ef       	ldi	r23, 0xFF	; 255
    310e:	8f ef       	ldi	r24, 0xFF	; 255
    3110:	9f ef       	ldi	r25, 0xFF	; 255
    3112:	13 c0       	rjmp	.+38     	; 0x313a <create_chain+0x1de>
    3114:	61 e0       	ldi	r22, 0x01	; 1
    3116:	70 e0       	ldi	r23, 0x00	; 0
    3118:	80 e0       	ldi	r24, 0x00	; 0
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	0e c0       	rjmp	.+28     	; 0x313a <create_chain+0x1de>
		if (ncl == scl) return 0;		/* No free cluster */
    311e:	60 e0       	ldi	r22, 0x00	; 0
    3120:	70 e0       	ldi	r23, 0x00	; 0
    3122:	80 e0       	ldi	r24, 0x00	; 0
    3124:	90 e0       	ldi	r25, 0x00	; 0
    3126:	09 c0       	rjmp	.+18     	; 0x313a <create_chain+0x1de>
    3128:	6c 2d       	mov	r22, r12
    312a:	7d 2d       	mov	r23, r13
    312c:	8e 2d       	mov	r24, r14
    312e:	9f 2d       	mov	r25, r15
    3130:	04 c0       	rjmp	.+8      	; 0x313a <create_chain+0x1de>
		if (fs->free_clust != 0xFFFFFFFF) {
			fs->free_clust--;
			fs->fsi_flag |= 1;
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    3132:	6f ef       	ldi	r22, 0xFF	; 255
    3134:	7f ef       	ldi	r23, 0xFF	; 255
    3136:	8f ef       	ldi	r24, 0xFF	; 255
    3138:	9f ef       	ldi	r25, 0xFF	; 255
	}

	return ncl;		/* Return new cluster number or error code */
}
    313a:	df 91       	pop	r29
    313c:	cf 91       	pop	r28
    313e:	1f 91       	pop	r17
    3140:	0f 91       	pop	r16
    3142:	ff 90       	pop	r15
    3144:	ef 90       	pop	r14
    3146:	df 90       	pop	r13
    3148:	cf 90       	pop	r12
    314a:	bf 90       	pop	r11
    314c:	af 90       	pop	r10
    314e:	9f 90       	pop	r9
    3150:	8f 90       	pop	r8
    3152:	7f 90       	pop	r7
    3154:	6f 90       	pop	r6
    3156:	5f 90       	pop	r5
    3158:	4f 90       	pop	r4
    315a:	08 95       	ret

0000315c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    315c:	7f 92       	push	r7
    315e:	8f 92       	push	r8
    3160:	9f 92       	push	r9
    3162:	af 92       	push	r10
    3164:	bf 92       	push	r11
    3166:	cf 92       	push	r12
    3168:	df 92       	push	r13
    316a:	ef 92       	push	r14
    316c:	ff 92       	push	r15
    316e:	0f 93       	push	r16
    3170:	1f 93       	push	r17
    3172:	cf 93       	push	r28
    3174:	df 93       	push	r29
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
    3176:	dc 01       	movw	r26, r24
    3178:	14 96       	adiw	r26, 0x04	; 4
    317a:	cd 91       	ld	r28, X+
    317c:	dc 91       	ld	r29, X
    317e:	15 97       	sbiw	r26, 0x05	; 5
    3180:	21 96       	adiw	r28, 0x01	; 1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
    3182:	09 f4       	brne	.+2      	; 0x3186 <dir_next+0x2a>
    3184:	fd c0       	rjmp	.+506    	; 0x3380 <dir_next+0x224>
    3186:	1e 96       	adiw	r26, 0x0e	; 14
    3188:	8d 90       	ld	r8, X+
    318a:	9d 90       	ld	r9, X+
    318c:	ad 90       	ld	r10, X+
    318e:	bc 90       	ld	r11, X
    3190:	51 97       	sbiw	r26, 0x11	; 17
    3192:	81 14       	cp	r8, r1
    3194:	91 04       	cpc	r9, r1
    3196:	a1 04       	cpc	r10, r1
    3198:	b1 04       	cpc	r11, r1
    319a:	09 f4       	brne	.+2      	; 0x319e <dir_next+0x42>
    319c:	f3 c0       	rjmp	.+486    	; 0x3384 <dir_next+0x228>
    319e:	7b 01       	movw	r14, r22
    31a0:	8c 01       	movw	r16, r24
		return FR_NO_FILE;

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
    31a2:	6e 01       	movw	r12, r28
    31a4:	bf e0       	ldi	r27, 0x0F	; 15
    31a6:	cb 22       	and	r12, r27
    31a8:	dd 24       	eor	r13, r13
    31aa:	c1 14       	cp	r12, r1
    31ac:	d1 04       	cpc	r13, r1
    31ae:	09 f0       	breq	.+2      	; 0x31b2 <dir_next+0x56>
    31b0:	d1 c0       	rjmp	.+418    	; 0x3354 <dir_next+0x1f8>
		dp->sect++;					/* Next sector */
    31b2:	ef ef       	ldi	r30, 0xFF	; 255
    31b4:	8e 1a       	sub	r8, r30
    31b6:	9e 0a       	sbc	r9, r30
    31b8:	ae 0a       	sbc	r10, r30
    31ba:	be 0a       	sbc	r11, r30
    31bc:	dc 01       	movw	r26, r24
    31be:	1e 96       	adiw	r26, 0x0e	; 14
    31c0:	8d 92       	st	X+, r8
    31c2:	9d 92       	st	X+, r9
    31c4:	ad 92       	st	X+, r10
    31c6:	bc 92       	st	X, r11
    31c8:	51 97       	sbiw	r26, 0x11	; 17

		if (!dp->clust) {		/* Static table */
    31ca:	1a 96       	adiw	r26, 0x0a	; 10
    31cc:	4d 91       	ld	r20, X+
    31ce:	5d 91       	ld	r21, X+
    31d0:	6d 91       	ld	r22, X+
    31d2:	7c 91       	ld	r23, X
    31d4:	1d 97       	sbiw	r26, 0x0d	; 13
    31d6:	41 15       	cp	r20, r1
    31d8:	51 05       	cpc	r21, r1
    31da:	61 05       	cpc	r22, r1
    31dc:	71 05       	cpc	r23, r1
    31de:	49 f4       	brne	.+18     	; 0x31f2 <dir_next+0x96>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
    31e0:	ed 91       	ld	r30, X+
    31e2:	fc 91       	ld	r31, X
    31e4:	80 85       	ldd	r24, Z+8	; 0x08
    31e6:	91 85       	ldd	r25, Z+9	; 0x09
    31e8:	c8 17       	cp	r28, r24
    31ea:	d9 07       	cpc	r29, r25
    31ec:	08 f0       	brcs	.+2      	; 0x31f0 <dir_next+0x94>
    31ee:	cc c0       	rjmp	.+408    	; 0x3388 <dir_next+0x22c>
    31f0:	b1 c0       	rjmp	.+354    	; 0x3354 <dir_next+0x1f8>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
    31f2:	dc 01       	movw	r26, r24
    31f4:	ed 91       	ld	r30, X+
    31f6:	fc 91       	ld	r31, X
    31f8:	22 81       	ldd	r18, Z+2	; 0x02
    31fa:	30 e0       	ldi	r19, 0x00	; 0
    31fc:	21 50       	subi	r18, 0x01	; 1
    31fe:	31 09       	sbc	r19, r1
    3200:	ce 01       	movw	r24, r28
    3202:	92 95       	swap	r25
    3204:	82 95       	swap	r24
    3206:	8f 70       	andi	r24, 0x0F	; 15
    3208:	89 27       	eor	r24, r25
    320a:	9f 70       	andi	r25, 0x0F	; 15
    320c:	89 27       	eor	r24, r25
    320e:	28 23       	and	r18, r24
    3210:	39 23       	and	r19, r25
    3212:	23 2b       	or	r18, r19
    3214:	09 f0       	breq	.+2      	; 0x3218 <dir_next+0xbc>
    3216:	9e c0       	rjmp	.+316    	; 0x3354 <dir_next+0x1f8>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
    3218:	cf 01       	movw	r24, r30
    321a:	e0 db       	rcall	.-2112   	; 0x29dc <get_fat>
    321c:	4b 01       	movw	r8, r22
    321e:	5c 01       	movw	r10, r24
				if (clst <= 1) return FR_INT_ERR;
    3220:	62 30       	cpi	r22, 0x02	; 2
    3222:	71 05       	cpc	r23, r1
    3224:	81 05       	cpc	r24, r1
    3226:	91 05       	cpc	r25, r1
    3228:	08 f4       	brcc	.+2      	; 0x322c <dir_next+0xd0>
    322a:	b0 c0       	rjmp	.+352    	; 0x338c <dir_next+0x230>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    322c:	6f 3f       	cpi	r22, 0xFF	; 255
    322e:	7f 4f       	sbci	r23, 0xFF	; 255
    3230:	8f 4f       	sbci	r24, 0xFF	; 255
    3232:	9f 4f       	sbci	r25, 0xFF	; 255
    3234:	09 f4       	brne	.+2      	; 0x3238 <dir_next+0xdc>
    3236:	ac c0       	rjmp	.+344    	; 0x3390 <dir_next+0x234>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
    3238:	d8 01       	movw	r26, r16
    323a:	ed 91       	ld	r30, X+
    323c:	fc 91       	ld	r31, X
    323e:	82 89       	ldd	r24, Z+18	; 0x12
    3240:	93 89       	ldd	r25, Z+19	; 0x13
    3242:	a4 89       	ldd	r26, Z+20	; 0x14
    3244:	b5 89       	ldd	r27, Z+21	; 0x15
    3246:	88 16       	cp	r8, r24
    3248:	99 06       	cpc	r9, r25
    324a:	aa 06       	cpc	r10, r26
    324c:	bb 06       	cpc	r11, r27
    324e:	08 f4       	brcc	.+2      	; 0x3252 <dir_next+0xf6>
    3250:	70 c0       	rjmp	.+224    	; 0x3332 <dir_next+0x1d6>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
    3252:	ef 28       	or	r14, r15
    3254:	09 f4       	brne	.+2      	; 0x3258 <dir_next+0xfc>
    3256:	9e c0       	rjmp	.+316    	; 0x3394 <dir_next+0x238>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
    3258:	d8 01       	movw	r26, r16
    325a:	1a 96       	adiw	r26, 0x0a	; 10
    325c:	4d 91       	ld	r20, X+
    325e:	5d 91       	ld	r21, X+
    3260:	6d 91       	ld	r22, X+
    3262:	7c 91       	ld	r23, X
    3264:	1d 97       	sbiw	r26, 0x0d	; 13
    3266:	cf 01       	movw	r24, r30
    3268:	79 de       	rcall	.-782    	; 0x2f5c <create_chain>
    326a:	4b 01       	movw	r8, r22
    326c:	5c 01       	movw	r10, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    326e:	61 15       	cp	r22, r1
    3270:	71 05       	cpc	r23, r1
    3272:	81 05       	cpc	r24, r1
    3274:	91 05       	cpc	r25, r1
    3276:	09 f4       	brne	.+2      	; 0x327a <dir_next+0x11e>
    3278:	8f c0       	rjmp	.+286    	; 0x3398 <dir_next+0x23c>
					if (clst == 1) return FR_INT_ERR;
    327a:	61 30       	cpi	r22, 0x01	; 1
    327c:	71 05       	cpc	r23, r1
    327e:	81 05       	cpc	r24, r1
    3280:	91 05       	cpc	r25, r1
    3282:	09 f4       	brne	.+2      	; 0x3286 <dir_next+0x12a>
    3284:	8b c0       	rjmp	.+278    	; 0x339c <dir_next+0x240>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    3286:	6f 3f       	cpi	r22, 0xFF	; 255
    3288:	7f 4f       	sbci	r23, 0xFF	; 255
    328a:	8f 4f       	sbci	r24, 0xFF	; 255
    328c:	9f 4f       	sbci	r25, 0xFF	; 255
    328e:	09 f4       	brne	.+2      	; 0x3292 <dir_next+0x136>
    3290:	87 c0       	rjmp	.+270    	; 0x33a0 <dir_next+0x244>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
    3292:	d8 01       	movw	r26, r16
    3294:	8d 91       	ld	r24, X+
    3296:	9c 91       	ld	r25, X
    3298:	0e 94 d7 10 	call	0x21ae	; 0x21ae <sync_window>
    329c:	81 11       	cpse	r24, r1
    329e:	82 c0       	rjmp	.+260    	; 0x33a4 <dir_next+0x248>
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
    32a0:	f8 01       	movw	r30, r16
    32a2:	80 81       	ld	r24, Z
    32a4:	91 81       	ldd	r25, Z+1	; 0x01
    32a6:	fc 01       	movw	r30, r24
    32a8:	be 96       	adiw	r30, 0x2e	; 46
    32aa:	82 5d       	subi	r24, 0xD2	; 210
    32ac:	9d 4f       	sbci	r25, 0xFD	; 253
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    32ae:	11 92       	st	Z+, r1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    32b0:	e8 17       	cp	r30, r24
    32b2:	f9 07       	cpc	r31, r25
    32b4:	e1 f7       	brne	.-8      	; 0x32ae <dir_next+0x152>
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
    32b6:	d8 01       	movw	r26, r16
    32b8:	ed 90       	ld	r14, X+
    32ba:	fc 90       	ld	r15, X
    32bc:	b5 01       	movw	r22, r10
    32be:	a4 01       	movw	r20, r8
    32c0:	c7 01       	movw	r24, r14
    32c2:	64 db       	rcall	.-2360   	; 0x298c <clust2sect>
    32c4:	f7 01       	movw	r30, r14
    32c6:	62 a7       	std	Z+42, r22	; 0x2a
    32c8:	73 a7       	std	Z+43, r23	; 0x2b
    32ca:	84 a7       	std	Z+44, r24	; 0x2c
    32cc:	95 a7       	std	Z+45, r25	; 0x2d
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
    32ce:	e1 2c       	mov	r14, r1
    32d0:	f1 2c       	mov	r15, r1
						dp->fs->wflag = 1;
    32d2:	77 24       	eor	r7, r7
    32d4:	73 94       	inc	r7
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
    32d6:	19 c0       	rjmp	.+50     	; 0x330a <dir_next+0x1ae>
						dp->fs->wflag = 1;
    32d8:	74 82       	std	Z+4, r7	; 0x04
						if (sync_window(dp->fs)) return FR_DISK_ERR;
    32da:	d8 01       	movw	r26, r16
    32dc:	8d 91       	ld	r24, X+
    32de:	9c 91       	ld	r25, X
    32e0:	0e 94 d7 10 	call	0x21ae	; 0x21ae <sync_window>
    32e4:	81 11       	cpse	r24, r1
    32e6:	60 c0       	rjmp	.+192    	; 0x33a8 <dir_next+0x24c>
						dp->fs->winsect++;
    32e8:	d8 01       	movw	r26, r16
    32ea:	ed 91       	ld	r30, X+
    32ec:	fc 91       	ld	r31, X
    32ee:	82 a5       	ldd	r24, Z+42	; 0x2a
    32f0:	93 a5       	ldd	r25, Z+43	; 0x2b
    32f2:	a4 a5       	ldd	r26, Z+44	; 0x2c
    32f4:	b5 a5       	ldd	r27, Z+45	; 0x2d
    32f6:	01 96       	adiw	r24, 0x01	; 1
    32f8:	a1 1d       	adc	r26, r1
    32fa:	b1 1d       	adc	r27, r1
    32fc:	82 a7       	std	Z+42, r24	; 0x2a
    32fe:	93 a7       	std	Z+43, r25	; 0x2b
    3300:	a4 a7       	std	Z+44, r26	; 0x2c
    3302:	b5 a7       	std	Z+45, r27	; 0x2d
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
    3304:	bf ef       	ldi	r27, 0xFF	; 255
    3306:	eb 1a       	sub	r14, r27
    3308:	fb 0a       	sbc	r15, r27
    330a:	d8 01       	movw	r26, r16
    330c:	ed 91       	ld	r30, X+
    330e:	fc 91       	ld	r31, X
    3310:	82 81       	ldd	r24, Z+2	; 0x02
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	e8 16       	cp	r14, r24
    3316:	f9 06       	cpc	r15, r25
    3318:	f8 f2       	brcs	.-66     	; 0x32d8 <dir_next+0x17c>
						dp->fs->wflag = 1;
						if (sync_window(dp->fs)) return FR_DISK_ERR;
						dp->fs->winsect++;
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
    331a:	82 a5       	ldd	r24, Z+42	; 0x2a
    331c:	93 a5       	ldd	r25, Z+43	; 0x2b
    331e:	a4 a5       	ldd	r26, Z+44	; 0x2c
    3320:	b5 a5       	ldd	r27, Z+45	; 0x2d
    3322:	8e 19       	sub	r24, r14
    3324:	9f 09       	sbc	r25, r15
    3326:	a1 09       	sbc	r26, r1
    3328:	b1 09       	sbc	r27, r1
    332a:	82 a7       	std	Z+42, r24	; 0x2a
    332c:	93 a7       	std	Z+43, r25	; 0x2b
    332e:	a4 a7       	std	Z+44, r26	; 0x2c
    3330:	b5 a7       	std	Z+45, r27	; 0x2d
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
    3332:	f8 01       	movw	r30, r16
    3334:	82 86       	std	Z+10, r8	; 0x0a
    3336:	93 86       	std	Z+11, r9	; 0x0b
    3338:	a4 86       	std	Z+12, r10	; 0x0c
    333a:	b5 86       	std	Z+13, r11	; 0x0d
				dp->sect = clust2sect(dp->fs, clst);
    333c:	b5 01       	movw	r22, r10
    333e:	a4 01       	movw	r20, r8
    3340:	80 81       	ld	r24, Z
    3342:	91 81       	ldd	r25, Z+1	; 0x01
    3344:	23 db       	rcall	.-2490   	; 0x298c <clust2sect>
    3346:	d8 01       	movw	r26, r16
    3348:	1e 96       	adiw	r26, 0x0e	; 14
    334a:	6d 93       	st	X+, r22
    334c:	7d 93       	st	X+, r23
    334e:	8d 93       	st	X+, r24
    3350:	9c 93       	st	X, r25
    3352:	51 97       	sbiw	r26, 0x11	; 17
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
    3354:	f8 01       	movw	r30, r16
    3356:	d5 83       	std	Z+5, r29	; 0x05
    3358:	c4 83       	std	Z+4, r28	; 0x04
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
    335a:	80 81       	ld	r24, Z
    335c:	91 81       	ldd	r25, Z+1	; 0x01
    335e:	8e 96       	adiw	r24, 0x2e	; 46
    3360:	cc 0c       	add	r12, r12
    3362:	dd 1c       	adc	r13, r13
    3364:	cc 0c       	add	r12, r12
    3366:	dd 1c       	adc	r13, r13
    3368:	cc 0c       	add	r12, r12
    336a:	dd 1c       	adc	r13, r13
    336c:	cc 0c       	add	r12, r12
    336e:	dd 1c       	adc	r13, r13
    3370:	cc 0c       	add	r12, r12
    3372:	dd 1c       	adc	r13, r13
    3374:	c8 0e       	add	r12, r24
    3376:	d9 1e       	adc	r13, r25
    3378:	d3 8a       	std	Z+19, r13	; 0x13
    337a:	c2 8a       	std	Z+18, r12	; 0x12

	return FR_OK;
    337c:	80 e0       	ldi	r24, 0x00	; 0
    337e:	15 c0       	rjmp	.+42     	; 0x33aa <dir_next+0x24e>
#endif


	i = dp->index + 1;
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;
    3380:	84 e0       	ldi	r24, 0x04	; 4
    3382:	13 c0       	rjmp	.+38     	; 0x33aa <dir_next+0x24e>
    3384:	84 e0       	ldi	r24, 0x04	; 4
    3386:	11 c0       	rjmp	.+34     	; 0x33aa <dir_next+0x24e>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
		dp->sect++;					/* Next sector */

		if (!dp->clust) {		/* Static table */
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
				return FR_NO_FILE;
    3388:	84 e0       	ldi	r24, 0x04	; 4
    338a:	0f c0       	rjmp	.+30     	; 0x33aa <dir_next+0x24e>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;
    338c:	82 e0       	ldi	r24, 0x02	; 2
    338e:	0d c0       	rjmp	.+26     	; 0x33aa <dir_next+0x24e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    3390:	81 e0       	ldi	r24, 0x01	; 1
    3392:	0b c0       	rjmp	.+22     	; 0x33aa <dir_next+0x24e>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
    3394:	84 e0       	ldi	r24, 0x04	; 4
    3396:	09 c0       	rjmp	.+18     	; 0x33aa <dir_next+0x24e>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    3398:	87 e0       	ldi	r24, 0x07	; 7
    339a:	07 c0       	rjmp	.+14     	; 0x33aa <dir_next+0x24e>
					if (clst == 1) return FR_INT_ERR;
    339c:	82 e0       	ldi	r24, 0x02	; 2
    339e:	05 c0       	rjmp	.+10     	; 0x33aa <dir_next+0x24e>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    33a0:	81 e0       	ldi	r24, 0x01	; 1
    33a2:	03 c0       	rjmp	.+6      	; 0x33aa <dir_next+0x24e>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
    33a4:	81 e0       	ldi	r24, 0x01	; 1
    33a6:	01 c0       	rjmp	.+2      	; 0x33aa <dir_next+0x24e>
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dp->fs->wflag = 1;
						if (sync_window(dp->fs)) return FR_DISK_ERR;
    33a8:	81 e0       	ldi	r24, 0x01	; 1

	dp->index = (WORD)i;	/* Current index */
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */

	return FR_OK;
}
    33aa:	df 91       	pop	r29
    33ac:	cf 91       	pop	r28
    33ae:	1f 91       	pop	r17
    33b0:	0f 91       	pop	r16
    33b2:	ff 90       	pop	r15
    33b4:	ef 90       	pop	r14
    33b6:	df 90       	pop	r13
    33b8:	cf 90       	pop	r12
    33ba:	bf 90       	pop	r11
    33bc:	af 90       	pop	r10
    33be:	9f 90       	pop	r9
    33c0:	8f 90       	pop	r8
    33c2:	7f 90       	pop	r7
    33c4:	08 95       	ret

000033c6 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
    33c6:	1f 93       	push	r17
    33c8:	cf 93       	push	r28
    33ca:	df 93       	push	r29
    33cc:	00 d0       	rcall	.+0      	; 0x33ce <f_mount+0x8>
    33ce:	00 d0       	rcall	.+0      	; 0x33d0 <f_mount+0xa>
    33d0:	00 d0       	rcall	.+0      	; 0x33d2 <f_mount+0xc>
    33d2:	cd b7       	in	r28, 0x3d	; 61
    33d4:	de b7       	in	r29, 0x3e	; 62
    33d6:	9c 83       	std	Y+4, r25	; 0x04
    33d8:	8b 83       	std	Y+3, r24	; 0x03
    33da:	7e 83       	std	Y+6, r23	; 0x06
    33dc:	6d 83       	std	Y+5, r22	; 0x05
    33de:	14 2f       	mov	r17, r20
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
    33e0:	7a 83       	std	Y+2, r23	; 0x02
    33e2:	69 83       	std	Y+1, r22	; 0x01


	vol = get_ldnumber(&rp);
    33e4:	ce 01       	movw	r24, r28
    33e6:	01 96       	adiw	r24, 0x01	; 1
    33e8:	0e 94 a0 10 	call	0x2140	; 0x2140 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
    33ec:	99 23       	and	r25, r25
    33ee:	34 f1       	brlt	.+76     	; 0x343c <f_mount+0x76>
	cfs = FatFs[vol];					/* Pointer to fs object */
    33f0:	fc 01       	movw	r30, r24
    33f2:	ee 0f       	add	r30, r30
    33f4:	ff 1f       	adc	r31, r31
    33f6:	e3 57       	subi	r30, 0x73	; 115
    33f8:	fc 4f       	sbci	r31, 0xFC	; 252
    33fa:	01 90       	ld	r0, Z+
    33fc:	f0 81       	ld	r31, Z
    33fe:	e0 2d       	mov	r30, r0

	if (cfs) {
    3400:	30 97       	sbiw	r30, 0x00	; 0
    3402:	09 f0       	breq	.+2      	; 0x3406 <f_mount+0x40>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
    3404:	10 82       	st	Z, r1
	}

	if (fs) {
    3406:	eb 81       	ldd	r30, Y+3	; 0x03
    3408:	fc 81       	ldd	r31, Y+4	; 0x04
    340a:	30 97       	sbiw	r30, 0x00	; 0
    340c:	e9 f0       	breq	.+58     	; 0x3448 <f_mount+0x82>
		fs->fs_type = 0;				/* Clear new fs object */
    340e:	10 82       	st	Z, r1
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    3410:	2b 81       	ldd	r18, Y+3	; 0x03
    3412:	3c 81       	ldd	r19, Y+4	; 0x04
    3414:	88 0f       	add	r24, r24
    3416:	99 1f       	adc	r25, r25
    3418:	fc 01       	movw	r30, r24
    341a:	e3 57       	subi	r30, 0x73	; 115
    341c:	fc 4f       	sbci	r31, 0xFC	; 252
    341e:	31 83       	std	Z+1, r19	; 0x01
    3420:	20 83       	st	Z, r18

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    3422:	23 2b       	or	r18, r19
    3424:	69 f0       	breq	.+26     	; 0x3440 <f_mount+0x7a>
    3426:	11 30       	cpi	r17, 0x01	; 1
    3428:	69 f4       	brne	.+26     	; 0x3444 <f_mount+0x7e>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
    342a:	40 e0       	ldi	r20, 0x00	; 0
    342c:	be 01       	movw	r22, r28
    342e:	6b 5f       	subi	r22, 0xFB	; 251
    3430:	7f 4f       	sbci	r23, 0xFF	; 255
    3432:	ce 01       	movw	r24, r28
    3434:	03 96       	adiw	r24, 0x03	; 3
    3436:	0e 94 de 11 	call	0x23bc	; 0x23bc <find_volume>
	LEAVE_FF(fs, res);
    343a:	0e c0       	rjmp	.+28     	; 0x3458 <f_mount+0x92>
	FRESULT res;
	const TCHAR *rp = path;


	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
    343c:	8b e0       	ldi	r24, 0x0B	; 11
    343e:	0c c0       	rjmp	.+24     	; 0x3458 <f_mount+0x92>
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    3440:	80 e0       	ldi	r24, 0x00	; 0
    3442:	0a c0       	rjmp	.+20     	; 0x3458 <f_mount+0x92>
    3444:	80 e0       	ldi	r24, 0x00	; 0
    3446:	08 c0       	rjmp	.+16     	; 0x3458 <f_mount+0x92>
		fs->fs_type = 0;				/* Clear new fs object */
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    3448:	88 0f       	add	r24, r24
    344a:	99 1f       	adc	r25, r25
    344c:	fc 01       	movw	r30, r24
    344e:	e3 57       	subi	r30, 0x73	; 115
    3450:	fc 4f       	sbci	r31, 0xFC	; 252
    3452:	11 82       	std	Z+1, r1	; 0x01
    3454:	10 82       	st	Z, r1

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    3456:	80 e0       	ldi	r24, 0x00	; 0

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
    3458:	26 96       	adiw	r28, 0x06	; 6
    345a:	0f b6       	in	r0, 0x3f	; 63
    345c:	f8 94       	cli
    345e:	de bf       	out	0x3e, r29	; 62
    3460:	0f be       	out	0x3f, r0	; 63
    3462:	cd bf       	out	0x3d, r28	; 61
    3464:	df 91       	pop	r29
    3466:	cf 91       	pop	r28
    3468:	1f 91       	pop	r17
    346a:	08 95       	ret

0000346c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    346c:	2f 92       	push	r2
    346e:	3f 92       	push	r3
    3470:	4f 92       	push	r4
    3472:	5f 92       	push	r5
    3474:	6f 92       	push	r6
    3476:	7f 92       	push	r7
    3478:	8f 92       	push	r8
    347a:	9f 92       	push	r9
    347c:	af 92       	push	r10
    347e:	bf 92       	push	r11
    3480:	cf 92       	push	r12
    3482:	df 92       	push	r13
    3484:	ef 92       	push	r14
    3486:	ff 92       	push	r15
    3488:	0f 93       	push	r16
    348a:	1f 93       	push	r17
    348c:	cf 93       	push	r28
    348e:	df 93       	push	r29
    3490:	cd b7       	in	r28, 0x3d	; 61
    3492:	de b7       	in	r29, 0x3e	; 62
    3494:	ae 97       	sbiw	r28, 0x2e	; 46
    3496:	0f b6       	in	r0, 0x3f	; 63
    3498:	f8 94       	cli
    349a:	de bf       	out	0x3e, r29	; 62
    349c:	0f be       	out	0x3f, r0	; 63
    349e:	cd bf       	out	0x3d, r28	; 61
    34a0:	7c a3       	std	Y+36, r23	; 0x24
    34a2:	6b a3       	std	Y+35, r22	; 0x23
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
    34a4:	00 97       	sbiw	r24, 0x00	; 0
    34a6:	09 f4       	brne	.+2      	; 0x34aa <f_open+0x3e>
    34a8:	92 c2       	rjmp	.+1316   	; 0x39ce <f_open+0x562>
    34aa:	84 2e       	mov	r8, r20
    34ac:	1c 01       	movw	r2, r24
	fp->fs = 0;			/* Clear file object */
    34ae:	dc 01       	movw	r26, r24
    34b0:	1d 92       	st	X+, r1
    34b2:	1c 92       	st	X, r1

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
    34b4:	4e 71       	andi	r20, 0x1E	; 30
    34b6:	be 01       	movw	r22, r28
    34b8:	6d 5d       	subi	r22, 0xDD	; 221
    34ba:	7f 4f       	sbci	r23, 0xFF	; 255
    34bc:	ce 01       	movw	r24, r28
    34be:	01 96       	adiw	r24, 0x01	; 1
    34c0:	0e 94 de 11 	call	0x23bc	; 0x23bc <find_volume>
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
    34c4:	81 11       	cpse	r24, r1
    34c6:	ec c2       	rjmp	.+1496   	; 0x3aa0 <f_open+0x634>
		INIT_BUF(dj);
    34c8:	ce 01       	movw	r24, r28
    34ca:	47 96       	adiw	r24, 0x17	; 23
    34cc:	9e 8b       	std	Y+22, r25	; 0x16
    34ce:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);	/* Follow the file path */
    34d0:	cb a0       	ldd	r12, Y+35	; 0x23
    34d2:	dc a0       	ldd	r13, Y+36	; 0x24
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
    34d4:	f6 01       	movw	r30, r12
    34d6:	80 81       	ld	r24, Z
    34d8:	8f 32       	cpi	r24, 0x2F	; 47
    34da:	11 f0       	breq	.+4      	; 0x34e0 <f_open+0x74>
    34dc:	8c 35       	cpi	r24, 0x5C	; 92
    34de:	19 f4       	brne	.+6      	; 0x34e6 <f_open+0x7a>
		path++;
    34e0:	ff ef       	ldi	r31, 0xFF	; 255
    34e2:	cf 1a       	sub	r12, r31
    34e4:	df 0a       	sbc	r13, r31
	if (!fp) return FR_INVALID_OBJECT;
	fp->fs = 0;			/* Clear file object */

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    34e6:	28 2d       	mov	r18, r8
    34e8:	2f 71       	andi	r18, 0x1F	; 31
    34ea:	2d a7       	std	Y+45, r18	; 0x2d
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
		path++;
	dp->sclust = 0;							/* Always start from the root directory */
    34ec:	1f 82       	std	Y+7, r1	; 0x07
    34ee:	18 86       	std	Y+8, r1	; 0x08
    34f0:	19 86       	std	Y+9, r1	; 0x09
    34f2:	1a 86       	std	Y+10, r1	; 0x0a
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
    34f4:	d6 01       	movw	r26, r12
    34f6:	8c 91       	ld	r24, X
    34f8:	80 32       	cpi	r24, 0x20	; 32
    34fa:	68 f4       	brcc	.+26     	; 0x3516 <f_open+0xaa>
		res = dir_sdi(dp, 0);
    34fc:	60 e0       	ldi	r22, 0x00	; 0
    34fe:	70 e0       	ldi	r23, 0x00	; 0
    3500:	ce 01       	movw	r24, r28
    3502:	01 96       	adiw	r24, 0x01	; 1
    3504:	4e db       	rcall	.-2404   	; 0x2ba2 <dir_sdi>
		dp->dir = 0;
    3506:	1c 8a       	std	Y+20, r1	; 0x14
    3508:	1b 8a       	std	Y+19, r1	; 0x13
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);	/* Follow the file path */
		dir = dj.dir;
    350a:	e1 2c       	mov	r14, r1
    350c:	f1 2c       	mov	r15, r1
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
    350e:	88 23       	and	r24, r24
    3510:	09 f4       	brne	.+2      	; 0x3514 <f_open+0xa8>
    3512:	92 c2       	rjmp	.+1316   	; 0x3a38 <f_open+0x5cc>
    3514:	98 c2       	rjmp	.+1328   	; 0x3a46 <f_open+0x5da>
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    3516:	68 94       	set
    3518:	bb 24       	eor	r11, r11
    351a:	b5 f8       	bld	r11, 5
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    351c:	a1 2c       	mov	r10, r1
    351e:	71 2c       	mov	r7, r1
    3520:	68 94       	set
    3522:	66 24       	eor	r6, r6
    3524:	63 f8       	bld	r6, 3
    3526:	41 2c       	mov	r4, r1
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    3528:	56 2c       	mov	r5, r6
    352a:	4e a6       	std	Y+46, r4	; 0x2e
    352c:	f6 01       	movw	r30, r12
    352e:	03 c0       	rjmp	.+6      	; 0x3536 <f_open+0xca>
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    3530:	fd 01       	movw	r30, r26
    3532:	01 c0       	rjmp	.+2      	; 0x3536 <f_open+0xca>
    3534:	fd 01       	movw	r30, r26
    3536:	9f 01       	movw	r18, r30
    3538:	df 01       	movw	r26, r30
    353a:	8d 91       	ld	r24, X+
    353c:	8f 32       	cpi	r24, 0x2F	; 47
    353e:	c1 f3       	breq	.-16     	; 0x3530 <f_open+0xc4>
    3540:	8c 35       	cpi	r24, 0x5C	; 92
    3542:	c1 f3       	breq	.-16     	; 0x3534 <f_open+0xc8>
	sfn = dp->fn;
    3544:	6d 89       	ldd	r22, Y+21	; 0x15
    3546:	7e 89       	ldd	r23, Y+22	; 0x16
    3548:	db 01       	movw	r26, r22
    354a:	cb 01       	movw	r24, r22
    354c:	0b 96       	adiw	r24, 0x0b	; 11
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    354e:	bd 92       	st	X+, r11
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    3550:	a8 17       	cp	r26, r24
    3552:	b9 07       	cpc	r27, r25
    3554:	e1 f7       	brne	.-8      	; 0x354e <f_open+0xe2>
    3556:	4a 2d       	mov	r20, r10
    3558:	57 2d       	mov	r21, r7
    355a:	c1 2c       	mov	r12, r1
    355c:	d1 2c       	mov	r13, r1
    355e:	e6 2c       	mov	r14, r6
    3560:	f4 2c       	mov	r15, r4
    3562:	91 2c       	mov	r9, r1
    3564:	3a a7       	std	Y+42, r19	; 0x2a
    3566:	29 a7       	std	Y+41, r18	; 0x29
    3568:	7e a3       	std	Y+38, r23	; 0x26
    356a:	6d a3       	std	Y+37, r22	; 0x25
    356c:	39 2d       	mov	r19, r9
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    356e:	bf ef       	ldi	r27, 0xFF	; 255
    3570:	cb 1a       	sub	r12, r27
    3572:	db 0a       	sbc	r13, r27
    3574:	71 91       	ld	r23, Z+
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    3576:	71 32       	cpi	r23, 0x21	; 33
    3578:	08 f4       	brcc	.+2      	; 0x357c <f_open+0x110>
    357a:	3a c2       	rjmp	.+1140   	; 0x39f0 <f_open+0x584>
    357c:	7f 32       	cpi	r23, 0x2F	; 47
    357e:	09 f4       	brne	.+2      	; 0x3582 <f_open+0x116>
    3580:	2e c2       	rjmp	.+1116   	; 0x39de <f_open+0x572>
    3582:	7c 35       	cpi	r23, 0x5C	; 92
    3584:	09 f4       	brne	.+2      	; 0x3588 <f_open+0x11c>
    3586:	2b c2       	rjmp	.+1110   	; 0x39de <f_open+0x572>
		if (c == '.' || i >= ni) {
    3588:	7e 32       	cpi	r23, 0x2E	; 46
    358a:	19 f0       	breq	.+6      	; 0x3592 <f_open+0x126>
    358c:	4e 15       	cp	r20, r14
    358e:	5f 05       	cpc	r21, r15
    3590:	90 f0       	brcs	.+36     	; 0x35b6 <f_open+0x14a>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    3592:	28 e0       	ldi	r18, 0x08	; 8
    3594:	e2 16       	cp	r14, r18
    3596:	f1 04       	cpc	r15, r1
    3598:	09 f0       	breq	.+2      	; 0x359c <f_open+0x130>
    359a:	6e c2       	rjmp	.+1244   	; 0x3a78 <f_open+0x60c>
    359c:	7e 32       	cpi	r23, 0x2E	; 46
    359e:	09 f0       	breq	.+2      	; 0x35a2 <f_open+0x136>
    35a0:	6b c2       	rjmp	.+1238   	; 0x3a78 <f_open+0x60c>
			i = 8; ni = 11;
			b <<= 2; continue;
    35a2:	33 0f       	add	r19, r19
    35a4:	33 0f       	add	r19, r19
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    35a6:	45 2d       	mov	r20, r5
    35a8:	5e a5       	ldd	r21, Y+46	; 0x2e
    35aa:	0f 2e       	mov	r0, r31
    35ac:	fb e0       	ldi	r31, 0x0B	; 11
    35ae:	ef 2e       	mov	r14, r31
    35b0:	f0 2d       	mov	r31, r0
    35b2:	f1 2c       	mov	r15, r1
    35b4:	dc cf       	rjmp	.-72     	; 0x356e <f_open+0x102>
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended character? */
    35b6:	77 23       	and	r23, r23
    35b8:	0c f4       	brge	.+2      	; 0x35bc <f_open+0x150>
    35ba:	5e c2       	rjmp	.+1212   	; 0x3a78 <f_open+0x60c>
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
    35bc:	07 2f       	mov	r16, r23
    35be:	10 e0       	ldi	r17, 0x00	; 0
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    35c0:	02 32       	cpi	r16, 0x22	; 34
    35c2:	11 05       	cpc	r17, r1
    35c4:	09 f4       	brne	.+2      	; 0x35c8 <f_open+0x15c>
    35c6:	2c c2       	rjmp	.+1112   	; 0x3a20 <f_open+0x5b4>
    35c8:	a9 ea       	ldi	r26, 0xA9	; 169
    35ca:	b1 e0       	ldi	r27, 0x01	; 1
    35cc:	8d 91       	ld	r24, X+
    35ce:	88 23       	and	r24, r24
    35d0:	09 f4       	brne	.+2      	; 0x35d4 <f_open+0x168>
    35d2:	ff c1       	rjmp	.+1022   	; 0x39d2 <f_open+0x566>
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	08 17       	cp	r16, r24
    35d8:	19 07       	cpc	r17, r25
    35da:	c1 f7       	brne	.-16     	; 0x35cc <f_open+0x160>
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
    35dc:	86 e0       	ldi	r24, 0x06	; 6
    35de:	25 c2       	rjmp	.+1098   	; 0x3a2a <f_open+0x5be>
			if (IsUpper(c)) {			/* ASCII large capital? */
				b |= 2;
    35e0:	32 60       	ori	r19, 0x02	; 2
    35e2:	06 c0       	rjmp	.+12     	; 0x35f0 <f_open+0x184>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    35e4:	8f e9       	ldi	r24, 0x9F	; 159
    35e6:	87 0f       	add	r24, r23
    35e8:	8a 31       	cpi	r24, 0x1A	; 26
    35ea:	10 f4       	brcc	.+4      	; 0x35f0 <f_open+0x184>
					b |= 1; c -= 0x20;
    35ec:	31 60       	ori	r19, 0x01	; 1
    35ee:	70 52       	subi	r23, 0x20	; 32
				}
			}
			sfn[i++] = c;
    35f0:	ad a1       	ldd	r26, Y+37	; 0x25
    35f2:	be a1       	ldd	r27, Y+38	; 0x26
    35f4:	a4 0f       	add	r26, r20
    35f6:	b5 1f       	adc	r27, r21
    35f8:	7c 93       	st	X, r23
    35fa:	4f 5f       	subi	r20, 0xFF	; 255
    35fc:	5f 4f       	sbci	r21, 0xFF	; 255
    35fe:	b7 cf       	rjmp	.-146    	; 0x356e <f_open+0x102>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    3600:	45 2b       	or	r20, r21
    3602:	09 f4       	brne	.+2      	; 0x3606 <f_open+0x19a>
    3604:	39 c2       	rjmp	.+1138   	; 0x3a78 <f_open+0x60c>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
    3606:	db 01       	movw	r26, r22
    3608:	9c 91       	ld	r25, X
    360a:	95 3e       	cpi	r25, 0xE5	; 229
    360c:	11 f4       	brne	.+4      	; 0x3612 <f_open+0x1a6>
    360e:	e5 e0       	ldi	r30, 0x05	; 5
    3610:	ec 93       	st	X, r30

	if (ni == 8) b <<= 2;
    3612:	f8 e0       	ldi	r31, 0x08	; 8
    3614:	ef 16       	cp	r14, r31
    3616:	f1 04       	cpc	r15, r1
    3618:	11 f4       	brne	.+4      	; 0x361e <f_open+0x1b2>
    361a:	99 0c       	add	r9, r9
    361c:	99 0c       	add	r9, r9
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    361e:	99 2d       	mov	r25, r9
    3620:	93 70       	andi	r25, 0x03	; 3
    3622:	91 30       	cpi	r25, 0x01	; 1
    3624:	09 f4       	brne	.+2      	; 0x3628 <f_open+0x1bc>
    3626:	80 61       	ori	r24, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    3628:	99 2d       	mov	r25, r9
    362a:	9c 70       	andi	r25, 0x0C	; 12
    362c:	94 30       	cpi	r25, 0x04	; 4
    362e:	09 f4       	brne	.+2      	; 0x3632 <f_open+0x1c6>
    3630:	88 60       	ori	r24, 0x08	; 8

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
    3632:	db 01       	movw	r26, r22
    3634:	1b 96       	adiw	r26, 0x0b	; 11
    3636:	8c 93       	st	X, r24
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
    3638:	6a 2d       	mov	r22, r10
    363a:	77 2d       	mov	r23, r7
    363c:	ce 01       	movw	r24, r28
    363e:	01 96       	adiw	r24, 0x01	; 1
    3640:	b0 da       	rcall	.-2720   	; 0x2ba2 <dir_sdi>
	if (res != FR_OK) return res;
    3642:	81 11       	cpse	r24, r1
    3644:	e3 c1       	rjmp	.+966    	; 0x3a0c <f_open+0x5a0>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
    3646:	4f 85       	ldd	r20, Y+15	; 0x0f
    3648:	58 89       	ldd	r21, Y+16	; 0x10
    364a:	69 89       	ldd	r22, Y+17	; 0x11
    364c:	7a 89       	ldd	r23, Y+18	; 0x12
    364e:	89 81       	ldd	r24, Y+1	; 0x01
    3650:	9a 81       	ldd	r25, Y+2	; 0x02
    3652:	0e 94 42 11 	call	0x2284	; 0x2284 <move_window>
		if (res != FR_OK) break;
    3656:	81 11       	cpse	r24, r1
    3658:	d9 c1       	rjmp	.+946    	; 0x3a0c <f_open+0x5a0>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
    365a:	eb 88       	ldd	r14, Y+19	; 0x13
    365c:	fc 88       	ldd	r15, Y+20	; 0x14
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    365e:	f7 01       	movw	r30, r14
    3660:	80 81       	ld	r24, Z
    3662:	88 23       	and	r24, r24
    3664:	d1 f0       	breq	.+52     	; 0x369a <f_open+0x22e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
    3666:	63 85       	ldd	r22, Z+11	; 0x0b
    3668:	63 fd       	sbrc	r22, 3
    366a:	0f c0       	rjmp	.+30     	; 0x368a <f_open+0x21e>
    366c:	4d 89       	ldd	r20, Y+21	; 0x15
    366e:	5e 89       	ldd	r21, Y+22	; 0x16
    3670:	da 01       	movw	r26, r20
    3672:	97 01       	movw	r18, r14
    3674:	25 5f       	subi	r18, 0xF5	; 245
    3676:	3f 4f       	sbci	r19, 0xFF	; 255
    3678:	04 c0       	rjmp	.+8      	; 0x3682 <f_open+0x216>
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    367a:	2e 17       	cp	r18, r30
    367c:	3f 07       	cpc	r19, r31
    367e:	09 f4       	brne	.+2      	; 0x3682 <f_open+0x216>
    3680:	c0 c1       	rjmp	.+896    	; 0x3a02 <f_open+0x596>
    3682:	91 91       	ld	r25, Z+
    3684:	8d 91       	ld	r24, X+
    3686:	98 17       	cp	r25, r24
    3688:	c1 f3       	breq	.-16     	; 0x367a <f_open+0x20e>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
    368a:	6a 2d       	mov	r22, r10
    368c:	77 2d       	mov	r23, r7
    368e:	ce 01       	movw	r24, r28
    3690:	01 96       	adiw	r24, 0x01	; 1
    3692:	64 dd       	rcall	.-1336   	; 0x315c <dir_next>
	} while (res == FR_OK);
    3694:	88 23       	and	r24, r24
    3696:	b9 f2       	breq	.-82     	; 0x3646 <f_open+0x1da>
    3698:	b9 c1       	rjmp	.+882    	; 0x3a0c <f_open+0x5a0>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the sagment name */
			ns = dp->fn[NSFLAG];
    369a:	ed 89       	ldd	r30, Y+21	; 0x15
    369c:	fe 89       	ldd	r31, Y+22	; 0x16
    369e:	93 85       	ldd	r25, Z+11	; 0x0b
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    36a0:	92 fd       	sbrc	r25, 2
    36a2:	c0 c1       	rjmp	.+896    	; 0x3a24 <f_open+0x5b8>
    36a4:	85 e0       	ldi	r24, 0x05	; 5
    36a6:	c1 c1       	rjmp	.+898    	; 0x3a2a <f_open+0x5be>
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			dir = dp->dir;						/* Follow the sub-directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
    36a8:	64 ff       	sbrs	r22, 4
    36aa:	be c1       	rjmp	.+892    	; 0x3a28 <f_open+0x5bc>
	BYTE* dir	/* Pointer to the directory entry */
)
{
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
    36ac:	d7 01       	movw	r26, r14
    36ae:	5a 96       	adiw	r26, 0x1a	; 26
    36b0:	8d 91       	ld	r24, X+
    36b2:	9c 91       	ld	r25, X
    36b4:	5b 97       	sbiw	r26, 0x1b	; 27
    36b6:	a0 e0       	ldi	r26, 0x00	; 0
    36b8:	b0 e0       	ldi	r27, 0x00	; 0
	if (fs->fs_type == FS_FAT32)
    36ba:	e9 81       	ldd	r30, Y+1	; 0x01
    36bc:	fa 81       	ldd	r31, Y+2	; 0x02
    36be:	20 81       	ld	r18, Z
    36c0:	23 30       	cpi	r18, 0x03	; 3
    36c2:	61 f4       	brne	.+24     	; 0x36dc <f_open+0x270>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
    36c4:	f7 01       	movw	r30, r14
    36c6:	44 89       	ldd	r20, Z+20	; 0x14
    36c8:	55 89       	ldd	r21, Z+21	; 0x15
    36ca:	60 e0       	ldi	r22, 0x00	; 0
    36cc:	70 e0       	ldi	r23, 0x00	; 0
    36ce:	ba 01       	movw	r22, r20
    36d0:	55 27       	eor	r21, r21
    36d2:	44 27       	eor	r20, r20
    36d4:	84 2b       	or	r24, r20
    36d6:	95 2b       	or	r25, r21
    36d8:	a6 2b       	or	r26, r22
    36da:	b7 2b       	or	r27, r23
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			dir = dp->dir;						/* Follow the sub-directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
				res = FR_NO_PATH; break;
			}
			dp->sclust = ld_clust(dp->fs, dir);
    36dc:	8f 83       	std	Y+7, r24	; 0x07
    36de:	98 87       	std	Y+8, r25	; 0x08
    36e0:	a9 87       	std	Y+9, r26	; 0x09
    36e2:	ba 87       	std	Y+10, r27	; 0x0a
    36e4:	23 cf       	rjmp	.-442    	; 0x352c <f_open+0xc0>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
			if (res != FR_OK) {					/* No file, create new */
    36e6:	88 23       	and	r24, r24
    36e8:	09 f4       	brne	.+2      	; 0x36ec <f_open+0x280>
    36ea:	53 c0       	rjmp	.+166    	; 0x3792 <f_open+0x326>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    36ec:	84 30       	cpi	r24, 0x04	; 4
    36ee:	09 f0       	breq	.+2      	; 0x36f2 <f_open+0x286>
    36f0:	48 c0       	rjmp	.+144    	; 0x3782 <f_open+0x316>
{
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
    36f2:	60 e0       	ldi	r22, 0x00	; 0
    36f4:	70 e0       	ldi	r23, 0x00	; 0
    36f6:	ce 01       	movw	r24, r28
    36f8:	01 96       	adiw	r24, 0x01	; 1
    36fa:	53 da       	rcall	.-2906   	; 0x2ba2 <dir_sdi>
	if (res == FR_OK) {
    36fc:	81 11       	cpse	r24, r1
    36fe:	18 c0       	rjmp	.+48     	; 0x3730 <f_open+0x2c4>
		n = 0;
		do {
			res = move_window(dp->fs, dp->sect);
    3700:	4f 85       	ldd	r20, Y+15	; 0x0f
    3702:	58 89       	ldd	r21, Y+16	; 0x10
    3704:	69 89       	ldd	r22, Y+17	; 0x11
    3706:	7a 89       	ldd	r23, Y+18	; 0x12
    3708:	89 81       	ldd	r24, Y+1	; 0x01
    370a:	9a 81       	ldd	r25, Y+2	; 0x02
    370c:	0e 94 42 11 	call	0x2284	; 0x2284 <move_window>
			if (res != FR_OK) break;
    3710:	81 11       	cpse	r24, r1
    3712:	0e c0       	rjmp	.+28     	; 0x3730 <f_open+0x2c4>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
    3714:	eb 89       	ldd	r30, Y+19	; 0x13
    3716:	fc 89       	ldd	r31, Y+20	; 0x14
    3718:	80 81       	ld	r24, Z
    371a:	85 3e       	cpi	r24, 0xE5	; 229
    371c:	71 f0       	breq	.+28     	; 0x373a <f_open+0x2ce>
    371e:	88 23       	and	r24, r24
    3720:	61 f0       	breq	.+24     	; 0x373a <f_open+0x2ce>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
    3722:	61 e0       	ldi	r22, 0x01	; 1
    3724:	70 e0       	ldi	r23, 0x00	; 0
    3726:	ce 01       	movw	r24, r28
    3728:	01 96       	adiw	r24, 0x01	; 1
    372a:	18 dd       	rcall	.-1488   	; 0x315c <dir_next>
		} while (res == FR_OK);
    372c:	88 23       	and	r24, r24
    372e:	41 f3       	breq	.-48     	; 0x3700 <f_open+0x294>
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    3730:	84 30       	cpi	r24, 0x04	; 4
    3732:	09 f4       	brne	.+2      	; 0x3736 <f_open+0x2ca>
    3734:	a5 c1       	rjmp	.+842    	; 0x3a80 <f_open+0x614>
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
    3736:	81 11       	cpse	r24, r1
    3738:	a6 c1       	rjmp	.+844    	; 0x3a86 <f_open+0x61a>
		res = move_window(dp->fs, dp->sect);
    373a:	4f 85       	ldd	r20, Y+15	; 0x0f
    373c:	58 89       	ldd	r21, Y+16	; 0x10
    373e:	69 89       	ldd	r22, Y+17	; 0x11
    3740:	7a 89       	ldd	r23, Y+18	; 0x12
    3742:	89 81       	ldd	r24, Y+1	; 0x01
    3744:	9a 81       	ldd	r25, Y+2	; 0x02
    3746:	0e 94 42 11 	call	0x2284	; 0x2284 <move_window>
		if (res == FR_OK) {
    374a:	81 11       	cpse	r24, r1
    374c:	9c c1       	rjmp	.+824    	; 0x3a86 <f_open+0x61a>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
    374e:	eb 89       	ldd	r30, Y+19	; 0x13
    3750:	fc 89       	ldd	r31, Y+20	; 0x14
    3752:	cf 01       	movw	r24, r30
    3754:	80 96       	adiw	r24, 0x20	; 32
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    3756:	11 92       	st	Z+, r1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    3758:	e8 17       	cp	r30, r24
    375a:	f9 07       	cpc	r31, r25
    375c:	e1 f7       	brne	.-8      	; 0x3756 <f_open+0x2ea>

	if (res == FR_OK) {				/* Set SFN entry */
		res = move_window(dp->fs, dp->sect);
		if (res == FR_OK) {
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
    375e:	6d 89       	ldd	r22, Y+21	; 0x15
    3760:	7e 89       	ldd	r23, Y+22	; 0x16
    3762:	4b e0       	ldi	r20, 0x0B	; 11
    3764:	50 e0       	ldi	r21, 0x00	; 0
    3766:	8b 89       	ldd	r24, Y+19	; 0x13
    3768:	9c 89       	ldd	r25, Y+20	; 0x14
    376a:	0e 94 74 10 	call	0x20e8	; 0x20e8 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
    376e:	e9 81       	ldd	r30, Y+1	; 0x01
    3770:	fa 81       	ldd	r31, Y+2	; 0x02
    3772:	81 e0       	ldi	r24, 0x01	; 1
    3774:	84 83       	std	Z+4, r24	; 0x04
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    3776:	fd a5       	ldd	r31, Y+45	; 0x2d
    3778:	f8 60       	ori	r31, 0x08	; 8
    377a:	fd a7       	std	Y+45, r31	; 0x2d
				dir = dj.dir;					/* New entry */
    377c:	eb 88       	ldd	r14, Y+19	; 0x13
    377e:	fc 88       	ldd	r15, Y+20	; 0x14
    3780:	10 c0       	rjmp	.+32     	; 0x37a2 <f_open+0x336>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    3782:	2d a5       	ldd	r18, Y+45	; 0x2d
    3784:	28 60       	ori	r18, 0x08	; 8
    3786:	2d a7       	std	Y+45, r18	; 0x2d
				dir = dj.dir;					/* New entry */
    3788:	eb 88       	ldd	r14, Y+19	; 0x13
    378a:	fc 88       	ldd	r15, Y+20	; 0x14
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    378c:	88 23       	and	r24, r24
    378e:	49 f0       	breq	.+18     	; 0x37a2 <f_open+0x336>
    3790:	87 c1       	rjmp	.+782    	; 0x3aa0 <f_open+0x634>
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
				dir = dj.dir;					/* New entry */
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    3792:	d7 01       	movw	r26, r14
    3794:	1b 96       	adiw	r26, 0x0b	; 11
    3796:	8c 91       	ld	r24, X
    3798:	81 71       	andi	r24, 0x11	; 17
    379a:	09 f0       	breq	.+2      	; 0x379e <f_open+0x332>
    379c:	7a c1       	rjmp	.+756    	; 0x3a92 <f_open+0x626>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    379e:	82 fc       	sbrc	r8, 2
    37a0:	7a c1       	rjmp	.+756    	; 0x3a96 <f_open+0x62a>
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    37a2:	bd a5       	ldd	r27, Y+45	; 0x2d
    37a4:	b3 ff       	sbrs	r27, 3
    37a6:	c4 c0       	rjmp	.+392    	; 0x3930 <f_open+0x4c4>
				dw = GET_FATTIME();				/* Created time */
				ST_DWORD(dir + DIR_CrtTime, dw);
    37a8:	80 e0       	ldi	r24, 0x00	; 0
    37aa:	90 e0       	ldi	r25, 0x00	; 0
    37ac:	a0 ef       	ldi	r26, 0xF0	; 240
    37ae:	be e4       	ldi	r27, 0x4E	; 78
    37b0:	f7 01       	movw	r30, r14
    37b2:	86 87       	std	Z+14, r24	; 0x0e
    37b4:	97 87       	std	Z+15, r25	; 0x0f
    37b6:	a0 8b       	std	Z+16, r26	; 0x10
    37b8:	b1 8b       	std	Z+17, r27	; 0x11
				dir[DIR_Attr] = 0;				/* Reset attribute */
    37ba:	13 86       	std	Z+11, r1	; 0x0b
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
    37bc:	d7 01       	movw	r26, r14
    37be:	14 8e       	std	Z+28, r1	; 0x1c
    37c0:	15 8e       	std	Z+29, r1	; 0x1d
    37c2:	16 8e       	std	Z+30, r1	; 0x1e
    37c4:	17 8e       	std	Z+31, r1	; 0x1f
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
    37c6:	c9 80       	ldd	r12, Y+1	; 0x01
    37c8:	da 80       	ldd	r13, Y+2	; 0x02
	BYTE* dir	/* Pointer to the directory entry */
)
{
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
    37ca:	82 8c       	ldd	r8, Z+26	; 0x1a
    37cc:	93 8c       	ldd	r9, Z+27	; 0x1b
    37ce:	a1 2c       	mov	r10, r1
    37d0:	b1 2c       	mov	r11, r1
	if (fs->fs_type == FS_FAT32)
    37d2:	f6 01       	movw	r30, r12
    37d4:	80 81       	ld	r24, Z
    37d6:	83 30       	cpi	r24, 0x03	; 3
    37d8:	69 f4       	brne	.+26     	; 0x37f4 <f_open+0x388>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
    37da:	54 96       	adiw	r26, 0x14	; 20
    37dc:	8d 91       	ld	r24, X+
    37de:	9c 91       	ld	r25, X
    37e0:	55 97       	sbiw	r26, 0x15	; 21
    37e2:	a0 e0       	ldi	r26, 0x00	; 0
    37e4:	b0 e0       	ldi	r27, 0x00	; 0
    37e6:	dc 01       	movw	r26, r24
    37e8:	99 27       	eor	r25, r25
    37ea:	88 27       	eor	r24, r24
    37ec:	88 2a       	or	r8, r24
    37ee:	99 2a       	or	r9, r25
    37f0:	aa 2a       	or	r10, r26
    37f2:	bb 2a       	or	r11, r27
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir + DIR_FstClusLO, cl);
    37f4:	d7 01       	movw	r26, r14
    37f6:	5b 96       	adiw	r26, 0x1b	; 27
    37f8:	1c 92       	st	X, r1
    37fa:	1e 92       	st	-X, r1
    37fc:	5a 97       	sbiw	r26, 0x1a	; 26
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
    37fe:	55 96       	adiw	r26, 0x15	; 21
    3800:	1c 92       	st	X, r1
    3802:	1e 92       	st	-X, r1
    3804:	54 97       	sbiw	r26, 0x14	; 20
				ST_DWORD(dir + DIR_CrtTime, dw);
				dir[DIR_Attr] = 0;				/* Reset attribute */
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
				st_clust(dir, 0);				/* cluster = 0 */
				dj.fs->wflag = 1;
    3806:	81 e0       	ldi	r24, 0x01	; 1
    3808:	f6 01       	movw	r30, r12
    380a:	84 83       	std	Z+4, r24	; 0x04
				if (cl) {						/* Remove the cluster chain if exist */
    380c:	81 14       	cp	r8, r1
    380e:	91 04       	cpc	r9, r1
    3810:	a1 04       	cpc	r10, r1
    3812:	b1 04       	cpc	r11, r1
    3814:	09 f4       	brne	.+2      	; 0x3818 <f_open+0x3ac>
    3816:	89 c0       	rjmp	.+274    	; 0x392a <f_open+0x4be>
					dw = dj.fs->winsect;
    3818:	22 a5       	ldd	r18, Z+42	; 0x2a
    381a:	33 a5       	ldd	r19, Z+43	; 0x2b
    381c:	44 a5       	ldd	r20, Z+44	; 0x2c
    381e:	55 a5       	ldd	r21, Z+45	; 0x2d
    3820:	29 a7       	std	Y+41, r18	; 0x29
    3822:	3a a7       	std	Y+42, r19	; 0x2a
    3824:	4b a7       	std	Y+43, r20	; 0x2b
    3826:	5c a7       	std	Y+44, r21	; 0x2c
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    3828:	b2 e0       	ldi	r27, 0x02	; 2
    382a:	8b 16       	cp	r8, r27
    382c:	91 04       	cpc	r9, r1
    382e:	a1 04       	cpc	r10, r1
    3830:	b1 04       	cpc	r11, r1
    3832:	08 f4       	brcc	.+2      	; 0x3836 <f_open+0x3ca>
    3834:	12 c1       	rjmp	.+548    	; 0x3a5a <f_open+0x5ee>
    3836:	82 89       	ldd	r24, Z+18	; 0x12
    3838:	93 89       	ldd	r25, Z+19	; 0x13
    383a:	a4 89       	ldd	r26, Z+20	; 0x14
    383c:	b5 89       	ldd	r27, Z+21	; 0x15
    383e:	88 16       	cp	r8, r24
    3840:	99 06       	cpc	r9, r25
    3842:	aa 06       	cpc	r10, r26
    3844:	bb 06       	cpc	r11, r27
    3846:	08 f0       	brcs	.+2      	; 0x384a <f_open+0x3de>
    3848:	0a c1       	rjmp	.+532    	; 0x3a5e <f_open+0x5f2>
    384a:	8d a2       	std	Y+37, r8	; 0x25
    384c:	9e a2       	std	Y+38, r9	; 0x26
    384e:	af a2       	std	Y+39, r10	; 0x27
    3850:	b8 a6       	std	Y+40, r11	; 0x28
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    3852:	4d a1       	ldd	r20, Y+37	; 0x25
    3854:	5e a1       	ldd	r21, Y+38	; 0x26
    3856:	6f a1       	ldd	r22, Y+39	; 0x27
    3858:	78 a5       	ldd	r23, Y+40	; 0x28
    385a:	c6 01       	movw	r24, r12
    385c:	bf d8       	rcall	.-3714   	; 0x29dc <get_fat>
    385e:	2b 01       	movw	r4, r22
    3860:	3c 01       	movw	r6, r24
			if (nxt == 0) break;				/* Empty cluster? */
    3862:	61 15       	cp	r22, r1
    3864:	71 05       	cpc	r23, r1
    3866:	81 05       	cpc	r24, r1
    3868:	91 05       	cpc	r25, r1
    386a:	e1 f1       	breq	.+120    	; 0x38e4 <f_open+0x478>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    386c:	61 30       	cpi	r22, 0x01	; 1
    386e:	71 05       	cpc	r23, r1
    3870:	81 05       	cpc	r24, r1
    3872:	91 05       	cpc	r25, r1
    3874:	09 f4       	brne	.+2      	; 0x3878 <f_open+0x40c>
    3876:	f5 c0       	rjmp	.+490    	; 0x3a62 <f_open+0x5f6>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    3878:	6f 3f       	cpi	r22, 0xFF	; 255
    387a:	7f 4f       	sbci	r23, 0xFF	; 255
    387c:	8f 4f       	sbci	r24, 0xFF	; 255
    387e:	9f 4f       	sbci	r25, 0xFF	; 255
    3880:	09 f4       	brne	.+2      	; 0x3884 <f_open+0x418>
    3882:	f1 c0       	rjmp	.+482    	; 0x3a66 <f_open+0x5fa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    3884:	00 e0       	ldi	r16, 0x00	; 0
    3886:	10 e0       	ldi	r17, 0x00	; 0
    3888:	98 01       	movw	r18, r16
    388a:	4d a1       	ldd	r20, Y+37	; 0x25
    388c:	5e a1       	ldd	r21, Y+38	; 0x26
    388e:	6f a1       	ldd	r22, Y+39	; 0x27
    3890:	78 a5       	ldd	r23, Y+40	; 0x28
    3892:	c6 01       	movw	r24, r12
    3894:	40 da       	rcall	.-2944   	; 0x2d16 <put_fat>
			if (res != FR_OK) break;
    3896:	81 11       	cpse	r24, r1
    3898:	e7 c0       	rjmp	.+462    	; 0x3a68 <f_open+0x5fc>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
    389a:	f6 01       	movw	r30, r12
    389c:	86 85       	ldd	r24, Z+14	; 0x0e
    389e:	97 85       	ldd	r25, Z+15	; 0x0f
    38a0:	a0 89       	ldd	r26, Z+16	; 0x10
    38a2:	b1 89       	ldd	r27, Z+17	; 0x11
    38a4:	8f 3f       	cpi	r24, 0xFF	; 255
    38a6:	ff ef       	ldi	r31, 0xFF	; 255
    38a8:	9f 07       	cpc	r25, r31
    38aa:	af 07       	cpc	r26, r31
    38ac:	bf 07       	cpc	r27, r31
    38ae:	59 f0       	breq	.+22     	; 0x38c6 <f_open+0x45a>
				fs->free_clust++;
    38b0:	01 96       	adiw	r24, 0x01	; 1
    38b2:	a1 1d       	adc	r26, r1
    38b4:	b1 1d       	adc	r27, r1
    38b6:	f6 01       	movw	r30, r12
    38b8:	86 87       	std	Z+14, r24	; 0x0e
    38ba:	97 87       	std	Z+15, r25	; 0x0f
    38bc:	a0 8b       	std	Z+16, r26	; 0x10
    38be:	b1 8b       	std	Z+17, r27	; 0x11
				fs->fsi_flag |= 1;
    38c0:	85 81       	ldd	r24, Z+5	; 0x05
    38c2:	81 60       	ori	r24, 0x01	; 1
    38c4:	85 83       	std	Z+5, r24	; 0x05
    38c6:	4d a2       	std	Y+37, r4	; 0x25
    38c8:	5e a2       	std	Y+38, r5	; 0x26
    38ca:	6f a2       	std	Y+39, r6	; 0x27
    38cc:	78 a6       	std	Y+40, r7	; 0x28
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    38ce:	f6 01       	movw	r30, r12
    38d0:	82 89       	ldd	r24, Z+18	; 0x12
    38d2:	93 89       	ldd	r25, Z+19	; 0x13
    38d4:	a4 89       	ldd	r26, Z+20	; 0x14
    38d6:	b5 89       	ldd	r27, Z+21	; 0x15
    38d8:	48 16       	cp	r4, r24
    38da:	59 06       	cpc	r5, r25
    38dc:	6a 06       	cpc	r6, r26
    38de:	7b 06       	cpc	r7, r27
    38e0:	08 f4       	brcc	.+2      	; 0x38e4 <f_open+0x478>
    38e2:	b7 cf       	rjmp	.-146    	; 0x3852 <f_open+0x3e6>
				dj.fs->wflag = 1;
				if (cl) {						/* Remove the cluster chain if exist */
					dw = dj.fs->winsect;
					res = remove_chain(dj.fs, cl);
					if (res == FR_OK) {
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    38e4:	89 81       	ldd	r24, Y+1	; 0x01
    38e6:	9a 81       	ldd	r25, Y+2	; 0x02
    38e8:	f1 e0       	ldi	r31, 0x01	; 1
    38ea:	8f 1a       	sub	r8, r31
    38ec:	91 08       	sbc	r9, r1
    38ee:	a1 08       	sbc	r10, r1
    38f0:	b1 08       	sbc	r11, r1
    38f2:	dc 01       	movw	r26, r24
    38f4:	1a 96       	adiw	r26, 0x0a	; 10
    38f6:	8d 92       	st	X+, r8
    38f8:	9d 92       	st	X+, r9
    38fa:	ad 92       	st	X+, r10
    38fc:	bc 92       	st	X, r11
    38fe:	1d 97       	sbiw	r26, 0x0d	; 13
						res = move_window(dj.fs, dw);
    3900:	49 a5       	ldd	r20, Y+41	; 0x29
    3902:	5a a5       	ldd	r21, Y+42	; 0x2a
    3904:	6b a5       	ldd	r22, Y+43	; 0x2b
    3906:	7c a5       	ldd	r23, Y+44	; 0x2c
    3908:	0e 94 42 11 	call	0x2284	; 0x2284 <move_window>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
    390c:	88 23       	and	r24, r24
    390e:	69 f0       	breq	.+26     	; 0x392a <f_open+0x4be>
    3910:	c7 c0       	rjmp	.+398    	; 0x3aa0 <f_open+0x634>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
    3912:	81 11       	cpse	r24, r1
    3914:	c5 c0       	rjmp	.+394    	; 0x3aa0 <f_open+0x634>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
    3916:	f7 01       	movw	r30, r14
    3918:	83 85       	ldd	r24, Z+11	; 0x0b
    391a:	84 fd       	sbrc	r24, 4
    391c:	be c0       	rjmp	.+380    	; 0x3a9a <f_open+0x62e>
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    391e:	81 fe       	sbrs	r8, 1
    3920:	02 c0       	rjmp	.+4      	; 0x3926 <f_open+0x4ba>
    3922:	80 fd       	sbrc	r24, 0
    3924:	bc c0       	rjmp	.+376    	; 0x3a9e <f_open+0x632>
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
    3926:	83 fe       	sbrs	r8, 3
    3928:	03 c0       	rjmp	.+6      	; 0x3930 <f_open+0x4c4>
				mode |= FA__WRITTEN;
    392a:	fd a5       	ldd	r31, Y+45	; 0x2d
    392c:	f0 62       	ori	r31, 0x20	; 32
    392e:	fd a7       	std	Y+45, r31	; 0x2d
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    3930:	e9 81       	ldd	r30, Y+1	; 0x01
    3932:	fa 81       	ldd	r31, Y+2	; 0x02
    3934:	82 a5       	ldd	r24, Z+42	; 0x2a
    3936:	93 a5       	ldd	r25, Z+43	; 0x2b
    3938:	a4 a5       	ldd	r26, Z+44	; 0x2c
    393a:	b5 a5       	ldd	r27, Z+45	; 0x2d
    393c:	f1 01       	movw	r30, r2
    393e:	82 8f       	std	Z+26, r24	; 0x1a
    3940:	93 8f       	std	Z+27, r25	; 0x1b
    3942:	a4 8f       	std	Z+28, r26	; 0x1c
    3944:	b5 8f       	std	Z+29, r27	; 0x1d
			fp->dir_ptr = dir;
    3946:	f7 8e       	std	Z+31, r15	; 0x1f
    3948:	e6 8e       	std	Z+30, r14	; 0x1e
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
    394a:	ed a5       	ldd	r30, Y+45	; 0x2d
    394c:	d1 01       	movw	r26, r2
    394e:	14 96       	adiw	r26, 0x04	; 4
    3950:	ec 93       	st	X, r30
    3952:	14 97       	sbiw	r26, 0x04	; 4
			fp->err = 0;						/* Clear error flag */
    3954:	15 96       	adiw	r26, 0x05	; 5
    3956:	1c 92       	st	X, r1
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
    3958:	09 81       	ldd	r16, Y+1	; 0x01
    395a:	1a 81       	ldd	r17, Y+2	; 0x02
	BYTE* dir	/* Pointer to the directory entry */
)
{
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
    395c:	d7 01       	movw	r26, r14
    395e:	5a 96       	adiw	r26, 0x1a	; 26
    3960:	8d 91       	ld	r24, X+
    3962:	9c 91       	ld	r25, X
    3964:	5b 97       	sbiw	r26, 0x1b	; 27
    3966:	a0 e0       	ldi	r26, 0x00	; 0
    3968:	b0 e0       	ldi	r27, 0x00	; 0
	if (fs->fs_type == FS_FAT32)
    396a:	f8 01       	movw	r30, r16
    396c:	20 81       	ld	r18, Z
    396e:	23 30       	cpi	r18, 0x03	; 3
    3970:	61 f4       	brne	.+24     	; 0x398a <f_open+0x51e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
    3972:	f7 01       	movw	r30, r14
    3974:	44 89       	ldd	r20, Z+20	; 0x14
    3976:	55 89       	ldd	r21, Z+21	; 0x15
    3978:	60 e0       	ldi	r22, 0x00	; 0
    397a:	70 e0       	ldi	r23, 0x00	; 0
    397c:	ba 01       	movw	r22, r20
    397e:	55 27       	eor	r21, r21
    3980:	44 27       	eor	r20, r20
    3982:	84 2b       	or	r24, r20
    3984:	95 2b       	or	r25, r21
    3986:	a6 2b       	or	r26, r22
    3988:	b7 2b       	or	r27, r23
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
			fp->err = 0;						/* Clear error flag */
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
    398a:	f1 01       	movw	r30, r2
    398c:	86 87       	std	Z+14, r24	; 0x0e
    398e:	97 87       	std	Z+15, r25	; 0x0f
    3990:	a0 8b       	std	Z+16, r26	; 0x10
    3992:	b1 8b       	std	Z+17, r27	; 0x11
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
    3994:	f7 01       	movw	r30, r14
    3996:	84 8d       	ldd	r24, Z+28	; 0x1c
    3998:	95 8d       	ldd	r25, Z+29	; 0x1d
    399a:	a6 8d       	ldd	r26, Z+30	; 0x1e
    399c:	b7 8d       	ldd	r27, Z+31	; 0x1f
    399e:	f1 01       	movw	r30, r2
    39a0:	82 87       	std	Z+10, r24	; 0x0a
    39a2:	93 87       	std	Z+11, r25	; 0x0b
    39a4:	a4 87       	std	Z+12, r26	; 0x0c
    39a6:	b5 87       	std	Z+13, r27	; 0x0d
			fp->fptr = 0;						/* File pointer */
    39a8:	16 82       	std	Z+6, r1	; 0x06
    39aa:	17 82       	std	Z+7, r1	; 0x07
    39ac:	10 86       	std	Z+8, r1	; 0x08
    39ae:	11 86       	std	Z+9, r1	; 0x09
			fp->dsect = 0;
    39b0:	16 8a       	std	Z+22, r1	; 0x16
    39b2:	17 8a       	std	Z+23, r1	; 0x17
    39b4:	10 8e       	std	Z+24, r1	; 0x18
    39b6:	11 8e       	std	Z+25, r1	; 0x19
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
    39b8:	11 83       	std	Z+1, r17	; 0x01
    39ba:	00 83       	st	Z, r16
			fp->id = fp->fs->id;
    39bc:	d8 01       	movw	r26, r16
    39be:	16 96       	adiw	r26, 0x06	; 6
    39c0:	8d 91       	ld	r24, X+
    39c2:	9c 91       	ld	r25, X
    39c4:	17 97       	sbiw	r26, 0x07	; 7
    39c6:	93 83       	std	Z+3, r25	; 0x03
    39c8:	82 83       	std	Z+2, r24	; 0x02
    39ca:	80 e0       	ldi	r24, 0x00	; 0
    39cc:	69 c0       	rjmp	.+210    	; 0x3aa0 <f_open+0x634>
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
    39ce:	89 e0       	ldi	r24, 0x09	; 9
    39d0:	67 c0       	rjmp	.+206    	; 0x3aa0 <f_open+0x634>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    39d2:	8f eb       	ldi	r24, 0xBF	; 191
    39d4:	87 0f       	add	r24, r23
    39d6:	8a 31       	cpi	r24, 0x1A	; 26
    39d8:	08 f4       	brcc	.+2      	; 0x39dc <f_open+0x570>
    39da:	02 ce       	rjmp	.-1020   	; 0x35e0 <f_open+0x174>
    39dc:	03 ce       	rjmp	.-1018   	; 0x35e4 <f_open+0x178>
    39de:	6d a1       	ldd	r22, Y+37	; 0x25
    39e0:	7e a1       	ldd	r23, Y+38	; 0x26
    39e2:	93 2e       	mov	r9, r19
    39e4:	29 a5       	ldd	r18, Y+41	; 0x29
    39e6:	3a a5       	ldd	r19, Y+42	; 0x2a
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    39e8:	c2 0e       	add	r12, r18
    39ea:	d3 1e       	adc	r13, r19
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    39ec:	80 e0       	ldi	r24, 0x00	; 0
    39ee:	08 ce       	rjmp	.-1008   	; 0x3600 <f_open+0x194>
    39f0:	6d a1       	ldd	r22, Y+37	; 0x25
    39f2:	7e a1       	ldd	r23, Y+38	; 0x26
    39f4:	93 2e       	mov	r9, r19
    39f6:	29 a5       	ldd	r18, Y+41	; 0x29
    39f8:	3a a5       	ldd	r19, Y+42	; 0x2a
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    39fa:	c2 0e       	add	r12, r18
    39fc:	d3 1e       	adc	r13, r19
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    39fe:	84 e0       	ldi	r24, 0x04	; 4
    3a00:	ff cd       	rjmp	.-1026   	; 0x3600 <f_open+0x194>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
    3a02:	fa 01       	movw	r30, r20
    3a04:	83 85       	ldd	r24, Z+11	; 0x0b
    3a06:	82 ff       	sbrs	r24, 2
    3a08:	4f ce       	rjmp	.-866    	; 0x36a8 <f_open+0x23c>
    3a0a:	06 c0       	rjmp	.+12     	; 0x3a18 <f_open+0x5ac>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the sagment name */
			ns = dp->fn[NSFLAG];
    3a0c:	ed 89       	ldd	r30, Y+21	; 0x15
    3a0e:	fe 89       	ldd	r31, Y+22	; 0x16
    3a10:	93 85       	ldd	r25, Z+11	; 0x0b
			if (res != FR_OK) {				/* Failed to find the object */
				if (res == FR_NO_FILE) {	/* Object is not found */
    3a12:	84 30       	cpi	r24, 0x04	; 4
    3a14:	51 f4       	brne	.+20     	; 0x3a2a <f_open+0x5be>
    3a16:	44 ce       	rjmp	.-888    	; 0x36a0 <f_open+0x234>
		INIT_BUF(dj);
		res = follow_path(&dj, path);	/* Follow the file path */
		dir = dj.dir;
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
			if (!dir)	/* Default directory itself */
    3a18:	e1 14       	cp	r14, r1
    3a1a:	f1 04       	cpc	r15, r1
    3a1c:	c9 f4       	brne	.+50     	; 0x3a50 <f_open+0x5e4>
    3a1e:	0c c0       	rjmp	.+24     	; 0x3a38 <f_open+0x5cc>
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
    3a20:	86 e0       	ldi	r24, 0x06	; 6
    3a22:	03 c0       	rjmp	.+6      	; 0x3a2a <f_open+0x5be>
		dp->dir = 0;
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the sagment name */
    3a24:	84 e0       	ldi	r24, 0x04	; 4
    3a26:	01 c0       	rjmp	.+2      	; 0x3a2a <f_open+0x5be>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			dir = dp->dir;						/* Follow the sub-directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
				res = FR_NO_PATH; break;
    3a28:	85 e0       	ldi	r24, 0x05	; 5
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);	/* Follow the file path */
		dir = dj.dir;
    3a2a:	eb 88       	ldd	r14, Y+19	; 0x13
    3a2c:	fc 88       	ldd	r15, Y+20	; 0x14
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    3a2e:	98 2d       	mov	r25, r8
    3a30:	9c 71       	andi	r25, 0x1C	; 28
    3a32:	09 f0       	breq	.+2      	; 0x3a36 <f_open+0x5ca>
    3a34:	58 ce       	rjmp	.-848    	; 0x36e6 <f_open+0x27a>
    3a36:	6d cf       	rjmp	.-294    	; 0x3912 <f_open+0x4a6>
    3a38:	18 2d       	mov	r17, r8
    3a3a:	1c 71       	andi	r17, 0x1C	; 28
    3a3c:	19 f5       	brne	.+70     	; 0x3a84 <f_open+0x618>
    3a3e:	e1 2c       	mov	r14, r1
    3a40:	f1 2c       	mov	r15, r1
		res = follow_path(&dj, path);	/* Follow the file path */
		dir = dj.dir;
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
			if (!dir)	/* Default directory itself */
				res = FR_INVALID_NAME;
    3a42:	86 e0       	ldi	r24, 0x06	; 6
    3a44:	15 c0       	rjmp	.+42     	; 0x3a70 <f_open+0x604>
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    3a46:	18 2d       	mov	r17, r8
    3a48:	1c 71       	andi	r17, 0x1C	; 28
    3a4a:	09 f0       	breq	.+2      	; 0x3a4e <f_open+0x5e2>
    3a4c:	4f ce       	rjmp	.-866    	; 0x36ec <f_open+0x280>
    3a4e:	10 c0       	rjmp	.+32     	; 0x3a70 <f_open+0x604>
    3a50:	88 2d       	mov	r24, r8
    3a52:	8c 71       	andi	r24, 0x1C	; 28
    3a54:	09 f0       	breq	.+2      	; 0x3a58 <f_open+0x5ec>
    3a56:	9d ce       	rjmp	.-710    	; 0x3792 <f_open+0x326>
    3a58:	5e cf       	rjmp	.-324    	; 0x3916 <f_open+0x4aa>
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
    3a5a:	82 e0       	ldi	r24, 0x02	; 2
    3a5c:	05 c0       	rjmp	.+10     	; 0x3a68 <f_open+0x5fc>
    3a5e:	82 e0       	ldi	r24, 0x02	; 2
    3a60:	03 c0       	rjmp	.+6      	; 0x3a68 <f_open+0x5fc>
	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    3a62:	82 e0       	ldi	r24, 0x02	; 2
    3a64:	01 c0       	rjmp	.+2      	; 0x3a68 <f_open+0x5fc>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    3a66:	81 e0       	ldi	r24, 0x01	; 1
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
    3a68:	88 23       	and	r24, r24
    3a6a:	09 f4       	brne	.+2      	; 0x3a6e <f_open+0x602>
    3a6c:	5e cf       	rjmp	.-324    	; 0x392a <f_open+0x4be>
    3a6e:	18 c0       	rjmp	.+48     	; 0x3aa0 <f_open+0x634>
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
    3a70:	88 23       	and	r24, r24
    3a72:	09 f4       	brne	.+2      	; 0x3a76 <f_open+0x60a>
    3a74:	6a cf       	rjmp	.-300    	; 0x394a <f_open+0x4de>
    3a76:	14 c0       	rjmp	.+40     	; 0x3aa0 <f_open+0x634>
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);	/* Follow the file path */
		dir = dj.dir;
    3a78:	eb 88       	ldd	r14, Y+19	; 0x13
    3a7a:	fc 88       	ldd	r15, Y+20	; 0x14
    3a7c:	86 e0       	ldi	r24, 0x06	; 6
    3a7e:	e3 cf       	rjmp	.-58     	; 0x3a46 <f_open+0x5da>
				n = 0;					/* Not a blank entry. Restart to search */
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
		} while (res == FR_OK);
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    3a80:	87 e0       	ldi	r24, 0x07	; 7
    3a82:	01 c0       	rjmp	.+2      	; 0x3a86 <f_open+0x61a>
		res = follow_path(&dj, path);	/* Follow the file path */
		dir = dj.dir;
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
			if (!dir)	/* Default directory itself */
				res = FR_INVALID_NAME;
    3a84:	86 e0       	ldi	r24, 0x06	; 6
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    3a86:	fd a5       	ldd	r31, Y+45	; 0x2d
    3a88:	f8 60       	ori	r31, 0x08	; 8
    3a8a:	fd a7       	std	Y+45, r31	; 0x2d
				dir = dj.dir;					/* New entry */
    3a8c:	eb 88       	ldd	r14, Y+19	; 0x13
    3a8e:	fc 88       	ldd	r15, Y+20	; 0x14
    3a90:	ef cf       	rjmp	.-34     	; 0x3a70 <f_open+0x604>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
					res = FR_DENIED;
    3a92:	87 e0       	ldi	r24, 0x07	; 7
    3a94:	05 c0       	rjmp	.+10     	; 0x3aa0 <f_open+0x634>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
    3a96:	88 e0       	ldi	r24, 0x08	; 8
    3a98:	03 c0       	rjmp	.+6      	; 0x3aa0 <f_open+0x634>
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
					res = FR_NO_FILE;
    3a9a:	84 e0       	ldi	r24, 0x04	; 4
    3a9c:	01 c0       	rjmp	.+2      	; 0x3aa0 <f_open+0x634>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
    3a9e:	87 e0       	ldi	r24, 0x07	; 7
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
    3aa0:	ae 96       	adiw	r28, 0x2e	; 46
    3aa2:	0f b6       	in	r0, 0x3f	; 63
    3aa4:	f8 94       	cli
    3aa6:	de bf       	out	0x3e, r29	; 62
    3aa8:	0f be       	out	0x3f, r0	; 63
    3aaa:	cd bf       	out	0x3d, r28	; 61
    3aac:	df 91       	pop	r29
    3aae:	cf 91       	pop	r28
    3ab0:	1f 91       	pop	r17
    3ab2:	0f 91       	pop	r16
    3ab4:	ff 90       	pop	r15
    3ab6:	ef 90       	pop	r14
    3ab8:	df 90       	pop	r13
    3aba:	cf 90       	pop	r12
    3abc:	bf 90       	pop	r11
    3abe:	af 90       	pop	r10
    3ac0:	9f 90       	pop	r9
    3ac2:	8f 90       	pop	r8
    3ac4:	7f 90       	pop	r7
    3ac6:	6f 90       	pop	r6
    3ac8:	5f 90       	pop	r5
    3aca:	4f 90       	pop	r4
    3acc:	3f 90       	pop	r3
    3ace:	2f 90       	pop	r2
    3ad0:	08 95       	ret

00003ad2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
    3ad2:	2f 92       	push	r2
    3ad4:	3f 92       	push	r3
    3ad6:	4f 92       	push	r4
    3ad8:	5f 92       	push	r5
    3ada:	6f 92       	push	r6
    3adc:	7f 92       	push	r7
    3ade:	8f 92       	push	r8
    3ae0:	9f 92       	push	r9
    3ae2:	af 92       	push	r10
    3ae4:	bf 92       	push	r11
    3ae6:	cf 92       	push	r12
    3ae8:	df 92       	push	r13
    3aea:	ef 92       	push	r14
    3aec:	ff 92       	push	r15
    3aee:	0f 93       	push	r16
    3af0:	1f 93       	push	r17
    3af2:	cf 93       	push	r28
    3af4:	df 93       	push	r29
    3af6:	ec 01       	movw	r28, r24
    3af8:	4b 01       	movw	r8, r22
    3afa:	6a 01       	movw	r12, r20
    3afc:	59 01       	movw	r10, r18
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
    3afe:	f9 01       	movw	r30, r18
    3b00:	11 82       	std	Z+1, r1	; 0x01
    3b02:	10 82       	st	Z, r1

	res = validate(fp);						/* Check validity */
    3b04:	0e 94 b9 11 	call	0x2372	; 0x2372 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    3b08:	81 11       	cpse	r24, r1
    3b0a:	6a c1       	rjmp	.+724    	; 0x3de0 <f_write+0x30e>
	if (fp->err)							/* Check error */
    3b0c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b0e:	81 11       	cpse	r24, r1
    3b10:	67 c1       	rjmp	.+718    	; 0x3de0 <f_write+0x30e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    3b12:	8c 81       	ldd	r24, Y+4	; 0x04
    3b14:	81 ff       	sbrs	r24, 1
    3b16:	63 c1       	rjmp	.+710    	; 0x3dde <f_write+0x30c>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
    3b18:	8e 81       	ldd	r24, Y+6	; 0x06
    3b1a:	9f 81       	ldd	r25, Y+7	; 0x07
    3b1c:	a8 85       	ldd	r26, Y+8	; 0x08
    3b1e:	b9 85       	ldd	r27, Y+9	; 0x09
    3b20:	ac 01       	movw	r20, r24
    3b22:	bd 01       	movw	r22, r26
    3b24:	4c 0d       	add	r20, r12
    3b26:	5d 1d       	adc	r21, r13
    3b28:	61 1d       	adc	r22, r1
    3b2a:	71 1d       	adc	r23, r1
    3b2c:	48 17       	cp	r20, r24
    3b2e:	59 07       	cpc	r21, r25
    3b30:	6a 07       	cpc	r22, r26
    3b32:	7b 07       	cpc	r23, r27
    3b34:	08 f4       	brcc	.+2      	; 0x3b38 <f_write+0x66>
    3b36:	3d c1       	rjmp	.+634    	; 0x3db2 <f_write+0x2e0>

	for ( ;  btw;							/* Repeat until all data written */
    3b38:	c1 14       	cp	r12, r1
    3b3a:	d1 04       	cpc	r13, r1
    3b3c:	09 f4       	brne	.+2      	; 0x3b40 <f_write+0x6e>
    3b3e:	39 c1       	rjmp	.+626    	; 0x3db2 <f_write+0x2e0>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    3b40:	4e 81       	ldd	r20, Y+6	; 0x06
    3b42:	5f 81       	ldd	r21, Y+7	; 0x07
    3b44:	68 85       	ldd	r22, Y+8	; 0x08
    3b46:	79 85       	ldd	r23, Y+9	; 0x09
    3b48:	db 01       	movw	r26, r22
    3b4a:	ca 01       	movw	r24, r20
    3b4c:	91 70       	andi	r25, 0x01	; 1
    3b4e:	aa 27       	eor	r26, r26
    3b50:	bb 27       	eor	r27, r27
    3b52:	89 2b       	or	r24, r25
    3b54:	8a 2b       	or	r24, r26
    3b56:	8b 2b       	or	r24, r27
    3b58:	09 f0       	breq	.+2      	; 0x3b5c <f_write+0x8a>
    3b5a:	e5 c0       	rjmp	.+458    	; 0x3d26 <f_write+0x254>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    3b5c:	e8 81       	ld	r30, Y
    3b5e:	f9 81       	ldd	r31, Y+1	; 0x01
    3b60:	12 81       	ldd	r17, Z+2	; 0x02
    3b62:	11 50       	subi	r17, 0x01	; 1
    3b64:	db 01       	movw	r26, r22
    3b66:	ca 01       	movw	r24, r20
    3b68:	07 2e       	mov	r0, r23
    3b6a:	79 e0       	ldi	r23, 0x09	; 9
    3b6c:	b6 95       	lsr	r27
    3b6e:	a7 95       	ror	r26
    3b70:	97 95       	ror	r25
    3b72:	87 95       	ror	r24
    3b74:	7a 95       	dec	r23
    3b76:	d1 f7       	brne	.-12     	; 0x3b6c <f_write+0x9a>
    3b78:	70 2d       	mov	r23, r0
    3b7a:	18 23       	and	r17, r24
			if (!csect) {					/* On the cluster boundary? */
    3b7c:	09 f0       	breq	.+2      	; 0x3b80 <f_write+0xae>
    3b7e:	40 c0       	rjmp	.+128    	; 0x3c00 <f_write+0x12e>
				if (fp->fptr == 0) {		/* On the top of the file? */
    3b80:	45 2b       	or	r20, r21
    3b82:	46 2b       	or	r20, r22
    3b84:	47 2b       	or	r20, r23
    3b86:	79 f4       	brne	.+30     	; 0x3ba6 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
    3b88:	6e 85       	ldd	r22, Y+14	; 0x0e
    3b8a:	7f 85       	ldd	r23, Y+15	; 0x0f
    3b8c:	88 89       	ldd	r24, Y+16	; 0x10
    3b8e:	99 89       	ldd	r25, Y+17	; 0x11
					if (clst == 0)			/* When no cluster is allocated, */
    3b90:	61 15       	cp	r22, r1
    3b92:	71 05       	cpc	r23, r1
    3b94:	81 05       	cpc	r24, r1
    3b96:	91 05       	cpc	r25, r1
    3b98:	91 f4       	brne	.+36     	; 0x3bbe <f_write+0xec>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    3b9a:	40 e0       	ldi	r20, 0x00	; 0
    3b9c:	50 e0       	ldi	r21, 0x00	; 0
    3b9e:	ba 01       	movw	r22, r20
    3ba0:	cf 01       	movw	r24, r30
    3ba2:	dc d9       	rcall	.-3144   	; 0x2f5c <create_chain>
    3ba4:	06 c0       	rjmp	.+12     	; 0x3bb2 <f_write+0xe0>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    3ba6:	4a 89       	ldd	r20, Y+18	; 0x12
    3ba8:	5b 89       	ldd	r21, Y+19	; 0x13
    3baa:	6c 89       	ldd	r22, Y+20	; 0x14
    3bac:	7d 89       	ldd	r23, Y+21	; 0x15
    3bae:	cf 01       	movw	r24, r30
    3bb0:	d5 d9       	rcall	.-3158   	; 0x2f5c <create_chain>
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    3bb2:	61 15       	cp	r22, r1
    3bb4:	71 05       	cpc	r23, r1
    3bb6:	81 05       	cpc	r24, r1
    3bb8:	91 05       	cpc	r25, r1
    3bba:	09 f4       	brne	.+2      	; 0x3bbe <f_write+0xec>
    3bbc:	fa c0       	rjmp	.+500    	; 0x3db2 <f_write+0x2e0>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    3bbe:	61 30       	cpi	r22, 0x01	; 1
    3bc0:	71 05       	cpc	r23, r1
    3bc2:	81 05       	cpc	r24, r1
    3bc4:	91 05       	cpc	r25, r1
    3bc6:	19 f4       	brne	.+6      	; 0x3bce <f_write+0xfc>
    3bc8:	82 e0       	ldi	r24, 0x02	; 2
    3bca:	8d 83       	std	Y+5, r24	; 0x05
    3bcc:	09 c1       	rjmp	.+530    	; 0x3de0 <f_write+0x30e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3bce:	6f 3f       	cpi	r22, 0xFF	; 255
    3bd0:	ff ef       	ldi	r31, 0xFF	; 255
    3bd2:	7f 07       	cpc	r23, r31
    3bd4:	8f 07       	cpc	r24, r31
    3bd6:	9f 07       	cpc	r25, r31
    3bd8:	19 f4       	brne	.+6      	; 0x3be0 <f_write+0x10e>
    3bda:	81 e0       	ldi	r24, 0x01	; 1
    3bdc:	8d 83       	std	Y+5, r24	; 0x05
    3bde:	00 c1       	rjmp	.+512    	; 0x3de0 <f_write+0x30e>
				fp->clust = clst;			/* Update current cluster */
    3be0:	6a 8b       	std	Y+18, r22	; 0x12
    3be2:	7b 8b       	std	Y+19, r23	; 0x13
    3be4:	8c 8b       	std	Y+20, r24	; 0x14
    3be6:	9d 8b       	std	Y+21, r25	; 0x15
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
    3be8:	4e 84       	ldd	r4, Y+14	; 0x0e
    3bea:	5f 84       	ldd	r5, Y+15	; 0x0f
    3bec:	68 88       	ldd	r6, Y+16	; 0x10
    3bee:	79 88       	ldd	r7, Y+17	; 0x11
    3bf0:	45 28       	or	r4, r5
    3bf2:	46 28       	or	r4, r6
    3bf4:	47 28       	or	r4, r7
    3bf6:	21 f4       	brne	.+8      	; 0x3c00 <f_write+0x12e>
    3bf8:	6e 87       	std	Y+14, r22	; 0x0e
    3bfa:	7f 87       	std	Y+15, r23	; 0x0f
    3bfc:	88 8b       	std	Y+16, r24	; 0x10
    3bfe:	99 8b       	std	Y+17, r25	; 0x11
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
    3c00:	e8 81       	ld	r30, Y
    3c02:	f9 81       	ldd	r31, Y+1	; 0x01
    3c04:	42 a5       	ldd	r20, Z+42	; 0x2a
    3c06:	53 a5       	ldd	r21, Z+43	; 0x2b
    3c08:	64 a5       	ldd	r22, Z+44	; 0x2c
    3c0a:	75 a5       	ldd	r23, Z+45	; 0x2d
    3c0c:	8e 89       	ldd	r24, Y+22	; 0x16
    3c0e:	9f 89       	ldd	r25, Y+23	; 0x17
    3c10:	a8 8d       	ldd	r26, Y+24	; 0x18
    3c12:	b9 8d       	ldd	r27, Y+25	; 0x19
    3c14:	48 17       	cp	r20, r24
    3c16:	59 07       	cpc	r21, r25
    3c18:	6a 07       	cpc	r22, r26
    3c1a:	7b 07       	cpc	r23, r27
    3c1c:	41 f4       	brne	.+16     	; 0x3c2e <f_write+0x15c>
    3c1e:	cf 01       	movw	r24, r30
    3c20:	0e 94 d7 10 	call	0x21ae	; 0x21ae <sync_window>
    3c24:	88 23       	and	r24, r24
    3c26:	19 f0       	breq	.+6      	; 0x3c2e <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
    3c28:	81 e0       	ldi	r24, 0x01	; 1
    3c2a:	8d 83       	std	Y+5, r24	; 0x05
    3c2c:	d9 c0       	rjmp	.+434    	; 0x3de0 <f_write+0x30e>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    3c2e:	28 80       	ld	r2, Y
    3c30:	39 80       	ldd	r3, Y+1	; 0x01
    3c32:	4a 89       	ldd	r20, Y+18	; 0x12
    3c34:	5b 89       	ldd	r21, Y+19	; 0x13
    3c36:	6c 89       	ldd	r22, Y+20	; 0x14
    3c38:	7d 89       	ldd	r23, Y+21	; 0x15
    3c3a:	c1 01       	movw	r24, r2
    3c3c:	0e 94 c6 14 	call	0x298c	; 0x298c <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    3c40:	61 15       	cp	r22, r1
    3c42:	71 05       	cpc	r23, r1
    3c44:	81 05       	cpc	r24, r1
    3c46:	91 05       	cpc	r25, r1
    3c48:	19 f4       	brne	.+6      	; 0x3c50 <f_write+0x17e>
    3c4a:	82 e0       	ldi	r24, 0x02	; 2
    3c4c:	8d 83       	std	Y+5, r24	; 0x05
    3c4e:	c8 c0       	rjmp	.+400    	; 0x3de0 <f_write+0x30e>
			sect += csect;
    3c50:	2b 01       	movw	r4, r22
    3c52:	3c 01       	movw	r6, r24
    3c54:	41 0e       	add	r4, r17
    3c56:	51 1c       	adc	r5, r1
    3c58:	61 1c       	adc	r6, r1
    3c5a:	71 1c       	adc	r7, r1
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    3c5c:	76 01       	movw	r14, r12
    3c5e:	ef 2c       	mov	r14, r15
    3c60:	ff 24       	eor	r15, r15
    3c62:	e6 94       	lsr	r14
			if (cc) {						/* Write maximum contiguous sectors directly */
    3c64:	e1 14       	cp	r14, r1
    3c66:	f1 04       	cpc	r15, r1
    3c68:	09 f4       	brne	.+2      	; 0x3c6c <f_write+0x19a>
    3c6a:	3e c0       	rjmp	.+124    	; 0x3ce8 <f_write+0x216>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    3c6c:	f1 01       	movw	r30, r2
    3c6e:	42 81       	ldd	r20, Z+2	; 0x02
    3c70:	24 2f       	mov	r18, r20
    3c72:	30 e0       	ldi	r19, 0x00	; 0
    3c74:	c7 01       	movw	r24, r14
    3c76:	81 0f       	add	r24, r17
    3c78:	91 1d       	adc	r25, r1
    3c7a:	28 17       	cp	r18, r24
    3c7c:	39 07       	cpc	r19, r25
    3c7e:	18 f4       	brcc	.+6      	; 0x3c86 <f_write+0x1b4>
					cc = fp->fs->csize - csect;
    3c80:	79 01       	movw	r14, r18
    3c82:	e1 1a       	sub	r14, r17
    3c84:	f1 08       	sbc	r15, r1
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
    3c86:	87 01       	movw	r16, r14
    3c88:	a3 01       	movw	r20, r6
    3c8a:	92 01       	movw	r18, r4
    3c8c:	b4 01       	movw	r22, r8
    3c8e:	f1 01       	movw	r30, r2
    3c90:	81 81       	ldd	r24, Z+1	; 0x01
    3c92:	2c d5       	rcall	.+2648   	; 0x46ec <disk_write>
    3c94:	88 23       	and	r24, r24
    3c96:	19 f0       	breq	.+6      	; 0x3c9e <f_write+0x1cc>
					ABORT(fp->fs, FR_DISK_ERR);
    3c98:	81 e0       	ldi	r24, 0x01	; 1
    3c9a:	8d 83       	std	Y+5, r24	; 0x05
    3c9c:	a1 c0       	rjmp	.+322    	; 0x3de0 <f_write+0x30e>
#if _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    3c9e:	e8 81       	ld	r30, Y
    3ca0:	f9 81       	ldd	r31, Y+1	; 0x01
    3ca2:	82 a5       	ldd	r24, Z+42	; 0x2a
    3ca4:	93 a5       	ldd	r25, Z+43	; 0x2b
    3ca6:	a4 a5       	ldd	r26, Z+44	; 0x2c
    3ca8:	b5 a5       	ldd	r27, Z+45	; 0x2d
    3caa:	84 19       	sub	r24, r4
    3cac:	95 09       	sbc	r25, r5
    3cae:	a6 09       	sbc	r26, r6
    3cb0:	b7 09       	sbc	r27, r7
    3cb2:	a7 01       	movw	r20, r14
    3cb4:	60 e0       	ldi	r22, 0x00	; 0
    3cb6:	70 e0       	ldi	r23, 0x00	; 0
    3cb8:	84 17       	cp	r24, r20
    3cba:	95 07       	cpc	r25, r21
    3cbc:	a6 07       	cpc	r26, r22
    3cbe:	b7 07       	cpc	r27, r23
    3cc0:	78 f4       	brcc	.+30     	; 0x3ce0 <f_write+0x20e>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    3cc2:	98 2f       	mov	r25, r24
    3cc4:	88 27       	eor	r24, r24
    3cc6:	99 0f       	add	r25, r25
    3cc8:	b4 01       	movw	r22, r8
    3cca:	68 0f       	add	r22, r24
    3ccc:	79 1f       	adc	r23, r25
    3cce:	40 e0       	ldi	r20, 0x00	; 0
    3cd0:	52 e0       	ldi	r21, 0x02	; 2
    3cd2:	cf 01       	movw	r24, r30
    3cd4:	8e 96       	adiw	r24, 0x2e	; 46
    3cd6:	0e 94 74 10 	call	0x20e8	; 0x20e8 <mem_cpy>
					fp->fs->wflag = 0;
    3cda:	e8 81       	ld	r30, Y
    3cdc:	f9 81       	ldd	r31, Y+1	; 0x01
    3cde:	14 82       	std	Z+4, r1	; 0x04
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    3ce0:	fe 2c       	mov	r15, r14
    3ce2:	ee 24       	eor	r14, r14
    3ce4:	ff 0c       	add	r15, r15
				continue;
    3ce6:	4c c0       	rjmp	.+152    	; 0x3d80 <f_write+0x2ae>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    3ce8:	4e 81       	ldd	r20, Y+6	; 0x06
    3cea:	5f 81       	ldd	r21, Y+7	; 0x07
    3cec:	68 85       	ldd	r22, Y+8	; 0x08
    3cee:	79 85       	ldd	r23, Y+9	; 0x09
    3cf0:	8a 85       	ldd	r24, Y+10	; 0x0a
    3cf2:	9b 85       	ldd	r25, Y+11	; 0x0b
    3cf4:	ac 85       	ldd	r26, Y+12	; 0x0c
    3cf6:	bd 85       	ldd	r27, Y+13	; 0x0d
    3cf8:	48 17       	cp	r20, r24
    3cfa:	59 07       	cpc	r21, r25
    3cfc:	6a 07       	cpc	r22, r26
    3cfe:	7b 07       	cpc	r23, r27
    3d00:	70 f0       	brcs	.+28     	; 0x3d1e <f_write+0x24c>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
    3d02:	c1 01       	movw	r24, r2
    3d04:	0e 94 d7 10 	call	0x21ae	; 0x21ae <sync_window>
    3d08:	88 23       	and	r24, r24
    3d0a:	19 f0       	breq	.+6      	; 0x3d12 <f_write+0x240>
    3d0c:	81 e0       	ldi	r24, 0x01	; 1
    3d0e:	8d 83       	std	Y+5, r24	; 0x05
    3d10:	67 c0       	rjmp	.+206    	; 0x3de0 <f_write+0x30e>
				fp->fs->winsect = sect;
    3d12:	e8 81       	ld	r30, Y
    3d14:	f9 81       	ldd	r31, Y+1	; 0x01
    3d16:	42 a6       	std	Z+42, r4	; 0x2a
    3d18:	53 a6       	std	Z+43, r5	; 0x2b
    3d1a:	64 a6       	std	Z+44, r6	; 0x2c
    3d1c:	75 a6       	std	Z+45, r7	; 0x2d
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    3d1e:	4e 8a       	std	Y+22, r4	; 0x16
    3d20:	5f 8a       	std	Y+23, r5	; 0x17
    3d22:	68 8e       	std	Y+24, r6	; 0x18
    3d24:	79 8e       	std	Y+25, r7	; 0x19
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    3d26:	8e 81       	ldd	r24, Y+6	; 0x06
    3d28:	9f 81       	ldd	r25, Y+7	; 0x07
    3d2a:	91 70       	andi	r25, 0x01	; 1
    3d2c:	20 e0       	ldi	r18, 0x00	; 0
    3d2e:	32 e0       	ldi	r19, 0x02	; 2
    3d30:	79 01       	movw	r14, r18
    3d32:	e8 1a       	sub	r14, r24
    3d34:	f9 0a       	sbc	r15, r25
    3d36:	ce 14       	cp	r12, r14
    3d38:	df 04       	cpc	r13, r15
    3d3a:	08 f4       	brcc	.+2      	; 0x3d3e <f_write+0x26c>
    3d3c:	76 01       	movw	r14, r12
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
    3d3e:	4e 89       	ldd	r20, Y+22	; 0x16
    3d40:	5f 89       	ldd	r21, Y+23	; 0x17
    3d42:	68 8d       	ldd	r22, Y+24	; 0x18
    3d44:	79 8d       	ldd	r23, Y+25	; 0x19
    3d46:	88 81       	ld	r24, Y
    3d48:	99 81       	ldd	r25, Y+1	; 0x01
    3d4a:	0e 94 42 11 	call	0x2284	; 0x2284 <move_window>
    3d4e:	88 23       	and	r24, r24
    3d50:	19 f0       	breq	.+6      	; 0x3d58 <f_write+0x286>
			ABORT(fp->fs, FR_DISK_ERR);
    3d52:	81 e0       	ldi	r24, 0x01	; 1
    3d54:	8d 83       	std	Y+5, r24	; 0x05
    3d56:	44 c0       	rjmp	.+136    	; 0x3de0 <f_write+0x30e>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    3d58:	8e 81       	ldd	r24, Y+6	; 0x06
    3d5a:	9f 81       	ldd	r25, Y+7	; 0x07
    3d5c:	a8 85       	ldd	r26, Y+8	; 0x08
    3d5e:	b9 85       	ldd	r27, Y+9	; 0x09
    3d60:	91 70       	andi	r25, 0x01	; 1
    3d62:	aa 27       	eor	r26, r26
    3d64:	bb 27       	eor	r27, r27
    3d66:	8e 96       	adiw	r24, 0x2e	; 46
    3d68:	28 81       	ld	r18, Y
    3d6a:	39 81       	ldd	r19, Y+1	; 0x01
    3d6c:	a7 01       	movw	r20, r14
    3d6e:	b4 01       	movw	r22, r8
    3d70:	82 0f       	add	r24, r18
    3d72:	93 1f       	adc	r25, r19
    3d74:	0e 94 74 10 	call	0x20e8	; 0x20e8 <mem_cpy>
		fp->fs->wflag = 1;
    3d78:	e8 81       	ld	r30, Y
    3d7a:	f9 81       	ldd	r31, Y+1	; 0x01
    3d7c:	21 e0       	ldi	r18, 0x01	; 1
    3d7e:	24 83       	std	Z+4, r18	; 0x04
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    3d80:	8e 0c       	add	r8, r14
    3d82:	9f 1c       	adc	r9, r15
    3d84:	8e 81       	ldd	r24, Y+6	; 0x06
    3d86:	9f 81       	ldd	r25, Y+7	; 0x07
    3d88:	a8 85       	ldd	r26, Y+8	; 0x08
    3d8a:	b9 85       	ldd	r27, Y+9	; 0x09
    3d8c:	8e 0d       	add	r24, r14
    3d8e:	9f 1d       	adc	r25, r15
    3d90:	a1 1d       	adc	r26, r1
    3d92:	b1 1d       	adc	r27, r1
    3d94:	8e 83       	std	Y+6, r24	; 0x06
    3d96:	9f 83       	std	Y+7, r25	; 0x07
    3d98:	a8 87       	std	Y+8, r26	; 0x08
    3d9a:	b9 87       	std	Y+9, r27	; 0x09
    3d9c:	f5 01       	movw	r30, r10
    3d9e:	80 81       	ld	r24, Z
    3da0:	91 81       	ldd	r25, Z+1	; 0x01
    3da2:	8e 0d       	add	r24, r14
    3da4:	9f 1d       	adc	r25, r15
    3da6:	91 83       	std	Z+1, r25	; 0x01
    3da8:	80 83       	st	Z, r24
    3daa:	ce 18       	sub	r12, r14
    3dac:	df 08       	sbc	r13, r15
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
    3dae:	09 f0       	breq	.+2      	; 0x3db2 <f_write+0x2e0>
    3db0:	c7 ce       	rjmp	.-626    	; 0x3b40 <f_write+0x6e>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    3db2:	8e 81       	ldd	r24, Y+6	; 0x06
    3db4:	9f 81       	ldd	r25, Y+7	; 0x07
    3db6:	a8 85       	ldd	r26, Y+8	; 0x08
    3db8:	b9 85       	ldd	r27, Y+9	; 0x09
    3dba:	4a 85       	ldd	r20, Y+10	; 0x0a
    3dbc:	5b 85       	ldd	r21, Y+11	; 0x0b
    3dbe:	6c 85       	ldd	r22, Y+12	; 0x0c
    3dc0:	7d 85       	ldd	r23, Y+13	; 0x0d
    3dc2:	48 17       	cp	r20, r24
    3dc4:	59 07       	cpc	r21, r25
    3dc6:	6a 07       	cpc	r22, r26
    3dc8:	7b 07       	cpc	r23, r27
    3dca:	20 f4       	brcc	.+8      	; 0x3dd4 <f_write+0x302>
    3dcc:	8a 87       	std	Y+10, r24	; 0x0a
    3dce:	9b 87       	std	Y+11, r25	; 0x0b
    3dd0:	ac 87       	std	Y+12, r26	; 0x0c
    3dd2:	bd 87       	std	Y+13, r27	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    3dd4:	8c 81       	ldd	r24, Y+4	; 0x04
    3dd6:	80 62       	ori	r24, 0x20	; 32
    3dd8:	8c 83       	std	Y+4, r24	; 0x04

	LEAVE_FF(fp->fs, FR_OK);
    3dda:	80 e0       	ldi	r24, 0x00	; 0
    3ddc:	01 c0       	rjmp	.+2      	; 0x3de0 <f_write+0x30e>
	res = validate(fp);						/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->err)							/* Check error */
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    3dde:	87 e0       	ldi	r24, 0x07	; 7

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    3de0:	df 91       	pop	r29
    3de2:	cf 91       	pop	r28
    3de4:	1f 91       	pop	r17
    3de6:	0f 91       	pop	r16
    3de8:	ff 90       	pop	r15
    3dea:	ef 90       	pop	r14
    3dec:	df 90       	pop	r13
    3dee:	cf 90       	pop	r12
    3df0:	bf 90       	pop	r11
    3df2:	af 90       	pop	r10
    3df4:	9f 90       	pop	r9
    3df6:	8f 90       	pop	r8
    3df8:	7f 90       	pop	r7
    3dfa:	6f 90       	pop	r6
    3dfc:	5f 90       	pop	r5
    3dfe:	4f 90       	pop	r4
    3e00:	3f 90       	pop	r3
    3e02:	2f 90       	pop	r2
    3e04:	08 95       	ret

00003e06 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
    3e06:	0f 93       	push	r16
    3e08:	1f 93       	push	r17
    3e0a:	cf 93       	push	r28
    3e0c:	df 93       	push	r29
    3e0e:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
    3e10:	0e 94 b9 11 	call	0x2372	; 0x2372 <validate>
    3e14:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    3e16:	81 11       	cpse	r24, r1
    3e18:	96 c0       	rjmp	.+300    	; 0x3f46 <f_sync+0x140>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    3e1a:	8c 81       	ldd	r24, Y+4	; 0x04
    3e1c:	85 ff       	sbrs	r24, 5
    3e1e:	93 c0       	rjmp	.+294    	; 0x3f46 <f_sync+0x140>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    3e20:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3e22:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3e24:	6c 8d       	ldd	r22, Y+28	; 0x1c
    3e26:	7d 8d       	ldd	r23, Y+29	; 0x1d
    3e28:	88 81       	ld	r24, Y
    3e2a:	99 81       	ldd	r25, Y+1	; 0x01
    3e2c:	0e 94 42 11 	call	0x2284	; 0x2284 <move_window>
    3e30:	98 2f       	mov	r25, r24
			if (res == FR_OK) {
    3e32:	81 11       	cpse	r24, r1
    3e34:	88 c0       	rjmp	.+272    	; 0x3f46 <f_sync+0x140>
				dir = fp->dir_ptr;
    3e36:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3e38:	ff 8d       	ldd	r31, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    3e3a:	83 85       	ldd	r24, Z+11	; 0x0b
    3e3c:	80 62       	ori	r24, 0x20	; 32
    3e3e:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
    3e40:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e42:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e44:	ac 85       	ldd	r26, Y+12	; 0x0c
    3e46:	bd 85       	ldd	r27, Y+13	; 0x0d
    3e48:	84 8f       	std	Z+28, r24	; 0x1c
    3e4a:	95 8f       	std	Z+29, r25	; 0x1d
    3e4c:	a6 8f       	std	Z+30, r26	; 0x1e
    3e4e:	b7 8f       	std	Z+31, r27	; 0x1f
				st_clust(dir, fp->sclust);					/* Update start cluster */
    3e50:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e52:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e54:	a8 89       	ldd	r26, Y+16	; 0x10
    3e56:	b9 89       	ldd	r27, Y+17	; 0x11
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir + DIR_FstClusLO, cl);
    3e58:	93 8f       	std	Z+27, r25	; 0x1b
    3e5a:	82 8f       	std	Z+26, r24	; 0x1a
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
    3e5c:	b5 8b       	std	Z+21, r27	; 0x15
    3e5e:	a4 8b       	std	Z+20, r26	; 0x14
				dir = fp->dir_ptr;
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
				st_clust(dir, fp->sclust);					/* Update start cluster */
				tm = GET_FATTIME();							/* Update updated time */
				ST_DWORD(dir + DIR_WrtTime, tm);
    3e60:	80 e0       	ldi	r24, 0x00	; 0
    3e62:	90 e0       	ldi	r25, 0x00	; 0
    3e64:	a0 ef       	ldi	r26, 0xF0	; 240
    3e66:	be e4       	ldi	r27, 0x4E	; 78
    3e68:	86 8b       	std	Z+22, r24	; 0x16
    3e6a:	97 8b       	std	Z+23, r25	; 0x17
    3e6c:	a0 8f       	std	Z+24, r26	; 0x18
    3e6e:	b1 8f       	std	Z+25, r27	; 0x19
				ST_WORD(dir + DIR_LstAccDate, 0);
    3e70:	13 8a       	std	Z+19, r1	; 0x13
    3e72:	12 8a       	std	Z+18, r1	; 0x12
				fp->flag &= ~FA__WRITTEN;
    3e74:	8c 81       	ldd	r24, Y+4	; 0x04
    3e76:	8f 7d       	andi	r24, 0xDF	; 223
    3e78:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    3e7a:	e8 81       	ld	r30, Y
    3e7c:	f9 81       	ldd	r31, Y+1	; 0x01
    3e7e:	81 e0       	ldi	r24, 0x01	; 1
    3e80:	84 83       	std	Z+4, r24	; 0x04
				res = sync_fs(fp->fs);
    3e82:	09 90       	ld	r0, Y+
    3e84:	d8 81       	ld	r29, Y
    3e86:	c0 2d       	mov	r28, r0
)
{
	FRESULT res;


	res = sync_window(fs);
    3e88:	ce 01       	movw	r24, r28
    3e8a:	0e 94 d7 10 	call	0x21ae	; 0x21ae <sync_window>
    3e8e:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    3e90:	81 11       	cpse	r24, r1
    3e92:	59 c0       	rjmp	.+178    	; 0x3f46 <f_sync+0x140>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
    3e94:	88 81       	ld	r24, Y
    3e96:	83 30       	cpi	r24, 0x03	; 3
    3e98:	09 f0       	breq	.+2      	; 0x3e9c <f_sync+0x96>
    3e9a:	4c c0       	rjmp	.+152    	; 0x3f34 <f_sync+0x12e>
    3e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    3e9e:	81 30       	cpi	r24, 0x01	; 1
    3ea0:	09 f0       	breq	.+2      	; 0x3ea4 <f_sync+0x9e>
    3ea2:	48 c0       	rjmp	.+144    	; 0x3f34 <f_sync+0x12e>
			/* Create FSINFO structure */
			mem_set(fs->win, 0, SS(fs));
    3ea4:	be 01       	movw	r22, r28
    3ea6:	62 5d       	subi	r22, 0xD2	; 210
    3ea8:	7f 4f       	sbci	r23, 0xFF	; 255
    3eaa:	fb 01       	movw	r30, r22
    3eac:	ce 01       	movw	r24, r28
    3eae:	82 5d       	subi	r24, 0xD2	; 210
    3eb0:	9d 4f       	sbci	r25, 0xFD	; 253
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    3eb2:	11 92       	st	Z+, r1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    3eb4:	e8 17       	cp	r30, r24
    3eb6:	f9 07       	cpc	r31, r25
    3eb8:	e1 f7       	brne	.-8      	; 0x3eb2 <f_sync+0xac>
	if (res == FR_OK) {
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
			/* Create FSINFO structure */
			mem_set(fs->win, 0, SS(fs));
			ST_WORD(fs->win + BS_55AA, 0xAA55);
    3eba:	85 e5       	ldi	r24, 0x55	; 85
    3ebc:	9a ea       	ldi	r25, 0xAA	; 170
    3ebe:	fe 01       	movw	r30, r28
    3ec0:	e4 5d       	subi	r30, 0xD4	; 212
    3ec2:	fd 4f       	sbci	r31, 0xFD	; 253
    3ec4:	91 83       	std	Z+1, r25	; 0x01
    3ec6:	80 83       	st	Z, r24
			ST_DWORD(fs->win + FSI_LeadSig, 0x41615252);
    3ec8:	82 e5       	ldi	r24, 0x52	; 82
    3eca:	92 e5       	ldi	r25, 0x52	; 82
    3ecc:	a1 e6       	ldi	r26, 0x61	; 97
    3ece:	b1 e4       	ldi	r27, 0x41	; 65
    3ed0:	8e a7       	std	Y+46, r24	; 0x2e
    3ed2:	9f a7       	std	Y+47, r25	; 0x2f
    3ed4:	a8 ab       	std	Y+48, r26	; 0x30
    3ed6:	b9 ab       	std	Y+49, r27	; 0x31
			ST_DWORD(fs->win + FSI_StrucSig, 0x61417272);
    3ed8:	82 e7       	ldi	r24, 0x72	; 114
    3eda:	92 e7       	ldi	r25, 0x72	; 114
    3edc:	a1 e4       	ldi	r26, 0x41	; 65
    3ede:	b1 e6       	ldi	r27, 0x61	; 97
    3ee0:	7a 97       	sbiw	r30, 0x1a	; 26
    3ee2:	80 83       	st	Z, r24
    3ee4:	91 83       	std	Z+1, r25	; 0x01
    3ee6:	a2 83       	std	Z+2, r26	; 0x02
    3ee8:	b3 83       	std	Z+3, r27	; 0x03
			ST_DWORD(fs->win + FSI_Free_Count, fs->free_clust);
    3eea:	8e 85       	ldd	r24, Y+14	; 0x0e
    3eec:	9f 85       	ldd	r25, Y+15	; 0x0f
    3eee:	a8 89       	ldd	r26, Y+16	; 0x10
    3ef0:	b9 89       	ldd	r27, Y+17	; 0x11
    3ef2:	34 96       	adiw	r30, 0x04	; 4
    3ef4:	80 83       	st	Z, r24
    3ef6:	91 83       	std	Z+1, r25	; 0x01
    3ef8:	a2 83       	std	Z+2, r26	; 0x02
    3efa:	b3 83       	std	Z+3, r27	; 0x03
			ST_DWORD(fs->win + FSI_Nxt_Free, fs->last_clust);
    3efc:	8a 85       	ldd	r24, Y+10	; 0x0a
    3efe:	9b 85       	ldd	r25, Y+11	; 0x0b
    3f00:	ac 85       	ldd	r26, Y+12	; 0x0c
    3f02:	bd 85       	ldd	r27, Y+13	; 0x0d
    3f04:	34 96       	adiw	r30, 0x04	; 4
    3f06:	80 83       	st	Z, r24
    3f08:	91 83       	std	Z+1, r25	; 0x01
    3f0a:	a2 83       	std	Z+2, r26	; 0x02
    3f0c:	b3 83       	std	Z+3, r27	; 0x03
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
    3f0e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3f10:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3f12:	ac 8d       	ldd	r26, Y+28	; 0x1c
    3f14:	bd 8d       	ldd	r27, Y+29	; 0x1d
    3f16:	9c 01       	movw	r18, r24
    3f18:	ad 01       	movw	r20, r26
    3f1a:	2f 5f       	subi	r18, 0xFF	; 255
    3f1c:	3f 4f       	sbci	r19, 0xFF	; 255
    3f1e:	4f 4f       	sbci	r20, 0xFF	; 255
    3f20:	5f 4f       	sbci	r21, 0xFF	; 255
    3f22:	2a a7       	std	Y+42, r18	; 0x2a
    3f24:	3b a7       	std	Y+43, r19	; 0x2b
    3f26:	4c a7       	std	Y+44, r20	; 0x2c
    3f28:	5d a7       	std	Y+45, r21	; 0x2d
			disk_write(fs->drv, fs->win, fs->winsect, 1);
    3f2a:	01 e0       	ldi	r16, 0x01	; 1
    3f2c:	10 e0       	ldi	r17, 0x00	; 0
    3f2e:	89 81       	ldd	r24, Y+1	; 0x01
    3f30:	dd d3       	rcall	.+1978   	; 0x46ec <disk_write>
			fs->fsi_flag = 0;
    3f32:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    3f34:	40 e0       	ldi	r20, 0x00	; 0
    3f36:	50 e0       	ldi	r21, 0x00	; 0
    3f38:	60 e0       	ldi	r22, 0x00	; 0
    3f3a:	89 81       	ldd	r24, Y+1	; 0x01
    3f3c:	45 d4       	rcall	.+2186   	; 0x47c8 <disk_ioctl>
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
    3f3e:	91 e0       	ldi	r25, 0x01	; 1
    3f40:	81 11       	cpse	r24, r1
    3f42:	01 c0       	rjmp	.+2      	; 0x3f46 <f_sync+0x140>
    3f44:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    3f46:	89 2f       	mov	r24, r25
    3f48:	df 91       	pop	r29
    3f4a:	cf 91       	pop	r28
    3f4c:	1f 91       	pop	r17
    3f4e:	0f 91       	pop	r16
    3f50:	08 95       	ret

00003f52 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    3f52:	cf 93       	push	r28
    3f54:	df 93       	push	r29
    3f56:	ec 01       	movw	r28, r24
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    3f58:	56 df       	rcall	.-340    	; 0x3e06 <f_sync>
	if (res == FR_OK)
    3f5a:	81 11       	cpse	r24, r1
    3f5c:	07 c0       	rjmp	.+14     	; 0x3f6c <f_close+0x1a>
#endif
	{
		res = validate(fp);				/* Lock volume */
    3f5e:	ce 01       	movw	r24, r28
    3f60:	0e 94 b9 11 	call	0x2372	; 0x2372 <validate>
		if (res == FR_OK) {
    3f64:	81 11       	cpse	r24, r1
    3f66:	02 c0       	rjmp	.+4      	; 0x3f6c <f_close+0x1a>
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
				fp->fs = 0;				/* Invalidate file object */
    3f68:	19 82       	std	Y+1, r1	; 0x01
    3f6a:	18 82       	st	Y, r1
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    3f6c:	df 91       	pop	r29
    3f6e:	cf 91       	pop	r28
    3f70:	08 95       	ret

00003f72 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    3f72:	4f 92       	push	r4
    3f74:	5f 92       	push	r5
    3f76:	6f 92       	push	r6
    3f78:	7f 92       	push	r7
    3f7a:	8f 92       	push	r8
    3f7c:	9f 92       	push	r9
    3f7e:	af 92       	push	r10
    3f80:	bf 92       	push	r11
    3f82:	cf 92       	push	r12
    3f84:	df 92       	push	r13
    3f86:	ef 92       	push	r14
    3f88:	ff 92       	push	r15
    3f8a:	0f 93       	push	r16
    3f8c:	1f 93       	push	r17
    3f8e:	cf 93       	push	r28
    3f90:	df 93       	push	r29
    3f92:	00 d0       	rcall	.+0      	; 0x3f94 <f_lseek+0x22>
    3f94:	00 d0       	rcall	.+0      	; 0x3f96 <f_lseek+0x24>
    3f96:	00 d0       	rcall	.+0      	; 0x3f98 <f_lseek+0x26>
    3f98:	cd b7       	in	r28, 0x3d	; 61
    3f9a:	de b7       	in	r29, 0x3e	; 62
    3f9c:	9e 83       	std	Y+6, r25	; 0x06
    3f9e:	8d 83       	std	Y+5, r24	; 0x05
    3fa0:	6a 01       	movw	r12, r20
    3fa2:	7b 01       	movw	r14, r22
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
    3fa4:	0e 94 b9 11 	call	0x2372	; 0x2372 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    3fa8:	81 11       	cpse	r24, r1
    3faa:	93 c1       	rjmp	.+806    	; 0x42d2 <__stack+0x1d3>
	if (fp->err)						/* Check error */
    3fac:	ad 81       	ldd	r26, Y+5	; 0x05
    3fae:	be 81       	ldd	r27, Y+6	; 0x06
    3fb0:	15 96       	adiw	r26, 0x05	; 5
    3fb2:	8c 91       	ld	r24, X
    3fb4:	15 97       	sbiw	r26, 0x05	; 5
    3fb6:	81 11       	cpse	r24, r1
    3fb8:	8c c1       	rjmp	.+792    	; 0x42d2 <__stack+0x1d3>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    3fba:	1a 96       	adiw	r26, 0x0a	; 10
    3fbc:	8d 91       	ld	r24, X+
    3fbe:	9d 91       	ld	r25, X+
    3fc0:	0d 90       	ld	r0, X+
    3fc2:	bc 91       	ld	r27, X
    3fc4:	a0 2d       	mov	r26, r0
    3fc6:	8c 15       	cp	r24, r12
    3fc8:	9d 05       	cpc	r25, r13
    3fca:	ae 05       	cpc	r26, r14
    3fcc:	bf 05       	cpc	r27, r15
    3fce:	38 f4       	brcc	.+14     	; 0x3fde <f_lseek+0x6c>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    3fd0:	ed 81       	ldd	r30, Y+5	; 0x05
    3fd2:	fe 81       	ldd	r31, Y+6	; 0x06
    3fd4:	24 81       	ldd	r18, Z+4	; 0x04
    3fd6:	21 fd       	sbrc	r18, 1
    3fd8:	02 c0       	rjmp	.+4      	; 0x3fde <f_lseek+0x6c>
#endif
			) ofs = fp->fsize;
    3fda:	6c 01       	movw	r12, r24
    3fdc:	7d 01       	movw	r14, r26

		ifptr = fp->fptr;
    3fde:	ad 81       	ldd	r26, Y+5	; 0x05
    3fe0:	be 81       	ldd	r27, Y+6	; 0x06
    3fe2:	16 96       	adiw	r26, 0x06	; 6
    3fe4:	4d 90       	ld	r4, X+
    3fe6:	5d 90       	ld	r5, X+
    3fe8:	6d 90       	ld	r6, X+
    3fea:	7c 90       	ld	r7, X
    3fec:	19 97       	sbiw	r26, 0x09	; 9
		fp->fptr = nsect = 0;
    3fee:	fd 01       	movw	r30, r26
    3ff0:	16 82       	std	Z+6, r1	; 0x06
    3ff2:	17 82       	std	Z+7, r1	; 0x07
    3ff4:	10 86       	std	Z+8, r1	; 0x08
    3ff6:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    3ff8:	c1 14       	cp	r12, r1
    3ffa:	d1 04       	cpc	r13, r1
    3ffc:	e1 04       	cpc	r14, r1
    3ffe:	f1 04       	cpc	r15, r1
    4000:	09 f4       	brne	.+2      	; 0x4004 <f_lseek+0x92>
    4002:	64 c1       	rjmp	.+712    	; 0x42cc <__stack+0x1cd>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    4004:	00 81       	ld	r16, Z
    4006:	11 81       	ldd	r17, Z+1	; 0x01
    4008:	d8 01       	movw	r26, r16
    400a:	12 96       	adiw	r26, 0x02	; 2
    400c:	8c 90       	ld	r8, X
    400e:	91 2c       	mov	r9, r1
    4010:	a1 2c       	mov	r10, r1
    4012:	b1 2c       	mov	r11, r1
    4014:	07 2e       	mov	r0, r23
    4016:	79 e0       	ldi	r23, 0x09	; 9
    4018:	88 0c       	add	r8, r8
    401a:	99 1c       	adc	r9, r9
    401c:	aa 1c       	adc	r10, r10
    401e:	bb 1c       	adc	r11, r11
    4020:	7a 95       	dec	r23
    4022:	d1 f7       	brne	.-12     	; 0x4018 <f_lseek+0xa6>
    4024:	70 2d       	mov	r23, r0
			if (ifptr > 0 &&
    4026:	41 14       	cp	r4, r1
    4028:	51 04       	cpc	r5, r1
    402a:	61 04       	cpc	r6, r1
    402c:	71 04       	cpc	r7, r1
    402e:	09 f4       	brne	.+2      	; 0x4032 <f_lseek+0xc0>
    4030:	40 c0       	rjmp	.+128    	; 0x40b2 <f_lseek+0x140>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    4032:	b1 e0       	ldi	r27, 0x01	; 1
    4034:	4b 1a       	sub	r4, r27
    4036:	51 08       	sbc	r5, r1
    4038:	61 08       	sbc	r6, r1
    403a:	71 08       	sbc	r7, r1

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    403c:	c7 01       	movw	r24, r14
    403e:	b6 01       	movw	r22, r12
    4040:	61 50       	subi	r22, 0x01	; 1
    4042:	71 09       	sbc	r23, r1
    4044:	81 09       	sbc	r24, r1
    4046:	91 09       	sbc	r25, r1
    4048:	a5 01       	movw	r20, r10
    404a:	94 01       	movw	r18, r8
    404c:	0e 94 f8 2d 	call	0x5bf0	; 0x5bf0 <__udivmodsi4>
    4050:	29 83       	std	Y+1, r18	; 0x01
    4052:	3a 83       	std	Y+2, r19	; 0x02
    4054:	4b 83       	std	Y+3, r20	; 0x03
    4056:	5c 83       	std	Y+4, r21	; 0x04
    4058:	c3 01       	movw	r24, r6
    405a:	b2 01       	movw	r22, r4
    405c:	a5 01       	movw	r20, r10
    405e:	94 01       	movw	r18, r8
    4060:	0e 94 f8 2d 	call	0x5bf0	; 0x5bf0 <__udivmodsi4>
    4064:	89 81       	ldd	r24, Y+1	; 0x01
    4066:	9a 81       	ldd	r25, Y+2	; 0x02
    4068:	ab 81       	ldd	r26, Y+3	; 0x03
    406a:	bc 81       	ldd	r27, Y+4	; 0x04
    406c:	82 17       	cp	r24, r18
    406e:	93 07       	cpc	r25, r19
    4070:	a4 07       	cpc	r26, r20
    4072:	b5 07       	cpc	r27, r21
    4074:	f0 f0       	brcs	.+60     	; 0x40b2 <f_lseek+0x140>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    4076:	88 27       	eor	r24, r24
    4078:	99 27       	eor	r25, r25
    407a:	dc 01       	movw	r26, r24
    407c:	88 19       	sub	r24, r8
    407e:	99 09       	sbc	r25, r9
    4080:	aa 09       	sbc	r26, r10
    4082:	bb 09       	sbc	r27, r11
    4084:	48 22       	and	r4, r24
    4086:	59 22       	and	r5, r25
    4088:	6a 22       	and	r6, r26
    408a:	7b 22       	and	r7, r27
    408c:	ad 81       	ldd	r26, Y+5	; 0x05
    408e:	be 81       	ldd	r27, Y+6	; 0x06
    4090:	16 96       	adiw	r26, 0x06	; 6
    4092:	4d 92       	st	X+, r4
    4094:	5d 92       	st	X+, r5
    4096:	6d 92       	st	X+, r6
    4098:	7c 92       	st	X, r7
    409a:	19 97       	sbiw	r26, 0x09	; 9
				ofs -= fp->fptr;
    409c:	c4 18       	sub	r12, r4
    409e:	d5 08       	sbc	r13, r5
    40a0:	e6 08       	sbc	r14, r6
    40a2:	f7 08       	sbc	r15, r7
				clst = fp->clust;
    40a4:	52 96       	adiw	r26, 0x12	; 18
    40a6:	4d 91       	ld	r20, X+
    40a8:	5d 91       	ld	r21, X+
    40aa:	6d 91       	ld	r22, X+
    40ac:	7c 91       	ld	r23, X
    40ae:	55 97       	sbiw	r26, 0x15	; 21
    40b0:	37 c0       	rjmp	.+110    	; 0x4120 <__stack+0x21>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    40b2:	ed 81       	ldd	r30, Y+5	; 0x05
    40b4:	fe 81       	ldd	r31, Y+6	; 0x06
    40b6:	46 85       	ldd	r20, Z+14	; 0x0e
    40b8:	57 85       	ldd	r21, Z+15	; 0x0f
    40ba:	60 89       	ldd	r22, Z+16	; 0x10
    40bc:	71 89       	ldd	r23, Z+17	; 0x11
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    40be:	41 15       	cp	r20, r1
    40c0:	51 05       	cpc	r21, r1
    40c2:	61 05       	cpc	r22, r1
    40c4:	71 05       	cpc	r23, r1
    40c6:	31 f5       	brne	.+76     	; 0x4114 <__stack+0x15>
					clst = create_chain(fp->fs, 0);
    40c8:	40 e0       	ldi	r20, 0x00	; 0
    40ca:	50 e0       	ldi	r21, 0x00	; 0
    40cc:	ba 01       	movw	r22, r20
    40ce:	c8 01       	movw	r24, r16
    40d0:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <create_chain>
    40d4:	ab 01       	movw	r20, r22
    40d6:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    40d8:	41 30       	cpi	r20, 0x01	; 1
    40da:	51 05       	cpc	r21, r1
    40dc:	61 05       	cpc	r22, r1
    40de:	71 05       	cpc	r23, r1
    40e0:	31 f4       	brne	.+12     	; 0x40ee <f_lseek+0x17c>
    40e2:	82 e0       	ldi	r24, 0x02	; 2
    40e4:	ad 81       	ldd	r26, Y+5	; 0x05
    40e6:	be 81       	ldd	r27, Y+6	; 0x06
    40e8:	15 96       	adiw	r26, 0x05	; 5
    40ea:	8c 93       	st	X, r24
    40ec:	f2 c0       	rjmp	.+484    	; 0x42d2 <__stack+0x1d3>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    40ee:	4f 3f       	cpi	r20, 0xFF	; 255
    40f0:	bf ef       	ldi	r27, 0xFF	; 255
    40f2:	5b 07       	cpc	r21, r27
    40f4:	6b 07       	cpc	r22, r27
    40f6:	7b 07       	cpc	r23, r27
    40f8:	29 f4       	brne	.+10     	; 0x4104 <__stack+0x5>
    40fa:	81 e0       	ldi	r24, 0x01	; 1
    40fc:	ed 81       	ldd	r30, Y+5	; 0x05
    40fe:	fe 81       	ldd	r31, Y+6	; 0x06
    4100:	85 83       	std	Z+5, r24	; 0x05
    4102:	e7 c0       	rjmp	.+462    	; 0x42d2 <__stack+0x1d3>
					fp->sclust = clst;
    4104:	ad 81       	ldd	r26, Y+5	; 0x05
    4106:	be 81       	ldd	r27, Y+6	; 0x06
    4108:	1e 96       	adiw	r26, 0x0e	; 14
    410a:	4d 93       	st	X+, r20
    410c:	5d 93       	st	X+, r21
    410e:	6d 93       	st	X+, r22
    4110:	7c 93       	st	X, r23
    4112:	51 97       	sbiw	r26, 0x11	; 17
				}
#endif
				fp->clust = clst;
    4114:	ed 81       	ldd	r30, Y+5	; 0x05
    4116:	fe 81       	ldd	r31, Y+6	; 0x06
    4118:	42 8b       	std	Z+18, r20	; 0x12
    411a:	53 8b       	std	Z+19, r21	; 0x13
    411c:	64 8b       	std	Z+20, r22	; 0x14
    411e:	75 8b       	std	Z+21, r23	; 0x15
			}
			if (clst != 0) {
    4120:	41 15       	cp	r20, r1
    4122:	51 05       	cpc	r21, r1
    4124:	61 05       	cpc	r22, r1
    4126:	71 05       	cpc	r23, r1
    4128:	09 f4       	brne	.+2      	; 0x412c <__stack+0x2d>
    412a:	99 c0       	rjmp	.+306    	; 0x425e <__stack+0x15f>
				while (ofs > bcs) {						/* Cluster following loop */
    412c:	8c 14       	cp	r8, r12
    412e:	9d 04       	cpc	r9, r13
    4130:	ae 04       	cpc	r10, r14
    4132:	bf 04       	cpc	r11, r15
    4134:	08 f0       	brcs	.+2      	; 0x4138 <__stack+0x39>
    4136:	5f c0       	rjmp	.+190    	; 0x41f6 <__stack+0xf7>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    4138:	ad 81       	ldd	r26, Y+5	; 0x05
    413a:	be 81       	ldd	r27, Y+6	; 0x06
    413c:	14 96       	adiw	r26, 0x04	; 4
    413e:	8c 91       	ld	r24, X
    4140:	14 97       	sbiw	r26, 0x04	; 4
    4142:	81 ff       	sbrs	r24, 1
    4144:	0c c0       	rjmp	.+24     	; 0x415e <__stack+0x5f>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    4146:	8d 91       	ld	r24, X+
    4148:	9c 91       	ld	r25, X
    414a:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <create_chain>
    414e:	ab 01       	movw	r20, r22
    4150:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    4152:	41 15       	cp	r20, r1
    4154:	51 05       	cpc	r21, r1
    4156:	61 05       	cpc	r22, r1
    4158:	71 05       	cpc	r23, r1
    415a:	49 f4       	brne	.+18     	; 0x416e <__stack+0x6f>
    415c:	4a c0       	rjmp	.+148    	; 0x41f2 <__stack+0xf3>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    415e:	ad 81       	ldd	r26, Y+5	; 0x05
    4160:	be 81       	ldd	r27, Y+6	; 0x06
    4162:	8d 91       	ld	r24, X+
    4164:	9c 91       	ld	r25, X
    4166:	0e 94 ee 14 	call	0x29dc	; 0x29dc <get_fat>
    416a:	ab 01       	movw	r20, r22
    416c:	bc 01       	movw	r22, r24
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    416e:	4f 3f       	cpi	r20, 0xFF	; 255
    4170:	bf ef       	ldi	r27, 0xFF	; 255
    4172:	5b 07       	cpc	r21, r27
    4174:	6b 07       	cpc	r22, r27
    4176:	7b 07       	cpc	r23, r27
    4178:	29 f4       	brne	.+10     	; 0x4184 <__stack+0x85>
    417a:	ed 81       	ldd	r30, Y+5	; 0x05
    417c:	fe 81       	ldd	r31, Y+6	; 0x06
    417e:	81 e0       	ldi	r24, 0x01	; 1
    4180:	85 83       	std	Z+5, r24	; 0x05
    4182:	a7 c0       	rjmp	.+334    	; 0x42d2 <__stack+0x1d3>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    4184:	42 30       	cpi	r20, 0x02	; 2
    4186:	51 05       	cpc	r21, r1
    4188:	61 05       	cpc	r22, r1
    418a:	71 05       	cpc	r23, r1
    418c:	68 f0       	brcs	.+26     	; 0x41a8 <__stack+0xa9>
    418e:	ad 81       	ldd	r26, Y+5	; 0x05
    4190:	be 81       	ldd	r27, Y+6	; 0x06
    4192:	ed 91       	ld	r30, X+
    4194:	fc 91       	ld	r31, X
    4196:	82 89       	ldd	r24, Z+18	; 0x12
    4198:	93 89       	ldd	r25, Z+19	; 0x13
    419a:	a4 89       	ldd	r26, Z+20	; 0x14
    419c:	b5 89       	ldd	r27, Z+21	; 0x15
    419e:	48 17       	cp	r20, r24
    41a0:	59 07       	cpc	r21, r25
    41a2:	6a 07       	cpc	r22, r26
    41a4:	7b 07       	cpc	r23, r27
    41a6:	28 f0       	brcs	.+10     	; 0x41b2 <__stack+0xb3>
    41a8:	ed 81       	ldd	r30, Y+5	; 0x05
    41aa:	fe 81       	ldd	r31, Y+6	; 0x06
    41ac:	82 e0       	ldi	r24, 0x02	; 2
    41ae:	85 83       	std	Z+5, r24	; 0x05
    41b0:	90 c0       	rjmp	.+288    	; 0x42d2 <__stack+0x1d3>
					fp->clust = clst;
    41b2:	ad 81       	ldd	r26, Y+5	; 0x05
    41b4:	be 81       	ldd	r27, Y+6	; 0x06
    41b6:	52 96       	adiw	r26, 0x12	; 18
    41b8:	4d 93       	st	X+, r20
    41ba:	5d 93       	st	X+, r21
    41bc:	6d 93       	st	X+, r22
    41be:	7c 93       	st	X, r23
    41c0:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    41c2:	fd 01       	movw	r30, r26
    41c4:	86 81       	ldd	r24, Z+6	; 0x06
    41c6:	97 81       	ldd	r25, Z+7	; 0x07
    41c8:	a0 85       	ldd	r26, Z+8	; 0x08
    41ca:	b1 85       	ldd	r27, Z+9	; 0x09
    41cc:	88 0d       	add	r24, r8
    41ce:	99 1d       	adc	r25, r9
    41d0:	aa 1d       	adc	r26, r10
    41d2:	bb 1d       	adc	r27, r11
    41d4:	86 83       	std	Z+6, r24	; 0x06
    41d6:	97 83       	std	Z+7, r25	; 0x07
    41d8:	a0 87       	std	Z+8, r26	; 0x08
    41da:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    41dc:	c8 18       	sub	r12, r8
    41de:	d9 08       	sbc	r13, r9
    41e0:	ea 08       	sbc	r14, r10
    41e2:	fb 08       	sbc	r15, r11
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    41e4:	8c 14       	cp	r8, r12
    41e6:	9d 04       	cpc	r9, r13
    41e8:	ae 04       	cpc	r10, r14
    41ea:	bf 04       	cpc	r11, r15
    41ec:	08 f4       	brcc	.+2      	; 0x41f0 <__stack+0xf1>
    41ee:	a4 cf       	rjmp	.-184    	; 0x4138 <__stack+0x39>
    41f0:	02 c0       	rjmp	.+4      	; 0x41f6 <__stack+0xf7>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
    41f2:	75 01       	movw	r14, r10
    41f4:	64 01       	movw	r12, r8
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    41f6:	ed 81       	ldd	r30, Y+5	; 0x05
    41f8:	fe 81       	ldd	r31, Y+6	; 0x06
    41fa:	86 81       	ldd	r24, Z+6	; 0x06
    41fc:	97 81       	ldd	r25, Z+7	; 0x07
    41fe:	a0 85       	ldd	r26, Z+8	; 0x08
    4200:	b1 85       	ldd	r27, Z+9	; 0x09
    4202:	8c 0d       	add	r24, r12
    4204:	9d 1d       	adc	r25, r13
    4206:	ae 1d       	adc	r26, r14
    4208:	bf 1d       	adc	r27, r15
    420a:	86 83       	std	Z+6, r24	; 0x06
    420c:	97 83       	std	Z+7, r25	; 0x07
    420e:	a0 87       	std	Z+8, r26	; 0x08
    4210:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    4212:	d7 01       	movw	r26, r14
    4214:	c6 01       	movw	r24, r12
    4216:	91 70       	andi	r25, 0x01	; 1
    4218:	aa 27       	eor	r26, r26
    421a:	bb 27       	eor	r27, r27
    421c:	89 2b       	or	r24, r25
    421e:	8a 2b       	or	r24, r26
    4220:	8b 2b       	or	r24, r27
    4222:	09 f1       	breq	.+66     	; 0x4266 <__stack+0x167>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    4224:	80 81       	ld	r24, Z
    4226:	91 81       	ldd	r25, Z+1	; 0x01
    4228:	0e 94 c6 14 	call	0x298c	; 0x298c <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    422c:	61 15       	cp	r22, r1
    422e:	71 05       	cpc	r23, r1
    4230:	81 05       	cpc	r24, r1
    4232:	91 05       	cpc	r25, r1
    4234:	31 f4       	brne	.+12     	; 0x4242 <__stack+0x143>
    4236:	82 e0       	ldi	r24, 0x02	; 2
    4238:	ad 81       	ldd	r26, Y+5	; 0x05
    423a:	be 81       	ldd	r27, Y+6	; 0x06
    423c:	15 96       	adiw	r26, 0x05	; 5
    423e:	8c 93       	st	X, r24
    4240:	48 c0       	rjmp	.+144    	; 0x42d2 <__stack+0x1d3>
					nsect += ofs / SS(fp->fs);
    4242:	0b 2e       	mov	r0, r27
    4244:	b9 e0       	ldi	r27, 0x09	; 9
    4246:	f6 94       	lsr	r15
    4248:	e7 94       	ror	r14
    424a:	d7 94       	ror	r13
    424c:	c7 94       	ror	r12
    424e:	ba 95       	dec	r27
    4250:	d1 f7       	brne	.-12     	; 0x4246 <__stack+0x147>
    4252:	b0 2d       	mov	r27, r0
    4254:	c6 0e       	add	r12, r22
    4256:	d7 1e       	adc	r13, r23
    4258:	e8 1e       	adc	r14, r24
    425a:	f9 1e       	adc	r15, r25
    425c:	07 c0       	rjmp	.+14     	; 0x426c <__stack+0x16d>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    425e:	c1 2c       	mov	r12, r1
    4260:	d1 2c       	mov	r13, r1
    4262:	76 01       	movw	r14, r12
    4264:	03 c0       	rjmp	.+6      	; 0x426c <__stack+0x16d>
    4266:	c1 2c       	mov	r12, r1
    4268:	d1 2c       	mov	r13, r1
    426a:	76 01       	movw	r14, r12
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    426c:	ed 81       	ldd	r30, Y+5	; 0x05
    426e:	fe 81       	ldd	r31, Y+6	; 0x06
    4270:	86 81       	ldd	r24, Z+6	; 0x06
    4272:	97 81       	ldd	r25, Z+7	; 0x07
    4274:	a0 85       	ldd	r26, Z+8	; 0x08
    4276:	b1 85       	ldd	r27, Z+9	; 0x09
    4278:	ac 01       	movw	r20, r24
    427a:	bd 01       	movw	r22, r26
    427c:	51 70       	andi	r21, 0x01	; 1
    427e:	66 27       	eor	r22, r22
    4280:	77 27       	eor	r23, r23
    4282:	45 2b       	or	r20, r21
    4284:	46 2b       	or	r20, r22
    4286:	47 2b       	or	r20, r23
    4288:	69 f0       	breq	.+26     	; 0x42a4 <__stack+0x1a5>
    428a:	46 89       	ldd	r20, Z+22	; 0x16
    428c:	57 89       	ldd	r21, Z+23	; 0x17
    428e:	60 8d       	ldd	r22, Z+24	; 0x18
    4290:	71 8d       	ldd	r23, Z+25	; 0x19
    4292:	c4 16       	cp	r12, r20
    4294:	d5 06       	cpc	r13, r21
    4296:	e6 06       	cpc	r14, r22
    4298:	f7 06       	cpc	r15, r23
    429a:	21 f0       	breq	.+8      	; 0x42a4 <__stack+0x1a5>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    429c:	c6 8a       	std	Z+22, r12	; 0x16
    429e:	d7 8a       	std	Z+23, r13	; 0x17
    42a0:	e0 8e       	std	Z+24, r14	; 0x18
    42a2:	f1 8e       	std	Z+25, r15	; 0x19
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    42a4:	ed 81       	ldd	r30, Y+5	; 0x05
    42a6:	fe 81       	ldd	r31, Y+6	; 0x06
    42a8:	42 85       	ldd	r20, Z+10	; 0x0a
    42aa:	53 85       	ldd	r21, Z+11	; 0x0b
    42ac:	64 85       	ldd	r22, Z+12	; 0x0c
    42ae:	75 85       	ldd	r23, Z+13	; 0x0d
    42b0:	48 17       	cp	r20, r24
    42b2:	59 07       	cpc	r21, r25
    42b4:	6a 07       	cpc	r22, r26
    42b6:	7b 07       	cpc	r23, r27
    42b8:	58 f4       	brcc	.+22     	; 0x42d0 <__stack+0x1d1>
			fp->fsize = fp->fptr;
    42ba:	82 87       	std	Z+10, r24	; 0x0a
    42bc:	93 87       	std	Z+11, r25	; 0x0b
    42be:	a4 87       	std	Z+12, r26	; 0x0c
    42c0:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA__WRITTEN;
    42c2:	84 81       	ldd	r24, Z+4	; 0x04
    42c4:	80 62       	ori	r24, 0x20	; 32
    42c6:	84 83       	std	Z+4, r24	; 0x04
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
    42c8:	80 e0       	ldi	r24, 0x00	; 0
    42ca:	03 c0       	rjmp	.+6      	; 0x42d2 <__stack+0x1d3>
    42cc:	80 e0       	ldi	r24, 0x00	; 0
    42ce:	01 c0       	rjmp	.+2      	; 0x42d2 <__stack+0x1d3>
    42d0:	80 e0       	ldi	r24, 0x00	; 0
}
    42d2:	26 96       	adiw	r28, 0x06	; 6
    42d4:	0f b6       	in	r0, 0x3f	; 63
    42d6:	f8 94       	cli
    42d8:	de bf       	out	0x3e, r29	; 62
    42da:	0f be       	out	0x3f, r0	; 63
    42dc:	cd bf       	out	0x3d, r28	; 61
    42de:	df 91       	pop	r29
    42e0:	cf 91       	pop	r28
    42e2:	1f 91       	pop	r17
    42e4:	0f 91       	pop	r16
    42e6:	ff 90       	pop	r15
    42e8:	ef 90       	pop	r14
    42ea:	df 90       	pop	r13
    42ec:	cf 90       	pop	r12
    42ee:	bf 90       	pop	r11
    42f0:	af 90       	pop	r10
    42f2:	9f 90       	pop	r9
    42f4:	8f 90       	pop	r8
    42f6:	7f 90       	pop	r7
    42f8:	6f 90       	pop	r6
    42fa:	5f 90       	pop	r5
    42fc:	4f 90       	pop	r4
    42fe:	08 95       	ret

00004300 <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
    4300:	29 9a       	sbi	0x05, 1	; 5
	spi_rwSPI(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    4302:	8f ef       	ldi	r24, 0xFF	; 255
    4304:	e1 c5       	rjmp	.+3010   	; 0x4ec8 <spi_rwSPI>
    4306:	08 95       	ret

00004308 <select>:

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	//PORTB = (0 << 1) | (0 << 2) | (0 << 3);
	CS_LOW();		/* Set CS# low */
    4308:	29 98       	cbi	0x05, 1	; 5
	spi_rwSPI(0xFF);	/* Dummy clock (force DO enabled) */
    430a:	8f ef       	ldi	r24, 0xFF	; 255
    430c:	dd d5       	rcall	.+3002   	; 0x4ec8 <spi_rwSPI>
)
{
	BYTE d;


	Timer2 = wt / 10;
    430e:	82 e3       	ldi	r24, 0x32	; 50
    4310:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <Timer2>
	do
		d = spi_rwSPI(0xFF);
    4314:	8f ef       	ldi	r24, 0xFF	; 255
    4316:	d8 d5       	rcall	.+2992   	; 0x4ec8 <spi_rwSPI>
	while (d != 0xFF && Timer2);
    4318:	8f 3f       	cpi	r24, 0xFF	; 255
    431a:	41 f0       	breq	.+16     	; 0x432c <select+0x24>
    431c:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <Timer2>
    4320:	81 11       	cpse	r24, r1
	//PORTB = (0 << 1) | (0 << 2) | (0 << 3);
	CS_LOW();		/* Set CS# low */
	spi_rwSPI(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */

	deselect();
    4322:	f8 cf       	rjmp	.-16     	; 0x4314 <select+0xc>
    4324:	ed df       	rcall	.-38     	; 0x4300 <deselect>
	return 0;	/* Timeout */
    4326:	80 e0       	ldi	r24, 0x00	; 0
    4328:	90 e0       	ldi	r25, 0x00	; 0
    432a:	08 95       	ret
int select (void)	/* 1:Successful, 0:Timeout */
{
	//PORTB = (0 << 1) | (0 << 2) | (0 << 3);
	CS_LOW();		/* Set CS# low */
	spi_rwSPI(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */
    432c:	81 e0       	ldi	r24, 0x01	; 1
    432e:	90 e0       	ldi	r25, 0x00	; 0

	deselect();
	return 0;	/* Timeout */
}
    4330:	08 95       	ret

00004332 <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    4332:	ff 92       	push	r15
    4334:	0f 93       	push	r16
    4336:	1f 93       	push	r17
    4338:	cf 93       	push	r28
    433a:	df 93       	push	r29
    433c:	c8 2f       	mov	r28, r24
    433e:	d4 2f       	mov	r29, r20
    4340:	15 2f       	mov	r17, r21
    4342:	06 2f       	mov	r16, r22
    4344:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    4346:	88 23       	and	r24, r24
    4348:	4c f4       	brge	.+18     	; 0x435c <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    434a:	40 e0       	ldi	r20, 0x00	; 0
    434c:	50 e0       	ldi	r21, 0x00	; 0
    434e:	ba 01       	movw	r22, r20
    4350:	87 e3       	ldi	r24, 0x37	; 55
    4352:	ef df       	rcall	.-34     	; 0x4332 <send_cmd>
		if (res > 1) return res;
    4354:	82 30       	cpi	r24, 0x02	; 2
    4356:	08 f0       	brcs	.+2      	; 0x435a <send_cmd+0x28>
    4358:	3c c0       	rjmp	.+120    	; 0x43d2 <send_cmd+0xa0>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    435a:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    435c:	cc 30       	cpi	r28, 0x0C	; 12
		deselect();
    435e:	f1 f0       	breq	.+60     	; 0x439c <send_cmd+0x6a>
		if (!select()) return 0xFF;
    4360:	cf df       	rcall	.-98     	; 0x4300 <deselect>
    4362:	d2 df       	rcall	.-92     	; 0x4308 <select>
    4364:	89 2b       	or	r24, r25
	}

	/* Send command packet */
	spi_rwSPI(0x40 | cmd);				/* Start + Command index */
    4366:	c1 f0       	breq	.+48     	; 0x4398 <send_cmd+0x66>
    4368:	8c 2f       	mov	r24, r28
    436a:	80 64       	ori	r24, 0x40	; 64
	spi_rwSPI((BYTE)(arg >> 24));		/* Argument[31..24] */
    436c:	ad d5       	rcall	.+2906   	; 0x4ec8 <spi_rwSPI>
    436e:	8f 2d       	mov	r24, r15
	spi_rwSPI((BYTE)(arg >> 16));		/* Argument[23..16] */
    4370:	ab d5       	rcall	.+2902   	; 0x4ec8 <spi_rwSPI>
    4372:	80 2f       	mov	r24, r16
	spi_rwSPI((BYTE)(arg >> 8));			/* Argument[15..8] */
    4374:	a9 d5       	rcall	.+2898   	; 0x4ec8 <spi_rwSPI>
    4376:	81 2f       	mov	r24, r17
	spi_rwSPI((BYTE)arg);				/* Argument[7..0] */
    4378:	a7 d5       	rcall	.+2894   	; 0x4ec8 <spi_rwSPI>
    437a:	8d 2f       	mov	r24, r29
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
    437c:	a5 d5       	rcall	.+2890   	; 0x4ec8 <spi_rwSPI>
    437e:	cc 23       	and	r28, r28
    4380:	29 f1       	breq	.+74     	; 0x43cc <send_cmd+0x9a>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	spi_rwSPI(n);

	/* Receive command response */
	if (cmd == CMD12) spi_rwSPI(0xFF);		/* Skip a stuff byte when stop reading */
    4382:	21 c0       	rjmp	.+66     	; 0x43c6 <send_cmd+0x94>
    4384:	8f ef       	ldi	r24, 0xFF	; 255
    4386:	a0 d5       	rcall	.+2880   	; 0x4ec8 <spi_rwSPI>
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    4388:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) spi_rwSPI(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = spi_rwSPI(0xFF);
    438a:	8f ef       	ldi	r24, 0xFF	; 255
    438c:	9d d5       	rcall	.+2874   	; 0x4ec8 <spi_rwSPI>
	while ((res & 0x80) && --n);
    438e:	88 23       	and	r24, r24
    4390:	04 f5       	brge	.+64     	; 0x43d2 <send_cmd+0xa0>
    4392:	c1 50       	subi	r28, 0x01	; 1
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
    4394:	d1 f7       	brne	.-12     	; 0x438a <send_cmd+0x58>
	}

	/* Send command packet */
	spi_rwSPI(0x40 | cmd);				/* Start + Command index */
    4396:	1d c0       	rjmp	.+58     	; 0x43d2 <send_cmd+0xa0>
    4398:	8f ef       	ldi	r24, 0xFF	; 255
	spi_rwSPI((BYTE)(arg >> 24));		/* Argument[31..24] */
    439a:	1b c0       	rjmp	.+54     	; 0x43d2 <send_cmd+0xa0>
    439c:	8c e4       	ldi	r24, 0x4C	; 76
    439e:	94 d5       	rcall	.+2856   	; 0x4ec8 <spi_rwSPI>
	spi_rwSPI((BYTE)(arg >> 16));		/* Argument[23..16] */
    43a0:	8f 2d       	mov	r24, r15
    43a2:	92 d5       	rcall	.+2852   	; 0x4ec8 <spi_rwSPI>
	spi_rwSPI((BYTE)(arg >> 8));			/* Argument[15..8] */
    43a4:	80 2f       	mov	r24, r16
    43a6:	90 d5       	rcall	.+2848   	; 0x4ec8 <spi_rwSPI>
	spi_rwSPI((BYTE)arg);				/* Argument[7..0] */
    43a8:	81 2f       	mov	r24, r17
    43aa:	8e d5       	rcall	.+2844   	; 0x4ec8 <spi_rwSPI>
    43ac:	8d 2f       	mov	r24, r29
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	spi_rwSPI(n);
    43ae:	8c d5       	rcall	.+2840   	; 0x4ec8 <spi_rwSPI>
    43b0:	81 e0       	ldi	r24, 0x01	; 1

	/* Receive command response */
	if (cmd == CMD12) spi_rwSPI(0xFF);		/* Skip a stuff byte when stop reading */
    43b2:	8a d5       	rcall	.+2836   	; 0x4ec8 <spi_rwSPI>
    43b4:	cc 30       	cpi	r28, 0x0C	; 12
    43b6:	31 f3       	breq	.-52     	; 0x4384 <send_cmd+0x52>
	spi_rwSPI((BYTE)(arg >> 8));			/* Argument[15..8] */
	spi_rwSPI((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	spi_rwSPI(n);
    43b8:	e7 cf       	rjmp	.-50     	; 0x4388 <send_cmd+0x56>
    43ba:	87 e8       	ldi	r24, 0x87	; 135
    43bc:	85 d5       	rcall	.+2826   	; 0x4ec8 <spi_rwSPI>
    43be:	e4 cf       	rjmp	.-56     	; 0x4388 <send_cmd+0x56>
    43c0:	81 e0       	ldi	r24, 0x01	; 1
    43c2:	82 d5       	rcall	.+2820   	; 0x4ec8 <spi_rwSPI>
    43c4:	e1 cf       	rjmp	.-62     	; 0x4388 <send_cmd+0x56>
    43c6:	c8 30       	cpi	r28, 0x08	; 8
	spi_rwSPI((BYTE)(arg >> 16));		/* Argument[23..16] */
	spi_rwSPI((BYTE)(arg >> 8));			/* Argument[15..8] */
	spi_rwSPI((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    43c8:	c1 f3       	breq	.-16     	; 0x43ba <send_cmd+0x88>
    43ca:	fa cf       	rjmp	.-12     	; 0x43c0 <send_cmd+0x8e>
    43cc:	85 e9       	ldi	r24, 0x95	; 149
	spi_rwSPI(n);
    43ce:	7c d5       	rcall	.+2808   	; 0x4ec8 <spi_rwSPI>
    43d0:	db cf       	rjmp	.-74     	; 0x4388 <send_cmd+0x56>
    43d2:	df 91       	pop	r29
    43d4:	cf 91       	pop	r28
	do
		res = spi_rwSPI(0xFF);
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
    43d6:	1f 91       	pop	r17
    43d8:	0f 91       	pop	r16
    43da:	ff 90       	pop	r15
    43dc:	08 95       	ret

000043de <rcvr_datablock>:
    43de:	0f 93       	push	r16
    43e0:	1f 93       	push	r17
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    43e2:	cf 93       	push	r28
    43e4:	df 93       	push	r29
    43e6:	08 2f       	mov	r16, r24
    43e8:	19 2f       	mov	r17, r25
    43ea:	eb 01       	movw	r28, r22
	BYTE token;


	Timer1 = 20;
    43ec:	84 e1       	ldi	r24, 0x14	; 20
    43ee:	80 93 91 03 	sts	0x0391, r24	; 0x800391 <Timer1>
	do {							/* Wait for data packet in timeout of 200ms */
		token = spi_rwSPI(0xFF);
    43f2:	8f ef       	ldi	r24, 0xFF	; 255
    43f4:	69 d5       	rcall	.+2770   	; 0x4ec8 <spi_rwSPI>
	} while ((token == 0xFF) && Timer1);
    43f6:	8f 3f       	cpi	r24, 0xFF	; 255
    43f8:	39 f4       	brne	.+14     	; 0x4408 <rcvr_datablock+0x2a>
    43fa:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <Timer1>
    43fe:	81 11       	cpse	r24, r1
    4400:	f8 cf       	rjmp	.-16     	; 0x43f2 <rcvr_datablock+0x14>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    4402:	80 e0       	ldi	r24, 0x00	; 0
    4404:	90 e0       	ldi	r25, 0x00	; 0
    4406:	20 c0       	rjmp	.+64     	; 0x4448 <rcvr_datablock+0x6a>
    4408:	8e 3f       	cpi	r24, 0xFE	; 254
    440a:	e1 f4       	brne	.+56     	; 0x4444 <rcvr_datablock+0x66>
    440c:	e0 2f       	mov	r30, r16
    440e:	f1 2f       	mov	r31, r17
	BYTE *p,	/* Data buffer */
	UINT cnt	/* Size of data block (must be multiple of 2) */
)
{
	do {
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
    4410:	8f ef       	ldi	r24, 0xFF	; 255
    4412:	8e bd       	out	0x2e, r24	; 46
    4414:	0d b4       	in	r0, 0x2d	; 45
    4416:	07 fe       	sbrs	r0, 7
    4418:	fd cf       	rjmp	.-6      	; 0x4414 <rcvr_datablock+0x36>
    441a:	9e b5       	in	r25, 0x2e	; 46
    441c:	df 01       	movw	r26, r30
    441e:	90 83       	st	Z, r25
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
    4420:	8e bd       	out	0x2e, r24	; 46
    4422:	0d b4       	in	r0, 0x2d	; 45
    4424:	07 fe       	sbrs	r0, 7
    4426:	fd cf       	rjmp	.-6      	; 0x4422 <rcvr_datablock+0x44>
    4428:	9e b5       	in	r25, 0x2e	; 46
    442a:	11 96       	adiw	r26, 0x01	; 1
    442c:	9c 93       	st	X, r25
	} while (cnt -= 2);
    442e:	22 97       	sbiw	r28, 0x02	; 2
    4430:	32 96       	adiw	r30, 0x02	; 2
    4432:	20 97       	sbiw	r28, 0x00	; 0
    4434:	71 f7       	brne	.-36     	; 0x4412 <rcvr_datablock+0x34>
		token = spi_rwSPI(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	spi_rwSPI(0xFF);					/* Discard CRC */
    4436:	8f ef       	ldi	r24, 0xFF	; 255
    4438:	47 d5       	rcall	.+2702   	; 0x4ec8 <spi_rwSPI>
	spi_rwSPI(0xFF);
    443a:	8f ef       	ldi	r24, 0xFF	; 255
    443c:	45 d5       	rcall	.+2698   	; 0x4ec8 <spi_rwSPI>
    443e:	81 e0       	ldi	r24, 0x01	; 1

	return 1;						/* Return with success */
    4440:	90 e0       	ldi	r25, 0x00	; 0
    4442:	02 c0       	rjmp	.+4      	; 0x4448 <rcvr_datablock+0x6a>
    4444:	80 e0       	ldi	r24, 0x00	; 0

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = spi_rwSPI(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    4446:	90 e0       	ldi	r25, 0x00	; 0
    4448:	df 91       	pop	r29
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	spi_rwSPI(0xFF);					/* Discard CRC */
	spi_rwSPI(0xFF);

	return 1;						/* Return with success */
}
    444a:	cf 91       	pop	r28
    444c:	1f 91       	pop	r17
    444e:	0f 91       	pop	r16
    4450:	08 95       	ret

00004452 <xmit_datablock>:
    4452:	1f 93       	push	r17
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    4454:	cf 93       	push	r28
    4456:	df 93       	push	r29
    4458:	ec 01       	movw	r28, r24
    445a:	16 2f       	mov	r17, r22
)
{
	BYTE d;


	Timer2 = wt / 10;
    445c:	82 e3       	ldi	r24, 0x32	; 50
    445e:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <Timer2>
	do
		d = spi_rwSPI(0xFF);
    4462:	8f ef       	ldi	r24, 0xFF	; 255
    4464:	31 d5       	rcall	.+2658   	; 0x4ec8 <spi_rwSPI>
	while (d != 0xFF && Timer2);
    4466:	8f 3f       	cpi	r24, 0xFF	; 255
    4468:	31 f0       	breq	.+12     	; 0x4476 <xmit_datablock+0x24>
    446a:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <Timer2>
    446e:	81 11       	cpse	r24, r1
    4470:	f8 cf       	rjmp	.-16     	; 0x4462 <xmit_datablock+0x10>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
    4472:	90 e0       	ldi	r25, 0x00	; 0
    4474:	27 c0       	rjmp	.+78     	; 0x44c4 <xmit_datablock+0x72>

	spi_rwSPI(token);					/* Xmit data token */
    4476:	81 2f       	mov	r24, r17
    4478:	27 d5       	rcall	.+2638   	; 0x4ec8 <spi_rwSPI>
	if (token != 0xFD) {	/* Is data token */
    447a:	1d 3f       	cpi	r17, 0xFD	; 253
    447c:	09 f1       	breq	.+66     	; 0x44c0 <xmit_datablock+0x6e>
    447e:	fe 01       	movw	r30, r28
    4480:	9e 01       	movw	r18, r28
    4482:	3e 5f       	subi	r19, 0xFE	; 254
    4484:	df 01       	movw	r26, r30
	const BYTE *p,	/* Data block to be sent */
	UINT cnt		/* Size of data block (must be multiple of 2) */
)
{
	do {
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
    4486:	90 81       	ld	r25, Z
    4488:	9e bd       	out	0x2e, r25	; 46
    448a:	0d b4       	in	r0, 0x2d	; 45
    448c:	07 fe       	sbrs	r0, 7
    448e:	fd cf       	rjmp	.-6      	; 0x448a <xmit_datablock+0x38>
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
    4490:	11 96       	adiw	r26, 0x01	; 1
    4492:	9c 91       	ld	r25, X
    4494:	9e bd       	out	0x2e, r25	; 46
    4496:	0d b4       	in	r0, 0x2d	; 45
    4498:	07 fe       	sbrs	r0, 7
    449a:	fd cf       	rjmp	.-6      	; 0x4496 <xmit_datablock+0x44>
    449c:	32 96       	adiw	r30, 0x02	; 2
	} while (cnt -= 2);
    449e:	e2 17       	cp	r30, r18
    44a0:	f3 07       	cpc	r31, r19
	if (!wait_ready(500)) return 0;

	spi_rwSPI(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, 512);		/* Xmit the data block to the MMC */
		spi_rwSPI(0xFF);					/* CRC (Dummy) */
    44a2:	81 f7       	brne	.-32     	; 0x4484 <xmit_datablock+0x32>
    44a4:	8f ef       	ldi	r24, 0xFF	; 255
		spi_rwSPI(0xFF);
    44a6:	10 d5       	rcall	.+2592   	; 0x4ec8 <spi_rwSPI>
    44a8:	8f ef       	ldi	r24, 0xFF	; 255
		resp = spi_rwSPI(0xFF);			/* Reveive data response */
    44aa:	0e d5       	rcall	.+2588   	; 0x4ec8 <spi_rwSPI>
    44ac:	8f ef       	ldi	r24, 0xFF	; 255
    44ae:	0c d5       	rcall	.+2584   	; 0x4ec8 <spi_rwSPI>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
    44b0:	28 2f       	mov	r18, r24
    44b2:	2f 71       	andi	r18, 0x1F	; 31
    44b4:	81 e0       	ldi	r24, 0x01	; 1
    44b6:	90 e0       	ldi	r25, 0x00	; 0
    44b8:	25 30       	cpi	r18, 0x05	; 5
    44ba:	21 f0       	breq	.+8      	; 0x44c4 <xmit_datablock+0x72>
    44bc:	80 e0       	ldi	r24, 0x00	; 0
    44be:	02 c0       	rjmp	.+4      	; 0x44c4 <xmit_datablock+0x72>
		resp = spi_rwSPI(0xFF);			/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return 0;
	}

	return 1;
    44c0:	81 e0       	ldi	r24, 0x01	; 1
    44c2:	90 e0       	ldi	r25, 0x00	; 0
}
    44c4:	df 91       	pop	r29
    44c6:	cf 91       	pop	r28
    44c8:	1f 91       	pop	r17
    44ca:	08 95       	ret

000044cc <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
    44cc:	cf 92       	push	r12
    44ce:	df 92       	push	r13
    44d0:	ef 92       	push	r14
    44d2:	ff 92       	push	r15
    44d4:	0f 93       	push	r16
    44d6:	1f 93       	push	r17
    44d8:	cf 93       	push	r28
    44da:	df 93       	push	r29
    44dc:	00 d0       	rcall	.+0      	; 0x44de <disk_initialize+0x12>
    44de:	00 d0       	rcall	.+0      	; 0x44e0 <disk_initialize+0x14>
    44e0:	cd b7       	in	r28, 0x3d	; 61
    44e2:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    44e4:	81 11       	cpse	r24, r1
    44e6:	91 c0       	rjmp	.+290    	; 0x460a <disk_initialize+0x13e>
	//power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    44e8:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <Stat>
    44ec:	81 ff       	sbrs	r24, 1
    44ee:	03 c0       	rjmp	.+6      	; 0x44f6 <disk_initialize+0x2a>
    44f0:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <Stat>
    44f4:	95 c0       	rjmp	.+298    	; 0x4620 <disk_initialize+0x154>
	//power_on();							/* Turn on the socket power */
	FCLK_SLOW();
    44f6:	82 e5       	ldi	r24, 0x52	; 82
    44f8:	8c bd       	out	0x2c, r24	; 44
    44fa:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) spi_rwSPI(0xFF);	/* 80 dummy clocks */
    44fc:	8f ef       	ldi	r24, 0xFF	; 255
    44fe:	e4 d4       	rcall	.+2504   	; 0x4ec8 <spi_rwSPI>
    4500:	11 50       	subi	r17, 0x01	; 1
    4502:	e1 f7       	brne	.-8      	; 0x44fc <disk_initialize+0x30>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    4504:	40 e0       	ldi	r20, 0x00	; 0
    4506:	50 e0       	ldi	r21, 0x00	; 0
    4508:	ba 01       	movw	r22, r20
    450a:	80 e0       	ldi	r24, 0x00	; 0
    450c:	12 df       	rcall	.-476    	; 0x4332 <send_cmd>
    450e:	81 30       	cpi	r24, 0x01	; 1
    4510:	09 f0       	breq	.+2      	; 0x4514 <disk_initialize+0x48>
    4512:	82 c0       	rjmp	.+260    	; 0x4618 <disk_initialize+0x14c>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    4514:	84 e6       	ldi	r24, 0x64	; 100
    4516:	80 93 91 03 	sts	0x0391, r24	; 0x800391 <Timer1>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    451a:	4a ea       	ldi	r20, 0xAA	; 170
    451c:	51 e0       	ldi	r21, 0x01	; 1
    451e:	60 e0       	ldi	r22, 0x00	; 0
    4520:	70 e0       	ldi	r23, 0x00	; 0
    4522:	88 e0       	ldi	r24, 0x08	; 8
    4524:	06 df       	rcall	.-500    	; 0x4332 <send_cmd>
    4526:	81 30       	cpi	r24, 0x01	; 1
    4528:	09 f0       	breq	.+2      	; 0x452c <disk_initialize+0x60>
    452a:	3d c0       	rjmp	.+122    	; 0x45a6 <disk_initialize+0xda>
    452c:	ce 01       	movw	r24, r28
    452e:	01 96       	adiw	r24, 0x01	; 1
    4530:	6c 01       	movw	r12, r24
    4532:	7e 01       	movw	r14, r28
    4534:	95 e0       	ldi	r25, 0x05	; 5
    4536:	e9 0e       	add	r14, r25
    4538:	f1 1c       	adc	r15, r1
			for (n = 0; n < 4; n++) ocr[n] = spi_rwSPI(0xFF);		/* Get trailing return value of R7 resp */
    453a:	86 01       	movw	r16, r12
    453c:	8f ef       	ldi	r24, 0xFF	; 255
    453e:	c4 d4       	rcall	.+2440   	; 0x4ec8 <spi_rwSPI>
    4540:	f8 01       	movw	r30, r16
    4542:	81 93       	st	Z+, r24
    4544:	8f 01       	movw	r16, r30
    4546:	ee 16       	cp	r14, r30
    4548:	ff 06       	cpc	r15, r31
    454a:	c1 f7       	brne	.-16     	; 0x453c <disk_initialize+0x70>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    454c:	8b 81       	ldd	r24, Y+3	; 0x03
    454e:	81 30       	cpi	r24, 0x01	; 1
    4550:	09 f0       	breq	.+2      	; 0x4554 <disk_initialize+0x88>
    4552:	62 c0       	rjmp	.+196    	; 0x4618 <disk_initialize+0x14c>
    4554:	8c 81       	ldd	r24, Y+4	; 0x04
    4556:	8a 3a       	cpi	r24, 0xAA	; 170
    4558:	09 f0       	breq	.+2      	; 0x455c <disk_initialize+0x90>
    455a:	5e c0       	rjmp	.+188    	; 0x4618 <disk_initialize+0x14c>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    455c:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <Timer1>
    4560:	88 23       	and	r24, r24
    4562:	41 f0       	breq	.+16     	; 0x4574 <disk_initialize+0xa8>
    4564:	40 e0       	ldi	r20, 0x00	; 0
    4566:	50 e0       	ldi	r21, 0x00	; 0
    4568:	60 e0       	ldi	r22, 0x00	; 0
    456a:	70 e4       	ldi	r23, 0x40	; 64
    456c:	89 ea       	ldi	r24, 0xA9	; 169
    456e:	e1 de       	rcall	.-574    	; 0x4332 <send_cmd>
    4570:	81 11       	cpse	r24, r1
    4572:	f4 cf       	rjmp	.-24     	; 0x455c <disk_initialize+0x90>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    4574:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <Timer1>
    4578:	88 23       	and	r24, r24
    457a:	09 f4       	brne	.+2      	; 0x457e <disk_initialize+0xb2>
    457c:	4d c0       	rjmp	.+154    	; 0x4618 <disk_initialize+0x14c>
    457e:	40 e0       	ldi	r20, 0x00	; 0
    4580:	50 e0       	ldi	r21, 0x00	; 0
    4582:	ba 01       	movw	r22, r20
    4584:	8a e3       	ldi	r24, 0x3A	; 58
    4586:	d5 de       	rcall	.-598    	; 0x4332 <send_cmd>
    4588:	81 11       	cpse	r24, r1
					for (n = 0; n < 4; n++) ocr[n] = spi_rwSPI(0xFF);
    458a:	46 c0       	rjmp	.+140    	; 0x4618 <disk_initialize+0x14c>
    458c:	8f ef       	ldi	r24, 0xFF	; 255
    458e:	9c d4       	rcall	.+2360   	; 0x4ec8 <spi_rwSPI>
    4590:	f6 01       	movw	r30, r12
    4592:	81 93       	st	Z+, r24
    4594:	6f 01       	movw	r12, r30
    4596:	ee 16       	cp	r14, r30
    4598:	ff 06       	cpc	r15, r31
    459a:	c1 f7       	brne	.-16     	; 0x458c <disk_initialize+0xc0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    459c:	89 81       	ldd	r24, Y+1	; 0x01
    459e:	86 fd       	sbrc	r24, 6
    45a0:	36 c0       	rjmp	.+108    	; 0x460e <disk_initialize+0x142>
    45a2:	84 e0       	ldi	r24, 0x04	; 4
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    45a4:	35 c0       	rjmp	.+106    	; 0x4610 <disk_initialize+0x144>
    45a6:	40 e0       	ldi	r20, 0x00	; 0
    45a8:	50 e0       	ldi	r21, 0x00	; 0
    45aa:	ba 01       	movw	r22, r20
    45ac:	89 ea       	ldi	r24, 0xA9	; 169
    45ae:	c1 de       	rcall	.-638    	; 0x4332 <send_cmd>
    45b0:	82 30       	cpi	r24, 0x02	; 2
    45b2:	18 f0       	brcs	.+6      	; 0x45ba <disk_initialize+0xee>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    45b4:	01 e0       	ldi	r16, 0x01	; 1
    45b6:	11 e0       	ldi	r17, 0x01	; 1
    45b8:	02 c0       	rjmp	.+4      	; 0x45be <disk_initialize+0xf2>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    45ba:	02 e0       	ldi	r16, 0x02	; 2
    45bc:	19 ea       	ldi	r17, 0xA9	; 169
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    45be:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <Timer1>
    45c2:	88 23       	and	r24, r24
    45c4:	39 f0       	breq	.+14     	; 0x45d4 <disk_initialize+0x108>
    45c6:	40 e0       	ldi	r20, 0x00	; 0
    45c8:	50 e0       	ldi	r21, 0x00	; 0
    45ca:	ba 01       	movw	r22, r20
    45cc:	81 2f       	mov	r24, r17
    45ce:	b1 de       	rcall	.-670    	; 0x4332 <send_cmd>
    45d0:	81 11       	cpse	r24, r1
    45d2:	f5 cf       	rjmp	.-22     	; 0x45be <disk_initialize+0xf2>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    45d4:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <Timer1>
    45d8:	88 23       	and	r24, r24
    45da:	f1 f0       	breq	.+60     	; 0x4618 <disk_initialize+0x14c>
    45dc:	40 e0       	ldi	r20, 0x00	; 0
    45de:	52 e0       	ldi	r21, 0x02	; 2
    45e0:	60 e0       	ldi	r22, 0x00	; 0
    45e2:	70 e0       	ldi	r23, 0x00	; 0
    45e4:	80 e1       	ldi	r24, 0x10	; 16
    45e6:	a5 de       	rcall	.-694    	; 0x4332 <send_cmd>
    45e8:	81 11       	cpse	r24, r1
				ty = 0;
		}
	}
	CardType = ty;
    45ea:	16 c0       	rjmp	.+44     	; 0x4618 <disk_initialize+0x14c>
    45ec:	00 93 8f 03 	sts	0x038F, r16	; 0x80038f <CardType>
	deselect();
    45f0:	87 de       	rcall	.-754    	; 0x4300 <deselect>

	if (ty) {			/* Initialization succeded */
    45f2:	00 23       	and	r16, r16
    45f4:	39 f0       	breq	.+14     	; 0x4604 <disk_initialize+0x138>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    45f6:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <Stat>
    45fa:	8e 7f       	andi	r24, 0xFE	; 254
    45fc:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <Stat>
		FCLK_FAST();
    4600:	80 e5       	ldi	r24, 0x50	; 80
	} else {			/* Initialization failed */
		//power_off();
	}

	return Stat;
    4602:	8c bd       	out	0x2c, r24	; 44
    4604:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <Stat>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    4608:	0b c0       	rjmp	.+22     	; 0x4620 <disk_initialize+0x154>
			for (n = 0; n < 4; n++) ocr[n] = spi_rwSPI(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = spi_rwSPI(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    460a:	81 e0       	ldi	r24, 0x01	; 1
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    460c:	09 c0       	rjmp	.+18     	; 0x4620 <disk_initialize+0x154>
    460e:	8c e0       	ldi	r24, 0x0C	; 12
	deselect();
    4610:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <CardType>
    4614:	75 de       	rcall	.-790    	; 0x4300 <deselect>
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    4616:	ef cf       	rjmp	.-34     	; 0x45f6 <disk_initialize+0x12a>
    4618:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <CardType>
	deselect();
    461c:	71 de       	rcall	.-798    	; 0x4300 <deselect>
    461e:	f2 cf       	rjmp	.-28     	; 0x4604 <disk_initialize+0x138>
	} else {			/* Initialization failed */
		//power_off();
	}

	return Stat;
}
    4620:	0f 90       	pop	r0
    4622:	0f 90       	pop	r0
    4624:	0f 90       	pop	r0
    4626:	0f 90       	pop	r0
    4628:	df 91       	pop	r29
    462a:	cf 91       	pop	r28
    462c:	1f 91       	pop	r17
    462e:	0f 91       	pop	r16
    4630:	ff 90       	pop	r15
    4632:	ef 90       	pop	r14
    4634:	df 90       	pop	r13
    4636:	cf 90       	pop	r12
    4638:	08 95       	ret

0000463a <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    463a:	81 11       	cpse	r24, r1
    463c:	03 c0       	rjmp	.+6      	; 0x4644 <disk_status+0xa>
	return Stat;
    463e:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <Stat>
    4642:	08 95       	ret

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    4644:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
    4646:	08 95       	ret

00004648 <disk_read>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    4648:	ff 92       	push	r15
    464a:	0f 93       	push	r16
    464c:	1f 93       	push	r17
    464e:	cf 93       	push	r28
    4650:	df 93       	push	r29
    4652:	eb 01       	movw	r28, r22
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    4654:	81 11       	cpse	r24, r1
    4656:	3f c0       	rjmp	.+126    	; 0x46d6 <disk_read+0x8e>
    4658:	01 15       	cp	r16, r1
    465a:	11 05       	cpc	r17, r1
    465c:	09 f4       	brne	.+2      	; 0x4660 <disk_read+0x18>
    465e:	3d c0       	rjmp	.+122    	; 0x46da <disk_read+0x92>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    4660:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <Stat>
    4664:	80 fd       	sbrc	r24, 0
    4666:	3b c0       	rjmp	.+118    	; 0x46de <disk_read+0x96>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    4668:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <CardType>
    466c:	83 fd       	sbrc	r24, 3
    466e:	09 c0       	rjmp	.+18     	; 0x4682 <disk_read+0x3a>
    4670:	01 2e       	mov	r0, r17
    4672:	19 e0       	ldi	r17, 0x09	; 9
    4674:	22 0f       	add	r18, r18
    4676:	33 1f       	adc	r19, r19
    4678:	44 1f       	adc	r20, r20
    467a:	55 1f       	adc	r21, r21
    467c:	1a 95       	dec	r17
    467e:	d1 f7       	brne	.-12     	; 0x4674 <disk_read+0x2c>
    4680:	10 2d       	mov	r17, r0

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    4682:	02 30       	cpi	r16, 0x02	; 2
    4684:	11 05       	cpc	r17, r1
    4686:	28 f4       	brcc	.+10     	; 0x4692 <disk_read+0x4a>
    4688:	0f 2e       	mov	r0, r31
    468a:	f1 e1       	ldi	r31, 0x11	; 17
    468c:	ff 2e       	mov	r15, r31
    468e:	f0 2d       	mov	r31, r0
    4690:	04 c0       	rjmp	.+8      	; 0x469a <disk_read+0x52>
    4692:	0f 2e       	mov	r0, r31
    4694:	f2 e1       	ldi	r31, 0x12	; 18
    4696:	ff 2e       	mov	r15, r31
    4698:	f0 2d       	mov	r31, r0
	if (send_cmd(cmd, sector) == 0) {
    469a:	ba 01       	movw	r22, r20
    469c:	a9 01       	movw	r20, r18
    469e:	8f 2d       	mov	r24, r15
    46a0:	48 de       	rcall	.-880    	; 0x4332 <send_cmd>
    46a2:	81 11       	cpse	r24, r1
    46a4:	12 c0       	rjmp	.+36     	; 0x46ca <disk_read+0x82>
		do {
			if (!rcvr_datablock(buff, 512)) break;
    46a6:	60 e0       	ldi	r22, 0x00	; 0
    46a8:	72 e0       	ldi	r23, 0x02	; 2
    46aa:	ce 01       	movw	r24, r28
    46ac:	98 de       	rcall	.-720    	; 0x43de <rcvr_datablock>
    46ae:	89 2b       	or	r24, r25
    46b0:	21 f0       	breq	.+8      	; 0x46ba <disk_read+0x72>
			buff += 512;
    46b2:	de 5f       	subi	r29, 0xFE	; 254
		} while (--count);
    46b4:	01 50       	subi	r16, 0x01	; 1
    46b6:	11 09       	sbc	r17, r1
    46b8:	b1 f7       	brne	.-20     	; 0x46a6 <disk_read+0x5e>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    46ba:	82 e1       	ldi	r24, 0x12	; 18
    46bc:	f8 12       	cpse	r15, r24
    46be:	05 c0       	rjmp	.+10     	; 0x46ca <disk_read+0x82>
    46c0:	40 e0       	ldi	r20, 0x00	; 0
    46c2:	50 e0       	ldi	r21, 0x00	; 0
    46c4:	ba 01       	movw	r22, r20
    46c6:	8c e0       	ldi	r24, 0x0C	; 12
	}
	deselect();
    46c8:	34 de       	rcall	.-920    	; 0x4332 <send_cmd>
    46ca:	1a de       	rcall	.-972    	; 0x4300 <deselect>

	return count ? RES_ERROR : RES_OK;
    46cc:	81 e0       	ldi	r24, 0x01	; 1
    46ce:	01 2b       	or	r16, r17
    46d0:	39 f4       	brne	.+14     	; 0x46e0 <disk_read+0x98>
    46d2:	80 e0       	ldi	r24, 0x00	; 0
    46d4:	05 c0       	rjmp	.+10     	; 0x46e0 <disk_read+0x98>
)
{
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    46d6:	84 e0       	ldi	r24, 0x04	; 4
    46d8:	03 c0       	rjmp	.+6      	; 0x46e0 <disk_read+0x98>
    46da:	84 e0       	ldi	r24, 0x04	; 4
    46dc:	01 c0       	rjmp	.+2      	; 0x46e0 <disk_read+0x98>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    46de:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    46e0:	df 91       	pop	r29
    46e2:	cf 91       	pop	r28
    46e4:	1f 91       	pop	r17
    46e6:	0f 91       	pop	r16
    46e8:	ff 90       	pop	r15
    46ea:	08 95       	ret

000046ec <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    46ec:	cf 92       	push	r12
    46ee:	df 92       	push	r13
    46f0:	ef 92       	push	r14
    46f2:	ff 92       	push	r15
    46f4:	0f 93       	push	r16
    46f6:	1f 93       	push	r17
    46f8:	cf 93       	push	r28
    46fa:	df 93       	push	r29
    46fc:	eb 01       	movw	r28, r22
    46fe:	69 01       	movw	r12, r18
    4700:	7a 01       	movw	r14, r20
	if (pdrv || !count) return RES_PARERR;
    4702:	81 11       	cpse	r24, r1
    4704:	51 c0       	rjmp	.+162    	; 0x47a8 <disk_write+0xbc>
    4706:	01 15       	cp	r16, r1
    4708:	11 05       	cpc	r17, r1
    470a:	09 f4       	brne	.+2      	; 0x470e <disk_write+0x22>
    470c:	4f c0       	rjmp	.+158    	; 0x47ac <disk_write+0xc0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    470e:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <Stat>
    4712:	80 fd       	sbrc	r24, 0
    4714:	4d c0       	rjmp	.+154    	; 0x47b0 <disk_write+0xc4>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    4716:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <Stat>
    471a:	82 fd       	sbrc	r24, 2
    471c:	4b c0       	rjmp	.+150    	; 0x47b4 <disk_write+0xc8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    471e:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <CardType>
    4722:	83 fd       	sbrc	r24, 3
    4724:	09 c0       	rjmp	.+18     	; 0x4738 <disk_write+0x4c>
    4726:	0b 2e       	mov	r0, r27
    4728:	b9 e0       	ldi	r27, 0x09	; 9
    472a:	cc 0c       	add	r12, r12
    472c:	dd 1c       	adc	r13, r13
    472e:	ee 1c       	adc	r14, r14
    4730:	ff 1c       	adc	r15, r15
    4732:	ba 95       	dec	r27
    4734:	d1 f7       	brne	.-12     	; 0x472a <disk_write+0x3e>
    4736:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
    4738:	01 30       	cpi	r16, 0x01	; 1
    473a:	11 05       	cpc	r17, r1
    473c:	89 f4       	brne	.+34     	; 0x4760 <disk_write+0x74>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    473e:	b7 01       	movw	r22, r14
    4740:	a6 01       	movw	r20, r12
    4742:	88 e1       	ldi	r24, 0x18	; 24
    4744:	f6 dd       	rcall	.-1044   	; 0x4332 <send_cmd>
    4746:	81 11       	cpse	r24, r1
    4748:	29 c0       	rjmp	.+82     	; 0x479c <disk_write+0xb0>
			&& xmit_datablock(buff, 0xFE))
    474a:	6e ef       	ldi	r22, 0xFE	; 254
    474c:	ce 01       	movw	r24, r28
    474e:	81 de       	rcall	.-766    	; 0x4452 <xmit_datablock>
    4750:	31 e0       	ldi	r19, 0x01	; 1
    4752:	20 e0       	ldi	r18, 0x00	; 0
    4754:	89 2b       	or	r24, r25
    4756:	09 f0       	breq	.+2      	; 0x475a <disk_write+0x6e>
    4758:	30 e0       	ldi	r19, 0x00	; 0
    475a:	03 2f       	mov	r16, r19
    475c:	12 2f       	mov	r17, r18
    475e:	1e c0       	rjmp	.+60     	; 0x479c <disk_write+0xb0>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    4760:	86 70       	andi	r24, 0x06	; 6
    4762:	29 f0       	breq	.+10     	; 0x476e <disk_write+0x82>
    4764:	a8 01       	movw	r20, r16
    4766:	60 e0       	ldi	r22, 0x00	; 0
    4768:	70 e0       	ldi	r23, 0x00	; 0
    476a:	87 e9       	ldi	r24, 0x97	; 151
    476c:	e2 dd       	rcall	.-1084   	; 0x4332 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    476e:	b7 01       	movw	r22, r14
    4770:	a6 01       	movw	r20, r12
    4772:	89 e1       	ldi	r24, 0x19	; 25
    4774:	de dd       	rcall	.-1092   	; 0x4332 <send_cmd>
    4776:	81 11       	cpse	r24, r1
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    4778:	11 c0       	rjmp	.+34     	; 0x479c <disk_write+0xb0>
    477a:	6c ef       	ldi	r22, 0xFC	; 252
    477c:	ce 01       	movw	r24, r28
    477e:	69 de       	rcall	.-814    	; 0x4452 <xmit_datablock>
    4780:	89 2b       	or	r24, r25
    4782:	21 f0       	breq	.+8      	; 0x478c <disk_write+0xa0>
				buff += 512;
    4784:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    4786:	01 50       	subi	r16, 0x01	; 1
    4788:	11 09       	sbc	r17, r1
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    478a:	b9 f7       	brne	.-18     	; 0x477a <disk_write+0x8e>
    478c:	6d ef       	ldi	r22, 0xFD	; 253
    478e:	80 e0       	ldi	r24, 0x00	; 0
    4790:	90 e0       	ldi	r25, 0x00	; 0
    4792:	5f de       	rcall	.-834    	; 0x4452 <xmit_datablock>
    4794:	89 2b       	or	r24, r25
				count = 1;
    4796:	11 f4       	brne	.+4      	; 0x479c <disk_write+0xb0>
    4798:	01 e0       	ldi	r16, 0x01	; 1
		}
	}
	deselect();
    479a:	10 e0       	ldi	r17, 0x00	; 0
    479c:	b1 dd       	rcall	.-1182   	; 0x4300 <deselect>

	return count ? RES_ERROR : RES_OK;
    479e:	81 e0       	ldi	r24, 0x01	; 1
    47a0:	01 2b       	or	r16, r17
    47a2:	49 f4       	brne	.+18     	; 0x47b6 <disk_write+0xca>
    47a4:	80 e0       	ldi	r24, 0x00	; 0
    47a6:	07 c0       	rjmp	.+14     	; 0x47b6 <disk_write+0xca>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (pdrv || !count) return RES_PARERR;
    47a8:	84 e0       	ldi	r24, 0x04	; 4
    47aa:	05 c0       	rjmp	.+10     	; 0x47b6 <disk_write+0xca>
    47ac:	84 e0       	ldi	r24, 0x04	; 4
    47ae:	03 c0       	rjmp	.+6      	; 0x47b6 <disk_write+0xca>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    47b0:	83 e0       	ldi	r24, 0x03	; 3
    47b2:	01 c0       	rjmp	.+2      	; 0x47b6 <disk_write+0xca>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    47b4:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    47b6:	df 91       	pop	r29
    47b8:	cf 91       	pop	r28
    47ba:	1f 91       	pop	r17
    47bc:	0f 91       	pop	r16
    47be:	ff 90       	pop	r15
    47c0:	ef 90       	pop	r14
    47c2:	df 90       	pop	r13
    47c4:	cf 90       	pop	r12
    47c6:	08 95       	ret

000047c8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    47c8:	ef 92       	push	r14
    47ca:	ff 92       	push	r15
    47cc:	0f 93       	push	r16
    47ce:	1f 93       	push	r17
    47d0:	cf 93       	push	r28
    47d2:	df 93       	push	r29
    47d4:	cd b7       	in	r28, 0x3d	; 61
    47d6:	de b7       	in	r29, 0x3e	; 62
    47d8:	60 97       	sbiw	r28, 0x10	; 16
    47da:	0f b6       	in	r0, 0x3f	; 63
    47dc:	f8 94       	cli
    47de:	de bf       	out	0x3e, r29	; 62
    47e0:	0f be       	out	0x3f, r0	; 63
    47e2:	cd bf       	out	0x3d, r28	; 61
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    47e4:	81 11       	cpse	r24, r1
    47e6:	81 c1       	rjmp	.+770    	; 0x4aea <disk_ioctl+0x322>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    47e8:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <Stat>
    47ec:	80 fd       	sbrc	r24, 0
    47ee:	7f c1       	rjmp	.+766    	; 0x4aee <disk_ioctl+0x326>
    47f0:	8a 01       	movw	r16, r20

	switch (cmd) {
    47f2:	86 2f       	mov	r24, r22
    47f4:	90 e0       	ldi	r25, 0x00	; 0
    47f6:	87 33       	cpi	r24, 0x37	; 55
    47f8:	91 05       	cpc	r25, r1
    47fa:	08 f0       	brcs	.+2      	; 0x47fe <disk_ioctl+0x36>
    47fc:	5e c1       	rjmp	.+700    	; 0x4aba <disk_ioctl+0x2f2>
    47fe:	fc 01       	movw	r30, r24
    4800:	ea 5b       	subi	r30, 0xBA	; 186
    4802:	ff 4f       	sbci	r31, 0xFF	; 255
    4804:	0c 94 1a 2e 	jmp	0x5c34	; 0x5c34 <__tablejump2__>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    4808:	7f dd       	rcall	.-1282   	; 0x4308 <select>
    480a:	11 e0       	ldi	r17, 0x01	; 1
    480c:	89 2b       	or	r24, r25
    480e:	09 f4       	brne	.+2      	; 0x4812 <disk_ioctl+0x4a>
    4810:	69 c1       	rjmp	.+722    	; 0x4ae4 <disk_ioctl+0x31c>
    4812:	10 e0       	ldi	r17, 0x00	; 0
    4814:	67 c1       	rjmp	.+718    	; 0x4ae4 <disk_ioctl+0x31c>
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    4816:	40 e0       	ldi	r20, 0x00	; 0
    4818:	50 e0       	ldi	r21, 0x00	; 0
    481a:	ba 01       	movw	r22, r20
    481c:	89 e0       	ldi	r24, 0x09	; 9
    481e:	89 dd       	rcall	.-1262   	; 0x4332 <send_cmd>
    4820:	81 11       	cpse	r24, r1
    4822:	4d c1       	rjmp	.+666    	; 0x4abe <disk_ioctl+0x2f6>
    4824:	60 e1       	ldi	r22, 0x10	; 16
    4826:	70 e0       	ldi	r23, 0x00	; 0
    4828:	ce 01       	movw	r24, r28
    482a:	01 96       	adiw	r24, 0x01	; 1
    482c:	d8 dd       	rcall	.-1104   	; 0x43de <rcvr_datablock>
    482e:	89 2b       	or	r24, r25
    4830:	09 f4       	brne	.+2      	; 0x4834 <disk_ioctl+0x6c>
    4832:	47 c1       	rjmp	.+654    	; 0x4ac2 <disk_ioctl+0x2fa>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    4834:	89 81       	ldd	r24, Y+1	; 0x01
    4836:	82 95       	swap	r24
    4838:	86 95       	lsr	r24
    483a:	86 95       	lsr	r24
    483c:	83 70       	andi	r24, 0x03	; 3
    483e:	81 30       	cpi	r24, 0x01	; 1
    4840:	31 f5       	brne	.+76     	; 0x488e <disk_ioctl+0xc6>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
    4842:	29 85       	ldd	r18, Y+9	; 0x09
    4844:	30 e0       	ldi	r19, 0x00	; 0
    4846:	32 2f       	mov	r19, r18
    4848:	22 27       	eor	r18, r18
    484a:	8a 85       	ldd	r24, Y+10	; 0x0a
    484c:	28 0f       	add	r18, r24
    484e:	31 1d       	adc	r19, r1
    4850:	88 85       	ldd	r24, Y+8	; 0x08
    4852:	8f 73       	andi	r24, 0x3F	; 63
    4854:	90 e0       	ldi	r25, 0x00	; 0
    4856:	a0 e0       	ldi	r26, 0x00	; 0
    4858:	b0 e0       	ldi	r27, 0x00	; 0
    485a:	dc 01       	movw	r26, r24
    485c:	99 27       	eor	r25, r25
    485e:	88 27       	eor	r24, r24
    4860:	01 96       	adiw	r24, 0x01	; 1
    4862:	a1 1d       	adc	r26, r1
    4864:	b1 1d       	adc	r27, r1
    4866:	82 0f       	add	r24, r18
    4868:	93 1f       	adc	r25, r19
    486a:	a1 1d       	adc	r26, r1
    486c:	b1 1d       	adc	r27, r1
    486e:	07 2e       	mov	r0, r23
    4870:	7a e0       	ldi	r23, 0x0A	; 10
    4872:	88 0f       	add	r24, r24
    4874:	99 1f       	adc	r25, r25
    4876:	aa 1f       	adc	r26, r26
    4878:	bb 1f       	adc	r27, r27
    487a:	7a 95       	dec	r23
    487c:	d1 f7       	brne	.-12     	; 0x4872 <disk_ioctl+0xaa>
    487e:	70 2d       	mov	r23, r0
    4880:	f8 01       	movw	r30, r16
    4882:	80 83       	st	Z, r24
    4884:	91 83       	std	Z+1, r25	; 0x01
    4886:	a2 83       	std	Z+2, r26	; 0x02
    4888:	b3 83       	std	Z+3, r27	; 0x03
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
			}
			res = RES_OK;
    488a:	10 e0       	ldi	r17, 0x00	; 0
    488c:	2b c1       	rjmp	.+598    	; 0x4ae4 <disk_ioctl+0x31c>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
    488e:	89 85       	ldd	r24, Y+9	; 0x09
    4890:	82 95       	swap	r24
    4892:	86 95       	lsr	r24
    4894:	86 95       	lsr	r24
    4896:	83 70       	andi	r24, 0x03	; 3
    4898:	28 85       	ldd	r18, Y+8	; 0x08
    489a:	90 e0       	ldi	r25, 0x00	; 0
    489c:	f4 e0       	ldi	r31, 0x04	; 4
    489e:	2f 9f       	mul	r18, r31
    48a0:	80 0d       	add	r24, r0
    48a2:	91 1d       	adc	r25, r1
    48a4:	11 24       	eor	r1, r1
    48a6:	9c 01       	movw	r18, r24
    48a8:	2f 5f       	subi	r18, 0xFF	; 255
    48aa:	3f 4f       	sbci	r19, 0xFF	; 255
    48ac:	8f 81       	ldd	r24, Y+7	; 0x07
    48ae:	83 70       	andi	r24, 0x03	; 3
    48b0:	90 e0       	ldi	r25, 0x00	; 0
    48b2:	98 2f       	mov	r25, r24
    48b4:	88 27       	eor	r24, r24
    48b6:	99 0f       	add	r25, r25
    48b8:	99 0f       	add	r25, r25
    48ba:	82 0f       	add	r24, r18
    48bc:	93 1f       	adc	r25, r19
    48be:	a0 e0       	ldi	r26, 0x00	; 0
    48c0:	b0 e0       	ldi	r27, 0x00	; 0
    48c2:	3e 81       	ldd	r19, Y+6	; 0x06
    48c4:	3f 70       	andi	r19, 0x0F	; 15
    48c6:	2b 85       	ldd	r18, Y+11	; 0x0b
    48c8:	22 1f       	adc	r18, r18
    48ca:	22 27       	eor	r18, r18
    48cc:	22 1f       	adc	r18, r18
    48ce:	32 0f       	add	r19, r18
    48d0:	2a 85       	ldd	r18, Y+10	; 0x0a
    48d2:	23 70       	andi	r18, 0x03	; 3
    48d4:	22 0f       	add	r18, r18
    48d6:	23 0f       	add	r18, r19
    48d8:	27 50       	subi	r18, 0x07	; 7
    48da:	04 c0       	rjmp	.+8      	; 0x48e4 <disk_ioctl+0x11c>
    48dc:	88 0f       	add	r24, r24
    48de:	99 1f       	adc	r25, r25
    48e0:	aa 1f       	adc	r26, r26
    48e2:	bb 1f       	adc	r27, r27
    48e4:	2a 95       	dec	r18
    48e6:	d2 f7       	brpl	.-12     	; 0x48dc <disk_ioctl+0x114>
    48e8:	f8 01       	movw	r30, r16
    48ea:	80 83       	st	Z, r24
    48ec:	91 83       	std	Z+1, r25	; 0x01
    48ee:	a2 83       	std	Z+2, r26	; 0x02
    48f0:	b3 83       	std	Z+3, r27	; 0x03
			}
			res = RES_OK;
    48f2:	10 e0       	ldi	r17, 0x00	; 0
    48f4:	f7 c0       	rjmp	.+494    	; 0x4ae4 <disk_ioctl+0x31c>
		}
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
    48f6:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <CardType>
    48fa:	82 ff       	sbrs	r24, 2
    48fc:	2f c0       	rjmp	.+94     	; 0x495c <disk_ioctl+0x194>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    48fe:	40 e0       	ldi	r20, 0x00	; 0
    4900:	50 e0       	ldi	r21, 0x00	; 0
    4902:	ba 01       	movw	r22, r20
    4904:	8d e8       	ldi	r24, 0x8D	; 141
    4906:	15 dd       	rcall	.-1494   	; 0x4332 <send_cmd>
    4908:	81 11       	cpse	r24, r1
				spi_rwSPI(0xFF);
    490a:	dd c0       	rjmp	.+442    	; 0x4ac6 <disk_ioctl+0x2fe>
    490c:	8f ef       	ldi	r24, 0xFF	; 255
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    490e:	dc d2       	rcall	.+1464   	; 0x4ec8 <spi_rwSPI>
    4910:	60 e1       	ldi	r22, 0x10	; 16
    4912:	70 e0       	ldi	r23, 0x00	; 0
    4914:	ce 01       	movw	r24, r28
    4916:	01 96       	adiw	r24, 0x01	; 1
    4918:	62 dd       	rcall	.-1340   	; 0x43de <rcvr_datablock>
    491a:	89 2b       	or	r24, r25
    491c:	09 f4       	brne	.+2      	; 0x4920 <disk_ioctl+0x158>
    491e:	d5 c0       	rjmp	.+426    	; 0x4aca <disk_ioctl+0x302>
    4920:	0f 2e       	mov	r0, r31
    4922:	f0 e3       	ldi	r31, 0x30	; 48
    4924:	ff 2e       	mov	r15, r31
					for (n = 64 - 16; n; n--) spi_rwSPI(0xFF);	/* Purge trailing data */
    4926:	f0 2d       	mov	r31, r0
    4928:	8f ef       	ldi	r24, 0xFF	; 255
    492a:	ce d2       	rcall	.+1436   	; 0x4ec8 <spi_rwSPI>
    492c:	fa 94       	dec	r15
    492e:	f1 10       	cpse	r15, r1
    4930:	fb cf       	rjmp	.-10     	; 0x4928 <disk_ioctl+0x160>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
    4932:	2b 85       	ldd	r18, Y+11	; 0x0b
    4934:	22 95       	swap	r18
    4936:	2f 70       	andi	r18, 0x0F	; 15
    4938:	80 e1       	ldi	r24, 0x10	; 16
    493a:	90 e0       	ldi	r25, 0x00	; 0
    493c:	a0 e0       	ldi	r26, 0x00	; 0
    493e:	b0 e0       	ldi	r27, 0x00	; 0
    4940:	04 c0       	rjmp	.+8      	; 0x494a <disk_ioctl+0x182>
    4942:	88 0f       	add	r24, r24
    4944:	99 1f       	adc	r25, r25
    4946:	aa 1f       	adc	r26, r26
    4948:	bb 1f       	adc	r27, r27
    494a:	2a 95       	dec	r18
    494c:	d2 f7       	brpl	.-12     	; 0x4942 <disk_ioctl+0x17a>
    494e:	f8 01       	movw	r30, r16
    4950:	80 83       	st	Z, r24
    4952:	91 83       	std	Z+1, r25	; 0x01
    4954:	a2 83       	std	Z+2, r26	; 0x02
					res = RES_OK;
    4956:	b3 83       	std	Z+3, r27	; 0x03
    4958:	10 e0       	ldi	r17, 0x00	; 0
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    495a:	c4 c0       	rjmp	.+392    	; 0x4ae4 <disk_ioctl+0x31c>
    495c:	40 e0       	ldi	r20, 0x00	; 0
    495e:	50 e0       	ldi	r21, 0x00	; 0
    4960:	ba 01       	movw	r22, r20
    4962:	89 e0       	ldi	r24, 0x09	; 9
    4964:	e6 dc       	rcall	.-1588   	; 0x4332 <send_cmd>
    4966:	81 11       	cpse	r24, r1
    4968:	b2 c0       	rjmp	.+356    	; 0x4ace <disk_ioctl+0x306>
    496a:	60 e1       	ldi	r22, 0x10	; 16
    496c:	70 e0       	ldi	r23, 0x00	; 0
    496e:	ce 01       	movw	r24, r28
    4970:	01 96       	adiw	r24, 0x01	; 1
    4972:	35 dd       	rcall	.-1430   	; 0x43de <rcvr_datablock>
    4974:	89 2b       	or	r24, r25
    4976:	09 f4       	brne	.+2      	; 0x497a <disk_ioctl+0x1b2>
    4978:	ac c0       	rjmp	.+344    	; 0x4ad2 <disk_ioctl+0x30a>
				if (CardType & CT_SD1) {	/* SDv1 */
    497a:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <CardType>
    497e:	81 ff       	sbrs	r24, 1
    4980:	20 c0       	rjmp	.+64     	; 0x49c2 <disk_ioctl+0x1fa>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    4982:	2b 85       	ldd	r18, Y+11	; 0x0b
    4984:	2f 73       	andi	r18, 0x3F	; 63
    4986:	8c 85       	ldd	r24, Y+12	; 0x0c
    4988:	88 1f       	adc	r24, r24
    498a:	88 27       	eor	r24, r24
    498c:	88 1f       	adc	r24, r24
    498e:	90 e0       	ldi	r25, 0x00	; 0
    4990:	01 96       	adiw	r24, 0x01	; 1
    4992:	82 0f       	add	r24, r18
    4994:	91 1d       	adc	r25, r1
    4996:	82 0f       	add	r24, r18
    4998:	91 1d       	adc	r25, r1
    499a:	2e 85       	ldd	r18, Y+14	; 0x0e
    499c:	22 95       	swap	r18
    499e:	26 95       	lsr	r18
    49a0:	26 95       	lsr	r18
    49a2:	23 70       	andi	r18, 0x03	; 3
    49a4:	21 50       	subi	r18, 0x01	; 1
    49a6:	02 c0       	rjmp	.+4      	; 0x49ac <disk_ioctl+0x1e4>
    49a8:	88 0f       	add	r24, r24
    49aa:	99 1f       	adc	r25, r25
    49ac:	2a 95       	dec	r18
    49ae:	e2 f7       	brpl	.-8      	; 0x49a8 <disk_ioctl+0x1e0>
    49b0:	a0 e0       	ldi	r26, 0x00	; 0
    49b2:	b0 e0       	ldi	r27, 0x00	; 0
    49b4:	f8 01       	movw	r30, r16
    49b6:	80 83       	st	Z, r24
    49b8:	91 83       	std	Z+1, r25	; 0x01
    49ba:	a2 83       	std	Z+2, r26	; 0x02
    49bc:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
    49be:	10 e0       	ldi	r17, 0x00	; 0
    49c0:	91 c0       	rjmp	.+290    	; 0x4ae4 <disk_ioctl+0x31c>
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
				if (CardType & CT_SD1) {	/* SDv1 */
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    49c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    49c4:	28 2f       	mov	r18, r24
    49c6:	23 70       	andi	r18, 0x03	; 3
    49c8:	82 95       	swap	r24
    49ca:	86 95       	lsr	r24
    49cc:	87 70       	andi	r24, 0x07	; 7
    49ce:	90 e0       	ldi	r25, 0x00	; 0
    49d0:	f8 e0       	ldi	r31, 0x08	; 8
    49d2:	2f 9f       	mul	r18, r31
    49d4:	80 0d       	add	r24, r0
    49d6:	91 1d       	adc	r25, r1
    49d8:	11 24       	eor	r1, r1
    49da:	01 96       	adiw	r24, 0x01	; 1
    49dc:	2b 85       	ldd	r18, Y+11	; 0x0b
    49de:	2c 77       	andi	r18, 0x7C	; 124
    49e0:	30 e0       	ldi	r19, 0x00	; 0
    49e2:	35 95       	asr	r19
    49e4:	27 95       	ror	r18
    49e6:	35 95       	asr	r19
    49e8:	27 95       	ror	r18
    49ea:	2f 5f       	subi	r18, 0xFF	; 255
    49ec:	3f 4f       	sbci	r19, 0xFF	; 255
    49ee:	82 9f       	mul	r24, r18
    49f0:	a0 01       	movw	r20, r0
    49f2:	83 9f       	mul	r24, r19
    49f4:	50 0d       	add	r21, r0
    49f6:	92 9f       	mul	r25, r18
    49f8:	50 0d       	add	r21, r0
    49fa:	11 24       	eor	r1, r1
    49fc:	ca 01       	movw	r24, r20
    49fe:	a0 e0       	ldi	r26, 0x00	; 0
    4a00:	b0 e0       	ldi	r27, 0x00	; 0
    4a02:	f8 01       	movw	r30, r16
    4a04:	80 83       	st	Z, r24
    4a06:	91 83       	std	Z+1, r25	; 0x01
    4a08:	a2 83       	std	Z+2, r26	; 0x02
    4a0a:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
    4a0c:	10 e0       	ldi	r17, 0x00	; 0
    4a0e:	6a c0       	rjmp	.+212    	; 0x4ae4 <disk_ioctl+0x31c>
		break;

	/* Following commands are never used by FatFs module */

	case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
		*ptr = CardType;
    4a10:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <CardType>
    4a14:	fa 01       	movw	r30, r20
		res = RES_OK;
    4a16:	80 83       	st	Z, r24
		break;
    4a18:	10 e0       	ldi	r17, 0x00	; 0

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    4a1a:	64 c0       	rjmp	.+200    	; 0x4ae4 <disk_ioctl+0x31c>
    4a1c:	40 e0       	ldi	r20, 0x00	; 0
    4a1e:	50 e0       	ldi	r21, 0x00	; 0
    4a20:	ba 01       	movw	r22, r20
    4a22:	89 e0       	ldi	r24, 0x09	; 9
    4a24:	86 dc       	rcall	.-1780   	; 0x4332 <send_cmd>
    4a26:	81 11       	cpse	r24, r1
			&& rcvr_datablock(ptr, 16))
    4a28:	56 c0       	rjmp	.+172    	; 0x4ad6 <disk_ioctl+0x30e>
    4a2a:	60 e1       	ldi	r22, 0x10	; 16
    4a2c:	70 e0       	ldi	r23, 0x00	; 0
    4a2e:	c8 01       	movw	r24, r16

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	switch (cmd) {
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    4a30:	d6 dc       	rcall	.-1620   	; 0x43de <rcvr_datablock>
    4a32:	11 e0       	ldi	r17, 0x01	; 1
    4a34:	89 2b       	or	r24, r25
    4a36:	09 f4       	brne	.+2      	; 0x4a3a <disk_ioctl+0x272>
    4a38:	55 c0       	rjmp	.+170    	; 0x4ae4 <disk_ioctl+0x31c>
			&& rcvr_datablock(ptr, 16))
			res = RES_OK;
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    4a3a:	10 e0       	ldi	r17, 0x00	; 0
    4a3c:	53 c0       	rjmp	.+166    	; 0x4ae4 <disk_ioctl+0x31c>
    4a3e:	40 e0       	ldi	r20, 0x00	; 0
    4a40:	50 e0       	ldi	r21, 0x00	; 0
    4a42:	ba 01       	movw	r22, r20
    4a44:	8a e0       	ldi	r24, 0x0A	; 10
    4a46:	75 dc       	rcall	.-1814   	; 0x4332 <send_cmd>
    4a48:	81 11       	cpse	r24, r1
			&& rcvr_datablock(ptr, 16))
    4a4a:	47 c0       	rjmp	.+142    	; 0x4ada <disk_ioctl+0x312>
    4a4c:	60 e1       	ldi	r22, 0x10	; 16
    4a4e:	70 e0       	ldi	r23, 0x00	; 0
    4a50:	c8 01       	movw	r24, r16

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	switch (cmd) {
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    4a52:	c5 dc       	rcall	.-1654   	; 0x43de <rcvr_datablock>
    4a54:	11 e0       	ldi	r17, 0x01	; 1
    4a56:	89 2b       	or	r24, r25
    4a58:	09 f4       	brne	.+2      	; 0x4a5c <disk_ioctl+0x294>
    4a5a:	44 c0       	rjmp	.+136    	; 0x4ae4 <disk_ioctl+0x31c>
			&& rcvr_datablock(ptr, 16))
			res = RES_OK;
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    4a5c:	10 e0       	ldi	r17, 0x00	; 0
    4a5e:	42 c0       	rjmp	.+132    	; 0x4ae4 <disk_ioctl+0x31c>
    4a60:	40 e0       	ldi	r20, 0x00	; 0
    4a62:	50 e0       	ldi	r21, 0x00	; 0
    4a64:	ba 01       	movw	r22, r20
    4a66:	8a e3       	ldi	r24, 0x3A	; 58
    4a68:	64 dc       	rcall	.-1848   	; 0x4332 <send_cmd>
    4a6a:	81 11       	cpse	r24, r1
    4a6c:	38 c0       	rjmp	.+112    	; 0x4ade <disk_ioctl+0x316>
    4a6e:	78 01       	movw	r14, r16
    4a70:	0c 5f       	subi	r16, 0xFC	; 252
			for (n = 4; n; n--) *ptr++ = spi_rwSPI(0xFF);
    4a72:	1f 4f       	sbci	r17, 0xFF	; 255
    4a74:	8f ef       	ldi	r24, 0xFF	; 255
    4a76:	28 d2       	rcall	.+1104   	; 0x4ec8 <spi_rwSPI>
    4a78:	f7 01       	movw	r30, r14
    4a7a:	81 93       	st	Z+, r24
    4a7c:	7f 01       	movw	r14, r30
    4a7e:	0e 17       	cp	r16, r30
			res = RES_OK;
    4a80:	1f 07       	cpc	r17, r31
    4a82:	c1 f7       	brne	.-16     	; 0x4a74 <disk_ioctl+0x2ac>
		}
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    4a84:	10 e0       	ldi	r17, 0x00	; 0
    4a86:	2e c0       	rjmp	.+92     	; 0x4ae4 <disk_ioctl+0x31c>
    4a88:	40 e0       	ldi	r20, 0x00	; 0
    4a8a:	50 e0       	ldi	r21, 0x00	; 0
    4a8c:	ba 01       	movw	r22, r20
    4a8e:	8d e8       	ldi	r24, 0x8D	; 141
    4a90:	50 dc       	rcall	.-1888   	; 0x4332 <send_cmd>
    4a92:	81 11       	cpse	r24, r1
			spi_rwSPI(0xFF);
    4a94:	26 c0       	rjmp	.+76     	; 0x4ae2 <disk_ioctl+0x31a>
    4a96:	8f ef       	ldi	r24, 0xFF	; 255
    4a98:	17 d2       	rcall	.+1070   	; 0x4ec8 <spi_rwSPI>
			if (rcvr_datablock(ptr, 64))
    4a9a:	60 e4       	ldi	r22, 0x40	; 64
    4a9c:	70 e0       	ldi	r23, 0x00	; 0
    4a9e:	c8 01       	movw	r24, r16
    4aa0:	9e dc       	rcall	.-1732   	; 0x43de <rcvr_datablock>
    4aa2:	11 e0       	ldi	r17, 0x01	; 1

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	switch (cmd) {
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    4aa4:	89 2b       	or	r24, r25
    4aa6:	f1 f0       	breq	.+60     	; 0x4ae4 <disk_ioctl+0x31c>
    4aa8:	10 e0       	ldi	r17, 0x00	; 0
    4aaa:	1c c0       	rjmp	.+56     	; 0x4ae4 <disk_ioctl+0x31c>
    4aac:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <Stat>
				res = RES_OK;
		}
		break;

	case CTRL_POWER_OFF :	/* Power off */
		Stat |= STA_NOINIT;
    4ab0:	81 60       	ori	r24, 0x01	; 1
    4ab2:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <Stat>
    4ab6:	10 e0       	ldi	r17, 0x00	; 0
		res = RES_OK;
    4ab8:	15 c0       	rjmp	.+42     	; 0x4ae4 <disk_ioctl+0x31c>
		break;
    4aba:	14 e0       	ldi	r17, 0x04	; 4

	default:
		res = RES_PARERR;
    4abc:	13 c0       	rjmp	.+38     	; 0x4ae4 <disk_ioctl+0x31c>
    4abe:	11 e0       	ldi	r17, 0x01	; 1
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    4ac0:	11 c0       	rjmp	.+34     	; 0x4ae4 <disk_ioctl+0x31c>
    4ac2:	11 e0       	ldi	r17, 0x01	; 1
    4ac4:	0f c0       	rjmp	.+30     	; 0x4ae4 <disk_ioctl+0x31c>
    4ac6:	11 e0       	ldi	r17, 0x01	; 1
    4ac8:	0d c0       	rjmp	.+26     	; 0x4ae4 <disk_ioctl+0x31c>
    4aca:	11 e0       	ldi	r17, 0x01	; 1
    4acc:	0b c0       	rjmp	.+22     	; 0x4ae4 <disk_ioctl+0x31c>
    4ace:	11 e0       	ldi	r17, 0x01	; 1
    4ad0:	09 c0       	rjmp	.+18     	; 0x4ae4 <disk_ioctl+0x31c>
    4ad2:	11 e0       	ldi	r17, 0x01	; 1
    4ad4:	07 c0       	rjmp	.+14     	; 0x4ae4 <disk_ioctl+0x31c>
    4ad6:	11 e0       	ldi	r17, 0x01	; 1
    4ad8:	05 c0       	rjmp	.+10     	; 0x4ae4 <disk_ioctl+0x31c>
    4ada:	11 e0       	ldi	r17, 0x01	; 1
    4adc:	03 c0       	rjmp	.+6      	; 0x4ae4 <disk_ioctl+0x31c>
    4ade:	11 e0       	ldi	r17, 0x01	; 1
    4ae0:	01 c0       	rjmp	.+2      	; 0x4ae4 <disk_ioctl+0x31c>
    4ae2:	11 e0       	ldi	r17, 0x01	; 1

	default:
		res = RES_PARERR;
	}

	deselect();
    4ae4:	0d dc       	rcall	.-2022   	; 0x4300 <deselect>
    4ae6:	81 2f       	mov	r24, r17

	return res;
    4ae8:	03 c0       	rjmp	.+6      	; 0x4af0 <disk_ioctl+0x328>
    4aea:	84 e0       	ldi	r24, 0x04	; 4
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    4aec:	01 c0       	rjmp	.+2      	; 0x4af0 <disk_ioctl+0x328>
    4aee:	83 e0       	ldi	r24, 0x03	; 3

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    4af0:	60 96       	adiw	r28, 0x10	; 16
	}

	deselect();

	return res;
}
    4af2:	0f b6       	in	r0, 0x3f	; 63
    4af4:	f8 94       	cli
    4af6:	de bf       	out	0x3e, r29	; 62
    4af8:	0f be       	out	0x3f, r0	; 63
    4afa:	cd bf       	out	0x3d, r28	; 61
    4afc:	df 91       	pop	r29
    4afe:	cf 91       	pop	r28
    4b00:	1f 91       	pop	r17
    4b02:	0f 91       	pop	r16
    4b04:	ff 90       	pop	r15
    4b06:	ef 90       	pop	r14
    4b08:	08 95       	ret

00004b0a <hih8120_measure>:

float hih8120_humidity = 1;
float hih8120_temperature_C = 1;

void hih8120_measure()
{
    4b0a:	0f 93       	push	r16
    4b0c:	1f 93       	push	r17
    4b0e:	cf 93       	push	r28
    4b10:	df 93       	push	r29
	i2c_start_wait(0x27 << 1);
    4b12:	8e e4       	ldi	r24, 0x4E	; 78
    4b14:	65 d0       	rcall	.+202    	; 0x4be0 <i2c_start_wait>
	i2c_write((uint8_t) 0x01);
    4b16:	81 e0       	ldi	r24, 0x01	; 1
	i2c_stop();
    4b18:	9d d0       	rcall	.+314    	; 0x4c54 <i2c_write>
    4b1a:	93 d0       	rcall	.+294    	; 0x4c42 <i2c_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4b1c:	2f ef       	ldi	r18, 0xFF	; 255
    4b1e:	80 e7       	ldi	r24, 0x70	; 112
    4b20:	92 e0       	ldi	r25, 0x02	; 2
    4b22:	21 50       	subi	r18, 0x01	; 1
    4b24:	80 40       	sbci	r24, 0x00	; 0
    4b26:	90 40       	sbci	r25, 0x00	; 0
    4b28:	e1 f7       	brne	.-8      	; 0x4b22 <hih8120_measure+0x18>
    4b2a:	00 c0       	rjmp	.+0      	; 0x4b2c <hih8120_measure+0x22>
	
	_delay_ms(100);
	
	i2c_start_wait((0x27 << 1) | I2C_READ);
    4b2c:	00 00       	nop
    4b2e:	8f e4       	ldi	r24, 0x4F	; 79
	
	uint8_t humidity_hi = i2c_readAck();
    4b30:	57 d0       	rcall	.+174    	; 0x4be0 <i2c_start_wait>
    4b32:	a2 d0       	rcall	.+324    	; 0x4c78 <i2c_readAck>
	uint8_t humidity_lo = i2c_readAck();
    4b34:	18 2f       	mov	r17, r24
    4b36:	a0 d0       	rcall	.+320    	; 0x4c78 <i2c_readAck>
	uint8_t temp_hi = i2c_readAck();
    4b38:	d8 2f       	mov	r29, r24
    4b3a:	9e d0       	rcall	.+316    	; 0x4c78 <i2c_readAck>
    4b3c:	08 2f       	mov	r16, r24
	uint8_t temp_lo = i2c_readNak();
    4b3e:	a7 d0       	rcall	.+334    	; 0x4c8e <i2c_readNak>
    4b40:	c8 2f       	mov	r28, r24
    4b42:	7f d0       	rcall	.+254    	; 0x4c42 <i2c_stop>
	
	i2c_stop();
    4b44:	1f 73       	andi	r17, 0x3F	; 63
	
	// Calculate Relative Humidity
	hih8120_humidity = (float)((((humidity_hi & 0x3f) << 8) | humidity_lo) / ((pow(2,14) - 2)) * 100);
    4b46:	6d 2f       	mov	r22, r29
    4b48:	70 e0       	ldi	r23, 0x00	; 0
    4b4a:	71 2b       	or	r23, r17
    4b4c:	07 2e       	mov	r0, r23
    4b4e:	00 0c       	add	r0, r0
    4b50:	88 0b       	sbc	r24, r24
    4b52:	99 0b       	sbc	r25, r25
    4b54:	d9 d6       	rcall	.+3506   	; 0x5908 <__floatsisf>
    4b56:	20 e0       	ldi	r18, 0x00	; 0
    4b58:	38 ef       	ldi	r19, 0xF8	; 248
    4b5a:	4f e7       	ldi	r20, 0x7F	; 127
    4b5c:	56 e4       	ldi	r21, 0x46	; 70
    4b5e:	35 d6       	rcall	.+3178   	; 0x57ca <__divsf3>
    4b60:	20 e0       	ldi	r18, 0x00	; 0
    4b62:	30 e0       	ldi	r19, 0x00	; 0
    4b64:	48 ec       	ldi	r20, 0xC8	; 200
    4b66:	52 e4       	ldi	r21, 0x42	; 66
    4b68:	d1 d7       	rcall	.+4002   	; 0x5b0c <__mulsf3>
    4b6a:	60 93 2d 01 	sts	0x012D, r22	; 0x80012d <hih8120_humidity>
    4b6e:	70 93 2e 01 	sts	0x012E, r23	; 0x80012e <hih8120_humidity+0x1>
    4b72:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <hih8120_humidity+0x2>
    4b76:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <hih8120_humidity+0x3>
    4b7a:	c6 95       	lsr	r28
    4b7c:	c6 95       	lsr	r28

	// Calculate Temperature
	hih8120_temperature_C = (float) ((((temp_hi << 6) + (temp_lo >> 2)) / (pow(2, 14) - 2)) * 165 - 40);
    4b7e:	6c 2f       	mov	r22, r28
    4b80:	70 e0       	ldi	r23, 0x00	; 0
    4b82:	20 e4       	ldi	r18, 0x40	; 64
    4b84:	02 9f       	mul	r16, r18
    4b86:	60 0d       	add	r22, r0
    4b88:	71 1d       	adc	r23, r1
    4b8a:	11 24       	eor	r1, r1
    4b8c:	07 2e       	mov	r0, r23
    4b8e:	00 0c       	add	r0, r0
    4b90:	88 0b       	sbc	r24, r24
    4b92:	99 0b       	sbc	r25, r25
    4b94:	b9 d6       	rcall	.+3442   	; 0x5908 <__floatsisf>
    4b96:	20 e0       	ldi	r18, 0x00	; 0
    4b98:	38 ef       	ldi	r19, 0xF8	; 248
    4b9a:	4f e7       	ldi	r20, 0x7F	; 127
    4b9c:	56 e4       	ldi	r21, 0x46	; 70
    4b9e:	15 d6       	rcall	.+3114   	; 0x57ca <__divsf3>
    4ba0:	20 e0       	ldi	r18, 0x00	; 0
    4ba2:	30 e0       	ldi	r19, 0x00	; 0
    4ba4:	45 e2       	ldi	r20, 0x25	; 37
    4ba6:	53 e4       	ldi	r21, 0x43	; 67
    4ba8:	b1 d7       	rcall	.+3938   	; 0x5b0c <__mulsf3>
    4baa:	20 e0       	ldi	r18, 0x00	; 0
    4bac:	30 e0       	ldi	r19, 0x00	; 0
    4bae:	40 e2       	ldi	r20, 0x20	; 32
    4bb0:	52 e4       	ldi	r21, 0x42	; 66
    4bb2:	a2 d5       	rcall	.+2884   	; 0x56f8 <__subsf3>
    4bb4:	60 93 29 01 	sts	0x0129, r22	; 0x800129 <hih8120_temperature_C>
    4bb8:	70 93 2a 01 	sts	0x012A, r23	; 0x80012a <hih8120_temperature_C+0x1>
    4bbc:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <hih8120_temperature_C+0x2>
    4bc0:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <hih8120_temperature_C+0x3>
    4bc4:	df 91       	pop	r29
    4bc6:	cf 91       	pop	r28
}
    4bc8:	1f 91       	pop	r17
    4bca:	0f 91       	pop	r16
    4bcc:	08 95       	ret

00004bce <i2c_init>:
    4bce:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    4bd2:	88 e4       	ldi	r24, 0x48	; 72
    4bd4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    4bd8:	84 e0       	ldi	r24, 0x04	; 4
    4bda:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    4bde:	08 95       	ret

00004be0 <i2c_start_wait>:
    4be0:	cf 93       	push	r28
    4be2:	df 93       	push	r29
    4be4:	ec eb       	ldi	r30, 0xBC	; 188
    4be6:	f0 e0       	ldi	r31, 0x00	; 0
    4be8:	24 ea       	ldi	r18, 0xA4	; 164
    4bea:	a9 eb       	ldi	r26, 0xB9	; 185
    4bec:	b0 e0       	ldi	r27, 0x00	; 0
    4bee:	cb eb       	ldi	r28, 0xBB	; 187
    4bf0:	d0 e0       	ldi	r29, 0x00	; 0
    4bf2:	34 e8       	ldi	r19, 0x84	; 132
    4bf4:	44 e9       	ldi	r20, 0x94	; 148
    4bf6:	20 83       	st	Z, r18
    4bf8:	90 81       	ld	r25, Z
    4bfa:	99 23       	and	r25, r25
    4bfc:	ec f7       	brge	.-6      	; 0x4bf8 <i2c_start_wait+0x18>
    4bfe:	9c 91       	ld	r25, X
    4c00:	98 7f       	andi	r25, 0xF8	; 248
    4c02:	98 30       	cpi	r25, 0x08	; 8
    4c04:	11 f0       	breq	.+4      	; 0x4c0a <i2c_start_wait+0x2a>
    4c06:	90 31       	cpi	r25, 0x10	; 16
    4c08:	b1 f7       	brne	.-20     	; 0x4bf6 <i2c_start_wait+0x16>
    4c0a:	88 83       	st	Y, r24
    4c0c:	30 83       	st	Z, r19
    4c0e:	90 81       	ld	r25, Z
    4c10:	99 23       	and	r25, r25
    4c12:	ec f7       	brge	.-6      	; 0x4c0e <i2c_start_wait+0x2e>
    4c14:	9c 91       	ld	r25, X
    4c16:	98 7f       	andi	r25, 0xF8	; 248
    4c18:	90 32       	cpi	r25, 0x20	; 32
    4c1a:	11 f0       	breq	.+4      	; 0x4c20 <i2c_start_wait+0x40>
    4c1c:	98 35       	cpi	r25, 0x58	; 88
    4c1e:	29 f4       	brne	.+10     	; 0x4c2a <i2c_start_wait+0x4a>
    4c20:	40 83       	st	Z, r20
    4c22:	90 81       	ld	r25, Z
    4c24:	94 fd       	sbrc	r25, 4
    4c26:	fd cf       	rjmp	.-6      	; 0x4c22 <i2c_start_wait+0x42>
    4c28:	e6 cf       	rjmp	.-52     	; 0x4bf6 <i2c_start_wait+0x16>
    4c2a:	df 91       	pop	r29
    4c2c:	cf 91       	pop	r28
    4c2e:	08 95       	ret

00004c30 <rtc_I2C_Start>:

void rtc_I2C_Start()
{
	TWCR = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));
    4c30:	84 ea       	ldi	r24, 0xA4	; 164
    4c32:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & (1<<TWINT)));
    4c36:	ec eb       	ldi	r30, 0xBC	; 188
    4c38:	f0 e0       	ldi	r31, 0x00	; 0
    4c3a:	80 81       	ld	r24, Z
    4c3c:	88 23       	and	r24, r24
    4c3e:	ec f7       	brge	.-6      	; 0x4c3a <rtc_I2C_Start+0xa>
}
    4c40:	08 95       	ret

00004c42 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    4c42:	84 e9       	ldi	r24, 0x94	; 148
    4c44:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    4c48:	ec eb       	ldi	r30, 0xBC	; 188
    4c4a:	f0 e0       	ldi	r31, 0x00	; 0
    4c4c:	80 81       	ld	r24, Z
    4c4e:	84 fd       	sbrc	r24, 4
    4c50:	fd cf       	rjmp	.-6      	; 0x4c4c <i2c_stop+0xa>

}/* i2c_stop */
    4c52:	08 95       	ret

00004c54 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    4c54:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    4c58:	84 e8       	ldi	r24, 0x84	; 132
    4c5a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    4c5e:	ec eb       	ldi	r30, 0xBC	; 188
    4c60:	f0 e0       	ldi	r31, 0x00	; 0
    4c62:	80 81       	ld	r24, Z
    4c64:	88 23       	and	r24, r24
    4c66:	ec f7       	brge	.-6      	; 0x4c62 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    4c68:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    4c6c:	98 7f       	andi	r25, 0xF8	; 248
    4c6e:	81 e0       	ldi	r24, 0x01	; 1
    4c70:	98 32       	cpi	r25, 0x28	; 40
    4c72:	09 f4       	brne	.+2      	; 0x4c76 <i2c_write+0x22>
    4c74:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    4c76:	08 95       	ret

00004c78 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    4c78:	84 ec       	ldi	r24, 0xC4	; 196
    4c7a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));    
    4c7e:	ec eb       	ldi	r30, 0xBC	; 188
    4c80:	f0 e0       	ldi	r31, 0x00	; 0
    4c82:	80 81       	ld	r24, Z
    4c84:	88 23       	and	r24, r24
    4c86:	ec f7       	brge	.-6      	; 0x4c82 <i2c_readAck+0xa>

    return TWDR;
    4c88:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readAck */
    4c8c:	08 95       	ret

00004c8e <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    4c8e:	84 e8       	ldi	r24, 0x84	; 132
    4c90:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
    4c94:	ec eb       	ldi	r30, 0xBC	; 188
    4c96:	f0 e0       	ldi	r31, 0x00	; 0
    4c98:	80 81       	ld	r24, Z
    4c9a:	88 23       	and	r24, r24
    4c9c:	ec f7       	brge	.-6      	; 0x4c98 <i2c_readNak+0xa>
	
    return TWDR;
    4c9e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readNak */
    4ca2:	08 95       	ret

00004ca4 <RTC_SetDateTime>:
{
	return ((num/10 * 16) + (num % 10));
}

void RTC_SetDateTime(rtc_t *rtc)
{
    4ca4:	0f 93       	push	r16
    4ca6:	1f 93       	push	r17
    4ca8:	cf 93       	push	r28
    4caa:	8c 01       	movw	r16, r24
    rtc_I2C_Start();                          // Start I2C communication
    4cac:	c1 df       	rcall	.-126    	; 0x4c30 <rtc_I2C_Start>
	
	//i2c_write(0x00);
	//i2c_write(0x80);
    i2c_write(C_Ds1307WriteMode_U8);      // connect to DS1307 by sending its ID on I2c Bus
    4cae:	80 ed       	ldi	r24, 0xD0	; 208
    4cb0:	d1 df       	rcall	.-94     	; 0x4c54 <i2c_write>
    i2c_write(C_Ds1307SecondRegAddress_U8); // Request sec RAM address at 00H
    4cb2:	80 e0       	ldi	r24, 0x00	; 0
    4cb4:	cf df       	rcall	.-98     	; 0x4c54 <i2c_write>
    4cb6:	f8 01       	movw	r30, r16

    i2c_write(dec2bcd(rtc->sec));                    // Write sec from RAM address 00H
    4cb8:	80 81       	ld	r24, Z
    4cba:	cd ec       	ldi	r28, 0xCD	; 205
    4cbc:	8c 9f       	mul	r24, r28
    4cbe:	91 2d       	mov	r25, r1
    4cc0:	11 24       	eor	r1, r1
    4cc2:	96 95       	lsr	r25
    4cc4:	96 95       	lsr	r25
    4cc6:	96 95       	lsr	r25
    4cc8:	39 2f       	mov	r19, r25
    4cca:	33 0f       	add	r19, r19
    4ccc:	23 2f       	mov	r18, r19
    4cce:	22 0f       	add	r18, r18
    4cd0:	22 0f       	add	r18, r18
    4cd2:	23 0f       	add	r18, r19
    4cd4:	82 1b       	sub	r24, r18
    4cd6:	f0 e1       	ldi	r31, 0x10	; 16
    4cd8:	9f 9f       	mul	r25, r31
    4cda:	80 0d       	add	r24, r0
    4cdc:	11 24       	eor	r1, r1
    4cde:	ba df       	rcall	.-140    	; 0x4c54 <i2c_write>
    4ce0:	f8 01       	movw	r30, r16
    i2c_write(dec2bcd(rtc->min));                    // Write min from RAM address 01H
    4ce2:	81 81       	ldd	r24, Z+1	; 0x01
    4ce4:	8c 9f       	mul	r24, r28
    4ce6:	91 2d       	mov	r25, r1
    4ce8:	11 24       	eor	r1, r1
    4cea:	96 95       	lsr	r25
    4cec:	96 95       	lsr	r25
    4cee:	96 95       	lsr	r25
    4cf0:	39 2f       	mov	r19, r25
    4cf2:	33 0f       	add	r19, r19
    4cf4:	23 2f       	mov	r18, r19
    4cf6:	22 0f       	add	r18, r18
    4cf8:	22 0f       	add	r18, r18
    4cfa:	23 0f       	add	r18, r19
    4cfc:	82 1b       	sub	r24, r18
    4cfe:	f0 e1       	ldi	r31, 0x10	; 16
    4d00:	9f 9f       	mul	r25, r31
    4d02:	80 0d       	add	r24, r0
    4d04:	11 24       	eor	r1, r1
    4d06:	a6 df       	rcall	.-180    	; 0x4c54 <i2c_write>
    4d08:	f8 01       	movw	r30, r16
    i2c_write(dec2bcd(rtc->hour));                    // Write hour from RAM address 02H
    4d0a:	82 81       	ldd	r24, Z+2	; 0x02
    4d0c:	8c 9f       	mul	r24, r28
    4d0e:	91 2d       	mov	r25, r1
    4d10:	11 24       	eor	r1, r1
    4d12:	96 95       	lsr	r25
    4d14:	96 95       	lsr	r25
    4d16:	96 95       	lsr	r25
    4d18:	39 2f       	mov	r19, r25
    4d1a:	33 0f       	add	r19, r19
    4d1c:	23 2f       	mov	r18, r19
    4d1e:	22 0f       	add	r18, r18
    4d20:	22 0f       	add	r18, r18
    4d22:	23 0f       	add	r18, r19
    4d24:	82 1b       	sub	r24, r18
    4d26:	f0 e1       	ldi	r31, 0x10	; 16
    4d28:	9f 9f       	mul	r25, r31
    4d2a:	80 0d       	add	r24, r0
    4d2c:	11 24       	eor	r1, r1
    4d2e:	92 df       	rcall	.-220    	; 0x4c54 <i2c_write>
    4d30:	f8 01       	movw	r30, r16
    i2c_write(dec2bcd(rtc->weekDay));                // Write weekDay on RAM address 03H
    4d32:	83 81       	ldd	r24, Z+3	; 0x03
    4d34:	8c 9f       	mul	r24, r28
    4d36:	91 2d       	mov	r25, r1
    4d38:	11 24       	eor	r1, r1
    4d3a:	96 95       	lsr	r25
    4d3c:	96 95       	lsr	r25
    4d3e:	96 95       	lsr	r25
    4d40:	39 2f       	mov	r19, r25
    4d42:	33 0f       	add	r19, r19
    4d44:	23 2f       	mov	r18, r19
    4d46:	22 0f       	add	r18, r18
    4d48:	22 0f       	add	r18, r18
    4d4a:	23 0f       	add	r18, r19
    4d4c:	82 1b       	sub	r24, r18
    4d4e:	f0 e1       	ldi	r31, 0x10	; 16
    4d50:	9f 9f       	mul	r25, r31
    4d52:	80 0d       	add	r24, r0
    4d54:	11 24       	eor	r1, r1
    4d56:	7e df       	rcall	.-260    	; 0x4c54 <i2c_write>
    4d58:	f8 01       	movw	r30, r16
    i2c_write(dec2bcd(rtc->date));                    // Write date on RAM address 04H
    4d5a:	84 81       	ldd	r24, Z+4	; 0x04
    4d5c:	8c 9f       	mul	r24, r28
    4d5e:	91 2d       	mov	r25, r1
    4d60:	11 24       	eor	r1, r1
    4d62:	96 95       	lsr	r25
    4d64:	96 95       	lsr	r25
    4d66:	96 95       	lsr	r25
    4d68:	39 2f       	mov	r19, r25
    4d6a:	33 0f       	add	r19, r19
    4d6c:	23 2f       	mov	r18, r19
    4d6e:	22 0f       	add	r18, r18
    4d70:	22 0f       	add	r18, r18
    4d72:	23 0f       	add	r18, r19
    4d74:	82 1b       	sub	r24, r18
    4d76:	f0 e1       	ldi	r31, 0x10	; 16
    4d78:	9f 9f       	mul	r25, r31
    4d7a:	80 0d       	add	r24, r0
    4d7c:	11 24       	eor	r1, r1
    4d7e:	6a df       	rcall	.-300    	; 0x4c54 <i2c_write>
    4d80:	f8 01       	movw	r30, r16
    i2c_write(dec2bcd(rtc->month));                    // Write month on RAM address 05H
    4d82:	85 81       	ldd	r24, Z+5	; 0x05
    4d84:	8c 9f       	mul	r24, r28
    4d86:	91 2d       	mov	r25, r1
    4d88:	11 24       	eor	r1, r1
    4d8a:	96 95       	lsr	r25
    4d8c:	96 95       	lsr	r25
    4d8e:	96 95       	lsr	r25
    4d90:	39 2f       	mov	r19, r25
    4d92:	33 0f       	add	r19, r19
    4d94:	23 2f       	mov	r18, r19
    4d96:	22 0f       	add	r18, r18
    4d98:	22 0f       	add	r18, r18
    4d9a:	23 0f       	add	r18, r19
    4d9c:	82 1b       	sub	r24, r18
    4d9e:	f0 e1       	ldi	r31, 0x10	; 16
    4da0:	9f 9f       	mul	r25, r31
    4da2:	80 0d       	add	r24, r0
    4da4:	11 24       	eor	r1, r1
    4da6:	56 df       	rcall	.-340    	; 0x4c54 <i2c_write>
    4da8:	f8 01       	movw	r30, r16
    i2c_write(dec2bcd(rtc->year));                    // Write year on RAM address 06h*/
    4daa:	86 81       	ldd	r24, Z+6	; 0x06
    4dac:	8c 9f       	mul	r24, r28
    4dae:	c1 2d       	mov	r28, r1
    4db0:	11 24       	eor	r1, r1
    4db2:	c6 95       	lsr	r28
    4db4:	c6 95       	lsr	r28
    4db6:	c6 95       	lsr	r28
    4db8:	2c 2f       	mov	r18, r28
    4dba:	22 0f       	add	r18, r18
    4dbc:	92 2f       	mov	r25, r18
    4dbe:	99 0f       	add	r25, r25
    4dc0:	99 0f       	add	r25, r25
    4dc2:	92 0f       	add	r25, r18
    4dc4:	89 1b       	sub	r24, r25
    4dc6:	f0 e1       	ldi	r31, 0x10	; 16
    4dc8:	cf 9f       	mul	r28, r31
    4dca:	80 0d       	add	r24, r0
    4dcc:	11 24       	eor	r1, r1
    4dce:	42 df       	rcall	.-380    	; 0x4c54 <i2c_write>

    i2c_stop();                              // Stop I2C communication after Setting the Date
    4dd0:	38 df       	rcall	.-400    	; 0x4c42 <i2c_stop>
    4dd2:	cf 91       	pop	r28
}
    4dd4:	1f 91       	pop	r17
    4dd6:	0f 91       	pop	r16
    4dd8:	08 95       	ret

00004dda <RTC_GetDateTime>:
    4dda:	cf 93       	push	r28
    Note: The date and time read from Ds1307 will be of BCD format, 
          like 0x12,0x39,0x26 for 12hr,39min and 26sec.    
               0x15,0x08,0x47 for 15th day,8th month and 47th year.              
***************************************************************************************************/
void RTC_GetDateTime(rtc_t *rtc)
{
    4ddc:	df 93       	push	r29
    4dde:	ec 01       	movw	r28, r24
    rtc_I2C_Start();                            // Start I2C communication
    4de0:	27 df       	rcall	.-434    	; 0x4c30 <rtc_I2C_Start>

    i2c_write(C_Ds1307WriteMode_U8);        // connect to DS1307 by sending its ID on I2c Bus
    4de2:	80 ed       	ldi	r24, 0xD0	; 208
    4de4:	37 df       	rcall	.-402    	; 0x4c54 <i2c_write>
    i2c_write(C_Ds1307SecondRegAddress_U8); // Request Sec RAM address at 00H
    4de6:	80 e0       	ldi	r24, 0x00	; 0
    4de8:	35 df       	rcall	.-406    	; 0x4c54 <i2c_write>

    i2c_stop();                                // Stop I2C communication after selecting Sec Register
    4dea:	2b df       	rcall	.-426    	; 0x4c42 <i2c_stop>
    4dec:	2f ef       	ldi	r18, 0xFF	; 255
    4dee:	81 ee       	ldi	r24, 0xE1	; 225
    4df0:	94 e0       	ldi	r25, 0x04	; 4
    4df2:	21 50       	subi	r18, 0x01	; 1
    4df4:	80 40       	sbci	r24, 0x00	; 0
    4df6:	90 40       	sbci	r25, 0x00	; 0
    4df8:	e1 f7       	brne	.-8      	; 0x4df2 <RTC_GetDateTime+0x18>
    4dfa:	00 c0       	rjmp	.+0      	; 0x4dfc <RTC_GetDateTime+0x22>
	_delay_ms(100);
    rtc_I2C_Start();                            // Start I2C communication
    4dfc:	00 00       	nop
    4dfe:	18 df       	rcall	.-464    	; 0x4c30 <rtc_I2C_Start>
    i2c_write(C_Ds1307ReadMode_U8);            // connect to DS1307(Read mode) by sending its ID
    4e00:	81 ed       	ldi	r24, 0xD1	; 209
    4e02:	28 df       	rcall	.-432    	; 0x4c54 <i2c_write>
    4e04:	39 df       	rcall	.-398    	; 0x4c78 <i2c_readAck>

    rtc->sec = bcd2dec(i2c_readAck());                // read second and return Positive ACK
    4e06:	98 2f       	mov	r25, r24
    4e08:	92 95       	swap	r25
    4e0a:	9f 70       	andi	r25, 0x0F	; 15
    4e0c:	99 0f       	add	r25, r25
    4e0e:	29 2f       	mov	r18, r25
    4e10:	22 0f       	add	r18, r18
    4e12:	22 0f       	add	r18, r18
    4e14:	92 0f       	add	r25, r18
    4e16:	8f 70       	andi	r24, 0x0F	; 15
    4e18:	89 0f       	add	r24, r25
    4e1a:	88 83       	st	Y, r24
    4e1c:	2d df       	rcall	.-422    	; 0x4c78 <i2c_readAck>
    rtc->min = bcd2dec(i2c_readAck());                   // read minute and return Positive ACK
    4e1e:	98 2f       	mov	r25, r24
    4e20:	92 95       	swap	r25
    4e22:	9f 70       	andi	r25, 0x0F	; 15
    4e24:	99 0f       	add	r25, r25
    4e26:	29 2f       	mov	r18, r25
    4e28:	22 0f       	add	r18, r18
    4e2a:	22 0f       	add	r18, r18
    4e2c:	92 0f       	add	r25, r18
    4e2e:	8f 70       	andi	r24, 0x0F	; 15
    4e30:	89 0f       	add	r24, r25
    4e32:	89 83       	std	Y+1, r24	; 0x01
    4e34:	21 df       	rcall	.-446    	; 0x4c78 <i2c_readAck>
    rtc->hour= bcd2dec(i2c_readAck());                  // read hour and return Negative/No ACK
    4e36:	98 2f       	mov	r25, r24
    4e38:	92 95       	swap	r25
    4e3a:	9f 70       	andi	r25, 0x0F	; 15
    4e3c:	99 0f       	add	r25, r25
    4e3e:	29 2f       	mov	r18, r25
    4e40:	22 0f       	add	r18, r18
    4e42:	22 0f       	add	r18, r18
    4e44:	92 0f       	add	r25, r18
    4e46:	8f 70       	andi	r24, 0x0F	; 15
    4e48:	89 0f       	add	r24, r25
    4e4a:	8a 83       	std	Y+2, r24	; 0x02
    4e4c:	15 df       	rcall	.-470    	; 0x4c78 <i2c_readAck>
    rtc->weekDay = bcd2dec(i2c_readAck());              // read weekDay and return Positive ACK
    4e4e:	98 2f       	mov	r25, r24
    4e50:	92 95       	swap	r25
    4e52:	9f 70       	andi	r25, 0x0F	; 15
    4e54:	99 0f       	add	r25, r25
    4e56:	29 2f       	mov	r18, r25
    4e58:	22 0f       	add	r18, r18
    4e5a:	22 0f       	add	r18, r18
    4e5c:	92 0f       	add	r25, r18
    4e5e:	8f 70       	andi	r24, 0x0F	; 15
    4e60:	89 0f       	add	r24, r25
    4e62:	8b 83       	std	Y+3, r24	; 0x03
    4e64:	09 df       	rcall	.-494    	; 0x4c78 <i2c_readAck>
    rtc->date= bcd2dec(i2c_readAck());                // read Date and return Positive ACK
    4e66:	98 2f       	mov	r25, r24
    4e68:	92 95       	swap	r25
    4e6a:	9f 70       	andi	r25, 0x0F	; 15
    4e6c:	99 0f       	add	r25, r25
    4e6e:	29 2f       	mov	r18, r25
    4e70:	22 0f       	add	r18, r18
    4e72:	22 0f       	add	r18, r18
    4e74:	92 0f       	add	r25, r18
    4e76:	8f 70       	andi	r24, 0x0F	; 15
    4e78:	89 0f       	add	r24, r25
    4e7a:	8c 83       	std	Y+4, r24	; 0x04
    4e7c:	fd de       	rcall	.-518    	; 0x4c78 <i2c_readAck>
    rtc->month=bcd2dec(i2c_readAck());               // read Month and return Positive ACK
    4e7e:	98 2f       	mov	r25, r24
    4e80:	92 95       	swap	r25
    4e82:	9f 70       	andi	r25, 0x0F	; 15
    4e84:	99 0f       	add	r25, r25
    4e86:	29 2f       	mov	r18, r25
    4e88:	22 0f       	add	r18, r18
    4e8a:	22 0f       	add	r18, r18
    4e8c:	92 0f       	add	r25, r18
    4e8e:	8f 70       	andi	r24, 0x0F	; 15
    4e90:	89 0f       	add	r24, r25
    4e92:	8d 83       	std	Y+5, r24	; 0x05
    4e94:	fc de       	rcall	.-520    	; 0x4c8e <i2c_readNak>
    rtc->year =bcd2dec(i2c_readNak());                // read Year and return Negative/No ACK
    4e96:	98 2f       	mov	r25, r24
    4e98:	92 95       	swap	r25
    4e9a:	9f 70       	andi	r25, 0x0F	; 15
    4e9c:	99 0f       	add	r25, r25
    4e9e:	29 2f       	mov	r18, r25
    4ea0:	22 0f       	add	r18, r18
    4ea2:	22 0f       	add	r18, r18
    4ea4:	92 0f       	add	r25, r18
    4ea6:	8f 70       	andi	r24, 0x0F	; 15
    4ea8:	89 0f       	add	r24, r25
    4eaa:	8e 83       	std	Y+6, r24	; 0x06
    4eac:	ca de       	rcall	.-620    	; 0x4c42 <i2c_stop>

    i2c_stop();                             // Stop I2C communication after reading the Date
    4eae:	df 91       	pop	r29
    4eb0:	cf 91       	pop	r28
}
    4eb2:	08 95       	ret

00004eb4 <spi_init_master>:

// SPI
// Initialize SPI Master Device (with SPI interrupt)
void spi_init_master (void)
{
	DDRB |= (1<<MOSI)|(1<<SCK);
    4eb4:	84 b1       	in	r24, 0x04	; 4
    4eb6:	88 62       	ori	r24, 0x28	; 40
    4eb8:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<MISO);
    4eba:	24 98       	cbi	0x04, 4	; 4
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0);
    4ebc:	8c b5       	in	r24, 0x2c	; 44
    4ebe:	83 65       	ori	r24, 0x53	; 83
    4ec0:	8c bd       	out	0x2c, r24	; 44
	PORTB |= (1<<MISO);
    4ec2:	2c 9a       	sbi	0x05, 4	; 5
	PORTB &= ~(1<<MISO);
    4ec4:	2c 98       	cbi	0x05, 4	; 5
    4ec6:	08 95       	ret

00004ec8 <spi_rwSPI>:
SPI READ/WRITE
********************************************/

uint8_t spi_rwSPI( uint8_t byteword)
{
	SPDR = byteword; // put the byteword into data register
    4ec8:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    4eca:	0d b4       	in	r0, 0x2d	; 45
    4ecc:	07 fe       	sbrs	r0, 7
    4ece:	fd cf       	rjmp	.-6      	; 0x4eca <spi_rwSPI+0x2>
	return SPDR;
    4ed0:	8e b5       	in	r24, 0x2e	; 46
}
    4ed2:	08 95       	ret

00004ed4 <spi_BurstRead>:

/********************************************
BURST READ
********************************************/

void spi_BurstRead(uint8_t addr, uint8_t buffer[], uint8_t countdown, int pin) {
    4ed4:	df 92       	push	r13
    4ed6:	ef 92       	push	r14
    4ed8:	ff 92       	push	r15
    4eda:	0f 93       	push	r16
    4edc:	1f 93       	push	r17
    4ede:	cf 93       	push	r28
    4ee0:	df 93       	push	r29
    4ee2:	8b 01       	movw	r16, r22
    4ee4:	d4 2e       	mov	r13, r20

	PORT_CS &= ~(1<<pin);
    4ee6:	9b b1       	in	r25, 0x0b	; 11
    4ee8:	41 e0       	ldi	r20, 0x01	; 1
    4eea:	50 e0       	ldi	r21, 0x00	; 0
    4eec:	7a 01       	movw	r14, r20
    4eee:	02 c0       	rjmp	.+4      	; 0x4ef4 <spi_BurstRead+0x20>
    4ef0:	ee 0c       	add	r14, r14
    4ef2:	ff 1c       	adc	r15, r15
    4ef4:	2a 95       	dec	r18
    4ef6:	e2 f7       	brpl	.-8      	; 0x4ef0 <spi_BurstRead+0x1c>
    4ef8:	2e 2d       	mov	r18, r14
    4efa:	20 95       	com	r18
    4efc:	92 23       	and	r25, r18
    4efe:	9b b9       	out	0x0b, r25	; 11
	spi_rwSPI(addr);
    4f00:	e3 df       	rcall	.-58     	; 0x4ec8 <spi_rwSPI>
	for (int i = 0; i < countdown; i++) {
    4f02:	dd 20       	and	r13, r13
    4f04:	49 f0       	breq	.+18     	; 0x4f18 <spi_BurstRead+0x44>
    4f06:	e8 01       	movw	r28, r16
    4f08:	0d 0d       	add	r16, r13
    4f0a:	11 1d       	adc	r17, r1
		*buffer++ = spi_rwSPI(0x00);
    4f0c:	80 e0       	ldi	r24, 0x00	; 0
    4f0e:	dc df       	rcall	.-72     	; 0x4ec8 <spi_rwSPI>
    4f10:	89 93       	st	Y+, r24

void spi_BurstRead(uint8_t addr, uint8_t buffer[], uint8_t countdown, int pin) {

	PORT_CS &= ~(1<<pin);
	spi_rwSPI(addr);
	for (int i = 0; i < countdown; i++) {
    4f12:	c0 17       	cp	r28, r16
    4f14:	d1 07       	cpc	r29, r17
    4f16:	d1 f7       	brne	.-12     	; 0x4f0c <spi_BurstRead+0x38>
		*buffer++ = spi_rwSPI(0x00);
	}
	PORT_CS |= (1<<pin);
    4f18:	8b b1       	in	r24, 0x0b	; 11
    4f1a:	e8 2a       	or	r14, r24
    4f1c:	eb b8       	out	0x0b, r14	; 11
}
    4f1e:	df 91       	pop	r29
    4f20:	cf 91       	pop	r28
    4f22:	1f 91       	pop	r17
    4f24:	0f 91       	pop	r16
    4f26:	ff 90       	pop	r15
    4f28:	ef 90       	pop	r14
    4f2a:	df 90       	pop	r13
    4f2c:	08 95       	ret

00004f2e <spi_read16>:

uint16_t spi_read16(uint8_t addr, int pin)
{
    4f2e:	cf 93       	push	r28
    4f30:	df 93       	push	r29
	PORT_CS &= ~(1<<pin);
    4f32:	9b b1       	in	r25, 0x0b	; 11
    4f34:	c1 e0       	ldi	r28, 0x01	; 1
    4f36:	d0 e0       	ldi	r29, 0x00	; 0
    4f38:	02 c0       	rjmp	.+4      	; 0x4f3e <spi_read16+0x10>
    4f3a:	cc 0f       	add	r28, r28
    4f3c:	dd 1f       	adc	r29, r29
    4f3e:	6a 95       	dec	r22
    4f40:	e2 f7       	brpl	.-8      	; 0x4f3a <spi_read16+0xc>
    4f42:	2c 2f       	mov	r18, r28
    4f44:	20 95       	com	r18
    4f46:	92 23       	and	r25, r18
    4f48:	9b b9       	out	0x0b, r25	; 11
	spi_rwSPI(addr);
    4f4a:	be df       	rcall	.-132    	; 0x4ec8 <spi_rwSPI>
	uint8_t buffer[2];
	buffer[0] = spi_rwSPI(0x00);
    4f4c:	80 e0       	ldi	r24, 0x00	; 0
    4f4e:	bc df       	rcall	.-136    	; 0x4ec8 <spi_rwSPI>
    4f50:	d8 2f       	mov	r29, r24
	buffer[1] = spi_rwSPI(0x00);
    4f52:	80 e0       	ldi	r24, 0x00	; 0
    4f54:	b9 df       	rcall	.-142    	; 0x4ec8 <spi_rwSPI>
    4f56:	9b b1       	in	r25, 0x0b	; 11
	uint16_t receivedVal = (buffer[1] << 8) | buffer[0];
	PORT_CS |= (1<<pin);
    4f58:	c9 2b       	or	r28, r25
    4f5a:	cb b9       	out	0x0b, r28	; 11
    4f5c:	2d 2f       	mov	r18, r29
	return receivedVal;
    4f5e:	30 e0       	ldi	r19, 0x00	; 0
    4f60:	a9 01       	movw	r20, r18
}
    4f62:	58 2b       	or	r21, r24
    4f64:	ca 01       	movw	r24, r20
    4f66:	df 91       	pop	r29
    4f68:	cf 91       	pop	r28
    4f6a:	08 95       	ret

00004f6c <spi_readS16>:
    4f6c:	e0 cf       	rjmp	.-64     	; 0x4f2e <spi_read16>

int16_t spi_readS16(uint8_t addr, int pin)
{
	return (int16_t)spi_read16(addr, pin);
}
    4f6e:	08 95       	ret

00004f70 <uart_init>:
#define loop_until_bit_is_set(sfr,bit) \
do { } while (bit_is_clear(sfr, bit))

// UART
void uart_init(void) {
	UBRR0H = UBRRH_VALUE;
    4f70:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
    4f74:	87 e6       	ldi	r24, 0x67	; 103
    4f76:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	#if USE_2X
	UCSR0A |= _BV(U2X0);
	#else
	UCSR0A &= ~(_BV(U2X0));
    4f7a:	e0 ec       	ldi	r30, 0xC0	; 192
    4f7c:	f0 e0       	ldi	r31, 0x00	; 0
    4f7e:	80 81       	ld	r24, Z
    4f80:	8d 7f       	andi	r24, 0xFD	; 253
    4f82:	80 83       	st	Z, r24
	#endif

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
    4f84:	86 e0       	ldi	r24, 0x06	; 6
    4f86:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
    4f8a:	88 e1       	ldi	r24, 0x18	; 24
    4f8c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    4f90:	08 95       	ret

00004f92 <uart_putchar>:
}

int uart_putchar(char c, FILE *stream) {
    4f92:	cf 93       	push	r28
    4f94:	c8 2f       	mov	r28, r24
	if (c == '\n') {
    4f96:	8a 30       	cpi	r24, 0x0A	; 10
    4f98:	11 f4       	brne	.+4      	; 0x4f9e <uart_putchar+0xc>
		uart_putchar('\r', stream);
    4f9a:	8d e0       	ldi	r24, 0x0D	; 13
    4f9c:	fa df       	rcall	.-12     	; 0x4f92 <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
    4f9e:	e0 ec       	ldi	r30, 0xC0	; 192
    4fa0:	f0 e0       	ldi	r31, 0x00	; 0
    4fa2:	80 81       	ld	r24, Z
    4fa4:	85 ff       	sbrs	r24, 5
    4fa6:	fd cf       	rjmp	.-6      	; 0x4fa2 <uart_putchar+0x10>
	UDR0 = c;
    4fa8:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 0;
}
    4fac:	80 e0       	ldi	r24, 0x00	; 0
    4fae:	90 e0       	ldi	r25, 0x00	; 0
    4fb0:	cf 91       	pop	r28
    4fb2:	08 95       	ret

00004fb4 <uart_getchar>:

int uart_getchar(FILE *stream) {
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
    4fb4:	e0 ec       	ldi	r30, 0xC0	; 192
    4fb6:	f0 e0       	ldi	r31, 0x00	; 0
    4fb8:	80 81       	ld	r24, Z
    4fba:	88 23       	and	r24, r24
    4fbc:	ec f7       	brge	.-6      	; 0x4fb8 <uart_getchar+0x4>
	return UDR0;
    4fbe:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
    4fc2:	90 e0       	ldi	r25, 0x00	; 0
    4fc4:	08 95       	ret

00004fc6 <wind_initWindSpeed>:

static void timer1_init()
{
	
	// Starting timer 1 in normal mode
	TCCR1B= 0x00;
    4fc6:	e1 e8       	ldi	r30, 0x81	; 129
    4fc8:	f0 e0       	ldi	r31, 0x00	; 0
    4fca:	10 82       	st	Z, r1
	TCCR1A= 0x00;
    4fcc:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	// setting interrupt flag register to 0.
	TIFR1=0x00;
    4fd0:	16 ba       	out	0x16, r1	; 22
	// timer 1 setup with a pre-scalar of 256
	TCCR1B |=(1<<CS12);
    4fd2:	80 81       	ld	r24, Z
    4fd4:	84 60       	ori	r24, 0x04	; 4
    4fd6:	80 83       	st	Z, r24
	//Input capture on rising edge
	TCCR1B|=(1<<ICES1);
    4fd8:	80 81       	ld	r24, Z
    4fda:	80 64       	ori	r24, 0x40	; 64
    4fdc:	80 83       	st	Z, r24
	
	// setting the timer/counter i/o locations to 0.
	TCNT1H=0x00;
    4fde:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	TCNT1L=0x00;
    4fe2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	// enabling input capture
	TIMSK1=(1<<ICIE1);
    4fe6:	80 e2       	ldi	r24, 0x20	; 32
    4fe8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	// enabling global interrupt
	sei();
    4fec:	78 94       	sei
{
	// initialize timer
	timer1_init();

	// setting PB0 as input for
	DDRD |= (0<<PORTD5);
    4fee:	8a b1       	in	r24, 0x0a	; 10
    4ff0:	8a b9       	out	0x0a, r24	; 10
	//Enable PB0 pull up resistor
	PORTD |= (1<<5);
    4ff2:	5d 9a       	sbi	0x0b, 5	; 11
    4ff4:	08 95       	ret

00004ff6 <wind_measureFrequency>:
}

float wind_measureFrequency()
{
	if (flag>=2)
    4ff6:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <flag>
    4ffa:	82 30       	cpi	r24, 0x02	; 2
    4ffc:	00 f1       	brcs	.+64     	; 0x503e <wind_measureFrequency+0x48>
	{
		flag =0;
    4ffe:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <flag>
		period= (t_2-t_1);
    5002:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <t_2>
    5006:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <t_2+0x1>
    500a:	20 91 96 03 	lds	r18, 0x0396	; 0x800396 <t_1>
    500e:	30 91 97 03 	lds	r19, 0x0397	; 0x800397 <t_1+0x1>
    5012:	82 1b       	sub	r24, r18
    5014:	93 0b       	sbc	r25, r19
    5016:	90 93 93 03 	sts	0x0393, r25	; 0x800393 <period+0x1>
    501a:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <period>
		TIFR1=(1<<ICF1);
    501e:	80 e2       	ldi	r24, 0x20	; 32
    5020:	86 bb       	out	0x16, r24	; 22
		
		return (16000000UL/period)/256;
    5022:	20 91 92 03 	lds	r18, 0x0392	; 0x800392 <period>
    5026:	30 91 93 03 	lds	r19, 0x0393	; 0x800393 <period+0x1>
    502a:	40 e0       	ldi	r20, 0x00	; 0
    502c:	50 e0       	ldi	r21, 0x00	; 0
    502e:	64 e2       	ldi	r22, 0x24	; 36
    5030:	74 ef       	ldi	r23, 0xF4	; 244
    5032:	80 e0       	ldi	r24, 0x00	; 0
    5034:	90 e0       	ldi	r25, 0x00	; 0
    5036:	dc d5       	rcall	.+3000   	; 0x5bf0 <__udivmodsi4>
    5038:	ca 01       	movw	r24, r20
    503a:	b9 01       	movw	r22, r18
    503c:	63 c4       	rjmp	.+2246   	; 0x5904 <__floatunsisf>
	}
	return -1;
    503e:	60 e0       	ldi	r22, 0x00	; 0
    5040:	70 e0       	ldi	r23, 0x00	; 0
    5042:	80 e8       	ldi	r24, 0x80	; 128
    5044:	9f eb       	ldi	r25, 0xBF	; 191
}
    5046:	08 95       	ret

00005048 <__vector_12>:

ISR (TIMER1_CAPT_vect)
{
    5048:	1f 92       	push	r1
    504a:	0f 92       	push	r0
    504c:	0f b6       	in	r0, 0x3f	; 63
    504e:	0f 92       	push	r0
    5050:	11 24       	eor	r1, r1
    5052:	8f 93       	push	r24
    5054:	9f 93       	push	r25
	if (flag==0)
    5056:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <flag>
    505a:	81 11       	cpse	r24, r1
    505c:	0b c0       	rjmp	.+22     	; 0x5074 <__vector_12+0x2c>
	{
		t_1=ICR1;
    505e:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    5062:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    5066:	90 93 97 03 	sts	0x0397, r25	; 0x800397 <t_1+0x1>
    506a:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <t_1>
		TIFR1=(1<<ICF1);
    506e:	80 e2       	ldi	r24, 0x20	; 32
    5070:	86 bb       	out	0x16, r24	; 22
    5072:	0e c0       	rjmp	.+28     	; 0x5090 <__vector_12+0x48>

	}
	else if (flag==1)
    5074:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <flag>
    5078:	81 30       	cpi	r24, 0x01	; 1
    507a:	51 f4       	brne	.+20     	; 0x5090 <__vector_12+0x48>
	{
		t_2= ICR1;
    507c:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    5080:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    5084:	90 93 95 03 	sts	0x0395, r25	; 0x800395 <t_2+0x1>
    5088:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <t_2>
		TIFR1=(1<<ICF1);
    508c:	80 e2       	ldi	r24, 0x20	; 32
    508e:	86 bb       	out	0x16, r24	; 22
		
	}
	flag ++;
    5090:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <flag>
    5094:	8f 5f       	subi	r24, 0xFF	; 255
    5096:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <flag>
    509a:	9f 91       	pop	r25
    509c:	8f 91       	pop	r24
    509e:	0f 90       	pop	r0
    50a0:	0f be       	out	0x3f, r0	; 63
    50a2:	0f 90       	pop	r0
    50a4:	1f 90       	pop	r1
    50a6:	18 95       	reti

000050a8 <adc_read>:
	ADMUX |= (1 << REFS0) | (1 << MUX1);
}

static uint16_t adc_read()
{
	ADCSRA |= (1<<ADSC);
    50a8:	ea e7       	ldi	r30, 0x7A	; 122
    50aa:	f0 e0       	ldi	r31, 0x00	; 0
    50ac:	80 81       	ld	r24, Z
    50ae:	80 64       	ori	r24, 0x40	; 64
    50b0:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));
    50b2:	80 81       	ld	r24, Z
    50b4:	86 fd       	sbrc	r24, 6
    50b6:	fd cf       	rjmp	.-6      	; 0x50b2 <adc_read+0xa>
	
	return (ADC);
    50b8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    50bc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
    50c0:	08 95       	ret

000050c2 <getInput>:
		}
	}
}

static void getInput(char *input)
{
    50c2:	cf 92       	push	r12
    50c4:	df 92       	push	r13
    50c6:	ef 92       	push	r14
    50c8:	ff 92       	push	r15
    50ca:	1f 93       	push	r17
    50cc:	cf 93       	push	r28
    50ce:	df 93       	push	r29
    50d0:	ec 01       	movw	r28, r24
    50d2:	7c 01       	movw	r14, r24
	char c;
	uint8_t i;
	for(i = 0; i < 16; i++) {
    50d4:	10 e0       	ldi	r17, 0x00	; 0
		c = getchar();
    50d6:	0f 2e       	mov	r0, r31
    50d8:	f0 eb       	ldi	r31, 0xB0	; 176
    50da:	cf 2e       	mov	r12, r31
    50dc:	f6 e0       	ldi	r31, 0x06	; 6
    50de:	df 2e       	mov	r13, r31
    50e0:	f0 2d       	mov	r31, r0
    50e2:	f6 01       	movw	r30, r12
    50e4:	80 81       	ld	r24, Z
    50e6:	91 81       	ldd	r25, Z+1	; 0x01
    50e8:	0e 94 7f 31 	call	0x62fe	; 0x62fe <fgetc>
		if (c == '\n') break;
    50ec:	8a 30       	cpi	r24, 0x0A	; 10
    50ee:	31 f0       	breq	.+12     	; 0x50fc <getInput+0x3a>
		input[i] = c;
    50f0:	f7 01       	movw	r30, r14
    50f2:	81 93       	st	Z+, r24
    50f4:	7f 01       	movw	r14, r30

static void getInput(char *input)
{
	char c;
	uint8_t i;
	for(i = 0; i < 16; i++) {
    50f6:	1f 5f       	subi	r17, 0xFF	; 255
    50f8:	10 31       	cpi	r17, 0x10	; 16
    50fa:	99 f7       	brne	.-26     	; 0x50e2 <getInput+0x20>
		c = getchar();
		if (c == '\n') break;
		input[i] = c;
	}
	input[i] = '\0';
    50fc:	c1 0f       	add	r28, r17
    50fe:	d1 1d       	adc	r29, r1
    5100:	18 82       	st	Y, r1
}
    5102:	df 91       	pop	r29
    5104:	cf 91       	pop	r28
    5106:	1f 91       	pop	r17
    5108:	ff 90       	pop	r15
    510a:	ef 90       	pop	r14
    510c:	df 90       	pop	r13
    510e:	cf 90       	pop	r12
    5110:	08 95       	ret

00005112 <stringToIntArray>:
	eeprom_write_float(0, LargestDirectionValue);
	printf_P(PSTR("Calibration complete!\n"));
}

static void stringToIntArray(uint8_t * array, char * string, uint8_t * eepromAddr)
{
    5112:	8f 92       	push	r8
    5114:	9f 92       	push	r9
    5116:	af 92       	push	r10
    5118:	bf 92       	push	r11
    511a:	df 92       	push	r13
    511c:	ef 92       	push	r14
    511e:	ff 92       	push	r15
    5120:	0f 93       	push	r16
    5122:	1f 93       	push	r17
    5124:	cf 93       	push	r28
    5126:	df 93       	push	r29
    5128:	00 d0       	rcall	.+0      	; 0x512a <stringToIntArray+0x18>
    512a:	cd b7       	in	r28, 0x3d	; 61
    512c:	de b7       	in	r29, 0x3e	; 62
    512e:	7c 01       	movw	r14, r24
    5130:	8a 01       	movw	r16, r20
	uint8_t i = 0;
	char * p = string;
    5132:	7a 83       	std	Y+2, r23	; 0x02
    5134:	69 83       	std	Y+1, r22	; 0x01
	printf_P(PSTR("Calibration complete!\n"));
}

static void stringToIntArray(uint8_t * array, char * string, uint8_t * eepromAddr)
{
	uint8_t i = 0;
    5136:	d1 2c       	mov	r13, r1
	char * p = string;
	while(*p) {
    5138:	2a c0       	rjmp	.+84     	; 0x518e <stringToIntArray+0x7c>
		if ( isdigit(*p) || ( (*p=='-'||*p=='+') && isdigit(*(p+1)) )) {
    513a:	42 2f       	mov	r20, r18
    513c:	50 e0       	ldi	r21, 0x00	; 0
    513e:	40 53       	subi	r20, 0x30	; 48
    5140:	51 09       	sbc	r21, r1
    5142:	4a 30       	cpi	r20, 0x0A	; 10
    5144:	51 05       	cpc	r21, r1
    5146:	60 f0       	brcs	.+24     	; 0x5160 <stringToIntArray+0x4e>
    5148:	2d 32       	cpi	r18, 0x2D	; 45
    514a:	11 f0       	breq	.+4      	; 0x5150 <stringToIntArray+0x3e>
    514c:	2b 32       	cpi	r18, 0x2B	; 43
    514e:	e1 f4       	brne	.+56     	; 0x5188 <stringToIntArray+0x76>
    5150:	fc 01       	movw	r30, r24
    5152:	21 81       	ldd	r18, Z+1	; 0x01
    5154:	30 e0       	ldi	r19, 0x00	; 0
    5156:	20 53       	subi	r18, 0x30	; 48
    5158:	31 09       	sbc	r19, r1
    515a:	2a 30       	cpi	r18, 0x0A	; 10
    515c:	31 05       	cpc	r19, r1
    515e:	a0 f4       	brcc	.+40     	; 0x5188 <stringToIntArray+0x76>
			array[i] = strtol(p, &p, 10);
    5160:	8d 2c       	mov	r8, r13
    5162:	91 2c       	mov	r9, r1
    5164:	57 01       	movw	r10, r14
    5166:	a8 0c       	add	r10, r8
    5168:	b9 1c       	adc	r11, r9
    516a:	4a e0       	ldi	r20, 0x0A	; 10
    516c:	50 e0       	ldi	r21, 0x00	; 0
    516e:	be 01       	movw	r22, r28
    5170:	6f 5f       	subi	r22, 0xFF	; 255
    5172:	7f 4f       	sbci	r23, 0xFF	; 255
    5174:	1c d7       	rcall	.+3640   	; 0x5fae <strtol>
    5176:	f5 01       	movw	r30, r10
    5178:	60 83       	st	Z, r22
			eeprom_write_byte((uint8_t*)eepromAddr+i, array[i]);
    517a:	c8 01       	movw	r24, r16
    517c:	88 0d       	add	r24, r8
    517e:	99 1d       	adc	r25, r9
    5180:	0e 94 06 3b 	call	0x760c	; 0x760c <eeprom_write_byte>
			i++;
    5184:	d3 94       	inc	r13
    5186:	03 c0       	rjmp	.+6      	; 0x518e <stringToIntArray+0x7c>
			} else {
			p++;
    5188:	01 96       	adiw	r24, 0x01	; 1
    518a:	9a 83       	std	Y+2, r25	; 0x02
    518c:	89 83       	std	Y+1, r24	; 0x01

static void stringToIntArray(uint8_t * array, char * string, uint8_t * eepromAddr)
{
	uint8_t i = 0;
	char * p = string;
	while(*p) {
    518e:	89 81       	ldd	r24, Y+1	; 0x01
    5190:	9a 81       	ldd	r25, Y+2	; 0x02
    5192:	fc 01       	movw	r30, r24
    5194:	20 81       	ld	r18, Z
    5196:	21 11       	cpse	r18, r1
    5198:	d0 cf       	rjmp	.-96     	; 0x513a <stringToIntArray+0x28>
			i++;
			} else {
			p++;
		}
	}
}
    519a:	0f 90       	pop	r0
    519c:	0f 90       	pop	r0
    519e:	df 91       	pop	r29
    51a0:	cf 91       	pop	r28
    51a2:	1f 91       	pop	r17
    51a4:	0f 91       	pop	r16
    51a6:	ff 90       	pop	r15
    51a8:	ef 90       	pop	r14
    51aa:	df 90       	pop	r13
    51ac:	bf 90       	pop	r11
    51ae:	af 90       	pop	r10
    51b0:	9f 90       	pop	r9
    51b2:	8f 90       	pop	r8
    51b4:	08 95       	ret

000051b6 <main>:
}

char packetStr[128];
uint8_t runOnce = 0;
int main(void)
{	
    51b6:	cf 93       	push	r28
    51b8:	df 93       	push	r29
    51ba:	cd b7       	in	r28, 0x3d	; 61
    51bc:	de b7       	in	r29, 0x3e	; 62
    51be:	c6 54       	subi	r28, 0x46	; 70
    51c0:	d1 09       	sbc	r29, r1
    51c2:	0f b6       	in	r0, 0x3f	; 63
    51c4:	f8 94       	cli
    51c6:	de bf       	out	0x3e, r29	; 62
    51c8:	0f be       	out	0x3f, r0	; 63
    51ca:	cd bf       	out	0x3d, r28	; 61
 	
	 
	uart_init();
    51cc:	d1 de       	rcall	.-606    	; 0x4f70 <uart_init>
	stdout = &uart_output;
    51ce:	e0 eb       	ldi	r30, 0xB0	; 176
    51d0:	f6 e0       	ldi	r31, 0x06	; 6
    51d2:	8f e3       	ldi	r24, 0x3F	; 63
    51d4:	91 e0       	ldi	r25, 0x01	; 1
    51d6:	93 83       	std	Z+3, r25	; 0x03
    51d8:	82 83       	std	Z+2, r24	; 0x02
	stdin  = &uart_input;
    51da:	81 e3       	ldi	r24, 0x31	; 49
    51dc:	91 e0       	ldi	r25, 0x01	; 1
    51de:	91 83       	std	Z+1, r25	; 0x01
    51e0:	80 83       	st	Z, r24
	puts_P(PSTR("Initializing"));
    51e2:	89 e0       	ldi	r24, 0x09	; 9
    51e4:	93 e0       	ldi	r25, 0x03	; 3
    51e6:	0e 94 27 32 	call	0x644e	; 0x644e <puts_P>

	i2c_init();
	spi_init_master();
    51ea:	f1 dc       	rcall	.-1566   	; 0x4bce <i2c_init>
	bmp280_init();
    51ec:	63 de       	rcall	.-826    	; 0x4eb4 <spi_init_master>
    51ee:	0e 94 ab 01 	call	0x356	; 0x356 <bmp280_init>
	
	wind_initWindSpeed();
    51f2:	e9 de       	rcall	.-558    	; 0x4fc6 <wind_initWindSpeed>
unsigned int timeout;
rtc_t rtc;

static void initADC()
{
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
    51f4:	ea e7       	ldi	r30, 0x7A	; 122
    51f6:	f0 e0       	ldi	r31, 0x00	; 0
    51f8:	80 81       	ld	r24, Z
    51fa:	87 68       	ori	r24, 0x87	; 135
    51fc:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS0) | (1 << MUX1);
    51fe:	ec e7       	ldi	r30, 0x7C	; 124
    5200:	f0 e0       	ldi	r31, 0x00	; 0
    5202:	80 81       	ld	r24, Z
    5204:	82 64       	ori	r24, 0x42	; 66
    5206:	80 83       	st	Z, r24
    5208:	0f 2e       	mov	r0, r31
    520a:	fe e1       	ldi	r31, 0x1E	; 30
    520c:	cf 2e       	mov	r12, r31
    520e:	f1 e0       	ldi	r31, 0x01	; 1
    5210:	df 2e       	mov	r13, r31
    5212:	f0 2d       	mov	r31, r0
    5214:	0f 2e       	mov	r0, r31
    5216:	fa e0       	ldi	r31, 0x0A	; 10
    5218:	ef 2e       	mov	r14, r31
    521a:	f1 e0       	ldi	r31, 0x01	; 1
    521c:	ff 2e       	mov	r15, r31
    521e:	f0 2d       	mov	r31, r0
    5220:	00 e2       	ldi	r16, 0x20	; 32
    5222:	10 e0       	ldi	r17, 0x00	; 0
	
	initADC();
	// Read IP values from eeprom
	for(uint8_t i = 0; i<4; i++)
	{
		myip[i] = eeprom_read_byte((uint8_t*)0x20+i);
    5224:	c8 01       	movw	r24, r16
    5226:	0e 94 eb 3a 	call	0x75d6	; 0x75d6 <eeprom_read_byte>
    522a:	f6 01       	movw	r30, r12
    522c:	81 93       	st	Z+, r24
    522e:	6f 01       	movw	r12, r30
		gwip[i] = eeprom_read_byte((uint8_t*)0x40+i);
    5230:	c8 01       	movw	r24, r16
    5232:	80 96       	adiw	r24, 0x20	; 32
    5234:	0e 94 eb 3a 	call	0x75d6	; 0x75d6 <eeprom_read_byte>
    5238:	f7 01       	movw	r30, r14
    523a:	81 93       	st	Z+, r24
    523c:	7f 01       	movw	r14, r30
    523e:	0f 5f       	subi	r16, 0xFF	; 255
    5240:	1f 4f       	sbci	r17, 0xFF	; 255
	wind_initWindSpeed();
	
	
	initADC();
	// Read IP values from eeprom
	for(uint8_t i = 0; i<4; i++)
    5242:	04 32       	cpi	r16, 0x24	; 36
    5244:	11 05       	cpc	r17, r1
    5246:	71 f7       	brne	.-36     	; 0x5224 <main+0x6e>
	{
		myip[i] = eeprom_read_byte((uint8_t*)0x20+i);
		gwip[i] = eeprom_read_byte((uint8_t*)0x40+i);
	}
	eeprom_read_block((void*)serverip, (const void*)0x30, 16);
    5248:	40 e1       	ldi	r20, 0x10	; 16
    524a:	50 e0       	ldi	r21, 0x00	; 0
    524c:	60 e3       	ldi	r22, 0x30	; 48
    524e:	70 e0       	ldi	r23, 0x00	; 0
    5250:	8e e0       	ldi	r24, 0x0E	; 14
    5252:	91 e0       	ldi	r25, 0x01	; 1
    5254:	0e 94 db 3a 	call	0x75b6	; 0x75b6 <eeprom_read_block>
	//
	
	// calibration
	DDRD |= (0 << PIND5);
    5258:	8a b1       	in	r24, 0x0a	; 10
    525a:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PIND5);
    525c:	5d 9a       	sbi	0x0b, 5	; 11
	if((PIND&(1 << PIND5)) == 0)
    525e:	4d 99       	sbic	0x09, 5	; 9
    5260:	39 c0       	rjmp	.+114    	; 0x52d4 <main+0x11e>
}

int16_t LargestDirectionValue;
static void calibration()
{
	printf_P(PSTR("Calibration started!\n"));
    5262:	83 ef       	ldi	r24, 0xF3	; 243
    5264:	92 e0       	ldi	r25, 0x02	; 2
    5266:	9f 93       	push	r25
    5268:	8f 93       	push	r24
    526a:	0e 94 d0 31 	call	0x63a0	; 0x63a0 <printf_P>
    526e:	0f 90       	pop	r0
    5270:	0f 90       	pop	r0
	while(adc_read()+50 >= LargestDirectionValue)
	{
		if(adc_read() > LargestDirectionValue)
    5272:	13 c0       	rjmp	.+38     	; 0x529a <main+0xe4>
    5274:	19 df       	rcall	.-462    	; 0x50a8 <adc_read>
    5276:	20 91 03 06 	lds	r18, 0x0603	; 0x800603 <LargestDirectionValue>
    527a:	30 91 04 06 	lds	r19, 0x0604	; 0x800604 <LargestDirectionValue+0x1>
    527e:	28 17       	cp	r18, r24
    5280:	39 07       	cpc	r19, r25
		{
			LargestDirectionValue = adc_read();
    5282:	28 f4       	brcc	.+10     	; 0x528e <main+0xd8>
    5284:	11 df       	rcall	.-478    	; 0x50a8 <adc_read>
    5286:	90 93 04 06 	sts	0x0604, r25	; 0x800604 <LargestDirectionValue+0x1>
    528a:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <LargestDirectionValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    528e:	87 ee       	ldi	r24, 0xE7	; 231
    5290:	93 e0       	ldi	r25, 0x03	; 3
    5292:	01 97       	sbiw	r24, 0x01	; 1
    5294:	f1 f7       	brne	.-4      	; 0x5292 <main+0xdc>
    5296:	00 c0       	rjmp	.+0      	; 0x5298 <main+0xe2>

int16_t LargestDirectionValue;
static void calibration()
{
	printf_P(PSTR("Calibration started!\n"));
	while(adc_read()+50 >= LargestDirectionValue)
    5298:	00 00       	nop
    529a:	06 df       	rcall	.-500    	; 0x50a8 <adc_read>
    529c:	60 91 03 06 	lds	r22, 0x0603	; 0x800603 <LargestDirectionValue>
    52a0:	70 91 04 06 	lds	r23, 0x0604	; 0x800604 <LargestDirectionValue+0x1>
    52a4:	c2 96       	adiw	r24, 0x32	; 50
    52a6:	86 17       	cp	r24, r22
    52a8:	97 07       	cpc	r25, r23
		{
			LargestDirectionValue = adc_read();
		}
		_delay_us(250);
	}
	eeprom_write_float(0, LargestDirectionValue);
    52aa:	20 f7       	brcc	.-56     	; 0x5274 <main+0xbe>
    52ac:	07 2e       	mov	r0, r23
    52ae:	00 0c       	add	r0, r0
    52b0:	88 0b       	sbc	r24, r24
    52b2:	99 0b       	sbc	r25, r25
    52b4:	29 d3       	rcall	.+1618   	; 0x5908 <__floatsisf>
    52b6:	ab 01       	movw	r20, r22
    52b8:	bc 01       	movw	r22, r24
    52ba:	80 e0       	ldi	r24, 0x00	; 0
    52bc:	90 e0       	ldi	r25, 0x00	; 0
    52be:	0e 94 14 3b 	call	0x7628	; 0x7628 <eeprom_write_dword>
	printf_P(PSTR("Calibration complete!\n"));
    52c2:	8c ed       	ldi	r24, 0xDC	; 220
    52c4:	92 e0       	ldi	r25, 0x02	; 2
    52c6:	9f 93       	push	r25
    52c8:	8f 93       	push	r24
    52ca:	0e 94 d0 31 	call	0x63a0	; 0x63a0 <printf_P>
    52ce:	0f 90       	pop	r0
    52d0:	0f 90       	pop	r0
	if((PIND&(1 << PIND5)) == 0)
	{
		calibration();
	}
	else {
		LargestDirectionValue = eeprom_read_float(0);
    52d2:	09 c0       	rjmp	.+18     	; 0x52e6 <main+0x130>
    52d4:	80 e0       	ldi	r24, 0x00	; 0
    52d6:	90 e0       	ldi	r25, 0x00	; 0
    52d8:	0e 94 f3 3a 	call	0x75e6	; 0x75e6 <eeprom_read_dword>
    52dc:	de d2       	rcall	.+1468   	; 0x589a <__fixsfsi>
    52de:	70 93 04 06 	sts	0x0604, r23	; 0x800604 <LargestDirectionValue+0x1>
    52e2:	60 93 03 06 	sts	0x0603, r22	; 0x800603 <LargestDirectionValue>
	}
	DDRD |= (0 << PIND6);
    52e6:	8a b1       	in	r24, 0x0a	; 10
    52e8:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PIND6);
	if((PIND&(1 << PIND6)) == 0)
    52ea:	5e 9a       	sbi	0x0b, 6	; 11
    52ec:	4e 99       	sbic	0x09, 6	; 9
static void ipconfig()
{
	static char input[16];
	

	puts("Input arduino IP");
    52ee:	4c c0       	rjmp	.+152    	; 0x5388 <main+0x1d2>
    52f0:	87 eb       	ldi	r24, 0xB7	; 183
    52f2:	91 e0       	ldi	r25, 0x01	; 1
    52f4:	0e 94 f7 31 	call	0x63ee	; 0x63ee <puts>
	getInput(input);
    52f8:	88 e9       	ldi	r24, 0x98	; 152
    52fa:	93 e0       	ldi	r25, 0x03	; 3
    52fc:	e2 de       	rcall	.-572    	; 0x50c2 <getInput>
	printf("Arduino IP: %s\n", input);
    52fe:	08 e9       	ldi	r16, 0x98	; 152
    5300:	13 e0       	ldi	r17, 0x03	; 3
    5302:	1f 93       	push	r17
    5304:	0f 93       	push	r16
    5306:	88 ec       	ldi	r24, 0xC8	; 200
    5308:	91 e0       	ldi	r25, 0x01	; 1
    530a:	9f 93       	push	r25
    530c:	8f 93       	push	r24
    530e:	0e 94 bd 31 	call	0x637a	; 0x637a <printf>
	stringToIntArray(myip, input, (uint8_t*)0x20);
    5312:	40 e2       	ldi	r20, 0x20	; 32
    5314:	50 e0       	ldi	r21, 0x00	; 0
    5316:	b8 01       	movw	r22, r16
    5318:	8e e1       	ldi	r24, 0x1E	; 30
    531a:	91 e0       	ldi	r25, 0x01	; 1
	
	puts("Input server IP");
    531c:	fa de       	rcall	.-524    	; 0x5112 <stringToIntArray>
    531e:	88 ed       	ldi	r24, 0xD8	; 216
    5320:	91 e0       	ldi	r25, 0x01	; 1
    5322:	0e 94 f7 31 	call	0x63ee	; 0x63ee <puts>
	getInput(input);
    5326:	c8 01       	movw	r24, r16
	printf("Server IP: %s\n", input);
    5328:	cc de       	rcall	.-616    	; 0x50c2 <getInput>
    532a:	1f 93       	push	r17
    532c:	0f 93       	push	r16
    532e:	88 ee       	ldi	r24, 0xE8	; 232
    5330:	91 e0       	ldi	r25, 0x01	; 1
    5332:	9f 93       	push	r25
    5334:	8f 93       	push	r24
    5336:	0e 94 bd 31 	call	0x637a	; 0x637a <printf>
	sprintf(serverip, "%s", input);
    533a:	b8 01       	movw	r22, r16
    533c:	8e e0       	ldi	r24, 0x0E	; 14
    533e:	91 e0       	ldi	r25, 0x01	; 1
    5340:	9d d7       	rcall	.+3898   	; 0x627c <strcpy>
	eeprom_write_block((const void*)input, (void*)0x30, 16);
    5342:	40 e1       	ldi	r20, 0x10	; 16
    5344:	50 e0       	ldi	r21, 0x00	; 0
    5346:	60 e3       	ldi	r22, 0x30	; 48
    5348:	70 e0       	ldi	r23, 0x00	; 0
    534a:	c8 01       	movw	r24, r16
    534c:	0e 94 fd 3a 	call	0x75fa	; 0x75fa <eeprom_write_block>
	
	puts("Input gateway IP");
    5350:	87 ef       	ldi	r24, 0xF7	; 247
    5352:	91 e0       	ldi	r25, 0x01	; 1
    5354:	0e 94 f7 31 	call	0x63ee	; 0x63ee <puts>
	getInput(input);
    5358:	c8 01       	movw	r24, r16
    535a:	b3 de       	rcall	.-666    	; 0x50c2 <getInput>
	printf("Gateway IP: %s\n", input);
    535c:	1f 93       	push	r17
    535e:	0f 93       	push	r16
    5360:	88 e0       	ldi	r24, 0x08	; 8
    5362:	92 e0       	ldi	r25, 0x02	; 2
    5364:	9f 93       	push	r25
    5366:	8f 93       	push	r24
    5368:	0e 94 bd 31 	call	0x637a	; 0x637a <printf>
	stringToIntArray(gwip, input, (uint8_t*)0x40);
    536c:	40 e4       	ldi	r20, 0x40	; 64
    536e:	50 e0       	ldi	r21, 0x00	; 0
    5370:	b8 01       	movw	r22, r16
    5372:	8a e0       	ldi	r24, 0x0A	; 10
    5374:	91 e0       	ldi	r25, 0x01	; 1
    5376:	cd de       	rcall	.-614    	; 0x5112 <stringToIntArray>
    5378:	ed b7       	in	r30, 0x3d	; 61
    537a:	fe b7       	in	r31, 0x3e	; 62
    537c:	3c 96       	adiw	r30, 0x0c	; 12
    537e:	0f b6       	in	r0, 0x3f	; 63
    5380:	f8 94       	cli
    5382:	fe bf       	out	0x3e, r31	; 62
    5384:	0f be       	out	0x3f, r0	; 63
    5386:	ed bf       	out	0x3d, r30	; 61
	if((PIND&(1 << PIND6)) == 0)
	{
		ipconfig();
	}
	//
	timeout = eeprom_read_word((uint16_t*)0x10);
    5388:	80 e1       	ldi	r24, 0x10	; 16
    538a:	90 e0       	ldi	r25, 0x00	; 0
    538c:	0e 94 f8 3a 	call	0x75f0	; 0x75f0 <eeprom_read_word>
    5390:	90 93 0d 06 	sts	0x060D, r25	; 0x80060d <timeout+0x1>
    5394:	80 93 0c 06 	sts	0x060C, r24	; 0x80060c <timeout>
	DDRB |= (1 << SD_CS);
    5398:	21 9a       	sbi	0x04, 1	; 4
	f_mount(&FatFs, "", 0);
    539a:	40 e0       	ldi	r20, 0x00	; 0
    539c:	69 eb       	ldi	r22, 0xB9	; 185
    539e:	72 e0       	ldi	r23, 0x02	; 2
    53a0:	85 ed       	ldi	r24, 0xD5	; 213
    53a2:	93 e0       	ldi	r25, 0x03	; 3
    53a4:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <f_mount>
	Ether_init();
    53a8:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <Ether_init>
			angle = 360;
		
		hih8120_measure();
		
		char humidChar[10],tempChar[10],pressChar[10],anglChar[10],speedChar[10];
		dtostrf(hih8120_humidity,1,2,humidChar);
    53ac:	7e 01       	movw	r14, r28
    53ae:	f9 e3       	ldi	r31, 0x39	; 57
    53b0:	ef 0e       	add	r14, r31
    53b2:	f1 1c       	adc	r15, r1
		dtostrf(hih8120_temperature_C,1,2,tempChar);
    53b4:	3e 01       	movw	r6, r28
    53b6:	2f e2       	ldi	r18, 0x2F	; 47
    53b8:	62 0e       	add	r6, r18
    53ba:	71 1c       	adc	r7, r1
		dtostrf(bmp280_readPressure(),1,2,pressChar);
    53bc:	2e 01       	movw	r4, r28
    53be:	35 e2       	ldi	r19, 0x25	; 37
    53c0:	43 0e       	add	r4, r19
    53c2:	51 1c       	adc	r5, r1
		dtostrf(angle,1,2,anglChar);
    53c4:	1e 01       	movw	r2, r28
    53c6:	8b e1       	ldi	r24, 0x1B	; 27
    53c8:	28 0e       	add	r2, r24
    53ca:	31 1c       	adc	r3, r1
		dtostrf(wind_speed,1,2,speedChar);
    53cc:	6e 01       	movw	r12, r28
    53ce:	91 e1       	ldi	r25, 0x11	; 17
    53d0:	c9 0e       	add	r12, r25
    53d2:	d1 1c       	adc	r13, r1
	f_mount(&FatFs, "", 0);
	Ether_init();

	while(1) {	
		float wind_speed;
		if(sendingPacket == 1)
    53d4:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <sendingPacket>
    53d8:	81 30       	cpi	r24, 0x01	; 1
    53da:	29 f4       	brne	.+10     	; 0x53e6 <main+0x230>
		{
			Ether_SendPacket(packetStr);
    53dc:	80 e3       	ldi	r24, 0x30	; 48
    53de:	96 e0       	ldi	r25, 0x06	; 6
    53e0:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <Ether_SendPacket>
			continue;
    53e4:	f7 cf       	rjmp	.-18     	; 0x53d4 <main+0x21e>
		}	
		if(runOnce == 0) {
    53e6:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <runOnce>
    53ea:	81 11       	cpse	r24, r1
    53ec:	09 c0       	rjmp	.+18     	; 0x5400 <main+0x24a>
			flag =0;
    53ee:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <flag>
			TIFR1=(1<<ICF1);
    53f2:	e0 e2       	ldi	r30, 0x20	; 32
    53f4:	e6 bb       	out	0x16, r30	; 22
			runOnce = 1;
    53f6:	81 e0       	ldi	r24, 0x01	; 1
    53f8:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <runOnce>
			sec = 0;
    53fc:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <sec>
		}
		if(flag < 2 && sec < 1) {
    5400:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <flag>
    5404:	82 30       	cpi	r24, 0x02	; 2
    5406:	20 f4       	brcc	.+8      	; 0x5410 <main+0x25a>
    5408:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <sec>
    540c:	88 23       	and	r24, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    540e:	11 f3       	breq	.-60     	; 0x53d4 <main+0x21e>
    5410:	ff ef       	ldi	r31, 0xFF	; 255
    5412:	23 ed       	ldi	r18, 0xD3	; 211
    5414:	30 e3       	ldi	r19, 0x30	; 48
    5416:	f1 50       	subi	r31, 0x01	; 1
    5418:	20 40       	sbci	r18, 0x00	; 0
    541a:	30 40       	sbci	r19, 0x00	; 0
			continue;
		}

		_delay_ms(1000);
		runOnce = 0;
    541c:	e1 f7       	brne	.-8      	; 0x5416 <main+0x260>
    541e:	00 c0       	rjmp	.+0      	; 0x5420 <main+0x26a>
		wind_speed = 0.765 * wind_measureFrequency() + 0.35;
    5420:	00 00       	nop
    5422:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <runOnce>
    5426:	e7 dd       	rcall	.-1074   	; 0x4ff6 <wind_measureFrequency>
    5428:	2a e0       	ldi	r18, 0x0A	; 10
    542a:	37 ed       	ldi	r19, 0xD7	; 215
    542c:	43 e4       	ldi	r20, 0x43	; 67
    542e:	5f e3       	ldi	r21, 0x3F	; 63
    5430:	6d d3       	rcall	.+1754   	; 0x5b0c <__mulsf3>
    5432:	23 e3       	ldi	r18, 0x33	; 51
    5434:	33 e3       	ldi	r19, 0x33	; 51
    5436:	43 eb       	ldi	r20, 0xB3	; 179
    5438:	5e e3       	ldi	r21, 0x3E	; 62
    543a:	5f d1       	rcall	.+702    	; 0x56fa <__addsf3>
    543c:	27 96       	adiw	r28, 0x07	; 7
    543e:	6c af       	std	Y+60, r22	; 0x3c
    5440:	7d af       	std	Y+61, r23	; 0x3d
    5442:	8e af       	std	Y+62, r24	; 0x3e
    5444:	9f af       	std	Y+63, r25	; 0x3f
		if(wind_speed < 0 || wind_speed > 1000)
    5446:	27 97       	sbiw	r28, 0x07	; 7
    5448:	20 e0       	ldi	r18, 0x00	; 0
    544a:	30 e0       	ldi	r19, 0x00	; 0
    544c:	a9 01       	movw	r20, r18
    544e:	b9 d1       	rcall	.+882    	; 0x57c2 <__cmpsf2>
    5450:	88 23       	and	r24, r24
    5452:	a4 f0       	brlt	.+40     	; 0x547c <main+0x2c6>
    5454:	20 e0       	ldi	r18, 0x00	; 0
    5456:	30 e0       	ldi	r19, 0x00	; 0
    5458:	4a e7       	ldi	r20, 0x7A	; 122
    545a:	54 e4       	ldi	r21, 0x44	; 68
    545c:	27 96       	adiw	r28, 0x07	; 7
    545e:	6c ad       	ldd	r22, Y+60	; 0x3c
    5460:	7d ad       	ldd	r23, Y+61	; 0x3d
    5462:	8e ad       	ldd	r24, Y+62	; 0x3e
    5464:	9f ad       	ldd	r25, Y+63	; 0x3f
    5466:	27 97       	sbiw	r28, 0x07	; 7
    5468:	4d d3       	rcall	.+1690   	; 0x5b04 <__gesf2>
    546a:	18 16       	cp	r1, r24
			wind_speed = 0;
    546c:	6c f4       	brge	.+26     	; 0x5488 <main+0x2d2>
    546e:	27 96       	adiw	r28, 0x07	; 7
    5470:	1c ae       	std	Y+60, r1	; 0x3c
    5472:	1d ae       	std	Y+61, r1	; 0x3d
    5474:	1e ae       	std	Y+62, r1	; 0x3e
    5476:	1f ae       	std	Y+63, r1	; 0x3f
    5478:	27 97       	sbiw	r28, 0x07	; 7
    547a:	06 c0       	rjmp	.+12     	; 0x5488 <main+0x2d2>
    547c:	27 96       	adiw	r28, 0x07	; 7
    547e:	1c ae       	std	Y+60, r1	; 0x3c
    5480:	1d ae       	std	Y+61, r1	; 0x3d
    5482:	1e ae       	std	Y+62, r1	; 0x3e

		RTC_GetDateTime(&rtc);
    5484:	1f ae       	std	Y+63, r1	; 0x3f
    5486:	27 97       	sbiw	r28, 0x07	; 7
    5488:	85 e0       	ldi	r24, 0x05	; 5
    548a:	96 e0       	ldi	r25, 0x06	; 6
		
		float angle = ((float)adc_read() / (float)LargestDirectionValue) * 360.0;
    548c:	a6 dc       	rcall	.-1716   	; 0x4dda <RTC_GetDateTime>
    548e:	0c de       	rcall	.-1000   	; 0x50a8 <adc_read>
    5490:	bc 01       	movw	r22, r24
    5492:	80 e0       	ldi	r24, 0x00	; 0
    5494:	90 e0       	ldi	r25, 0x00	; 0
    5496:	36 d2       	rcall	.+1132   	; 0x5904 <__floatunsisf>
    5498:	4b 01       	movw	r8, r22
    549a:	5c 01       	movw	r10, r24
    549c:	60 91 03 06 	lds	r22, 0x0603	; 0x800603 <LargestDirectionValue>
    54a0:	70 91 04 06 	lds	r23, 0x0604	; 0x800604 <LargestDirectionValue+0x1>
    54a4:	07 2e       	mov	r0, r23
    54a6:	00 0c       	add	r0, r0
    54a8:	88 0b       	sbc	r24, r24
    54aa:	99 0b       	sbc	r25, r25
    54ac:	2d d2       	rcall	.+1114   	; 0x5908 <__floatsisf>
    54ae:	9b 01       	movw	r18, r22
    54b0:	ac 01       	movw	r20, r24
    54b2:	c5 01       	movw	r24, r10
    54b4:	b4 01       	movw	r22, r8
    54b6:	89 d1       	rcall	.+786    	; 0x57ca <__divsf3>
    54b8:	20 e0       	ldi	r18, 0x00	; 0
    54ba:	30 e0       	ldi	r19, 0x00	; 0
    54bc:	44 eb       	ldi	r20, 0xB4	; 180
    54be:	53 e4       	ldi	r21, 0x43	; 67
    54c0:	25 d3       	rcall	.+1610   	; 0x5b0c <__mulsf3>
    54c2:	4b 01       	movw	r8, r22
    54c4:	5c 01       	movw	r10, r24
		if(angle > 360)
    54c6:	20 e0       	ldi	r18, 0x00	; 0
    54c8:	30 e0       	ldi	r19, 0x00	; 0
    54ca:	44 eb       	ldi	r20, 0xB4	; 180
    54cc:	53 e4       	ldi	r21, 0x43	; 67
    54ce:	1a d3       	rcall	.+1588   	; 0x5b04 <__gesf2>
    54d0:	18 16       	cp	r1, r24
    54d2:	44 f4       	brge	.+16     	; 0x54e4 <main+0x32e>
			angle = 360;
    54d4:	0f 2e       	mov	r0, r31
    54d6:	81 2c       	mov	r8, r1
    54d8:	91 2c       	mov	r9, r1
    54da:	f4 eb       	ldi	r31, 0xB4	; 180
    54dc:	af 2e       	mov	r10, r31
    54de:	f3 e4       	ldi	r31, 0x43	; 67
    54e0:	bf 2e       	mov	r11, r31
		
		hih8120_measure();
    54e2:	f0 2d       	mov	r31, r0
    54e4:	12 db       	rcall	.-2524   	; 0x4b0a <hih8120_measure>
		
		char humidChar[10],tempChar[10],pressChar[10],anglChar[10],speedChar[10];
		dtostrf(hih8120_humidity,1,2,humidChar);
    54e6:	60 91 2d 01 	lds	r22, 0x012D	; 0x80012d <hih8120_humidity>
    54ea:	70 91 2e 01 	lds	r23, 0x012E	; 0x80012e <hih8120_humidity+0x1>
    54ee:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <hih8120_humidity+0x2>
    54f2:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <hih8120_humidity+0x3>
    54f6:	87 01       	movw	r16, r14
    54f8:	22 e0       	ldi	r18, 0x02	; 2
    54fa:	41 e0       	ldi	r20, 0x01	; 1
		dtostrf(hih8120_temperature_C,1,2,tempChar);
    54fc:	39 d5       	rcall	.+2674   	; 0x5f70 <dtostrf>
    54fe:	60 91 29 01 	lds	r22, 0x0129	; 0x800129 <hih8120_temperature_C>
    5502:	70 91 2a 01 	lds	r23, 0x012A	; 0x80012a <hih8120_temperature_C+0x1>
    5506:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <hih8120_temperature_C+0x2>
    550a:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <hih8120_temperature_C+0x3>
    550e:	83 01       	movw	r16, r6
    5510:	22 e0       	ldi	r18, 0x02	; 2
    5512:	41 e0       	ldi	r20, 0x01	; 1
		dtostrf(bmp280_readPressure(),1,2,pressChar);
    5514:	2d d5       	rcall	.+2650   	; 0x5f70 <dtostrf>
    5516:	0e 94 15 02 	call	0x42a	; 0x42a <bmp280_readPressure>
    551a:	82 01       	movw	r16, r4
    551c:	22 e0       	ldi	r18, 0x02	; 2
    551e:	41 e0       	ldi	r20, 0x01	; 1
    5520:	27 d5       	rcall	.+2638   	; 0x5f70 <dtostrf>
		dtostrf(angle,1,2,anglChar);
    5522:	81 01       	movw	r16, r2
    5524:	22 e0       	ldi	r18, 0x02	; 2
    5526:	41 e0       	ldi	r20, 0x01	; 1
    5528:	c5 01       	movw	r24, r10
    552a:	b4 01       	movw	r22, r8
    552c:	21 d5       	rcall	.+2626   	; 0x5f70 <dtostrf>
    552e:	86 01       	movw	r16, r12
		dtostrf(wind_speed,1,2,speedChar);
    5530:	22 e0       	ldi	r18, 0x02	; 2
    5532:	41 e0       	ldi	r20, 0x01	; 1
    5534:	27 96       	adiw	r28, 0x07	; 7
    5536:	6c ad       	ldd	r22, Y+60	; 0x3c
    5538:	7d ad       	ldd	r23, Y+61	; 0x3d
    553a:	8e ad       	ldd	r24, Y+62	; 0x3e
    553c:	9f ad       	ldd	r25, Y+63	; 0x3f
    553e:	27 97       	sbiw	r28, 0x07	; 7
    5540:	17 d5       	rcall	.+2606   	; 0x5f70 <dtostrf>
    5542:	df 92       	push	r13
		sprintf(packetStr, "[%02d:%02d:%02d] %s C , %s %% , %s Pa , %s , %s m/s", rtc.hour, rtc.min, rtc.sec,tempChar, humidChar, pressChar, anglChar, speedChar);
    5544:	cf 92       	push	r12
    5546:	3f 92       	push	r3
    5548:	2f 92       	push	r2
    554a:	5f 92       	push	r5
    554c:	4f 92       	push	r4
    554e:	ff 92       	push	r15
    5550:	ef 92       	push	r14
    5552:	7f 92       	push	r7
    5554:	6f 92       	push	r6
    5556:	05 e0       	ldi	r16, 0x05	; 5
    5558:	16 e0       	ldi	r17, 0x06	; 6
    555a:	f8 01       	movw	r30, r16
    555c:	80 81       	ld	r24, Z
    555e:	1f 92       	push	r1
    5560:	8f 93       	push	r24
    5562:	81 81       	ldd	r24, Z+1	; 0x01
    5564:	1f 92       	push	r1
    5566:	8f 93       	push	r24
    5568:	82 81       	ldd	r24, Z+2	; 0x02
    556a:	1f 92       	push	r1
    556c:	8f 93       	push	r24
    556e:	28 e1       	ldi	r18, 0x18	; 24
    5570:	32 e0       	ldi	r19, 0x02	; 2
    5572:	3f 93       	push	r19
    5574:	2f 93       	push	r18
    5576:	e0 e3       	ldi	r30, 0x30	; 48
    5578:	f6 e0       	ldi	r31, 0x06	; 6
    557a:	ff 93       	push	r31
    557c:	ef 93       	push	r30
    557e:	d4 d7       	rcall	.+4008   	; 0x6528 <sprintf>
    5580:	f8 01       	movw	r30, r16
		
		char fileName[16];
		sprintf(fileName, "%02d-%02d-%02d.CSV", rtc.date, rtc.month, rtc.year);
    5582:	86 81       	ldd	r24, Z+6	; 0x06
    5584:	1f 92       	push	r1
    5586:	8f 93       	push	r24
    5588:	85 81       	ldd	r24, Z+5	; 0x05
    558a:	1f 92       	push	r1
    558c:	8f 93       	push	r24
    558e:	84 81       	ldd	r24, Z+4	; 0x04
    5590:	1f 92       	push	r1
    5592:	8f 93       	push	r24
    5594:	2c e4       	ldi	r18, 0x4C	; 76
    5596:	32 e0       	ldi	r19, 0x02	; 2
    5598:	3f 93       	push	r19
    559a:	2f 93       	push	r18
    559c:	e1 e0       	ldi	r30, 0x01	; 1
    559e:	f0 e0       	ldi	r31, 0x00	; 0
    55a0:	ec 0f       	add	r30, r28
    55a2:	fd 1f       	adc	r31, r29
    55a4:	ff 93       	push	r31
    55a6:	ef 93       	push	r30
    55a8:	bf d7       	rcall	.+3966   	; 0x6528 <sprintf>
    55aa:	42 e0       	ldi	r20, 0x02	; 2
    55ac:	be 01       	movw	r22, r28

		if(f_open(&Fil, fileName, FA_WRITE) == FR_OK)
    55ae:	6f 5f       	subi	r22, 0xFF	; 255
    55b0:	7f 4f       	sbci	r23, 0xFF	; 255
    55b2:	80 e1       	ldi	r24, 0x10	; 16
    55b4:	96 e0       	ldi	r25, 0x06	; 6
    55b6:	0e 94 36 1a 	call	0x346c	; 0x346c <f_open>
    55ba:	2d b7       	in	r18, 0x3d	; 61
    55bc:	3e b7       	in	r19, 0x3e	; 62
    55be:	22 5e       	subi	r18, 0xE2	; 226
    55c0:	3f 4f       	sbci	r19, 0xFF	; 255
    55c2:	0f b6       	in	r0, 0x3f	; 63
    55c4:	f8 94       	cli
    55c6:	3e bf       	out	0x3e, r19	; 62
    55c8:	0f be       	out	0x3f, r0	; 63
    55ca:	2d bf       	out	0x3d, r18	; 61
    55cc:	81 11       	cpse	r24, r1
    55ce:	75 c0       	rjmp	.+234    	; 0x56ba <main+0x504>
    55d0:	8d b6       	in	r8, 0x3d	; 61
    55d2:	9e b6       	in	r9, 0x3e	; 62
		{
    55d4:	40 91 1a 06 	lds	r20, 0x061A	; 0x80061a <Fil+0xa>
			f_lseek(&Fil, Fil.fsize);
    55d8:	50 91 1b 06 	lds	r21, 0x061B	; 0x80061b <Fil+0xb>
    55dc:	60 91 1c 06 	lds	r22, 0x061C	; 0x80061c <Fil+0xc>
    55e0:	70 91 1d 06 	lds	r23, 0x061D	; 0x80061d <Fil+0xd>
    55e4:	80 e1       	ldi	r24, 0x10	; 16
    55e6:	96 e0       	ldi	r25, 0x06	; 6
    55e8:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <f_lseek>
    55ec:	7f 92       	push	r7
			char sdData[snprintf(NULL,0,"%02d:%02d:%02d,%s,%s,%s,%s,%s\r\n", rtc.hour, rtc.min, rtc.sec, pressChar, anglChar, speedChar, humidChar, tempChar)];
    55ee:	6f 92       	push	r6
    55f0:	ff 92       	push	r15
    55f2:	ef 92       	push	r14
    55f4:	df 92       	push	r13
    55f6:	cf 92       	push	r12
    55f8:	3f 92       	push	r3
    55fa:	2f 92       	push	r2
    55fc:	5f 92       	push	r5
    55fe:	4f 92       	push	r4
    5600:	f8 01       	movw	r30, r16
    5602:	80 81       	ld	r24, Z
    5604:	1f 92       	push	r1
    5606:	8f 93       	push	r24
    5608:	81 81       	ldd	r24, Z+1	; 0x01
    560a:	1f 92       	push	r1
    560c:	8f 93       	push	r24
    560e:	82 81       	ldd	r24, Z+2	; 0x02
    5610:	1f 92       	push	r1
    5612:	8f 93       	push	r24
    5614:	2f e5       	ldi	r18, 0x5F	; 95
    5616:	32 e0       	ldi	r19, 0x02	; 2
    5618:	3f 93       	push	r19
    561a:	2f 93       	push	r18
    561c:	1f 92       	push	r1
    561e:	1f 92       	push	r1
    5620:	1f 92       	push	r1
    5622:	1f 92       	push	r1
    5624:	45 d7       	rcall	.+3722   	; 0x64b0 <snprintf>
    5626:	25 96       	adiw	r28, 0x05	; 5
    5628:	9f af       	std	Y+63, r25	; 0x3f
    562a:	8e af       	std	Y+62, r24	; 0x3e
    562c:	25 97       	sbiw	r28, 0x05	; 5
    562e:	ed b7       	in	r30, 0x3d	; 61
    5630:	fe b7       	in	r31, 0x3e	; 62
    5632:	76 96       	adiw	r30, 0x16	; 22
    5634:	0f b6       	in	r0, 0x3f	; 63
    5636:	f8 94       	cli
    5638:	fe bf       	out	0x3e, r31	; 62
    563a:	0f be       	out	0x3f, r0	; 63
    563c:	ed bf       	out	0x3d, r30	; 61
    563e:	2d b7       	in	r18, 0x3d	; 61
    5640:	3e b7       	in	r19, 0x3e	; 62
    5642:	28 1b       	sub	r18, r24
    5644:	39 0b       	sbc	r19, r25
    5646:	0f b6       	in	r0, 0x3f	; 63
    5648:	f8 94       	cli
    564a:	3e bf       	out	0x3e, r19	; 62
    564c:	0f be       	out	0x3f, r0	; 63
    564e:	2d bf       	out	0x3d, r18	; 61
    5650:	8d b7       	in	r24, 0x3d	; 61
    5652:	9e b7       	in	r25, 0x3e	; 62
    5654:	01 96       	adiw	r24, 0x01	; 1
    5656:	5c 01       	movw	r10, r24
    5658:	7f 92       	push	r7
			sprintf(sdData, "%02d:%02d:%02d,%s,%s,%s,%s,%s\r\n", rtc.hour, rtc.min, rtc.sec, pressChar, anglChar, speedChar, humidChar, tempChar);
    565a:	6f 92       	push	r6
    565c:	ff 92       	push	r15
    565e:	ef 92       	push	r14
    5660:	df 92       	push	r13
    5662:	cf 92       	push	r12
    5664:	3f 92       	push	r3
    5666:	2f 92       	push	r2
    5668:	5f 92       	push	r5
    566a:	4f 92       	push	r4
    566c:	f8 01       	movw	r30, r16
    566e:	80 81       	ld	r24, Z
    5670:	1f 92       	push	r1
    5672:	8f 93       	push	r24
    5674:	81 81       	ldd	r24, Z+1	; 0x01
    5676:	1f 92       	push	r1
    5678:	8f 93       	push	r24
    567a:	82 81       	ldd	r24, Z+2	; 0x02
    567c:	1f 92       	push	r1
    567e:	8f 93       	push	r24
    5680:	2f e5       	ldi	r18, 0x5F	; 95
    5682:	32 e0       	ldi	r19, 0x02	; 2
    5684:	3f 93       	push	r19
    5686:	2f 93       	push	r18
    5688:	bf 92       	push	r11
    568a:	af 92       	push	r10
    568c:	4d d7       	rcall	.+3738   	; 0x6528 <sprintf>
    568e:	2e e0       	ldi	r18, 0x0E	; 14
    5690:	36 e0       	ldi	r19, 0x06	; 6
			f_write(&Fil, sdData, sizeof(sdData), &bw);	// Write Data to the file
    5692:	25 96       	adiw	r28, 0x05	; 5
    5694:	4e ad       	ldd	r20, Y+62	; 0x3e
    5696:	5f ad       	ldd	r21, Y+63	; 0x3f
    5698:	25 97       	sbiw	r28, 0x05	; 5
    569a:	6a 2d       	mov	r22, r10
    569c:	7b 2d       	mov	r23, r11
    569e:	80 e1       	ldi	r24, 0x10	; 16
    56a0:	96 e0       	ldi	r25, 0x06	; 6
    56a2:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <f_write>
    56a6:	80 e1       	ldi	r24, 0x10	; 16
    56a8:	96 e0       	ldi	r25, 0x06	; 6
			f_close(&Fil);
    56aa:	0e 94 a9 1f 	call	0x3f52	; 0x3f52 <f_close>
    56ae:	0f b6       	in	r0, 0x3f	; 63
    56b0:	f8 94       	cli
    56b2:	9e be       	out	0x3e, r9	; 62
    56b4:	0f be       	out	0x3f, r0	; 63
    56b6:	8d be       	out	0x3d, r8	; 61
    56b8:	18 c0       	rjmp	.+48     	; 0x56ea <main+0x534>
    56ba:	4a e0       	ldi	r20, 0x0A	; 10
    56bc:	be 01       	movw	r22, r28
		}
		else
		{
			if (f_open(&Fil, fileName, FA_WRITE | FA_CREATE_ALWAYS) == FR_OK) {	/* Create a file */
    56be:	6f 5f       	subi	r22, 0xFF	; 255
    56c0:	7f 4f       	sbci	r23, 0xFF	; 255
    56c2:	80 e1       	ldi	r24, 0x10	; 16
    56c4:	96 e0       	ldi	r25, 0x06	; 6
    56c6:	0e 94 36 1a 	call	0x346c	; 0x346c <f_open>
    56ca:	81 11       	cpse	r24, r1
    56cc:	0e c0       	rjmp	.+28     	; 0x56ea <main+0x534>
    56ce:	2e e0       	ldi	r18, 0x0E	; 14
    56d0:	36 e0       	ldi	r19, 0x06	; 6
				f_write(&Fil, "Time,Pressure,Wind Angle,Wind Speed,Humidity,Temperature\r\n", 58, &bw);	// Create CSV header
    56d2:	4a e3       	ldi	r20, 0x3A	; 58
    56d4:	50 e0       	ldi	r21, 0x00	; 0
    56d6:	6f e7       	ldi	r22, 0x7F	; 127
    56d8:	72 e0       	ldi	r23, 0x02	; 2
    56da:	80 e1       	ldi	r24, 0x10	; 16
    56dc:	96 e0       	ldi	r25, 0x06	; 6
    56de:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <f_write>
    56e2:	80 e1       	ldi	r24, 0x10	; 16
    56e4:	96 e0       	ldi	r25, 0x06	; 6
				f_close(&Fil);								/* Close the file */
    56e6:	0e 94 a9 1f 	call	0x3f52	; 0x3f52 <f_close>
    56ea:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <sec>
			}
		}

 		sec = 0;
    56ee:	80 e3       	ldi	r24, 0x30	; 48
    56f0:	96 e0       	ldi	r25, 0x06	; 6
 		Ether_SendPacket(packetStr);
    56f2:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <Ether_SendPacket>
    56f6:	6e ce       	rjmp	.-804    	; 0x53d4 <main+0x21e>

000056f8 <__subsf3>:
    56f8:	50 58       	subi	r21, 0x80	; 128

000056fa <__addsf3>:
    56fa:	bb 27       	eor	r27, r27
    56fc:	aa 27       	eor	r26, r26
    56fe:	0e d0       	rcall	.+28     	; 0x571c <__addsf3x>
    5700:	c7 c1       	rjmp	.+910    	; 0x5a90 <__fp_round>
    5702:	b8 d1       	rcall	.+880    	; 0x5a74 <__fp_pscA>
    5704:	30 f0       	brcs	.+12     	; 0x5712 <__addsf3+0x18>
    5706:	bd d1       	rcall	.+890    	; 0x5a82 <__fp_pscB>
    5708:	20 f0       	brcs	.+8      	; 0x5712 <__addsf3+0x18>
    570a:	31 f4       	brne	.+12     	; 0x5718 <__addsf3+0x1e>
    570c:	9f 3f       	cpi	r25, 0xFF	; 255
    570e:	11 f4       	brne	.+4      	; 0x5714 <__addsf3+0x1a>
    5710:	1e f4       	brtc	.+6      	; 0x5718 <__addsf3+0x1e>
    5712:	9d c1       	rjmp	.+826    	; 0x5a4e <__fp_nan>
    5714:	0e f4       	brtc	.+2      	; 0x5718 <__addsf3+0x1e>
    5716:	e0 95       	com	r30
    5718:	e7 fb       	bst	r30, 7
    571a:	93 c1       	rjmp	.+806    	; 0x5a42 <__fp_inf>

0000571c <__addsf3x>:
    571c:	e9 2f       	mov	r30, r25
    571e:	c9 d1       	rcall	.+914    	; 0x5ab2 <__fp_split3>
    5720:	80 f3       	brcs	.-32     	; 0x5702 <__addsf3+0x8>
    5722:	ba 17       	cp	r27, r26
    5724:	62 07       	cpc	r22, r18
    5726:	73 07       	cpc	r23, r19
    5728:	84 07       	cpc	r24, r20
    572a:	95 07       	cpc	r25, r21
    572c:	18 f0       	brcs	.+6      	; 0x5734 <__addsf3x+0x18>
    572e:	71 f4       	brne	.+28     	; 0x574c <__addsf3x+0x30>
    5730:	9e f5       	brtc	.+102    	; 0x5798 <__addsf3x+0x7c>
    5732:	e1 c1       	rjmp	.+962    	; 0x5af6 <__fp_zero>
    5734:	0e f4       	brtc	.+2      	; 0x5738 <__addsf3x+0x1c>
    5736:	e0 95       	com	r30
    5738:	0b 2e       	mov	r0, r27
    573a:	ba 2f       	mov	r27, r26
    573c:	a0 2d       	mov	r26, r0
    573e:	0b 01       	movw	r0, r22
    5740:	b9 01       	movw	r22, r18
    5742:	90 01       	movw	r18, r0
    5744:	0c 01       	movw	r0, r24
    5746:	ca 01       	movw	r24, r20
    5748:	a0 01       	movw	r20, r0
    574a:	11 24       	eor	r1, r1
    574c:	ff 27       	eor	r31, r31
    574e:	59 1b       	sub	r21, r25
    5750:	99 f0       	breq	.+38     	; 0x5778 <__addsf3x+0x5c>
    5752:	59 3f       	cpi	r21, 0xF9	; 249
    5754:	50 f4       	brcc	.+20     	; 0x576a <__addsf3x+0x4e>
    5756:	50 3e       	cpi	r21, 0xE0	; 224
    5758:	68 f1       	brcs	.+90     	; 0x57b4 <__addsf3x+0x98>
    575a:	1a 16       	cp	r1, r26
    575c:	f0 40       	sbci	r31, 0x00	; 0
    575e:	a2 2f       	mov	r26, r18
    5760:	23 2f       	mov	r18, r19
    5762:	34 2f       	mov	r19, r20
    5764:	44 27       	eor	r20, r20
    5766:	58 5f       	subi	r21, 0xF8	; 248
    5768:	f3 cf       	rjmp	.-26     	; 0x5750 <__addsf3x+0x34>
    576a:	46 95       	lsr	r20
    576c:	37 95       	ror	r19
    576e:	27 95       	ror	r18
    5770:	a7 95       	ror	r26
    5772:	f0 40       	sbci	r31, 0x00	; 0
    5774:	53 95       	inc	r21
    5776:	c9 f7       	brne	.-14     	; 0x576a <__addsf3x+0x4e>
    5778:	7e f4       	brtc	.+30     	; 0x5798 <__addsf3x+0x7c>
    577a:	1f 16       	cp	r1, r31
    577c:	ba 0b       	sbc	r27, r26
    577e:	62 0b       	sbc	r22, r18
    5780:	73 0b       	sbc	r23, r19
    5782:	84 0b       	sbc	r24, r20
    5784:	ba f0       	brmi	.+46     	; 0x57b4 <__addsf3x+0x98>
    5786:	91 50       	subi	r25, 0x01	; 1
    5788:	a1 f0       	breq	.+40     	; 0x57b2 <__addsf3x+0x96>
    578a:	ff 0f       	add	r31, r31
    578c:	bb 1f       	adc	r27, r27
    578e:	66 1f       	adc	r22, r22
    5790:	77 1f       	adc	r23, r23
    5792:	88 1f       	adc	r24, r24
    5794:	c2 f7       	brpl	.-16     	; 0x5786 <__addsf3x+0x6a>
    5796:	0e c0       	rjmp	.+28     	; 0x57b4 <__addsf3x+0x98>
    5798:	ba 0f       	add	r27, r26
    579a:	62 1f       	adc	r22, r18
    579c:	73 1f       	adc	r23, r19
    579e:	84 1f       	adc	r24, r20
    57a0:	48 f4       	brcc	.+18     	; 0x57b4 <__addsf3x+0x98>
    57a2:	87 95       	ror	r24
    57a4:	77 95       	ror	r23
    57a6:	67 95       	ror	r22
    57a8:	b7 95       	ror	r27
    57aa:	f7 95       	ror	r31
    57ac:	9e 3f       	cpi	r25, 0xFE	; 254
    57ae:	08 f0       	brcs	.+2      	; 0x57b2 <__addsf3x+0x96>
    57b0:	b3 cf       	rjmp	.-154    	; 0x5718 <__addsf3+0x1e>
    57b2:	93 95       	inc	r25
    57b4:	88 0f       	add	r24, r24
    57b6:	08 f0       	brcs	.+2      	; 0x57ba <__addsf3x+0x9e>
    57b8:	99 27       	eor	r25, r25
    57ba:	ee 0f       	add	r30, r30
    57bc:	97 95       	ror	r25
    57be:	87 95       	ror	r24
    57c0:	08 95       	ret

000057c2 <__cmpsf2>:
    57c2:	1b d1       	rcall	.+566    	; 0x59fa <__fp_cmp>
    57c4:	08 f4       	brcc	.+2      	; 0x57c8 <__cmpsf2+0x6>
    57c6:	81 e0       	ldi	r24, 0x01	; 1
    57c8:	08 95       	ret

000057ca <__divsf3>:
    57ca:	0c d0       	rcall	.+24     	; 0x57e4 <__divsf3x>
    57cc:	61 c1       	rjmp	.+706    	; 0x5a90 <__fp_round>
    57ce:	59 d1       	rcall	.+690    	; 0x5a82 <__fp_pscB>
    57d0:	40 f0       	brcs	.+16     	; 0x57e2 <__divsf3+0x18>
    57d2:	50 d1       	rcall	.+672    	; 0x5a74 <__fp_pscA>
    57d4:	30 f0       	brcs	.+12     	; 0x57e2 <__divsf3+0x18>
    57d6:	21 f4       	brne	.+8      	; 0x57e0 <__divsf3+0x16>
    57d8:	5f 3f       	cpi	r21, 0xFF	; 255
    57da:	19 f0       	breq	.+6      	; 0x57e2 <__divsf3+0x18>
    57dc:	32 c1       	rjmp	.+612    	; 0x5a42 <__fp_inf>
    57de:	51 11       	cpse	r21, r1
    57e0:	8b c1       	rjmp	.+790    	; 0x5af8 <__fp_szero>
    57e2:	35 c1       	rjmp	.+618    	; 0x5a4e <__fp_nan>

000057e4 <__divsf3x>:
    57e4:	66 d1       	rcall	.+716    	; 0x5ab2 <__fp_split3>
    57e6:	98 f3       	brcs	.-26     	; 0x57ce <__divsf3+0x4>

000057e8 <__divsf3_pse>:
    57e8:	99 23       	and	r25, r25
    57ea:	c9 f3       	breq	.-14     	; 0x57de <__divsf3+0x14>
    57ec:	55 23       	and	r21, r21
    57ee:	b1 f3       	breq	.-20     	; 0x57dc <__divsf3+0x12>
    57f0:	95 1b       	sub	r25, r21
    57f2:	55 0b       	sbc	r21, r21
    57f4:	bb 27       	eor	r27, r27
    57f6:	aa 27       	eor	r26, r26
    57f8:	62 17       	cp	r22, r18
    57fa:	73 07       	cpc	r23, r19
    57fc:	84 07       	cpc	r24, r20
    57fe:	38 f0       	brcs	.+14     	; 0x580e <__divsf3_pse+0x26>
    5800:	9f 5f       	subi	r25, 0xFF	; 255
    5802:	5f 4f       	sbci	r21, 0xFF	; 255
    5804:	22 0f       	add	r18, r18
    5806:	33 1f       	adc	r19, r19
    5808:	44 1f       	adc	r20, r20
    580a:	aa 1f       	adc	r26, r26
    580c:	a9 f3       	breq	.-22     	; 0x57f8 <__divsf3_pse+0x10>
    580e:	33 d0       	rcall	.+102    	; 0x5876 <__divsf3_pse+0x8e>
    5810:	0e 2e       	mov	r0, r30
    5812:	3a f0       	brmi	.+14     	; 0x5822 <__divsf3_pse+0x3a>
    5814:	e0 e8       	ldi	r30, 0x80	; 128
    5816:	30 d0       	rcall	.+96     	; 0x5878 <__divsf3_pse+0x90>
    5818:	91 50       	subi	r25, 0x01	; 1
    581a:	50 40       	sbci	r21, 0x00	; 0
    581c:	e6 95       	lsr	r30
    581e:	00 1c       	adc	r0, r0
    5820:	ca f7       	brpl	.-14     	; 0x5814 <__divsf3_pse+0x2c>
    5822:	29 d0       	rcall	.+82     	; 0x5876 <__divsf3_pse+0x8e>
    5824:	fe 2f       	mov	r31, r30
    5826:	27 d0       	rcall	.+78     	; 0x5876 <__divsf3_pse+0x8e>
    5828:	66 0f       	add	r22, r22
    582a:	77 1f       	adc	r23, r23
    582c:	88 1f       	adc	r24, r24
    582e:	bb 1f       	adc	r27, r27
    5830:	26 17       	cp	r18, r22
    5832:	37 07       	cpc	r19, r23
    5834:	48 07       	cpc	r20, r24
    5836:	ab 07       	cpc	r26, r27
    5838:	b0 e8       	ldi	r27, 0x80	; 128
    583a:	09 f0       	breq	.+2      	; 0x583e <__divsf3_pse+0x56>
    583c:	bb 0b       	sbc	r27, r27
    583e:	80 2d       	mov	r24, r0
    5840:	bf 01       	movw	r22, r30
    5842:	ff 27       	eor	r31, r31
    5844:	93 58       	subi	r25, 0x83	; 131
    5846:	5f 4f       	sbci	r21, 0xFF	; 255
    5848:	2a f0       	brmi	.+10     	; 0x5854 <__divsf3_pse+0x6c>
    584a:	9e 3f       	cpi	r25, 0xFE	; 254
    584c:	51 05       	cpc	r21, r1
    584e:	68 f0       	brcs	.+26     	; 0x586a <__divsf3_pse+0x82>
    5850:	f8 c0       	rjmp	.+496    	; 0x5a42 <__fp_inf>
    5852:	52 c1       	rjmp	.+676    	; 0x5af8 <__fp_szero>
    5854:	5f 3f       	cpi	r21, 0xFF	; 255
    5856:	ec f3       	brlt	.-6      	; 0x5852 <__divsf3_pse+0x6a>
    5858:	98 3e       	cpi	r25, 0xE8	; 232
    585a:	dc f3       	brlt	.-10     	; 0x5852 <__divsf3_pse+0x6a>
    585c:	86 95       	lsr	r24
    585e:	77 95       	ror	r23
    5860:	67 95       	ror	r22
    5862:	b7 95       	ror	r27
    5864:	f7 95       	ror	r31
    5866:	9f 5f       	subi	r25, 0xFF	; 255
    5868:	c9 f7       	brne	.-14     	; 0x585c <__divsf3_pse+0x74>
    586a:	88 0f       	add	r24, r24
    586c:	91 1d       	adc	r25, r1
    586e:	96 95       	lsr	r25
    5870:	87 95       	ror	r24
    5872:	97 f9       	bld	r25, 7
    5874:	08 95       	ret
    5876:	e1 e0       	ldi	r30, 0x01	; 1
    5878:	66 0f       	add	r22, r22
    587a:	77 1f       	adc	r23, r23
    587c:	88 1f       	adc	r24, r24
    587e:	bb 1f       	adc	r27, r27
    5880:	62 17       	cp	r22, r18
    5882:	73 07       	cpc	r23, r19
    5884:	84 07       	cpc	r24, r20
    5886:	ba 07       	cpc	r27, r26
    5888:	20 f0       	brcs	.+8      	; 0x5892 <__divsf3_pse+0xaa>
    588a:	62 1b       	sub	r22, r18
    588c:	73 0b       	sbc	r23, r19
    588e:	84 0b       	sbc	r24, r20
    5890:	ba 0b       	sbc	r27, r26
    5892:	ee 1f       	adc	r30, r30
    5894:	88 f7       	brcc	.-30     	; 0x5878 <__divsf3_pse+0x90>
    5896:	e0 95       	com	r30
    5898:	08 95       	ret

0000589a <__fixsfsi>:
    589a:	04 d0       	rcall	.+8      	; 0x58a4 <__fixunssfsi>
    589c:	68 94       	set
    589e:	b1 11       	cpse	r27, r1
    58a0:	2b c1       	rjmp	.+598    	; 0x5af8 <__fp_szero>
    58a2:	08 95       	ret

000058a4 <__fixunssfsi>:
    58a4:	0e d1       	rcall	.+540    	; 0x5ac2 <__fp_splitA>
    58a6:	88 f0       	brcs	.+34     	; 0x58ca <__fixunssfsi+0x26>
    58a8:	9f 57       	subi	r25, 0x7F	; 127
    58aa:	90 f0       	brcs	.+36     	; 0x58d0 <__fixunssfsi+0x2c>
    58ac:	b9 2f       	mov	r27, r25
    58ae:	99 27       	eor	r25, r25
    58b0:	b7 51       	subi	r27, 0x17	; 23
    58b2:	a0 f0       	brcs	.+40     	; 0x58dc <__fixunssfsi+0x38>
    58b4:	d1 f0       	breq	.+52     	; 0x58ea <__fixunssfsi+0x46>
    58b6:	66 0f       	add	r22, r22
    58b8:	77 1f       	adc	r23, r23
    58ba:	88 1f       	adc	r24, r24
    58bc:	99 1f       	adc	r25, r25
    58be:	1a f0       	brmi	.+6      	; 0x58c6 <__fixunssfsi+0x22>
    58c0:	ba 95       	dec	r27
    58c2:	c9 f7       	brne	.-14     	; 0x58b6 <__fixunssfsi+0x12>
    58c4:	12 c0       	rjmp	.+36     	; 0x58ea <__fixunssfsi+0x46>
    58c6:	b1 30       	cpi	r27, 0x01	; 1
    58c8:	81 f0       	breq	.+32     	; 0x58ea <__fixunssfsi+0x46>
    58ca:	15 d1       	rcall	.+554    	; 0x5af6 <__fp_zero>
    58cc:	b1 e0       	ldi	r27, 0x01	; 1
    58ce:	08 95       	ret
    58d0:	12 c1       	rjmp	.+548    	; 0x5af6 <__fp_zero>
    58d2:	67 2f       	mov	r22, r23
    58d4:	78 2f       	mov	r23, r24
    58d6:	88 27       	eor	r24, r24
    58d8:	b8 5f       	subi	r27, 0xF8	; 248
    58da:	39 f0       	breq	.+14     	; 0x58ea <__fixunssfsi+0x46>
    58dc:	b9 3f       	cpi	r27, 0xF9	; 249
    58de:	cc f3       	brlt	.-14     	; 0x58d2 <__fixunssfsi+0x2e>
    58e0:	86 95       	lsr	r24
    58e2:	77 95       	ror	r23
    58e4:	67 95       	ror	r22
    58e6:	b3 95       	inc	r27
    58e8:	d9 f7       	brne	.-10     	; 0x58e0 <__fixunssfsi+0x3c>
    58ea:	3e f4       	brtc	.+14     	; 0x58fa <__fixunssfsi+0x56>
    58ec:	90 95       	com	r25
    58ee:	80 95       	com	r24
    58f0:	70 95       	com	r23
    58f2:	61 95       	neg	r22
    58f4:	7f 4f       	sbci	r23, 0xFF	; 255
    58f6:	8f 4f       	sbci	r24, 0xFF	; 255
    58f8:	9f 4f       	sbci	r25, 0xFF	; 255
    58fa:	08 95       	ret

000058fc <__floatdisf>:
    58fc:	97 fb       	bst	r25, 7
    58fe:	0e f4       	brtc	.+2      	; 0x5902 <__floatdisf+0x6>
    5900:	a9 d0       	rcall	.+338    	; 0x5a54 <__fp_negdi>
    5902:	3e c0       	rjmp	.+124    	; 0x5980 <__fp_di2sf>

00005904 <__floatunsisf>:
    5904:	e8 94       	clt
    5906:	09 c0       	rjmp	.+18     	; 0x591a <__floatsisf+0x12>

00005908 <__floatsisf>:
    5908:	97 fb       	bst	r25, 7
    590a:	3e f4       	brtc	.+14     	; 0x591a <__floatsisf+0x12>
    590c:	90 95       	com	r25
    590e:	80 95       	com	r24
    5910:	70 95       	com	r23
    5912:	61 95       	neg	r22
    5914:	7f 4f       	sbci	r23, 0xFF	; 255
    5916:	8f 4f       	sbci	r24, 0xFF	; 255
    5918:	9f 4f       	sbci	r25, 0xFF	; 255
    591a:	99 23       	and	r25, r25
    591c:	a9 f0       	breq	.+42     	; 0x5948 <__floatsisf+0x40>
    591e:	f9 2f       	mov	r31, r25
    5920:	96 e9       	ldi	r25, 0x96	; 150
    5922:	bb 27       	eor	r27, r27
    5924:	93 95       	inc	r25
    5926:	f6 95       	lsr	r31
    5928:	87 95       	ror	r24
    592a:	77 95       	ror	r23
    592c:	67 95       	ror	r22
    592e:	b7 95       	ror	r27
    5930:	f1 11       	cpse	r31, r1
    5932:	f8 cf       	rjmp	.-16     	; 0x5924 <__floatsisf+0x1c>
    5934:	fa f4       	brpl	.+62     	; 0x5974 <__floatsisf+0x6c>
    5936:	bb 0f       	add	r27, r27
    5938:	11 f4       	brne	.+4      	; 0x593e <__floatsisf+0x36>
    593a:	60 ff       	sbrs	r22, 0
    593c:	1b c0       	rjmp	.+54     	; 0x5974 <__floatsisf+0x6c>
    593e:	6f 5f       	subi	r22, 0xFF	; 255
    5940:	7f 4f       	sbci	r23, 0xFF	; 255
    5942:	8f 4f       	sbci	r24, 0xFF	; 255
    5944:	9f 4f       	sbci	r25, 0xFF	; 255
    5946:	16 c0       	rjmp	.+44     	; 0x5974 <__floatsisf+0x6c>
    5948:	88 23       	and	r24, r24
    594a:	11 f0       	breq	.+4      	; 0x5950 <__floatsisf+0x48>
    594c:	96 e9       	ldi	r25, 0x96	; 150
    594e:	11 c0       	rjmp	.+34     	; 0x5972 <__floatsisf+0x6a>
    5950:	77 23       	and	r23, r23
    5952:	21 f0       	breq	.+8      	; 0x595c <__floatsisf+0x54>
    5954:	9e e8       	ldi	r25, 0x8E	; 142
    5956:	87 2f       	mov	r24, r23
    5958:	76 2f       	mov	r23, r22
    595a:	05 c0       	rjmp	.+10     	; 0x5966 <__floatsisf+0x5e>
    595c:	66 23       	and	r22, r22
    595e:	71 f0       	breq	.+28     	; 0x597c <__floatsisf+0x74>
    5960:	96 e8       	ldi	r25, 0x86	; 134
    5962:	86 2f       	mov	r24, r22
    5964:	70 e0       	ldi	r23, 0x00	; 0
    5966:	60 e0       	ldi	r22, 0x00	; 0
    5968:	2a f0       	brmi	.+10     	; 0x5974 <__floatsisf+0x6c>
    596a:	9a 95       	dec	r25
    596c:	66 0f       	add	r22, r22
    596e:	77 1f       	adc	r23, r23
    5970:	88 1f       	adc	r24, r24
    5972:	da f7       	brpl	.-10     	; 0x596a <__floatsisf+0x62>
    5974:	88 0f       	add	r24, r24
    5976:	96 95       	lsr	r25
    5978:	87 95       	ror	r24
    597a:	97 f9       	bld	r25, 7
    597c:	08 95       	ret

0000597e <__floatundisf>:
    597e:	e8 94       	clt

00005980 <__fp_di2sf>:
    5980:	f9 2f       	mov	r31, r25
    5982:	96 eb       	ldi	r25, 0xB6	; 182
    5984:	ff 23       	and	r31, r31
    5986:	81 f0       	breq	.+32     	; 0x59a8 <__fp_di2sf+0x28>
    5988:	12 16       	cp	r1, r18
    598a:	13 06       	cpc	r1, r19
    598c:	14 06       	cpc	r1, r20
    598e:	44 0b       	sbc	r20, r20
    5990:	93 95       	inc	r25
    5992:	f6 95       	lsr	r31
    5994:	87 95       	ror	r24
    5996:	77 95       	ror	r23
    5998:	67 95       	ror	r22
    599a:	57 95       	ror	r21
    599c:	40 40       	sbci	r20, 0x00	; 0
    599e:	ff 23       	and	r31, r31
    59a0:	b9 f7       	brne	.-18     	; 0x5990 <__fp_di2sf+0x10>
    59a2:	1b c0       	rjmp	.+54     	; 0x59da <__fp_di2sf+0x5a>
    59a4:	99 27       	eor	r25, r25
    59a6:	08 95       	ret
    59a8:	88 23       	and	r24, r24
    59aa:	51 f4       	brne	.+20     	; 0x59c0 <__fp_di2sf+0x40>
    59ac:	98 50       	subi	r25, 0x08	; 8
    59ae:	d2 f7       	brpl	.-12     	; 0x59a4 <__fp_di2sf+0x24>
    59b0:	87 2b       	or	r24, r23
    59b2:	76 2f       	mov	r23, r22
    59b4:	65 2f       	mov	r22, r21
    59b6:	54 2f       	mov	r21, r20
    59b8:	43 2f       	mov	r20, r19
    59ba:	32 2f       	mov	r19, r18
    59bc:	20 e0       	ldi	r18, 0x00	; 0
    59be:	b1 f3       	breq	.-20     	; 0x59ac <__fp_di2sf+0x2c>
    59c0:	12 16       	cp	r1, r18
    59c2:	13 06       	cpc	r1, r19
    59c4:	14 06       	cpc	r1, r20
    59c6:	44 0b       	sbc	r20, r20
    59c8:	88 23       	and	r24, r24
    59ca:	3a f0       	brmi	.+14     	; 0x59da <__fp_di2sf+0x5a>
    59cc:	9a 95       	dec	r25
    59ce:	44 0f       	add	r20, r20
    59d0:	55 1f       	adc	r21, r21
    59d2:	66 1f       	adc	r22, r22
    59d4:	77 1f       	adc	r23, r23
    59d6:	88 1f       	adc	r24, r24
    59d8:	ca f7       	brpl	.-14     	; 0x59cc <__fp_di2sf+0x4c>
    59da:	55 23       	and	r21, r21
    59dc:	4a f4       	brpl	.+18     	; 0x59f0 <__fp_di2sf+0x70>
    59de:	44 0f       	add	r20, r20
    59e0:	55 1f       	adc	r21, r21
    59e2:	11 f4       	brne	.+4      	; 0x59e8 <__fp_di2sf+0x68>
    59e4:	60 ff       	sbrs	r22, 0
    59e6:	04 c0       	rjmp	.+8      	; 0x59f0 <__fp_di2sf+0x70>
    59e8:	6f 5f       	subi	r22, 0xFF	; 255
    59ea:	7f 4f       	sbci	r23, 0xFF	; 255
    59ec:	8f 4f       	sbci	r24, 0xFF	; 255
    59ee:	9f 4f       	sbci	r25, 0xFF	; 255
    59f0:	88 0f       	add	r24, r24
    59f2:	96 95       	lsr	r25
    59f4:	87 95       	ror	r24
    59f6:	97 f9       	bld	r25, 7
    59f8:	08 95       	ret

000059fa <__fp_cmp>:
    59fa:	99 0f       	add	r25, r25
    59fc:	00 08       	sbc	r0, r0
    59fe:	55 0f       	add	r21, r21
    5a00:	aa 0b       	sbc	r26, r26
    5a02:	e0 e8       	ldi	r30, 0x80	; 128
    5a04:	fe ef       	ldi	r31, 0xFE	; 254
    5a06:	16 16       	cp	r1, r22
    5a08:	17 06       	cpc	r1, r23
    5a0a:	e8 07       	cpc	r30, r24
    5a0c:	f9 07       	cpc	r31, r25
    5a0e:	c0 f0       	brcs	.+48     	; 0x5a40 <__fp_cmp+0x46>
    5a10:	12 16       	cp	r1, r18
    5a12:	13 06       	cpc	r1, r19
    5a14:	e4 07       	cpc	r30, r20
    5a16:	f5 07       	cpc	r31, r21
    5a18:	98 f0       	brcs	.+38     	; 0x5a40 <__fp_cmp+0x46>
    5a1a:	62 1b       	sub	r22, r18
    5a1c:	73 0b       	sbc	r23, r19
    5a1e:	84 0b       	sbc	r24, r20
    5a20:	95 0b       	sbc	r25, r21
    5a22:	39 f4       	brne	.+14     	; 0x5a32 <__fp_cmp+0x38>
    5a24:	0a 26       	eor	r0, r26
    5a26:	61 f0       	breq	.+24     	; 0x5a40 <__fp_cmp+0x46>
    5a28:	23 2b       	or	r18, r19
    5a2a:	24 2b       	or	r18, r20
    5a2c:	25 2b       	or	r18, r21
    5a2e:	21 f4       	brne	.+8      	; 0x5a38 <__fp_cmp+0x3e>
    5a30:	08 95       	ret
    5a32:	0a 26       	eor	r0, r26
    5a34:	09 f4       	brne	.+2      	; 0x5a38 <__fp_cmp+0x3e>
    5a36:	a1 40       	sbci	r26, 0x01	; 1
    5a38:	a6 95       	lsr	r26
    5a3a:	8f ef       	ldi	r24, 0xFF	; 255
    5a3c:	81 1d       	adc	r24, r1
    5a3e:	81 1d       	adc	r24, r1
    5a40:	08 95       	ret

00005a42 <__fp_inf>:
    5a42:	97 f9       	bld	r25, 7
    5a44:	9f 67       	ori	r25, 0x7F	; 127
    5a46:	80 e8       	ldi	r24, 0x80	; 128
    5a48:	70 e0       	ldi	r23, 0x00	; 0
    5a4a:	60 e0       	ldi	r22, 0x00	; 0
    5a4c:	08 95       	ret

00005a4e <__fp_nan>:
    5a4e:	9f ef       	ldi	r25, 0xFF	; 255
    5a50:	80 ec       	ldi	r24, 0xC0	; 192
    5a52:	08 95       	ret

00005a54 <__fp_negdi>:
    5a54:	90 95       	com	r25
    5a56:	80 95       	com	r24
    5a58:	70 95       	com	r23
    5a5a:	60 95       	com	r22
    5a5c:	50 95       	com	r21
    5a5e:	40 95       	com	r20
    5a60:	30 95       	com	r19
    5a62:	21 95       	neg	r18
    5a64:	3f 4f       	sbci	r19, 0xFF	; 255
    5a66:	4f 4f       	sbci	r20, 0xFF	; 255
    5a68:	5f 4f       	sbci	r21, 0xFF	; 255
    5a6a:	6f 4f       	sbci	r22, 0xFF	; 255
    5a6c:	7f 4f       	sbci	r23, 0xFF	; 255
    5a6e:	8f 4f       	sbci	r24, 0xFF	; 255
    5a70:	9f 4f       	sbci	r25, 0xFF	; 255
    5a72:	08 95       	ret

00005a74 <__fp_pscA>:
    5a74:	00 24       	eor	r0, r0
    5a76:	0a 94       	dec	r0
    5a78:	16 16       	cp	r1, r22
    5a7a:	17 06       	cpc	r1, r23
    5a7c:	18 06       	cpc	r1, r24
    5a7e:	09 06       	cpc	r0, r25
    5a80:	08 95       	ret

00005a82 <__fp_pscB>:
    5a82:	00 24       	eor	r0, r0
    5a84:	0a 94       	dec	r0
    5a86:	12 16       	cp	r1, r18
    5a88:	13 06       	cpc	r1, r19
    5a8a:	14 06       	cpc	r1, r20
    5a8c:	05 06       	cpc	r0, r21
    5a8e:	08 95       	ret

00005a90 <__fp_round>:
    5a90:	09 2e       	mov	r0, r25
    5a92:	03 94       	inc	r0
    5a94:	00 0c       	add	r0, r0
    5a96:	11 f4       	brne	.+4      	; 0x5a9c <__fp_round+0xc>
    5a98:	88 23       	and	r24, r24
    5a9a:	52 f0       	brmi	.+20     	; 0x5ab0 <__fp_round+0x20>
    5a9c:	bb 0f       	add	r27, r27
    5a9e:	40 f4       	brcc	.+16     	; 0x5ab0 <__fp_round+0x20>
    5aa0:	bf 2b       	or	r27, r31
    5aa2:	11 f4       	brne	.+4      	; 0x5aa8 <__fp_round+0x18>
    5aa4:	60 ff       	sbrs	r22, 0
    5aa6:	04 c0       	rjmp	.+8      	; 0x5ab0 <__fp_round+0x20>
    5aa8:	6f 5f       	subi	r22, 0xFF	; 255
    5aaa:	7f 4f       	sbci	r23, 0xFF	; 255
    5aac:	8f 4f       	sbci	r24, 0xFF	; 255
    5aae:	9f 4f       	sbci	r25, 0xFF	; 255
    5ab0:	08 95       	ret

00005ab2 <__fp_split3>:
    5ab2:	57 fd       	sbrc	r21, 7
    5ab4:	90 58       	subi	r25, 0x80	; 128
    5ab6:	44 0f       	add	r20, r20
    5ab8:	55 1f       	adc	r21, r21
    5aba:	59 f0       	breq	.+22     	; 0x5ad2 <__fp_splitA+0x10>
    5abc:	5f 3f       	cpi	r21, 0xFF	; 255
    5abe:	71 f0       	breq	.+28     	; 0x5adc <__fp_splitA+0x1a>
    5ac0:	47 95       	ror	r20

00005ac2 <__fp_splitA>:
    5ac2:	88 0f       	add	r24, r24
    5ac4:	97 fb       	bst	r25, 7
    5ac6:	99 1f       	adc	r25, r25
    5ac8:	61 f0       	breq	.+24     	; 0x5ae2 <__fp_splitA+0x20>
    5aca:	9f 3f       	cpi	r25, 0xFF	; 255
    5acc:	79 f0       	breq	.+30     	; 0x5aec <__fp_splitA+0x2a>
    5ace:	87 95       	ror	r24
    5ad0:	08 95       	ret
    5ad2:	12 16       	cp	r1, r18
    5ad4:	13 06       	cpc	r1, r19
    5ad6:	14 06       	cpc	r1, r20
    5ad8:	55 1f       	adc	r21, r21
    5ada:	f2 cf       	rjmp	.-28     	; 0x5ac0 <__fp_split3+0xe>
    5adc:	46 95       	lsr	r20
    5ade:	f1 df       	rcall	.-30     	; 0x5ac2 <__fp_splitA>
    5ae0:	08 c0       	rjmp	.+16     	; 0x5af2 <__fp_splitA+0x30>
    5ae2:	16 16       	cp	r1, r22
    5ae4:	17 06       	cpc	r1, r23
    5ae6:	18 06       	cpc	r1, r24
    5ae8:	99 1f       	adc	r25, r25
    5aea:	f1 cf       	rjmp	.-30     	; 0x5ace <__fp_splitA+0xc>
    5aec:	86 95       	lsr	r24
    5aee:	71 05       	cpc	r23, r1
    5af0:	61 05       	cpc	r22, r1
    5af2:	08 94       	sec
    5af4:	08 95       	ret

00005af6 <__fp_zero>:
    5af6:	e8 94       	clt

00005af8 <__fp_szero>:
    5af8:	bb 27       	eor	r27, r27
    5afa:	66 27       	eor	r22, r22
    5afc:	77 27       	eor	r23, r23
    5afe:	cb 01       	movw	r24, r22
    5b00:	97 f9       	bld	r25, 7
    5b02:	08 95       	ret

00005b04 <__gesf2>:
    5b04:	7a df       	rcall	.-268    	; 0x59fa <__fp_cmp>
    5b06:	08 f4       	brcc	.+2      	; 0x5b0a <__gesf2+0x6>
    5b08:	8f ef       	ldi	r24, 0xFF	; 255
    5b0a:	08 95       	ret

00005b0c <__mulsf3>:
    5b0c:	0b d0       	rcall	.+22     	; 0x5b24 <__mulsf3x>
    5b0e:	c0 cf       	rjmp	.-128    	; 0x5a90 <__fp_round>
    5b10:	b1 df       	rcall	.-158    	; 0x5a74 <__fp_pscA>
    5b12:	28 f0       	brcs	.+10     	; 0x5b1e <__mulsf3+0x12>
    5b14:	b6 df       	rcall	.-148    	; 0x5a82 <__fp_pscB>
    5b16:	18 f0       	brcs	.+6      	; 0x5b1e <__mulsf3+0x12>
    5b18:	95 23       	and	r25, r21
    5b1a:	09 f0       	breq	.+2      	; 0x5b1e <__mulsf3+0x12>
    5b1c:	92 cf       	rjmp	.-220    	; 0x5a42 <__fp_inf>
    5b1e:	97 cf       	rjmp	.-210    	; 0x5a4e <__fp_nan>
    5b20:	11 24       	eor	r1, r1
    5b22:	ea cf       	rjmp	.-44     	; 0x5af8 <__fp_szero>

00005b24 <__mulsf3x>:
    5b24:	c6 df       	rcall	.-116    	; 0x5ab2 <__fp_split3>
    5b26:	a0 f3       	brcs	.-24     	; 0x5b10 <__mulsf3+0x4>

00005b28 <__mulsf3_pse>:
    5b28:	95 9f       	mul	r25, r21
    5b2a:	d1 f3       	breq	.-12     	; 0x5b20 <__mulsf3+0x14>
    5b2c:	95 0f       	add	r25, r21
    5b2e:	50 e0       	ldi	r21, 0x00	; 0
    5b30:	55 1f       	adc	r21, r21
    5b32:	62 9f       	mul	r22, r18
    5b34:	f0 01       	movw	r30, r0
    5b36:	72 9f       	mul	r23, r18
    5b38:	bb 27       	eor	r27, r27
    5b3a:	f0 0d       	add	r31, r0
    5b3c:	b1 1d       	adc	r27, r1
    5b3e:	63 9f       	mul	r22, r19
    5b40:	aa 27       	eor	r26, r26
    5b42:	f0 0d       	add	r31, r0
    5b44:	b1 1d       	adc	r27, r1
    5b46:	aa 1f       	adc	r26, r26
    5b48:	64 9f       	mul	r22, r20
    5b4a:	66 27       	eor	r22, r22
    5b4c:	b0 0d       	add	r27, r0
    5b4e:	a1 1d       	adc	r26, r1
    5b50:	66 1f       	adc	r22, r22
    5b52:	82 9f       	mul	r24, r18
    5b54:	22 27       	eor	r18, r18
    5b56:	b0 0d       	add	r27, r0
    5b58:	a1 1d       	adc	r26, r1
    5b5a:	62 1f       	adc	r22, r18
    5b5c:	73 9f       	mul	r23, r19
    5b5e:	b0 0d       	add	r27, r0
    5b60:	a1 1d       	adc	r26, r1
    5b62:	62 1f       	adc	r22, r18
    5b64:	83 9f       	mul	r24, r19
    5b66:	a0 0d       	add	r26, r0
    5b68:	61 1d       	adc	r22, r1
    5b6a:	22 1f       	adc	r18, r18
    5b6c:	74 9f       	mul	r23, r20
    5b6e:	33 27       	eor	r19, r19
    5b70:	a0 0d       	add	r26, r0
    5b72:	61 1d       	adc	r22, r1
    5b74:	23 1f       	adc	r18, r19
    5b76:	84 9f       	mul	r24, r20
    5b78:	60 0d       	add	r22, r0
    5b7a:	21 1d       	adc	r18, r1
    5b7c:	82 2f       	mov	r24, r18
    5b7e:	76 2f       	mov	r23, r22
    5b80:	6a 2f       	mov	r22, r26
    5b82:	11 24       	eor	r1, r1
    5b84:	9f 57       	subi	r25, 0x7F	; 127
    5b86:	50 40       	sbci	r21, 0x00	; 0
    5b88:	8a f0       	brmi	.+34     	; 0x5bac <__mulsf3_pse+0x84>
    5b8a:	e1 f0       	breq	.+56     	; 0x5bc4 <__mulsf3_pse+0x9c>
    5b8c:	88 23       	and	r24, r24
    5b8e:	4a f0       	brmi	.+18     	; 0x5ba2 <__mulsf3_pse+0x7a>
    5b90:	ee 0f       	add	r30, r30
    5b92:	ff 1f       	adc	r31, r31
    5b94:	bb 1f       	adc	r27, r27
    5b96:	66 1f       	adc	r22, r22
    5b98:	77 1f       	adc	r23, r23
    5b9a:	88 1f       	adc	r24, r24
    5b9c:	91 50       	subi	r25, 0x01	; 1
    5b9e:	50 40       	sbci	r21, 0x00	; 0
    5ba0:	a9 f7       	brne	.-22     	; 0x5b8c <__mulsf3_pse+0x64>
    5ba2:	9e 3f       	cpi	r25, 0xFE	; 254
    5ba4:	51 05       	cpc	r21, r1
    5ba6:	70 f0       	brcs	.+28     	; 0x5bc4 <__mulsf3_pse+0x9c>
    5ba8:	4c cf       	rjmp	.-360    	; 0x5a42 <__fp_inf>
    5baa:	a6 cf       	rjmp	.-180    	; 0x5af8 <__fp_szero>
    5bac:	5f 3f       	cpi	r21, 0xFF	; 255
    5bae:	ec f3       	brlt	.-6      	; 0x5baa <__mulsf3_pse+0x82>
    5bb0:	98 3e       	cpi	r25, 0xE8	; 232
    5bb2:	dc f3       	brlt	.-10     	; 0x5baa <__mulsf3_pse+0x82>
    5bb4:	86 95       	lsr	r24
    5bb6:	77 95       	ror	r23
    5bb8:	67 95       	ror	r22
    5bba:	b7 95       	ror	r27
    5bbc:	f7 95       	ror	r31
    5bbe:	e7 95       	ror	r30
    5bc0:	9f 5f       	subi	r25, 0xFF	; 255
    5bc2:	c1 f7       	brne	.-16     	; 0x5bb4 <__mulsf3_pse+0x8c>
    5bc4:	fe 2b       	or	r31, r30
    5bc6:	88 0f       	add	r24, r24
    5bc8:	91 1d       	adc	r25, r1
    5bca:	96 95       	lsr	r25
    5bcc:	87 95       	ror	r24
    5bce:	97 f9       	bld	r25, 7
    5bd0:	08 95       	ret

00005bd2 <__mulsi3>:
    5bd2:	db 01       	movw	r26, r22
    5bd4:	8f 93       	push	r24
    5bd6:	9f 93       	push	r25
    5bd8:	36 d0       	rcall	.+108    	; 0x5c46 <__muluhisi3>
    5bda:	bf 91       	pop	r27
    5bdc:	af 91       	pop	r26
    5bde:	a2 9f       	mul	r26, r18
    5be0:	80 0d       	add	r24, r0
    5be2:	91 1d       	adc	r25, r1
    5be4:	a3 9f       	mul	r26, r19
    5be6:	90 0d       	add	r25, r0
    5be8:	b2 9f       	mul	r27, r18
    5bea:	90 0d       	add	r25, r0
    5bec:	11 24       	eor	r1, r1
    5bee:	08 95       	ret

00005bf0 <__udivmodsi4>:
    5bf0:	a1 e2       	ldi	r26, 0x21	; 33
    5bf2:	1a 2e       	mov	r1, r26
    5bf4:	aa 1b       	sub	r26, r26
    5bf6:	bb 1b       	sub	r27, r27
    5bf8:	fd 01       	movw	r30, r26
    5bfa:	0d c0       	rjmp	.+26     	; 0x5c16 <__udivmodsi4_ep>

00005bfc <__udivmodsi4_loop>:
    5bfc:	aa 1f       	adc	r26, r26
    5bfe:	bb 1f       	adc	r27, r27
    5c00:	ee 1f       	adc	r30, r30
    5c02:	ff 1f       	adc	r31, r31
    5c04:	a2 17       	cp	r26, r18
    5c06:	b3 07       	cpc	r27, r19
    5c08:	e4 07       	cpc	r30, r20
    5c0a:	f5 07       	cpc	r31, r21
    5c0c:	20 f0       	brcs	.+8      	; 0x5c16 <__udivmodsi4_ep>
    5c0e:	a2 1b       	sub	r26, r18
    5c10:	b3 0b       	sbc	r27, r19
    5c12:	e4 0b       	sbc	r30, r20
    5c14:	f5 0b       	sbc	r31, r21

00005c16 <__udivmodsi4_ep>:
    5c16:	66 1f       	adc	r22, r22
    5c18:	77 1f       	adc	r23, r23
    5c1a:	88 1f       	adc	r24, r24
    5c1c:	99 1f       	adc	r25, r25
    5c1e:	1a 94       	dec	r1
    5c20:	69 f7       	brne	.-38     	; 0x5bfc <__udivmodsi4_loop>
    5c22:	60 95       	com	r22
    5c24:	70 95       	com	r23
    5c26:	80 95       	com	r24
    5c28:	90 95       	com	r25
    5c2a:	9b 01       	movw	r18, r22
    5c2c:	ac 01       	movw	r20, r24
    5c2e:	bd 01       	movw	r22, r26
    5c30:	cf 01       	movw	r24, r30
    5c32:	08 95       	ret

00005c34 <__tablejump2__>:
    5c34:	ee 0f       	add	r30, r30
    5c36:	ff 1f       	adc	r31, r31
    5c38:	00 24       	eor	r0, r0
    5c3a:	00 1c       	adc	r0, r0
    5c3c:	0b be       	out	0x3b, r0	; 59
    5c3e:	07 90       	elpm	r0, Z+
    5c40:	f6 91       	elpm	r31, Z
    5c42:	e0 2d       	mov	r30, r0
    5c44:	09 94       	ijmp

00005c46 <__muluhisi3>:
    5c46:	85 d1       	rcall	.+778    	; 0x5f52 <__umulhisi3>
    5c48:	a5 9f       	mul	r26, r21
    5c4a:	90 0d       	add	r25, r0
    5c4c:	b4 9f       	mul	r27, r20
    5c4e:	90 0d       	add	r25, r0
    5c50:	a4 9f       	mul	r26, r20
    5c52:	80 0d       	add	r24, r0
    5c54:	91 1d       	adc	r25, r1
    5c56:	11 24       	eor	r1, r1
    5c58:	08 95       	ret

00005c5a <__mulshisi3>:
    5c5a:	b7 ff       	sbrs	r27, 7
    5c5c:	f4 cf       	rjmp	.-24     	; 0x5c46 <__muluhisi3>

00005c5e <__mulohisi3>:
    5c5e:	f3 df       	rcall	.-26     	; 0x5c46 <__muluhisi3>
    5c60:	82 1b       	sub	r24, r18
    5c62:	93 0b       	sbc	r25, r19
    5c64:	08 95       	ret

00005c66 <__muldi3>:
    5c66:	df 93       	push	r29
    5c68:	cf 93       	push	r28
    5c6a:	1f 93       	push	r17
    5c6c:	0f 93       	push	r16
    5c6e:	9a 9d       	mul	r25, r10
    5c70:	f0 2d       	mov	r31, r0
    5c72:	21 9f       	mul	r18, r17
    5c74:	f0 0d       	add	r31, r0
    5c76:	8b 9d       	mul	r24, r11
    5c78:	f0 0d       	add	r31, r0
    5c7a:	8a 9d       	mul	r24, r10
    5c7c:	e0 2d       	mov	r30, r0
    5c7e:	f1 0d       	add	r31, r1
    5c80:	03 9f       	mul	r16, r19
    5c82:	f0 0d       	add	r31, r0
    5c84:	02 9f       	mul	r16, r18
    5c86:	e0 0d       	add	r30, r0
    5c88:	f1 1d       	adc	r31, r1
    5c8a:	4e 9d       	mul	r20, r14
    5c8c:	e0 0d       	add	r30, r0
    5c8e:	f1 1d       	adc	r31, r1
    5c90:	5e 9d       	mul	r21, r14
    5c92:	f0 0d       	add	r31, r0
    5c94:	4f 9d       	mul	r20, r15
    5c96:	f0 0d       	add	r31, r0
    5c98:	7f 93       	push	r23
    5c9a:	6f 93       	push	r22
    5c9c:	bf 92       	push	r11
    5c9e:	af 92       	push	r10
    5ca0:	5f 93       	push	r21
    5ca2:	4f 93       	push	r20
    5ca4:	d5 01       	movw	r26, r10
    5ca6:	55 d1       	rcall	.+682    	; 0x5f52 <__umulhisi3>
    5ca8:	8b 01       	movw	r16, r22
    5caa:	ac 01       	movw	r20, r24
    5cac:	d7 01       	movw	r26, r14
    5cae:	51 d1       	rcall	.+674    	; 0x5f52 <__umulhisi3>
    5cb0:	eb 01       	movw	r28, r22
    5cb2:	e8 0f       	add	r30, r24
    5cb4:	f9 1f       	adc	r31, r25
    5cb6:	d6 01       	movw	r26, r12
    5cb8:	1f d0       	rcall	.+62     	; 0x5cf8 <__muldi3_6>
    5cba:	2f 91       	pop	r18
    5cbc:	3f 91       	pop	r19
    5cbe:	d6 01       	movw	r26, r12
    5cc0:	48 d1       	rcall	.+656    	; 0x5f52 <__umulhisi3>
    5cc2:	c6 0f       	add	r28, r22
    5cc4:	d7 1f       	adc	r29, r23
    5cc6:	e8 1f       	adc	r30, r24
    5cc8:	f9 1f       	adc	r31, r25
    5cca:	af 91       	pop	r26
    5ccc:	bf 91       	pop	r27
    5cce:	14 d0       	rcall	.+40     	; 0x5cf8 <__muldi3_6>
    5cd0:	2f 91       	pop	r18
    5cd2:	3f 91       	pop	r19
    5cd4:	3e d1       	rcall	.+636    	; 0x5f52 <__umulhisi3>
    5cd6:	c6 0f       	add	r28, r22
    5cd8:	d7 1f       	adc	r29, r23
    5cda:	e8 1f       	adc	r30, r24
    5cdc:	f9 1f       	adc	r31, r25
    5cde:	d6 01       	movw	r26, r12
    5ce0:	38 d1       	rcall	.+624    	; 0x5f52 <__umulhisi3>
    5ce2:	e6 0f       	add	r30, r22
    5ce4:	f7 1f       	adc	r31, r23
    5ce6:	98 01       	movw	r18, r16
    5ce8:	be 01       	movw	r22, r28
    5cea:	cf 01       	movw	r24, r30
    5cec:	11 24       	eor	r1, r1
    5cee:	0f 91       	pop	r16
    5cf0:	1f 91       	pop	r17
    5cf2:	cf 91       	pop	r28
    5cf4:	df 91       	pop	r29
    5cf6:	08 95       	ret

00005cf8 <__muldi3_6>:
    5cf8:	2c d1       	rcall	.+600    	; 0x5f52 <__umulhisi3>
    5cfa:	46 0f       	add	r20, r22
    5cfc:	57 1f       	adc	r21, r23
    5cfe:	c8 1f       	adc	r28, r24
    5d00:	d9 1f       	adc	r29, r25
    5d02:	08 f4       	brcc	.+2      	; 0x5d06 <__muldi3_6+0xe>
    5d04:	31 96       	adiw	r30, 0x01	; 1
    5d06:	08 95       	ret

00005d08 <__moddi3>:
    5d08:	68 94       	set
    5d0a:	01 c0       	rjmp	.+2      	; 0x5d0e <__divdi3_moddi3>

00005d0c <__divdi3>:
    5d0c:	e8 94       	clt

00005d0e <__divdi3_moddi3>:
    5d0e:	f9 2f       	mov	r31, r25
    5d10:	f1 2b       	or	r31, r17
    5d12:	0a f0       	brmi	.+2      	; 0x5d16 <__divdi3_moddi3+0x8>
    5d14:	27 c0       	rjmp	.+78     	; 0x5d64 <__udivdi3_umoddi3>
    5d16:	a0 e0       	ldi	r26, 0x00	; 0
    5d18:	b0 e0       	ldi	r27, 0x00	; 0
    5d1a:	e0 e9       	ldi	r30, 0x90	; 144
    5d1c:	fe e2       	ldi	r31, 0x2E	; 46
    5d1e:	93 c0       	rjmp	.+294    	; 0x5e46 <__prologue_saves__+0xc>
    5d20:	09 2e       	mov	r0, r25
    5d22:	05 94       	asr	r0
    5d24:	1a f4       	brpl	.+6      	; 0x5d2c <__divdi3_moddi3+0x1e>
    5d26:	79 d0       	rcall	.+242    	; 0x5e1a <__negdi2>
    5d28:	11 23       	and	r17, r17
    5d2a:	92 f4       	brpl	.+36     	; 0x5d50 <__divdi3_moddi3+0x42>
    5d2c:	f0 e8       	ldi	r31, 0x80	; 128
    5d2e:	0f 26       	eor	r0, r31
    5d30:	ff ef       	ldi	r31, 0xFF	; 255
    5d32:	e0 94       	com	r14
    5d34:	f0 94       	com	r15
    5d36:	00 95       	com	r16
    5d38:	10 95       	com	r17
    5d3a:	b0 94       	com	r11
    5d3c:	c0 94       	com	r12
    5d3e:	d0 94       	com	r13
    5d40:	a1 94       	neg	r10
    5d42:	bf 0a       	sbc	r11, r31
    5d44:	cf 0a       	sbc	r12, r31
    5d46:	df 0a       	sbc	r13, r31
    5d48:	ef 0a       	sbc	r14, r31
    5d4a:	ff 0a       	sbc	r15, r31
    5d4c:	0f 0b       	sbc	r16, r31
    5d4e:	1f 0b       	sbc	r17, r31
    5d50:	13 d0       	rcall	.+38     	; 0x5d78 <__udivmod64>
    5d52:	07 fc       	sbrc	r0, 7
    5d54:	62 d0       	rcall	.+196    	; 0x5e1a <__negdi2>
    5d56:	cd b7       	in	r28, 0x3d	; 61
    5d58:	de b7       	in	r29, 0x3e	; 62
    5d5a:	ec e0       	ldi	r30, 0x0C	; 12
    5d5c:	90 c0       	rjmp	.+288    	; 0x5e7e <__epilogue_restores__+0xc>

00005d5e <__umoddi3>:
    5d5e:	68 94       	set
    5d60:	01 c0       	rjmp	.+2      	; 0x5d64 <__udivdi3_umoddi3>

00005d62 <__udivdi3>:
    5d62:	e8 94       	clt

00005d64 <__udivdi3_umoddi3>:
    5d64:	8f 92       	push	r8
    5d66:	9f 92       	push	r9
    5d68:	cf 93       	push	r28
    5d6a:	df 93       	push	r29
    5d6c:	05 d0       	rcall	.+10     	; 0x5d78 <__udivmod64>
    5d6e:	df 91       	pop	r29
    5d70:	cf 91       	pop	r28
    5d72:	9f 90       	pop	r9
    5d74:	8f 90       	pop	r8
    5d76:	08 95       	ret

00005d78 <__udivmod64>:
    5d78:	88 24       	eor	r8, r8
    5d7a:	99 24       	eor	r9, r9
    5d7c:	f4 01       	movw	r30, r8
    5d7e:	e4 01       	movw	r28, r8
    5d80:	b0 e4       	ldi	r27, 0x40	; 64
    5d82:	9f 93       	push	r25
    5d84:	aa 27       	eor	r26, r26
    5d86:	9a 15       	cp	r25, r10
    5d88:	8b 04       	cpc	r8, r11
    5d8a:	9c 04       	cpc	r9, r12
    5d8c:	ed 05       	cpc	r30, r13
    5d8e:	fe 05       	cpc	r31, r14
    5d90:	cf 05       	cpc	r28, r15
    5d92:	d0 07       	cpc	r29, r16
    5d94:	a1 07       	cpc	r26, r17
    5d96:	98 f4       	brcc	.+38     	; 0x5dbe <__udivmod64+0x46>
    5d98:	ad 2f       	mov	r26, r29
    5d9a:	dc 2f       	mov	r29, r28
    5d9c:	cf 2f       	mov	r28, r31
    5d9e:	fe 2f       	mov	r31, r30
    5da0:	e9 2d       	mov	r30, r9
    5da2:	98 2c       	mov	r9, r8
    5da4:	89 2e       	mov	r8, r25
    5da6:	98 2f       	mov	r25, r24
    5da8:	87 2f       	mov	r24, r23
    5daa:	76 2f       	mov	r23, r22
    5dac:	65 2f       	mov	r22, r21
    5dae:	54 2f       	mov	r21, r20
    5db0:	43 2f       	mov	r20, r19
    5db2:	32 2f       	mov	r19, r18
    5db4:	22 27       	eor	r18, r18
    5db6:	b8 50       	subi	r27, 0x08	; 8
    5db8:	31 f7       	brne	.-52     	; 0x5d86 <__udivmod64+0xe>
    5dba:	bf 91       	pop	r27
    5dbc:	27 c0       	rjmp	.+78     	; 0x5e0c <__udivmod64+0x94>
    5dbe:	1b 2e       	mov	r1, r27
    5dc0:	bf 91       	pop	r27
    5dc2:	bb 27       	eor	r27, r27
    5dc4:	22 0f       	add	r18, r18
    5dc6:	33 1f       	adc	r19, r19
    5dc8:	44 1f       	adc	r20, r20
    5dca:	55 1f       	adc	r21, r21
    5dcc:	66 1f       	adc	r22, r22
    5dce:	77 1f       	adc	r23, r23
    5dd0:	88 1f       	adc	r24, r24
    5dd2:	99 1f       	adc	r25, r25
    5dd4:	88 1c       	adc	r8, r8
    5dd6:	99 1c       	adc	r9, r9
    5dd8:	ee 1f       	adc	r30, r30
    5dda:	ff 1f       	adc	r31, r31
    5ddc:	cc 1f       	adc	r28, r28
    5dde:	dd 1f       	adc	r29, r29
    5de0:	aa 1f       	adc	r26, r26
    5de2:	bb 1f       	adc	r27, r27
    5de4:	8a 14       	cp	r8, r10
    5de6:	9b 04       	cpc	r9, r11
    5de8:	ec 05       	cpc	r30, r12
    5dea:	fd 05       	cpc	r31, r13
    5dec:	ce 05       	cpc	r28, r14
    5dee:	df 05       	cpc	r29, r15
    5df0:	a0 07       	cpc	r26, r16
    5df2:	b1 07       	cpc	r27, r17
    5df4:	48 f0       	brcs	.+18     	; 0x5e08 <__udivmod64+0x90>
    5df6:	8a 18       	sub	r8, r10
    5df8:	9b 08       	sbc	r9, r11
    5dfa:	ec 09       	sbc	r30, r12
    5dfc:	fd 09       	sbc	r31, r13
    5dfe:	ce 09       	sbc	r28, r14
    5e00:	df 09       	sbc	r29, r15
    5e02:	a0 0b       	sbc	r26, r16
    5e04:	b1 0b       	sbc	r27, r17
    5e06:	21 60       	ori	r18, 0x01	; 1
    5e08:	1a 94       	dec	r1
    5e0a:	e1 f6       	brne	.-72     	; 0x5dc4 <__udivmod64+0x4c>
    5e0c:	2e f4       	brtc	.+10     	; 0x5e18 <__udivmod64+0xa0>
    5e0e:	94 01       	movw	r18, r8
    5e10:	af 01       	movw	r20, r30
    5e12:	be 01       	movw	r22, r28
    5e14:	cd 01       	movw	r24, r26
    5e16:	00 0c       	add	r0, r0
    5e18:	08 95       	ret

00005e1a <__negdi2>:
    5e1a:	60 95       	com	r22
    5e1c:	70 95       	com	r23
    5e1e:	80 95       	com	r24
    5e20:	90 95       	com	r25
    5e22:	30 95       	com	r19
    5e24:	40 95       	com	r20
    5e26:	50 95       	com	r21
    5e28:	21 95       	neg	r18
    5e2a:	3f 4f       	sbci	r19, 0xFF	; 255
    5e2c:	4f 4f       	sbci	r20, 0xFF	; 255
    5e2e:	5f 4f       	sbci	r21, 0xFF	; 255
    5e30:	6f 4f       	sbci	r22, 0xFF	; 255
    5e32:	7f 4f       	sbci	r23, 0xFF	; 255
    5e34:	8f 4f       	sbci	r24, 0xFF	; 255
    5e36:	9f 4f       	sbci	r25, 0xFF	; 255
    5e38:	08 95       	ret

00005e3a <__prologue_saves__>:
    5e3a:	2f 92       	push	r2
    5e3c:	3f 92       	push	r3
    5e3e:	4f 92       	push	r4
    5e40:	5f 92       	push	r5
    5e42:	6f 92       	push	r6
    5e44:	7f 92       	push	r7
    5e46:	8f 92       	push	r8
    5e48:	9f 92       	push	r9
    5e4a:	af 92       	push	r10
    5e4c:	bf 92       	push	r11
    5e4e:	cf 92       	push	r12
    5e50:	df 92       	push	r13
    5e52:	ef 92       	push	r14
    5e54:	ff 92       	push	r15
    5e56:	0f 93       	push	r16
    5e58:	1f 93       	push	r17
    5e5a:	cf 93       	push	r28
    5e5c:	df 93       	push	r29
    5e5e:	cd b7       	in	r28, 0x3d	; 61
    5e60:	de b7       	in	r29, 0x3e	; 62
    5e62:	ca 1b       	sub	r28, r26
    5e64:	db 0b       	sbc	r29, r27
    5e66:	0f b6       	in	r0, 0x3f	; 63
    5e68:	f8 94       	cli
    5e6a:	de bf       	out	0x3e, r29	; 62
    5e6c:	0f be       	out	0x3f, r0	; 63
    5e6e:	cd bf       	out	0x3d, r28	; 61
    5e70:	09 94       	ijmp

00005e72 <__epilogue_restores__>:
    5e72:	2a 88       	ldd	r2, Y+18	; 0x12
    5e74:	39 88       	ldd	r3, Y+17	; 0x11
    5e76:	48 88       	ldd	r4, Y+16	; 0x10
    5e78:	5f 84       	ldd	r5, Y+15	; 0x0f
    5e7a:	6e 84       	ldd	r6, Y+14	; 0x0e
    5e7c:	7d 84       	ldd	r7, Y+13	; 0x0d
    5e7e:	8c 84       	ldd	r8, Y+12	; 0x0c
    5e80:	9b 84       	ldd	r9, Y+11	; 0x0b
    5e82:	aa 84       	ldd	r10, Y+10	; 0x0a
    5e84:	b9 84       	ldd	r11, Y+9	; 0x09
    5e86:	c8 84       	ldd	r12, Y+8	; 0x08
    5e88:	df 80       	ldd	r13, Y+7	; 0x07
    5e8a:	ee 80       	ldd	r14, Y+6	; 0x06
    5e8c:	fd 80       	ldd	r15, Y+5	; 0x05
    5e8e:	0c 81       	ldd	r16, Y+4	; 0x04
    5e90:	1b 81       	ldd	r17, Y+3	; 0x03
    5e92:	aa 81       	ldd	r26, Y+2	; 0x02
    5e94:	b9 81       	ldd	r27, Y+1	; 0x01
    5e96:	ce 0f       	add	r28, r30
    5e98:	d1 1d       	adc	r29, r1
    5e9a:	0f b6       	in	r0, 0x3f	; 63
    5e9c:	f8 94       	cli
    5e9e:	de bf       	out	0x3e, r29	; 62
    5ea0:	0f be       	out	0x3f, r0	; 63
    5ea2:	cd bf       	out	0x3d, r28	; 61
    5ea4:	ed 01       	movw	r28, r26
    5ea6:	08 95       	ret

00005ea8 <__ashldi3>:
    5ea8:	0f 93       	push	r16
    5eaa:	08 30       	cpi	r16, 0x08	; 8
    5eac:	90 f0       	brcs	.+36     	; 0x5ed2 <__ashldi3+0x2a>
    5eae:	98 2f       	mov	r25, r24
    5eb0:	87 2f       	mov	r24, r23
    5eb2:	76 2f       	mov	r23, r22
    5eb4:	65 2f       	mov	r22, r21
    5eb6:	54 2f       	mov	r21, r20
    5eb8:	43 2f       	mov	r20, r19
    5eba:	32 2f       	mov	r19, r18
    5ebc:	22 27       	eor	r18, r18
    5ebe:	08 50       	subi	r16, 0x08	; 8
    5ec0:	f4 cf       	rjmp	.-24     	; 0x5eaa <__ashldi3+0x2>
    5ec2:	22 0f       	add	r18, r18
    5ec4:	33 1f       	adc	r19, r19
    5ec6:	44 1f       	adc	r20, r20
    5ec8:	55 1f       	adc	r21, r21
    5eca:	66 1f       	adc	r22, r22
    5ecc:	77 1f       	adc	r23, r23
    5ece:	88 1f       	adc	r24, r24
    5ed0:	99 1f       	adc	r25, r25
    5ed2:	0a 95       	dec	r16
    5ed4:	b2 f7       	brpl	.-20     	; 0x5ec2 <__ashldi3+0x1a>
    5ed6:	0f 91       	pop	r16
    5ed8:	08 95       	ret

00005eda <__ashrdi3>:
    5eda:	97 fb       	bst	r25, 7
    5edc:	10 f8       	bld	r1, 0

00005ede <__lshrdi3>:
    5ede:	16 94       	lsr	r1
    5ee0:	00 08       	sbc	r0, r0
    5ee2:	0f 93       	push	r16
    5ee4:	08 30       	cpi	r16, 0x08	; 8
    5ee6:	98 f0       	brcs	.+38     	; 0x5f0e <__lshrdi3+0x30>
    5ee8:	08 50       	subi	r16, 0x08	; 8
    5eea:	23 2f       	mov	r18, r19
    5eec:	34 2f       	mov	r19, r20
    5eee:	45 2f       	mov	r20, r21
    5ef0:	56 2f       	mov	r21, r22
    5ef2:	67 2f       	mov	r22, r23
    5ef4:	78 2f       	mov	r23, r24
    5ef6:	89 2f       	mov	r24, r25
    5ef8:	90 2d       	mov	r25, r0
    5efa:	f4 cf       	rjmp	.-24     	; 0x5ee4 <__lshrdi3+0x6>
    5efc:	05 94       	asr	r0
    5efe:	97 95       	ror	r25
    5f00:	87 95       	ror	r24
    5f02:	77 95       	ror	r23
    5f04:	67 95       	ror	r22
    5f06:	57 95       	ror	r21
    5f08:	47 95       	ror	r20
    5f0a:	37 95       	ror	r19
    5f0c:	27 95       	ror	r18
    5f0e:	0a 95       	dec	r16
    5f10:	aa f7       	brpl	.-22     	; 0x5efc <__lshrdi3+0x1e>
    5f12:	0f 91       	pop	r16
    5f14:	08 95       	ret

00005f16 <__adddi3>:
    5f16:	2a 0d       	add	r18, r10
    5f18:	3b 1d       	adc	r19, r11
    5f1a:	4c 1d       	adc	r20, r12
    5f1c:	5d 1d       	adc	r21, r13
    5f1e:	6e 1d       	adc	r22, r14
    5f20:	7f 1d       	adc	r23, r15
    5f22:	80 1f       	adc	r24, r16
    5f24:	91 1f       	adc	r25, r17
    5f26:	08 95       	ret

00005f28 <__subdi3>:
    5f28:	2a 19       	sub	r18, r10
    5f2a:	3b 09       	sbc	r19, r11
    5f2c:	4c 09       	sbc	r20, r12
    5f2e:	5d 09       	sbc	r21, r13
    5f30:	6e 09       	sbc	r22, r14
    5f32:	7f 09       	sbc	r23, r15
    5f34:	80 0b       	sbc	r24, r16
    5f36:	91 0b       	sbc	r25, r17
    5f38:	08 95       	ret

00005f3a <__cmpdi2_s8>:
    5f3a:	00 24       	eor	r0, r0
    5f3c:	a7 fd       	sbrc	r26, 7
    5f3e:	00 94       	com	r0
    5f40:	2a 17       	cp	r18, r26
    5f42:	30 05       	cpc	r19, r0
    5f44:	40 05       	cpc	r20, r0
    5f46:	50 05       	cpc	r21, r0
    5f48:	60 05       	cpc	r22, r0
    5f4a:	70 05       	cpc	r23, r0
    5f4c:	80 05       	cpc	r24, r0
    5f4e:	90 05       	cpc	r25, r0
    5f50:	08 95       	ret

00005f52 <__umulhisi3>:
    5f52:	a2 9f       	mul	r26, r18
    5f54:	b0 01       	movw	r22, r0
    5f56:	b3 9f       	mul	r27, r19
    5f58:	c0 01       	movw	r24, r0
    5f5a:	a3 9f       	mul	r26, r19
    5f5c:	70 0d       	add	r23, r0
    5f5e:	81 1d       	adc	r24, r1
    5f60:	11 24       	eor	r1, r1
    5f62:	91 1d       	adc	r25, r1
    5f64:	b2 9f       	mul	r27, r18
    5f66:	70 0d       	add	r23, r0
    5f68:	81 1d       	adc	r24, r1
    5f6a:	11 24       	eor	r1, r1
    5f6c:	91 1d       	adc	r25, r1
    5f6e:	08 95       	ret

00005f70 <dtostrf>:
    5f70:	ef 92       	push	r14
    5f72:	0f 93       	push	r16
    5f74:	1f 93       	push	r17
    5f76:	cf 93       	push	r28
    5f78:	df 93       	push	r29
    5f7a:	e8 01       	movw	r28, r16
    5f7c:	47 fd       	sbrc	r20, 7
    5f7e:	02 c0       	rjmp	.+4      	; 0x5f84 <dtostrf+0x14>
    5f80:	34 e0       	ldi	r19, 0x04	; 4
    5f82:	01 c0       	rjmp	.+2      	; 0x5f86 <dtostrf+0x16>
    5f84:	34 e1       	ldi	r19, 0x14	; 20
    5f86:	04 2e       	mov	r0, r20
    5f88:	00 0c       	add	r0, r0
    5f8a:	55 0b       	sbc	r21, r21
    5f8c:	57 ff       	sbrs	r21, 7
    5f8e:	03 c0       	rjmp	.+6      	; 0x5f96 <dtostrf+0x26>
    5f90:	51 95       	neg	r21
    5f92:	41 95       	neg	r20
    5f94:	51 09       	sbc	r21, r1
    5f96:	e3 2e       	mov	r14, r19
    5f98:	02 2f       	mov	r16, r18
    5f9a:	24 2f       	mov	r18, r20
    5f9c:	ae 01       	movw	r20, r28
    5f9e:	d9 d7       	rcall	.+4018   	; 0x6f52 <dtoa_prf>
    5fa0:	ce 01       	movw	r24, r28
    5fa2:	df 91       	pop	r29
    5fa4:	cf 91       	pop	r28
    5fa6:	1f 91       	pop	r17
    5fa8:	0f 91       	pop	r16
    5faa:	ef 90       	pop	r14
    5fac:	08 95       	ret

00005fae <strtol>:
    5fae:	3f 92       	push	r3
    5fb0:	4f 92       	push	r4
    5fb2:	5f 92       	push	r5
    5fb4:	6f 92       	push	r6
    5fb6:	7f 92       	push	r7
    5fb8:	8f 92       	push	r8
    5fba:	9f 92       	push	r9
    5fbc:	af 92       	push	r10
    5fbe:	bf 92       	push	r11
    5fc0:	cf 92       	push	r12
    5fc2:	df 92       	push	r13
    5fc4:	ef 92       	push	r14
    5fc6:	ff 92       	push	r15
    5fc8:	0f 93       	push	r16
    5fca:	1f 93       	push	r17
    5fcc:	cf 93       	push	r28
    5fce:	df 93       	push	r29
    5fd0:	5c 01       	movw	r10, r24
    5fd2:	6b 01       	movw	r12, r22
    5fd4:	7a 01       	movw	r14, r20
    5fd6:	61 15       	cp	r22, r1
    5fd8:	71 05       	cpc	r23, r1
    5fda:	19 f0       	breq	.+6      	; 0x5fe2 <strtol+0x34>
    5fdc:	fb 01       	movw	r30, r22
    5fde:	91 83       	std	Z+1, r25	; 0x01
    5fe0:	80 83       	st	Z, r24
    5fe2:	e1 14       	cp	r14, r1
    5fe4:	f1 04       	cpc	r15, r1
    5fe6:	29 f0       	breq	.+10     	; 0x5ff2 <strtol+0x44>
    5fe8:	c7 01       	movw	r24, r14
    5fea:	02 97       	sbiw	r24, 0x02	; 2
    5fec:	83 97       	sbiw	r24, 0x23	; 35
    5fee:	08 f0       	brcs	.+2      	; 0x5ff2 <strtol+0x44>
    5ff0:	e2 c0       	rjmp	.+452    	; 0x61b6 <strtol+0x208>
    5ff2:	e5 01       	movw	r28, r10
    5ff4:	21 96       	adiw	r28, 0x01	; 1
    5ff6:	f5 01       	movw	r30, r10
    5ff8:	10 81       	ld	r17, Z
    5ffa:	81 2f       	mov	r24, r17
    5ffc:	90 e0       	ldi	r25, 0x00	; 0
    5ffe:	22 d1       	rcall	.+580    	; 0x6244 <isspace>
    6000:	89 2b       	or	r24, r25
    6002:	11 f0       	breq	.+4      	; 0x6008 <strtol+0x5a>
    6004:	5e 01       	movw	r10, r28
    6006:	f5 cf       	rjmp	.-22     	; 0x5ff2 <strtol+0x44>
    6008:	1d 32       	cpi	r17, 0x2D	; 45
    600a:	29 f4       	brne	.+10     	; 0x6016 <strtol+0x68>
    600c:	21 96       	adiw	r28, 0x01	; 1
    600e:	f5 01       	movw	r30, r10
    6010:	11 81       	ldd	r17, Z+1	; 0x01
    6012:	01 e0       	ldi	r16, 0x01	; 1
    6014:	07 c0       	rjmp	.+14     	; 0x6024 <strtol+0x76>
    6016:	1b 32       	cpi	r17, 0x2B	; 43
    6018:	21 f4       	brne	.+8      	; 0x6022 <strtol+0x74>
    601a:	e5 01       	movw	r28, r10
    601c:	22 96       	adiw	r28, 0x02	; 2
    601e:	f5 01       	movw	r30, r10
    6020:	11 81       	ldd	r17, Z+1	; 0x01
    6022:	00 e0       	ldi	r16, 0x00	; 0
    6024:	e1 14       	cp	r14, r1
    6026:	f1 04       	cpc	r15, r1
    6028:	09 f1       	breq	.+66     	; 0x606c <strtol+0xbe>
    602a:	f0 e1       	ldi	r31, 0x10	; 16
    602c:	ef 16       	cp	r14, r31
    602e:	f1 04       	cpc	r15, r1
    6030:	29 f4       	brne	.+10     	; 0x603c <strtol+0x8e>
    6032:	3e c0       	rjmp	.+124    	; 0x60b0 <strtol+0x102>
    6034:	10 e3       	ldi	r17, 0x30	; 48
    6036:	e1 14       	cp	r14, r1
    6038:	f1 04       	cpc	r15, r1
    603a:	21 f1       	breq	.+72     	; 0x6084 <strtol+0xd6>
    603c:	28 e0       	ldi	r18, 0x08	; 8
    603e:	e2 16       	cp	r14, r18
    6040:	f1 04       	cpc	r15, r1
    6042:	01 f1       	breq	.+64     	; 0x6084 <strtol+0xd6>
    6044:	54 f4       	brge	.+20     	; 0x605a <strtol+0xac>
    6046:	e2 e0       	ldi	r30, 0x02	; 2
    6048:	ee 16       	cp	r14, r30
    604a:	f1 04       	cpc	r15, r1
    604c:	21 f5       	brne	.+72     	; 0x6096 <strtol+0xe8>
    604e:	81 2c       	mov	r8, r1
    6050:	91 2c       	mov	r9, r1
    6052:	a1 2c       	mov	r10, r1
    6054:	b0 e4       	ldi	r27, 0x40	; 64
    6056:	bb 2e       	mov	r11, r27
    6058:	3d c0       	rjmp	.+122    	; 0x60d4 <strtol+0x126>
    605a:	fa e0       	ldi	r31, 0x0A	; 10
    605c:	ef 16       	cp	r14, r31
    605e:	f1 04       	cpc	r15, r1
    6060:	39 f0       	breq	.+14     	; 0x6070 <strtol+0xc2>
    6062:	20 e1       	ldi	r18, 0x10	; 16
    6064:	e2 16       	cp	r14, r18
    6066:	f1 04       	cpc	r15, r1
    6068:	b1 f4       	brne	.+44     	; 0x6096 <strtol+0xe8>
    606a:	2f c0       	rjmp	.+94     	; 0x60ca <strtol+0x11c>
    606c:	10 33       	cpi	r17, 0x30	; 48
    606e:	11 f1       	breq	.+68     	; 0x60b4 <strtol+0x106>
    6070:	fa e0       	ldi	r31, 0x0A	; 10
    6072:	ef 2e       	mov	r14, r31
    6074:	f1 2c       	mov	r15, r1
    6076:	ac ec       	ldi	r26, 0xCC	; 204
    6078:	8a 2e       	mov	r8, r26
    607a:	98 2c       	mov	r9, r8
    607c:	a8 2c       	mov	r10, r8
    607e:	ac e0       	ldi	r26, 0x0C	; 12
    6080:	ba 2e       	mov	r11, r26
    6082:	28 c0       	rjmp	.+80     	; 0x60d4 <strtol+0x126>
    6084:	78 e0       	ldi	r23, 0x08	; 8
    6086:	e7 2e       	mov	r14, r23
    6088:	f1 2c       	mov	r15, r1
    608a:	81 2c       	mov	r8, r1
    608c:	91 2c       	mov	r9, r1
    608e:	a1 2c       	mov	r10, r1
    6090:	e0 e1       	ldi	r30, 0x10	; 16
    6092:	be 2e       	mov	r11, r30
    6094:	1f c0       	rjmp	.+62     	; 0x60d4 <strtol+0x126>
    6096:	60 e0       	ldi	r22, 0x00	; 0
    6098:	70 e0       	ldi	r23, 0x00	; 0
    609a:	80 e0       	ldi	r24, 0x00	; 0
    609c:	90 e8       	ldi	r25, 0x80	; 128
    609e:	97 01       	movw	r18, r14
    60a0:	0f 2c       	mov	r0, r15
    60a2:	00 0c       	add	r0, r0
    60a4:	44 0b       	sbc	r20, r20
    60a6:	55 0b       	sbc	r21, r21
    60a8:	a3 dd       	rcall	.-1210   	; 0x5bf0 <__udivmodsi4>
    60aa:	49 01       	movw	r8, r18
    60ac:	5a 01       	movw	r10, r20
    60ae:	12 c0       	rjmp	.+36     	; 0x60d4 <strtol+0x126>
    60b0:	10 33       	cpi	r17, 0x30	; 48
    60b2:	59 f4       	brne	.+22     	; 0x60ca <strtol+0x11c>
    60b4:	88 81       	ld	r24, Y
    60b6:	8f 7d       	andi	r24, 0xDF	; 223
    60b8:	88 35       	cpi	r24, 0x58	; 88
    60ba:	09 f0       	breq	.+2      	; 0x60be <strtol+0x110>
    60bc:	bb cf       	rjmp	.-138    	; 0x6034 <strtol+0x86>
    60be:	19 81       	ldd	r17, Y+1	; 0x01
    60c0:	22 96       	adiw	r28, 0x02	; 2
    60c2:	02 60       	ori	r16, 0x02	; 2
    60c4:	80 e1       	ldi	r24, 0x10	; 16
    60c6:	e8 2e       	mov	r14, r24
    60c8:	f1 2c       	mov	r15, r1
    60ca:	81 2c       	mov	r8, r1
    60cc:	91 2c       	mov	r9, r1
    60ce:	a1 2c       	mov	r10, r1
    60d0:	68 e0       	ldi	r22, 0x08	; 8
    60d2:	b6 2e       	mov	r11, r22
    60d4:	40 e0       	ldi	r20, 0x00	; 0
    60d6:	60 e0       	ldi	r22, 0x00	; 0
    60d8:	70 e0       	ldi	r23, 0x00	; 0
    60da:	cb 01       	movw	r24, r22
    60dc:	27 01       	movw	r4, r14
    60de:	0f 2c       	mov	r0, r15
    60e0:	00 0c       	add	r0, r0
    60e2:	66 08       	sbc	r6, r6
    60e4:	77 08       	sbc	r7, r7
    60e6:	fe 01       	movw	r30, r28
    60e8:	50 ed       	ldi	r21, 0xD0	; 208
    60ea:	35 2e       	mov	r3, r21
    60ec:	31 0e       	add	r3, r17
    60ee:	29 e0       	ldi	r18, 0x09	; 9
    60f0:	23 15       	cp	r18, r3
    60f2:	70 f4       	brcc	.+28     	; 0x6110 <strtol+0x162>
    60f4:	2f eb       	ldi	r18, 0xBF	; 191
    60f6:	21 0f       	add	r18, r17
    60f8:	2a 31       	cpi	r18, 0x1A	; 26
    60fa:	18 f4       	brcc	.+6      	; 0x6102 <strtol+0x154>
    60fc:	39 ec       	ldi	r19, 0xC9	; 201
    60fe:	33 2e       	mov	r3, r19
    6100:	06 c0       	rjmp	.+12     	; 0x610e <strtol+0x160>
    6102:	2f e9       	ldi	r18, 0x9F	; 159
    6104:	21 0f       	add	r18, r17
    6106:	2a 31       	cpi	r18, 0x1A	; 26
    6108:	10 f5       	brcc	.+68     	; 0x614e <strtol+0x1a0>
    610a:	29 ea       	ldi	r18, 0xA9	; 169
    610c:	32 2e       	mov	r3, r18
    610e:	31 0e       	add	r3, r17
    6110:	23 2d       	mov	r18, r3
    6112:	30 e0       	ldi	r19, 0x00	; 0
    6114:	2e 15       	cp	r18, r14
    6116:	3f 05       	cpc	r19, r15
    6118:	d4 f4       	brge	.+52     	; 0x614e <strtol+0x1a0>
    611a:	47 fd       	sbrc	r20, 7
    611c:	15 c0       	rjmp	.+42     	; 0x6148 <strtol+0x19a>
    611e:	86 16       	cp	r8, r22
    6120:	97 06       	cpc	r9, r23
    6122:	a8 06       	cpc	r10, r24
    6124:	b9 06       	cpc	r11, r25
    6126:	68 f0       	brcs	.+26     	; 0x6142 <strtol+0x194>
    6128:	a3 01       	movw	r20, r6
    612a:	92 01       	movw	r18, r4
    612c:	52 dd       	rcall	.-1372   	; 0x5bd2 <__mulsi3>
    612e:	63 0d       	add	r22, r3
    6130:	71 1d       	adc	r23, r1
    6132:	81 1d       	adc	r24, r1
    6134:	91 1d       	adc	r25, r1
    6136:	61 30       	cpi	r22, 0x01	; 1
    6138:	71 05       	cpc	r23, r1
    613a:	81 05       	cpc	r24, r1
    613c:	20 e8       	ldi	r18, 0x80	; 128
    613e:	92 07       	cpc	r25, r18
    6140:	10 f0       	brcs	.+4      	; 0x6146 <strtol+0x198>
    6142:	4f ef       	ldi	r20, 0xFF	; 255
    6144:	01 c0       	rjmp	.+2      	; 0x6148 <strtol+0x19a>
    6146:	41 e0       	ldi	r20, 0x01	; 1
    6148:	21 96       	adiw	r28, 0x01	; 1
    614a:	10 81       	ld	r17, Z
    614c:	cc cf       	rjmp	.-104    	; 0x60e6 <strtol+0x138>
    614e:	20 2f       	mov	r18, r16
    6150:	21 70       	andi	r18, 0x01	; 1
    6152:	c1 14       	cp	r12, r1
    6154:	d1 04       	cpc	r13, r1
    6156:	71 f0       	breq	.+28     	; 0x6174 <strtol+0x1c6>
    6158:	44 23       	and	r20, r20
    615a:	29 f0       	breq	.+10     	; 0x6166 <strtol+0x1b8>
    615c:	21 97       	sbiw	r28, 0x01	; 1
    615e:	f6 01       	movw	r30, r12
    6160:	d1 83       	std	Z+1, r29	; 0x01
    6162:	c0 83       	st	Z, r28
    6164:	07 c0       	rjmp	.+14     	; 0x6174 <strtol+0x1c6>
    6166:	01 ff       	sbrs	r16, 1
    6168:	19 c0       	rjmp	.+50     	; 0x619c <strtol+0x1ee>
    616a:	22 97       	sbiw	r28, 0x02	; 2
    616c:	f6 01       	movw	r30, r12
    616e:	d1 83       	std	Z+1, r29	; 0x01
    6170:	c0 83       	st	Z, r28
    6172:	14 c0       	rjmp	.+40     	; 0x619c <strtol+0x1ee>
    6174:	47 ff       	sbrs	r20, 7
    6176:	12 c0       	rjmp	.+36     	; 0x619c <strtol+0x1ee>
    6178:	22 23       	and	r18, r18
    617a:	29 f0       	breq	.+10     	; 0x6186 <strtol+0x1d8>
    617c:	60 e0       	ldi	r22, 0x00	; 0
    617e:	70 e0       	ldi	r23, 0x00	; 0
    6180:	80 e0       	ldi	r24, 0x00	; 0
    6182:	90 e8       	ldi	r25, 0x80	; 128
    6184:	04 c0       	rjmp	.+8      	; 0x618e <strtol+0x1e0>
    6186:	6f ef       	ldi	r22, 0xFF	; 255
    6188:	7f ef       	ldi	r23, 0xFF	; 255
    618a:	8f ef       	ldi	r24, 0xFF	; 255
    618c:	9f e7       	ldi	r25, 0x7F	; 127
    618e:	22 e2       	ldi	r18, 0x22	; 34
    6190:	30 e0       	ldi	r19, 0x00	; 0
    6192:	30 93 b7 06 	sts	0x06B7, r19	; 0x8006b7 <errno+0x1>
    6196:	20 93 b6 06 	sts	0x06B6, r18	; 0x8006b6 <errno>
    619a:	09 c0       	rjmp	.+18     	; 0x61ae <strtol+0x200>
    619c:	22 23       	and	r18, r18
    619e:	81 f0       	breq	.+32     	; 0x61c0 <strtol+0x212>
    61a0:	90 95       	com	r25
    61a2:	80 95       	com	r24
    61a4:	70 95       	com	r23
    61a6:	61 95       	neg	r22
    61a8:	7f 4f       	sbci	r23, 0xFF	; 255
    61aa:	8f 4f       	sbci	r24, 0xFF	; 255
    61ac:	9f 4f       	sbci	r25, 0xFF	; 255
    61ae:	46 2f       	mov	r20, r22
    61b0:	37 2f       	mov	r19, r23
    61b2:	28 2f       	mov	r18, r24
    61b4:	12 c0       	rjmp	.+36     	; 0x61da <strtol+0x22c>
    61b6:	40 e0       	ldi	r20, 0x00	; 0
    61b8:	30 e0       	ldi	r19, 0x00	; 0
    61ba:	20 e0       	ldi	r18, 0x00	; 0
    61bc:	90 e0       	ldi	r25, 0x00	; 0
    61be:	0d c0       	rjmp	.+26     	; 0x61da <strtol+0x22c>
    61c0:	97 ff       	sbrs	r25, 7
    61c2:	f5 cf       	rjmp	.-22     	; 0x61ae <strtol+0x200>
    61c4:	82 e2       	ldi	r24, 0x22	; 34
    61c6:	90 e0       	ldi	r25, 0x00	; 0
    61c8:	90 93 b7 06 	sts	0x06B7, r25	; 0x8006b7 <errno+0x1>
    61cc:	80 93 b6 06 	sts	0x06B6, r24	; 0x8006b6 <errno>
    61d0:	6f ef       	ldi	r22, 0xFF	; 255
    61d2:	7f ef       	ldi	r23, 0xFF	; 255
    61d4:	8f ef       	ldi	r24, 0xFF	; 255
    61d6:	9f e7       	ldi	r25, 0x7F	; 127
    61d8:	ea cf       	rjmp	.-44     	; 0x61ae <strtol+0x200>
    61da:	64 2f       	mov	r22, r20
    61dc:	73 2f       	mov	r23, r19
    61de:	82 2f       	mov	r24, r18
    61e0:	df 91       	pop	r29
    61e2:	cf 91       	pop	r28
    61e4:	1f 91       	pop	r17
    61e6:	0f 91       	pop	r16
    61e8:	ff 90       	pop	r15
    61ea:	ef 90       	pop	r14
    61ec:	df 90       	pop	r13
    61ee:	cf 90       	pop	r12
    61f0:	bf 90       	pop	r11
    61f2:	af 90       	pop	r10
    61f4:	9f 90       	pop	r9
    61f6:	8f 90       	pop	r8
    61f8:	7f 90       	pop	r7
    61fa:	6f 90       	pop	r6
    61fc:	5f 90       	pop	r5
    61fe:	4f 90       	pop	r4
    6200:	3f 90       	pop	r3
    6202:	08 95       	ret

00006204 <atoi>:
    6204:	fc 01       	movw	r30, r24
    6206:	88 27       	eor	r24, r24
    6208:	99 27       	eor	r25, r25
    620a:	e8 94       	clt
    620c:	21 91       	ld	r18, Z+
    620e:	20 32       	cpi	r18, 0x20	; 32
    6210:	e9 f3       	breq	.-6      	; 0x620c <atoi+0x8>
    6212:	29 30       	cpi	r18, 0x09	; 9
    6214:	10 f0       	brcs	.+4      	; 0x621a <atoi+0x16>
    6216:	2e 30       	cpi	r18, 0x0E	; 14
    6218:	c8 f3       	brcs	.-14     	; 0x620c <atoi+0x8>
    621a:	2b 32       	cpi	r18, 0x2B	; 43
    621c:	39 f0       	breq	.+14     	; 0x622c <atoi+0x28>
    621e:	2d 32       	cpi	r18, 0x2D	; 45
    6220:	31 f4       	brne	.+12     	; 0x622e <atoi+0x2a>
    6222:	68 94       	set
    6224:	03 c0       	rjmp	.+6      	; 0x622c <atoi+0x28>
    6226:	49 d0       	rcall	.+146    	; 0x62ba <__mulhi_const_10>
    6228:	82 0f       	add	r24, r18
    622a:	91 1d       	adc	r25, r1
    622c:	21 91       	ld	r18, Z+
    622e:	20 53       	subi	r18, 0x30	; 48
    6230:	2a 30       	cpi	r18, 0x0A	; 10
    6232:	c8 f3       	brcs	.-14     	; 0x6226 <atoi+0x22>
    6234:	1e f4       	brtc	.+6      	; 0x623c <atoi+0x38>
    6236:	90 95       	com	r25
    6238:	81 95       	neg	r24
    623a:	9f 4f       	sbci	r25, 0xFF	; 255
    623c:	08 95       	ret

0000623e <__ctype_isfalse>:
    623e:	99 27       	eor	r25, r25
    6240:	88 27       	eor	r24, r24

00006242 <__ctype_istrue>:
    6242:	08 95       	ret

00006244 <isspace>:
    6244:	91 11       	cpse	r25, r1
    6246:	fb cf       	rjmp	.-10     	; 0x623e <__ctype_isfalse>
    6248:	80 32       	cpi	r24, 0x20	; 32
    624a:	19 f0       	breq	.+6      	; 0x6252 <isspace+0xe>
    624c:	89 50       	subi	r24, 0x09	; 9
    624e:	85 50       	subi	r24, 0x05	; 5
    6250:	d0 f7       	brcc	.-12     	; 0x6246 <isspace+0x2>
    6252:	08 95       	ret

00006254 <isblank>:
    6254:	91 11       	cpse	r25, r1
    6256:	f3 cf       	rjmp	.-26     	; 0x623e <__ctype_isfalse>
    6258:	80 32       	cpi	r24, 0x20	; 32
    625a:	11 f0       	breq	.+4      	; 0x6260 <isblank+0xc>
    625c:	89 30       	cpi	r24, 0x09	; 9
    625e:	d9 f7       	brne	.-10     	; 0x6256 <isblank+0x2>
    6260:	08 95       	ret

00006262 <memcmp>:
    6262:	fb 01       	movw	r30, r22
    6264:	dc 01       	movw	r26, r24
    6266:	04 c0       	rjmp	.+8      	; 0x6270 <memcmp+0xe>
    6268:	8d 91       	ld	r24, X+
    626a:	01 90       	ld	r0, Z+
    626c:	80 19       	sub	r24, r0
    626e:	21 f4       	brne	.+8      	; 0x6278 <memcmp+0x16>
    6270:	41 50       	subi	r20, 0x01	; 1
    6272:	50 40       	sbci	r21, 0x00	; 0
    6274:	c8 f7       	brcc	.-14     	; 0x6268 <memcmp+0x6>
    6276:	88 1b       	sub	r24, r24
    6278:	99 0b       	sbc	r25, r25
    627a:	08 95       	ret

0000627c <strcpy>:
    627c:	fb 01       	movw	r30, r22
    627e:	dc 01       	movw	r26, r24
    6280:	01 90       	ld	r0, Z+
    6282:	0d 92       	st	X+, r0
    6284:	00 20       	and	r0, r0
    6286:	e1 f7       	brne	.-8      	; 0x6280 <strcpy+0x4>
    6288:	08 95       	ret

0000628a <strncmp>:
    628a:	fb 01       	movw	r30, r22
    628c:	dc 01       	movw	r26, r24
    628e:	41 50       	subi	r20, 0x01	; 1
    6290:	50 40       	sbci	r21, 0x00	; 0
    6292:	30 f0       	brcs	.+12     	; 0x62a0 <strncmp+0x16>
    6294:	8d 91       	ld	r24, X+
    6296:	01 90       	ld	r0, Z+
    6298:	80 19       	sub	r24, r0
    629a:	19 f4       	brne	.+6      	; 0x62a2 <strncmp+0x18>
    629c:	00 20       	and	r0, r0
    629e:	b9 f7       	brne	.-18     	; 0x628e <strncmp+0x4>
    62a0:	88 1b       	sub	r24, r24
    62a2:	99 0b       	sbc	r25, r25
    62a4:	08 95       	ret

000062a6 <__itoa_ncheck>:
    62a6:	bb 27       	eor	r27, r27
    62a8:	4a 30       	cpi	r20, 0x0A	; 10
    62aa:	31 f4       	brne	.+12     	; 0x62b8 <__itoa_ncheck+0x12>
    62ac:	99 23       	and	r25, r25
    62ae:	22 f4       	brpl	.+8      	; 0x62b8 <__itoa_ncheck+0x12>
    62b0:	bd e2       	ldi	r27, 0x2D	; 45
    62b2:	90 95       	com	r25
    62b4:	81 95       	neg	r24
    62b6:	9f 4f       	sbci	r25, 0xFF	; 255
    62b8:	09 c0       	rjmp	.+18     	; 0x62cc <__utoa_common>

000062ba <__mulhi_const_10>:
    62ba:	7a e0       	ldi	r23, 0x0A	; 10
    62bc:	97 9f       	mul	r25, r23
    62be:	90 2d       	mov	r25, r0
    62c0:	87 9f       	mul	r24, r23
    62c2:	80 2d       	mov	r24, r0
    62c4:	91 0d       	add	r25, r1
    62c6:	11 24       	eor	r1, r1
    62c8:	08 95       	ret

000062ca <__utoa_ncheck>:
    62ca:	bb 27       	eor	r27, r27

000062cc <__utoa_common>:
    62cc:	fb 01       	movw	r30, r22
    62ce:	55 27       	eor	r21, r21
    62d0:	aa 27       	eor	r26, r26
    62d2:	88 0f       	add	r24, r24
    62d4:	99 1f       	adc	r25, r25
    62d6:	aa 1f       	adc	r26, r26
    62d8:	a4 17       	cp	r26, r20
    62da:	10 f0       	brcs	.+4      	; 0x62e0 <__utoa_common+0x14>
    62dc:	a4 1b       	sub	r26, r20
    62de:	83 95       	inc	r24
    62e0:	50 51       	subi	r21, 0x10	; 16
    62e2:	b9 f7       	brne	.-18     	; 0x62d2 <__utoa_common+0x6>
    62e4:	a0 5d       	subi	r26, 0xD0	; 208
    62e6:	aa 33       	cpi	r26, 0x3A	; 58
    62e8:	08 f0       	brcs	.+2      	; 0x62ec <__utoa_common+0x20>
    62ea:	a9 5d       	subi	r26, 0xD9	; 217
    62ec:	a1 93       	st	Z+, r26
    62ee:	00 97       	sbiw	r24, 0x00	; 0
    62f0:	79 f7       	brne	.-34     	; 0x62d0 <__utoa_common+0x4>
    62f2:	b1 11       	cpse	r27, r1
    62f4:	b1 93       	st	Z+, r27
    62f6:	11 92       	st	Z+, r1
    62f8:	cb 01       	movw	r24, r22
    62fa:	0c 94 18 3a 	jmp	0x7430	; 0x7430 <strrev>

000062fe <fgetc>:
    62fe:	cf 93       	push	r28
    6300:	df 93       	push	r29
    6302:	ec 01       	movw	r28, r24
    6304:	2b 81       	ldd	r18, Y+3	; 0x03
    6306:	20 ff       	sbrs	r18, 0
    6308:	33 c0       	rjmp	.+102    	; 0x6370 <fgetc+0x72>
    630a:	26 ff       	sbrs	r18, 6
    630c:	0a c0       	rjmp	.+20     	; 0x6322 <fgetc+0x24>
    630e:	2f 7b       	andi	r18, 0xBF	; 191
    6310:	2b 83       	std	Y+3, r18	; 0x03
    6312:	8e 81       	ldd	r24, Y+6	; 0x06
    6314:	9f 81       	ldd	r25, Y+7	; 0x07
    6316:	01 96       	adiw	r24, 0x01	; 1
    6318:	9f 83       	std	Y+7, r25	; 0x07
    631a:	8e 83       	std	Y+6, r24	; 0x06
    631c:	8a 81       	ldd	r24, Y+2	; 0x02
    631e:	90 e0       	ldi	r25, 0x00	; 0
    6320:	29 c0       	rjmp	.+82     	; 0x6374 <fgetc+0x76>
    6322:	22 ff       	sbrs	r18, 2
    6324:	0f c0       	rjmp	.+30     	; 0x6344 <fgetc+0x46>
    6326:	e8 81       	ld	r30, Y
    6328:	f9 81       	ldd	r31, Y+1	; 0x01
    632a:	80 81       	ld	r24, Z
    632c:	08 2e       	mov	r0, r24
    632e:	00 0c       	add	r0, r0
    6330:	99 0b       	sbc	r25, r25
    6332:	00 97       	sbiw	r24, 0x00	; 0
    6334:	19 f4       	brne	.+6      	; 0x633c <fgetc+0x3e>
    6336:	20 62       	ori	r18, 0x20	; 32
    6338:	2b 83       	std	Y+3, r18	; 0x03
    633a:	1a c0       	rjmp	.+52     	; 0x6370 <fgetc+0x72>
    633c:	31 96       	adiw	r30, 0x01	; 1
    633e:	f9 83       	std	Y+1, r31	; 0x01
    6340:	e8 83       	st	Y, r30
    6342:	0e c0       	rjmp	.+28     	; 0x6360 <fgetc+0x62>
    6344:	ea 85       	ldd	r30, Y+10	; 0x0a
    6346:	fb 85       	ldd	r31, Y+11	; 0x0b
    6348:	09 95       	icall
    634a:	97 ff       	sbrs	r25, 7
    634c:	09 c0       	rjmp	.+18     	; 0x6360 <fgetc+0x62>
    634e:	2b 81       	ldd	r18, Y+3	; 0x03
    6350:	01 96       	adiw	r24, 0x01	; 1
    6352:	11 f0       	breq	.+4      	; 0x6358 <fgetc+0x5a>
    6354:	80 e2       	ldi	r24, 0x20	; 32
    6356:	01 c0       	rjmp	.+2      	; 0x635a <fgetc+0x5c>
    6358:	80 e1       	ldi	r24, 0x10	; 16
    635a:	82 2b       	or	r24, r18
    635c:	8b 83       	std	Y+3, r24	; 0x03
    635e:	08 c0       	rjmp	.+16     	; 0x6370 <fgetc+0x72>
    6360:	2e 81       	ldd	r18, Y+6	; 0x06
    6362:	3f 81       	ldd	r19, Y+7	; 0x07
    6364:	2f 5f       	subi	r18, 0xFF	; 255
    6366:	3f 4f       	sbci	r19, 0xFF	; 255
    6368:	3f 83       	std	Y+7, r19	; 0x07
    636a:	2e 83       	std	Y+6, r18	; 0x06
    636c:	99 27       	eor	r25, r25
    636e:	02 c0       	rjmp	.+4      	; 0x6374 <fgetc+0x76>
    6370:	8f ef       	ldi	r24, 0xFF	; 255
    6372:	9f ef       	ldi	r25, 0xFF	; 255
    6374:	df 91       	pop	r29
    6376:	cf 91       	pop	r28
    6378:	08 95       	ret

0000637a <printf>:
    637a:	cf 93       	push	r28
    637c:	df 93       	push	r29
    637e:	cd b7       	in	r28, 0x3d	; 61
    6380:	de b7       	in	r29, 0x3e	; 62
    6382:	ae 01       	movw	r20, r28
    6384:	4b 5f       	subi	r20, 0xFB	; 251
    6386:	5f 4f       	sbci	r21, 0xFF	; 255
    6388:	fa 01       	movw	r30, r20
    638a:	61 91       	ld	r22, Z+
    638c:	71 91       	ld	r23, Z+
    638e:	af 01       	movw	r20, r30
    6390:	80 91 b2 06 	lds	r24, 0x06B2	; 0x8006b2 <__iob+0x2>
    6394:	90 91 b3 06 	lds	r25, 0x06B3	; 0x8006b3 <__iob+0x3>
    6398:	16 d1       	rcall	.+556    	; 0x65c6 <vfprintf>
    639a:	df 91       	pop	r29
    639c:	cf 91       	pop	r28
    639e:	08 95       	ret

000063a0 <printf_P>:
    63a0:	0f 93       	push	r16
    63a2:	1f 93       	push	r17
    63a4:	cf 93       	push	r28
    63a6:	df 93       	push	r29
    63a8:	cd b7       	in	r28, 0x3d	; 61
    63aa:	de b7       	in	r29, 0x3e	; 62
    63ac:	ae 01       	movw	r20, r28
    63ae:	49 5f       	subi	r20, 0xF9	; 249
    63b0:	5f 4f       	sbci	r21, 0xFF	; 255
    63b2:	da 01       	movw	r26, r20
    63b4:	6d 91       	ld	r22, X+
    63b6:	7d 91       	ld	r23, X+
    63b8:	ad 01       	movw	r20, r26
    63ba:	00 eb       	ldi	r16, 0xB0	; 176
    63bc:	16 e0       	ldi	r17, 0x06	; 6
    63be:	f8 01       	movw	r30, r16
    63c0:	82 81       	ldd	r24, Z+2	; 0x02
    63c2:	93 81       	ldd	r25, Z+3	; 0x03
    63c4:	dc 01       	movw	r26, r24
    63c6:	13 96       	adiw	r26, 0x03	; 3
    63c8:	2c 91       	ld	r18, X
    63ca:	13 97       	sbiw	r26, 0x03	; 3
    63cc:	28 60       	ori	r18, 0x08	; 8
    63ce:	13 96       	adiw	r26, 0x03	; 3
    63d0:	2c 93       	st	X, r18
    63d2:	f9 d0       	rcall	.+498    	; 0x65c6 <vfprintf>
    63d4:	d8 01       	movw	r26, r16
    63d6:	12 96       	adiw	r26, 0x02	; 2
    63d8:	ed 91       	ld	r30, X+
    63da:	fc 91       	ld	r31, X
    63dc:	13 97       	sbiw	r26, 0x03	; 3
    63de:	23 81       	ldd	r18, Z+3	; 0x03
    63e0:	27 7f       	andi	r18, 0xF7	; 247
    63e2:	23 83       	std	Z+3, r18	; 0x03
    63e4:	df 91       	pop	r29
    63e6:	cf 91       	pop	r28
    63e8:	1f 91       	pop	r17
    63ea:	0f 91       	pop	r16
    63ec:	08 95       	ret

000063ee <puts>:
    63ee:	0f 93       	push	r16
    63f0:	1f 93       	push	r17
    63f2:	cf 93       	push	r28
    63f4:	df 93       	push	r29
    63f6:	e0 91 b2 06 	lds	r30, 0x06B2	; 0x8006b2 <__iob+0x2>
    63fa:	f0 91 b3 06 	lds	r31, 0x06B3	; 0x8006b3 <__iob+0x3>
    63fe:	23 81       	ldd	r18, Z+3	; 0x03
    6400:	21 ff       	sbrs	r18, 1
    6402:	1b c0       	rjmp	.+54     	; 0x643a <puts+0x4c>
    6404:	8c 01       	movw	r16, r24
    6406:	d0 e0       	ldi	r29, 0x00	; 0
    6408:	c0 e0       	ldi	r28, 0x00	; 0
    640a:	f8 01       	movw	r30, r16
    640c:	81 91       	ld	r24, Z+
    640e:	8f 01       	movw	r16, r30
    6410:	60 91 b2 06 	lds	r22, 0x06B2	; 0x8006b2 <__iob+0x2>
    6414:	70 91 b3 06 	lds	r23, 0x06B3	; 0x8006b3 <__iob+0x3>
    6418:	db 01       	movw	r26, r22
    641a:	18 96       	adiw	r26, 0x08	; 8
    641c:	ed 91       	ld	r30, X+
    641e:	fc 91       	ld	r31, X
    6420:	19 97       	sbiw	r26, 0x09	; 9
    6422:	88 23       	and	r24, r24
    6424:	31 f0       	breq	.+12     	; 0x6432 <puts+0x44>
    6426:	09 95       	icall
    6428:	89 2b       	or	r24, r25
    642a:	79 f3       	breq	.-34     	; 0x640a <puts+0x1c>
    642c:	df ef       	ldi	r29, 0xFF	; 255
    642e:	cf ef       	ldi	r28, 0xFF	; 255
    6430:	ec cf       	rjmp	.-40     	; 0x640a <puts+0x1c>
    6432:	8a e0       	ldi	r24, 0x0A	; 10
    6434:	09 95       	icall
    6436:	89 2b       	or	r24, r25
    6438:	19 f0       	breq	.+6      	; 0x6440 <puts+0x52>
    643a:	8f ef       	ldi	r24, 0xFF	; 255
    643c:	9f ef       	ldi	r25, 0xFF	; 255
    643e:	02 c0       	rjmp	.+4      	; 0x6444 <puts+0x56>
    6440:	8d 2f       	mov	r24, r29
    6442:	9c 2f       	mov	r25, r28
    6444:	df 91       	pop	r29
    6446:	cf 91       	pop	r28
    6448:	1f 91       	pop	r17
    644a:	0f 91       	pop	r16
    644c:	08 95       	ret

0000644e <puts_P>:
    644e:	0f 93       	push	r16
    6450:	1f 93       	push	r17
    6452:	cf 93       	push	r28
    6454:	df 93       	push	r29
    6456:	8c 01       	movw	r16, r24
    6458:	e0 91 b2 06 	lds	r30, 0x06B2	; 0x8006b2 <__iob+0x2>
    645c:	f0 91 b3 06 	lds	r31, 0x06B3	; 0x8006b3 <__iob+0x3>
    6460:	83 81       	ldd	r24, Z+3	; 0x03
    6462:	81 ff       	sbrs	r24, 1
    6464:	1b c0       	rjmp	.+54     	; 0x649c <puts_P+0x4e>
    6466:	d0 e0       	ldi	r29, 0x00	; 0
    6468:	c0 e0       	ldi	r28, 0x00	; 0
    646a:	f8 01       	movw	r30, r16
    646c:	84 91       	lpm	r24, Z
    646e:	60 91 b2 06 	lds	r22, 0x06B2	; 0x8006b2 <__iob+0x2>
    6472:	70 91 b3 06 	lds	r23, 0x06B3	; 0x8006b3 <__iob+0x3>
    6476:	db 01       	movw	r26, r22
    6478:	18 96       	adiw	r26, 0x08	; 8
    647a:	ed 91       	ld	r30, X+
    647c:	fc 91       	ld	r31, X
    647e:	19 97       	sbiw	r26, 0x09	; 9
    6480:	88 23       	and	r24, r24
    6482:	41 f0       	breq	.+16     	; 0x6494 <puts_P+0x46>
    6484:	09 95       	icall
    6486:	89 2b       	or	r24, r25
    6488:	11 f0       	breq	.+4      	; 0x648e <puts_P+0x40>
    648a:	df ef       	ldi	r29, 0xFF	; 255
    648c:	cf ef       	ldi	r28, 0xFF	; 255
    648e:	0f 5f       	subi	r16, 0xFF	; 255
    6490:	1f 4f       	sbci	r17, 0xFF	; 255
    6492:	eb cf       	rjmp	.-42     	; 0x646a <puts_P+0x1c>
    6494:	8a e0       	ldi	r24, 0x0A	; 10
    6496:	09 95       	icall
    6498:	89 2b       	or	r24, r25
    649a:	19 f0       	breq	.+6      	; 0x64a2 <puts_P+0x54>
    649c:	8f ef       	ldi	r24, 0xFF	; 255
    649e:	9f ef       	ldi	r25, 0xFF	; 255
    64a0:	02 c0       	rjmp	.+4      	; 0x64a6 <puts_P+0x58>
    64a2:	8d 2f       	mov	r24, r29
    64a4:	9c 2f       	mov	r25, r28
    64a6:	df 91       	pop	r29
    64a8:	cf 91       	pop	r28
    64aa:	1f 91       	pop	r17
    64ac:	0f 91       	pop	r16
    64ae:	08 95       	ret

000064b0 <snprintf>:
    64b0:	0f 93       	push	r16
    64b2:	1f 93       	push	r17
    64b4:	cf 93       	push	r28
    64b6:	df 93       	push	r29
    64b8:	cd b7       	in	r28, 0x3d	; 61
    64ba:	de b7       	in	r29, 0x3e	; 62
    64bc:	2e 97       	sbiw	r28, 0x0e	; 14
    64be:	0f b6       	in	r0, 0x3f	; 63
    64c0:	f8 94       	cli
    64c2:	de bf       	out	0x3e, r29	; 62
    64c4:	0f be       	out	0x3f, r0	; 63
    64c6:	cd bf       	out	0x3d, r28	; 61
    64c8:	0d 89       	ldd	r16, Y+21	; 0x15
    64ca:	1e 89       	ldd	r17, Y+22	; 0x16
    64cc:	8f 89       	ldd	r24, Y+23	; 0x17
    64ce:	98 8d       	ldd	r25, Y+24	; 0x18
    64d0:	26 e0       	ldi	r18, 0x06	; 6
    64d2:	2c 83       	std	Y+4, r18	; 0x04
    64d4:	1a 83       	std	Y+2, r17	; 0x02
    64d6:	09 83       	std	Y+1, r16	; 0x01
    64d8:	97 ff       	sbrs	r25, 7
    64da:	02 c0       	rjmp	.+4      	; 0x64e0 <snprintf+0x30>
    64dc:	80 e0       	ldi	r24, 0x00	; 0
    64de:	90 e8       	ldi	r25, 0x80	; 128
    64e0:	01 97       	sbiw	r24, 0x01	; 1
    64e2:	9e 83       	std	Y+6, r25	; 0x06
    64e4:	8d 83       	std	Y+5, r24	; 0x05
    64e6:	ae 01       	movw	r20, r28
    64e8:	45 5e       	subi	r20, 0xE5	; 229
    64ea:	5f 4f       	sbci	r21, 0xFF	; 255
    64ec:	69 8d       	ldd	r22, Y+25	; 0x19
    64ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    64f0:	ce 01       	movw	r24, r28
    64f2:	01 96       	adiw	r24, 0x01	; 1
    64f4:	68 d0       	rcall	.+208    	; 0x65c6 <vfprintf>
    64f6:	4d 81       	ldd	r20, Y+5	; 0x05
    64f8:	5e 81       	ldd	r21, Y+6	; 0x06
    64fa:	57 fd       	sbrc	r21, 7
    64fc:	0a c0       	rjmp	.+20     	; 0x6512 <snprintf+0x62>
    64fe:	2f 81       	ldd	r18, Y+7	; 0x07
    6500:	38 85       	ldd	r19, Y+8	; 0x08
    6502:	42 17       	cp	r20, r18
    6504:	53 07       	cpc	r21, r19
    6506:	0c f4       	brge	.+2      	; 0x650a <snprintf+0x5a>
    6508:	9a 01       	movw	r18, r20
    650a:	f8 01       	movw	r30, r16
    650c:	e2 0f       	add	r30, r18
    650e:	f3 1f       	adc	r31, r19
    6510:	10 82       	st	Z, r1
    6512:	2e 96       	adiw	r28, 0x0e	; 14
    6514:	0f b6       	in	r0, 0x3f	; 63
    6516:	f8 94       	cli
    6518:	de bf       	out	0x3e, r29	; 62
    651a:	0f be       	out	0x3f, r0	; 63
    651c:	cd bf       	out	0x3d, r28	; 61
    651e:	df 91       	pop	r29
    6520:	cf 91       	pop	r28
    6522:	1f 91       	pop	r17
    6524:	0f 91       	pop	r16
    6526:	08 95       	ret

00006528 <sprintf>:
    6528:	0f 93       	push	r16
    652a:	1f 93       	push	r17
    652c:	cf 93       	push	r28
    652e:	df 93       	push	r29
    6530:	cd b7       	in	r28, 0x3d	; 61
    6532:	de b7       	in	r29, 0x3e	; 62
    6534:	2e 97       	sbiw	r28, 0x0e	; 14
    6536:	0f b6       	in	r0, 0x3f	; 63
    6538:	f8 94       	cli
    653a:	de bf       	out	0x3e, r29	; 62
    653c:	0f be       	out	0x3f, r0	; 63
    653e:	cd bf       	out	0x3d, r28	; 61
    6540:	0d 89       	ldd	r16, Y+21	; 0x15
    6542:	1e 89       	ldd	r17, Y+22	; 0x16
    6544:	86 e0       	ldi	r24, 0x06	; 6
    6546:	8c 83       	std	Y+4, r24	; 0x04
    6548:	1a 83       	std	Y+2, r17	; 0x02
    654a:	09 83       	std	Y+1, r16	; 0x01
    654c:	8f ef       	ldi	r24, 0xFF	; 255
    654e:	9f e7       	ldi	r25, 0x7F	; 127
    6550:	9e 83       	std	Y+6, r25	; 0x06
    6552:	8d 83       	std	Y+5, r24	; 0x05
    6554:	ae 01       	movw	r20, r28
    6556:	47 5e       	subi	r20, 0xE7	; 231
    6558:	5f 4f       	sbci	r21, 0xFF	; 255
    655a:	6f 89       	ldd	r22, Y+23	; 0x17
    655c:	78 8d       	ldd	r23, Y+24	; 0x18
    655e:	ce 01       	movw	r24, r28
    6560:	01 96       	adiw	r24, 0x01	; 1
    6562:	31 d0       	rcall	.+98     	; 0x65c6 <vfprintf>
    6564:	ef 81       	ldd	r30, Y+7	; 0x07
    6566:	f8 85       	ldd	r31, Y+8	; 0x08
    6568:	e0 0f       	add	r30, r16
    656a:	f1 1f       	adc	r31, r17
    656c:	10 82       	st	Z, r1
    656e:	2e 96       	adiw	r28, 0x0e	; 14
    6570:	0f b6       	in	r0, 0x3f	; 63
    6572:	f8 94       	cli
    6574:	de bf       	out	0x3e, r29	; 62
    6576:	0f be       	out	0x3f, r0	; 63
    6578:	cd bf       	out	0x3d, r28	; 61
    657a:	df 91       	pop	r29
    657c:	cf 91       	pop	r28
    657e:	1f 91       	pop	r17
    6580:	0f 91       	pop	r16
    6582:	08 95       	ret

00006584 <sscanf>:
    6584:	cf 93       	push	r28
    6586:	df 93       	push	r29
    6588:	cd b7       	in	r28, 0x3d	; 61
    658a:	de b7       	in	r29, 0x3e	; 62
    658c:	2e 97       	sbiw	r28, 0x0e	; 14
    658e:	0f b6       	in	r0, 0x3f	; 63
    6590:	f8 94       	cli
    6592:	de bf       	out	0x3e, r29	; 62
    6594:	0f be       	out	0x3f, r0	; 63
    6596:	cd bf       	out	0x3d, r28	; 61
    6598:	85 e0       	ldi	r24, 0x05	; 5
    659a:	8c 83       	std	Y+4, r24	; 0x04
    659c:	8b 89       	ldd	r24, Y+19	; 0x13
    659e:	9c 89       	ldd	r25, Y+20	; 0x14
    65a0:	9a 83       	std	Y+2, r25	; 0x02
    65a2:	89 83       	std	Y+1, r24	; 0x01
    65a4:	ae 01       	movw	r20, r28
    65a6:	49 5e       	subi	r20, 0xE9	; 233
    65a8:	5f 4f       	sbci	r21, 0xFF	; 255
    65aa:	6d 89       	ldd	r22, Y+21	; 0x15
    65ac:	7e 89       	ldd	r23, Y+22	; 0x16
    65ae:	ce 01       	movw	r24, r28
    65b0:	01 96       	adiw	r24, 0x01	; 1
    65b2:	b8 d3       	rcall	.+1904   	; 0x6d24 <vfscanf>
    65b4:	2e 96       	adiw	r28, 0x0e	; 14
    65b6:	0f b6       	in	r0, 0x3f	; 63
    65b8:	f8 94       	cli
    65ba:	de bf       	out	0x3e, r29	; 62
    65bc:	0f be       	out	0x3f, r0	; 63
    65be:	cd bf       	out	0x3d, r28	; 61
    65c0:	df 91       	pop	r29
    65c2:	cf 91       	pop	r28
    65c4:	08 95       	ret

000065c6 <vfprintf>:
    65c6:	2f 92       	push	r2
    65c8:	3f 92       	push	r3
    65ca:	4f 92       	push	r4
    65cc:	5f 92       	push	r5
    65ce:	6f 92       	push	r6
    65d0:	7f 92       	push	r7
    65d2:	8f 92       	push	r8
    65d4:	9f 92       	push	r9
    65d6:	af 92       	push	r10
    65d8:	bf 92       	push	r11
    65da:	cf 92       	push	r12
    65dc:	df 92       	push	r13
    65de:	ef 92       	push	r14
    65e0:	ff 92       	push	r15
    65e2:	0f 93       	push	r16
    65e4:	1f 93       	push	r17
    65e6:	cf 93       	push	r28
    65e8:	df 93       	push	r29
    65ea:	cd b7       	in	r28, 0x3d	; 61
    65ec:	de b7       	in	r29, 0x3e	; 62
    65ee:	2b 97       	sbiw	r28, 0x0b	; 11
    65f0:	0f b6       	in	r0, 0x3f	; 63
    65f2:	f8 94       	cli
    65f4:	de bf       	out	0x3e, r29	; 62
    65f6:	0f be       	out	0x3f, r0	; 63
    65f8:	cd bf       	out	0x3d, r28	; 61
    65fa:	6c 01       	movw	r12, r24
    65fc:	7b 01       	movw	r14, r22
    65fe:	8a 01       	movw	r16, r20
    6600:	fc 01       	movw	r30, r24
    6602:	17 82       	std	Z+7, r1	; 0x07
    6604:	16 82       	std	Z+6, r1	; 0x06
    6606:	83 81       	ldd	r24, Z+3	; 0x03
    6608:	81 ff       	sbrs	r24, 1
    660a:	bf c1       	rjmp	.+894    	; 0x698a <vfprintf+0x3c4>
    660c:	ce 01       	movw	r24, r28
    660e:	01 96       	adiw	r24, 0x01	; 1
    6610:	3c 01       	movw	r6, r24
    6612:	f6 01       	movw	r30, r12
    6614:	93 81       	ldd	r25, Z+3	; 0x03
    6616:	f7 01       	movw	r30, r14
    6618:	93 fd       	sbrc	r25, 3
    661a:	85 91       	lpm	r24, Z+
    661c:	93 ff       	sbrs	r25, 3
    661e:	81 91       	ld	r24, Z+
    6620:	7f 01       	movw	r14, r30
    6622:	88 23       	and	r24, r24
    6624:	09 f4       	brne	.+2      	; 0x6628 <vfprintf+0x62>
    6626:	ad c1       	rjmp	.+858    	; 0x6982 <vfprintf+0x3bc>
    6628:	85 32       	cpi	r24, 0x25	; 37
    662a:	39 f4       	brne	.+14     	; 0x663a <vfprintf+0x74>
    662c:	93 fd       	sbrc	r25, 3
    662e:	85 91       	lpm	r24, Z+
    6630:	93 ff       	sbrs	r25, 3
    6632:	81 91       	ld	r24, Z+
    6634:	7f 01       	movw	r14, r30
    6636:	85 32       	cpi	r24, 0x25	; 37
    6638:	21 f4       	brne	.+8      	; 0x6642 <vfprintf+0x7c>
    663a:	b6 01       	movw	r22, r12
    663c:	90 e0       	ldi	r25, 0x00	; 0
    663e:	08 d7       	rcall	.+3600   	; 0x7450 <fputc>
    6640:	e8 cf       	rjmp	.-48     	; 0x6612 <vfprintf+0x4c>
    6642:	91 2c       	mov	r9, r1
    6644:	21 2c       	mov	r2, r1
    6646:	31 2c       	mov	r3, r1
    6648:	ff e1       	ldi	r31, 0x1F	; 31
    664a:	f3 15       	cp	r31, r3
    664c:	d8 f0       	brcs	.+54     	; 0x6684 <vfprintf+0xbe>
    664e:	8b 32       	cpi	r24, 0x2B	; 43
    6650:	79 f0       	breq	.+30     	; 0x6670 <vfprintf+0xaa>
    6652:	38 f4       	brcc	.+14     	; 0x6662 <vfprintf+0x9c>
    6654:	80 32       	cpi	r24, 0x20	; 32
    6656:	79 f0       	breq	.+30     	; 0x6676 <vfprintf+0xb0>
    6658:	83 32       	cpi	r24, 0x23	; 35
    665a:	a1 f4       	brne	.+40     	; 0x6684 <vfprintf+0xbe>
    665c:	23 2d       	mov	r18, r3
    665e:	20 61       	ori	r18, 0x10	; 16
    6660:	1d c0       	rjmp	.+58     	; 0x669c <vfprintf+0xd6>
    6662:	8d 32       	cpi	r24, 0x2D	; 45
    6664:	61 f0       	breq	.+24     	; 0x667e <vfprintf+0xb8>
    6666:	80 33       	cpi	r24, 0x30	; 48
    6668:	69 f4       	brne	.+26     	; 0x6684 <vfprintf+0xbe>
    666a:	23 2d       	mov	r18, r3
    666c:	21 60       	ori	r18, 0x01	; 1
    666e:	16 c0       	rjmp	.+44     	; 0x669c <vfprintf+0xd6>
    6670:	83 2d       	mov	r24, r3
    6672:	82 60       	ori	r24, 0x02	; 2
    6674:	38 2e       	mov	r3, r24
    6676:	e3 2d       	mov	r30, r3
    6678:	e4 60       	ori	r30, 0x04	; 4
    667a:	3e 2e       	mov	r3, r30
    667c:	2a c0       	rjmp	.+84     	; 0x66d2 <vfprintf+0x10c>
    667e:	f3 2d       	mov	r31, r3
    6680:	f8 60       	ori	r31, 0x08	; 8
    6682:	1d c0       	rjmp	.+58     	; 0x66be <vfprintf+0xf8>
    6684:	37 fc       	sbrc	r3, 7
    6686:	2d c0       	rjmp	.+90     	; 0x66e2 <vfprintf+0x11c>
    6688:	20 ed       	ldi	r18, 0xD0	; 208
    668a:	28 0f       	add	r18, r24
    668c:	2a 30       	cpi	r18, 0x0A	; 10
    668e:	40 f0       	brcs	.+16     	; 0x66a0 <vfprintf+0xda>
    6690:	8e 32       	cpi	r24, 0x2E	; 46
    6692:	b9 f4       	brne	.+46     	; 0x66c2 <vfprintf+0xfc>
    6694:	36 fc       	sbrc	r3, 6
    6696:	75 c1       	rjmp	.+746    	; 0x6982 <vfprintf+0x3bc>
    6698:	23 2d       	mov	r18, r3
    669a:	20 64       	ori	r18, 0x40	; 64
    669c:	32 2e       	mov	r3, r18
    669e:	19 c0       	rjmp	.+50     	; 0x66d2 <vfprintf+0x10c>
    66a0:	36 fe       	sbrs	r3, 6
    66a2:	06 c0       	rjmp	.+12     	; 0x66b0 <vfprintf+0xea>
    66a4:	8a e0       	ldi	r24, 0x0A	; 10
    66a6:	98 9e       	mul	r9, r24
    66a8:	20 0d       	add	r18, r0
    66aa:	11 24       	eor	r1, r1
    66ac:	92 2e       	mov	r9, r18
    66ae:	11 c0       	rjmp	.+34     	; 0x66d2 <vfprintf+0x10c>
    66b0:	ea e0       	ldi	r30, 0x0A	; 10
    66b2:	2e 9e       	mul	r2, r30
    66b4:	20 0d       	add	r18, r0
    66b6:	11 24       	eor	r1, r1
    66b8:	22 2e       	mov	r2, r18
    66ba:	f3 2d       	mov	r31, r3
    66bc:	f0 62       	ori	r31, 0x20	; 32
    66be:	3f 2e       	mov	r3, r31
    66c0:	08 c0       	rjmp	.+16     	; 0x66d2 <vfprintf+0x10c>
    66c2:	8c 36       	cpi	r24, 0x6C	; 108
    66c4:	21 f4       	brne	.+8      	; 0x66ce <vfprintf+0x108>
    66c6:	83 2d       	mov	r24, r3
    66c8:	80 68       	ori	r24, 0x80	; 128
    66ca:	38 2e       	mov	r3, r24
    66cc:	02 c0       	rjmp	.+4      	; 0x66d2 <vfprintf+0x10c>
    66ce:	88 36       	cpi	r24, 0x68	; 104
    66d0:	41 f4       	brne	.+16     	; 0x66e2 <vfprintf+0x11c>
    66d2:	f7 01       	movw	r30, r14
    66d4:	93 fd       	sbrc	r25, 3
    66d6:	85 91       	lpm	r24, Z+
    66d8:	93 ff       	sbrs	r25, 3
    66da:	81 91       	ld	r24, Z+
    66dc:	7f 01       	movw	r14, r30
    66de:	81 11       	cpse	r24, r1
    66e0:	b3 cf       	rjmp	.-154    	; 0x6648 <vfprintf+0x82>
    66e2:	98 2f       	mov	r25, r24
    66e4:	9f 7d       	andi	r25, 0xDF	; 223
    66e6:	95 54       	subi	r25, 0x45	; 69
    66e8:	93 30       	cpi	r25, 0x03	; 3
    66ea:	28 f4       	brcc	.+10     	; 0x66f6 <vfprintf+0x130>
    66ec:	0c 5f       	subi	r16, 0xFC	; 252
    66ee:	1f 4f       	sbci	r17, 0xFF	; 255
    66f0:	9f e3       	ldi	r25, 0x3F	; 63
    66f2:	99 83       	std	Y+1, r25	; 0x01
    66f4:	0d c0       	rjmp	.+26     	; 0x6710 <vfprintf+0x14a>
    66f6:	83 36       	cpi	r24, 0x63	; 99
    66f8:	31 f0       	breq	.+12     	; 0x6706 <vfprintf+0x140>
    66fa:	83 37       	cpi	r24, 0x73	; 115
    66fc:	71 f0       	breq	.+28     	; 0x671a <vfprintf+0x154>
    66fe:	83 35       	cpi	r24, 0x53	; 83
    6700:	09 f0       	breq	.+2      	; 0x6704 <vfprintf+0x13e>
    6702:	55 c0       	rjmp	.+170    	; 0x67ae <vfprintf+0x1e8>
    6704:	20 c0       	rjmp	.+64     	; 0x6746 <vfprintf+0x180>
    6706:	f8 01       	movw	r30, r16
    6708:	80 81       	ld	r24, Z
    670a:	89 83       	std	Y+1, r24	; 0x01
    670c:	0e 5f       	subi	r16, 0xFE	; 254
    670e:	1f 4f       	sbci	r17, 0xFF	; 255
    6710:	88 24       	eor	r8, r8
    6712:	83 94       	inc	r8
    6714:	91 2c       	mov	r9, r1
    6716:	53 01       	movw	r10, r6
    6718:	12 c0       	rjmp	.+36     	; 0x673e <vfprintf+0x178>
    671a:	28 01       	movw	r4, r16
    671c:	f2 e0       	ldi	r31, 0x02	; 2
    671e:	4f 0e       	add	r4, r31
    6720:	51 1c       	adc	r5, r1
    6722:	f8 01       	movw	r30, r16
    6724:	a0 80       	ld	r10, Z
    6726:	b1 80       	ldd	r11, Z+1	; 0x01
    6728:	36 fe       	sbrs	r3, 6
    672a:	03 c0       	rjmp	.+6      	; 0x6732 <vfprintf+0x16c>
    672c:	69 2d       	mov	r22, r9
    672e:	70 e0       	ldi	r23, 0x00	; 0
    6730:	02 c0       	rjmp	.+4      	; 0x6736 <vfprintf+0x170>
    6732:	6f ef       	ldi	r22, 0xFF	; 255
    6734:	7f ef       	ldi	r23, 0xFF	; 255
    6736:	c5 01       	movw	r24, r10
    6738:	70 d6       	rcall	.+3296   	; 0x741a <strnlen>
    673a:	4c 01       	movw	r8, r24
    673c:	82 01       	movw	r16, r4
    673e:	f3 2d       	mov	r31, r3
    6740:	ff 77       	andi	r31, 0x7F	; 127
    6742:	3f 2e       	mov	r3, r31
    6744:	15 c0       	rjmp	.+42     	; 0x6770 <vfprintf+0x1aa>
    6746:	28 01       	movw	r4, r16
    6748:	22 e0       	ldi	r18, 0x02	; 2
    674a:	42 0e       	add	r4, r18
    674c:	51 1c       	adc	r5, r1
    674e:	f8 01       	movw	r30, r16
    6750:	a0 80       	ld	r10, Z
    6752:	b1 80       	ldd	r11, Z+1	; 0x01
    6754:	36 fe       	sbrs	r3, 6
    6756:	03 c0       	rjmp	.+6      	; 0x675e <vfprintf+0x198>
    6758:	69 2d       	mov	r22, r9
    675a:	70 e0       	ldi	r23, 0x00	; 0
    675c:	02 c0       	rjmp	.+4      	; 0x6762 <vfprintf+0x19c>
    675e:	6f ef       	ldi	r22, 0xFF	; 255
    6760:	7f ef       	ldi	r23, 0xFF	; 255
    6762:	c5 01       	movw	r24, r10
    6764:	4f d6       	rcall	.+3230   	; 0x7404 <strnlen_P>
    6766:	4c 01       	movw	r8, r24
    6768:	f3 2d       	mov	r31, r3
    676a:	f0 68       	ori	r31, 0x80	; 128
    676c:	3f 2e       	mov	r3, r31
    676e:	82 01       	movw	r16, r4
    6770:	33 fc       	sbrc	r3, 3
    6772:	19 c0       	rjmp	.+50     	; 0x67a6 <vfprintf+0x1e0>
    6774:	82 2d       	mov	r24, r2
    6776:	90 e0       	ldi	r25, 0x00	; 0
    6778:	88 16       	cp	r8, r24
    677a:	99 06       	cpc	r9, r25
    677c:	a0 f4       	brcc	.+40     	; 0x67a6 <vfprintf+0x1e0>
    677e:	b6 01       	movw	r22, r12
    6780:	80 e2       	ldi	r24, 0x20	; 32
    6782:	90 e0       	ldi	r25, 0x00	; 0
    6784:	65 d6       	rcall	.+3274   	; 0x7450 <fputc>
    6786:	2a 94       	dec	r2
    6788:	f5 cf       	rjmp	.-22     	; 0x6774 <vfprintf+0x1ae>
    678a:	f5 01       	movw	r30, r10
    678c:	37 fc       	sbrc	r3, 7
    678e:	85 91       	lpm	r24, Z+
    6790:	37 fe       	sbrs	r3, 7
    6792:	81 91       	ld	r24, Z+
    6794:	5f 01       	movw	r10, r30
    6796:	b6 01       	movw	r22, r12
    6798:	90 e0       	ldi	r25, 0x00	; 0
    679a:	5a d6       	rcall	.+3252   	; 0x7450 <fputc>
    679c:	21 10       	cpse	r2, r1
    679e:	2a 94       	dec	r2
    67a0:	21 e0       	ldi	r18, 0x01	; 1
    67a2:	82 1a       	sub	r8, r18
    67a4:	91 08       	sbc	r9, r1
    67a6:	81 14       	cp	r8, r1
    67a8:	91 04       	cpc	r9, r1
    67aa:	79 f7       	brne	.-34     	; 0x678a <vfprintf+0x1c4>
    67ac:	e1 c0       	rjmp	.+450    	; 0x6970 <vfprintf+0x3aa>
    67ae:	84 36       	cpi	r24, 0x64	; 100
    67b0:	11 f0       	breq	.+4      	; 0x67b6 <vfprintf+0x1f0>
    67b2:	89 36       	cpi	r24, 0x69	; 105
    67b4:	39 f5       	brne	.+78     	; 0x6804 <vfprintf+0x23e>
    67b6:	f8 01       	movw	r30, r16
    67b8:	37 fe       	sbrs	r3, 7
    67ba:	07 c0       	rjmp	.+14     	; 0x67ca <vfprintf+0x204>
    67bc:	60 81       	ld	r22, Z
    67be:	71 81       	ldd	r23, Z+1	; 0x01
    67c0:	82 81       	ldd	r24, Z+2	; 0x02
    67c2:	93 81       	ldd	r25, Z+3	; 0x03
    67c4:	0c 5f       	subi	r16, 0xFC	; 252
    67c6:	1f 4f       	sbci	r17, 0xFF	; 255
    67c8:	08 c0       	rjmp	.+16     	; 0x67da <vfprintf+0x214>
    67ca:	60 81       	ld	r22, Z
    67cc:	71 81       	ldd	r23, Z+1	; 0x01
    67ce:	07 2e       	mov	r0, r23
    67d0:	00 0c       	add	r0, r0
    67d2:	88 0b       	sbc	r24, r24
    67d4:	99 0b       	sbc	r25, r25
    67d6:	0e 5f       	subi	r16, 0xFE	; 254
    67d8:	1f 4f       	sbci	r17, 0xFF	; 255
    67da:	f3 2d       	mov	r31, r3
    67dc:	ff 76       	andi	r31, 0x6F	; 111
    67de:	3f 2e       	mov	r3, r31
    67e0:	97 ff       	sbrs	r25, 7
    67e2:	09 c0       	rjmp	.+18     	; 0x67f6 <vfprintf+0x230>
    67e4:	90 95       	com	r25
    67e6:	80 95       	com	r24
    67e8:	70 95       	com	r23
    67ea:	61 95       	neg	r22
    67ec:	7f 4f       	sbci	r23, 0xFF	; 255
    67ee:	8f 4f       	sbci	r24, 0xFF	; 255
    67f0:	9f 4f       	sbci	r25, 0xFF	; 255
    67f2:	f0 68       	ori	r31, 0x80	; 128
    67f4:	3f 2e       	mov	r3, r31
    67f6:	2a e0       	ldi	r18, 0x0A	; 10
    67f8:	30 e0       	ldi	r19, 0x00	; 0
    67fa:	a3 01       	movw	r20, r6
    67fc:	7e d6       	rcall	.+3324   	; 0x74fa <__ultoa_invert>
    67fe:	88 2e       	mov	r8, r24
    6800:	86 18       	sub	r8, r6
    6802:	44 c0       	rjmp	.+136    	; 0x688c <vfprintf+0x2c6>
    6804:	85 37       	cpi	r24, 0x75	; 117
    6806:	31 f4       	brne	.+12     	; 0x6814 <vfprintf+0x24e>
    6808:	23 2d       	mov	r18, r3
    680a:	2f 7e       	andi	r18, 0xEF	; 239
    680c:	b2 2e       	mov	r11, r18
    680e:	2a e0       	ldi	r18, 0x0A	; 10
    6810:	30 e0       	ldi	r19, 0x00	; 0
    6812:	25 c0       	rjmp	.+74     	; 0x685e <vfprintf+0x298>
    6814:	93 2d       	mov	r25, r3
    6816:	99 7f       	andi	r25, 0xF9	; 249
    6818:	b9 2e       	mov	r11, r25
    681a:	8f 36       	cpi	r24, 0x6F	; 111
    681c:	c1 f0       	breq	.+48     	; 0x684e <vfprintf+0x288>
    681e:	18 f4       	brcc	.+6      	; 0x6826 <vfprintf+0x260>
    6820:	88 35       	cpi	r24, 0x58	; 88
    6822:	79 f0       	breq	.+30     	; 0x6842 <vfprintf+0x27c>
    6824:	ae c0       	rjmp	.+348    	; 0x6982 <vfprintf+0x3bc>
    6826:	80 37       	cpi	r24, 0x70	; 112
    6828:	19 f0       	breq	.+6      	; 0x6830 <vfprintf+0x26a>
    682a:	88 37       	cpi	r24, 0x78	; 120
    682c:	21 f0       	breq	.+8      	; 0x6836 <vfprintf+0x270>
    682e:	a9 c0       	rjmp	.+338    	; 0x6982 <vfprintf+0x3bc>
    6830:	e9 2f       	mov	r30, r25
    6832:	e0 61       	ori	r30, 0x10	; 16
    6834:	be 2e       	mov	r11, r30
    6836:	b4 fe       	sbrs	r11, 4
    6838:	0d c0       	rjmp	.+26     	; 0x6854 <vfprintf+0x28e>
    683a:	fb 2d       	mov	r31, r11
    683c:	f4 60       	ori	r31, 0x04	; 4
    683e:	bf 2e       	mov	r11, r31
    6840:	09 c0       	rjmp	.+18     	; 0x6854 <vfprintf+0x28e>
    6842:	34 fe       	sbrs	r3, 4
    6844:	0a c0       	rjmp	.+20     	; 0x685a <vfprintf+0x294>
    6846:	29 2f       	mov	r18, r25
    6848:	26 60       	ori	r18, 0x06	; 6
    684a:	b2 2e       	mov	r11, r18
    684c:	06 c0       	rjmp	.+12     	; 0x685a <vfprintf+0x294>
    684e:	28 e0       	ldi	r18, 0x08	; 8
    6850:	30 e0       	ldi	r19, 0x00	; 0
    6852:	05 c0       	rjmp	.+10     	; 0x685e <vfprintf+0x298>
    6854:	20 e1       	ldi	r18, 0x10	; 16
    6856:	30 e0       	ldi	r19, 0x00	; 0
    6858:	02 c0       	rjmp	.+4      	; 0x685e <vfprintf+0x298>
    685a:	20 e1       	ldi	r18, 0x10	; 16
    685c:	32 e0       	ldi	r19, 0x02	; 2
    685e:	f8 01       	movw	r30, r16
    6860:	b7 fe       	sbrs	r11, 7
    6862:	07 c0       	rjmp	.+14     	; 0x6872 <vfprintf+0x2ac>
    6864:	60 81       	ld	r22, Z
    6866:	71 81       	ldd	r23, Z+1	; 0x01
    6868:	82 81       	ldd	r24, Z+2	; 0x02
    686a:	93 81       	ldd	r25, Z+3	; 0x03
    686c:	0c 5f       	subi	r16, 0xFC	; 252
    686e:	1f 4f       	sbci	r17, 0xFF	; 255
    6870:	06 c0       	rjmp	.+12     	; 0x687e <vfprintf+0x2b8>
    6872:	60 81       	ld	r22, Z
    6874:	71 81       	ldd	r23, Z+1	; 0x01
    6876:	80 e0       	ldi	r24, 0x00	; 0
    6878:	90 e0       	ldi	r25, 0x00	; 0
    687a:	0e 5f       	subi	r16, 0xFE	; 254
    687c:	1f 4f       	sbci	r17, 0xFF	; 255
    687e:	a3 01       	movw	r20, r6
    6880:	3c d6       	rcall	.+3192   	; 0x74fa <__ultoa_invert>
    6882:	88 2e       	mov	r8, r24
    6884:	86 18       	sub	r8, r6
    6886:	fb 2d       	mov	r31, r11
    6888:	ff 77       	andi	r31, 0x7F	; 127
    688a:	3f 2e       	mov	r3, r31
    688c:	36 fe       	sbrs	r3, 6
    688e:	0d c0       	rjmp	.+26     	; 0x68aa <vfprintf+0x2e4>
    6890:	23 2d       	mov	r18, r3
    6892:	2e 7f       	andi	r18, 0xFE	; 254
    6894:	a2 2e       	mov	r10, r18
    6896:	89 14       	cp	r8, r9
    6898:	58 f4       	brcc	.+22     	; 0x68b0 <vfprintf+0x2ea>
    689a:	34 fe       	sbrs	r3, 4
    689c:	0b c0       	rjmp	.+22     	; 0x68b4 <vfprintf+0x2ee>
    689e:	32 fc       	sbrc	r3, 2
    68a0:	09 c0       	rjmp	.+18     	; 0x68b4 <vfprintf+0x2ee>
    68a2:	83 2d       	mov	r24, r3
    68a4:	8e 7e       	andi	r24, 0xEE	; 238
    68a6:	a8 2e       	mov	r10, r24
    68a8:	05 c0       	rjmp	.+10     	; 0x68b4 <vfprintf+0x2ee>
    68aa:	b8 2c       	mov	r11, r8
    68ac:	a3 2c       	mov	r10, r3
    68ae:	03 c0       	rjmp	.+6      	; 0x68b6 <vfprintf+0x2f0>
    68b0:	b8 2c       	mov	r11, r8
    68b2:	01 c0       	rjmp	.+2      	; 0x68b6 <vfprintf+0x2f0>
    68b4:	b9 2c       	mov	r11, r9
    68b6:	a4 fe       	sbrs	r10, 4
    68b8:	0f c0       	rjmp	.+30     	; 0x68d8 <vfprintf+0x312>
    68ba:	fe 01       	movw	r30, r28
    68bc:	e8 0d       	add	r30, r8
    68be:	f1 1d       	adc	r31, r1
    68c0:	80 81       	ld	r24, Z
    68c2:	80 33       	cpi	r24, 0x30	; 48
    68c4:	21 f4       	brne	.+8      	; 0x68ce <vfprintf+0x308>
    68c6:	9a 2d       	mov	r25, r10
    68c8:	99 7e       	andi	r25, 0xE9	; 233
    68ca:	a9 2e       	mov	r10, r25
    68cc:	09 c0       	rjmp	.+18     	; 0x68e0 <vfprintf+0x31a>
    68ce:	a2 fe       	sbrs	r10, 2
    68d0:	06 c0       	rjmp	.+12     	; 0x68de <vfprintf+0x318>
    68d2:	b3 94       	inc	r11
    68d4:	b3 94       	inc	r11
    68d6:	04 c0       	rjmp	.+8      	; 0x68e0 <vfprintf+0x31a>
    68d8:	8a 2d       	mov	r24, r10
    68da:	86 78       	andi	r24, 0x86	; 134
    68dc:	09 f0       	breq	.+2      	; 0x68e0 <vfprintf+0x31a>
    68de:	b3 94       	inc	r11
    68e0:	a3 fc       	sbrc	r10, 3
    68e2:	10 c0       	rjmp	.+32     	; 0x6904 <vfprintf+0x33e>
    68e4:	a0 fe       	sbrs	r10, 0
    68e6:	06 c0       	rjmp	.+12     	; 0x68f4 <vfprintf+0x32e>
    68e8:	b2 14       	cp	r11, r2
    68ea:	80 f4       	brcc	.+32     	; 0x690c <vfprintf+0x346>
    68ec:	28 0c       	add	r2, r8
    68ee:	92 2c       	mov	r9, r2
    68f0:	9b 18       	sub	r9, r11
    68f2:	0d c0       	rjmp	.+26     	; 0x690e <vfprintf+0x348>
    68f4:	b2 14       	cp	r11, r2
    68f6:	58 f4       	brcc	.+22     	; 0x690e <vfprintf+0x348>
    68f8:	b6 01       	movw	r22, r12
    68fa:	80 e2       	ldi	r24, 0x20	; 32
    68fc:	90 e0       	ldi	r25, 0x00	; 0
    68fe:	a8 d5       	rcall	.+2896   	; 0x7450 <fputc>
    6900:	b3 94       	inc	r11
    6902:	f8 cf       	rjmp	.-16     	; 0x68f4 <vfprintf+0x32e>
    6904:	b2 14       	cp	r11, r2
    6906:	18 f4       	brcc	.+6      	; 0x690e <vfprintf+0x348>
    6908:	2b 18       	sub	r2, r11
    690a:	02 c0       	rjmp	.+4      	; 0x6910 <vfprintf+0x34a>
    690c:	98 2c       	mov	r9, r8
    690e:	21 2c       	mov	r2, r1
    6910:	a4 fe       	sbrs	r10, 4
    6912:	0f c0       	rjmp	.+30     	; 0x6932 <vfprintf+0x36c>
    6914:	b6 01       	movw	r22, r12
    6916:	80 e3       	ldi	r24, 0x30	; 48
    6918:	90 e0       	ldi	r25, 0x00	; 0
    691a:	9a d5       	rcall	.+2868   	; 0x7450 <fputc>
    691c:	a2 fe       	sbrs	r10, 2
    691e:	16 c0       	rjmp	.+44     	; 0x694c <vfprintf+0x386>
    6920:	a1 fc       	sbrc	r10, 1
    6922:	03 c0       	rjmp	.+6      	; 0x692a <vfprintf+0x364>
    6924:	88 e7       	ldi	r24, 0x78	; 120
    6926:	90 e0       	ldi	r25, 0x00	; 0
    6928:	02 c0       	rjmp	.+4      	; 0x692e <vfprintf+0x368>
    692a:	88 e5       	ldi	r24, 0x58	; 88
    692c:	90 e0       	ldi	r25, 0x00	; 0
    692e:	b6 01       	movw	r22, r12
    6930:	0c c0       	rjmp	.+24     	; 0x694a <vfprintf+0x384>
    6932:	8a 2d       	mov	r24, r10
    6934:	86 78       	andi	r24, 0x86	; 134
    6936:	51 f0       	breq	.+20     	; 0x694c <vfprintf+0x386>
    6938:	a1 fe       	sbrs	r10, 1
    693a:	02 c0       	rjmp	.+4      	; 0x6940 <vfprintf+0x37a>
    693c:	8b e2       	ldi	r24, 0x2B	; 43
    693e:	01 c0       	rjmp	.+2      	; 0x6942 <vfprintf+0x37c>
    6940:	80 e2       	ldi	r24, 0x20	; 32
    6942:	a7 fc       	sbrc	r10, 7
    6944:	8d e2       	ldi	r24, 0x2D	; 45
    6946:	b6 01       	movw	r22, r12
    6948:	90 e0       	ldi	r25, 0x00	; 0
    694a:	82 d5       	rcall	.+2820   	; 0x7450 <fputc>
    694c:	89 14       	cp	r8, r9
    694e:	30 f4       	brcc	.+12     	; 0x695c <vfprintf+0x396>
    6950:	b6 01       	movw	r22, r12
    6952:	80 e3       	ldi	r24, 0x30	; 48
    6954:	90 e0       	ldi	r25, 0x00	; 0
    6956:	7c d5       	rcall	.+2808   	; 0x7450 <fputc>
    6958:	9a 94       	dec	r9
    695a:	f8 cf       	rjmp	.-16     	; 0x694c <vfprintf+0x386>
    695c:	8a 94       	dec	r8
    695e:	f3 01       	movw	r30, r6
    6960:	e8 0d       	add	r30, r8
    6962:	f1 1d       	adc	r31, r1
    6964:	80 81       	ld	r24, Z
    6966:	b6 01       	movw	r22, r12
    6968:	90 e0       	ldi	r25, 0x00	; 0
    696a:	72 d5       	rcall	.+2788   	; 0x7450 <fputc>
    696c:	81 10       	cpse	r8, r1
    696e:	f6 cf       	rjmp	.-20     	; 0x695c <vfprintf+0x396>
    6970:	22 20       	and	r2, r2
    6972:	09 f4       	brne	.+2      	; 0x6976 <vfprintf+0x3b0>
    6974:	4e ce       	rjmp	.-868    	; 0x6612 <vfprintf+0x4c>
    6976:	b6 01       	movw	r22, r12
    6978:	80 e2       	ldi	r24, 0x20	; 32
    697a:	90 e0       	ldi	r25, 0x00	; 0
    697c:	69 d5       	rcall	.+2770   	; 0x7450 <fputc>
    697e:	2a 94       	dec	r2
    6980:	f7 cf       	rjmp	.-18     	; 0x6970 <vfprintf+0x3aa>
    6982:	f6 01       	movw	r30, r12
    6984:	86 81       	ldd	r24, Z+6	; 0x06
    6986:	97 81       	ldd	r25, Z+7	; 0x07
    6988:	02 c0       	rjmp	.+4      	; 0x698e <vfprintf+0x3c8>
    698a:	8f ef       	ldi	r24, 0xFF	; 255
    698c:	9f ef       	ldi	r25, 0xFF	; 255
    698e:	2b 96       	adiw	r28, 0x0b	; 11
    6990:	0f b6       	in	r0, 0x3f	; 63
    6992:	f8 94       	cli
    6994:	de bf       	out	0x3e, r29	; 62
    6996:	0f be       	out	0x3f, r0	; 63
    6998:	cd bf       	out	0x3d, r28	; 61
    699a:	df 91       	pop	r29
    699c:	cf 91       	pop	r28
    699e:	1f 91       	pop	r17
    69a0:	0f 91       	pop	r16
    69a2:	ff 90       	pop	r15
    69a4:	ef 90       	pop	r14
    69a6:	df 90       	pop	r13
    69a8:	cf 90       	pop	r12
    69aa:	bf 90       	pop	r11
    69ac:	af 90       	pop	r10
    69ae:	9f 90       	pop	r9
    69b0:	8f 90       	pop	r8
    69b2:	7f 90       	pop	r7
    69b4:	6f 90       	pop	r6
    69b6:	5f 90       	pop	r5
    69b8:	4f 90       	pop	r4
    69ba:	3f 90       	pop	r3
    69bc:	2f 90       	pop	r2
    69be:	08 95       	ret

000069c0 <putval>:
    69c0:	20 fd       	sbrc	r18, 0
    69c2:	09 c0       	rjmp	.+18     	; 0x69d6 <putval+0x16>
    69c4:	fc 01       	movw	r30, r24
    69c6:	23 fd       	sbrc	r18, 3
    69c8:	05 c0       	rjmp	.+10     	; 0x69d4 <putval+0x14>
    69ca:	22 ff       	sbrs	r18, 2
    69cc:	02 c0       	rjmp	.+4      	; 0x69d2 <putval+0x12>
    69ce:	73 83       	std	Z+3, r23	; 0x03
    69d0:	62 83       	std	Z+2, r22	; 0x02
    69d2:	51 83       	std	Z+1, r21	; 0x01
    69d4:	40 83       	st	Z, r20
    69d6:	08 95       	ret

000069d8 <mulacc>:
    69d8:	44 fd       	sbrc	r20, 4
    69da:	17 c0       	rjmp	.+46     	; 0x6a0a <mulacc+0x32>
    69dc:	46 fd       	sbrc	r20, 6
    69de:	17 c0       	rjmp	.+46     	; 0x6a0e <mulacc+0x36>
    69e0:	ab 01       	movw	r20, r22
    69e2:	bc 01       	movw	r22, r24
    69e4:	da 01       	movw	r26, r20
    69e6:	fb 01       	movw	r30, r22
    69e8:	aa 0f       	add	r26, r26
    69ea:	bb 1f       	adc	r27, r27
    69ec:	ee 1f       	adc	r30, r30
    69ee:	ff 1f       	adc	r31, r31
    69f0:	10 94       	com	r1
    69f2:	d1 f7       	brne	.-12     	; 0x69e8 <mulacc+0x10>
    69f4:	4a 0f       	add	r20, r26
    69f6:	5b 1f       	adc	r21, r27
    69f8:	6e 1f       	adc	r22, r30
    69fa:	7f 1f       	adc	r23, r31
    69fc:	cb 01       	movw	r24, r22
    69fe:	ba 01       	movw	r22, r20
    6a00:	66 0f       	add	r22, r22
    6a02:	77 1f       	adc	r23, r23
    6a04:	88 1f       	adc	r24, r24
    6a06:	99 1f       	adc	r25, r25
    6a08:	09 c0       	rjmp	.+18     	; 0x6a1c <mulacc+0x44>
    6a0a:	33 e0       	ldi	r19, 0x03	; 3
    6a0c:	01 c0       	rjmp	.+2      	; 0x6a10 <mulacc+0x38>
    6a0e:	34 e0       	ldi	r19, 0x04	; 4
    6a10:	66 0f       	add	r22, r22
    6a12:	77 1f       	adc	r23, r23
    6a14:	88 1f       	adc	r24, r24
    6a16:	99 1f       	adc	r25, r25
    6a18:	31 50       	subi	r19, 0x01	; 1
    6a1a:	d1 f7       	brne	.-12     	; 0x6a10 <mulacc+0x38>
    6a1c:	62 0f       	add	r22, r18
    6a1e:	71 1d       	adc	r23, r1
    6a20:	81 1d       	adc	r24, r1
    6a22:	91 1d       	adc	r25, r1
    6a24:	08 95       	ret

00006a26 <skip_spaces>:
    6a26:	0f 93       	push	r16
    6a28:	1f 93       	push	r17
    6a2a:	cf 93       	push	r28
    6a2c:	df 93       	push	r29
    6a2e:	8c 01       	movw	r16, r24
    6a30:	c8 01       	movw	r24, r16
    6a32:	65 dc       	rcall	.-1846   	; 0x62fe <fgetc>
    6a34:	ec 01       	movw	r28, r24
    6a36:	97 fd       	sbrc	r25, 7
    6a38:	06 c0       	rjmp	.+12     	; 0x6a46 <skip_spaces+0x20>
    6a3a:	04 dc       	rcall	.-2040   	; 0x6244 <isspace>
    6a3c:	89 2b       	or	r24, r25
    6a3e:	c1 f7       	brne	.-16     	; 0x6a30 <skip_spaces+0xa>
    6a40:	b8 01       	movw	r22, r16
    6a42:	ce 01       	movw	r24, r28
    6a44:	41 d5       	rcall	.+2690   	; 0x74c8 <ungetc>
    6a46:	ce 01       	movw	r24, r28
    6a48:	df 91       	pop	r29
    6a4a:	cf 91       	pop	r28
    6a4c:	1f 91       	pop	r17
    6a4e:	0f 91       	pop	r16
    6a50:	08 95       	ret

00006a52 <conv_int>:
    6a52:	8f 92       	push	r8
    6a54:	9f 92       	push	r9
    6a56:	af 92       	push	r10
    6a58:	bf 92       	push	r11
    6a5a:	ef 92       	push	r14
    6a5c:	ff 92       	push	r15
    6a5e:	0f 93       	push	r16
    6a60:	1f 93       	push	r17
    6a62:	cf 93       	push	r28
    6a64:	df 93       	push	r29
    6a66:	8c 01       	movw	r16, r24
    6a68:	d6 2f       	mov	r29, r22
    6a6a:	7a 01       	movw	r14, r20
    6a6c:	b2 2e       	mov	r11, r18
    6a6e:	47 dc       	rcall	.-1906   	; 0x62fe <fgetc>
    6a70:	9c 01       	movw	r18, r24
    6a72:	33 27       	eor	r19, r19
    6a74:	2b 32       	cpi	r18, 0x2B	; 43
    6a76:	31 05       	cpc	r19, r1
    6a78:	31 f0       	breq	.+12     	; 0x6a86 <conv_int+0x34>
    6a7a:	2d 32       	cpi	r18, 0x2D	; 45
    6a7c:	31 05       	cpc	r19, r1
    6a7e:	59 f4       	brne	.+22     	; 0x6a96 <conv_int+0x44>
    6a80:	8b 2d       	mov	r24, r11
    6a82:	80 68       	ori	r24, 0x80	; 128
    6a84:	b8 2e       	mov	r11, r24
    6a86:	d1 50       	subi	r29, 0x01	; 1
    6a88:	11 f4       	brne	.+4      	; 0x6a8e <conv_int+0x3c>
    6a8a:	80 e0       	ldi	r24, 0x00	; 0
    6a8c:	61 c0       	rjmp	.+194    	; 0x6b50 <conv_int+0xfe>
    6a8e:	c8 01       	movw	r24, r16
    6a90:	36 dc       	rcall	.-1940   	; 0x62fe <fgetc>
    6a92:	97 fd       	sbrc	r25, 7
    6a94:	fa cf       	rjmp	.-12     	; 0x6a8a <conv_int+0x38>
    6a96:	cb 2d       	mov	r28, r11
    6a98:	cd 7f       	andi	r28, 0xFD	; 253
    6a9a:	2b 2d       	mov	r18, r11
    6a9c:	20 73       	andi	r18, 0x30	; 48
    6a9e:	f9 f4       	brne	.+62     	; 0x6ade <conv_int+0x8c>
    6aa0:	80 33       	cpi	r24, 0x30	; 48
    6aa2:	e9 f4       	brne	.+58     	; 0x6ade <conv_int+0x8c>
    6aa4:	aa 24       	eor	r10, r10
    6aa6:	aa 94       	dec	r10
    6aa8:	ad 0e       	add	r10, r29
    6aaa:	09 f4       	brne	.+2      	; 0x6aae <conv_int+0x5c>
    6aac:	3e c0       	rjmp	.+124    	; 0x6b2a <conv_int+0xd8>
    6aae:	c8 01       	movw	r24, r16
    6ab0:	26 dc       	rcall	.-1972   	; 0x62fe <fgetc>
    6ab2:	97 fd       	sbrc	r25, 7
    6ab4:	3a c0       	rjmp	.+116    	; 0x6b2a <conv_int+0xd8>
    6ab6:	9c 01       	movw	r18, r24
    6ab8:	2f 7d       	andi	r18, 0xDF	; 223
    6aba:	33 27       	eor	r19, r19
    6abc:	28 35       	cpi	r18, 0x58	; 88
    6abe:	31 05       	cpc	r19, r1
    6ac0:	41 f4       	brne	.+16     	; 0x6ad2 <conv_int+0x80>
    6ac2:	c2 64       	ori	r28, 0x42	; 66
    6ac4:	d2 50       	subi	r29, 0x02	; 2
    6ac6:	89 f1       	breq	.+98     	; 0x6b2a <conv_int+0xd8>
    6ac8:	c8 01       	movw	r24, r16
    6aca:	19 dc       	rcall	.-1998   	; 0x62fe <fgetc>
    6acc:	97 ff       	sbrs	r25, 7
    6ace:	07 c0       	rjmp	.+14     	; 0x6ade <conv_int+0x8c>
    6ad0:	2c c0       	rjmp	.+88     	; 0x6b2a <conv_int+0xd8>
    6ad2:	b6 fe       	sbrs	r11, 6
    6ad4:	02 c0       	rjmp	.+4      	; 0x6ada <conv_int+0x88>
    6ad6:	c2 60       	ori	r28, 0x02	; 2
    6ad8:	01 c0       	rjmp	.+2      	; 0x6adc <conv_int+0x8a>
    6ada:	c2 61       	ori	r28, 0x12	; 18
    6adc:	da 2d       	mov	r29, r10
    6ade:	81 2c       	mov	r8, r1
    6ae0:	91 2c       	mov	r9, r1
    6ae2:	54 01       	movw	r10, r8
    6ae4:	20 ed       	ldi	r18, 0xD0	; 208
    6ae6:	28 0f       	add	r18, r24
    6ae8:	28 30       	cpi	r18, 0x08	; 8
    6aea:	78 f0       	brcs	.+30     	; 0x6b0a <conv_int+0xb8>
    6aec:	c4 ff       	sbrs	r28, 4
    6aee:	03 c0       	rjmp	.+6      	; 0x6af6 <conv_int+0xa4>
    6af0:	b8 01       	movw	r22, r16
    6af2:	ea d4       	rcall	.+2516   	; 0x74c8 <ungetc>
    6af4:	17 c0       	rjmp	.+46     	; 0x6b24 <conv_int+0xd2>
    6af6:	2a 30       	cpi	r18, 0x0A	; 10
    6af8:	40 f0       	brcs	.+16     	; 0x6b0a <conv_int+0xb8>
    6afa:	c6 ff       	sbrs	r28, 6
    6afc:	f9 cf       	rjmp	.-14     	; 0x6af0 <conv_int+0x9e>
    6afe:	2f 7d       	andi	r18, 0xDF	; 223
    6b00:	3f ee       	ldi	r19, 0xEF	; 239
    6b02:	32 0f       	add	r19, r18
    6b04:	36 30       	cpi	r19, 0x06	; 6
    6b06:	a0 f7       	brcc	.-24     	; 0x6af0 <conv_int+0x9e>
    6b08:	27 50       	subi	r18, 0x07	; 7
    6b0a:	4c 2f       	mov	r20, r28
    6b0c:	c5 01       	movw	r24, r10
    6b0e:	b4 01       	movw	r22, r8
    6b10:	63 df       	rcall	.-314    	; 0x69d8 <mulacc>
    6b12:	4b 01       	movw	r8, r22
    6b14:	5c 01       	movw	r10, r24
    6b16:	c2 60       	ori	r28, 0x02	; 2
    6b18:	d1 50       	subi	r29, 0x01	; 1
    6b1a:	51 f0       	breq	.+20     	; 0x6b30 <conv_int+0xde>
    6b1c:	c8 01       	movw	r24, r16
    6b1e:	ef db       	rcall	.-2082   	; 0x62fe <fgetc>
    6b20:	97 ff       	sbrs	r25, 7
    6b22:	e0 cf       	rjmp	.-64     	; 0x6ae4 <conv_int+0x92>
    6b24:	c1 fd       	sbrc	r28, 1
    6b26:	04 c0       	rjmp	.+8      	; 0x6b30 <conv_int+0xde>
    6b28:	b0 cf       	rjmp	.-160    	; 0x6a8a <conv_int+0x38>
    6b2a:	81 2c       	mov	r8, r1
    6b2c:	91 2c       	mov	r9, r1
    6b2e:	54 01       	movw	r10, r8
    6b30:	c7 ff       	sbrs	r28, 7
    6b32:	08 c0       	rjmp	.+16     	; 0x6b44 <conv_int+0xf2>
    6b34:	b0 94       	com	r11
    6b36:	a0 94       	com	r10
    6b38:	90 94       	com	r9
    6b3a:	80 94       	com	r8
    6b3c:	81 1c       	adc	r8, r1
    6b3e:	91 1c       	adc	r9, r1
    6b40:	a1 1c       	adc	r10, r1
    6b42:	b1 1c       	adc	r11, r1
    6b44:	2c 2f       	mov	r18, r28
    6b46:	b5 01       	movw	r22, r10
    6b48:	a4 01       	movw	r20, r8
    6b4a:	c7 01       	movw	r24, r14
    6b4c:	39 df       	rcall	.-398    	; 0x69c0 <putval>
    6b4e:	81 e0       	ldi	r24, 0x01	; 1
    6b50:	df 91       	pop	r29
    6b52:	cf 91       	pop	r28
    6b54:	1f 91       	pop	r17
    6b56:	0f 91       	pop	r16
    6b58:	ff 90       	pop	r15
    6b5a:	ef 90       	pop	r14
    6b5c:	bf 90       	pop	r11
    6b5e:	af 90       	pop	r10
    6b60:	9f 90       	pop	r9
    6b62:	8f 90       	pop	r8
    6b64:	08 95       	ret

00006b66 <conv_brk>:
    6b66:	5f 92       	push	r5
    6b68:	6f 92       	push	r6
    6b6a:	7f 92       	push	r7
    6b6c:	8f 92       	push	r8
    6b6e:	9f 92       	push	r9
    6b70:	af 92       	push	r10
    6b72:	bf 92       	push	r11
    6b74:	cf 92       	push	r12
    6b76:	df 92       	push	r13
    6b78:	ef 92       	push	r14
    6b7a:	ff 92       	push	r15
    6b7c:	0f 93       	push	r16
    6b7e:	1f 93       	push	r17
    6b80:	cf 93       	push	r28
    6b82:	df 93       	push	r29
    6b84:	cd b7       	in	r28, 0x3d	; 61
    6b86:	de b7       	in	r29, 0x3e	; 62
    6b88:	a0 97       	sbiw	r28, 0x20	; 32
    6b8a:	0f b6       	in	r0, 0x3f	; 63
    6b8c:	f8 94       	cli
    6b8e:	de bf       	out	0x3e, r29	; 62
    6b90:	0f be       	out	0x3f, r0	; 63
    6b92:	cd bf       	out	0x3d, r28	; 61
    6b94:	5c 01       	movw	r10, r24
    6b96:	96 2e       	mov	r9, r22
    6b98:	7a 01       	movw	r14, r20
    6b9a:	f9 01       	movw	r30, r18
    6b9c:	8e 01       	movw	r16, r28
    6b9e:	0f 5f       	subi	r16, 0xFF	; 255
    6ba0:	1f 4f       	sbci	r17, 0xFF	; 255
    6ba2:	68 01       	movw	r12, r16
    6ba4:	80 e2       	ldi	r24, 0x20	; 32
    6ba6:	d8 01       	movw	r26, r16
    6ba8:	1d 92       	st	X+, r1
    6baa:	8a 95       	dec	r24
    6bac:	e9 f7       	brne	.-6      	; 0x6ba8 <conv_brk+0x42>
    6bae:	d5 01       	movw	r26, r10
    6bb0:	13 96       	adiw	r26, 0x03	; 3
    6bb2:	8c 90       	ld	r8, X
    6bb4:	80 e0       	ldi	r24, 0x00	; 0
    6bb6:	90 e0       	ldi	r25, 0x00	; 0
    6bb8:	61 2c       	mov	r6, r1
    6bba:	71 2c       	mov	r7, r1
    6bbc:	30 e0       	ldi	r19, 0x00	; 0
    6bbe:	61 e0       	ldi	r22, 0x01	; 1
    6bc0:	70 e0       	ldi	r23, 0x00	; 0
    6bc2:	83 fc       	sbrc	r8, 3
    6bc4:	25 91       	lpm	r18, Z+
    6bc6:	83 fe       	sbrs	r8, 3
    6bc8:	21 91       	ld	r18, Z+
    6bca:	8f 01       	movw	r16, r30
    6bcc:	52 2e       	mov	r5, r18
    6bce:	21 11       	cpse	r18, r1
    6bd0:	03 c0       	rjmp	.+6      	; 0x6bd8 <conv_brk+0x72>
    6bd2:	80 e0       	ldi	r24, 0x00	; 0
    6bd4:	90 e0       	ldi	r25, 0x00	; 0
    6bd6:	90 c0       	rjmp	.+288    	; 0x6cf8 <conv_brk+0x192>
    6bd8:	2e 35       	cpi	r18, 0x5E	; 94
    6bda:	11 f4       	brne	.+4      	; 0x6be0 <conv_brk+0x7a>
    6bdc:	00 97       	sbiw	r24, 0x00	; 0
    6bde:	51 f1       	breq	.+84     	; 0x6c34 <conv_brk+0xce>
    6be0:	43 2f       	mov	r20, r19
    6be2:	50 e0       	ldi	r21, 0x00	; 0
    6be4:	48 17       	cp	r20, r24
    6be6:	59 07       	cpc	r21, r25
    6be8:	3c f4       	brge	.+14     	; 0x6bf8 <conv_brk+0x92>
    6bea:	2d 35       	cpi	r18, 0x5D	; 93
    6bec:	59 f1       	breq	.+86     	; 0x6c44 <conv_brk+0xde>
    6bee:	2d 32       	cpi	r18, 0x2D	; 45
    6bf0:	19 f4       	brne	.+6      	; 0x6bf8 <conv_brk+0x92>
    6bf2:	77 20       	and	r7, r7
    6bf4:	09 f1       	breq	.+66     	; 0x6c38 <conv_brk+0xd2>
    6bf6:	03 c0       	rjmp	.+6      	; 0x6bfe <conv_brk+0x98>
    6bf8:	77 20       	and	r7, r7
    6bfa:	09 f4       	brne	.+2      	; 0x6bfe <conv_brk+0x98>
    6bfc:	68 c0       	rjmp	.+208    	; 0x6cce <conv_brk+0x168>
    6bfe:	45 2d       	mov	r20, r5
    6c00:	46 95       	lsr	r20
    6c02:	46 95       	lsr	r20
    6c04:	46 95       	lsr	r20
    6c06:	d6 01       	movw	r26, r12
    6c08:	a4 0f       	add	r26, r20
    6c0a:	b1 1d       	adc	r27, r1
    6c0c:	45 2d       	mov	r20, r5
    6c0e:	47 70       	andi	r20, 0x07	; 7
    6c10:	8b 01       	movw	r16, r22
    6c12:	02 c0       	rjmp	.+4      	; 0x6c18 <conv_brk+0xb2>
    6c14:	00 0f       	add	r16, r16
    6c16:	11 1f       	adc	r17, r17
    6c18:	4a 95       	dec	r20
    6c1a:	e2 f7       	brpl	.-8      	; 0x6c14 <conv_brk+0xae>
    6c1c:	a8 01       	movw	r20, r16
    6c1e:	5c 91       	ld	r21, X
    6c20:	45 2b       	or	r20, r21
    6c22:	4c 93       	st	X, r20
    6c24:	65 14       	cp	r6, r5
    6c26:	59 f0       	breq	.+22     	; 0x6c3e <conv_brk+0xd8>
    6c28:	56 14       	cp	r5, r6
    6c2a:	10 f4       	brcc	.+4      	; 0x6c30 <conv_brk+0xca>
    6c2c:	53 94       	inc	r5
    6c2e:	e7 cf       	rjmp	.-50     	; 0x6bfe <conv_brk+0x98>
    6c30:	5a 94       	dec	r5
    6c32:	e5 cf       	rjmp	.-54     	; 0x6bfe <conv_brk+0x98>
    6c34:	31 e0       	ldi	r19, 0x01	; 1
    6c36:	04 c0       	rjmp	.+8      	; 0x6c40 <conv_brk+0xda>
    6c38:	77 24       	eor	r7, r7
    6c3a:	73 94       	inc	r7
    6c3c:	01 c0       	rjmp	.+2      	; 0x6c40 <conv_brk+0xda>
    6c3e:	71 2c       	mov	r7, r1
    6c40:	01 96       	adiw	r24, 0x01	; 1
    6c42:	bf cf       	rjmp	.-130    	; 0x6bc2 <conv_brk+0x5c>
    6c44:	77 20       	and	r7, r7
    6c46:	19 f0       	breq	.+6      	; 0x6c4e <conv_brk+0xe8>
    6c48:	8e 81       	ldd	r24, Y+6	; 0x06
    6c4a:	80 62       	ori	r24, 0x20	; 32
    6c4c:	8e 83       	std	Y+6, r24	; 0x06
    6c4e:	31 11       	cpse	r19, r1
    6c50:	03 c0       	rjmp	.+6      	; 0x6c58 <conv_brk+0xf2>
    6c52:	88 24       	eor	r8, r8
    6c54:	83 94       	inc	r8
    6c56:	17 c0       	rjmp	.+46     	; 0x6c86 <conv_brk+0x120>
    6c58:	f6 01       	movw	r30, r12
    6c5a:	9e 01       	movw	r18, r28
    6c5c:	2f 5d       	subi	r18, 0xDF	; 223
    6c5e:	3f 4f       	sbci	r19, 0xFF	; 255
    6c60:	80 81       	ld	r24, Z
    6c62:	80 95       	com	r24
    6c64:	81 93       	st	Z+, r24
    6c66:	2e 17       	cp	r18, r30
    6c68:	3f 07       	cpc	r19, r31
    6c6a:	d1 f7       	brne	.-12     	; 0x6c60 <conv_brk+0xfa>
    6c6c:	f2 cf       	rjmp	.-28     	; 0x6c52 <conv_brk+0xec>
    6c6e:	e1 14       	cp	r14, r1
    6c70:	f1 04       	cpc	r15, r1
    6c72:	29 f0       	breq	.+10     	; 0x6c7e <conv_brk+0x118>
    6c74:	d7 01       	movw	r26, r14
    6c76:	8c 93       	st	X, r24
    6c78:	f7 01       	movw	r30, r14
    6c7a:	31 96       	adiw	r30, 0x01	; 1
    6c7c:	7f 01       	movw	r14, r30
    6c7e:	9a 94       	dec	r9
    6c80:	81 2c       	mov	r8, r1
    6c82:	99 20       	and	r9, r9
    6c84:	e9 f0       	breq	.+58     	; 0x6cc0 <conv_brk+0x15a>
    6c86:	c5 01       	movw	r24, r10
    6c88:	3a db       	rcall	.-2444   	; 0x62fe <fgetc>
    6c8a:	97 fd       	sbrc	r25, 7
    6c8c:	17 c0       	rjmp	.+46     	; 0x6cbc <conv_brk+0x156>
    6c8e:	fc 01       	movw	r30, r24
    6c90:	ff 27       	eor	r31, r31
    6c92:	23 e0       	ldi	r18, 0x03	; 3
    6c94:	f5 95       	asr	r31
    6c96:	e7 95       	ror	r30
    6c98:	2a 95       	dec	r18
    6c9a:	e1 f7       	brne	.-8      	; 0x6c94 <conv_brk+0x12e>
    6c9c:	ec 0d       	add	r30, r12
    6c9e:	fd 1d       	adc	r31, r13
    6ca0:	20 81       	ld	r18, Z
    6ca2:	30 e0       	ldi	r19, 0x00	; 0
    6ca4:	ac 01       	movw	r20, r24
    6ca6:	47 70       	andi	r20, 0x07	; 7
    6ca8:	55 27       	eor	r21, r21
    6caa:	02 c0       	rjmp	.+4      	; 0x6cb0 <conv_brk+0x14a>
    6cac:	35 95       	asr	r19
    6cae:	27 95       	ror	r18
    6cb0:	4a 95       	dec	r20
    6cb2:	e2 f7       	brpl	.-8      	; 0x6cac <conv_brk+0x146>
    6cb4:	20 fd       	sbrc	r18, 0
    6cb6:	db cf       	rjmp	.-74     	; 0x6c6e <conv_brk+0x108>
    6cb8:	b5 01       	movw	r22, r10
    6cba:	06 d4       	rcall	.+2060   	; 0x74c8 <ungetc>
    6cbc:	81 10       	cpse	r8, r1
    6cbe:	89 cf       	rjmp	.-238    	; 0x6bd2 <conv_brk+0x6c>
    6cc0:	e1 14       	cp	r14, r1
    6cc2:	f1 04       	cpc	r15, r1
    6cc4:	11 f0       	breq	.+4      	; 0x6cca <conv_brk+0x164>
    6cc6:	d7 01       	movw	r26, r14
    6cc8:	1c 92       	st	X, r1
    6cca:	c8 01       	movw	r24, r16
    6ccc:	15 c0       	rjmp	.+42     	; 0x6cf8 <conv_brk+0x192>
    6cce:	42 2f       	mov	r20, r18
    6cd0:	46 95       	lsr	r20
    6cd2:	46 95       	lsr	r20
    6cd4:	46 95       	lsr	r20
    6cd6:	d6 01       	movw	r26, r12
    6cd8:	a4 0f       	add	r26, r20
    6cda:	b1 1d       	adc	r27, r1
    6cdc:	42 2f       	mov	r20, r18
    6cde:	47 70       	andi	r20, 0x07	; 7
    6ce0:	8b 01       	movw	r16, r22
    6ce2:	02 c0       	rjmp	.+4      	; 0x6ce8 <conv_brk+0x182>
    6ce4:	00 0f       	add	r16, r16
    6ce6:	11 1f       	adc	r17, r17
    6ce8:	4a 95       	dec	r20
    6cea:	e2 f7       	brpl	.-8      	; 0x6ce4 <conv_brk+0x17e>
    6cec:	a8 01       	movw	r20, r16
    6cee:	5c 91       	ld	r21, X
    6cf0:	45 2b       	or	r20, r21
    6cf2:	4c 93       	st	X, r20
    6cf4:	62 2e       	mov	r6, r18
    6cf6:	a4 cf       	rjmp	.-184    	; 0x6c40 <conv_brk+0xda>
    6cf8:	a0 96       	adiw	r28, 0x20	; 32
    6cfa:	0f b6       	in	r0, 0x3f	; 63
    6cfc:	f8 94       	cli
    6cfe:	de bf       	out	0x3e, r29	; 62
    6d00:	0f be       	out	0x3f, r0	; 63
    6d02:	cd bf       	out	0x3d, r28	; 61
    6d04:	df 91       	pop	r29
    6d06:	cf 91       	pop	r28
    6d08:	1f 91       	pop	r17
    6d0a:	0f 91       	pop	r16
    6d0c:	ff 90       	pop	r15
    6d0e:	ef 90       	pop	r14
    6d10:	df 90       	pop	r13
    6d12:	cf 90       	pop	r12
    6d14:	bf 90       	pop	r11
    6d16:	af 90       	pop	r10
    6d18:	9f 90       	pop	r9
    6d1a:	8f 90       	pop	r8
    6d1c:	7f 90       	pop	r7
    6d1e:	6f 90       	pop	r6
    6d20:	5f 90       	pop	r5
    6d22:	08 95       	ret

00006d24 <vfscanf>:
    6d24:	5f 92       	push	r5
    6d26:	6f 92       	push	r6
    6d28:	7f 92       	push	r7
    6d2a:	8f 92       	push	r8
    6d2c:	9f 92       	push	r9
    6d2e:	af 92       	push	r10
    6d30:	bf 92       	push	r11
    6d32:	cf 92       	push	r12
    6d34:	df 92       	push	r13
    6d36:	ef 92       	push	r14
    6d38:	ff 92       	push	r15
    6d3a:	0f 93       	push	r16
    6d3c:	1f 93       	push	r17
    6d3e:	cf 93       	push	r28
    6d40:	df 93       	push	r29
    6d42:	6c 01       	movw	r12, r24
    6d44:	eb 01       	movw	r28, r22
    6d46:	5a 01       	movw	r10, r20
    6d48:	fc 01       	movw	r30, r24
    6d4a:	17 82       	std	Z+7, r1	; 0x07
    6d4c:	16 82       	std	Z+6, r1	; 0x06
    6d4e:	51 2c       	mov	r5, r1
    6d50:	f6 01       	movw	r30, r12
    6d52:	e3 80       	ldd	r14, Z+3	; 0x03
    6d54:	fe 01       	movw	r30, r28
    6d56:	e3 fc       	sbrc	r14, 3
    6d58:	85 91       	lpm	r24, Z+
    6d5a:	e3 fe       	sbrs	r14, 3
    6d5c:	81 91       	ld	r24, Z+
    6d5e:	18 2f       	mov	r17, r24
    6d60:	ef 01       	movw	r28, r30
    6d62:	88 23       	and	r24, r24
    6d64:	09 f4       	brne	.+2      	; 0x6d68 <vfscanf+0x44>
    6d66:	e0 c0       	rjmp	.+448    	; 0x6f28 <vfscanf+0x204>
    6d68:	90 e0       	ldi	r25, 0x00	; 0
    6d6a:	6c da       	rcall	.-2856   	; 0x6244 <isspace>
    6d6c:	89 2b       	or	r24, r25
    6d6e:	19 f0       	breq	.+6      	; 0x6d76 <vfscanf+0x52>
    6d70:	c6 01       	movw	r24, r12
    6d72:	59 de       	rcall	.-846    	; 0x6a26 <skip_spaces>
    6d74:	ed cf       	rjmp	.-38     	; 0x6d50 <vfscanf+0x2c>
    6d76:	15 32       	cpi	r17, 0x25	; 37
    6d78:	41 f4       	brne	.+16     	; 0x6d8a <vfscanf+0x66>
    6d7a:	fe 01       	movw	r30, r28
    6d7c:	e3 fc       	sbrc	r14, 3
    6d7e:	15 91       	lpm	r17, Z+
    6d80:	e3 fe       	sbrs	r14, 3
    6d82:	11 91       	ld	r17, Z+
    6d84:	ef 01       	movw	r28, r30
    6d86:	15 32       	cpi	r17, 0x25	; 37
    6d88:	71 f4       	brne	.+28     	; 0x6da6 <vfscanf+0x82>
    6d8a:	c6 01       	movw	r24, r12
    6d8c:	b8 da       	rcall	.-2704   	; 0x62fe <fgetc>
    6d8e:	97 fd       	sbrc	r25, 7
    6d90:	c9 c0       	rjmp	.+402    	; 0x6f24 <vfscanf+0x200>
    6d92:	41 2f       	mov	r20, r17
    6d94:	50 e0       	ldi	r21, 0x00	; 0
    6d96:	9c 01       	movw	r18, r24
    6d98:	33 27       	eor	r19, r19
    6d9a:	24 17       	cp	r18, r20
    6d9c:	35 07       	cpc	r19, r21
    6d9e:	c1 f2       	breq	.-80     	; 0x6d50 <vfscanf+0x2c>
    6da0:	b6 01       	movw	r22, r12
    6da2:	92 d3       	rcall	.+1828   	; 0x74c8 <ungetc>
    6da4:	c1 c0       	rjmp	.+386    	; 0x6f28 <vfscanf+0x204>
    6da6:	1a 32       	cpi	r17, 0x2A	; 42
    6da8:	39 f4       	brne	.+14     	; 0x6db8 <vfscanf+0x94>
    6daa:	e3 fc       	sbrc	r14, 3
    6dac:	15 91       	lpm	r17, Z+
    6dae:	e3 fe       	sbrs	r14, 3
    6db0:	11 91       	ld	r17, Z+
    6db2:	ef 01       	movw	r28, r30
    6db4:	01 e0       	ldi	r16, 0x01	; 1
    6db6:	01 c0       	rjmp	.+2      	; 0x6dba <vfscanf+0x96>
    6db8:	00 e0       	ldi	r16, 0x00	; 0
    6dba:	f1 2c       	mov	r15, r1
    6dbc:	20 ed       	ldi	r18, 0xD0	; 208
    6dbe:	21 0f       	add	r18, r17
    6dc0:	2a 30       	cpi	r18, 0x0A	; 10
    6dc2:	78 f4       	brcc	.+30     	; 0x6de2 <vfscanf+0xbe>
    6dc4:	02 60       	ori	r16, 0x02	; 2
    6dc6:	6f 2d       	mov	r22, r15
    6dc8:	70 e0       	ldi	r23, 0x00	; 0
    6dca:	80 e0       	ldi	r24, 0x00	; 0
    6dcc:	90 e0       	ldi	r25, 0x00	; 0
    6dce:	40 e2       	ldi	r20, 0x20	; 32
    6dd0:	03 de       	rcall	.-1018   	; 0x69d8 <mulacc>
    6dd2:	f6 2e       	mov	r15, r22
    6dd4:	fe 01       	movw	r30, r28
    6dd6:	e3 fc       	sbrc	r14, 3
    6dd8:	15 91       	lpm	r17, Z+
    6dda:	e3 fe       	sbrs	r14, 3
    6ddc:	11 91       	ld	r17, Z+
    6dde:	ef 01       	movw	r28, r30
    6de0:	ed cf       	rjmp	.-38     	; 0x6dbc <vfscanf+0x98>
    6de2:	01 ff       	sbrs	r16, 1
    6de4:	03 c0       	rjmp	.+6      	; 0x6dec <vfscanf+0xc8>
    6de6:	f1 10       	cpse	r15, r1
    6de8:	03 c0       	rjmp	.+6      	; 0x6df0 <vfscanf+0xcc>
    6dea:	9e c0       	rjmp	.+316    	; 0x6f28 <vfscanf+0x204>
    6dec:	ff 24       	eor	r15, r15
    6dee:	fa 94       	dec	r15
    6df0:	18 36       	cpi	r17, 0x68	; 104
    6df2:	19 f0       	breq	.+6      	; 0x6dfa <vfscanf+0xd6>
    6df4:	1c 36       	cpi	r17, 0x6C	; 108
    6df6:	51 f0       	breq	.+20     	; 0x6e0c <vfscanf+0xe8>
    6df8:	10 c0       	rjmp	.+32     	; 0x6e1a <vfscanf+0xf6>
    6dfa:	fe 01       	movw	r30, r28
    6dfc:	e3 fc       	sbrc	r14, 3
    6dfe:	15 91       	lpm	r17, Z+
    6e00:	e3 fe       	sbrs	r14, 3
    6e02:	11 91       	ld	r17, Z+
    6e04:	ef 01       	movw	r28, r30
    6e06:	18 36       	cpi	r17, 0x68	; 104
    6e08:	41 f4       	brne	.+16     	; 0x6e1a <vfscanf+0xf6>
    6e0a:	08 60       	ori	r16, 0x08	; 8
    6e0c:	04 60       	ori	r16, 0x04	; 4
    6e0e:	fe 01       	movw	r30, r28
    6e10:	e3 fc       	sbrc	r14, 3
    6e12:	15 91       	lpm	r17, Z+
    6e14:	e3 fe       	sbrs	r14, 3
    6e16:	11 91       	ld	r17, Z+
    6e18:	ef 01       	movw	r28, r30
    6e1a:	11 23       	and	r17, r17
    6e1c:	09 f4       	brne	.+2      	; 0x6e20 <vfscanf+0xfc>
    6e1e:	84 c0       	rjmp	.+264    	; 0x6f28 <vfscanf+0x204>
    6e20:	61 2f       	mov	r22, r17
    6e22:	70 e0       	ldi	r23, 0x00	; 0
    6e24:	8a ef       	ldi	r24, 0xFA	; 250
    6e26:	90 e0       	ldi	r25, 0x00	; 0
    6e28:	e2 d2       	rcall	.+1476   	; 0x73ee <strchr_P>
    6e2a:	89 2b       	or	r24, r25
    6e2c:	09 f4       	brne	.+2      	; 0x6e30 <vfscanf+0x10c>
    6e2e:	7c c0       	rjmp	.+248    	; 0x6f28 <vfscanf+0x204>
    6e30:	00 fd       	sbrc	r16, 0
    6e32:	07 c0       	rjmp	.+14     	; 0x6e42 <vfscanf+0x11e>
    6e34:	f5 01       	movw	r30, r10
    6e36:	80 80       	ld	r8, Z
    6e38:	91 80       	ldd	r9, Z+1	; 0x01
    6e3a:	c5 01       	movw	r24, r10
    6e3c:	02 96       	adiw	r24, 0x02	; 2
    6e3e:	5c 01       	movw	r10, r24
    6e40:	02 c0       	rjmp	.+4      	; 0x6e46 <vfscanf+0x122>
    6e42:	81 2c       	mov	r8, r1
    6e44:	91 2c       	mov	r9, r1
    6e46:	1e 36       	cpi	r17, 0x6E	; 110
    6e48:	49 f4       	brne	.+18     	; 0x6e5c <vfscanf+0x138>
    6e4a:	f6 01       	movw	r30, r12
    6e4c:	46 81       	ldd	r20, Z+6	; 0x06
    6e4e:	57 81       	ldd	r21, Z+7	; 0x07
    6e50:	60 e0       	ldi	r22, 0x00	; 0
    6e52:	70 e0       	ldi	r23, 0x00	; 0
    6e54:	20 2f       	mov	r18, r16
    6e56:	c4 01       	movw	r24, r8
    6e58:	b3 dd       	rcall	.-1178   	; 0x69c0 <putval>
    6e5a:	7a cf       	rjmp	.-268    	; 0x6d50 <vfscanf+0x2c>
    6e5c:	13 36       	cpi	r17, 0x63	; 99
    6e5e:	a1 f4       	brne	.+40     	; 0x6e88 <vfscanf+0x164>
    6e60:	01 fd       	sbrc	r16, 1
    6e62:	02 c0       	rjmp	.+4      	; 0x6e68 <vfscanf+0x144>
    6e64:	ff 24       	eor	r15, r15
    6e66:	f3 94       	inc	r15
    6e68:	c6 01       	movw	r24, r12
    6e6a:	49 da       	rcall	.-2926   	; 0x62fe <fgetc>
    6e6c:	97 fd       	sbrc	r25, 7
    6e6e:	5a c0       	rjmp	.+180    	; 0x6f24 <vfscanf+0x200>
    6e70:	81 14       	cp	r8, r1
    6e72:	91 04       	cpc	r9, r1
    6e74:	29 f0       	breq	.+10     	; 0x6e80 <vfscanf+0x15c>
    6e76:	f4 01       	movw	r30, r8
    6e78:	80 83       	st	Z, r24
    6e7a:	c4 01       	movw	r24, r8
    6e7c:	01 96       	adiw	r24, 0x01	; 1
    6e7e:	4c 01       	movw	r8, r24
    6e80:	fa 94       	dec	r15
    6e82:	f1 10       	cpse	r15, r1
    6e84:	f1 cf       	rjmp	.-30     	; 0x6e68 <vfscanf+0x144>
    6e86:	4a c0       	rjmp	.+148    	; 0x6f1c <vfscanf+0x1f8>
    6e88:	1b 35       	cpi	r17, 0x5B	; 91
    6e8a:	51 f4       	brne	.+20     	; 0x6ea0 <vfscanf+0x17c>
    6e8c:	9e 01       	movw	r18, r28
    6e8e:	a4 01       	movw	r20, r8
    6e90:	6f 2d       	mov	r22, r15
    6e92:	c6 01       	movw	r24, r12
    6e94:	68 de       	rcall	.-816    	; 0x6b66 <conv_brk>
    6e96:	ec 01       	movw	r28, r24
    6e98:	89 2b       	or	r24, r25
    6e9a:	09 f0       	breq	.+2      	; 0x6e9e <vfscanf+0x17a>
    6e9c:	3f c0       	rjmp	.+126    	; 0x6f1c <vfscanf+0x1f8>
    6e9e:	39 c0       	rjmp	.+114    	; 0x6f12 <vfscanf+0x1ee>
    6ea0:	c6 01       	movw	r24, r12
    6ea2:	c1 dd       	rcall	.-1150   	; 0x6a26 <skip_spaces>
    6ea4:	97 fd       	sbrc	r25, 7
    6ea6:	3e c0       	rjmp	.+124    	; 0x6f24 <vfscanf+0x200>
    6ea8:	1f 36       	cpi	r17, 0x6F	; 111
    6eaa:	49 f1       	breq	.+82     	; 0x6efe <vfscanf+0x1da>
    6eac:	28 f4       	brcc	.+10     	; 0x6eb8 <vfscanf+0x194>
    6eae:	14 36       	cpi	r17, 0x64	; 100
    6eb0:	21 f1       	breq	.+72     	; 0x6efa <vfscanf+0x1d6>
    6eb2:	19 36       	cpi	r17, 0x69	; 105
    6eb4:	39 f1       	breq	.+78     	; 0x6f04 <vfscanf+0x1e0>
    6eb6:	25 c0       	rjmp	.+74     	; 0x6f02 <vfscanf+0x1de>
    6eb8:	13 37       	cpi	r17, 0x73	; 115
    6eba:	71 f0       	breq	.+28     	; 0x6ed8 <vfscanf+0x1b4>
    6ebc:	15 37       	cpi	r17, 0x75	; 117
    6ebe:	e9 f0       	breq	.+58     	; 0x6efa <vfscanf+0x1d6>
    6ec0:	20 c0       	rjmp	.+64     	; 0x6f02 <vfscanf+0x1de>
    6ec2:	81 14       	cp	r8, r1
    6ec4:	91 04       	cpc	r9, r1
    6ec6:	29 f0       	breq	.+10     	; 0x6ed2 <vfscanf+0x1ae>
    6ec8:	f4 01       	movw	r30, r8
    6eca:	60 82       	st	Z, r6
    6ecc:	c4 01       	movw	r24, r8
    6ece:	01 96       	adiw	r24, 0x01	; 1
    6ed0:	4c 01       	movw	r8, r24
    6ed2:	fa 94       	dec	r15
    6ed4:	ff 20       	and	r15, r15
    6ed6:	59 f0       	breq	.+22     	; 0x6eee <vfscanf+0x1ca>
    6ed8:	c6 01       	movw	r24, r12
    6eda:	11 da       	rcall	.-3038   	; 0x62fe <fgetc>
    6edc:	3c 01       	movw	r6, r24
    6ede:	97 fd       	sbrc	r25, 7
    6ee0:	06 c0       	rjmp	.+12     	; 0x6eee <vfscanf+0x1ca>
    6ee2:	b0 d9       	rcall	.-3232   	; 0x6244 <isspace>
    6ee4:	89 2b       	or	r24, r25
    6ee6:	69 f3       	breq	.-38     	; 0x6ec2 <vfscanf+0x19e>
    6ee8:	b6 01       	movw	r22, r12
    6eea:	c3 01       	movw	r24, r6
    6eec:	ed d2       	rcall	.+1498   	; 0x74c8 <ungetc>
    6eee:	81 14       	cp	r8, r1
    6ef0:	91 04       	cpc	r9, r1
    6ef2:	a1 f0       	breq	.+40     	; 0x6f1c <vfscanf+0x1f8>
    6ef4:	f4 01       	movw	r30, r8
    6ef6:	10 82       	st	Z, r1
    6ef8:	11 c0       	rjmp	.+34     	; 0x6f1c <vfscanf+0x1f8>
    6efa:	00 62       	ori	r16, 0x20	; 32
    6efc:	03 c0       	rjmp	.+6      	; 0x6f04 <vfscanf+0x1e0>
    6efe:	00 61       	ori	r16, 0x10	; 16
    6f00:	01 c0       	rjmp	.+2      	; 0x6f04 <vfscanf+0x1e0>
    6f02:	00 64       	ori	r16, 0x40	; 64
    6f04:	20 2f       	mov	r18, r16
    6f06:	a4 01       	movw	r20, r8
    6f08:	6f 2d       	mov	r22, r15
    6f0a:	c6 01       	movw	r24, r12
    6f0c:	a2 dd       	rcall	.-1212   	; 0x6a52 <conv_int>
    6f0e:	81 11       	cpse	r24, r1
    6f10:	05 c0       	rjmp	.+10     	; 0x6f1c <vfscanf+0x1f8>
    6f12:	f6 01       	movw	r30, r12
    6f14:	83 81       	ldd	r24, Z+3	; 0x03
    6f16:	80 73       	andi	r24, 0x30	; 48
    6f18:	29 f4       	brne	.+10     	; 0x6f24 <vfscanf+0x200>
    6f1a:	06 c0       	rjmp	.+12     	; 0x6f28 <vfscanf+0x204>
    6f1c:	00 fd       	sbrc	r16, 0
    6f1e:	18 cf       	rjmp	.-464    	; 0x6d50 <vfscanf+0x2c>
    6f20:	53 94       	inc	r5
    6f22:	16 cf       	rjmp	.-468    	; 0x6d50 <vfscanf+0x2c>
    6f24:	55 20       	and	r5, r5
    6f26:	19 f0       	breq	.+6      	; 0x6f2e <vfscanf+0x20a>
    6f28:	85 2d       	mov	r24, r5
    6f2a:	90 e0       	ldi	r25, 0x00	; 0
    6f2c:	02 c0       	rjmp	.+4      	; 0x6f32 <vfscanf+0x20e>
    6f2e:	8f ef       	ldi	r24, 0xFF	; 255
    6f30:	9f ef       	ldi	r25, 0xFF	; 255
    6f32:	df 91       	pop	r29
    6f34:	cf 91       	pop	r28
    6f36:	1f 91       	pop	r17
    6f38:	0f 91       	pop	r16
    6f3a:	ff 90       	pop	r15
    6f3c:	ef 90       	pop	r14
    6f3e:	df 90       	pop	r13
    6f40:	cf 90       	pop	r12
    6f42:	bf 90       	pop	r11
    6f44:	af 90       	pop	r10
    6f46:	9f 90       	pop	r9
    6f48:	8f 90       	pop	r8
    6f4a:	7f 90       	pop	r7
    6f4c:	6f 90       	pop	r6
    6f4e:	5f 90       	pop	r5
    6f50:	08 95       	ret

00006f52 <dtoa_prf>:
    6f52:	8f 92       	push	r8
    6f54:	9f 92       	push	r9
    6f56:	af 92       	push	r10
    6f58:	bf 92       	push	r11
    6f5a:	cf 92       	push	r12
    6f5c:	df 92       	push	r13
    6f5e:	ef 92       	push	r14
    6f60:	ff 92       	push	r15
    6f62:	0f 93       	push	r16
    6f64:	1f 93       	push	r17
    6f66:	cf 93       	push	r28
    6f68:	df 93       	push	r29
    6f6a:	cd b7       	in	r28, 0x3d	; 61
    6f6c:	de b7       	in	r29, 0x3e	; 62
    6f6e:	29 97       	sbiw	r28, 0x09	; 9
    6f70:	0f b6       	in	r0, 0x3f	; 63
    6f72:	f8 94       	cli
    6f74:	de bf       	out	0x3e, r29	; 62
    6f76:	0f be       	out	0x3f, r0	; 63
    6f78:	cd bf       	out	0x3d, r28	; 61
    6f7a:	6a 01       	movw	r12, r20
    6f7c:	12 2f       	mov	r17, r18
    6f7e:	b0 2e       	mov	r11, r16
    6f80:	2b e3       	ldi	r18, 0x3B	; 59
    6f82:	20 17       	cp	r18, r16
    6f84:	20 f0       	brcs	.+8      	; 0x6f8e <dtoa_prf+0x3c>
    6f86:	ff 24       	eor	r15, r15
    6f88:	f3 94       	inc	r15
    6f8a:	f0 0e       	add	r15, r16
    6f8c:	02 c0       	rjmp	.+4      	; 0x6f92 <dtoa_prf+0x40>
    6f8e:	2c e3       	ldi	r18, 0x3C	; 60
    6f90:	f2 2e       	mov	r15, r18
    6f92:	0f 2d       	mov	r16, r15
    6f94:	27 e0       	ldi	r18, 0x07	; 7
    6f96:	ae 01       	movw	r20, r28
    6f98:	4f 5f       	subi	r20, 0xFF	; 255
    6f9a:	5f 4f       	sbci	r21, 0xFF	; 255
    6f9c:	50 d1       	rcall	.+672    	; 0x723e <__ftoa_engine>
    6f9e:	bc 01       	movw	r22, r24
    6fa0:	49 81       	ldd	r20, Y+1	; 0x01
    6fa2:	84 2f       	mov	r24, r20
    6fa4:	89 70       	andi	r24, 0x09	; 9
    6fa6:	81 30       	cpi	r24, 0x01	; 1
    6fa8:	31 f0       	breq	.+12     	; 0x6fb6 <dtoa_prf+0x64>
    6faa:	e1 fc       	sbrc	r14, 1
    6fac:	06 c0       	rjmp	.+12     	; 0x6fba <dtoa_prf+0x68>
    6fae:	e0 fe       	sbrs	r14, 0
    6fb0:	06 c0       	rjmp	.+12     	; 0x6fbe <dtoa_prf+0x6c>
    6fb2:	90 e2       	ldi	r25, 0x20	; 32
    6fb4:	05 c0       	rjmp	.+10     	; 0x6fc0 <dtoa_prf+0x6e>
    6fb6:	9d e2       	ldi	r25, 0x2D	; 45
    6fb8:	03 c0       	rjmp	.+6      	; 0x6fc0 <dtoa_prf+0x6e>
    6fba:	9b e2       	ldi	r25, 0x2B	; 43
    6fbc:	01 c0       	rjmp	.+2      	; 0x6fc0 <dtoa_prf+0x6e>
    6fbe:	90 e0       	ldi	r25, 0x00	; 0
    6fc0:	5e 2d       	mov	r21, r14
    6fc2:	50 71       	andi	r21, 0x10	; 16
    6fc4:	43 ff       	sbrs	r20, 3
    6fc6:	3c c0       	rjmp	.+120    	; 0x7040 <dtoa_prf+0xee>
    6fc8:	91 11       	cpse	r25, r1
    6fca:	02 c0       	rjmp	.+4      	; 0x6fd0 <dtoa_prf+0x7e>
    6fcc:	83 e0       	ldi	r24, 0x03	; 3
    6fce:	01 c0       	rjmp	.+2      	; 0x6fd2 <dtoa_prf+0x80>
    6fd0:	84 e0       	ldi	r24, 0x04	; 4
    6fd2:	81 17       	cp	r24, r17
    6fd4:	18 f4       	brcc	.+6      	; 0x6fdc <dtoa_prf+0x8a>
    6fd6:	21 2f       	mov	r18, r17
    6fd8:	28 1b       	sub	r18, r24
    6fda:	01 c0       	rjmp	.+2      	; 0x6fde <dtoa_prf+0x8c>
    6fdc:	20 e0       	ldi	r18, 0x00	; 0
    6fde:	51 11       	cpse	r21, r1
    6fe0:	0b c0       	rjmp	.+22     	; 0x6ff8 <dtoa_prf+0xa6>
    6fe2:	f6 01       	movw	r30, r12
    6fe4:	82 2f       	mov	r24, r18
    6fe6:	30 e2       	ldi	r19, 0x20	; 32
    6fe8:	88 23       	and	r24, r24
    6fea:	19 f0       	breq	.+6      	; 0x6ff2 <dtoa_prf+0xa0>
    6fec:	31 93       	st	Z+, r19
    6fee:	81 50       	subi	r24, 0x01	; 1
    6ff0:	fb cf       	rjmp	.-10     	; 0x6fe8 <dtoa_prf+0x96>
    6ff2:	c2 0e       	add	r12, r18
    6ff4:	d1 1c       	adc	r13, r1
    6ff6:	20 e0       	ldi	r18, 0x00	; 0
    6ff8:	99 23       	and	r25, r25
    6ffa:	29 f0       	breq	.+10     	; 0x7006 <dtoa_prf+0xb4>
    6ffc:	d6 01       	movw	r26, r12
    6ffe:	9c 93       	st	X, r25
    7000:	f6 01       	movw	r30, r12
    7002:	31 96       	adiw	r30, 0x01	; 1
    7004:	6f 01       	movw	r12, r30
    7006:	c6 01       	movw	r24, r12
    7008:	03 96       	adiw	r24, 0x03	; 3
    700a:	e2 fe       	sbrs	r14, 2
    700c:	0a c0       	rjmp	.+20     	; 0x7022 <dtoa_prf+0xd0>
    700e:	3e e4       	ldi	r19, 0x4E	; 78
    7010:	d6 01       	movw	r26, r12
    7012:	3c 93       	st	X, r19
    7014:	41 e4       	ldi	r20, 0x41	; 65
    7016:	11 96       	adiw	r26, 0x01	; 1
    7018:	4c 93       	st	X, r20
    701a:	11 97       	sbiw	r26, 0x01	; 1
    701c:	12 96       	adiw	r26, 0x02	; 2
    701e:	3c 93       	st	X, r19
    7020:	06 c0       	rjmp	.+12     	; 0x702e <dtoa_prf+0xdc>
    7022:	3e e6       	ldi	r19, 0x6E	; 110
    7024:	f6 01       	movw	r30, r12
    7026:	30 83       	st	Z, r19
    7028:	41 e6       	ldi	r20, 0x61	; 97
    702a:	41 83       	std	Z+1, r20	; 0x01
    702c:	32 83       	std	Z+2, r19	; 0x02
    702e:	fc 01       	movw	r30, r24
    7030:	32 2f       	mov	r19, r18
    7032:	40 e2       	ldi	r20, 0x20	; 32
    7034:	33 23       	and	r19, r19
    7036:	09 f4       	brne	.+2      	; 0x703a <dtoa_prf+0xe8>
    7038:	42 c0       	rjmp	.+132    	; 0x70be <dtoa_prf+0x16c>
    703a:	41 93       	st	Z+, r20
    703c:	31 50       	subi	r19, 0x01	; 1
    703e:	fa cf       	rjmp	.-12     	; 0x7034 <dtoa_prf+0xe2>
    7040:	42 ff       	sbrs	r20, 2
    7042:	44 c0       	rjmp	.+136    	; 0x70cc <dtoa_prf+0x17a>
    7044:	91 11       	cpse	r25, r1
    7046:	02 c0       	rjmp	.+4      	; 0x704c <dtoa_prf+0xfa>
    7048:	83 e0       	ldi	r24, 0x03	; 3
    704a:	01 c0       	rjmp	.+2      	; 0x704e <dtoa_prf+0xfc>
    704c:	84 e0       	ldi	r24, 0x04	; 4
    704e:	81 17       	cp	r24, r17
    7050:	18 f4       	brcc	.+6      	; 0x7058 <dtoa_prf+0x106>
    7052:	21 2f       	mov	r18, r17
    7054:	28 1b       	sub	r18, r24
    7056:	01 c0       	rjmp	.+2      	; 0x705a <dtoa_prf+0x108>
    7058:	20 e0       	ldi	r18, 0x00	; 0
    705a:	51 11       	cpse	r21, r1
    705c:	0b c0       	rjmp	.+22     	; 0x7074 <dtoa_prf+0x122>
    705e:	f6 01       	movw	r30, r12
    7060:	82 2f       	mov	r24, r18
    7062:	30 e2       	ldi	r19, 0x20	; 32
    7064:	88 23       	and	r24, r24
    7066:	19 f0       	breq	.+6      	; 0x706e <dtoa_prf+0x11c>
    7068:	31 93       	st	Z+, r19
    706a:	81 50       	subi	r24, 0x01	; 1
    706c:	fb cf       	rjmp	.-10     	; 0x7064 <dtoa_prf+0x112>
    706e:	c2 0e       	add	r12, r18
    7070:	d1 1c       	adc	r13, r1
    7072:	20 e0       	ldi	r18, 0x00	; 0
    7074:	99 23       	and	r25, r25
    7076:	29 f0       	breq	.+10     	; 0x7082 <dtoa_prf+0x130>
    7078:	d6 01       	movw	r26, r12
    707a:	9c 93       	st	X, r25
    707c:	f6 01       	movw	r30, r12
    707e:	31 96       	adiw	r30, 0x01	; 1
    7080:	6f 01       	movw	r12, r30
    7082:	c6 01       	movw	r24, r12
    7084:	03 96       	adiw	r24, 0x03	; 3
    7086:	e2 fe       	sbrs	r14, 2
    7088:	0b c0       	rjmp	.+22     	; 0x70a0 <dtoa_prf+0x14e>
    708a:	39 e4       	ldi	r19, 0x49	; 73
    708c:	d6 01       	movw	r26, r12
    708e:	3c 93       	st	X, r19
    7090:	3e e4       	ldi	r19, 0x4E	; 78
    7092:	11 96       	adiw	r26, 0x01	; 1
    7094:	3c 93       	st	X, r19
    7096:	11 97       	sbiw	r26, 0x01	; 1
    7098:	36 e4       	ldi	r19, 0x46	; 70
    709a:	12 96       	adiw	r26, 0x02	; 2
    709c:	3c 93       	st	X, r19
    709e:	07 c0       	rjmp	.+14     	; 0x70ae <dtoa_prf+0x15c>
    70a0:	39 e6       	ldi	r19, 0x69	; 105
    70a2:	f6 01       	movw	r30, r12
    70a4:	30 83       	st	Z, r19
    70a6:	3e e6       	ldi	r19, 0x6E	; 110
    70a8:	31 83       	std	Z+1, r19	; 0x01
    70aa:	36 e6       	ldi	r19, 0x66	; 102
    70ac:	32 83       	std	Z+2, r19	; 0x02
    70ae:	fc 01       	movw	r30, r24
    70b0:	32 2f       	mov	r19, r18
    70b2:	40 e2       	ldi	r20, 0x20	; 32
    70b4:	33 23       	and	r19, r19
    70b6:	19 f0       	breq	.+6      	; 0x70be <dtoa_prf+0x16c>
    70b8:	41 93       	st	Z+, r20
    70ba:	31 50       	subi	r19, 0x01	; 1
    70bc:	fb cf       	rjmp	.-10     	; 0x70b4 <dtoa_prf+0x162>
    70be:	fc 01       	movw	r30, r24
    70c0:	e2 0f       	add	r30, r18
    70c2:	f1 1d       	adc	r31, r1
    70c4:	10 82       	st	Z, r1
    70c6:	8e ef       	ldi	r24, 0xFE	; 254
    70c8:	9f ef       	ldi	r25, 0xFF	; 255
    70ca:	a6 c0       	rjmp	.+332    	; 0x7218 <dtoa_prf+0x2c6>
    70cc:	21 e0       	ldi	r18, 0x01	; 1
    70ce:	30 e0       	ldi	r19, 0x00	; 0
    70d0:	91 11       	cpse	r25, r1
    70d2:	02 c0       	rjmp	.+4      	; 0x70d8 <dtoa_prf+0x186>
    70d4:	20 e0       	ldi	r18, 0x00	; 0
    70d6:	30 e0       	ldi	r19, 0x00	; 0
    70d8:	16 16       	cp	r1, r22
    70da:	17 06       	cpc	r1, r23
    70dc:	1c f4       	brge	.+6      	; 0x70e4 <dtoa_prf+0x192>
    70de:	fb 01       	movw	r30, r22
    70e0:	31 96       	adiw	r30, 0x01	; 1
    70e2:	02 c0       	rjmp	.+4      	; 0x70e8 <dtoa_prf+0x196>
    70e4:	e1 e0       	ldi	r30, 0x01	; 1
    70e6:	f0 e0       	ldi	r31, 0x00	; 0
    70e8:	2e 0f       	add	r18, r30
    70ea:	3f 1f       	adc	r19, r31
    70ec:	bb 20       	and	r11, r11
    70ee:	21 f0       	breq	.+8      	; 0x70f8 <dtoa_prf+0x1a6>
    70f0:	eb 2d       	mov	r30, r11
    70f2:	f0 e0       	ldi	r31, 0x00	; 0
    70f4:	31 96       	adiw	r30, 0x01	; 1
    70f6:	02 c0       	rjmp	.+4      	; 0x70fc <dtoa_prf+0x1aa>
    70f8:	e0 e0       	ldi	r30, 0x00	; 0
    70fa:	f0 e0       	ldi	r31, 0x00	; 0
    70fc:	2e 0f       	add	r18, r30
    70fe:	3f 1f       	adc	r19, r31
    7100:	e1 2f       	mov	r30, r17
    7102:	f0 e0       	ldi	r31, 0x00	; 0
    7104:	2e 17       	cp	r18, r30
    7106:	3f 07       	cpc	r19, r31
    7108:	1c f4       	brge	.+6      	; 0x7110 <dtoa_prf+0x1be>
    710a:	12 1b       	sub	r17, r18
    710c:	21 2f       	mov	r18, r17
    710e:	01 c0       	rjmp	.+2      	; 0x7112 <dtoa_prf+0x1c0>
    7110:	20 e0       	ldi	r18, 0x00	; 0
    7112:	8e 2d       	mov	r24, r14
    7114:	88 71       	andi	r24, 0x18	; 24
    7116:	59 f4       	brne	.+22     	; 0x712e <dtoa_prf+0x1dc>
    7118:	f6 01       	movw	r30, r12
    711a:	82 2f       	mov	r24, r18
    711c:	30 e2       	ldi	r19, 0x20	; 32
    711e:	88 23       	and	r24, r24
    7120:	19 f0       	breq	.+6      	; 0x7128 <dtoa_prf+0x1d6>
    7122:	31 93       	st	Z+, r19
    7124:	81 50       	subi	r24, 0x01	; 1
    7126:	fb cf       	rjmp	.-10     	; 0x711e <dtoa_prf+0x1cc>
    7128:	c2 0e       	add	r12, r18
    712a:	d1 1c       	adc	r13, r1
    712c:	20 e0       	ldi	r18, 0x00	; 0
    712e:	99 23       	and	r25, r25
    7130:	29 f0       	breq	.+10     	; 0x713c <dtoa_prf+0x1ea>
    7132:	d6 01       	movw	r26, r12
    7134:	9c 93       	st	X, r25
    7136:	f6 01       	movw	r30, r12
    7138:	31 96       	adiw	r30, 0x01	; 1
    713a:	6f 01       	movw	r12, r30
    713c:	51 11       	cpse	r21, r1
    713e:	0b c0       	rjmp	.+22     	; 0x7156 <dtoa_prf+0x204>
    7140:	f6 01       	movw	r30, r12
    7142:	82 2f       	mov	r24, r18
    7144:	90 e3       	ldi	r25, 0x30	; 48
    7146:	88 23       	and	r24, r24
    7148:	19 f0       	breq	.+6      	; 0x7150 <dtoa_prf+0x1fe>
    714a:	91 93       	st	Z+, r25
    714c:	81 50       	subi	r24, 0x01	; 1
    714e:	fb cf       	rjmp	.-10     	; 0x7146 <dtoa_prf+0x1f4>
    7150:	c2 0e       	add	r12, r18
    7152:	d1 1c       	adc	r13, r1
    7154:	20 e0       	ldi	r18, 0x00	; 0
    7156:	0f 2d       	mov	r16, r15
    7158:	06 0f       	add	r16, r22
    715a:	9a 81       	ldd	r25, Y+2	; 0x02
    715c:	34 2f       	mov	r19, r20
    715e:	30 71       	andi	r19, 0x10	; 16
    7160:	44 ff       	sbrs	r20, 4
    7162:	03 c0       	rjmp	.+6      	; 0x716a <dtoa_prf+0x218>
    7164:	91 33       	cpi	r25, 0x31	; 49
    7166:	09 f4       	brne	.+2      	; 0x716a <dtoa_prf+0x218>
    7168:	01 50       	subi	r16, 0x01	; 1
    716a:	10 16       	cp	r1, r16
    716c:	24 f4       	brge	.+8      	; 0x7176 <dtoa_prf+0x224>
    716e:	09 30       	cpi	r16, 0x09	; 9
    7170:	18 f0       	brcs	.+6      	; 0x7178 <dtoa_prf+0x226>
    7172:	08 e0       	ldi	r16, 0x08	; 8
    7174:	01 c0       	rjmp	.+2      	; 0x7178 <dtoa_prf+0x226>
    7176:	01 e0       	ldi	r16, 0x01	; 1
    7178:	ab 01       	movw	r20, r22
    717a:	77 ff       	sbrs	r23, 7
    717c:	02 c0       	rjmp	.+4      	; 0x7182 <dtoa_prf+0x230>
    717e:	40 e0       	ldi	r20, 0x00	; 0
    7180:	50 e0       	ldi	r21, 0x00	; 0
    7182:	fb 01       	movw	r30, r22
    7184:	e4 1b       	sub	r30, r20
    7186:	f5 0b       	sbc	r31, r21
    7188:	a1 e0       	ldi	r26, 0x01	; 1
    718a:	b0 e0       	ldi	r27, 0x00	; 0
    718c:	ac 0f       	add	r26, r28
    718e:	bd 1f       	adc	r27, r29
    7190:	ea 0f       	add	r30, r26
    7192:	fb 1f       	adc	r31, r27
    7194:	8e e2       	ldi	r24, 0x2E	; 46
    7196:	a8 2e       	mov	r10, r24
    7198:	4b 01       	movw	r8, r22
    719a:	80 1a       	sub	r8, r16
    719c:	91 08       	sbc	r9, r1
    719e:	0b 2d       	mov	r16, r11
    71a0:	10 e0       	ldi	r17, 0x00	; 0
    71a2:	11 95       	neg	r17
    71a4:	01 95       	neg	r16
    71a6:	11 09       	sbc	r17, r1
    71a8:	4f 3f       	cpi	r20, 0xFF	; 255
    71aa:	bf ef       	ldi	r27, 0xFF	; 255
    71ac:	5b 07       	cpc	r21, r27
    71ae:	21 f4       	brne	.+8      	; 0x71b8 <dtoa_prf+0x266>
    71b0:	d6 01       	movw	r26, r12
    71b2:	ac 92       	st	X, r10
    71b4:	11 96       	adiw	r26, 0x01	; 1
    71b6:	6d 01       	movw	r12, r26
    71b8:	64 17       	cp	r22, r20
    71ba:	75 07       	cpc	r23, r21
    71bc:	2c f0       	brlt	.+10     	; 0x71c8 <dtoa_prf+0x276>
    71be:	84 16       	cp	r8, r20
    71c0:	95 06       	cpc	r9, r21
    71c2:	14 f4       	brge	.+4      	; 0x71c8 <dtoa_prf+0x276>
    71c4:	81 81       	ldd	r24, Z+1	; 0x01
    71c6:	01 c0       	rjmp	.+2      	; 0x71ca <dtoa_prf+0x278>
    71c8:	80 e3       	ldi	r24, 0x30	; 48
    71ca:	41 50       	subi	r20, 0x01	; 1
    71cc:	51 09       	sbc	r21, r1
    71ce:	31 96       	adiw	r30, 0x01	; 1
    71d0:	d6 01       	movw	r26, r12
    71d2:	11 96       	adiw	r26, 0x01	; 1
    71d4:	7d 01       	movw	r14, r26
    71d6:	40 17       	cp	r20, r16
    71d8:	51 07       	cpc	r21, r17
    71da:	24 f0       	brlt	.+8      	; 0x71e4 <dtoa_prf+0x292>
    71dc:	d6 01       	movw	r26, r12
    71de:	8c 93       	st	X, r24
    71e0:	67 01       	movw	r12, r14
    71e2:	e2 cf       	rjmp	.-60     	; 0x71a8 <dtoa_prf+0x256>
    71e4:	64 17       	cp	r22, r20
    71e6:	75 07       	cpc	r23, r21
    71e8:	39 f4       	brne	.+14     	; 0x71f8 <dtoa_prf+0x2a6>
    71ea:	96 33       	cpi	r25, 0x36	; 54
    71ec:	20 f4       	brcc	.+8      	; 0x71f6 <dtoa_prf+0x2a4>
    71ee:	95 33       	cpi	r25, 0x35	; 53
    71f0:	19 f4       	brne	.+6      	; 0x71f8 <dtoa_prf+0x2a6>
    71f2:	31 11       	cpse	r19, r1
    71f4:	01 c0       	rjmp	.+2      	; 0x71f8 <dtoa_prf+0x2a6>
    71f6:	81 e3       	ldi	r24, 0x31	; 49
    71f8:	f6 01       	movw	r30, r12
    71fa:	80 83       	st	Z, r24
    71fc:	f7 01       	movw	r30, r14
    71fe:	82 2f       	mov	r24, r18
    7200:	90 e2       	ldi	r25, 0x20	; 32
    7202:	88 23       	and	r24, r24
    7204:	19 f0       	breq	.+6      	; 0x720c <dtoa_prf+0x2ba>
    7206:	91 93       	st	Z+, r25
    7208:	81 50       	subi	r24, 0x01	; 1
    720a:	fb cf       	rjmp	.-10     	; 0x7202 <dtoa_prf+0x2b0>
    720c:	f7 01       	movw	r30, r14
    720e:	e2 0f       	add	r30, r18
    7210:	f1 1d       	adc	r31, r1
    7212:	10 82       	st	Z, r1
    7214:	80 e0       	ldi	r24, 0x00	; 0
    7216:	90 e0       	ldi	r25, 0x00	; 0
    7218:	29 96       	adiw	r28, 0x09	; 9
    721a:	0f b6       	in	r0, 0x3f	; 63
    721c:	f8 94       	cli
    721e:	de bf       	out	0x3e, r29	; 62
    7220:	0f be       	out	0x3f, r0	; 63
    7222:	cd bf       	out	0x3d, r28	; 61
    7224:	df 91       	pop	r29
    7226:	cf 91       	pop	r28
    7228:	1f 91       	pop	r17
    722a:	0f 91       	pop	r16
    722c:	ff 90       	pop	r15
    722e:	ef 90       	pop	r14
    7230:	df 90       	pop	r13
    7232:	cf 90       	pop	r12
    7234:	bf 90       	pop	r11
    7236:	af 90       	pop	r10
    7238:	9f 90       	pop	r9
    723a:	8f 90       	pop	r8
    723c:	08 95       	ret

0000723e <__ftoa_engine>:
    723e:	28 30       	cpi	r18, 0x08	; 8
    7240:	08 f0       	brcs	.+2      	; 0x7244 <__ftoa_engine+0x6>
    7242:	27 e0       	ldi	r18, 0x07	; 7
    7244:	33 27       	eor	r19, r19
    7246:	da 01       	movw	r26, r20
    7248:	99 0f       	add	r25, r25
    724a:	31 1d       	adc	r19, r1
    724c:	87 fd       	sbrc	r24, 7
    724e:	91 60       	ori	r25, 0x01	; 1
    7250:	00 96       	adiw	r24, 0x00	; 0
    7252:	61 05       	cpc	r22, r1
    7254:	71 05       	cpc	r23, r1
    7256:	39 f4       	brne	.+14     	; 0x7266 <__ftoa_engine+0x28>
    7258:	32 60       	ori	r19, 0x02	; 2
    725a:	2e 5f       	subi	r18, 0xFE	; 254
    725c:	3d 93       	st	X+, r19
    725e:	30 e3       	ldi	r19, 0x30	; 48
    7260:	2a 95       	dec	r18
    7262:	e1 f7       	brne	.-8      	; 0x725c <__ftoa_engine+0x1e>
    7264:	08 95       	ret
    7266:	9f 3f       	cpi	r25, 0xFF	; 255
    7268:	30 f0       	brcs	.+12     	; 0x7276 <__ftoa_engine+0x38>
    726a:	80 38       	cpi	r24, 0x80	; 128
    726c:	71 05       	cpc	r23, r1
    726e:	61 05       	cpc	r22, r1
    7270:	09 f0       	breq	.+2      	; 0x7274 <__ftoa_engine+0x36>
    7272:	3c 5f       	subi	r19, 0xFC	; 252
    7274:	3c 5f       	subi	r19, 0xFC	; 252
    7276:	3d 93       	st	X+, r19
    7278:	91 30       	cpi	r25, 0x01	; 1
    727a:	08 f0       	brcs	.+2      	; 0x727e <__ftoa_engine+0x40>
    727c:	80 68       	ori	r24, 0x80	; 128
    727e:	91 1d       	adc	r25, r1
    7280:	df 93       	push	r29
    7282:	cf 93       	push	r28
    7284:	1f 93       	push	r17
    7286:	0f 93       	push	r16
    7288:	ff 92       	push	r15
    728a:	ef 92       	push	r14
    728c:	19 2f       	mov	r17, r25
    728e:	98 7f       	andi	r25, 0xF8	; 248
    7290:	96 95       	lsr	r25
    7292:	e9 2f       	mov	r30, r25
    7294:	96 95       	lsr	r25
    7296:	96 95       	lsr	r25
    7298:	e9 0f       	add	r30, r25
    729a:	ff 27       	eor	r31, r31
    729c:	e0 5a       	subi	r30, 0xA0	; 160
    729e:	fe 4f       	sbci	r31, 0xFE	; 254
    72a0:	99 27       	eor	r25, r25
    72a2:	33 27       	eor	r19, r19
    72a4:	ee 24       	eor	r14, r14
    72a6:	ff 24       	eor	r15, r15
    72a8:	a7 01       	movw	r20, r14
    72aa:	e7 01       	movw	r28, r14
    72ac:	05 90       	lpm	r0, Z+
    72ae:	08 94       	sec
    72b0:	07 94       	ror	r0
    72b2:	28 f4       	brcc	.+10     	; 0x72be <__ftoa_engine+0x80>
    72b4:	36 0f       	add	r19, r22
    72b6:	e7 1e       	adc	r14, r23
    72b8:	f8 1e       	adc	r15, r24
    72ba:	49 1f       	adc	r20, r25
    72bc:	51 1d       	adc	r21, r1
    72be:	66 0f       	add	r22, r22
    72c0:	77 1f       	adc	r23, r23
    72c2:	88 1f       	adc	r24, r24
    72c4:	99 1f       	adc	r25, r25
    72c6:	06 94       	lsr	r0
    72c8:	a1 f7       	brne	.-24     	; 0x72b2 <__ftoa_engine+0x74>
    72ca:	05 90       	lpm	r0, Z+
    72cc:	07 94       	ror	r0
    72ce:	28 f4       	brcc	.+10     	; 0x72da <__ftoa_engine+0x9c>
    72d0:	e7 0e       	add	r14, r23
    72d2:	f8 1e       	adc	r15, r24
    72d4:	49 1f       	adc	r20, r25
    72d6:	56 1f       	adc	r21, r22
    72d8:	c1 1d       	adc	r28, r1
    72da:	77 0f       	add	r23, r23
    72dc:	88 1f       	adc	r24, r24
    72de:	99 1f       	adc	r25, r25
    72e0:	66 1f       	adc	r22, r22
    72e2:	06 94       	lsr	r0
    72e4:	a1 f7       	brne	.-24     	; 0x72ce <__ftoa_engine+0x90>
    72e6:	05 90       	lpm	r0, Z+
    72e8:	07 94       	ror	r0
    72ea:	28 f4       	brcc	.+10     	; 0x72f6 <__ftoa_engine+0xb8>
    72ec:	f8 0e       	add	r15, r24
    72ee:	49 1f       	adc	r20, r25
    72f0:	56 1f       	adc	r21, r22
    72f2:	c7 1f       	adc	r28, r23
    72f4:	d1 1d       	adc	r29, r1
    72f6:	88 0f       	add	r24, r24
    72f8:	99 1f       	adc	r25, r25
    72fa:	66 1f       	adc	r22, r22
    72fc:	77 1f       	adc	r23, r23
    72fe:	06 94       	lsr	r0
    7300:	a1 f7       	brne	.-24     	; 0x72ea <__ftoa_engine+0xac>
    7302:	05 90       	lpm	r0, Z+
    7304:	07 94       	ror	r0
    7306:	20 f4       	brcc	.+8      	; 0x7310 <__ftoa_engine+0xd2>
    7308:	49 0f       	add	r20, r25
    730a:	56 1f       	adc	r21, r22
    730c:	c7 1f       	adc	r28, r23
    730e:	d8 1f       	adc	r29, r24
    7310:	99 0f       	add	r25, r25
    7312:	66 1f       	adc	r22, r22
    7314:	77 1f       	adc	r23, r23
    7316:	88 1f       	adc	r24, r24
    7318:	06 94       	lsr	r0
    731a:	a9 f7       	brne	.-22     	; 0x7306 <__ftoa_engine+0xc8>
    731c:	84 91       	lpm	r24, Z
    731e:	10 95       	com	r17
    7320:	17 70       	andi	r17, 0x07	; 7
    7322:	41 f0       	breq	.+16     	; 0x7334 <__ftoa_engine+0xf6>
    7324:	d6 95       	lsr	r29
    7326:	c7 95       	ror	r28
    7328:	57 95       	ror	r21
    732a:	47 95       	ror	r20
    732c:	f7 94       	ror	r15
    732e:	e7 94       	ror	r14
    7330:	1a 95       	dec	r17
    7332:	c1 f7       	brne	.-16     	; 0x7324 <__ftoa_engine+0xe6>
    7334:	e6 e0       	ldi	r30, 0x06	; 6
    7336:	f1 e0       	ldi	r31, 0x01	; 1
    7338:	68 94       	set
    733a:	15 90       	lpm	r1, Z+
    733c:	15 91       	lpm	r17, Z+
    733e:	35 91       	lpm	r19, Z+
    7340:	65 91       	lpm	r22, Z+
    7342:	95 91       	lpm	r25, Z+
    7344:	05 90       	lpm	r0, Z+
    7346:	7f e2       	ldi	r23, 0x2F	; 47
    7348:	73 95       	inc	r23
    734a:	e1 18       	sub	r14, r1
    734c:	f1 0a       	sbc	r15, r17
    734e:	43 0b       	sbc	r20, r19
    7350:	56 0b       	sbc	r21, r22
    7352:	c9 0b       	sbc	r28, r25
    7354:	d0 09       	sbc	r29, r0
    7356:	c0 f7       	brcc	.-16     	; 0x7348 <__ftoa_engine+0x10a>
    7358:	e1 0c       	add	r14, r1
    735a:	f1 1e       	adc	r15, r17
    735c:	43 1f       	adc	r20, r19
    735e:	56 1f       	adc	r21, r22
    7360:	c9 1f       	adc	r28, r25
    7362:	d0 1d       	adc	r29, r0
    7364:	7e f4       	brtc	.+30     	; 0x7384 <__ftoa_engine+0x146>
    7366:	70 33       	cpi	r23, 0x30	; 48
    7368:	11 f4       	brne	.+4      	; 0x736e <__ftoa_engine+0x130>
    736a:	8a 95       	dec	r24
    736c:	e6 cf       	rjmp	.-52     	; 0x733a <__ftoa_engine+0xfc>
    736e:	e8 94       	clt
    7370:	01 50       	subi	r16, 0x01	; 1
    7372:	30 f0       	brcs	.+12     	; 0x7380 <__ftoa_engine+0x142>
    7374:	08 0f       	add	r16, r24
    7376:	0a f4       	brpl	.+2      	; 0x737a <__ftoa_engine+0x13c>
    7378:	00 27       	eor	r16, r16
    737a:	02 17       	cp	r16, r18
    737c:	08 f4       	brcc	.+2      	; 0x7380 <__ftoa_engine+0x142>
    737e:	20 2f       	mov	r18, r16
    7380:	23 95       	inc	r18
    7382:	02 2f       	mov	r16, r18
    7384:	7a 33       	cpi	r23, 0x3A	; 58
    7386:	28 f0       	brcs	.+10     	; 0x7392 <__ftoa_engine+0x154>
    7388:	79 e3       	ldi	r23, 0x39	; 57
    738a:	7d 93       	st	X+, r23
    738c:	2a 95       	dec	r18
    738e:	e9 f7       	brne	.-6      	; 0x738a <__ftoa_engine+0x14c>
    7390:	10 c0       	rjmp	.+32     	; 0x73b2 <__ftoa_engine+0x174>
    7392:	7d 93       	st	X+, r23
    7394:	2a 95       	dec	r18
    7396:	89 f6       	brne	.-94     	; 0x733a <__ftoa_engine+0xfc>
    7398:	06 94       	lsr	r0
    739a:	97 95       	ror	r25
    739c:	67 95       	ror	r22
    739e:	37 95       	ror	r19
    73a0:	17 95       	ror	r17
    73a2:	17 94       	ror	r1
    73a4:	e1 18       	sub	r14, r1
    73a6:	f1 0a       	sbc	r15, r17
    73a8:	43 0b       	sbc	r20, r19
    73aa:	56 0b       	sbc	r21, r22
    73ac:	c9 0b       	sbc	r28, r25
    73ae:	d0 09       	sbc	r29, r0
    73b0:	98 f0       	brcs	.+38     	; 0x73d8 <__ftoa_engine+0x19a>
    73b2:	23 95       	inc	r18
    73b4:	7e 91       	ld	r23, -X
    73b6:	73 95       	inc	r23
    73b8:	7a 33       	cpi	r23, 0x3A	; 58
    73ba:	08 f0       	brcs	.+2      	; 0x73be <__ftoa_engine+0x180>
    73bc:	70 e3       	ldi	r23, 0x30	; 48
    73be:	7c 93       	st	X, r23
    73c0:	20 13       	cpse	r18, r16
    73c2:	b8 f7       	brcc	.-18     	; 0x73b2 <__ftoa_engine+0x174>
    73c4:	7e 91       	ld	r23, -X
    73c6:	70 61       	ori	r23, 0x10	; 16
    73c8:	7d 93       	st	X+, r23
    73ca:	30 f0       	brcs	.+12     	; 0x73d8 <__ftoa_engine+0x19a>
    73cc:	83 95       	inc	r24
    73ce:	71 e3       	ldi	r23, 0x31	; 49
    73d0:	7d 93       	st	X+, r23
    73d2:	70 e3       	ldi	r23, 0x30	; 48
    73d4:	2a 95       	dec	r18
    73d6:	e1 f7       	brne	.-8      	; 0x73d0 <__ftoa_engine+0x192>
    73d8:	11 24       	eor	r1, r1
    73da:	ef 90       	pop	r14
    73dc:	ff 90       	pop	r15
    73de:	0f 91       	pop	r16
    73e0:	1f 91       	pop	r17
    73e2:	cf 91       	pop	r28
    73e4:	df 91       	pop	r29
    73e6:	99 27       	eor	r25, r25
    73e8:	87 fd       	sbrc	r24, 7
    73ea:	90 95       	com	r25
    73ec:	08 95       	ret

000073ee <strchr_P>:
    73ee:	fc 01       	movw	r30, r24
    73f0:	05 90       	lpm	r0, Z+
    73f2:	06 16       	cp	r0, r22
    73f4:	21 f0       	breq	.+8      	; 0x73fe <strchr_P+0x10>
    73f6:	00 20       	and	r0, r0
    73f8:	d9 f7       	brne	.-10     	; 0x73f0 <strchr_P+0x2>
    73fa:	c0 01       	movw	r24, r0
    73fc:	08 95       	ret
    73fe:	31 97       	sbiw	r30, 0x01	; 1
    7400:	cf 01       	movw	r24, r30
    7402:	08 95       	ret

00007404 <strnlen_P>:
    7404:	fc 01       	movw	r30, r24
    7406:	05 90       	lpm	r0, Z+
    7408:	61 50       	subi	r22, 0x01	; 1
    740a:	70 40       	sbci	r23, 0x00	; 0
    740c:	01 10       	cpse	r0, r1
    740e:	d8 f7       	brcc	.-10     	; 0x7406 <strnlen_P+0x2>
    7410:	80 95       	com	r24
    7412:	90 95       	com	r25
    7414:	8e 0f       	add	r24, r30
    7416:	9f 1f       	adc	r25, r31
    7418:	08 95       	ret

0000741a <strnlen>:
    741a:	fc 01       	movw	r30, r24
    741c:	61 50       	subi	r22, 0x01	; 1
    741e:	70 40       	sbci	r23, 0x00	; 0
    7420:	01 90       	ld	r0, Z+
    7422:	01 10       	cpse	r0, r1
    7424:	d8 f7       	brcc	.-10     	; 0x741c <strnlen+0x2>
    7426:	80 95       	com	r24
    7428:	90 95       	com	r25
    742a:	8e 0f       	add	r24, r30
    742c:	9f 1f       	adc	r25, r31
    742e:	08 95       	ret

00007430 <strrev>:
    7430:	dc 01       	movw	r26, r24
    7432:	fc 01       	movw	r30, r24
    7434:	67 2f       	mov	r22, r23
    7436:	71 91       	ld	r23, Z+
    7438:	77 23       	and	r23, r23
    743a:	e1 f7       	brne	.-8      	; 0x7434 <strrev+0x4>
    743c:	32 97       	sbiw	r30, 0x02	; 2
    743e:	04 c0       	rjmp	.+8      	; 0x7448 <strrev+0x18>
    7440:	7c 91       	ld	r23, X
    7442:	6d 93       	st	X+, r22
    7444:	70 83       	st	Z, r23
    7446:	62 91       	ld	r22, -Z
    7448:	ae 17       	cp	r26, r30
    744a:	bf 07       	cpc	r27, r31
    744c:	c8 f3       	brcs	.-14     	; 0x7440 <strrev+0x10>
    744e:	08 95       	ret

00007450 <fputc>:
    7450:	0f 93       	push	r16
    7452:	1f 93       	push	r17
    7454:	cf 93       	push	r28
    7456:	df 93       	push	r29
    7458:	fb 01       	movw	r30, r22
    745a:	23 81       	ldd	r18, Z+3	; 0x03
    745c:	21 fd       	sbrc	r18, 1
    745e:	03 c0       	rjmp	.+6      	; 0x7466 <fputc+0x16>
    7460:	8f ef       	ldi	r24, 0xFF	; 255
    7462:	9f ef       	ldi	r25, 0xFF	; 255
    7464:	2c c0       	rjmp	.+88     	; 0x74be <fputc+0x6e>
    7466:	22 ff       	sbrs	r18, 2
    7468:	16 c0       	rjmp	.+44     	; 0x7496 <fputc+0x46>
    746a:	46 81       	ldd	r20, Z+6	; 0x06
    746c:	57 81       	ldd	r21, Z+7	; 0x07
    746e:	24 81       	ldd	r18, Z+4	; 0x04
    7470:	35 81       	ldd	r19, Z+5	; 0x05
    7472:	42 17       	cp	r20, r18
    7474:	53 07       	cpc	r21, r19
    7476:	44 f4       	brge	.+16     	; 0x7488 <fputc+0x38>
    7478:	a0 81       	ld	r26, Z
    747a:	b1 81       	ldd	r27, Z+1	; 0x01
    747c:	9d 01       	movw	r18, r26
    747e:	2f 5f       	subi	r18, 0xFF	; 255
    7480:	3f 4f       	sbci	r19, 0xFF	; 255
    7482:	31 83       	std	Z+1, r19	; 0x01
    7484:	20 83       	st	Z, r18
    7486:	8c 93       	st	X, r24
    7488:	26 81       	ldd	r18, Z+6	; 0x06
    748a:	37 81       	ldd	r19, Z+7	; 0x07
    748c:	2f 5f       	subi	r18, 0xFF	; 255
    748e:	3f 4f       	sbci	r19, 0xFF	; 255
    7490:	37 83       	std	Z+7, r19	; 0x07
    7492:	26 83       	std	Z+6, r18	; 0x06
    7494:	14 c0       	rjmp	.+40     	; 0x74be <fputc+0x6e>
    7496:	8b 01       	movw	r16, r22
    7498:	ec 01       	movw	r28, r24
    749a:	fb 01       	movw	r30, r22
    749c:	00 84       	ldd	r0, Z+8	; 0x08
    749e:	f1 85       	ldd	r31, Z+9	; 0x09
    74a0:	e0 2d       	mov	r30, r0
    74a2:	09 95       	icall
    74a4:	89 2b       	or	r24, r25
    74a6:	e1 f6       	brne	.-72     	; 0x7460 <fputc+0x10>
    74a8:	d8 01       	movw	r26, r16
    74aa:	16 96       	adiw	r26, 0x06	; 6
    74ac:	8d 91       	ld	r24, X+
    74ae:	9c 91       	ld	r25, X
    74b0:	17 97       	sbiw	r26, 0x07	; 7
    74b2:	01 96       	adiw	r24, 0x01	; 1
    74b4:	17 96       	adiw	r26, 0x07	; 7
    74b6:	9c 93       	st	X, r25
    74b8:	8e 93       	st	-X, r24
    74ba:	16 97       	sbiw	r26, 0x06	; 6
    74bc:	ce 01       	movw	r24, r28
    74be:	df 91       	pop	r29
    74c0:	cf 91       	pop	r28
    74c2:	1f 91       	pop	r17
    74c4:	0f 91       	pop	r16
    74c6:	08 95       	ret

000074c8 <ungetc>:
    74c8:	fb 01       	movw	r30, r22
    74ca:	23 81       	ldd	r18, Z+3	; 0x03
    74cc:	20 ff       	sbrs	r18, 0
    74ce:	12 c0       	rjmp	.+36     	; 0x74f4 <ungetc+0x2c>
    74d0:	26 fd       	sbrc	r18, 6
    74d2:	10 c0       	rjmp	.+32     	; 0x74f4 <ungetc+0x2c>
    74d4:	8f 3f       	cpi	r24, 0xFF	; 255
    74d6:	3f ef       	ldi	r19, 0xFF	; 255
    74d8:	93 07       	cpc	r25, r19
    74da:	61 f0       	breq	.+24     	; 0x74f4 <ungetc+0x2c>
    74dc:	82 83       	std	Z+2, r24	; 0x02
    74de:	2f 7d       	andi	r18, 0xDF	; 223
    74e0:	20 64       	ori	r18, 0x40	; 64
    74e2:	23 83       	std	Z+3, r18	; 0x03
    74e4:	26 81       	ldd	r18, Z+6	; 0x06
    74e6:	37 81       	ldd	r19, Z+7	; 0x07
    74e8:	21 50       	subi	r18, 0x01	; 1
    74ea:	31 09       	sbc	r19, r1
    74ec:	37 83       	std	Z+7, r19	; 0x07
    74ee:	26 83       	std	Z+6, r18	; 0x06
    74f0:	99 27       	eor	r25, r25
    74f2:	08 95       	ret
    74f4:	8f ef       	ldi	r24, 0xFF	; 255
    74f6:	9f ef       	ldi	r25, 0xFF	; 255
    74f8:	08 95       	ret

000074fa <__ultoa_invert>:
    74fa:	fa 01       	movw	r30, r20
    74fc:	aa 27       	eor	r26, r26
    74fe:	28 30       	cpi	r18, 0x08	; 8
    7500:	51 f1       	breq	.+84     	; 0x7556 <__ultoa_invert+0x5c>
    7502:	20 31       	cpi	r18, 0x10	; 16
    7504:	81 f1       	breq	.+96     	; 0x7566 <__ultoa_invert+0x6c>
    7506:	e8 94       	clt
    7508:	6f 93       	push	r22
    750a:	6e 7f       	andi	r22, 0xFE	; 254
    750c:	6e 5f       	subi	r22, 0xFE	; 254
    750e:	7f 4f       	sbci	r23, 0xFF	; 255
    7510:	8f 4f       	sbci	r24, 0xFF	; 255
    7512:	9f 4f       	sbci	r25, 0xFF	; 255
    7514:	af 4f       	sbci	r26, 0xFF	; 255
    7516:	b1 e0       	ldi	r27, 0x01	; 1
    7518:	3e d0       	rcall	.+124    	; 0x7596 <__ultoa_invert+0x9c>
    751a:	b4 e0       	ldi	r27, 0x04	; 4
    751c:	3c d0       	rcall	.+120    	; 0x7596 <__ultoa_invert+0x9c>
    751e:	67 0f       	add	r22, r23
    7520:	78 1f       	adc	r23, r24
    7522:	89 1f       	adc	r24, r25
    7524:	9a 1f       	adc	r25, r26
    7526:	a1 1d       	adc	r26, r1
    7528:	68 0f       	add	r22, r24
    752a:	79 1f       	adc	r23, r25
    752c:	8a 1f       	adc	r24, r26
    752e:	91 1d       	adc	r25, r1
    7530:	a1 1d       	adc	r26, r1
    7532:	6a 0f       	add	r22, r26
    7534:	71 1d       	adc	r23, r1
    7536:	81 1d       	adc	r24, r1
    7538:	91 1d       	adc	r25, r1
    753a:	a1 1d       	adc	r26, r1
    753c:	20 d0       	rcall	.+64     	; 0x757e <__ultoa_invert+0x84>
    753e:	09 f4       	brne	.+2      	; 0x7542 <__ultoa_invert+0x48>
    7540:	68 94       	set
    7542:	3f 91       	pop	r19
    7544:	2a e0       	ldi	r18, 0x0A	; 10
    7546:	26 9f       	mul	r18, r22
    7548:	11 24       	eor	r1, r1
    754a:	30 19       	sub	r19, r0
    754c:	30 5d       	subi	r19, 0xD0	; 208
    754e:	31 93       	st	Z+, r19
    7550:	de f6       	brtc	.-74     	; 0x7508 <__ultoa_invert+0xe>
    7552:	cf 01       	movw	r24, r30
    7554:	08 95       	ret
    7556:	46 2f       	mov	r20, r22
    7558:	47 70       	andi	r20, 0x07	; 7
    755a:	40 5d       	subi	r20, 0xD0	; 208
    755c:	41 93       	st	Z+, r20
    755e:	b3 e0       	ldi	r27, 0x03	; 3
    7560:	0f d0       	rcall	.+30     	; 0x7580 <__ultoa_invert+0x86>
    7562:	c9 f7       	brne	.-14     	; 0x7556 <__ultoa_invert+0x5c>
    7564:	f6 cf       	rjmp	.-20     	; 0x7552 <__ultoa_invert+0x58>
    7566:	46 2f       	mov	r20, r22
    7568:	4f 70       	andi	r20, 0x0F	; 15
    756a:	40 5d       	subi	r20, 0xD0	; 208
    756c:	4a 33       	cpi	r20, 0x3A	; 58
    756e:	18 f0       	brcs	.+6      	; 0x7576 <__ultoa_invert+0x7c>
    7570:	49 5d       	subi	r20, 0xD9	; 217
    7572:	31 fd       	sbrc	r19, 1
    7574:	40 52       	subi	r20, 0x20	; 32
    7576:	41 93       	st	Z+, r20
    7578:	02 d0       	rcall	.+4      	; 0x757e <__ultoa_invert+0x84>
    757a:	a9 f7       	brne	.-22     	; 0x7566 <__ultoa_invert+0x6c>
    757c:	ea cf       	rjmp	.-44     	; 0x7552 <__ultoa_invert+0x58>
    757e:	b4 e0       	ldi	r27, 0x04	; 4
    7580:	a6 95       	lsr	r26
    7582:	97 95       	ror	r25
    7584:	87 95       	ror	r24
    7586:	77 95       	ror	r23
    7588:	67 95       	ror	r22
    758a:	ba 95       	dec	r27
    758c:	c9 f7       	brne	.-14     	; 0x7580 <__ultoa_invert+0x86>
    758e:	00 97       	sbiw	r24, 0x00	; 0
    7590:	61 05       	cpc	r22, r1
    7592:	71 05       	cpc	r23, r1
    7594:	08 95       	ret
    7596:	9b 01       	movw	r18, r22
    7598:	ac 01       	movw	r20, r24
    759a:	0a 2e       	mov	r0, r26
    759c:	06 94       	lsr	r0
    759e:	57 95       	ror	r21
    75a0:	47 95       	ror	r20
    75a2:	37 95       	ror	r19
    75a4:	27 95       	ror	r18
    75a6:	ba 95       	dec	r27
    75a8:	c9 f7       	brne	.-14     	; 0x759c <__ultoa_invert+0xa2>
    75aa:	62 0f       	add	r22, r18
    75ac:	73 1f       	adc	r23, r19
    75ae:	84 1f       	adc	r24, r20
    75b0:	95 1f       	adc	r25, r21
    75b2:	a0 1d       	adc	r26, r0
    75b4:	08 95       	ret

000075b6 <eeprom_read_block>:
    75b6:	dc 01       	movw	r26, r24
    75b8:	cb 01       	movw	r24, r22

000075ba <eeprom_read_blraw>:
    75ba:	fc 01       	movw	r30, r24
    75bc:	f9 99       	sbic	0x1f, 1	; 31
    75be:	fe cf       	rjmp	.-4      	; 0x75bc <eeprom_read_blraw+0x2>
    75c0:	06 c0       	rjmp	.+12     	; 0x75ce <eeprom_read_blraw+0x14>
    75c2:	f2 bd       	out	0x22, r31	; 34
    75c4:	e1 bd       	out	0x21, r30	; 33
    75c6:	f8 9a       	sbi	0x1f, 0	; 31
    75c8:	31 96       	adiw	r30, 0x01	; 1
    75ca:	00 b4       	in	r0, 0x20	; 32
    75cc:	0d 92       	st	X+, r0
    75ce:	41 50       	subi	r20, 0x01	; 1
    75d0:	50 40       	sbci	r21, 0x00	; 0
    75d2:	b8 f7       	brcc	.-18     	; 0x75c2 <eeprom_read_blraw+0x8>
    75d4:	08 95       	ret

000075d6 <eeprom_read_byte>:
    75d6:	f9 99       	sbic	0x1f, 1	; 31
    75d8:	fe cf       	rjmp	.-4      	; 0x75d6 <eeprom_read_byte>
    75da:	92 bd       	out	0x22, r25	; 34
    75dc:	81 bd       	out	0x21, r24	; 33
    75de:	f8 9a       	sbi	0x1f, 0	; 31
    75e0:	99 27       	eor	r25, r25
    75e2:	80 b5       	in	r24, 0x20	; 32
    75e4:	08 95       	ret

000075e6 <eeprom_read_dword>:
    75e6:	a6 e1       	ldi	r26, 0x16	; 22
    75e8:	b0 e0       	ldi	r27, 0x00	; 0
    75ea:	44 e0       	ldi	r20, 0x04	; 4
    75ec:	50 e0       	ldi	r21, 0x00	; 0
    75ee:	e5 cf       	rjmp	.-54     	; 0x75ba <eeprom_read_blraw>

000075f0 <eeprom_read_word>:
    75f0:	a8 e1       	ldi	r26, 0x18	; 24
    75f2:	b0 e0       	ldi	r27, 0x00	; 0
    75f4:	42 e0       	ldi	r20, 0x02	; 2
    75f6:	50 e0       	ldi	r21, 0x00	; 0
    75f8:	e0 cf       	rjmp	.-64     	; 0x75ba <eeprom_read_blraw>

000075fa <eeprom_write_block>:
    75fa:	dc 01       	movw	r26, r24
    75fc:	cb 01       	movw	r24, r22
    75fe:	02 c0       	rjmp	.+4      	; 0x7604 <eeprom_write_block+0xa>
    7600:	2d 91       	ld	r18, X+
    7602:	05 d0       	rcall	.+10     	; 0x760e <eeprom_write_r18>
    7604:	41 50       	subi	r20, 0x01	; 1
    7606:	50 40       	sbci	r21, 0x00	; 0
    7608:	d8 f7       	brcc	.-10     	; 0x7600 <eeprom_write_block+0x6>
    760a:	08 95       	ret

0000760c <eeprom_write_byte>:
    760c:	26 2f       	mov	r18, r22

0000760e <eeprom_write_r18>:
    760e:	f9 99       	sbic	0x1f, 1	; 31
    7610:	fe cf       	rjmp	.-4      	; 0x760e <eeprom_write_r18>
    7612:	1f ba       	out	0x1f, r1	; 31
    7614:	92 bd       	out	0x22, r25	; 34
    7616:	81 bd       	out	0x21, r24	; 33
    7618:	20 bd       	out	0x20, r18	; 32
    761a:	0f b6       	in	r0, 0x3f	; 63
    761c:	f8 94       	cli
    761e:	fa 9a       	sbi	0x1f, 2	; 31
    7620:	f9 9a       	sbi	0x1f, 1	; 31
    7622:	0f be       	out	0x3f, r0	; 63
    7624:	01 96       	adiw	r24, 0x01	; 1
    7626:	08 95       	ret

00007628 <eeprom_write_dword>:
    7628:	24 2f       	mov	r18, r20
    762a:	f1 df       	rcall	.-30     	; 0x760e <eeprom_write_r18>
    762c:	25 2f       	mov	r18, r21
    762e:	ef df       	rcall	.-34     	; 0x760e <eeprom_write_r18>
    7630:	00 c0       	rjmp	.+0      	; 0x7632 <eeprom_write_word>

00007632 <eeprom_write_word>:
    7632:	ec df       	rcall	.-40     	; 0x760c <eeprom_write_byte>
    7634:	27 2f       	mov	r18, r23
    7636:	eb cf       	rjmp	.-42     	; 0x760e <eeprom_write_r18>

00007638 <_exit>:
    7638:	f8 94       	cli

0000763a <__stop_program>:
    763a:	ff cf       	rjmp	.-2      	; 0x763a <__stop_program>
