
Meteorological Station.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000460  00800100  00009f20  00009fb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00009f20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000197c  00800560  00800560  0000a414  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000a414  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000a470  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000760  00000000  00000000  0000a4b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c65d  00000000  00000000  0000ac10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000291a  00000000  00000000  0001726d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000660d  00000000  00000000  00019b87  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000172c  00000000  00000000  00020194  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001cca  00000000  00000000  000218c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000bd44  00000000  00000000  0002358a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000718  00000000  00000000  0002f2ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 0a 	jmp	0x146a	; 0x146a <__ctors_end>
       4:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__bad_interrupt>
       8:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__bad_interrupt>
       c:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__bad_interrupt>
      10:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__bad_interrupt>
      14:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__bad_interrupt>
      18:	0c 94 2a 3b 	jmp	0x7654	; 0x7654 <__vector_6>
      1c:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__bad_interrupt>
      20:	0c 94 5b 37 	jmp	0x6eb6	; 0x6eb6 <__vector_8>
      24:	0c 94 2e 17 	jmp	0x2e5c	; 0x2e5c <__vector_9>
      28:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__bad_interrupt>
      2c:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__bad_interrupt>
      30:	0c 94 71 3a 	jmp	0x74e2	; 0x74e2 <__vector_12>
      34:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__bad_interrupt>
      38:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__bad_interrupt>
      3c:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__bad_interrupt>
      40:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__bad_interrupt>
      44:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__bad_interrupt>
      48:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__bad_interrupt>
      4c:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__bad_interrupt>
      50:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__bad_interrupt>
      54:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__bad_interrupt>
      58:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__bad_interrupt>
      5c:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__bad_interrupt>
      60:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__bad_interrupt>
      64:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__bad_interrupt>
      68:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__bad_interrupt>
      6c:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__bad_interrupt>
      70:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__bad_interrupt>
      74:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__bad_interrupt>
      78:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__bad_interrupt>
      7c:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__bad_interrupt>
      80:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__bad_interrupt>
      84:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__bad_interrupt>
      88:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__bad_interrupt>
      8c:	45 32       	cpi	r20, 0x25	; 37
      8e:	4c 32       	cpi	r20, 0x2C	; 44
      90:	9e 33       	cpi	r25, 0x3E	; 62
      92:	bc 32       	cpi	r27, 0x2C	; 44
      94:	9e 33       	cpi	r25, 0x3E	; 62
      96:	9e 33       	cpi	r25, 0x3E	; 62
      98:	9e 33       	cpi	r25, 0x3E	; 62
      9a:	97 33       	cpi	r25, 0x37	; 55
      9c:	9e 33       	cpi	r25, 0x3E	; 62
      9e:	9e 33       	cpi	r25, 0x3E	; 62
      a0:	9e 33       	cpi	r25, 0x3E	; 62
      a2:	9e 33       	cpi	r25, 0x3E	; 62
      a4:	9e 33       	cpi	r25, 0x3E	; 62
      a6:	9e 33       	cpi	r25, 0x3E	; 62
      a8:	9e 33       	cpi	r25, 0x3E	; 62
      aa:	9e 33       	cpi	r25, 0x3E	; 62
      ac:	9e 33       	cpi	r25, 0x3E	; 62
      ae:	9e 33       	cpi	r25, 0x3E	; 62
      b0:	9e 33       	cpi	r25, 0x3E	; 62
      b2:	9e 33       	cpi	r25, 0x3E	; 62
      b4:	9e 33       	cpi	r25, 0x3E	; 62
      b6:	9e 33       	cpi	r25, 0x3E	; 62
      b8:	9e 33       	cpi	r25, 0x3E	; 62
      ba:	9e 33       	cpi	r25, 0x3E	; 62
      bc:	9e 33       	cpi	r25, 0x3E	; 62
      be:	9e 33       	cpi	r25, 0x3E	; 62
      c0:	9e 33       	cpi	r25, 0x3E	; 62
      c2:	9e 33       	cpi	r25, 0x3E	; 62
      c4:	9e 33       	cpi	r25, 0x3E	; 62
      c6:	9e 33       	cpi	r25, 0x3E	; 62
      c8:	9e 33       	cpi	r25, 0x3E	; 62
      ca:	9e 33       	cpi	r25, 0x3E	; 62
      cc:	9e 33       	cpi	r25, 0x3E	; 62
      ce:	9e 33       	cpi	r25, 0x3E	; 62
      d0:	9e 33       	cpi	r25, 0x3E	; 62
      d2:	9e 33       	cpi	r25, 0x3E	; 62
      d4:	9e 33       	cpi	r25, 0x3E	; 62
      d6:	9e 33       	cpi	r25, 0x3E	; 62
      d8:	9e 33       	cpi	r25, 0x3E	; 62
      da:	9e 33       	cpi	r25, 0x3E	; 62
      dc:	9e 33       	cpi	r25, 0x3E	; 62
      de:	9e 33       	cpi	r25, 0x3E	; 62
      e0:	9e 33       	cpi	r25, 0x3E	; 62
      e2:	9e 33       	cpi	r25, 0x3E	; 62
      e4:	9e 33       	cpi	r25, 0x3E	; 62
      e6:	9e 33       	cpi	r25, 0x3E	; 62
      e8:	9e 33       	cpi	r25, 0x3E	; 62
      ea:	9e 33       	cpi	r25, 0x3E	; 62
      ec:	9e 33       	cpi	r25, 0x3E	; 62
      ee:	9e 33       	cpi	r25, 0x3E	; 62
      f0:	49 33       	cpi	r20, 0x39	; 57
      f2:	4f 33       	cpi	r20, 0x3F	; 63
      f4:	60 33       	cpi	r22, 0x30	; 48
      f6:	71 33       	cpi	r23, 0x31	; 49
      f8:	85 33       	cpi	r24, 0x35	; 53

000000fa <__trampolines_end>:
      fa:	63 64       	ori	r22, 0x43	; 67
      fc:	69 6e       	ori	r22, 0xE9	; 233
      fe:	6f 70       	andi	r22, 0x0F	; 15
     100:	73 75       	andi	r23, 0x53	; 83
     102:	78 58       	subi	r23, 0x88	; 136
     104:	5b 00       	.word	0x005b	; ????
     106:	00 40       	sbci	r16, 0x00	; 0
     108:	7a 10       	cpse	r7, r10
     10a:	f3 5a       	subi	r31, 0xA3	; 163
     10c:	00 a0       	ldd	r0, Z+32	; 0x20
     10e:	72 4e       	sbci	r23, 0xE2	; 226
     110:	18 09       	sbc	r17, r8
     112:	00 10       	cpse	r0, r0
     114:	a5 d4       	rcall	.+2378   	; 0xa60 <__c.2823+0x10>
     116:	e8 00       	.word	0x00e8	; ????
     118:	00 e8       	ldi	r16, 0x80	; 128
     11a:	76 48       	sbci	r23, 0x86	; 134
     11c:	17 00       	.word	0x0017	; ????
     11e:	00 e4       	ldi	r16, 0x40	; 64
     120:	0b 54       	subi	r16, 0x4B	; 75
     122:	02 00       	.word	0x0002	; ????
     124:	00 ca       	rjmp	.-3072   	; 0xfffff526 <__eeprom_end+0xff7ef526>
     126:	9a 3b       	cpi	r25, 0xBA	; 186
     128:	00 00       	nop
     12a:	00 e1       	ldi	r16, 0x10	; 16
     12c:	f5 05       	cpc	r31, r5
     12e:	00 00       	nop
     130:	80 96       	adiw	r24, 0x20	; 32
     132:	98 00       	.word	0x0098	; ????
     134:	00 00       	nop
     136:	40 42       	sbci	r20, 0x20	; 32
     138:	0f 00       	.word	0x000f	; ????
     13a:	00 00       	nop
     13c:	a0 86       	std	Z+8, r10	; 0x08
     13e:	01 00       	.word	0x0001	; ????
     140:	00 00       	nop
     142:	10 27       	eor	r17, r16
     144:	00 00       	nop
     146:	00 00       	nop
     148:	e8 03       	fmulsu	r22, r16
     14a:	00 00       	nop
     14c:	00 00       	nop
     14e:	64 00       	.word	0x0064	; ????
     150:	00 00       	nop
     152:	00 00       	nop
     154:	0a 00       	.word	0x000a	; ????
     156:	00 00       	nop
     158:	00 00       	nop
     15a:	01 00       	.word	0x0001	; ????
     15c:	00 00       	nop
     15e:	00 00       	nop
     160:	2c 76       	andi	r18, 0x6C	; 108
     162:	d8 88       	ldd	r13, Y+16	; 0x10
     164:	dc 67       	ori	r29, 0x7C	; 124
     166:	4f 08       	sbc	r4, r15
     168:	23 df       	rcall	.-442    	; 0xffffffb0 <__eeprom_end+0xff7effb0>
     16a:	c1 df       	rcall	.-126    	; 0xee <__SREG__+0xaf>
     16c:	ae 59       	subi	r26, 0x9E	; 158
     16e:	e1 b1       	in	r30, 0x01	; 1
     170:	b7 96       	adiw	r30, 0x27	; 39
     172:	e5 e3       	ldi	r30, 0x35	; 53
     174:	e4 53       	subi	r30, 0x34	; 52
     176:	c6 3a       	cpi	r28, 0xA6	; 166
     178:	e6 51       	subi	r30, 0x16	; 22
     17a:	99 76       	andi	r25, 0x69	; 105
     17c:	96 e8       	ldi	r25, 0x86	; 134
     17e:	e6 c2       	rjmp	.+1484   	; 0x74c <__c.2867+0x22>
     180:	84 26       	eor	r8, r20
     182:	eb 89       	ldd	r30, Y+19	; 0x13
     184:	8c 9b       	sbis	0x11, 4	; 17
     186:	62 ed       	ldi	r22, 0xD2	; 210
     188:	40 7c       	andi	r20, 0xC0	; 192
     18a:	6f fc       	.word	0xfc6f	; ????
     18c:	ef bc       	out	0x2f, r14	; 47
     18e:	9c 9f       	mul	r25, r28
     190:	40 f2       	brcs	.-112    	; 0x122 <__trampolines_end+0x28>
     192:	ba a5       	ldd	r27, Y+42	; 0x2a
     194:	6f a5       	ldd	r22, Y+47	; 0x2f
     196:	f4 90       	lpm	r15, Z
     198:	05 5a       	subi	r16, 0xA5	; 165
     19a:	2a f7       	brpl	.-54     	; 0x166 <__trampolines_end+0x6c>
     19c:	5c 93       	st	X, r21
     19e:	6b 6c       	ori	r22, 0xCB	; 203
     1a0:	f9 67       	ori	r31, 0x79	; 121
     1a2:	6d c1       	rjmp	.+730    	; 0x47e <__c.2897+0x4a>
     1a4:	1b fc       	.word	0xfc1b	; ????
     1a6:	e0 e4       	ldi	r30, 0x40	; 64
     1a8:	0d 47       	sbci	r16, 0x7D	; 125
     1aa:	fe f5       	brtc	.+126    	; 0x22a <__c.2463+0x2a>
     1ac:	20 e6       	ldi	r18, 0x60	; 96
     1ae:	b5 00       	.word	0x00b5	; ????
     1b0:	d0 ed       	ldi	r29, 0xD0	; 208
     1b2:	90 2e       	mov	r9, r16
     1b4:	03 00       	.word	0x0003	; ????
     1b6:	94 35       	cpi	r25, 0x54	; 84
     1b8:	77 05       	cpc	r23, r7
     1ba:	00 80       	ld	r0, Z
     1bc:	84 1e       	adc	r8, r20
     1be:	08 00       	.word	0x0008	; ????
     1c0:	00 20       	and	r0, r0
     1c2:	4e 0a       	sbc	r4, r30
     1c4:	00 00       	nop
     1c6:	00 c8       	rjmp	.-4096   	; 0xfffff1c8 <__eeprom_end+0xff7ef1c8>
     1c8:	0c 33       	cpi	r16, 0x3C	; 60
     1ca:	33 33       	cpi	r19, 0x33	; 51
     1cc:	33 0f       	add	r19, r19
     1ce:	98 6e       	ori	r25, 0xE8	; 232
     1d0:	12 83       	std	Z+2, r17	; 0x02
     1d2:	11 41       	sbci	r17, 0x11	; 17
     1d4:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1d6:	21 14       	cp	r2, r1
     1d8:	89 3b       	cpi	r24, 0xB9	; 185
     1da:	e6 55       	subi	r30, 0x56	; 86
     1dc:	16 cf       	rjmp	.-468    	; 0xa <__FUSE_REGION_LENGTH__+0x7>
     1de:	fe e6       	ldi	r31, 0x6E	; 110
     1e0:	db 18       	sub	r13, r11
     1e2:	d1 84       	ldd	r13, Z+9	; 0x09
     1e4:	4b 38       	cpi	r20, 0x8B	; 139
     1e6:	1b f7       	brvc	.-58     	; 0x1ae <__trampolines_end+0xb4>
     1e8:	7c 1d       	adc	r23, r12
     1ea:	90 1d       	adc	r25, r0
     1ec:	a4 bb       	out	0x14, r26	; 20
     1ee:	e4 24       	eor	r14, r4
     1f0:	20 32       	cpi	r18, 0x20	; 32
     1f2:	84 72       	andi	r24, 0x24	; 36
     1f4:	5e 22       	and	r5, r30
     1f6:	81 00       	.word	0x0081	; ????
     1f8:	c9 f1       	breq	.+114    	; 0x26c <__c.2457>
     1fa:	24 ec       	ldi	r18, 0xC4	; 196
     1fc:	a1 e5       	ldi	r26, 0x51	; 81
     1fe:	3d 27       	eor	r19, r29

00000200 <__c.2463>:
     200:	0d 0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20     ..Content-Type: 
     210:	61 70 70 6c 69 63 61 74 69 6f 6e 2f 78 2d 77 77     application/x-ww
     220:	77 2d 66 6f 72 6d 2d 75 72 6c 65 6e 63 6f 64 65     w-form-urlencode
     230:	64 0d 0a 0d 0a 00                                   d.....

00000236 <__c.2461>:
     236:	43 6f 6e 74 65 6e 74 2d 4c 65 6e 67 74 68 3a 20     Content-Length: 
	...

00000247 <__c.2459>:
     247:	0d 0a 55 73 65 72 2d 41 67 65 6e 74 3a 20 74 67     ..User-Agent: tg
     257:	72 2f 31 2e 31 0d 0a 41 63 63 65 70 74 3a 20 2a     r/1.1..Accept: *
     267:	2f 2a 0d 0a 00                                      /*...

0000026c <__c.2457>:
     26c:	0d 0a 00                                            ...

0000026f <__c.2455>:
     26f:	20 48 54 54 50 2f 31 2e 31 0d 0a 48 6f 73 74 3a      HTTP/1.1..Host:
     27f:	20 00                                                .

00000281 <__c.2453>:
     281:	50 4f 53 54 20 00                                   POST .

00000287 <__c.2451>:
     287:	0d 0a 55 73 65 72 2d 41 67 65 6e 74 3a 20 74 67     ..User-Agent: tg
     297:	72 2f 31 2e 31 0d 0a 41 63 63 65 70 74 3a 20 74     r/1.1..Accept: t
     2a7:	65 78 74 2f 68 74 6d 6c 0d 0a 0d 0a 00              ext/html.....

000002b4 <__c.2449>:
     2b4:	20 48 54 54 50 2f 31 2e 31 0d 0a 48 6f 73 74 3a      HTTP/1.1..Host:
     2c4:	20 00                                                .

000002c6 <__c.2447>:
     2c6:	47 45 54 20 00                                      GET .

000002cb <arpreqhdr>:
     2cb:	00 01 08 00 06 04 00 01                             ........

000002d3 <iphdr>:
     2d3:	45 00 00 82 00 00 40 00 20                          E.....@. 

000002dc <__c.2935>:
     2dc:	2f 68 6f 6d 65 27 3b 0a 3c 2f 73 63 72 69 70 74     /home';.</script
     2ec:	3e 0a 00                                            >..

000002ef <__c.2933>:
     2ef:	6c 6f 63 61 74 69 6f 6e 2e 68 72 65 66 20 3d 20     location.href = 
     2ff:	27 68 74 74 70 3a 2f 2f 00                          'http://.

00000308 <__c.2931>:
     308:	3c 73 63 72 69 70 74 20 74 79 70 65 3d 74 65 78     <script type=tex
     318:	74 2f 6a 61 76 61 73 63 72 69 70 74 3e 0a 00        t/javascript>..

00000327 <__c.2929>:
     327:	3c 70 72 65 3e 0a 00                                <pre>..

0000032e <__c.2926>:
     32e:	48 54 54 50 2f 31 2e 30 20 34 30 31 20 55 6e 61     HTTP/1.0 401 Una
     33e:	75 74 68 6f 72 69 7a 65 64 0d 0a 43 6f 6e 74 65     uthorized..Conte
     34e:	6e 74 2d 54 79 70 65 3a 20 74 65 78 74 2f 68 74     nt-Type: text/ht
     35e:	6d 6c 0d 0a 0d 0a 3c 68 31 3e 34 30 31 20 55 6e     ml....<h1>401 Un
     36e:	61 75 74 68 6f 72 69 7a 65 64 3c 2f 68 31 3e 00     authorized</h1>.

0000037e <__c.2922>:
     37e:	3c 68 31 3e 32 30 30 20 4f 4b 3c 2f 68 31 3e 00     <h1>200 OK</h1>.

0000038e <__c.2907>:
     38e:	3c 2f 70 72 65 3e 00                                </pre>.

00000395 <__c.2905>:
     395:	3c 2f 64 69 76 3e 0a 3c 2f 62 6f 64 79 3e 0a 00     </div>.</body>..

000003a5 <__c.2903>:
     3a5:	3c 62 72 3e 3c 68 72 3e 62 79 20 44 61 6e 69 65     <br><hr>by Danie
     3b5:	6c 73 20 46 69 26 23 33 35 33 65 72 73 3c 2f 68     ls Fi&#353ers</h
     3c5:	72 3e 3c 2f 62 72 3e 00                             r></br>.

000003cd <__c.2901>:
     3cd:	3c 69 6e 70 75 74 20 74 79 70 65 3d 22 73 75 62     <input type="sub
     3dd:	6d 69 74 22 20 76 61 6c 75 65 3d 22 48 6f 6d 65     mit" value="Home
     3ed:	22 20 73 74 79 6c 65 3d 22 77 69 64 74 68 3a 31     " style="width:1
     3fd:	30 30 25 22 20 6f 6e 63 6c 69 63 6b 3d 22 77 69     00%" onclick="wi
     40d:	6e 64 6f 77 2e 6c 6f 63 61 74 69 6f 6e 3d 27 2f     ndow.location='/
     41d:	68 6f 6d 65 27 3b 22 20 2f 3e 0a 00                 home';" />..

00000429 <__c.2899>:
     429:	0a 3c 2f 74 61 62 6c 65 3e 0a 00                    .</table>..

00000434 <__c.2897>:
     434:	3c 74 72 3e 0a 3c 74 64 20 63 6c 61 73 73 3d 62     <tr>.<td class=b
     444:	75 74 74 6f 6e 20 63 6f 6c 73 70 61 6e 3d 22 32     utton colspan="2
     454:	22 3e 3c 69 6e 70 75 74 20 74 79 70 65 3d 73 75     "><input type=su
     464:	62 6d 69 74 20 76 61 6c 75 65 3d 22 43 6f 6e 66     bmit value="Conf
     474:	69 72 6d 22 20 73 74 79 6c 65 3d 22 77 69 64 74     irm" style="widt
     484:	68 3a 31 30 30 25 22 3e 3c 2f 74 64 3e 0a 3c 2f     h:100%"></td>.</
     494:	74 72 3e 0a 3c 2f 66 6f 72 6d 3e 00                 tr>.</form>.

000004a0 <__c.2895>:
     4a0:	3e 3c 2f 74 64 3e 0a 3c 2f 74 72 3e 00              ></td>.</tr>.

000004ad <__c.2893>:
     4ad:	0a 3c 74 64 3e 3c 66 6f 72 6d 20 61 63 74 69 6f     .<td><form actio
     4bd:	6e 3d 2f 20 6d 65 74 68 6f 64 3d 67 65 74 3e 0a     n=/ method=get>.
     4cd:	53 65 63 6f 6e 64 3a 20 3c 69 6e 70 75 74 20 74     Second: <input t
     4dd:	79 70 65 3d 74 65 78 74 20 73 69 7a 65 3d 31 32     ype=text size=12
     4ed:	20 6e 61 6d 65 3d 73 65 63 20 76 61 6c 75 65 3d      name=sec value=
	...

000004fe <__c.2891>:
     4fe:	3e 3c 2f 74 64 3e 00                                ></td>.

00000505 <__c.2889>:
     505:	3c 74 72 3e 0a 3c 74 64 3e 3c 66 6f 72 6d 20 61     <tr>.<td><form a
     515:	63 74 69 6f 6e 3d 2f 20 6d 65 74 68 6f 64 3d 67     ction=/ method=g
     525:	65 74 3e 0a 44 61 79 3a 20 3c 69 6e 70 75 74 20     et>.Day: <input 
     535:	74 79 70 65 3d 74 65 78 74 20 73 69 7a 65 3d 31     type=text size=1
     545:	32 20 6e 61 6d 65 3d 64 61 79 20 76 61 6c 75 65     2 name=day value
     555:	3d 00                                               =.

00000557 <__c.2887>:
     557:	3e 3c 2f 74 64 3e 0a 3c 2f 74 72 3e 00              ></td>.</tr>.

00000564 <__c.2885>:
     564:	0a 3c 74 64 3e 3c 66 6f 72 6d 20 61 63 74 69 6f     .<td><form actio
     574:	6e 3d 2f 20 6d 65 74 68 6f 64 3d 67 65 74 3e 0a     n=/ method=get>.
     584:	4d 69 6e 75 74 65 3a 20 3c 69 6e 70 75 74 20 74     Minute: <input t
     594:	79 70 65 3d 74 65 78 74 20 73 69 7a 65 3d 31 32     ype=text size=12
     5a4:	20 6e 61 6d 65 3d 6d 69 6e 20 76 61 6c 75 65 3d      name=min value=
	...

000005b5 <__c.2883>:
     5b5:	3e 3c 2f 74 64 3e 00                                ></td>.

000005bc <__c.2881>:
     5bc:	3c 74 72 3e 0a 3c 74 64 3e 3c 66 6f 72 6d 20 61     <tr>.<td><form a
     5cc:	63 74 69 6f 6e 3d 2f 20 6d 65 74 68 6f 64 3d 67     ction=/ method=g
     5dc:	65 74 3e 0a 4d 6f 6e 74 68 3a 20 3c 69 6e 70 75     et>.Month: <inpu
     5ec:	74 20 74 79 70 65 3d 74 65 78 74 20 73 69 7a 65     t type=text size
     5fc:	3d 31 32 20 6e 61 6d 65 3d 6d 6f 6e 74 68 20 76     =12 name=month v
     60c:	61 6c 75 65 3d 00                                   alue=.

00000612 <__c.2879>:
     612:	3e 3c 2f 74 64 3e 0a 3c 2f 74 72 3e 00              ></td>.</tr>.

0000061f <__c.2877>:
     61f:	0a 3c 74 64 3e 3c 66 6f 72 6d 20 61 63 74 69 6f     .<td><form actio
     62f:	6e 3d 2f 20 6d 65 74 68 6f 64 3d 67 65 74 3e 0a     n=/ method=get>.
     63f:	48 6f 75 72 3a 20 3c 69 6e 70 75 74 20 74 79 70     Hour: <input typ
     64f:	65 3d 74 65 78 74 20 73 69 7a 65 3d 31 32 20 6e     e=text size=12 n
     65f:	61 6d 65 3d 68 6f 75 72 20 76 61 6c 75 65 3d 00     ame=hour value=.

0000066f <__c.2875>:
     66f:	3e 3c 2f 74 64 3e 00                                ></td>.

00000676 <__c.2873>:
     676:	3c 74 72 3e 0a 3c 74 64 3e 3c 66 6f 72 6d 20 61     <tr>.<td><form a
     686:	63 74 69 6f 6e 3d 2f 20 6d 65 74 68 6f 64 3d 67     ction=/ method=g
     696:	65 74 3e 0a 59 65 61 72 3a 20 3c 69 6e 70 75 74     et>.Year: <input
     6a6:	20 74 79 70 65 3d 74 65 78 74 20 73 69 7a 65 3d      type=text size=
     6b6:	31 32 20 6e 61 6d 65 3d 79 65 61 72 20 76 61 6c     12 name=year val
     6c6:	75 65 3d 00                                         ue=.

000006ca <__c.2871>:
     6ca:	3c 74 72 3e 0a 3c 74 68 3e 44 61 74 65 3c 2f 74     <tr>.<th>Date</t
     6da:	68 3e 3c 74 68 3e 54 69 6d 65 3c 2f 74 68 3e 0a     h><th>Time</th>.
     6ea:	3c 2f 74 72 3e 00                                   </tr>.

000006f0 <__c.2869>:
     6f0:	3c 74 72 3e 0a 3c 74 68 20 63 6f 6c 73 70 61 6e     <tr>.<th colspan
     700:	3d 22 32 22 3e 52 65 61 6c 20 54 69 6d 65 20 43     ="2">Real Time C
     710:	6c 6f 63 6b 20 53 65 74 74 69 6e 67 73 3c 2f 74     lock Settings</t
     720:	68 3e 0a 3c 2f 74 72 3e 0a 00                       h>.</tr>..

0000072a <__c.2867>:
     72a:	3c 62 6f 64 79 3e 0a 3c 64 69 76 20 63 6c 61 73     <body>.<div clas
     73a:	73 3d 63 65 6e 74 65 72 3e 0a 3c 68 32 3e 57 65     s=center>.<h2>We
     74a:	61 74 68 65 72 20 53 74 61 74 69 6f 6e 3c 2f 68     ather Station</h
     75a:	32 3e 0a 3c 74 61 62 6c 65 3e 0a 00                 2>.<table>..

00000766 <__c.2865>:
     766:	3c 2f 73 74 79 6c 65 3e 0a 00                       </style>..

00000770 <__c.2863>:
     770:	62 6f 64 79 20 7b 0a 62 61 63 6b 67 72 6f 75 6e     body {.backgroun
     780:	64 2d 63 6f 6c 6f 72 3a 20 70 6f 77 64 65 72 62     d-color: powderb
     790:	6c 75 65 3b 0a 7d 0a 00                             lue;.}..

00000798 <__c.2861>:
     798:	68 32 2c 20 68 72 20 7b 0a 74 65 78 74 2d 61 6c     h2, hr {.text-al
     7a8:	69 67 6e 3a 20 63 65 6e 74 65 72 3b 0a 7d 0a 00     ign: center;.}..

000007b8 <__c.2859>:
     7b8:	74 64 2e 62 75 74 74 6f 6e 20 7b 0a 70 61 64 64     td.button {.padd
     7c8:	69 6e 67 3a 20 30 70 78 3b 0a 7d 0a 00              ing: 0px;.}..

000007d5 <__c.2857>:
     7d5:	74 61 62 6c 65 2c 20 74 68 2c 20 74 64 20 7b 0a     table, th, td {.
     7e5:	62 6f 72 64 65 72 3a 20 31 70 78 20 73 6f 6c 69     border: 1px soli
     7f5:	64 20 62 6c 61 63 6b 3b 0a 62 6f 72 64 65 72 2d     d black;.border-
     805:	63 6f 6c 6c 61 70 73 65 3a 20 63 6f 6c 6c 61 70     collapse: collap
     815:	73 65 3b 0a 70 61 64 64 69 6e 67 3a 20 31 35 70     se;.padding: 15p
     825:	78 3b 0a 74 65 78 74 2d 61 6c 69 67 6e 3a 20 63     x;.text-align: c
     835:	65 6e 74 65 72 3b 0a 7d 0a 00                       enter;.}..

0000083f <__c.2855>:
     83f:	64 69 76 2e 63 65 6e 74 65 72 20 7b 0a 70 6f 73     div.center {.pos
     84f:	69 74 69 6f 6e 3a 20 61 62 73 6f 6c 75 74 65 3b     ition: absolute;
     85f:	0a 74 6f 70 3a 20 35 30 25 3b 0a 6c 65 66 74 3a     .top: 50%;.left:
     86f:	20 35 30 25 3b 0a 6d 61 72 67 69 6e 2d 72 69 67      50%;.margin-rig
     87f:	68 74 3a 20 2d 35 30 25 3b 0a 74 72 61 6e 73 66     ht: -50%;.transf
     88f:	6f 72 6d 3a 20 74 72 61 6e 73 6c 61 74 65 28 2d     orm: translate(-
     89f:	35 30 25 2c 20 2d 35 30 25 29 0a 7d 0a 00           50%, -50%).}..

000008ad <__c.2853>:
     8ad:	3c 73 74 79 6c 65 3e 0a 00                          <style>..

000008b6 <__c.2851>:
     8b6:	0a 3c 70 72 65 3e 0a 00                             .<pre>..

000008be <__c.2839>:
     8be:	3c 2f 70 72 65 3e 00                                </pre>.

000008c5 <__c.2837>:
     8c5:	3c 2f 64 69 76 3e 0a 3c 2f 62 6f 64 79 3e 0a 00     </div>.</body>..

000008d5 <__c.2835>:
     8d5:	3c 62 72 3e 3c 68 72 3e 62 79 20 44 61 6e 69 65     <br><hr>by Danie
     8e5:	6c 73 20 46 69 26 23 33 35 33 65 72 73 3c 2f 68     ls Fi&#353ers</h
     8f5:	72 3e 3c 2f 62 72 3e 00                             r></br>.

000008fd <__c.2833>:
     8fd:	3c 69 6e 70 75 74 20 74 79 70 65 3d 22 73 75 62     <input type="sub
     90d:	6d 69 74 22 20 76 61 6c 75 65 3d 22 48 6f 6d 65     mit" value="Home
     91d:	22 20 73 74 79 6c 65 3d 22 77 69 64 74 68 3a 31     " style="width:1
     92d:	30 30 25 22 20 6f 6e 63 6c 69 63 6b 3d 22 77 69     00%" onclick="wi
     93d:	6e 64 6f 77 2e 6c 6f 63 61 74 69 6f 6e 3d 27 2f     ndow.location='/
     94d:	68 6f 6d 65 27 3b 22 20 2f 3e 0a 00                 home';" />..

00000959 <__c.2831>:
     959:	3c 2f 74 61 62 6c 65 3e 0a 00                       </table>..

00000963 <__c.2829>:
     963:	3c 74 72 3e 3c 74 64 20 63 6c 61 73 73 3d 62 75     <tr><td class=bu
     973:	74 74 6f 6e 3e 3c 69 6e 70 75 74 20 74 79 70 65     tton><input type
     983:	3d 22 73 75 62 6d 69 74 22 20 76 61 6c 75 65 3d     ="submit" value=
     993:	22 52 65 73 74 61 72 74 22 20 73 74 79 6c 65 3d     "Restart" style=
     9a3:	22 77 69 64 74 68 3a 31 30 30 25 22 20 6f 6e 63     "width:100%" onc
     9b3:	6c 69 63 6b 3d 22 77 69 6e 64 6f 77 2e 6c 6f 63     lick="window.loc
     9c3:	61 74 69 6f 6e 3d 27 2f 72 65 73 65 74 27 3b 22     ation='/reset';"
     9d3:	20 2f 3e 3c 2f 74 64 3e 3c 2f 74 72 3e 0a 00         /></td></tr>..

000009e2 <__c.2827>:
     9e2:	3c 74 72 3e 3c 74 64 20 63 6c 61 73 73 3d 62 75     <tr><td class=bu
     9f2:	74 74 6f 6e 3e 3c 69 6e 70 75 74 20 74 79 70 65     tton><input type
     a02:	3d 73 75 62 6d 69 74 20 76 61 6c 75 65 3d 22 43     =submit value="C
     a12:	6f 6e 66 69 72 6d 22 20 73 74 79 6c 65 3d 22 77     onfirm" style="w
     a22:	69 64 74 68 3a 31 30 30 25 22 3e 3c 2f 74 64 3e     idth:100%"></td>
     a32:	3c 2f 74 72 3e 0a 3c 2f 66 6f 72 6d 3e 00           </tr>.</form>.

00000a40 <__c.2825>:
     a40:	22 20 2f 3e 3c 2f 74 64 3e 3c 2f 74 72 3e 0a 00     " /></td></tr>..

00000a50 <__c.2823>:
     a50:	3c 74 72 3e 3c 74 64 3e 48 61 6c 6c 20 53 65 6e     <tr><td>Hall Sen
     a60:	73 6f 72 3a 20 3c 69 6e 70 75 74 20 74 79 70 65     sor: <input type
     a70:	3d 74 65 78 74 20 73 69 7a 65 3d 31 32 20 6e 61     =text size=12 na
     a80:	6d 65 3d 68 61 6c 6c 20 76 61 6c 75 65 3d 22 00     me=hall value=".

00000a90 <__c.2821>:
     a90:	22 20 2f 3e 3c 2f 74 64 3e 3c 2f 74 72 3e 0a 00     " /></td></tr>..

00000aa0 <__c.2819>:
     aa0:	3c 74 72 3e 3c 74 64 3e 54 69 6d 65 6f 75 74 20     <tr><td>Timeout 
     ab0:	28 53 65 63 6f 6e 64 73 29 3a 20 3c 69 6e 70 75     (Seconds): <inpu
     ac0:	74 20 74 79 70 65 3d 74 65 78 74 20 73 69 7a 65     t type=text size
     ad0:	3d 31 32 20 6e 61 6d 65 3d 74 69 6d 65 6f 75 74     =12 name=timeout
     ae0:	20 76 61 6c 75 65 3d 22 00                           value=".

00000ae9 <__c.2817>:
     ae9:	22 20 2f 3e 3c 2f 74 64 3e 3c 2f 74 72 3e 0a 00     " /></td></tr>..

00000af9 <__c.2815>:
     af9:	3c 74 72 3e 3c 74 64 3e 50 6f 72 74 3a 20 3c 69     <tr><td>Port: <i
     b09:	6e 70 75 74 20 74 79 70 65 3d 74 65 78 74 20 73     nput type=text s
     b19:	69 7a 65 3d 36 20 6e 61 6d 65 3d 70 6f 72 74 20     ize=6 name=port 
     b29:	76 61 6c 75 65 3d 22 00                             value=".

00000b31 <__c.2812>:
     b31:	22 20 2f 3e 3c 2f 74 64 3e 3c 2f 74 72 3e 0a 00     " /></td></tr>..

00000b41 <__c.2810>:
     b41:	3c 74 72 3e 3c 74 64 3e 47 61 74 65 77 61 79 20     <tr><td>Gateway 
     b51:	49 50 3a 20 3c 69 6e 70 75 74 20 74 79 70 65 3d     IP: <input type=
     b61:	74 65 78 74 20 73 69 7a 65 3d 31 32 20 6e 61 6d     text size=12 nam
     b71:	65 3d 67 77 69 70 20 76 61 6c 75 65 3d 22 00        e=gwip value=".

00000b80 <__c.2808>:
     b80:	22 20 2f 3e 3c 2f 74 64 3e 3c 2f 74 72 3e 0a 00     " /></td></tr>..

00000b90 <__c.2806>:
     b90:	3c 74 72 3e 3c 74 64 3e 44 65 73 74 69 6e 61 74     <tr><td>Destinat
     ba0:	69 6f 6e 20 49 50 3a 20 3c 69 6e 70 75 74 20 74     ion IP: <input t
     bb0:	79 70 65 3d 74 65 78 74 20 73 69 7a 65 3d 31 32     ype=text size=12
     bc0:	20 6e 61 6d 65 3d 73 65 72 76 69 70 20 76 61 6c      name=servip val
     bd0:	75 65 3d 22 00                                      ue=".

00000bd5 <__c.2804>:
     bd5:	22 20 2f 3e 3c 2f 74 64 3e 3c 2f 74 72 3e 0a 00     " /></td></tr>..

00000be5 <__c.2802>:
     be5:	3c 74 72 3e 3c 74 64 3e 3c 66 6f 72 6d 20 61 63     <tr><td><form ac
     bf5:	74 69 6f 6e 3d 2f 20 6d 65 74 68 6f 64 3d 67 65     tion=/ method=ge
     c05:	74 3e 57 65 61 74 68 65 72 20 53 74 61 74 69 6f     t>Weather Statio
     c15:	6e 20 49 50 3a 20 3c 69 6e 70 75 74 20 74 79 70     n IP: <input typ
     c25:	65 3d 74 65 78 74 20 73 69 7a 65 3d 31 32 20 6e     e=text size=12 n
     c35:	61 6d 65 3d 6d 79 69 70 20 76 61 6c 75 65 3d 22     ame=myip value="
	...

00000c46 <__c.2800>:
     c46:	3c 74 72 3e 0a 3c 74 68 3e 53 65 74 74 69 6e 67     <tr>.<th>Setting
     c56:	73 3c 2f 74 68 3e 0a 3c 2f 74 72 3e 0a 00           s</th>.</tr>..

00000c64 <__c.2798>:
     c64:	3c 62 6f 64 79 3e 0a 3c 64 69 76 20 63 6c 61 73     <body>.<div clas
     c74:	73 3d 63 65 6e 74 65 72 3e 0a 3c 68 32 3e 57 65     s=center>.<h2>We
     c84:	61 74 68 65 72 20 53 74 61 74 69 6f 6e 3c 2f 68     ather Station</h
     c94:	32 3e 0a 3c 74 61 62 6c 65 3e 0a 00                 2>.<table>..

00000ca0 <__c.2796>:
     ca0:	3c 2f 73 74 79 6c 65 3e 0a 00                       </style>..

00000caa <__c.2794>:
     caa:	62 6f 64 79 20 7b 0a 62 61 63 6b 67 72 6f 75 6e     body {.backgroun
     cba:	64 2d 63 6f 6c 6f 72 3a 20 70 6f 77 64 65 72 62     d-color: powderb
     cca:	6c 75 65 3b 0a 7d 0a 00                             lue;.}..

00000cd2 <__c.2792>:
     cd2:	68 32 2c 20 68 72 20 7b 0a 74 65 78 74 2d 61 6c     h2, hr {.text-al
     ce2:	69 67 6e 3a 20 63 65 6e 74 65 72 3b 0a 7d 0a 00     ign: center;.}..

00000cf2 <__c.2790>:
     cf2:	74 64 2e 62 75 74 74 6f 6e 20 7b 0a 70 61 64 64     td.button {.padd
     d02:	69 6e 67 3a 20 30 70 78 3b 0a 7d 0a 00              ing: 0px;.}..

00000d0f <__c.2788>:
     d0f:	74 61 62 6c 65 2c 20 74 68 2c 20 74 64 20 7b 0a     table, th, td {.
     d1f:	62 6f 72 64 65 72 3a 20 31 70 78 20 73 6f 6c 69     border: 1px soli
     d2f:	64 20 62 6c 61 63 6b 3b 0a 62 6f 72 64 65 72 2d     d black;.border-
     d3f:	63 6f 6c 6c 61 70 73 65 3a 20 63 6f 6c 6c 61 70     collapse: collap
     d4f:	73 65 3b 0a 70 61 64 64 69 6e 67 3a 20 31 35 70     se;.padding: 15p
     d5f:	78 3b 0a 74 65 78 74 2d 61 6c 69 67 6e 3a 20 63     x;.text-align: c
     d6f:	65 6e 74 65 72 3b 0a 7d 0a 00                       enter;.}..

00000d79 <__c.2786>:
     d79:	64 69 76 2e 63 65 6e 74 65 72 20 7b 0a 70 6f 73     div.center {.pos
     d89:	69 74 69 6f 6e 3a 20 61 62 73 6f 6c 75 74 65 3b     ition: absolute;
     d99:	0a 74 6f 70 3a 20 35 30 25 3b 0a 6c 65 66 74 3a     .top: 50%;.left:
     da9:	20 35 30 25 3b 0a 6d 61 72 67 69 6e 2d 72 69 67      50%;.margin-rig
     db9:	68 74 3a 20 2d 35 30 25 3b 0a 74 72 61 6e 73 66     ht: -50%;.transf
     dc9:	6f 72 6d 3a 20 74 72 61 6e 73 6c 61 74 65 28 2d     orm: translate(-
     dd9:	35 30 25 2c 20 2d 35 30 25 29 0a 7d 0a 00           50%, -50%).}..

00000de7 <__c.2784>:
     de7:	3c 73 74 79 6c 65 3e 0a 00                          <style>..

00000df0 <__c.2782>:
     df0:	0a 3c 70 72 65 3e 0a 00                             .<pre>..

00000df8 <__c.2773>:
     df8:	3c 2f 70 72 65 3e 00                                </pre>.

00000dff <__c.2771>:
     dff:	3c 2f 64 69 76 3e 0a 3c 2f 62 6f 64 79 3e 0a 00     </div>.</body>..

00000e0f <__c.2769>:
     e0f:	3c 62 72 3e 3c 68 72 3e 62 79 20 44 61 6e 69 65     <br><hr>by Danie
     e1f:	6c 73 20 46 69 26 23 33 35 33 65 72 73 3c 2f 68     ls Fi&#353ers</h
     e2f:	72 3e 3c 2f 62 72 3e 00                             r></br>.

00000e37 <__c.2767>:
     e37:	3c 69 6e 70 75 74 20 74 79 70 65 3d 22 73 75 62     <input type="sub
     e47:	6d 69 74 22 20 76 61 6c 75 65 3d 22 52 54 43 20     mit" value="RTC 
     e57:	53 65 74 74 69 6e 67 73 22 20 73 74 79 6c 65 3d     Settings" style=
     e67:	22 77 69 64 74 68 3a 31 30 30 25 22 20 6f 6e 63     "width:100%" onc
     e77:	6c 69 63 6b 3d 22 77 69 6e 64 6f 77 2e 6c 6f 63     lick="window.loc
     e87:	61 74 69 6f 6e 3d 27 2f 72 74 63 27 3b 22 20 2f     ation='/rtc';" /
     e97:	3e 0a 00                                            >..

00000e9a <__c.2765>:
     e9a:	3c 69 6e 70 75 74 20 74 79 70 65 3d 22 73 75 62     <input type="sub
     eaa:	6d 69 74 22 20 76 61 6c 75 65 3d 22 53 65 74 74     mit" value="Sett
     eba:	69 6e 67 73 22 20 73 74 79 6c 65 3d 22 77 69 64     ings" style="wid
     eca:	74 68 3a 31 30 30 25 22 20 6f 6e 63 6c 69 63 6b     th:100%" onclick
     eda:	3d 22 77 69 6e 64 6f 77 2e 6c 6f 63 61 74 69 6f     ="window.locatio
     eea:	6e 3d 27 2f 73 65 74 74 69 6e 67 73 27 3b 22 20     n='/settings';" 
     efa:	2f 3e 0a 00                                         />..

00000efe <__c.2763>:
     efe:	0a 3c 2f 74 61 62 6c 65 3e 0a 3c 2f 66 6f 72 6d     .</table>.</form
     f0e:	3e 0a 00                                            >..

00000f11 <__c.2761>:
     f11:	3c 2f 74 64 3e 0a 3c 2f 74 72 3e 00                 </td>.</tr>.

00000f1d <__c.2759>:
     f1d:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 22 67 72 65     <font color="gre
     f2d:	65 6e 22 3e 4f 70 65 6e 3c 2f 66 6f 6e 74 3e 00     en">Open</font>.

00000f3d <__c.2757>:
     f3d:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 22 72 65 64     <font color="red
     f4d:	22 3e 43 6c 6f 73 65 64 3c 2f 66 6f 6e 74 3e 00     ">Closed</font>.

00000f5d <__c.2755>:
     f5d:	0a 3c 74 72 3e 0a 3c 74 64 3e 42 6f 78 20 53 74     .<tr>.<td>Box St
     f6d:	61 74 75 73 3a 20 00                                atus: .

00000f74 <__c.2753>:
     f74:	20 6d 2f 73 3c 2f 74 64 3e 0a 3c 2f 74 72 3e 00      m/s</td>.</tr>.

00000f84 <__c.2751>:
     f84:	0a 3c 74 72 3e 0a 3c 74 64 3e 57 69 6e 64 20 53     .<tr>.<td>Wind S
     f94:	70 65 65 64 3a 20 00                                peed: .

00000f9b <__c.2749>:
     f9b:	26 23 78 62 30 3b 3c 2f 74 64 3e 0a 3c 2f 74 72     &#xb0;</td>.</tr
     fab:	3e 00                                               >.

00000fad <__c.2747>:
     fad:	0a 3c 74 72 3e 0a 3c 74 64 3e 57 69 6e 64 20 41     .<tr>.<td>Wind A
     fbd:	6e 67 6c 65 3a 20 00                                ngle: .

00000fc4 <__c.2745>:
     fc4:	20 50 61 3c 2f 74 64 3e 0a 3c 2f 74 72 3e 00         Pa</td>.</tr>.

00000fd3 <__c.2743>:
     fd3:	0a 3c 74 72 3e 3c 74 64 3e 50 72 65 73 73 75 72     .<tr><td>Pressur
     fe3:	65 3a 20 00                                         e: .

00000fe7 <__c.2741>:
     fe7:	20 25 3c 2f 74 64 3e 0a 3c 2f 74 72 3e 00            %</td>.</tr>.

00000ff5 <__c.2739>:
     ff5:	0a 3c 74 72 3e 0a 3c 74 64 3e 48 75 6d 69 64 69     .<tr>.<td>Humidi
    1005:	74 79 3a 20 00                                      ty: .

0000100a <__c.2737>:
    100a:	20 26 23 78 32 31 30 33 3b 3c 2f 74 64 3e 0a 3c      &#x2103;</td>.<
    101a:	2f 74 72 3e 00                                      /tr>.

0000101f <__c.2735>:
    101f:	0a 3c 74 72 3e 0a 3c 74 64 3e 54 65 6d 70 65 72     .<tr>.<td>Temper
    102f:	61 74 75 72 65 3a 20 00                             ature: .

00001037 <__c.2733>:
    1037:	3c 74 72 3e 0a 3c 74 68 3e 49 6e 66 6f 72 6d 61     <tr>.<th>Informa
    1047:	74 69 6f 6e 3c 2f 74 68 3e 0a 3c 2f 74 72 3e 00     tion</th>.</tr>.

00001057 <__c.2731>:
    1057:	3c 62 6f 64 79 3e 0a 3c 64 69 76 20 63 6c 61 73     <body>.<div clas
    1067:	73 3d 63 65 6e 74 65 72 3e 0a 3c 68 32 3e 57 65     s=center>.<h2>We
    1077:	61 74 68 65 72 20 53 74 61 74 69 6f 6e 3c 2f 68     ather Station</h
    1087:	32 3e 0a 3c 74 61 62 6c 65 3e 0a 00                 2>.<table>..

00001093 <__c.2729>:
    1093:	3c 2f 73 74 79 6c 65 3e 0a 00                       </style>..

0000109d <__c.2727>:
    109d:	62 6f 64 79 20 7b 0a 62 61 63 6b 67 72 6f 75 6e     body {.backgroun
    10ad:	64 2d 63 6f 6c 6f 72 3a 20 70 6f 77 64 65 72 62     d-color: powderb
    10bd:	6c 75 65 3b 0a 7d 0a 00                             lue;.}..

000010c5 <__c.2725>:
    10c5:	68 32 2c 20 68 72 20 7b 0a 74 65 78 74 2d 61 6c     h2, hr {.text-al
    10d5:	69 67 6e 3a 20 63 65 6e 74 65 72 3b 0a 7d 0a 00     ign: center;.}..

000010e5 <__c.2723>:
    10e5:	74 64 2e 62 75 74 74 6f 6e 20 7b 0a 70 61 64 64     td.button {.padd
    10f5:	69 6e 67 3a 20 30 70 78 3b 0a 7d 0a 00              ing: 0px;.}..

00001102 <__c.2721>:
    1102:	74 61 62 6c 65 2c 20 74 68 2c 20 74 64 20 7b 0a     table, th, td {.
    1112:	62 6f 72 64 65 72 3a 20 31 70 78 20 73 6f 6c 69     border: 1px soli
    1122:	64 20 62 6c 61 63 6b 3b 0a 62 6f 72 64 65 72 2d     d black;.border-
    1132:	63 6f 6c 6c 61 70 73 65 3a 20 63 6f 6c 6c 61 70     collapse: collap
    1142:	73 65 3b 0a 70 61 64 64 69 6e 67 3a 20 31 35 70     se;.padding: 15p
    1152:	78 3b 0a 74 65 78 74 2d 61 6c 69 67 6e 3a 20 63     x;.text-align: c
    1162:	65 6e 74 65 72 3b 0a 7d 0a 00                       enter;.}..

0000116c <__c.2719>:
    116c:	64 69 76 2e 63 65 6e 74 65 72 20 7b 0a 70 6f 73     div.center {.pos
    117c:	69 74 69 6f 6e 3a 20 61 62 73 6f 6c 75 74 65 3b     ition: absolute;
    118c:	0a 74 6f 70 3a 20 35 30 25 3b 0a 6c 65 66 74 3a     .top: 50%;.left:
    119c:	20 35 30 25 3b 0a 6d 61 72 67 69 6e 2d 72 69 67      50%;.margin-rig
    11ac:	68 74 3a 20 2d 35 30 25 3b 0a 74 72 61 6e 73 66     ht: -50%;.transf
    11bc:	6f 72 6d 3a 20 74 72 61 6e 73 6c 61 74 65 28 2d     orm: translate(-
    11cc:	35 30 25 2c 20 2d 35 30 25 29 0a 7d 0a 00           50%, -50%).}..

000011da <__c.2717>:
    11da:	3c 73 74 79 6c 65 3e 0a 00                          <style>..

000011e3 <__c.2715>:
    11e3:	0a 3c 70 72 65 3e 0a 00                             .<pre>..

000011eb <__c.2705>:
    11eb:	48 54 54 50 2f 31 2e 30 20 32 30 30 20 4f 4b 0d     HTTP/1.0 200 OK.
    11fb:	0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74     .Content-Type: t
    120b:	65 78 74 2f 68 74 6d 6c 0d 0a 50 72 61 67 6d 61     ext/html..Pragma
    121b:	3a 20 6e 6f 2d 63 61 63 68 65 0d 0a 0d 0a 00        : no-cache.....

0000122a <__c.2618>:
    122a:	53 70 61 63 65 20 49 6e 76 61 64 65 72 73 20 61     Space Invaders a
    123a:	63 74 69 76 61 74 65 64 21 00                       ctivated!.

00001244 <SplashScreen>:
	...
    1260:	00 38 38 38 c0 c0 c0 00 00 00 00 00 00 00 00 00     .888............
    1270:	00 00 00 00 c0 c0 c0 38 38 38 00 00 00 00 00 00     .......888......
	...
    12b0:	00 e0 e0 e0 e0 fe fe fe 8f 8f 8f fe fe fe fe fe     ................
    12c0:	fe fe fe fe fe fe fe fe 8f 8f 8f fe fe fe f0 f0     ................
    12d0:	f0 f0 80 80 80 80 00 00 00 00 00 00 00 00 00 00     ................
	...
    1300:	00 ff ff ff ff 03 03 03 03 ff ff ff ff 0f 0f 0f     ................
    1310:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f ff ff     ................
    1320:	ff ff 03 03 03 03 ff ff ff ff 00 00 00 00 00 00     ................
	...
    1360:	00 0f 0f 0f 0f 0f 0f 00 00 00 00 00 0f 0f 0f 0f     ................
    1370:	0f 0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1398:	00 00 00 48 54 54 24 00 7c 14 14 08 00 78 14 14     ...HTT$.|....x..
    13a8:	78 00 38 44 44 28 00 7c 54 54 44 00 00 00 00 00     x.8DD(.|TTD.....
    13b8:	00 44 7c 44 00 7c 08 10 7c 00 0c 30 40 30 0c 00     .D|D.|..|..0@0..
    13c8:	78 14 14 78 00 7c 44 44 38 00 7c 54 54 44 00 7c     x..x.|DD8.|TTD.|
    13d8:	14 34 48 00 48 54 54 24 00 00 00 00 00 00 00 00     .4H.HTT$........
	...

0000143c <__c.2828>:
    143c:	43 61 6c 69 62 72 61 74 69 6f 6e 20 63 6f 6d 70     Calibration comp
    144c:	6c 65 74 65 21 0a 00                                lete!..

00001453 <__c.2823>:
    1453:	43 61 6c 69 62 72 61 74 69 6f 6e 20 73 74 61 72     Calibration star
    1463:	74 65 64 21 0a 00 00                                ted!...

0000146a <__ctors_end>:
    146a:	11 24       	eor	r1, r1
    146c:	1f be       	out	0x3f, r1	; 63
    146e:	cf ef       	ldi	r28, 0xFF	; 255
    1470:	d0 e4       	ldi	r29, 0x40	; 64
    1472:	de bf       	out	0x3e, r29	; 62
    1474:	cd bf       	out	0x3d, r28	; 61

00001476 <wdt_init>:


// Function Implementation
void wdt_init(void)
{
	MCUSR = 0;
    1476:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    1478:	0f b6       	in	r0, 0x3f	; 63
    147a:	f8 94       	cli
    147c:	a8 95       	wdr
    147e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1482:	88 61       	ori	r24, 0x18	; 24
    1484:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1488:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    148c:	0f be       	out	0x3f, r0	; 63

0000148e <__do_copy_data>:
    148e:	15 e0       	ldi	r17, 0x05	; 5
    1490:	a0 e0       	ldi	r26, 0x00	; 0
    1492:	b1 e0       	ldi	r27, 0x01	; 1
    1494:	e0 e2       	ldi	r30, 0x20	; 32
    1496:	ff e9       	ldi	r31, 0x9F	; 159
    1498:	00 e0       	ldi	r16, 0x00	; 0
    149a:	0b bf       	out	0x3b, r16	; 59
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <__do_copy_data+0x14>
    149e:	07 90       	elpm	r0, Z+
    14a0:	0d 92       	st	X+, r0
    14a2:	a0 36       	cpi	r26, 0x60	; 96
    14a4:	b1 07       	cpc	r27, r17
    14a6:	d9 f7       	brne	.-10     	; 0x149e <__do_copy_data+0x10>

000014a8 <__do_clear_bss>:
    14a8:	2e e1       	ldi	r18, 0x1E	; 30
    14aa:	a0 e6       	ldi	r26, 0x60	; 96
    14ac:	b5 e0       	ldi	r27, 0x05	; 5
    14ae:	01 c0       	rjmp	.+2      	; 0x14b2 <.do_clear_bss_start>

000014b0 <.do_clear_bss_loop>:
    14b0:	1d 92       	st	X+, r1

000014b2 <.do_clear_bss_start>:
    14b2:	ac 3d       	cpi	r26, 0xDC	; 220
    14b4:	b2 07       	cpc	r27, r18
    14b6:	e1 f7       	brne	.-8      	; 0x14b0 <.do_clear_bss_loop>
    14b8:	0e 94 93 3b 	call	0x7726	; 0x7726 <main>
    14bc:	0c 94 8e 4f 	jmp	0x9f1c	; 0x9f1c <_exit>

000014c0 <__bad_interrupt>:
    14c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000014c4 <bmp280_init>:

	p = ((p + var1 + var2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
	return (float)p / 256;
}

void bmp280_init() {
    14c4:	cf 93       	push	r28
    14c6:	df 93       	push	r29
	DDRB |= (1 << BMP_CS);
    14c8:	23 9a       	sbi	0x04, 3	; 4
	PORT_CS &= ~(1<<BMP_CS); // Power On the module
    14ca:	2b 98       	cbi	0x05, 3	; 5
	spi_rwSPI(0b01110100);
    14cc:	84 e7       	ldi	r24, 0x74	; 116
    14ce:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <spi_rwSPI>
	spi_rwSPI(0xFF);
    14d2:	8f ef       	ldi	r24, 0xFF	; 255
    14d4:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <spi_rwSPI>
	
	spi_rwSPI(0xF4);
    14d8:	84 ef       	ldi	r24, 0xF4	; 244
    14da:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <spi_rwSPI>
	spi_rwSPI(0b01010111);
    14de:	87 e5       	ldi	r24, 0x57	; 87
    14e0:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <spi_rwSPI>
	PORT_CS |= (1<<BMP_CS);
    14e4:	2b 9a       	sbi	0x05, 3	; 5
#include "../SPI/SPI.h"
#include "../../Options.h"
#include "../HIH8120/hih8120.h"

static void readCalibration() {
	_bmp280_calib.dig_T1 = spi_read16(0x88, BMP_CS);
    14e6:	63 e0       	ldi	r22, 0x03	; 3
    14e8:	70 e0       	ldi	r23, 0x00	; 0
    14ea:	88 e8       	ldi	r24, 0x88	; 136
    14ec:	0e 94 0b 3a 	call	0x7416	; 0x7416 <spi_read16>
    14f0:	cd e5       	ldi	r28, 0x5D	; 93
    14f2:	db e1       	ldi	r29, 0x1B	; 27
    14f4:	99 83       	std	Y+1, r25	; 0x01
    14f6:	88 83       	st	Y, r24
	_bmp280_calib.dig_T2 = spi_readS16(0x8A, BMP_CS);
    14f8:	63 e0       	ldi	r22, 0x03	; 3
    14fa:	70 e0       	ldi	r23, 0x00	; 0
    14fc:	8a e8       	ldi	r24, 0x8A	; 138
    14fe:	0e 94 2a 3a 	call	0x7454	; 0x7454 <spi_readS16>
    1502:	9b 83       	std	Y+3, r25	; 0x03
    1504:	8a 83       	std	Y+2, r24	; 0x02
	_bmp280_calib.dig_T3 = spi_readS16(0x8C, BMP_CS);
    1506:	63 e0       	ldi	r22, 0x03	; 3
    1508:	70 e0       	ldi	r23, 0x00	; 0
    150a:	8c e8       	ldi	r24, 0x8C	; 140
    150c:	0e 94 2a 3a 	call	0x7454	; 0x7454 <spi_readS16>
    1510:	9d 83       	std	Y+5, r25	; 0x05
    1512:	8c 83       	std	Y+4, r24	; 0x04

	_bmp280_calib.dig_P1 = spi_read16(0x8E, BMP_CS);
    1514:	63 e0       	ldi	r22, 0x03	; 3
    1516:	70 e0       	ldi	r23, 0x00	; 0
    1518:	8e e8       	ldi	r24, 0x8E	; 142
    151a:	0e 94 0b 3a 	call	0x7416	; 0x7416 <spi_read16>
    151e:	9f 83       	std	Y+7, r25	; 0x07
    1520:	8e 83       	std	Y+6, r24	; 0x06
	_bmp280_calib.dig_P2 = spi_readS16(0x90, BMP_CS);
    1522:	63 e0       	ldi	r22, 0x03	; 3
    1524:	70 e0       	ldi	r23, 0x00	; 0
    1526:	80 e9       	ldi	r24, 0x90	; 144
    1528:	0e 94 2a 3a 	call	0x7454	; 0x7454 <spi_readS16>
    152c:	99 87       	std	Y+9, r25	; 0x09
    152e:	88 87       	std	Y+8, r24	; 0x08
	_bmp280_calib.dig_P3 = spi_readS16(0x92, BMP_CS);
    1530:	63 e0       	ldi	r22, 0x03	; 3
    1532:	70 e0       	ldi	r23, 0x00	; 0
    1534:	82 e9       	ldi	r24, 0x92	; 146
    1536:	0e 94 2a 3a 	call	0x7454	; 0x7454 <spi_readS16>
    153a:	9b 87       	std	Y+11, r25	; 0x0b
    153c:	8a 87       	std	Y+10, r24	; 0x0a
	_bmp280_calib.dig_P4 = spi_readS16(0x94, BMP_CS);
    153e:	63 e0       	ldi	r22, 0x03	; 3
    1540:	70 e0       	ldi	r23, 0x00	; 0
    1542:	84 e9       	ldi	r24, 0x94	; 148
    1544:	0e 94 2a 3a 	call	0x7454	; 0x7454 <spi_readS16>
    1548:	9d 87       	std	Y+13, r25	; 0x0d
    154a:	8c 87       	std	Y+12, r24	; 0x0c
	_bmp280_calib.dig_P5 = spi_readS16(0x96, BMP_CS);
    154c:	63 e0       	ldi	r22, 0x03	; 3
    154e:	70 e0       	ldi	r23, 0x00	; 0
    1550:	86 e9       	ldi	r24, 0x96	; 150
    1552:	0e 94 2a 3a 	call	0x7454	; 0x7454 <spi_readS16>
    1556:	9f 87       	std	Y+15, r25	; 0x0f
    1558:	8e 87       	std	Y+14, r24	; 0x0e
	_bmp280_calib.dig_P6 = spi_readS16(0x98, BMP_CS);
    155a:	63 e0       	ldi	r22, 0x03	; 3
    155c:	70 e0       	ldi	r23, 0x00	; 0
    155e:	88 e9       	ldi	r24, 0x98	; 152
    1560:	0e 94 2a 3a 	call	0x7454	; 0x7454 <spi_readS16>
    1564:	99 8b       	std	Y+17, r25	; 0x11
    1566:	88 8b       	std	Y+16, r24	; 0x10
	_bmp280_calib.dig_P7 = spi_readS16(0x9A, BMP_CS);
    1568:	63 e0       	ldi	r22, 0x03	; 3
    156a:	70 e0       	ldi	r23, 0x00	; 0
    156c:	8a e9       	ldi	r24, 0x9A	; 154
    156e:	0e 94 2a 3a 	call	0x7454	; 0x7454 <spi_readS16>
    1572:	9b 8b       	std	Y+19, r25	; 0x13
    1574:	8a 8b       	std	Y+18, r24	; 0x12
	_bmp280_calib.dig_P8 = spi_readS16(0x9C, BMP_CS);
    1576:	63 e0       	ldi	r22, 0x03	; 3
    1578:	70 e0       	ldi	r23, 0x00	; 0
    157a:	8c e9       	ldi	r24, 0x9C	; 156
    157c:	0e 94 2a 3a 	call	0x7454	; 0x7454 <spi_readS16>
    1580:	9d 8b       	std	Y+21, r25	; 0x15
    1582:	8c 8b       	std	Y+20, r24	; 0x14
	_bmp280_calib.dig_P9 = spi_readS16(0x9E, BMP_CS);
    1584:	63 e0       	ldi	r22, 0x03	; 3
    1586:	70 e0       	ldi	r23, 0x00	; 0
    1588:	8e e9       	ldi	r24, 0x9E	; 158
    158a:	0e 94 2a 3a 	call	0x7454	; 0x7454 <spi_readS16>
    158e:	9f 8b       	std	Y+23, r25	; 0x17
    1590:	8e 8b       	std	Y+22, r24	; 0x16
	spi_rwSPI(0xF4);
	spi_rwSPI(0b01010111);
	PORT_CS |= (1<<BMP_CS);
	
	readCalibration();
}
    1592:	df 91       	pop	r29
    1594:	cf 91       	pop	r28
    1596:	08 95       	ret

00001598 <bmp280_readPressure>:

float bmp280_readPressure()
{
    1598:	2f 92       	push	r2
    159a:	3f 92       	push	r3
    159c:	4f 92       	push	r4
    159e:	5f 92       	push	r5
    15a0:	6f 92       	push	r6
    15a2:	7f 92       	push	r7
    15a4:	8f 92       	push	r8
    15a6:	9f 92       	push	r9
    15a8:	af 92       	push	r10
    15aa:	bf 92       	push	r11
    15ac:	cf 92       	push	r12
    15ae:	df 92       	push	r13
    15b0:	ef 92       	push	r14
    15b2:	ff 92       	push	r15
    15b4:	0f 93       	push	r16
    15b6:	1f 93       	push	r17
    15b8:	cf 93       	push	r28
    15ba:	df 93       	push	r29
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
    15c0:	6f 97       	sbiw	r28, 0x1f	; 31
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	f8 94       	cli
    15c6:	de bf       	out	0x3e, r29	; 62
    15c8:	0f be       	out	0x3f, r0	; 63
    15ca:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[6]; // Array to hold temp/pressure values (pressure in indices 0:2, and temp in indices 3:5)
	uint32_t pressureUncomp, tempUncomp;
	
	spi_BurstRead(0xF7, data, 6, BMP_CS);
    15cc:	23 e0       	ldi	r18, 0x03	; 3
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	46 e0       	ldi	r20, 0x06	; 6
    15d2:	be 01       	movw	r22, r28
    15d4:	6f 5f       	subi	r22, 0xFF	; 255
    15d6:	7f 4f       	sbci	r23, 0xFF	; 255
    15d8:	87 ef       	ldi	r24, 0xF7	; 247
    15da:	0e 94 de 39 	call	0x73bc	; 0x73bc <spi_BurstRead>
	tempUncomp = ((uint32_t)data[3]<<12) | ((uint32_t)data[4] << 4) | data[5]; // 20 bit temp val
	pressureUncomp = ((uint32_t)data[0]<<12) | ((uint32_t)data[1] << 4) | data[2]; // 20 bit pressure value
    15de:	29 81       	ldd	r18, Y+1	; 0x01
    15e0:	2d 8f       	std	Y+29, r18	; 0x1d
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
    15e4:	8e 8f       	std	Y+30, r24	; 0x1e
    15e6:	ab 81       	ldd	r26, Y+3	; 0x03
    15e8:	af 8f       	std	Y+31, r26	; 0x1f
	t_fine = ((((int32_t)(hih8120_temperature_C * 100) << 8) - 128) / 5);
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	48 ec       	ldi	r20, 0xC8	; 200
    15f0:	52 e4       	ldi	r21, 0x42	; 66
    15f2:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <hih8120_temperature_C>
    15f6:	70 91 30 01 	lds	r23, 0x0130	; 0x800130 <hih8120_temperature_C+0x1>
    15fa:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <hih8120_temperature_C+0x2>
    15fe:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <hih8120_temperature_C+0x3>
    1602:	0e 94 5f 41 	call	0x82be	; 0x82be <__mulsf3>
    1606:	0e 94 26 40 	call	0x804c	; 0x804c <__fixsfsi>
    160a:	b8 2f       	mov	r27, r24
    160c:	a7 2f       	mov	r26, r23
    160e:	96 2f       	mov	r25, r22
    1610:	88 27       	eor	r24, r24
    1612:	bc 01       	movw	r22, r24
    1614:	cd 01       	movw	r24, r26
    1616:	60 58       	subi	r22, 0x80	; 128
    1618:	71 09       	sbc	r23, r1
    161a:	81 09       	sbc	r24, r1
    161c:	91 09       	sbc	r25, r1
    161e:	25 e0       	ldi	r18, 0x05	; 5
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	40 e0       	ldi	r20, 0x00	; 0
    1624:	50 e0       	ldi	r21, 0x00	; 0
    1626:	0e 94 06 42 	call	0x840c	; 0x840c <__divmodsi4>
    162a:	da 01       	movw	r26, r20
    162c:	c9 01       	movw	r24, r18
    162e:	20 93 7e 1b 	sts	0x1B7E, r18	; 0x801b7e <t_fine>
    1632:	30 93 7f 1b 	sts	0x1B7F, r19	; 0x801b7f <t_fine+0x1>
    1636:	40 93 80 1b 	sts	0x1B80, r20	; 0x801b80 <t_fine+0x2>
    163a:	50 93 81 1b 	sts	0x1B81, r21	; 0x801b81 <t_fine+0x3>

static float bmp280_compensate_pressure(int32_t adc_P)
{
	int64_t var1, var2, p;

	var1 = ((int64_t)t_fine) - 128000;
    163e:	69 01       	movw	r12, r18
    1640:	7a 01       	movw	r14, r20
    1642:	ff 0c       	add	r15, r15
    1644:	cc 08       	sbc	r12, r12
    1646:	dc 2c       	mov	r13, r12
    1648:	76 01       	movw	r14, r12
    164a:	39 2f       	mov	r19, r25
    164c:	4a 2f       	mov	r20, r26
    164e:	5b 2f       	mov	r21, r27
    1650:	6c 2d       	mov	r22, r12
    1652:	7c 2d       	mov	r23, r12
    1654:	8c 2d       	mov	r24, r12
    1656:	9c 2d       	mov	r25, r12
    1658:	34 5f       	subi	r19, 0xF4	; 244
    165a:	41 40       	sbci	r20, 0x01	; 1
    165c:	51 09       	sbc	r21, r1
    165e:	61 09       	sbc	r22, r1
    1660:	71 09       	sbc	r23, r1
    1662:	81 09       	sbc	r24, r1
    1664:	91 09       	sbc	r25, r1
    1666:	2f 83       	std	Y+7, r18	; 0x07
    1668:	3a 87       	std	Y+10, r19	; 0x0a
    166a:	4b 87       	std	Y+11, r20	; 0x0b
    166c:	5c 87       	std	Y+12, r21	; 0x0c
    166e:	6d 87       	std	Y+13, r22	; 0x0d
    1670:	7e 87       	std	Y+14, r23	; 0x0e
    1672:	8f 87       	std	Y+15, r24	; 0x0f
    1674:	98 8b       	std	Y+16, r25	; 0x10
	var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
    1676:	a2 2e       	mov	r10, r18
    1678:	b3 2e       	mov	r11, r19
    167a:	c4 2e       	mov	r12, r20
    167c:	d5 2e       	mov	r13, r21
    167e:	e6 2e       	mov	r14, r22
    1680:	f7 2e       	mov	r15, r23
    1682:	08 2f       	mov	r16, r24
    1684:	19 2f       	mov	r17, r25
    1686:	0e 94 4a 42 	call	0x8494	; 0x8494 <__muldi3>
    168a:	29 8b       	std	Y+17, r18	; 0x11
    168c:	3a 8b       	std	Y+18, r19	; 0x12
    168e:	4b 8b       	std	Y+19, r20	; 0x13
    1690:	5c 8b       	std	Y+20, r21	; 0x14
    1692:	69 8f       	std	Y+25, r22	; 0x19
    1694:	7a 8f       	std	Y+26, r23	; 0x1a
    1696:	8b 8f       	std	Y+27, r24	; 0x1b
    1698:	9c 8f       	std	Y+28, r25	; 0x1c
	var2 = var2 + ((var1 * (int64_t)_bmp280_calib.dig_P5) << 17);
	var2 = var2 + (((int64_t)_bmp280_calib.dig_P4) << 35);
	var1 = ((var1 * var1 * (int64_t)_bmp280_calib.dig_P3) >> 8) +
	((var1 * (int64_t)_bmp280_calib.dig_P2) << 12);
    169a:	0f 2e       	mov	r0, r31
    169c:	fd e5       	ldi	r31, 0x5D	; 93
    169e:	8f 2e       	mov	r8, r31
    16a0:	fb e1       	ldi	r31, 0x1B	; 27
    16a2:	9f 2e       	mov	r9, r31
    16a4:	f0 2d       	mov	r31, r0
    16a6:	f4 01       	movw	r30, r8
    16a8:	31 85       	ldd	r19, Z+9	; 0x09
    16aa:	20 85       	ldd	r18, Z+8	; 0x08
    16ac:	93 2f       	mov	r25, r19
    16ae:	99 0f       	add	r25, r25
    16b0:	99 0b       	sbc	r25, r25
    16b2:	49 2f       	mov	r20, r25
    16b4:	59 2f       	mov	r21, r25
    16b6:	69 2f       	mov	r22, r25
    16b8:	79 2f       	mov	r23, r25
    16ba:	89 2f       	mov	r24, r25
    16bc:	0e 94 4a 42 	call	0x8494	; 0x8494 <__muldi3>
    16c0:	0c e0       	ldi	r16, 0x0C	; 12
    16c2:	0e 94 6b 43 	call	0x86d6	; 0x86d6 <__ashldi3>
    16c6:	22 2e       	mov	r2, r18
    16c8:	33 2e       	mov	r3, r19
    16ca:	44 2e       	mov	r4, r20
    16cc:	55 2e       	mov	r5, r21
    16ce:	66 2e       	mov	r6, r22
    16d0:	77 2e       	mov	r7, r23
    16d2:	88 87       	std	Y+8, r24	; 0x08
    16d4:	99 87       	std	Y+9, r25	; 0x09
	var1 =
	(((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;
    16d6:	d4 01       	movw	r26, r8
    16d8:	1b 96       	adiw	r26, 0x0b	; 11
    16da:	3c 91       	ld	r19, X
    16dc:	1b 97       	sbiw	r26, 0x0b	; 11
    16de:	1a 96       	adiw	r26, 0x0a	; 10
    16e0:	2c 91       	ld	r18, X
    16e2:	93 2f       	mov	r25, r19
    16e4:	99 0f       	add	r25, r25
    16e6:	99 0b       	sbc	r25, r25
    16e8:	a9 88       	ldd	r10, Y+17	; 0x11
    16ea:	ba 88       	ldd	r11, Y+18	; 0x12
    16ec:	cb 88       	ldd	r12, Y+19	; 0x13
    16ee:	dc 88       	ldd	r13, Y+20	; 0x14
    16f0:	e9 8c       	ldd	r14, Y+25	; 0x19
    16f2:	fa 8c       	ldd	r15, Y+26	; 0x1a
    16f4:	0b 8d       	ldd	r16, Y+27	; 0x1b
    16f6:	1c 8d       	ldd	r17, Y+28	; 0x1c
    16f8:	49 2f       	mov	r20, r25
    16fa:	59 2f       	mov	r21, r25
    16fc:	69 2f       	mov	r22, r25
    16fe:	79 2f       	mov	r23, r25
    1700:	89 2f       	mov	r24, r25
    1702:	0e 94 4a 42 	call	0x8494	; 0x8494 <__muldi3>
    1706:	08 e0       	ldi	r16, 0x08	; 8
    1708:	0e 94 84 43 	call	0x8708	; 0x8708 <__ashrdi3>
    170c:	a2 2c       	mov	r10, r2
    170e:	b3 2c       	mov	r11, r3
    1710:	c4 2c       	mov	r12, r4
    1712:	d5 2c       	mov	r13, r5
    1714:	e6 2c       	mov	r14, r6
    1716:	f7 2c       	mov	r15, r7
    1718:	08 85       	ldd	r16, Y+8	; 0x08
    171a:	19 85       	ldd	r17, Y+9	; 0x09
    171c:	0e 94 a2 43 	call	0x8744	; 0x8744 <__adddi3>
    1720:	70 58       	subi	r23, 0x80	; 128
    1722:	8f 4f       	sbci	r24, 0xFF	; 255
    1724:	9f 4f       	sbci	r25, 0xFF	; 255
    1726:	f4 01       	movw	r30, r8
    1728:	26 80       	ldd	r2, Z+6	; 0x06
    172a:	37 80       	ldd	r3, Z+7	; 0x07
    172c:	a2 2c       	mov	r10, r2
    172e:	b3 2c       	mov	r11, r3
    1730:	c1 2c       	mov	r12, r1
    1732:	d1 2c       	mov	r13, r1
    1734:	e1 2c       	mov	r14, r1
    1736:	f1 2c       	mov	r15, r1
    1738:	00 e0       	ldi	r16, 0x00	; 0
    173a:	10 e0       	ldi	r17, 0x00	; 0
    173c:	0e 94 4a 42 	call	0x8494	; 0x8494 <__muldi3>
	var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
	var2 = var2 + ((var1 * (int64_t)_bmp280_calib.dig_P5) << 17);
	var2 = var2 + (((int64_t)_bmp280_calib.dig_P4) << 35);
	var1 = ((var1 * var1 * (int64_t)_bmp280_calib.dig_P3) >> 8) +
	((var1 * (int64_t)_bmp280_calib.dig_P2) << 12);
	var1 =
    1740:	01 e2       	ldi	r16, 0x21	; 33
    1742:	0e 94 84 43 	call	0x8708	; 0x8708 <__ashrdi3>
    1746:	28 87       	std	Y+8, r18	; 0x08
    1748:	39 87       	std	Y+9, r19	; 0x09
    174a:	4d 8b       	std	Y+21, r20	; 0x15
    174c:	5e 8b       	std	Y+22, r21	; 0x16
    174e:	6f 8b       	std	Y+23, r22	; 0x17
    1750:	78 8f       	std	Y+24, r23	; 0x18
    1752:	58 2e       	mov	r5, r24
    1754:	49 2e       	mov	r4, r25
	(((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;

	if (var1 == 0) {
    1756:	a0 e0       	ldi	r26, 0x00	; 0
    1758:	0e 94 b4 43 	call	0x8768	; 0x8768 <__cmpdi2_s8>
    175c:	09 f4       	brne	.+2      	; 0x1760 <bmp280_readPressure+0x1c8>
    175e:	65 c1       	rjmp	.+714    	; 0x1a2a <bmp280_readPressure+0x492>
static float bmp280_compensate_pressure(int32_t adc_P)
{
	int64_t var1, var2, p;

	var1 = ((int64_t)t_fine) - 128000;
	var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
    1760:	0f 2e       	mov	r0, r31
    1762:	fd e5       	ldi	r31, 0x5D	; 93
    1764:	2f 2e       	mov	r2, r31
    1766:	fb e1       	ldi	r31, 0x1B	; 27
    1768:	3f 2e       	mov	r3, r31
    176a:	f0 2d       	mov	r31, r0
    176c:	d1 01       	movw	r26, r2
    176e:	51 96       	adiw	r26, 0x11	; 17
    1770:	3c 91       	ld	r19, X
    1772:	51 97       	sbiw	r26, 0x11	; 17
    1774:	50 96       	adiw	r26, 0x10	; 16
    1776:	2c 91       	ld	r18, X
    1778:	93 2f       	mov	r25, r19
    177a:	99 0f       	add	r25, r25
    177c:	99 0b       	sbc	r25, r25
    177e:	a9 88       	ldd	r10, Y+17	; 0x11
    1780:	ba 88       	ldd	r11, Y+18	; 0x12
    1782:	cb 88       	ldd	r12, Y+19	; 0x13
    1784:	dc 88       	ldd	r13, Y+20	; 0x14
    1786:	e9 8c       	ldd	r14, Y+25	; 0x19
    1788:	fa 8c       	ldd	r15, Y+26	; 0x1a
    178a:	0b 8d       	ldd	r16, Y+27	; 0x1b
    178c:	1c 8d       	ldd	r17, Y+28	; 0x1c
    178e:	49 2f       	mov	r20, r25
    1790:	59 2f       	mov	r21, r25
    1792:	69 2f       	mov	r22, r25
    1794:	79 2f       	mov	r23, r25
    1796:	89 2f       	mov	r24, r25
    1798:	0e 94 4a 42 	call	0x8494	; 0x8494 <__muldi3>
    179c:	29 8b       	std	Y+17, r18	; 0x11
    179e:	3a 8b       	std	Y+18, r19	; 0x12
    17a0:	4b 8b       	std	Y+19, r20	; 0x13
    17a2:	5c 8b       	std	Y+20, r21	; 0x14
    17a4:	66 2e       	mov	r6, r22
    17a6:	77 2e       	mov	r7, r23
    17a8:	88 2e       	mov	r8, r24
    17aa:	99 2e       	mov	r9, r25
	var2 = var2 + ((var1 * (int64_t)_bmp280_calib.dig_P5) << 17);
    17ac:	f1 01       	movw	r30, r2
    17ae:	37 85       	ldd	r19, Z+15	; 0x0f
    17b0:	26 85       	ldd	r18, Z+14	; 0x0e
    17b2:	93 2f       	mov	r25, r19
    17b4:	99 0f       	add	r25, r25
    17b6:	99 0b       	sbc	r25, r25
    17b8:	af 80       	ldd	r10, Y+7	; 0x07
    17ba:	ba 84       	ldd	r11, Y+10	; 0x0a
    17bc:	cb 84       	ldd	r12, Y+11	; 0x0b
    17be:	dc 84       	ldd	r13, Y+12	; 0x0c
    17c0:	ed 84       	ldd	r14, Y+13	; 0x0d
    17c2:	fe 84       	ldd	r15, Y+14	; 0x0e
    17c4:	0f 85       	ldd	r16, Y+15	; 0x0f
    17c6:	18 89       	ldd	r17, Y+16	; 0x10
    17c8:	49 2f       	mov	r20, r25
    17ca:	59 2f       	mov	r21, r25
    17cc:	69 2f       	mov	r22, r25
    17ce:	79 2f       	mov	r23, r25
    17d0:	89 2f       	mov	r24, r25
    17d2:	0e 94 4a 42 	call	0x8494	; 0x8494 <__muldi3>
    17d6:	01 e1       	ldi	r16, 0x11	; 17
    17d8:	0e 94 6b 43 	call	0x86d6	; 0x86d6 <__ashldi3>
    17dc:	a9 88       	ldd	r10, Y+17	; 0x11
    17de:	ba 88       	ldd	r11, Y+18	; 0x12
    17e0:	cb 88       	ldd	r12, Y+19	; 0x13
    17e2:	dc 88       	ldd	r13, Y+20	; 0x14
    17e4:	e6 2c       	mov	r14, r6
    17e6:	f7 2c       	mov	r15, r7
    17e8:	08 2d       	mov	r16, r8
    17ea:	19 2d       	mov	r17, r9
    17ec:	0e 94 a2 43 	call	0x8744	; 0x8744 <__adddi3>
    17f0:	a2 2e       	mov	r10, r18
    17f2:	b3 2e       	mov	r11, r19
    17f4:	c4 2e       	mov	r12, r20
    17f6:	d5 2e       	mov	r13, r21
    17f8:	e6 2e       	mov	r14, r22
    17fa:	f7 2e       	mov	r15, r23
    17fc:	8f 83       	std	Y+7, r24	; 0x07
    17fe:	19 2f       	mov	r17, r25

	if (var1 == 0) {
		return 0; // avoid exception caused by division by zero
	}
	p = 1048576 - adc_P;
	p = (((p << 31) - var2) * 3125) / var1;
    1800:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1802:	4f 2f       	mov	r20, r31
    1804:	50 e0       	ldi	r21, 0x00	; 0
    1806:	60 e0       	ldi	r22, 0x00	; 0
    1808:	70 e0       	ldi	r23, 0x00	; 0
    180a:	db 01       	movw	r26, r22
    180c:	ca 01       	movw	r24, r20
    180e:	07 2e       	mov	r0, r23
    1810:	7c e0       	ldi	r23, 0x0C	; 12
    1812:	88 0f       	add	r24, r24
    1814:	99 1f       	adc	r25, r25
    1816:	aa 1f       	adc	r26, r26
    1818:	bb 1f       	adc	r27, r27
    181a:	7a 95       	dec	r23
    181c:	d1 f7       	brne	.-12     	; 0x1812 <bmp280_readPressure+0x27a>
    181e:	70 2d       	mov	r23, r0
    1820:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1822:	42 2f       	mov	r20, r18
    1824:	50 e0       	ldi	r21, 0x00	; 0
    1826:	60 e0       	ldi	r22, 0x00	; 0
    1828:	70 e0       	ldi	r23, 0x00	; 0
    182a:	44 0f       	add	r20, r20
    182c:	55 1f       	adc	r21, r21
    182e:	66 1f       	adc	r22, r22
    1830:	77 1f       	adc	r23, r23
    1832:	44 0f       	add	r20, r20
    1834:	55 1f       	adc	r21, r21
    1836:	66 1f       	adc	r22, r22
    1838:	77 1f       	adc	r23, r23
    183a:	44 0f       	add	r20, r20
    183c:	55 1f       	adc	r21, r21
    183e:	66 1f       	adc	r22, r22
    1840:	77 1f       	adc	r23, r23
    1842:	44 0f       	add	r20, r20
    1844:	55 1f       	adc	r21, r21
    1846:	66 1f       	adc	r22, r22
    1848:	77 1f       	adc	r23, r23
    184a:	48 2b       	or	r20, r24
    184c:	59 2b       	or	r21, r25
    184e:	6a 2b       	or	r22, r26
    1850:	7b 2b       	or	r23, r27
    1852:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1854:	48 2b       	or	r20, r24
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	a0 e1       	ldi	r26, 0x10	; 16
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	84 1b       	sub	r24, r20
    1860:	95 0b       	sbc	r25, r21
    1862:	a6 0b       	sbc	r26, r22
    1864:	b7 0b       	sbc	r27, r23
    1866:	3c 01       	movw	r6, r24
    1868:	4d 01       	movw	r8, r26
    186a:	99 0c       	add	r9, r9
    186c:	66 08       	sbc	r6, r6
    186e:	76 2c       	mov	r7, r6
    1870:	43 01       	movw	r8, r6
    1872:	28 2f       	mov	r18, r24
    1874:	39 2f       	mov	r19, r25
    1876:	4a 2f       	mov	r20, r26
    1878:	5b 2f       	mov	r21, r27
    187a:	66 2d       	mov	r22, r6
    187c:	76 2d       	mov	r23, r6
    187e:	86 2d       	mov	r24, r6
    1880:	96 2d       	mov	r25, r6
    1882:	0f e1       	ldi	r16, 0x1F	; 31
    1884:	0e 94 6b 43 	call	0x86d6	; 0x86d6 <__ashldi3>
    1888:	62 2e       	mov	r6, r18
    188a:	73 2e       	mov	r7, r19
    188c:	84 2e       	mov	r8, r20
    188e:	95 2e       	mov	r9, r21
    1890:	b6 2f       	mov	r27, r22
    1892:	a7 2f       	mov	r26, r23
    1894:	8a 87       	std	Y+10, r24	; 0x0a
    1896:	9b 87       	std	Y+11, r25	; 0x0b
    1898:	f1 01       	movw	r30, r2
    189a:	35 85       	ldd	r19, Z+13	; 0x0d
    189c:	24 85       	ldd	r18, Z+12	; 0x0c
    189e:	93 2f       	mov	r25, r19
    18a0:	99 0f       	add	r25, r25
    18a2:	99 0b       	sbc	r25, r25
    18a4:	49 2f       	mov	r20, r25
    18a6:	59 2f       	mov	r21, r25
    18a8:	69 2f       	mov	r22, r25
    18aa:	79 2f       	mov	r23, r25
    18ac:	89 2f       	mov	r24, r25
    18ae:	03 e2       	ldi	r16, 0x23	; 35
    18b0:	0e 94 6b 43 	call	0x86d6	; 0x86d6 <__ashldi3>
    18b4:	0f 81       	ldd	r16, Y+7	; 0x07
    18b6:	0e 94 a2 43 	call	0x8744	; 0x8744 <__adddi3>
    18ba:	a2 2e       	mov	r10, r18
    18bc:	b3 2e       	mov	r11, r19
    18be:	c4 2e       	mov	r12, r20
    18c0:	d5 2e       	mov	r13, r21
    18c2:	e6 2e       	mov	r14, r22
    18c4:	f7 2e       	mov	r15, r23
    18c6:	08 2f       	mov	r16, r24
    18c8:	19 2f       	mov	r17, r25
    18ca:	26 2d       	mov	r18, r6
    18cc:	37 2d       	mov	r19, r7
    18ce:	48 2d       	mov	r20, r8
    18d0:	59 2d       	mov	r21, r9
    18d2:	6b 2f       	mov	r22, r27
    18d4:	7a 2f       	mov	r23, r26
    18d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    18d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    18da:	0e 94 ab 43 	call	0x8756	; 0x8756 <__subdi3>
    18de:	0f 2e       	mov	r0, r31
    18e0:	f5 e3       	ldi	r31, 0x35	; 53
    18e2:	af 2e       	mov	r10, r31
    18e4:	f0 2d       	mov	r31, r0
    18e6:	0f 2e       	mov	r0, r31
    18e8:	fc e0       	ldi	r31, 0x0C	; 12
    18ea:	bf 2e       	mov	r11, r31
    18ec:	f0 2d       	mov	r31, r0
    18ee:	c1 2c       	mov	r12, r1
    18f0:	d1 2c       	mov	r13, r1
    18f2:	e1 2c       	mov	r14, r1
    18f4:	f1 2c       	mov	r15, r1
    18f6:	00 e0       	ldi	r16, 0x00	; 0
    18f8:	10 e0       	ldi	r17, 0x00	; 0
    18fa:	0e 94 4a 42 	call	0x8494	; 0x8494 <__muldi3>
    18fe:	a8 84       	ldd	r10, Y+8	; 0x08
    1900:	b9 84       	ldd	r11, Y+9	; 0x09
    1902:	cd 88       	ldd	r12, Y+21	; 0x15
    1904:	de 88       	ldd	r13, Y+22	; 0x16
    1906:	ef 88       	ldd	r14, Y+23	; 0x17
    1908:	f8 8c       	ldd	r15, Y+24	; 0x18
    190a:	05 2d       	mov	r16, r5
    190c:	14 2d       	mov	r17, r4
    190e:	0e 94 9d 42 	call	0x853a	; 0x853a <__divdi3>
    1912:	2f 83       	std	Y+7, r18	; 0x07
    1914:	3a 87       	std	Y+10, r19	; 0x0a
    1916:	4b 87       	std	Y+11, r20	; 0x0b
    1918:	5c 87       	std	Y+12, r21	; 0x0c
    191a:	6d 87       	std	Y+13, r22	; 0x0d
    191c:	7e 87       	std	Y+14, r23	; 0x0e
    191e:	8f 87       	std	Y+15, r24	; 0x0f
    1920:	98 8b       	std	Y+16, r25	; 0x10
	var1 = (((int64_t)_bmp280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
    1922:	0d e0       	ldi	r16, 0x0D	; 13
    1924:	0e 94 84 43 	call	0x8708	; 0x8708 <__ashrdi3>
    1928:	92 2e       	mov	r9, r18
    192a:	83 2e       	mov	r8, r19
    192c:	74 2e       	mov	r7, r20
    192e:	65 2e       	mov	r6, r21
    1930:	56 2e       	mov	r5, r22
    1932:	47 2e       	mov	r4, r23
    1934:	88 87       	std	Y+8, r24	; 0x08
    1936:	99 87       	std	Y+9, r25	; 0x09
	var2 = (((int64_t)_bmp280_calib.dig_P8) * p) >> 19;

	p = ((p + var1 + var2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
    1938:	d1 01       	movw	r26, r2
    193a:	57 96       	adiw	r26, 0x17	; 23
    193c:	3c 91       	ld	r19, X
    193e:	57 97       	sbiw	r26, 0x17	; 23
    1940:	56 96       	adiw	r26, 0x16	; 22
    1942:	2c 91       	ld	r18, X
    1944:	93 2f       	mov	r25, r19
    1946:	99 0f       	add	r25, r25
    1948:	99 0b       	sbc	r25, r25
    194a:	a9 2c       	mov	r10, r9
    194c:	b8 2c       	mov	r11, r8
    194e:	c7 2c       	mov	r12, r7
    1950:	d6 2c       	mov	r13, r6
    1952:	e5 2c       	mov	r14, r5
    1954:	f4 2c       	mov	r15, r4
    1956:	08 2f       	mov	r16, r24
    1958:	19 85       	ldd	r17, Y+9	; 0x09
    195a:	49 2f       	mov	r20, r25
    195c:	59 2f       	mov	r21, r25
    195e:	69 2f       	mov	r22, r25
    1960:	79 2f       	mov	r23, r25
    1962:	89 2f       	mov	r24, r25
    1964:	0e 94 4a 42 	call	0x8494	; 0x8494 <__muldi3>
    1968:	0e 94 4a 42 	call	0x8494	; 0x8494 <__muldi3>
    196c:	09 e1       	ldi	r16, 0x19	; 25
    196e:	0e 94 84 43 	call	0x8708	; 0x8708 <__ashrdi3>
    1972:	af 80       	ldd	r10, Y+7	; 0x07
    1974:	ba 84       	ldd	r11, Y+10	; 0x0a
    1976:	cb 84       	ldd	r12, Y+11	; 0x0b
    1978:	dc 84       	ldd	r13, Y+12	; 0x0c
    197a:	ed 84       	ldd	r14, Y+13	; 0x0d
    197c:	fe 84       	ldd	r15, Y+14	; 0x0e
    197e:	0f 85       	ldd	r16, Y+15	; 0x0f
    1980:	18 89       	ldd	r17, Y+16	; 0x10
    1982:	0e 94 a2 43 	call	0x8744	; 0x8744 <__adddi3>
    1986:	28 87       	std	Y+8, r18	; 0x08
    1988:	39 87       	std	Y+9, r19	; 0x09
    198a:	44 2e       	mov	r4, r20
    198c:	55 2e       	mov	r5, r21
    198e:	66 2e       	mov	r6, r22
    1990:	77 2e       	mov	r7, r23
    1992:	88 2e       	mov	r8, r24
    1994:	99 2e       	mov	r9, r25
    1996:	f1 01       	movw	r30, r2
    1998:	35 89       	ldd	r19, Z+21	; 0x15
    199a:	24 89       	ldd	r18, Z+20	; 0x14
    199c:	93 2f       	mov	r25, r19
    199e:	99 0f       	add	r25, r25
    19a0:	99 0b       	sbc	r25, r25
    19a2:	49 2f       	mov	r20, r25
    19a4:	59 2f       	mov	r21, r25
    19a6:	69 2f       	mov	r22, r25
    19a8:	79 2f       	mov	r23, r25
    19aa:	89 2f       	mov	r24, r25
    19ac:	0e 94 4a 42 	call	0x8494	; 0x8494 <__muldi3>
    19b0:	03 e1       	ldi	r16, 0x13	; 19
    19b2:	0e 94 84 43 	call	0x8708	; 0x8708 <__ashrdi3>
    19b6:	a2 2e       	mov	r10, r18
    19b8:	b3 2e       	mov	r11, r19
    19ba:	c4 2e       	mov	r12, r20
    19bc:	d5 2e       	mov	r13, r21
    19be:	e6 2e       	mov	r14, r22
    19c0:	f7 2e       	mov	r15, r23
    19c2:	08 2f       	mov	r16, r24
    19c4:	19 2f       	mov	r17, r25
    19c6:	28 85       	ldd	r18, Y+8	; 0x08
    19c8:	39 85       	ldd	r19, Y+9	; 0x09
    19ca:	44 2d       	mov	r20, r4
    19cc:	55 2d       	mov	r21, r5
    19ce:	66 2d       	mov	r22, r6
    19d0:	77 2d       	mov	r23, r7
    19d2:	88 2d       	mov	r24, r8
    19d4:	99 2d       	mov	r25, r9
    19d6:	0e 94 a2 43 	call	0x8744	; 0x8744 <__adddi3>
    19da:	08 e0       	ldi	r16, 0x08	; 8
    19dc:	0e 94 84 43 	call	0x8708	; 0x8708 <__ashrdi3>
    19e0:	a2 2e       	mov	r10, r18
    19e2:	b3 2e       	mov	r11, r19
    19e4:	c4 2e       	mov	r12, r20
    19e6:	d5 2e       	mov	r13, r21
    19e8:	e6 2e       	mov	r14, r22
    19ea:	f7 2e       	mov	r15, r23
    19ec:	e8 2f       	mov	r30, r24
    19ee:	19 2f       	mov	r17, r25
	return (float)p / 256;
    19f0:	d1 01       	movw	r26, r2
    19f2:	53 96       	adiw	r26, 0x13	; 19
    19f4:	3c 91       	ld	r19, X
    19f6:	53 97       	sbiw	r26, 0x13	; 19
    19f8:	52 96       	adiw	r26, 0x12	; 18
    19fa:	2c 91       	ld	r18, X
    19fc:	93 2f       	mov	r25, r19
    19fe:	99 0f       	add	r25, r25
    1a00:	99 0b       	sbc	r25, r25
    1a02:	49 2f       	mov	r20, r25
    1a04:	59 2f       	mov	r21, r25
    1a06:	69 2f       	mov	r22, r25
    1a08:	79 2f       	mov	r23, r25
    1a0a:	89 2f       	mov	r24, r25
    1a0c:	04 e0       	ldi	r16, 0x04	; 4
    1a0e:	0e 94 6b 43 	call	0x86d6	; 0x86d6 <__ashldi3>
    1a12:	0e 2f       	mov	r16, r30
    1a14:	0e 94 a2 43 	call	0x8744	; 0x8744 <__adddi3>
    1a18:	0e 94 57 40 	call	0x80ae	; 0x80ae <__floatdisf>
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	40 e8       	ldi	r20, 0x80	; 128
    1a22:	5b e3       	ldi	r21, 0x3B	; 59
    1a24:	0e 94 5f 41 	call	0x82be	; 0x82be <__mulsf3>
    1a28:	03 c0       	rjmp	.+6      	; 0x1a30 <bmp280_readPressure+0x498>
	((var1 * (int64_t)_bmp280_calib.dig_P2) << 12);
	var1 =
	(((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;

	if (var1 == 0) {
		return 0; // avoid exception caused by division by zero
    1a2a:	60 e0       	ldi	r22, 0x00	; 0
    1a2c:	70 e0       	ldi	r23, 0x00	; 0
    1a2e:	cb 01       	movw	r24, r22
	tempUncomp = ((uint32_t)data[3]<<12) | ((uint32_t)data[4] << 4) | data[5]; // 20 bit temp val
	pressureUncomp = ((uint32_t)data[0]<<12) | ((uint32_t)data[1] << 4) | data[2]; // 20 bit pressure value
	t_fine = ((((int32_t)(hih8120_temperature_C * 100) << 8) - 128) / 5);
	//bmp280_compensate_T_int32(tempUncomp);
	return bmp280_compensate_pressure(pressureUncomp);
}
    1a30:	6f 96       	adiw	r28, 0x1f	; 31
    1a32:	0f b6       	in	r0, 0x3f	; 63
    1a34:	f8 94       	cli
    1a36:	de bf       	out	0x3e, r29	; 62
    1a38:	0f be       	out	0x3f, r0	; 63
    1a3a:	cd bf       	out	0x3d, r28	; 61
    1a3c:	df 91       	pop	r29
    1a3e:	cf 91       	pop	r28
    1a40:	1f 91       	pop	r17
    1a42:	0f 91       	pop	r16
    1a44:	ff 90       	pop	r15
    1a46:	ef 90       	pop	r14
    1a48:	df 90       	pop	r13
    1a4a:	cf 90       	pop	r12
    1a4c:	bf 90       	pop	r11
    1a4e:	af 90       	pop	r10
    1a50:	9f 90       	pop	r9
    1a52:	8f 90       	pop	r8
    1a54:	7f 90       	pop	r7
    1a56:	6f 90       	pop	r6
    1a58:	5f 90       	pop	r5
    1a5a:	4f 90       	pop	r4
    1a5c:	3f 90       	pop	r3
    1a5e:	2f 90       	pop	r2
    1a60:	08 95       	ret

00001a62 <udp_client_check_for_dns_answer>:
}

// process the answer from the dns server:
// return 1 on sucessful processing of answer.
// We set also the variable haveDNSanswer
uint8_t udp_client_check_for_dns_answer(uint8_t *buf,uint16_t plen){
    1a62:	fc 01       	movw	r30, r24
        uint8_t j,i;
        if (plen<70){
    1a64:	66 34       	cpi	r22, 0x46	; 70
    1a66:	71 05       	cpc	r23, r1
    1a68:	08 f4       	brcc	.+2      	; 0x1a6c <udp_client_check_for_dns_answer+0xa>
    1a6a:	73 c0       	rjmp	.+230    	; 0x1b52 <udp_client_check_for_dns_answer+0xf0>
                return(0);
        }
        if (buf[UDP_SRC_PORT_L_P]!=53){
    1a6c:	83 a1       	ldd	r24, Z+35	; 0x23
    1a6e:	85 33       	cpi	r24, 0x35	; 53
    1a70:	09 f0       	breq	.+2      	; 0x1a74 <udp_client_check_for_dns_answer+0x12>
    1a72:	71 c0       	rjmp	.+226    	; 0x1b56 <udp_client_check_for_dns_answer+0xf4>
                // not from a DNS
                return(0);
        }
        if (buf[UDP_DST_PORT_H_P]!=DNSCLIENT_SRC_PORT_H){ 
    1a74:	84 a1       	ldd	r24, Z+36	; 0x24
    1a76:	80 3e       	cpi	r24, 0xE0	; 224
    1a78:	09 f0       	breq	.+2      	; 0x1a7c <udp_client_check_for_dns_answer+0x1a>
    1a7a:	6f c0       	rjmp	.+222    	; 0x1b5a <udp_client_check_for_dns_answer+0xf8>
                return(0);
        }
        // we use the TID also as port:
        if (buf[UDP_DST_PORT_L_P]!=dnstid_l){ 
    1a7c:	85 a1       	ldd	r24, Z+37	; 0x25
    1a7e:	90 91 66 05 	lds	r25, 0x0566	; 0x800566 <dnstid_l>
    1a82:	89 13       	cpse	r24, r25
    1a84:	6c c0       	rjmp	.+216    	; 0x1b5e <udp_client_check_for_dns_answer+0xfc>
        // is the packet for my IP:
        if(eth_type_is_ip_and_my_ip(buf,plen)==0){
                return(0);
        }
        */
        if (buf[UDP_DATA_P+1]!=dnstid_l){ 
    1a86:	93 a5       	ldd	r25, Z+43	; 0x2b
    1a88:	89 13       	cpse	r24, r25
    1a8a:	6b c0       	rjmp	.+214    	; 0x1b62 <udp_client_check_for_dns_answer+0x100>
                return(0);
        }
        // check flags lower byte:
        if ((buf[UDP_DATA_P+3]&0x8F)!=0x80){ 
    1a8c:	85 a5       	ldd	r24, Z+45	; 0x2d
    1a8e:	8f 78       	andi	r24, 0x8F	; 143
    1a90:	80 38       	cpi	r24, 0x80	; 128
    1a92:	29 f0       	breq	.+10     	; 0x1a9e <udp_client_check_for_dns_answer+0x3c>
                // there is an error or server does not support recursive
                // queries. We can only work with servers that support recursive
                // queries.
                dns_ansError=1;
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <__data_end>
                return(0);
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	08 95       	ret
        //
        // UDP_DATA_P+12+querylen is first byte of first answer.
        // The answer contains again the domain name and we need to
        // jump over it to find the IP. This part can be abbreviated by
        // the use of 2 byte pointers. See RFC 1035.
        i=12+buf[UDP_DATA_P]; // we encoded the query len into tid
    1a9e:	92 a5       	ldd	r25, Z+42	; 0x2a
    1aa0:	94 5f       	subi	r25, 0xF4	; 244
                // pointer
                i+=2;
        }else{
                // we just search for the first, zero=root domain
                // all other octets must be non zero
                while(i<plen-UDP_DATA_P-7){
    1aa2:	61 53       	subi	r22, 0x31	; 49
    1aa4:	71 09       	sbc	r23, r1
        // The answer contains again the domain name and we need to
        // jump over it to find the IP. This part can be abbreviated by
        // the use of 2 byte pointers. See RFC 1035.
        i=12+buf[UDP_DATA_P]; // we encoded the query len into tid
ChecNextResp:
        if (buf[UDP_DATA_P+i] & 0xc0){
    1aa6:	df 01       	movw	r26, r30
    1aa8:	a9 0f       	add	r26, r25
    1aaa:	b1 1d       	adc	r27, r1
    1aac:	9a 96       	adiw	r26, 0x2a	; 42
    1aae:	8c 91       	ld	r24, X
    1ab0:	80 7c       	andi	r24, 0xC0	; 192
    1ab2:	71 f0       	breq	.+28     	; 0x1ad0 <udp_client_check_for_dns_answer+0x6e>
                // pointer
                i+=2;
    1ab4:	9e 5f       	subi	r25, 0xFE	; 254
    1ab6:	11 c0       	rjmp	.+34     	; 0x1ada <udp_client_check_for_dns_answer+0x78>
        }else{
                // we just search for the first, zero=root domain
                // all other octets must be non zero
                while(i<plen-UDP_DATA_P-7){
                        i++;
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	89 0f       	add	r24, r25
                        if (buf[UDP_DATA_P+i]==0){
    1abc:	df 01       	movw	r26, r30
    1abe:	a8 0f       	add	r26, r24
    1ac0:	b1 1d       	adc	r27, r1
    1ac2:	9a 96       	adiw	r26, 0x2a	; 42
    1ac4:	2c 91       	ld	r18, X
    1ac6:	21 11       	cpse	r18, r1
    1ac8:	02 c0       	rjmp	.+4      	; 0x1ace <udp_client_check_for_dns_answer+0x6c>
                                i++;
    1aca:	9e 5f       	subi	r25, 0xFE	; 254
                                break;
    1acc:	06 c0       	rjmp	.+12     	; 0x1ada <udp_client_check_for_dns_answer+0x78>
                i+=2;
        }else{
                // we just search for the first, zero=root domain
                // all other octets must be non zero
                while(i<plen-UDP_DATA_P-7){
                        i++;
    1ace:	98 2f       	mov	r25, r24
                // pointer
                i+=2;
        }else{
                // we just search for the first, zero=root domain
                // all other octets must be non zero
                while(i<plen-UDP_DATA_P-7){
    1ad0:	29 2f       	mov	r18, r25
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	26 17       	cp	r18, r22
    1ad6:	37 07       	cpc	r19, r23
    1ad8:	78 f3       	brcs	.-34     	; 0x1ab8 <udp_client_check_for_dns_answer+0x56>
                }
        }
        // There might be multipe records in the answer. 
        // We are searching for an A record (contains IP).
        // Contributed by Andras Tucsni
        if (buf[UDP_DATA_P+i+1] != 1){    // check type == 1 for "A"
    1ada:	29 2f       	mov	r18, r25
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	df 01       	movw	r26, r30
    1ae0:	a2 0f       	add	r26, r18
    1ae2:	b3 1f       	adc	r27, r19
    1ae4:	9b 96       	adiw	r26, 0x2b	; 43
    1ae6:	8c 91       	ld	r24, X
    1ae8:	81 30       	cpi	r24, 0x01	; 1
    1aea:	99 f0       	breq	.+38     	; 0x1b12 <udp_client_check_for_dns_answer+0xb0>
                i += 2 + 2 + 4;    // skip type & class & TTL
                i += buf[UDP_DATA_P+i+1] + 2;    // skip datalength bytes
    1aec:	88 e0       	ldi	r24, 0x08	; 8
    1aee:	89 0f       	add	r24, r25
    1af0:	df 01       	movw	r26, r30
    1af2:	a8 0f       	add	r26, r24
    1af4:	b1 1d       	adc	r27, r1
    1af6:	9b 96       	adiw	r26, 0x2b	; 43
    1af8:	8c 91       	ld	r24, X
    1afa:	96 5f       	subi	r25, 0xF6	; 246
    1afc:	98 0f       	add	r25, r24
                if (i < plen-UDP_DATA_P-7){
    1afe:	29 2f       	mov	r18, r25
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	26 17       	cp	r18, r22
    1b04:	37 07       	cpc	r19, r23
    1b06:	78 f2       	brcs	.-98     	; 0x1aa6 <udp_client_check_for_dns_answer+0x44>
                        goto ChecNextResp;
                }
                dns_ansError=3; // no A record found but packet ends 
    1b08:	83 e0       	ldi	r24, 0x03	; 3
    1b0a:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <__data_end>
                return(0);
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	08 95       	ret
        } 
        // We have an A record
        // i is now pointing to the high octet of the type field
        if (buf[UDP_DATA_P+i+9] !=4 ){
    1b12:	df 01       	movw	r26, r30
    1b14:	a2 0f       	add	r26, r18
    1b16:	b3 1f       	adc	r27, r19
    1b18:	d3 96       	adiw	r26, 0x33	; 51
    1b1a:	2c 91       	ld	r18, X
    1b1c:	24 30       	cpi	r18, 0x04	; 4
    1b1e:	29 f0       	breq	.+10     	; 0x1b2a <udp_client_check_for_dns_answer+0xc8>
                dns_ansError=2; // not IPv4
    1b20:	82 e0       	ldi	r24, 0x02	; 2
    1b22:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <__data_end>
                return(0);
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	08 95       	ret
    1b2a:	2a e0       	ldi	r18, 0x0A	; 10
    1b2c:	29 0f       	add	r18, r25
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	26 5d       	subi	r18, 0xD6	; 214
    1b32:	3f 4f       	sbci	r19, 0xFF	; 255
    1b34:	e2 0f       	add	r30, r18
    1b36:	f3 1f       	adc	r31, r19
    1b38:	a1 e6       	ldi	r26, 0x61	; 97
    1b3a:	b5 e0       	ldi	r27, 0x05	; 5
    1b3c:	25 e6       	ldi	r18, 0x65	; 101
    1b3e:	35 e0       	ldi	r19, 0x05	; 5
        }
        i+=10;
        j=0;
        while(j<4){
                dns_answerip[j]=buf[UDP_DATA_P+i+j];
    1b40:	91 91       	ld	r25, Z+
    1b42:	9d 93       	st	X+, r25
                dns_ansError=2; // not IPv4
                return(0);
        }
        i+=10;
        j=0;
        while(j<4){
    1b44:	a2 17       	cp	r26, r18
    1b46:	b3 07       	cpc	r27, r19
    1b48:	d9 f7       	brne	.-10     	; 0x1b40 <udp_client_check_for_dns_answer+0xde>
                dns_answerip[j]=buf[UDP_DATA_P+i+j];
                j++;
        }
        haveDNSanswer=1;
    1b4a:	91 e0       	ldi	r25, 0x01	; 1
    1b4c:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <haveDNSanswer>
        return(1);
    1b50:	08 95       	ret
// return 1 on sucessful processing of answer.
// We set also the variable haveDNSanswer
uint8_t udp_client_check_for_dns_answer(uint8_t *buf,uint16_t plen){
        uint8_t j,i;
        if (plen<70){
                return(0);
    1b52:	80 e0       	ldi	r24, 0x00	; 0
    1b54:	08 95       	ret
        }
        if (buf[UDP_SRC_PORT_L_P]!=53){
                // not from a DNS
                return(0);
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	08 95       	ret
        }
        if (buf[UDP_DST_PORT_H_P]!=DNSCLIENT_SRC_PORT_H){ 
                return(0);
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
    1b5c:	08 95       	ret
        }
        // we use the TID also as port:
        if (buf[UDP_DST_PORT_L_P]!=dnstid_l){ 
                return(0);
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    1b60:	08 95       	ret
        if(eth_type_is_ip_and_my_ip(buf,plen)==0){
                return(0);
        }
        */
        if (buf[UDP_DATA_P+1]!=dnstid_l){ 
                return(0);
    1b62:	80 e0       	ldi	r24, 0x00	; 0
                dns_answerip[j]=buf[UDP_DATA_P+i+j];
                j++;
        }
        haveDNSanswer=1;
        return(1);
}
    1b64:	08 95       	ret

00001b66 <enc28j60ReadOp>:
{
	if( enc28j60Read(EPKTCNT) ==0 ){
		return(0);
        }
        return(1);
}
    1b66:	2a 98       	cbi	0x05, 2	; 5
    1b68:	96 2f       	mov	r25, r22
    1b6a:	6f 71       	andi	r22, 0x1F	; 31
    1b6c:	86 2b       	or	r24, r22
    1b6e:	8e bd       	out	0x2e, r24	; 46
    1b70:	0d b4       	in	r0, 0x2d	; 45
    1b72:	07 fe       	sbrs	r0, 7
    1b74:	fd cf       	rjmp	.-6      	; 0x1b70 <enc28j60ReadOp+0xa>
    1b76:	1e bc       	out	0x2e, r1	; 46
    1b78:	0d b4       	in	r0, 0x2d	; 45
    1b7a:	07 fe       	sbrs	r0, 7
    1b7c:	fd cf       	rjmp	.-6      	; 0x1b78 <enc28j60ReadOp+0x12>
    1b7e:	99 23       	and	r25, r25
    1b80:	24 f4       	brge	.+8      	; 0x1b8a <enc28j60ReadOp+0x24>
    1b82:	1e bc       	out	0x2e, r1	; 46
    1b84:	0d b4       	in	r0, 0x2d	; 45
    1b86:	07 fe       	sbrs	r0, 7
    1b88:	fd cf       	rjmp	.-6      	; 0x1b84 <enc28j60ReadOp+0x1e>
    1b8a:	2a 9a       	sbi	0x05, 2	; 5
    1b8c:	8e b5       	in	r24, 0x2e	; 46
    1b8e:	08 95       	ret

00001b90 <enc28j60WriteOp>:
    1b90:	2a 98       	cbi	0x05, 2	; 5
    1b92:	6f 71       	andi	r22, 0x1F	; 31
    1b94:	86 2b       	or	r24, r22
    1b96:	8e bd       	out	0x2e, r24	; 46
    1b98:	0d b4       	in	r0, 0x2d	; 45
    1b9a:	07 fe       	sbrs	r0, 7
    1b9c:	fd cf       	rjmp	.-6      	; 0x1b98 <enc28j60WriteOp+0x8>
    1b9e:	4e bd       	out	0x2e, r20	; 46
    1ba0:	0d b4       	in	r0, 0x2d	; 45
    1ba2:	07 fe       	sbrs	r0, 7
    1ba4:	fd cf       	rjmp	.-6      	; 0x1ba0 <enc28j60WriteOp+0x10>
    1ba6:	2a 9a       	sbi	0x05, 2	; 5
    1ba8:	08 95       	ret

00001baa <enc28j60ReadBuffer>:
    1baa:	fb 01       	movw	r30, r22
    1bac:	2a 98       	cbi	0x05, 2	; 5
    1bae:	2a e3       	ldi	r18, 0x3A	; 58
    1bb0:	2e bd       	out	0x2e, r18	; 46
    1bb2:	0d b4       	in	r0, 0x2d	; 45
    1bb4:	07 fe       	sbrs	r0, 7
    1bb6:	fd cf       	rjmp	.-6      	; 0x1bb2 <enc28j60ReadBuffer+0x8>
    1bb8:	00 97       	sbiw	r24, 0x00	; 0
    1bba:	69 f0       	breq	.+26     	; 0x1bd6 <enc28j60ReadBuffer+0x2c>
    1bbc:	df 01       	movw	r26, r30
    1bbe:	a8 0f       	add	r26, r24
    1bc0:	b9 1f       	adc	r27, r25
    1bc2:	1e bc       	out	0x2e, r1	; 46
    1bc4:	0d b4       	in	r0, 0x2d	; 45
    1bc6:	07 fe       	sbrs	r0, 7
    1bc8:	fd cf       	rjmp	.-6      	; 0x1bc4 <enc28j60ReadBuffer+0x1a>
    1bca:	9e b5       	in	r25, 0x2e	; 46
    1bcc:	91 93       	st	Z+, r25
    1bce:	ea 17       	cp	r30, r26
    1bd0:	fb 07       	cpc	r31, r27
    1bd2:	b9 f7       	brne	.-18     	; 0x1bc2 <enc28j60ReadBuffer+0x18>
    1bd4:	01 c0       	rjmp	.+2      	; 0x1bd8 <enc28j60ReadBuffer+0x2e>
    1bd6:	df 01       	movw	r26, r30
    1bd8:	1c 92       	st	X, r1
    1bda:	2a 9a       	sbi	0x05, 2	; 5
    1bdc:	08 95       	ret

00001bde <enc28j60WriteBuffer>:
    1bde:	fb 01       	movw	r30, r22
    1be0:	2a 98       	cbi	0x05, 2	; 5
    1be2:	2a e7       	ldi	r18, 0x7A	; 122
    1be4:	2e bd       	out	0x2e, r18	; 46
    1be6:	0d b4       	in	r0, 0x2d	; 45
    1be8:	07 fe       	sbrs	r0, 7
    1bea:	fd cf       	rjmp	.-6      	; 0x1be6 <enc28j60WriteBuffer+0x8>
    1bec:	09 c0       	rjmp	.+18     	; 0x1c00 <enc28j60WriteBuffer+0x22>
    1bee:	9f 01       	movw	r18, r30
    1bf0:	28 0f       	add	r18, r24
    1bf2:	39 1f       	adc	r19, r25
    1bf4:	91 91       	ld	r25, Z+
    1bf6:	9e bd       	out	0x2e, r25	; 46
    1bf8:	0d b4       	in	r0, 0x2d	; 45
    1bfa:	07 fe       	sbrs	r0, 7
    1bfc:	fd cf       	rjmp	.-6      	; 0x1bf8 <enc28j60WriteBuffer+0x1a>
    1bfe:	03 c0       	rjmp	.+6      	; 0x1c06 <enc28j60WriteBuffer+0x28>
    1c00:	00 97       	sbiw	r24, 0x00	; 0
    1c02:	a9 f7       	brne	.-22     	; 0x1bee <enc28j60WriteBuffer+0x10>
    1c04:	03 c0       	rjmp	.+6      	; 0x1c0c <enc28j60WriteBuffer+0x2e>
    1c06:	2e 17       	cp	r18, r30
    1c08:	3f 07       	cpc	r19, r31
    1c0a:	a1 f7       	brne	.-24     	; 0x1bf4 <enc28j60WriteBuffer+0x16>
    1c0c:	2a 9a       	sbi	0x05, 2	; 5
    1c0e:	08 95       	ret

00001c10 <enc28j60SetBank>:
    1c10:	1f 93       	push	r17
    1c12:	cf 93       	push	r28
    1c14:	df 93       	push	r29
    1c16:	18 2f       	mov	r17, r24
    1c18:	10 76       	andi	r17, 0x60	; 96
    1c1a:	c1 2f       	mov	r28, r17
    1c1c:	d0 e0       	ldi	r29, 0x00	; 0
    1c1e:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <Enc28j60Bank>
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	c8 17       	cp	r28, r24
    1c26:	d9 07       	cpc	r29, r25
    1c28:	a1 f0       	breq	.+40     	; 0x1c52 <enc28j60SetBank+0x42>
    1c2a:	43 e0       	ldi	r20, 0x03	; 3
    1c2c:	6f e1       	ldi	r22, 0x1F	; 31
    1c2e:	80 ea       	ldi	r24, 0xA0	; 160
    1c30:	af df       	rcall	.-162    	; 0x1b90 <enc28j60WriteOp>
    1c32:	ae 01       	movw	r20, r28
    1c34:	55 95       	asr	r21
    1c36:	47 95       	ror	r20
    1c38:	55 95       	asr	r21
    1c3a:	47 95       	ror	r20
    1c3c:	55 95       	asr	r21
    1c3e:	47 95       	ror	r20
    1c40:	55 95       	asr	r21
    1c42:	47 95       	ror	r20
    1c44:	55 95       	asr	r21
    1c46:	47 95       	ror	r20
    1c48:	6f e1       	ldi	r22, 0x1F	; 31
    1c4a:	80 e8       	ldi	r24, 0x80	; 128
    1c4c:	a1 df       	rcall	.-190    	; 0x1b90 <enc28j60WriteOp>
    1c4e:	10 93 69 05 	sts	0x0569, r17	; 0x800569 <Enc28j60Bank>
    1c52:	df 91       	pop	r29
    1c54:	cf 91       	pop	r28
    1c56:	1f 91       	pop	r17
    1c58:	08 95       	ret

00001c5a <enc28j60Read>:
    1c5a:	cf 93       	push	r28
    1c5c:	c8 2f       	mov	r28, r24
    1c5e:	d8 df       	rcall	.-80     	; 0x1c10 <enc28j60SetBank>
    1c60:	6c 2f       	mov	r22, r28
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	80 df       	rcall	.-256    	; 0x1b66 <enc28j60ReadOp>
    1c66:	cf 91       	pop	r28
    1c68:	08 95       	ret

00001c6a <enc28j60Write>:
    1c6a:	cf 93       	push	r28
    1c6c:	df 93       	push	r29
    1c6e:	c8 2f       	mov	r28, r24
    1c70:	d6 2f       	mov	r29, r22
    1c72:	ce df       	rcall	.-100    	; 0x1c10 <enc28j60SetBank>
    1c74:	4d 2f       	mov	r20, r29
    1c76:	6c 2f       	mov	r22, r28
    1c78:	80 e4       	ldi	r24, 0x40	; 64
    1c7a:	8a df       	rcall	.-236    	; 0x1b90 <enc28j60WriteOp>
    1c7c:	df 91       	pop	r29
    1c7e:	cf 91       	pop	r28
    1c80:	08 95       	ret

00001c82 <enc28j60PhyRead>:
    1c82:	cf 93       	push	r28
    1c84:	68 2f       	mov	r22, r24
    1c86:	84 ed       	ldi	r24, 0xD4	; 212
    1c88:	f0 df       	rcall	.-32     	; 0x1c6a <enc28j60Write>
    1c8a:	61 e0       	ldi	r22, 0x01	; 1
    1c8c:	82 ed       	ldi	r24, 0xD2	; 210
    1c8e:	ed df       	rcall	.-38     	; 0x1c6a <enc28j60Write>
    1c90:	8a ee       	ldi	r24, 0xEA	; 234
    1c92:	e3 df       	rcall	.-58     	; 0x1c5a <enc28j60Read>
    1c94:	80 fd       	sbrc	r24, 0
    1c96:	fc cf       	rjmp	.-8      	; 0x1c90 <enc28j60PhyRead+0xe>
    1c98:	60 e0       	ldi	r22, 0x00	; 0
    1c9a:	82 ed       	ldi	r24, 0xD2	; 210
    1c9c:	e6 df       	rcall	.-52     	; 0x1c6a <enc28j60Write>
    1c9e:	89 ed       	ldi	r24, 0xD9	; 217
    1ca0:	dc df       	rcall	.-72     	; 0x1c5a <enc28j60Read>
    1ca2:	c8 2f       	mov	r28, r24
    1ca4:	88 ed       	ldi	r24, 0xD8	; 216
    1ca6:	d9 df       	rcall	.-78     	; 0x1c5a <enc28j60Read>
    1ca8:	2c 2f       	mov	r18, r28
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	32 2f       	mov	r19, r18
    1cae:	22 27       	eor	r18, r18
    1cb0:	a9 01       	movw	r20, r18
    1cb2:	48 2b       	or	r20, r24
    1cb4:	ca 01       	movw	r24, r20
    1cb6:	cf 91       	pop	r28
    1cb8:	08 95       	ret

00001cba <enc28j60PhyWrite>:
    1cba:	cf 93       	push	r28
    1cbc:	df 93       	push	r29
    1cbe:	d6 2f       	mov	r29, r22
    1cc0:	c7 2f       	mov	r28, r23
    1cc2:	68 2f       	mov	r22, r24
    1cc4:	84 ed       	ldi	r24, 0xD4	; 212
    1cc6:	d1 df       	rcall	.-94     	; 0x1c6a <enc28j60Write>
    1cc8:	6d 2f       	mov	r22, r29
    1cca:	86 ed       	ldi	r24, 0xD6	; 214
    1ccc:	ce df       	rcall	.-100    	; 0x1c6a <enc28j60Write>
    1cce:	6c 2f       	mov	r22, r28
    1cd0:	87 ed       	ldi	r24, 0xD7	; 215
    1cd2:	cb df       	rcall	.-106    	; 0x1c6a <enc28j60Write>
    1cd4:	c8 e2       	ldi	r28, 0x28	; 40
    1cd6:	03 c0       	rjmp	.+6      	; 0x1cde <enc28j60PhyWrite+0x24>
    1cd8:	8c 2f       	mov	r24, r28
    1cda:	8a 95       	dec	r24
    1cdc:	f1 f7       	brne	.-4      	; 0x1cda <enc28j60PhyWrite+0x20>
    1cde:	8a ee       	ldi	r24, 0xEA	; 234
    1ce0:	bc df       	rcall	.-136    	; 0x1c5a <enc28j60Read>
    1ce2:	80 fd       	sbrc	r24, 0
    1ce4:	f9 cf       	rjmp	.-14     	; 0x1cd8 <enc28j60PhyWrite+0x1e>
    1ce6:	df 91       	pop	r29
    1ce8:	cf 91       	pop	r28
    1cea:	08 95       	ret

00001cec <enc28j60clkout>:
    1cec:	68 2f       	mov	r22, r24
    1cee:	67 70       	andi	r22, 0x07	; 7
    1cf0:	85 e7       	ldi	r24, 0x75	; 117
    1cf2:	bb cf       	rjmp	.-138    	; 0x1c6a <enc28j60Write>
    1cf4:	08 95       	ret

00001cf6 <enc28j60Init>:
    1cf6:	cf 93       	push	r28
    1cf8:	df 93       	push	r29
    1cfa:	ec 01       	movw	r28, r24
    1cfc:	22 9a       	sbi	0x04, 2	; 4
    1cfe:	2a 9a       	sbi	0x05, 2	; 5
    1d00:	4f ef       	ldi	r20, 0xFF	; 255
    1d02:	60 e0       	ldi	r22, 0x00	; 0
    1d04:	8f ef       	ldi	r24, 0xFF	; 255
    1d06:	44 df       	rcall	.-376    	; 0x1b90 <enc28j60WriteOp>
    1d08:	80 e0       	ldi	r24, 0x00	; 0
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	01 97       	sbiw	r24, 0x01	; 1
    1d0e:	f1 f7       	brne	.-4      	; 0x1d0c <enc28j60Init+0x16>
    1d10:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <gNextPacketPtr+0x1>
    1d14:	10 92 67 05 	sts	0x0567, r1	; 0x800567 <gNextPacketPtr>
    1d18:	60 e0       	ldi	r22, 0x00	; 0
    1d1a:	88 e0       	ldi	r24, 0x08	; 8
    1d1c:	a6 df       	rcall	.-180    	; 0x1c6a <enc28j60Write>
    1d1e:	60 e0       	ldi	r22, 0x00	; 0
    1d20:	89 e0       	ldi	r24, 0x09	; 9
    1d22:	a3 df       	rcall	.-186    	; 0x1c6a <enc28j60Write>
    1d24:	60 e0       	ldi	r22, 0x00	; 0
    1d26:	8c e0       	ldi	r24, 0x0C	; 12
    1d28:	a0 df       	rcall	.-192    	; 0x1c6a <enc28j60Write>
    1d2a:	60 e0       	ldi	r22, 0x00	; 0
    1d2c:	8d e0       	ldi	r24, 0x0D	; 13
    1d2e:	9d df       	rcall	.-198    	; 0x1c6a <enc28j60Write>
    1d30:	6f ef       	ldi	r22, 0xFF	; 255
    1d32:	8a e0       	ldi	r24, 0x0A	; 10
    1d34:	9a df       	rcall	.-204    	; 0x1c6a <enc28j60Write>
    1d36:	69 e1       	ldi	r22, 0x19	; 25
    1d38:	8b e0       	ldi	r24, 0x0B	; 11
    1d3a:	97 df       	rcall	.-210    	; 0x1c6a <enc28j60Write>
    1d3c:	60 e0       	ldi	r22, 0x00	; 0
    1d3e:	84 e0       	ldi	r24, 0x04	; 4
    1d40:	94 df       	rcall	.-216    	; 0x1c6a <enc28j60Write>
    1d42:	6a e1       	ldi	r22, 0x1A	; 26
    1d44:	85 e0       	ldi	r24, 0x05	; 5
    1d46:	91 df       	rcall	.-222    	; 0x1c6a <enc28j60Write>
    1d48:	6f ef       	ldi	r22, 0xFF	; 255
    1d4a:	86 e0       	ldi	r24, 0x06	; 6
    1d4c:	8e df       	rcall	.-228    	; 0x1c6a <enc28j60Write>
    1d4e:	6f e1       	ldi	r22, 0x1F	; 31
    1d50:	87 e0       	ldi	r24, 0x07	; 7
    1d52:	8b df       	rcall	.-234    	; 0x1c6a <enc28j60Write>
    1d54:	60 eb       	ldi	r22, 0xB0	; 176
    1d56:	88 e3       	ldi	r24, 0x38	; 56
    1d58:	88 df       	rcall	.-240    	; 0x1c6a <enc28j60Write>
    1d5a:	6f e3       	ldi	r22, 0x3F	; 63
    1d5c:	88 e2       	ldi	r24, 0x28	; 40
    1d5e:	85 df       	rcall	.-246    	; 0x1c6a <enc28j60Write>
    1d60:	60 e3       	ldi	r22, 0x30	; 48
    1d62:	89 e2       	ldi	r24, 0x29	; 41
    1d64:	82 df       	rcall	.-252    	; 0x1c6a <enc28j60Write>
    1d66:	69 ef       	ldi	r22, 0xF9	; 249
    1d68:	80 e3       	ldi	r24, 0x30	; 48
    1d6a:	7f df       	rcall	.-258    	; 0x1c6a <enc28j60Write>
    1d6c:	67 ef       	ldi	r22, 0xF7	; 247
    1d6e:	81 e3       	ldi	r24, 0x31	; 49
    1d70:	7c df       	rcall	.-264    	; 0x1c6a <enc28j60Write>
    1d72:	6d e0       	ldi	r22, 0x0D	; 13
    1d74:	80 ec       	ldi	r24, 0xC0	; 192
    1d76:	79 df       	rcall	.-270    	; 0x1c6a <enc28j60Write>
    1d78:	60 e0       	ldi	r22, 0x00	; 0
    1d7a:	81 ec       	ldi	r24, 0xC1	; 193
    1d7c:	76 df       	rcall	.-276    	; 0x1c6a <enc28j60Write>
    1d7e:	42 e3       	ldi	r20, 0x32	; 50
    1d80:	62 ec       	ldi	r22, 0xC2	; 194
    1d82:	80 e8       	ldi	r24, 0x80	; 128
    1d84:	05 df       	rcall	.-502    	; 0x1b90 <enc28j60WriteOp>
    1d86:	62 e1       	ldi	r22, 0x12	; 18
    1d88:	86 ec       	ldi	r24, 0xC6	; 198
    1d8a:	6f df       	rcall	.-290    	; 0x1c6a <enc28j60Write>
    1d8c:	6c e0       	ldi	r22, 0x0C	; 12
    1d8e:	87 ec       	ldi	r24, 0xC7	; 199
    1d90:	6c df       	rcall	.-296    	; 0x1c6a <enc28j60Write>
    1d92:	62 e1       	ldi	r22, 0x12	; 18
    1d94:	84 ec       	ldi	r24, 0xC4	; 196
    1d96:	69 df       	rcall	.-302    	; 0x1c6a <enc28j60Write>
    1d98:	6c ed       	ldi	r22, 0xDC	; 220
    1d9a:	8a ec       	ldi	r24, 0xCA	; 202
    1d9c:	66 df       	rcall	.-308    	; 0x1c6a <enc28j60Write>
    1d9e:	65 e0       	ldi	r22, 0x05	; 5
    1da0:	8b ec       	ldi	r24, 0xCB	; 203
    1da2:	63 df       	rcall	.-314    	; 0x1c6a <enc28j60Write>
    1da4:	68 81       	ld	r22, Y
    1da6:	84 ee       	ldi	r24, 0xE4	; 228
    1da8:	60 df       	rcall	.-320    	; 0x1c6a <enc28j60Write>
    1daa:	69 81       	ldd	r22, Y+1	; 0x01
    1dac:	85 ee       	ldi	r24, 0xE5	; 229
    1dae:	5d df       	rcall	.-326    	; 0x1c6a <enc28j60Write>
    1db0:	6a 81       	ldd	r22, Y+2	; 0x02
    1db2:	82 ee       	ldi	r24, 0xE2	; 226
    1db4:	5a df       	rcall	.-332    	; 0x1c6a <enc28j60Write>
    1db6:	6b 81       	ldd	r22, Y+3	; 0x03
    1db8:	83 ee       	ldi	r24, 0xE3	; 227
    1dba:	57 df       	rcall	.-338    	; 0x1c6a <enc28j60Write>
    1dbc:	6c 81       	ldd	r22, Y+4	; 0x04
    1dbe:	80 ee       	ldi	r24, 0xE0	; 224
    1dc0:	54 df       	rcall	.-344    	; 0x1c6a <enc28j60Write>
    1dc2:	6d 81       	ldd	r22, Y+5	; 0x05
    1dc4:	81 ee       	ldi	r24, 0xE1	; 225
    1dc6:	51 df       	rcall	.-350    	; 0x1c6a <enc28j60Write>
    1dc8:	60 e0       	ldi	r22, 0x00	; 0
    1dca:	71 e0       	ldi	r23, 0x01	; 1
    1dcc:	80 e1       	ldi	r24, 0x10	; 16
    1dce:	75 df       	rcall	.-278    	; 0x1cba <enc28j60PhyWrite>
    1dd0:	8f e1       	ldi	r24, 0x1F	; 31
    1dd2:	1e df       	rcall	.-452    	; 0x1c10 <enc28j60SetBank>
    1dd4:	40 ec       	ldi	r20, 0xC0	; 192
    1dd6:	6b e1       	ldi	r22, 0x1B	; 27
    1dd8:	80 e8       	ldi	r24, 0x80	; 128
    1dda:	da de       	rcall	.-588    	; 0x1b90 <enc28j60WriteOp>
    1ddc:	44 e0       	ldi	r20, 0x04	; 4
    1dde:	6f e1       	ldi	r22, 0x1F	; 31
    1de0:	80 e8       	ldi	r24, 0x80	; 128
    1de2:	d6 de       	rcall	.-596    	; 0x1b90 <enc28j60WriteOp>
    1de4:	df 91       	pop	r29
    1de6:	cf 91       	pop	r28
    1de8:	08 95       	ret

00001dea <enc28j60linkup>:
    1dea:	81 e1       	ldi	r24, 0x11	; 17
    1dec:	4a df       	rcall	.-364    	; 0x1c82 <enc28j60PhyRead>
    1dee:	92 fb       	bst	r25, 2
    1df0:	88 27       	eor	r24, r24
    1df2:	80 f9       	bld	r24, 0
    1df4:	08 95       	ret

00001df6 <enc28j60PacketSend>:
    1df6:	0f 93       	push	r16
    1df8:	1f 93       	push	r17
    1dfa:	cf 93       	push	r28
    1dfc:	df 93       	push	r29
    1dfe:	ec 01       	movw	r28, r24
    1e00:	8b 01       	movw	r16, r22
    1e02:	8c e1       	ldi	r24, 0x1C	; 28
    1e04:	2a df       	rcall	.-428    	; 0x1c5a <enc28j60Read>
    1e06:	81 ff       	sbrs	r24, 1
    1e08:	0c c0       	rjmp	.+24     	; 0x1e22 <enc28j60PacketSend+0x2c>
    1e0a:	40 e8       	ldi	r20, 0x80	; 128
    1e0c:	6f e1       	ldi	r22, 0x1F	; 31
    1e0e:	80 e8       	ldi	r24, 0x80	; 128
    1e10:	bf de       	rcall	.-642    	; 0x1b90 <enc28j60WriteOp>
    1e12:	40 e8       	ldi	r20, 0x80	; 128
    1e14:	6f e1       	ldi	r22, 0x1F	; 31
    1e16:	80 ea       	ldi	r24, 0xA0	; 160
    1e18:	bb de       	rcall	.-650    	; 0x1b90 <enc28j60WriteOp>
    1e1a:	42 e0       	ldi	r20, 0x02	; 2
    1e1c:	6c e1       	ldi	r22, 0x1C	; 28
    1e1e:	80 ea       	ldi	r24, 0xA0	; 160
    1e20:	b7 de       	rcall	.-658    	; 0x1b90 <enc28j60WriteOp>
    1e22:	60 e0       	ldi	r22, 0x00	; 0
    1e24:	82 e0       	ldi	r24, 0x02	; 2
    1e26:	21 df       	rcall	.-446    	; 0x1c6a <enc28j60Write>
    1e28:	6a e1       	ldi	r22, 0x1A	; 26
    1e2a:	83 e0       	ldi	r24, 0x03	; 3
    1e2c:	1e df       	rcall	.-452    	; 0x1c6a <enc28j60Write>
    1e2e:	6c 2f       	mov	r22, r28
    1e30:	86 e0       	ldi	r24, 0x06	; 6
    1e32:	1b df       	rcall	.-458    	; 0x1c6a <enc28j60Write>
    1e34:	ce 01       	movw	r24, r28
    1e36:	96 5e       	subi	r25, 0xE6	; 230
    1e38:	69 2f       	mov	r22, r25
    1e3a:	87 e0       	ldi	r24, 0x07	; 7
    1e3c:	16 df       	rcall	.-468    	; 0x1c6a <enc28j60Write>
    1e3e:	40 e0       	ldi	r20, 0x00	; 0
    1e40:	60 e0       	ldi	r22, 0x00	; 0
    1e42:	8a e7       	ldi	r24, 0x7A	; 122
    1e44:	a5 de       	rcall	.-694    	; 0x1b90 <enc28j60WriteOp>
    1e46:	b8 01       	movw	r22, r16
    1e48:	ce 01       	movw	r24, r28
    1e4a:	c9 de       	rcall	.-622    	; 0x1bde <enc28j60WriteBuffer>
    1e4c:	48 e0       	ldi	r20, 0x08	; 8
    1e4e:	6f e1       	ldi	r22, 0x1F	; 31
    1e50:	80 e8       	ldi	r24, 0x80	; 128
    1e52:	9e de       	rcall	.-708    	; 0x1b90 <enc28j60WriteOp>
    1e54:	df 91       	pop	r29
    1e56:	cf 91       	pop	r28
    1e58:	1f 91       	pop	r17
    1e5a:	0f 91       	pop	r16
    1e5c:	08 95       	ret

00001e5e <enc28j60PacketReceive>:
// The packet will by headed by an ethernet header.
//      maxlen  The maximum acceptable length of a retrieved packet.
//      packet  Pointer where packet data should be stored.
// Returns: Packet length in bytes if a packet was retrieved, zero otherwise.
uint16_t enc28j60PacketReceive(uint16_t maxlen, uint8_t* packet)
{
    1e5e:	af 92       	push	r10
    1e60:	bf 92       	push	r11
    1e62:	cf 92       	push	r12
    1e64:	df 92       	push	r13
    1e66:	ef 92       	push	r14
    1e68:	ff 92       	push	r15
    1e6a:	0f 93       	push	r16
    1e6c:	1f 93       	push	r17
    1e6e:	cf 93       	push	r28
    1e70:	df 93       	push	r29
    1e72:	6c 01       	movw	r12, r24
    1e74:	7b 01       	movw	r14, r22
	uint16_t rxstat;
	uint16_t len;
	// check if a packet has been received and buffered
	//if( !(enc28j60Read(EIR) & EIR_PKTIF) )
        // The above does not work. See Rev. B4 Silicon Errata point 6.
	if( enc28j60Read(EPKTCNT) ==0 ){
    1e76:	89 e3       	ldi	r24, 0x39	; 57
    1e78:	f0 de       	rcall	.-544    	; 0x1c5a <enc28j60Read>
    1e7a:	88 23       	and	r24, r24
    1e7c:	09 f4       	brne	.+2      	; 0x1e80 <enc28j60PacketReceive+0x22>
    1e7e:	56 c0       	rjmp	.+172    	; 0x1f2c <enc28j60PacketReceive+0xce>
		return(0);
        }

	// Set the read pointer to the start of the received packet
	enc28j60Write(ERDPTL, (gNextPacketPtr &0xFF));
    1e80:	60 91 67 05 	lds	r22, 0x0567	; 0x800567 <gNextPacketPtr>
    1e84:	c0 91 68 05 	lds	r28, 0x0568	; 0x800568 <gNextPacketPtr+0x1>
    1e88:	80 e0       	ldi	r24, 0x00	; 0
    1e8a:	ef de       	rcall	.-546    	; 0x1c6a <enc28j60Write>
	enc28j60Write(ERDPTH, (gNextPacketPtr)>>8);
    1e8c:	6c 2f       	mov	r22, r28
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	ec de       	rcall	.-552    	; 0x1c6a <enc28j60Write>
	// read the next packet pointer
	gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
    1e92:	60 e0       	ldi	r22, 0x00	; 0
    1e94:	8a e3       	ldi	r24, 0x3A	; 58
    1e96:	67 de       	rcall	.-818    	; 0x1b66 <enc28j60ReadOp>
    1e98:	c8 2f       	mov	r28, r24
	gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
    1e9a:	60 e0       	ldi	r22, 0x00	; 0
    1e9c:	8a e3       	ldi	r24, 0x3A	; 58
    1e9e:	63 de       	rcall	.-826    	; 0x1b66 <enc28j60ReadOp>
    1ea0:	d0 e0       	ldi	r29, 0x00	; 0
    1ea2:	d8 2b       	or	r29, r24
    1ea4:	d0 93 68 05 	sts	0x0568, r29	; 0x800568 <gNextPacketPtr+0x1>
    1ea8:	c0 93 67 05 	sts	0x0567, r28	; 0x800567 <gNextPacketPtr>
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
    1eac:	60 e0       	ldi	r22, 0x00	; 0
    1eae:	8a e3       	ldi	r24, 0x3A	; 58
    1eb0:	5a de       	rcall	.-844    	; 0x1b66 <enc28j60ReadOp>
    1eb2:	b8 2e       	mov	r11, r24
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
    1eb4:	60 e0       	ldi	r22, 0x00	; 0
    1eb6:	8a e3       	ldi	r24, 0x3A	; 58
    1eb8:	56 de       	rcall	.-852    	; 0x1b66 <enc28j60ReadOp>
    1eba:	a8 2e       	mov	r10, r24
        len-=4; //remove the CRC count
	// read the receive status (see datasheet page 43)
	rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
    1ebc:	60 e0       	ldi	r22, 0x00	; 0
    1ebe:	8a e3       	ldi	r24, 0x3A	; 58
    1ec0:	52 de       	rcall	.-860    	; 0x1b66 <enc28j60ReadOp>
    1ec2:	08 2f       	mov	r16, r24
    1ec4:	60 e0       	ldi	r22, 0x00	; 0
	rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
    1ec6:	8a e3       	ldi	r24, 0x3A	; 58
    1ec8:	4e de       	rcall	.-868    	; 0x1b66 <enc28j60ReadOp>
    1eca:	07 ff       	sbrs	r16, 7
    1ecc:	10 c0       	rjmp	.+32     	; 0x1eee <enc28j60PacketReceive+0x90>
                len=maxlen-1;
        }
        // check CRC and symbol errors (see datasheet page 44, table 7-3):
        // The ERXFCON.CRCEN is set by default. Normally we should not
        // need to check this.
        if ((rxstat & 0x80)==0){
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	c8 1a       	sub	r12, r24
        len-=4; //remove the CRC count
	// read the receive status (see datasheet page 43)
	rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
	// limit retrieve length
        if (len>maxlen-1){
    1ed2:	d1 08       	sbc	r13, r1
    1ed4:	0b 2d       	mov	r16, r11
    1ed6:	10 e0       	ldi	r17, 0x00	; 0
	// read the next packet pointer
	gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
    1ed8:	1a 29       	or	r17, r10
    1eda:	04 50       	subi	r16, 0x04	; 4
    1edc:	11 09       	sbc	r17, r1
    1ede:	c0 16       	cp	r12, r16
    1ee0:	d1 06       	cpc	r13, r17
    1ee2:	08 f4       	brcc	.+2      	; 0x1ee6 <enc28j60PacketReceive+0x88>
    1ee4:	86 01       	movw	r16, r12
    1ee6:	b7 01       	movw	r22, r14
        if ((rxstat & 0x80)==0){
                // invalid
                len=0;
        }else{
                // copy the packet from the receive buffer
                enc28j60ReadBuffer(len, packet);
    1ee8:	c8 01       	movw	r24, r16
    1eea:	5f de       	rcall	.-834    	; 0x1baa <enc28j60ReadBuffer>
    1eec:	02 c0       	rjmp	.+4      	; 0x1ef2 <enc28j60PacketReceive+0x94>
    1eee:	00 e0       	ldi	r16, 0x00	; 0
    1ef0:	10 e0       	ldi	r17, 0x00	; 0
        // check CRC and symbol errors (see datasheet page 44, table 7-3):
        // The ERXFCON.CRCEN is set by default. Normally we should not
        // need to check this.
        if ((rxstat & 0x80)==0){
                // invalid
                len=0;
    1ef2:	7e 01       	movw	r14, r28
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
        //
        // Move the RX read pointer to the start of the next received packet
        // This frees the memory we just read out. 
        // However, compensate for the errata point 13, rev B4: never write an even address!
        // gNextPacketPtr is always an even address if RXSTOP_INIT is odd.
        if (gNextPacketPtr -1 > RXSTOP_INIT){ // RXSTART_INIT is zero, no test for gNextPacketPtr less than RXSTART_INIT.
    1ef6:	e8 1a       	sub	r14, r24
    1ef8:	f1 08       	sbc	r15, r1
    1efa:	e1 14       	cp	r14, r1
    1efc:	8a e1       	ldi	r24, 0x1A	; 26
    1efe:	f8 06       	cpc	r15, r24
    1f00:	3c f0       	brlt	.+14     	; 0x1f10 <enc28j60PacketReceive+0xb2>
                enc28j60Write(ERXRDPTL, (RXSTOP_INIT)&0xFF);
    1f02:	6f ef       	ldi	r22, 0xFF	; 255
    1f04:	8c e0       	ldi	r24, 0x0C	; 12
    1f06:	b1 de       	rcall	.-670    	; 0x1c6a <enc28j60Write>
                enc28j60Write(ERXRDPTH, (RXSTOP_INIT)>>8);
    1f08:	69 e1       	ldi	r22, 0x19	; 25
    1f0a:	8d e0       	ldi	r24, 0x0D	; 13
    1f0c:	ae de       	rcall	.-676    	; 0x1c6a <enc28j60Write>
    1f0e:	07 c0       	rjmp	.+14     	; 0x1f1e <enc28j60PacketReceive+0xc0>
        } else {
                enc28j60Write(ERXRDPTL, (gNextPacketPtr-1)&0xFF);
    1f10:	6c 2f       	mov	r22, r28
    1f12:	61 50       	subi	r22, 0x01	; 1
    1f14:	8c e0       	ldi	r24, 0x0C	; 12
    1f16:	a9 de       	rcall	.-686    	; 0x1c6a <enc28j60Write>
    1f18:	6f 2d       	mov	r22, r15
                enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
    1f1a:	8d e0       	ldi	r24, 0x0D	; 13
    1f1c:	a6 de       	rcall	.-692    	; 0x1c6a <enc28j60Write>
    1f1e:	40 e4       	ldi	r20, 0x40	; 64
    1f20:	6e e1       	ldi	r22, 0x1E	; 30
        }
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
    1f22:	80 e8       	ldi	r24, 0x80	; 128
    1f24:	35 de       	rcall	.-918    	; 0x1b90 <enc28j60WriteOp>
    1f26:	80 2f       	mov	r24, r16
    1f28:	91 2f       	mov	r25, r17
    1f2a:	02 c0       	rjmp	.+4      	; 0x1f30 <enc28j60PacketReceive+0xd2>
	return(len);
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	df 91       	pop	r29
	uint16_t len;
	// check if a packet has been received and buffered
	//if( !(enc28j60Read(EIR) & EIR_PKTIF) )
        // The above does not work. See Rev. B4 Silicon Errata point 6.
	if( enc28j60Read(EPKTCNT) ==0 ){
		return(0);
    1f32:	cf 91       	pop	r28
    1f34:	1f 91       	pop	r17
                enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
        }
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
	return(len);
}
    1f36:	0f 91       	pop	r16
    1f38:	ff 90       	pop	r15
    1f3a:	ef 90       	pop	r14
    1f3c:	df 90       	pop	r13
    1f3e:	cf 90       	pop	r12
    1f40:	bf 90       	pop	r11
    1f42:	af 90       	pop	r10
    1f44:	08 95       	ret

00001f46 <www_client_internal_result_callback>:
    1f46:	cf 92       	push	r12
    1f48:	df 92       	push	r13
    1f4a:	ef 92       	push	r14
}
#endif // WWW_client

void register_ping_rec_callback(void (*callback)(uint8_t *srcip))
{
        icmp_callback=callback;
    1f4c:	ff 92       	push	r15
    1f4e:	0f 93       	push	r16
    1f50:	1f 93       	push	r17
    1f52:	cf 93       	push	r28
    1f54:	df 93       	push	r29
    1f56:	ea 01       	movw	r28, r20
    1f58:	89 01       	movw	r16, r18
    1f5a:	90 91 82 05 	lds	r25, 0x0582	; 0x800582 <www_fd>
    1f5e:	98 17       	cp	r25, r24
    1f60:	61 f0       	breq	.+24     	; 0x1f7a <www_client_internal_result_callback+0x34>
    1f62:	e0 91 7f 05 	lds	r30, 0x057F	; 0x80057f <client_browser_callback>
    1f66:	f0 91 80 05 	lds	r31, 0x0580	; 0x800580 <client_browser_callback+0x1>
    1f6a:	40 e0       	ldi	r20, 0x00	; 0
    1f6c:	50 e0       	ldi	r21, 0x00	; 0
    1f6e:	60 e0       	ldi	r22, 0x00	; 0
    1f70:	70 e0       	ldi	r23, 0x00	; 0
    1f72:	84 ef       	ldi	r24, 0xF4	; 244
    1f74:	91 e0       	ldi	r25, 0x01	; 1
    1f76:	09 95       	icall
    1f78:	5e c0       	rjmp	.+188    	; 0x2036 <www_client_internal_result_callback+0xf0>
    1f7a:	61 11       	cpse	r22, r1
    1f7c:	5c c0       	rjmp	.+184    	; 0x2036 <www_client_internal_result_callback+0xf0>
    1f7e:	2d 30       	cpi	r18, 0x0D	; 13
    1f80:	31 05       	cpc	r19, r1
    1f82:	08 f4       	brcc	.+2      	; 0x1f86 <www_client_internal_result_callback+0x40>
    1f84:	58 c0       	rjmp	.+176    	; 0x2036 <www_client_internal_result_callback+0xf0>
    1f86:	e0 90 7f 05 	lds	r14, 0x057F	; 0x80057f <client_browser_callback>
    1f8a:	f0 90 80 05 	lds	r15, 0x0580	; 0x800580 <client_browser_callback+0x1>
    1f8e:	e1 14       	cp	r14, r1
    1f90:	f1 04       	cpc	r15, r1
    1f92:	09 f4       	brne	.+2      	; 0x1f96 <www_client_internal_result_callback+0x50>
    1f94:	50 c0       	rjmp	.+160    	; 0x2036 <www_client_internal_result_callback+0xf0>
    1f96:	c0 90 73 05 	lds	r12, 0x0573	; 0x800573 <bufptr>
    1f9a:	d0 90 74 05 	lds	r13, 0x0574	; 0x800574 <bufptr+0x1>
    1f9e:	f6 01       	movw	r30, r12
    1fa0:	e4 0f       	add	r30, r20
    1fa2:	f5 1f       	adc	r31, r21
    1fa4:	80 85       	ldd	r24, Z+8	; 0x08
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	0e 94 9c 45 	call	0x8b38	; 0x8b38 <isblank>
    1fac:	89 2b       	or	r24, r25
    1fae:	b9 f1       	breq	.+110    	; 0x201e <www_client_internal_result_callback+0xd8>
    1fb0:	f6 01       	movw	r30, r12
    1fb2:	ec 0f       	add	r30, r28
    1fb4:	fd 1f       	adc	r31, r29
    1fb6:	21 85       	ldd	r18, Z+9	; 0x09
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	20 53       	subi	r18, 0x30	; 48
    1fbc:	31 09       	sbc	r19, r1
    1fbe:	2a 30       	cpi	r18, 0x0A	; 10
    1fc0:	31 05       	cpc	r19, r1
    1fc2:	80 f5       	brcc	.+96     	; 0x2024 <www_client_internal_result_callback+0xde>
    1fc4:	f6 01       	movw	r30, r12
    1fc6:	ec 0f       	add	r30, r28
    1fc8:	fd 1f       	adc	r31, r29
    1fca:	83 85       	ldd	r24, Z+11	; 0x0b
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	ac 01       	movw	r20, r24
    1fd0:	40 53       	subi	r20, 0x30	; 48
    1fd2:	51 09       	sbc	r21, r1
    1fd4:	4a 30       	cpi	r20, 0x0A	; 10
    1fd6:	51 05       	cpc	r21, r1
    1fd8:	40 f5       	brcc	.+80     	; 0x202a <www_client_internal_result_callback+0xe4>
    1fda:	c9 01       	movw	r24, r18
    1fdc:	88 0f       	add	r24, r24
    1fde:	99 1f       	adc	r25, r25
    1fe0:	22 0f       	add	r18, r18
    1fe2:	33 1f       	adc	r19, r19
    1fe4:	22 0f       	add	r18, r18
    1fe6:	33 1f       	adc	r19, r19
    1fe8:	22 0f       	add	r18, r18
    1fea:	33 1f       	adc	r19, r19
    1fec:	28 0f       	add	r18, r24
    1fee:	39 1f       	adc	r19, r25
    1ff0:	f6 01       	movw	r30, r12
    1ff2:	ec 0f       	add	r30, r28
    1ff4:	fd 1f       	adc	r31, r29
    1ff6:	82 85       	ldd	r24, Z+10	; 0x0a
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	c0 97       	sbiw	r24, 0x30	; 48
    1ffc:	28 0f       	add	r18, r24
    1ffe:	39 1f       	adc	r19, r25
    2000:	c9 01       	movw	r24, r18
    2002:	88 0f       	add	r24, r24
    2004:	99 1f       	adc	r25, r25
    2006:	22 0f       	add	r18, r18
    2008:	33 1f       	adc	r19, r19
    200a:	22 0f       	add	r18, r18
    200c:	33 1f       	adc	r19, r19
    200e:	22 0f       	add	r18, r18
    2010:	33 1f       	adc	r19, r19
    2012:	28 0f       	add	r18, r24
    2014:	39 1f       	adc	r19, r25
    2016:	ca 01       	movw	r24, r20
    2018:	82 0f       	add	r24, r18
    201a:	93 1f       	adc	r25, r19
    201c:	08 c0       	rjmp	.+16     	; 0x202e <www_client_internal_result_callback+0xe8>
    201e:	80 e0       	ldi	r24, 0x00	; 0
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	05 c0       	rjmp	.+10     	; 0x202e <www_client_internal_result_callback+0xe8>
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	02 c0       	rjmp	.+4      	; 0x202e <www_client_internal_result_callback+0xe8>
    202a:	80 e0       	ldi	r24, 0x00	; 0
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	a8 01       	movw	r20, r16
    2030:	be 01       	movw	r22, r28
    2032:	f7 01       	movw	r30, r14
    2034:	09 95       	icall
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	df 91       	pop	r29
    203a:	cf 91       	pop	r28
    203c:	1f 91       	pop	r17
    203e:	0f 91       	pop	r16
    2040:	ff 90       	pop	r15
    2042:	ef 90       	pop	r14
    2044:	df 90       	pop	r13
    2046:	cf 90       	pop	r12
    2048:	08 95       	ret

0000204a <checksum>:
    204a:	cf 92       	push	r12
    204c:	df 92       	push	r13
    204e:	ef 92       	push	r14
    2050:	ff 92       	push	r15
    2052:	cf 93       	push	r28
    2054:	df 93       	push	r29
    2056:	ec 01       	movw	r28, r24
    2058:	db 01       	movw	r26, r22
    205a:	41 30       	cpi	r20, 0x01	; 1
    205c:	61 f4       	brne	.+24     	; 0x2076 <checksum+0x2c>
    205e:	6b 01       	movw	r12, r22
    2060:	88 e0       	ldi	r24, 0x08	; 8
    2062:	c8 1a       	sub	r12, r24
    2064:	d1 08       	sbc	r13, r1
    2066:	e1 2c       	mov	r14, r1
    2068:	f1 2c       	mov	r15, r1
    206a:	81 e1       	ldi	r24, 0x11	; 17
    206c:	c8 0e       	add	r12, r24
    206e:	d1 1c       	adc	r13, r1
    2070:	e1 1c       	adc	r14, r1
    2072:	f1 1c       	adc	r15, r1
    2074:	11 c0       	rjmp	.+34     	; 0x2098 <checksum+0x4e>
    2076:	42 30       	cpi	r20, 0x02	; 2
    2078:	61 f4       	brne	.+24     	; 0x2092 <checksum+0x48>
    207a:	6b 01       	movw	r12, r22
    207c:	88 e0       	ldi	r24, 0x08	; 8
    207e:	c8 1a       	sub	r12, r24
    2080:	d1 08       	sbc	r13, r1
    2082:	e1 2c       	mov	r14, r1
    2084:	f1 2c       	mov	r15, r1
    2086:	86 e0       	ldi	r24, 0x06	; 6
    2088:	c8 0e       	add	r12, r24
    208a:	d1 1c       	adc	r13, r1
    208c:	e1 1c       	adc	r14, r1
    208e:	f1 1c       	adc	r15, r1
    2090:	03 c0       	rjmp	.+6      	; 0x2098 <checksum+0x4e>
    2092:	c1 2c       	mov	r12, r1
    2094:	d1 2c       	mov	r13, r1
    2096:	76 01       	movw	r14, r12
    2098:	a2 30       	cpi	r26, 0x02	; 2
    209a:	b1 05       	cpc	r27, r1
    209c:	f0 f0       	brcs	.+60     	; 0x20da <checksum+0x90>
    209e:	9d 01       	movw	r18, r26
    20a0:	fe 01       	movw	r30, r28
    20a2:	40 81       	ld	r20, Z
    20a4:	50 e0       	ldi	r21, 0x00	; 0
    20a6:	60 e0       	ldi	r22, 0x00	; 0
    20a8:	70 e0       	ldi	r23, 0x00	; 0
    20aa:	76 2f       	mov	r23, r22
    20ac:	65 2f       	mov	r22, r21
    20ae:	54 2f       	mov	r21, r20
    20b0:	44 27       	eor	r20, r20
    20b2:	81 81       	ldd	r24, Z+1	; 0x01
    20b4:	48 2b       	or	r20, r24
    20b6:	c4 0e       	add	r12, r20
    20b8:	d5 1e       	adc	r13, r21
    20ba:	e6 1e       	adc	r14, r22
    20bc:	f7 1e       	adc	r15, r23
    20be:	32 96       	adiw	r30, 0x02	; 2
    20c0:	22 50       	subi	r18, 0x02	; 2
    20c2:	31 09       	sbc	r19, r1
    20c4:	22 30       	cpi	r18, 0x02	; 2
    20c6:	31 05       	cpc	r19, r1
    20c8:	60 f7       	brcc	.-40     	; 0x20a2 <checksum+0x58>
    20ca:	cd 01       	movw	r24, r26
    20cc:	02 97       	sbiw	r24, 0x02	; 2
    20ce:	8e 7f       	andi	r24, 0xFE	; 254
    20d0:	02 96       	adiw	r24, 0x02	; 2
    20d2:	c8 0f       	add	r28, r24
    20d4:	d9 1f       	adc	r29, r25
    20d6:	a1 70       	andi	r26, 0x01	; 1
    20d8:	bb 27       	eor	r27, r27
    20da:	ab 2b       	or	r26, r27
    20dc:	61 f0       	breq	.+24     	; 0x20f6 <checksum+0xac>
    20de:	88 81       	ld	r24, Y
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	a0 e0       	ldi	r26, 0x00	; 0
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	ba 2f       	mov	r27, r26
    20e8:	a9 2f       	mov	r26, r25
    20ea:	98 2f       	mov	r25, r24
    20ec:	88 27       	eor	r24, r24
    20ee:	c8 0e       	add	r12, r24
    20f0:	d9 1e       	adc	r13, r25
    20f2:	ea 1e       	adc	r14, r26
    20f4:	fb 1e       	adc	r15, r27
    20f6:	a7 01       	movw	r20, r14
    20f8:	66 27       	eor	r22, r22
    20fa:	77 27       	eor	r23, r23
    20fc:	41 15       	cp	r20, r1
    20fe:	51 05       	cpc	r21, r1
    2100:	61 05       	cpc	r22, r1
    2102:	71 05       	cpc	r23, r1
    2104:	71 f0       	breq	.+28     	; 0x2122 <checksum+0xd8>
    2106:	ee 24       	eor	r14, r14
    2108:	ff 24       	eor	r15, r15
    210a:	c4 0e       	add	r12, r20
    210c:	d5 1e       	adc	r13, r21
    210e:	e6 1e       	adc	r14, r22
    2110:	f7 1e       	adc	r15, r23
    2112:	a7 01       	movw	r20, r14
    2114:	66 27       	eor	r22, r22
    2116:	77 27       	eor	r23, r23
    2118:	41 15       	cp	r20, r1
    211a:	51 05       	cpc	r21, r1
    211c:	61 05       	cpc	r22, r1
    211e:	71 05       	cpc	r23, r1
    2120:	91 f7       	brne	.-28     	; 0x2106 <checksum+0xbc>
    2122:	c6 01       	movw	r24, r12
    2124:	80 95       	com	r24
    2126:	90 95       	com	r25
    2128:	df 91       	pop	r29
    212a:	cf 91       	pop	r28
    212c:	ff 90       	pop	r15
    212e:	ef 90       	pop	r14
    2130:	df 90       	pop	r13
    2132:	cf 90       	pop	r12
    2134:	08 95       	ret

00002136 <init_mac>:
    2136:	00 97       	sbiw	r24, 0x00	; 0
    2138:	41 f0       	breq	.+16     	; 0x214a <init_mac+0x14>
    213a:	26 e0       	ldi	r18, 0x06	; 6
    213c:	fc 01       	movw	r30, r24
    213e:	ab e9       	ldi	r26, 0x9B	; 155
    2140:	b5 e0       	ldi	r27, 0x05	; 5
    2142:	01 90       	ld	r0, Z+
    2144:	0d 92       	st	X+, r0
    2146:	2a 95       	dec	r18
    2148:	e1 f7       	brne	.-8      	; 0x2142 <init_mac+0xc>
    214a:	08 95       	ret

0000214c <route_via_gw>:
    214c:	cf 93       	push	r28
    214e:	df 93       	push	r29
    2150:	fc 01       	movw	r30, r24
    2152:	30 81       	ld	r19, Z
    2154:	20 91 97 05 	lds	r18, 0x0597	; 0x800597 <ipaddr>
    2158:	23 27       	eor	r18, r19
    215a:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <ipnetmask>
    215e:	23 23       	and	r18, r19
    2160:	91 f4       	brne	.+36     	; 0x2186 <route_via_gw+0x3a>
    2162:	31 96       	adiw	r30, 0x01	; 1
    2164:	c8 e9       	ldi	r28, 0x98	; 152
    2166:	d5 e0       	ldi	r29, 0x05	; 5
    2168:	a6 e0       	ldi	r26, 0x06	; 6
    216a:	b1 e0       	ldi	r27, 0x01	; 1
    216c:	ac 01       	movw	r20, r24
    216e:	4c 5f       	subi	r20, 0xFC	; 252
    2170:	5f 4f       	sbci	r21, 0xFF	; 255
    2172:	81 91       	ld	r24, Z+
    2174:	29 91       	ld	r18, Y+
    2176:	9d 91       	ld	r25, X+
    2178:	82 27       	eor	r24, r18
    217a:	89 23       	and	r24, r25
    217c:	31 f4       	brne	.+12     	; 0x218a <route_via_gw+0x3e>
    217e:	e4 17       	cp	r30, r20
    2180:	f5 07       	cpc	r31, r21
    2182:	b9 f7       	brne	.-18     	; 0x2172 <route_via_gw+0x26>
    2184:	03 c0       	rjmp	.+6      	; 0x218c <route_via_gw+0x40>
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	01 c0       	rjmp	.+2      	; 0x218c <route_via_gw+0x40>
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	df 91       	pop	r29
    218e:	cf 91       	pop	r28
    2190:	08 95       	ret

00002192 <check_ip_message_is_from>:
    2192:	fc 01       	movw	r30, r24
    2194:	32 8d       	ldd	r19, Z+26	; 0x1a
    2196:	fb 01       	movw	r30, r22
    2198:	20 81       	ld	r18, Z
    219a:	32 13       	cpse	r19, r18
    219c:	0d c0       	rjmp	.+26     	; 0x21b8 <check_ip_message_is_from+0x26>
    219e:	dc 01       	movw	r26, r24
    21a0:	5b 96       	adiw	r26, 0x1b	; 27
    21a2:	31 96       	adiw	r30, 0x01	; 1
    21a4:	4e 96       	adiw	r24, 0x1e	; 30
    21a6:	3d 91       	ld	r19, X+
    21a8:	21 91       	ld	r18, Z+
    21aa:	32 13       	cpse	r19, r18
    21ac:	07 c0       	rjmp	.+14     	; 0x21bc <check_ip_message_is_from+0x2a>
    21ae:	a8 17       	cp	r26, r24
    21b0:	b9 07       	cpc	r27, r25
    21b2:	c9 f7       	brne	.-14     	; 0x21a6 <check_ip_message_is_from+0x14>
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	08 95       	ret
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	08 95       	ret
    21bc:	80 e0       	ldi	r24, 0x00	; 0
    21be:	08 95       	ret

000021c0 <eth_type_is_arp_and_my_ip>:
    21c0:	69 32       	cpi	r22, 0x29	; 41
    21c2:	71 05       	cpc	r23, r1
    21c4:	c8 f0       	brcs	.+50     	; 0x21f8 <eth_type_is_arp_and_my_ip+0x38>
    21c6:	fc 01       	movw	r30, r24
    21c8:	24 85       	ldd	r18, Z+12	; 0x0c
    21ca:	28 30       	cpi	r18, 0x08	; 8
    21cc:	b9 f4       	brne	.+46     	; 0x21fc <eth_type_is_arp_and_my_ip+0x3c>
    21ce:	25 85       	ldd	r18, Z+13	; 0x0d
    21d0:	26 30       	cpi	r18, 0x06	; 6
    21d2:	b1 f4       	brne	.+44     	; 0x2200 <eth_type_is_arp_and_my_ip+0x40>
    21d4:	36 a1       	ldd	r19, Z+38	; 0x26
    21d6:	20 91 97 05 	lds	r18, 0x0597	; 0x800597 <ipaddr>
    21da:	32 13       	cpse	r19, r18
    21dc:	13 c0       	rjmp	.+38     	; 0x2204 <eth_type_is_arp_and_my_ip+0x44>
    21de:	b7 96       	adiw	r30, 0x27	; 39
    21e0:	a8 e9       	ldi	r26, 0x98	; 152
    21e2:	b5 e0       	ldi	r27, 0x05	; 5
    21e4:	8a 96       	adiw	r24, 0x2a	; 42
    21e6:	31 91       	ld	r19, Z+
    21e8:	2d 91       	ld	r18, X+
    21ea:	32 13       	cpse	r19, r18
    21ec:	0d c0       	rjmp	.+26     	; 0x2208 <eth_type_is_arp_and_my_ip+0x48>
    21ee:	e8 17       	cp	r30, r24
    21f0:	f9 07       	cpc	r31, r25
    21f2:	c9 f7       	brne	.-14     	; 0x21e6 <eth_type_is_arp_and_my_ip+0x26>
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	08 95       	ret
    21f8:	80 e0       	ldi	r24, 0x00	; 0
    21fa:	08 95       	ret
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	08 95       	ret
    2200:	80 e0       	ldi	r24, 0x00	; 0
    2202:	08 95       	ret
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	08 95       	ret
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	08 95       	ret

0000220c <eth_type_is_ip_and_my_ip>:
    220c:	cf 93       	push	r28
    220e:	df 93       	push	r29
    2210:	fc 01       	movw	r30, r24
    2212:	6a 32       	cpi	r22, 0x2A	; 42
    2214:	71 05       	cpc	r23, r1
    2216:	e0 f0       	brcs	.+56     	; 0x2250 <eth_type_is_ip_and_my_ip+0x44>
    2218:	84 85       	ldd	r24, Z+12	; 0x0c
    221a:	88 30       	cpi	r24, 0x08	; 8
    221c:	d9 f4       	brne	.+54     	; 0x2254 <eth_type_is_ip_and_my_ip+0x48>
    221e:	85 85       	ldd	r24, Z+13	; 0x0d
    2220:	81 11       	cpse	r24, r1
    2222:	1a c0       	rjmp	.+52     	; 0x2258 <eth_type_is_ip_and_my_ip+0x4c>
    2224:	96 85       	ldd	r25, Z+14	; 0x0e
    2226:	95 34       	cpi	r25, 0x45	; 69
    2228:	c1 f4       	brne	.+48     	; 0x225a <eth_type_is_ip_and_my_ip+0x4e>
    222a:	26 8d       	ldd	r18, Z+30	; 0x1e
    222c:	90 91 97 05 	lds	r25, 0x0597	; 0x800597 <ipaddr>
    2230:	29 13       	cpse	r18, r25
    2232:	13 c0       	rjmp	.+38     	; 0x225a <eth_type_is_ip_and_my_ip+0x4e>
    2234:	df 01       	movw	r26, r30
    2236:	5f 96       	adiw	r26, 0x1f	; 31
    2238:	c8 e9       	ldi	r28, 0x98	; 152
    223a:	d5 e0       	ldi	r29, 0x05	; 5
    223c:	b2 96       	adiw	r30, 0x22	; 34
    223e:	2d 91       	ld	r18, X+
    2240:	99 91       	ld	r25, Y+
    2242:	29 13       	cpse	r18, r25
    2244:	0a c0       	rjmp	.+20     	; 0x225a <eth_type_is_ip_and_my_ip+0x4e>
    2246:	ae 17       	cp	r26, r30
    2248:	bf 07       	cpc	r27, r31
    224a:	c9 f7       	brne	.-14     	; 0x223e <eth_type_is_ip_and_my_ip+0x32>
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	05 c0       	rjmp	.+10     	; 0x225a <eth_type_is_ip_and_my_ip+0x4e>
    2250:	80 e0       	ldi	r24, 0x00	; 0
    2252:	03 c0       	rjmp	.+6      	; 0x225a <eth_type_is_ip_and_my_ip+0x4e>
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	01 c0       	rjmp	.+2      	; 0x225a <eth_type_is_ip_and_my_ip+0x4e>
    2258:	80 e0       	ldi	r24, 0x00	; 0
    225a:	df 91       	pop	r29
    225c:	cf 91       	pop	r28
    225e:	08 95       	ret

00002260 <make_eth>:
    2260:	fc 01       	movw	r30, r24
    2262:	ab e9       	ldi	r26, 0x9B	; 155
    2264:	b5 e0       	ldi	r27, 0x05	; 5
    2266:	9c 01       	movw	r18, r24
    2268:	2a 5f       	subi	r18, 0xFA	; 250
    226a:	3f 4f       	sbci	r19, 0xFF	; 255
    226c:	86 81       	ldd	r24, Z+6	; 0x06
    226e:	81 93       	st	Z+, r24
    2270:	8d 91       	ld	r24, X+
    2272:	85 83       	std	Z+5, r24	; 0x05
    2274:	e2 17       	cp	r30, r18
    2276:	f3 07       	cpc	r31, r19
    2278:	c9 f7       	brne	.-14     	; 0x226c <make_eth+0xc>
    227a:	08 95       	ret

0000227c <fill_ip_hdr_checksum>:
    227c:	cf 93       	push	r28
    227e:	df 93       	push	r29
    2280:	ec 01       	movw	r28, r24
    2282:	18 8e       	std	Y+24, r1	; 0x18
    2284:	19 8e       	std	Y+25, r1	; 0x19
    2286:	80 e4       	ldi	r24, 0x40	; 64
    2288:	8c 8b       	std	Y+20, r24	; 0x14
    228a:	1d 8a       	std	Y+21, r1	; 0x15
    228c:	8e 8b       	std	Y+22, r24	; 0x16
    228e:	40 e0       	ldi	r20, 0x00	; 0
    2290:	64 e1       	ldi	r22, 0x14	; 20
    2292:	70 e0       	ldi	r23, 0x00	; 0
    2294:	ce 01       	movw	r24, r28
    2296:	0e 96       	adiw	r24, 0x0e	; 14
    2298:	d8 de       	rcall	.-592    	; 0x204a <checksum>
    229a:	98 8f       	std	Y+24, r25	; 0x18
    229c:	89 8f       	std	Y+25, r24	; 0x19
    229e:	df 91       	pop	r29
    22a0:	cf 91       	pop	r28
    22a2:	08 95       	ret

000022a4 <make_ip>:
    22a4:	ac 01       	movw	r20, r24
    22a6:	a7 e9       	ldi	r26, 0x97	; 151
    22a8:	b5 e0       	ldi	r27, 0x05	; 5
    22aa:	fc 01       	movw	r30, r24
    22ac:	7a 96       	adiw	r30, 0x1a	; 26
    22ae:	2b e9       	ldi	r18, 0x9B	; 155
    22b0:	35 e0       	ldi	r19, 0x05	; 5
    22b2:	90 81       	ld	r25, Z
    22b4:	94 83       	std	Z+4, r25	; 0x04
    22b6:	9d 91       	ld	r25, X+
    22b8:	91 93       	st	Z+, r25
    22ba:	a2 17       	cp	r26, r18
    22bc:	b3 07       	cpc	r27, r19
    22be:	c9 f7       	brne	.-14     	; 0x22b2 <make_ip+0xe>
    22c0:	ca 01       	movw	r24, r20
    22c2:	dc cf       	rjmp	.-72     	; 0x227c <fill_ip_hdr_checksum>
    22c4:	08 95       	ret

000022c6 <step_seq>:
    22c6:	fc 01       	movw	r30, r24
    22c8:	ba 96       	adiw	r30, 0x2a	; 42
    22ca:	86 96       	adiw	r24, 0x26	; 38
    22cc:	22 91       	ld	r18, -Z
    22ce:	62 0f       	add	r22, r18
    22d0:	71 1d       	adc	r23, r1
    22d2:	24 81       	ldd	r18, Z+4	; 0x04
    22d4:	64 83       	std	Z+4, r22	; 0x04
    22d6:	44 23       	and	r20, r20
    22d8:	11 f0       	breq	.+4      	; 0x22de <step_seq+0x18>
    22da:	20 83       	st	Z, r18
    22dc:	01 c0       	rjmp	.+2      	; 0x22e0 <step_seq+0x1a>
    22de:	10 82       	st	Z, r1
    22e0:	67 2f       	mov	r22, r23
    22e2:	77 27       	eor	r23, r23
    22e4:	e8 17       	cp	r30, r24
    22e6:	f9 07       	cpc	r31, r25
    22e8:	89 f7       	brne	.-30     	; 0x22cc <step_seq+0x6>
    22ea:	08 95       	ret

000022ec <make_tcphead>:
    22ec:	cf 93       	push	r28
    22ee:	df 93       	push	r29
    22f0:	ec 01       	movw	r28, r24
    22f2:	8c a1       	ldd	r24, Y+36	; 0x24
    22f4:	9a a1       	ldd	r25, Y+34	; 0x22
    22f6:	9c a3       	std	Y+36, r25	; 0x24
    22f8:	8a a3       	std	Y+34, r24	; 0x22
    22fa:	8d a1       	ldd	r24, Y+37	; 0x25
    22fc:	9b a1       	ldd	r25, Y+35	; 0x23
    22fe:	9d a3       	std	Y+37, r25	; 0x25
    2300:	8b a3       	std	Y+35, r24	; 0x23
    2302:	ce 01       	movw	r24, r28
    2304:	e0 df       	rcall	.-64     	; 0x22c6 <step_seq>
    2306:	1a aa       	std	Y+50, r1	; 0x32
    2308:	1b aa       	std	Y+51, r1	; 0x33
    230a:	80 e5       	ldi	r24, 0x50	; 80
    230c:	8e a7       	std	Y+46, r24	; 0x2e
    230e:	df 91       	pop	r29
    2310:	cf 91       	pop	r28
    2312:	08 95       	ret

00002314 <make_arp_answer_from_request>:
    2314:	cf 93       	push	r28
    2316:	df 93       	push	r29
    2318:	ec 01       	movw	r28, r24
    231a:	a2 df       	rcall	.-188    	; 0x2260 <make_eth>
    231c:	1c 8a       	std	Y+20, r1	; 0x14
    231e:	82 e0       	ldi	r24, 0x02	; 2
    2320:	8d 8b       	std	Y+21, r24	; 0x15
    2322:	ab e9       	ldi	r26, 0x9B	; 155
    2324:	b5 e0       	ldi	r27, 0x05	; 5
    2326:	fe 01       	movw	r30, r28
    2328:	76 96       	adiw	r30, 0x16	; 22
    232a:	21 ea       	ldi	r18, 0xA1	; 161
    232c:	35 e0       	ldi	r19, 0x05	; 5
    232e:	80 81       	ld	r24, Z
    2330:	82 87       	std	Z+10, r24	; 0x0a
    2332:	8d 91       	ld	r24, X+
    2334:	81 93       	st	Z+, r24
    2336:	a2 17       	cp	r26, r18
    2338:	b3 07       	cpc	r27, r19
    233a:	c9 f7       	brne	.-14     	; 0x232e <make_arp_answer_from_request+0x1a>
    233c:	a7 e9       	ldi	r26, 0x97	; 151
    233e:	b5 e0       	ldi	r27, 0x05	; 5
    2340:	fe 01       	movw	r30, r28
    2342:	7c 96       	adiw	r30, 0x1c	; 28
    2344:	2b e9       	ldi	r18, 0x9B	; 155
    2346:	35 e0       	ldi	r19, 0x05	; 5
    2348:	80 81       	ld	r24, Z
    234a:	82 87       	std	Z+10, r24	; 0x0a
    234c:	8d 91       	ld	r24, X+
    234e:	81 93       	st	Z+, r24
    2350:	a2 17       	cp	r26, r18
    2352:	b3 07       	cpc	r27, r19
    2354:	c9 f7       	brne	.-14     	; 0x2348 <make_arp_answer_from_request+0x34>
    2356:	be 01       	movw	r22, r28
    2358:	8a e2       	ldi	r24, 0x2A	; 42
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	4c dd       	rcall	.-1384   	; 0x1df6 <enc28j60PacketSend>
    235e:	df 91       	pop	r29
    2360:	cf 91       	pop	r28
    2362:	08 95       	ret

00002364 <make_echo_reply_from_request>:
    2364:	0f 93       	push	r16
    2366:	1f 93       	push	r17
    2368:	cf 93       	push	r28
    236a:	df 93       	push	r29
    236c:	ec 01       	movw	r28, r24
    236e:	8b 01       	movw	r16, r22
    2370:	77 df       	rcall	.-274    	; 0x2260 <make_eth>
    2372:	ce 01       	movw	r24, r28
    2374:	97 df       	rcall	.-210    	; 0x22a4 <make_ip>
    2376:	1a a2       	std	Y+34, r1	; 0x22
    2378:	8c a1       	ldd	r24, Y+36	; 0x24
    237a:	88 3f       	cpi	r24, 0xF8	; 248
    237c:	18 f0       	brcs	.+6      	; 0x2384 <make_echo_reply_from_request+0x20>
    237e:	9d a1       	ldd	r25, Y+37	; 0x25
    2380:	9f 5f       	subi	r25, 0xFF	; 255
    2382:	9d a3       	std	Y+37, r25	; 0x25
    2384:	88 5f       	subi	r24, 0xF8	; 248
    2386:	8c a3       	std	Y+36, r24	; 0x24
    2388:	be 01       	movw	r22, r28
    238a:	c8 01       	movw	r24, r16
    238c:	34 dd       	rcall	.-1432   	; 0x1df6 <enc28j60PacketSend>
    238e:	df 91       	pop	r29
    2390:	cf 91       	pop	r28
    2392:	1f 91       	pop	r17
    2394:	0f 91       	pop	r16
    2396:	08 95       	ret

00002398 <get_tcp_data_len>:
    2398:	fc 01       	movw	r30, r24
    239a:	20 89       	ldd	r18, Z+16	; 0x10
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	32 2f       	mov	r19, r18
    23a0:	22 27       	eor	r18, r18
    23a2:	81 89       	ldd	r24, Z+17	; 0x11
    23a4:	28 2b       	or	r18, r24
    23a6:	24 51       	subi	r18, 0x14	; 20
    23a8:	31 09       	sbc	r19, r1
    23aa:	86 a5       	ldd	r24, Z+46	; 0x2e
    23ac:	82 95       	swap	r24
    23ae:	8f 70       	andi	r24, 0x0F	; 15
    23b0:	a9 01       	movw	r20, r18
    23b2:	64 e0       	ldi	r22, 0x04	; 4
    23b4:	86 9f       	mul	r24, r22
    23b6:	40 19       	sub	r20, r0
    23b8:	51 09       	sbc	r21, r1
    23ba:	11 24       	eor	r1, r1
    23bc:	ca 01       	movw	r24, r20
    23be:	99 23       	and	r25, r25
    23c0:	14 f4       	brge	.+4      	; 0x23c6 <get_tcp_data_len+0x2e>
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	08 95       	ret

000023c8 <fill_tcp_data_p>:
    23c8:	9a 01       	movw	r18, r20
    23ca:	2f 5f       	subi	r18, 0xFF	; 255
    23cc:	3f 4f       	sbci	r19, 0xFF	; 255
    23ce:	fa 01       	movw	r30, r20
    23d0:	44 91       	lpm	r20, Z
    23d2:	44 23       	and	r20, r20
    23d4:	69 f0       	breq	.+26     	; 0x23f0 <fill_tcp_data_p+0x28>
    23d6:	fb 01       	movw	r30, r22
    23d8:	f6 96       	adiw	r30, 0x36	; 54
    23da:	dc 01       	movw	r26, r24
    23dc:	ae 0f       	add	r26, r30
    23de:	bf 1f       	adc	r27, r31
    23e0:	f9 01       	movw	r30, r18
    23e2:	4d 93       	st	X+, r20
    23e4:	6f 5f       	subi	r22, 0xFF	; 255
    23e6:	7f 4f       	sbci	r23, 0xFF	; 255
    23e8:	44 91       	lpm	r20, Z
    23ea:	31 96       	adiw	r30, 0x01	; 1
    23ec:	41 11       	cpse	r20, r1
    23ee:	f9 cf       	rjmp	.-14     	; 0x23e2 <fill_tcp_data_p+0x1a>
    23f0:	cb 01       	movw	r24, r22
    23f2:	08 95       	ret

000023f4 <fill_tcp_data_len>:
    23f4:	22 23       	and	r18, r18
    23f6:	91 f0       	breq	.+36     	; 0x241c <fill_tcp_data_len+0x28>
    23f8:	a4 2f       	mov	r26, r20
    23fa:	b5 2f       	mov	r27, r21
    23fc:	ab 01       	movw	r20, r22
    23fe:	4a 5c       	subi	r20, 0xCA	; 202
    2400:	5f 4f       	sbci	r21, 0xFF	; 255
    2402:	fc 01       	movw	r30, r24
    2404:	e4 0f       	add	r30, r20
    2406:	f5 1f       	adc	r31, r21
    2408:	92 2f       	mov	r25, r18
    240a:	3d 91       	ld	r19, X+
    240c:	31 93       	st	Z+, r19
    240e:	91 50       	subi	r25, 0x01	; 1
    2410:	e1 f7       	brne	.-8      	; 0x240a <fill_tcp_data_len+0x16>
    2412:	21 50       	subi	r18, 0x01	; 1
    2414:	62 0f       	add	r22, r18
    2416:	71 1d       	adc	r23, r1
    2418:	6f 5f       	subi	r22, 0xFF	; 255
    241a:	7f 4f       	sbci	r23, 0xFF	; 255
    241c:	cb 01       	movw	r24, r22
    241e:	08 95       	ret

00002420 <fill_tcp_data>:
    2420:	fa 01       	movw	r30, r20
    2422:	01 90       	ld	r0, Z+
    2424:	00 20       	and	r0, r0
    2426:	e9 f7       	brne	.-6      	; 0x2422 <fill_tcp_data+0x2>
    2428:	31 97       	sbiw	r30, 0x01	; 1
    242a:	9f 01       	movw	r18, r30
    242c:	24 1b       	sub	r18, r20
    242e:	35 0b       	sbc	r19, r21
    2430:	e1 cf       	rjmp	.-62     	; 0x23f4 <fill_tcp_data_len>
    2432:	08 95       	ret

00002434 <www_client_internal_datafill_callback>:
    2434:	ef 92       	push	r14
    2436:	ff 92       	push	r15
    2438:	0f 93       	push	r16
    243a:	1f 93       	push	r17
    243c:	cf 93       	push	r28
    243e:	df 93       	push	r29
    2440:	00 d0       	rcall	.+0      	; 0x2442 <www_client_internal_datafill_callback+0xe>
    2442:	00 d0       	rcall	.+0      	; 0x2444 <www_client_internal_datafill_callback+0x10>
    2444:	1f 92       	push	r1
    2446:	cd b7       	in	r28, 0x3d	; 61
    2448:	de b7       	in	r29, 0x3e	; 62
    244a:	90 91 82 05 	lds	r25, 0x0582	; 0x800582 <www_fd>
    244e:	98 13       	cpse	r25, r24
    2450:	a5 c0       	rjmp	.+330    	; 0x259c <www_client_internal_datafill_callback+0x168>
    2452:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <browsertype>
    2456:	81 11       	cpse	r24, r1
    2458:	2a c0       	rjmp	.+84     	; 0x24ae <www_client_internal_datafill_callback+0x7a>
    245a:	00 91 73 05 	lds	r16, 0x0573	; 0x800573 <bufptr>
    245e:	10 91 74 05 	lds	r17, 0x0574	; 0x800574 <bufptr+0x1>
    2462:	46 ec       	ldi	r20, 0xC6	; 198
    2464:	52 e0       	ldi	r21, 0x02	; 2
    2466:	60 e0       	ldi	r22, 0x00	; 0
    2468:	70 e0       	ldi	r23, 0x00	; 0
    246a:	c8 01       	movw	r24, r16
    246c:	ad df       	rcall	.-166    	; 0x23c8 <fill_tcp_data_p>
    246e:	40 91 79 05 	lds	r20, 0x0579	; 0x800579 <client_urlbuf_p>
    2472:	50 91 7a 05 	lds	r21, 0x057A	; 0x80057a <client_urlbuf_p+0x1>
    2476:	bc 01       	movw	r22, r24
    2478:	c8 01       	movw	r24, r16
    247a:	a6 df       	rcall	.-180    	; 0x23c8 <fill_tcp_data_p>
    247c:	40 91 77 05 	lds	r20, 0x0577	; 0x800577 <client_urlbuf_var>
    2480:	50 91 78 05 	lds	r21, 0x0578	; 0x800578 <client_urlbuf_var+0x1>
    2484:	bc 01       	movw	r22, r24
    2486:	c8 01       	movw	r24, r16
    2488:	cb df       	rcall	.-106    	; 0x2420 <fill_tcp_data>
    248a:	44 eb       	ldi	r20, 0xB4	; 180
    248c:	52 e0       	ldi	r21, 0x02	; 2
    248e:	bc 01       	movw	r22, r24
    2490:	c8 01       	movw	r24, r16
    2492:	9a df       	rcall	.-204    	; 0x23c8 <fill_tcp_data_p>
    2494:	40 91 75 05 	lds	r20, 0x0575	; 0x800575 <client_hoststr>
    2498:	50 91 76 05 	lds	r21, 0x0576	; 0x800576 <client_hoststr+0x1>
    249c:	bc 01       	movw	r22, r24
    249e:	c8 01       	movw	r24, r16
    24a0:	93 df       	rcall	.-218    	; 0x23c8 <fill_tcp_data_p>
    24a2:	47 e8       	ldi	r20, 0x87	; 135
    24a4:	52 e0       	ldi	r21, 0x02	; 2
    24a6:	bc 01       	movw	r22, r24
    24a8:	c8 01       	movw	r24, r16
    24aa:	8e df       	rcall	.-228    	; 0x23c8 <fill_tcp_data_p>
    24ac:	79 c0       	rjmp	.+242    	; 0x25a0 <www_client_internal_datafill_callback+0x16c>
    24ae:	81 30       	cpi	r24, 0x01	; 1
    24b0:	09 f0       	breq	.+2      	; 0x24b4 <www_client_internal_datafill_callback+0x80>
    24b2:	68 c0       	rjmp	.+208    	; 0x2584 <www_client_internal_datafill_callback+0x150>
    24b4:	00 91 73 05 	lds	r16, 0x0573	; 0x800573 <bufptr>
    24b8:	10 91 74 05 	lds	r17, 0x0574	; 0x800574 <bufptr+0x1>
    24bc:	41 e8       	ldi	r20, 0x81	; 129
    24be:	52 e0       	ldi	r21, 0x02	; 2
    24c0:	60 e0       	ldi	r22, 0x00	; 0
    24c2:	70 e0       	ldi	r23, 0x00	; 0
    24c4:	c8 01       	movw	r24, r16
    24c6:	80 df       	rcall	.-256    	; 0x23c8 <fill_tcp_data_p>
    24c8:	40 91 79 05 	lds	r20, 0x0579	; 0x800579 <client_urlbuf_p>
    24cc:	50 91 7a 05 	lds	r21, 0x057A	; 0x80057a <client_urlbuf_p+0x1>
    24d0:	bc 01       	movw	r22, r24
    24d2:	c8 01       	movw	r24, r16
    24d4:	79 df       	rcall	.-270    	; 0x23c8 <fill_tcp_data_p>
    24d6:	40 91 77 05 	lds	r20, 0x0577	; 0x800577 <client_urlbuf_var>
    24da:	50 91 78 05 	lds	r21, 0x0578	; 0x800578 <client_urlbuf_var+0x1>
    24de:	bc 01       	movw	r22, r24
    24e0:	c8 01       	movw	r24, r16
    24e2:	9e df       	rcall	.-196    	; 0x2420 <fill_tcp_data>
    24e4:	4f e6       	ldi	r20, 0x6F	; 111
    24e6:	52 e0       	ldi	r21, 0x02	; 2
    24e8:	bc 01       	movw	r22, r24
    24ea:	c8 01       	movw	r24, r16
    24ec:	6d df       	rcall	.-294    	; 0x23c8 <fill_tcp_data_p>
    24ee:	40 91 75 05 	lds	r20, 0x0575	; 0x800575 <client_hoststr>
    24f2:	50 91 76 05 	lds	r21, 0x0576	; 0x800576 <client_hoststr+0x1>
    24f6:	bc 01       	movw	r22, r24
    24f8:	c8 01       	movw	r24, r16
    24fa:	66 df       	rcall	.-308    	; 0x23c8 <fill_tcp_data_p>
    24fc:	e0 90 7d 05 	lds	r14, 0x057D	; 0x80057d <client_additionalheaderline_p>
    2500:	f0 90 7e 05 	lds	r15, 0x057E	; 0x80057e <client_additionalheaderline_p+0x1>
    2504:	e1 14       	cp	r14, r1
    2506:	f1 04       	cpc	r15, r1
    2508:	49 f0       	breq	.+18     	; 0x251c <www_client_internal_datafill_callback+0xe8>
    250a:	4c e6       	ldi	r20, 0x6C	; 108
    250c:	52 e0       	ldi	r21, 0x02	; 2
    250e:	bc 01       	movw	r22, r24
    2510:	c8 01       	movw	r24, r16
    2512:	5a df       	rcall	.-332    	; 0x23c8 <fill_tcp_data_p>
    2514:	a7 01       	movw	r20, r14
    2516:	bc 01       	movw	r22, r24
    2518:	c8 01       	movw	r24, r16
    251a:	56 df       	rcall	.-340    	; 0x23c8 <fill_tcp_data_p>
    251c:	47 e4       	ldi	r20, 0x47	; 71
    251e:	52 e0       	ldi	r21, 0x02	; 2
    2520:	bc 01       	movw	r22, r24
    2522:	c8 01       	movw	r24, r16
    2524:	51 df       	rcall	.-350    	; 0x23c8 <fill_tcp_data_p>
    2526:	46 e3       	ldi	r20, 0x36	; 54
    2528:	52 e0       	ldi	r21, 0x02	; 2
    252a:	bc 01       	movw	r22, r24
    252c:	c8 01       	movw	r24, r16
    252e:	4c df       	rcall	.-360    	; 0x23c8 <fill_tcp_data_p>
    2530:	7c 01       	movw	r14, r24
    2532:	e0 91 7b 05 	lds	r30, 0x057B	; 0x80057b <client_postval>
    2536:	f0 91 7c 05 	lds	r31, 0x057C	; 0x80057c <client_postval+0x1>
    253a:	df 01       	movw	r26, r30
    253c:	0d 90       	ld	r0, X+
    253e:	00 20       	and	r0, r0
    2540:	e9 f7       	brne	.-6      	; 0x253c <www_client_internal_datafill_callback+0x108>
    2542:	cd 01       	movw	r24, r26
    2544:	01 97       	sbiw	r24, 0x01	; 1
    2546:	4a e0       	ldi	r20, 0x0A	; 10
    2548:	be 01       	movw	r22, r28
    254a:	6f 5f       	subi	r22, 0xFF	; 255
    254c:	7f 4f       	sbci	r23, 0xFF	; 255
    254e:	8e 1b       	sub	r24, r30
    2550:	9f 0b       	sbc	r25, r31
    2552:	0e 94 c5 45 	call	0x8b8a	; 0x8b8a <__itoa_ncheck>
    2556:	00 91 73 05 	lds	r16, 0x0573	; 0x800573 <bufptr>
    255a:	10 91 74 05 	lds	r17, 0x0574	; 0x800574 <bufptr+0x1>
    255e:	ae 01       	movw	r20, r28
    2560:	4f 5f       	subi	r20, 0xFF	; 255
    2562:	5f 4f       	sbci	r21, 0xFF	; 255
    2564:	b7 01       	movw	r22, r14
    2566:	c8 01       	movw	r24, r16
    2568:	5b df       	rcall	.-330    	; 0x2420 <fill_tcp_data>
    256a:	40 e0       	ldi	r20, 0x00	; 0
    256c:	52 e0       	ldi	r21, 0x02	; 2
    256e:	bc 01       	movw	r22, r24
    2570:	c8 01       	movw	r24, r16
    2572:	2a df       	rcall	.-428    	; 0x23c8 <fill_tcp_data_p>
    2574:	40 91 7b 05 	lds	r20, 0x057B	; 0x80057b <client_postval>
    2578:	50 91 7c 05 	lds	r21, 0x057C	; 0x80057c <client_postval+0x1>
    257c:	bc 01       	movw	r22, r24
    257e:	c8 01       	movw	r24, r16
    2580:	4f df       	rcall	.-354    	; 0x2420 <fill_tcp_data>
    2582:	0e c0       	rjmp	.+28     	; 0x25a0 <www_client_internal_datafill_callback+0x16c>
    2584:	40 91 77 05 	lds	r20, 0x0577	; 0x800577 <client_urlbuf_var>
    2588:	50 91 78 05 	lds	r21, 0x0578	; 0x800578 <client_urlbuf_var+0x1>
    258c:	60 e0       	ldi	r22, 0x00	; 0
    258e:	70 e0       	ldi	r23, 0x00	; 0
    2590:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <bufptr>
    2594:	90 91 74 05 	lds	r25, 0x0574	; 0x800574 <bufptr+0x1>
    2598:	43 df       	rcall	.-378    	; 0x2420 <fill_tcp_data>
    259a:	02 c0       	rjmp	.+4      	; 0x25a0 <www_client_internal_datafill_callback+0x16c>
    259c:	80 e0       	ldi	r24, 0x00	; 0
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	0f 90       	pop	r0
    25a2:	0f 90       	pop	r0
    25a4:	0f 90       	pop	r0
    25a6:	0f 90       	pop	r0
    25a8:	0f 90       	pop	r0
    25aa:	df 91       	pop	r29
    25ac:	cf 91       	pop	r28
    25ae:	1f 91       	pop	r17
    25b0:	0f 91       	pop	r16
    25b2:	ff 90       	pop	r15
    25b4:	ef 90       	pop	r14
    25b6:	08 95       	ret

000025b8 <make_tcp_ack_from_any>:
    25b8:	ff 92       	push	r15
    25ba:	0f 93       	push	r16
    25bc:	1f 93       	push	r17
    25be:	cf 93       	push	r28
    25c0:	df 93       	push	r29
    25c2:	ec 01       	movw	r28, r24
    25c4:	8b 01       	movw	r16, r22
    25c6:	f4 2e       	mov	r15, r20
    25c8:	4b de       	rcall	.-874    	; 0x2260 <make_eth>
    25ca:	8f 2d       	mov	r24, r15
    25cc:	80 61       	ori	r24, 0x10	; 16
    25ce:	8f a7       	std	Y+47, r24	; 0x2f
    25d0:	84 e0       	ldi	r24, 0x04	; 4
    25d2:	f8 12       	cpse	r15, r24
    25d4:	05 c0       	rjmp	.+10     	; 0x25e0 <make_tcp_ack_from_any+0x28>
    25d6:	41 e0       	ldi	r20, 0x01	; 1
    25d8:	b8 01       	movw	r22, r16
    25da:	ce 01       	movw	r24, r28
    25dc:	87 de       	rcall	.-754    	; 0x22ec <make_tcphead>
    25de:	09 c0       	rjmp	.+18     	; 0x25f2 <make_tcp_ack_from_any+0x3a>
    25e0:	01 15       	cp	r16, r1
    25e2:	11 05       	cpc	r17, r1
    25e4:	11 f4       	brne	.+4      	; 0x25ea <make_tcp_ack_from_any+0x32>
    25e6:	01 e0       	ldi	r16, 0x01	; 1
    25e8:	10 e0       	ldi	r17, 0x00	; 0
    25ea:	41 e0       	ldi	r20, 0x01	; 1
    25ec:	b8 01       	movw	r22, r16
    25ee:	ce 01       	movw	r24, r28
    25f0:	7d de       	rcall	.-774    	; 0x22ec <make_tcphead>
    25f2:	18 8a       	std	Y+16, r1	; 0x10
    25f4:	88 e2       	ldi	r24, 0x28	; 40
    25f6:	89 8b       	std	Y+17, r24	; 0x11
    25f8:	ce 01       	movw	r24, r28
    25fa:	54 de       	rcall	.-856    	; 0x22a4 <make_ip>
    25fc:	84 e0       	ldi	r24, 0x04	; 4
    25fe:	88 ab       	std	Y+48, r24	; 0x30
    2600:	19 aa       	std	Y+49, r1	; 0x31
    2602:	42 e0       	ldi	r20, 0x02	; 2
    2604:	6c e1       	ldi	r22, 0x1C	; 28
    2606:	70 e0       	ldi	r23, 0x00	; 0
    2608:	ce 01       	movw	r24, r28
    260a:	4a 96       	adiw	r24, 0x1a	; 26
    260c:	1e dd       	rcall	.-1476   	; 0x204a <checksum>
    260e:	9a ab       	std	Y+50, r25	; 0x32
    2610:	8b ab       	std	Y+51, r24	; 0x33
    2612:	be 01       	movw	r22, r28
    2614:	86 e3       	ldi	r24, 0x36	; 54
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	ee db       	rcall	.-2084   	; 0x1df6 <enc28j60PacketSend>
    261a:	df 91       	pop	r29
    261c:	cf 91       	pop	r28
    261e:	1f 91       	pop	r17
    2620:	0f 91       	pop	r16
    2622:	ff 90       	pop	r15
    2624:	08 95       	ret

00002626 <make_tcp_ack_with_data_noflags>:
    2626:	0f 93       	push	r16
    2628:	1f 93       	push	r17
    262a:	cf 93       	push	r28
    262c:	df 93       	push	r29
    262e:	ec 01       	movw	r28, r24
    2630:	8b 01       	movw	r16, r22
    2632:	cb 01       	movw	r24, r22
    2634:	88 96       	adiw	r24, 0x28	; 40
    2636:	98 8b       	std	Y+16, r25	; 0x10
    2638:	89 8b       	std	Y+17, r24	; 0x11
    263a:	ce 01       	movw	r24, r28
    263c:	1f de       	rcall	.-962    	; 0x227c <fill_ip_hdr_checksum>
    263e:	1a aa       	std	Y+50, r1	; 0x32
    2640:	1b aa       	std	Y+51, r1	; 0x33
    2642:	b8 01       	movw	r22, r16
    2644:	64 5e       	subi	r22, 0xE4	; 228
    2646:	7f 4f       	sbci	r23, 0xFF	; 255
    2648:	42 e0       	ldi	r20, 0x02	; 2
    264a:	ce 01       	movw	r24, r28
    264c:	4a 96       	adiw	r24, 0x1a	; 26
    264e:	fd dc       	rcall	.-1542   	; 0x204a <checksum>
    2650:	9a ab       	std	Y+50, r25	; 0x32
    2652:	8b ab       	std	Y+51, r24	; 0x33
    2654:	be 01       	movw	r22, r28
    2656:	c8 01       	movw	r24, r16
    2658:	c6 96       	adiw	r24, 0x36	; 54
    265a:	cd db       	rcall	.-2150   	; 0x1df6 <enc28j60PacketSend>
    265c:	df 91       	pop	r29
    265e:	cf 91       	pop	r28
    2660:	1f 91       	pop	r17
    2662:	0f 91       	pop	r16
    2664:	08 95       	ret

00002666 <init_udp_or_www_server>:
    2666:	9c 01       	movw	r18, r24
    2668:	61 15       	cp	r22, r1
    266a:	71 05       	cpc	r23, r1
    266c:	51 f0       	breq	.+20     	; 0x2682 <init_udp_or_www_server+0x1c>
    266e:	db 01       	movw	r26, r22
    2670:	e7 e9       	ldi	r30, 0x97	; 151
    2672:	f5 e0       	ldi	r31, 0x05	; 5
    2674:	4b e9       	ldi	r20, 0x9B	; 155
    2676:	55 e0       	ldi	r21, 0x05	; 5
    2678:	9d 91       	ld	r25, X+
    267a:	91 93       	st	Z+, r25
    267c:	e4 17       	cp	r30, r20
    267e:	f5 07       	cpc	r31, r21
    2680:	d9 f7       	brne	.-10     	; 0x2678 <init_udp_or_www_server+0x12>
    2682:	21 15       	cp	r18, r1
    2684:	31 05       	cpc	r19, r1
    2686:	11 f0       	breq	.+4      	; 0x268c <init_udp_or_www_server+0x26>
    2688:	c9 01       	movw	r24, r18
    268a:	55 cd       	rjmp	.-1366   	; 0x2136 <init_mac>
    268c:	08 95       	ret

0000268e <www_server_port>:
    268e:	90 93 6c 05 	sts	0x056C, r25	; 0x80056c <wwwport_h>
    2692:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <wwwport_l>
    2696:	08 95       	ret

00002698 <make_tcp_synack_from_syn>:
    2698:	cf 93       	push	r28
    269a:	df 93       	push	r29
    269c:	ec 01       	movw	r28, r24
    269e:	e0 dd       	rcall	.-1088   	; 0x2260 <make_eth>
    26a0:	18 8a       	std	Y+16, r1	; 0x10
    26a2:	8c e2       	ldi	r24, 0x2C	; 44
    26a4:	89 8b       	std	Y+17, r24	; 0x11
    26a6:	ce 01       	movw	r24, r28
    26a8:	fd dd       	rcall	.-1030   	; 0x22a4 <make_ip>
    26aa:	82 e1       	ldi	r24, 0x12	; 18
    26ac:	8f a7       	std	Y+47, r24	; 0x2f
    26ae:	40 e0       	ldi	r20, 0x00	; 0
    26b0:	61 e0       	ldi	r22, 0x01	; 1
    26b2:	70 e0       	ldi	r23, 0x00	; 0
    26b4:	ce 01       	movw	r24, r28
    26b6:	1a de       	rcall	.-972    	; 0x22ec <make_tcphead>
    26b8:	1e a2       	std	Y+38, r1	; 0x26
    26ba:	1f a2       	std	Y+39, r1	; 0x27
    26bc:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <seqnum>
    26c0:	88 a7       	std	Y+40, r24	; 0x28
    26c2:	19 a6       	std	Y+41, r1	; 0x29
    26c4:	8d 5f       	subi	r24, 0xFD	; 253
    26c6:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <seqnum>
    26ca:	82 e0       	ldi	r24, 0x02	; 2
    26cc:	8e ab       	std	Y+54, r24	; 0x36
    26ce:	84 e0       	ldi	r24, 0x04	; 4
    26d0:	8f ab       	std	Y+55, r24	; 0x37
    26d2:	85 e0       	ldi	r24, 0x05	; 5
    26d4:	88 af       	std	Y+56, r24	; 0x38
    26d6:	19 ae       	std	Y+57, r1	; 0x39
    26d8:	80 e6       	ldi	r24, 0x60	; 96
    26da:	8e a7       	std	Y+46, r24	; 0x2e
    26dc:	8a e0       	ldi	r24, 0x0A	; 10
    26de:	88 ab       	std	Y+48, r24	; 0x30
    26e0:	19 aa       	std	Y+49, r1	; 0x31
    26e2:	42 e0       	ldi	r20, 0x02	; 2
    26e4:	60 e2       	ldi	r22, 0x20	; 32
    26e6:	70 e0       	ldi	r23, 0x00	; 0
    26e8:	ce 01       	movw	r24, r28
    26ea:	4a 96       	adiw	r24, 0x1a	; 26
    26ec:	ae dc       	rcall	.-1700   	; 0x204a <checksum>
    26ee:	9a ab       	std	Y+50, r25	; 0x32
    26f0:	8b ab       	std	Y+51, r24	; 0x33
    26f2:	be 01       	movw	r22, r28
    26f4:	8a e3       	ldi	r24, 0x3A	; 58
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	7e db       	rcall	.-2308   	; 0x1df6 <enc28j60PacketSend>
    26fa:	df 91       	pop	r29
    26fc:	cf 91       	pop	r28
    26fe:	08 95       	ret

00002700 <www_server_reply>:
    2700:	0f 93       	push	r16
    2702:	1f 93       	push	r17
    2704:	cf 93       	push	r28
    2706:	df 93       	push	r29
    2708:	ec 01       	movw	r28, r24
    270a:	8b 01       	movw	r16, r22
    270c:	60 91 6a 05 	lds	r22, 0x056A	; 0x80056a <info_data_len>
    2710:	70 91 6b 05 	lds	r23, 0x056B	; 0x80056b <info_data_len+0x1>
    2714:	40 e0       	ldi	r20, 0x00	; 0
    2716:	50 df       	rcall	.-352    	; 0x25b8 <make_tcp_ack_from_any>
    2718:	89 e1       	ldi	r24, 0x19	; 25
    271a:	8f a7       	std	Y+47, r24	; 0x2f
    271c:	b8 01       	movw	r22, r16
    271e:	ce 01       	movw	r24, r28
    2720:	82 df       	rcall	.-252    	; 0x2626 <make_tcp_ack_with_data_noflags>
    2722:	df 91       	pop	r29
    2724:	cf 91       	pop	r28
    2726:	1f 91       	pop	r17
    2728:	0f 91       	pop	r16
    272a:	08 95       	ret

0000272c <fill_buf_p>:
    272c:	dc 01       	movw	r26, r24
    272e:	fa 01       	movw	r30, r20
    2730:	61 15       	cp	r22, r1
    2732:	71 05       	cpc	r23, r1
    2734:	41 f0       	breq	.+16     	; 0x2746 <fill_buf_p+0x1a>
    2736:	68 0f       	add	r22, r24
    2738:	79 1f       	adc	r23, r25
    273a:	84 91       	lpm	r24, Z
    273c:	8d 93       	st	X+, r24
    273e:	31 96       	adiw	r30, 0x01	; 1
    2740:	6a 17       	cp	r22, r26
    2742:	7b 07       	cpc	r23, r27
    2744:	d1 f7       	brne	.-12     	; 0x273a <fill_buf_p+0xe>
    2746:	08 95       	ret

00002748 <client_arp_whohas>:
    2748:	cf 92       	push	r12
    274a:	df 92       	push	r13
    274c:	ef 92       	push	r14
    274e:	ff 92       	push	r15
    2750:	0f 93       	push	r16
    2752:	1f 93       	push	r17
    2754:	cf 93       	push	r28
    2756:	df 93       	push	r29
    2758:	7c 01       	movw	r14, r24
    275a:	80 91 97 05 	lds	r24, 0x0597	; 0x800597 <ipaddr>
    275e:	88 23       	and	r24, r24
    2760:	c1 f1       	breq	.+112    	; 0x27d2 <client_arp_whohas+0x8a>
    2762:	d7 01       	movw	r26, r14
    2764:	cb e9       	ldi	r28, 0x9B	; 155
    2766:	d5 e0       	ldi	r29, 0x05	; 5
    2768:	01 ea       	ldi	r16, 0xA1	; 161
    276a:	15 e0       	ldi	r17, 0x05	; 5
    276c:	fe 01       	movw	r30, r28
    276e:	2f ef       	ldi	r18, 0xFF	; 255
    2770:	2d 93       	st	X+, r18
    2772:	91 91       	ld	r25, Z+
    2774:	15 96       	adiw	r26, 0x05	; 5
    2776:	9c 93       	st	X, r25
    2778:	15 97       	sbiw	r26, 0x05	; 5
    277a:	0e 17       	cp	r16, r30
    277c:	1f 07       	cpc	r17, r31
    277e:	c1 f7       	brne	.-16     	; 0x2770 <client_arp_whohas+0x28>
    2780:	d7 2e       	mov	r13, r23
    2782:	c6 2e       	mov	r12, r22
    2784:	88 e0       	ldi	r24, 0x08	; 8
    2786:	f7 01       	movw	r30, r14
    2788:	84 87       	std	Z+12, r24	; 0x0c
    278a:	86 e0       	ldi	r24, 0x06	; 6
    278c:	85 87       	std	Z+13, r24	; 0x0d
    278e:	4b ec       	ldi	r20, 0xCB	; 203
    2790:	52 e0       	ldi	r21, 0x02	; 2
    2792:	68 e0       	ldi	r22, 0x08	; 8
    2794:	70 e0       	ldi	r23, 0x00	; 0
    2796:	c7 01       	movw	r24, r14
    2798:	0e 96       	adiw	r24, 0x0e	; 14
    279a:	c8 df       	rcall	.-112    	; 0x272c <fill_buf_p>
    279c:	f7 01       	movw	r30, r14
    279e:	76 96       	adiw	r30, 0x16	; 22
    27a0:	89 91       	ld	r24, Y+
    27a2:	81 93       	st	Z+, r24
    27a4:	11 86       	std	Z+9, r1	; 0x09
    27a6:	0c 17       	cp	r16, r28
    27a8:	1d 07       	cpc	r17, r29
    27aa:	d1 f7       	brne	.-12     	; 0x27a0 <client_arp_whohas+0x58>
    27ac:	cc 2d       	mov	r28, r12
    27ae:	dd 2d       	mov	r29, r13
    27b0:	a7 e9       	ldi	r26, 0x97	; 151
    27b2:	b5 e0       	ldi	r27, 0x05	; 5
    27b4:	f7 01       	movw	r30, r14
    27b6:	7c 96       	adiw	r30, 0x1c	; 28
    27b8:	2b e9       	ldi	r18, 0x9B	; 155
    27ba:	35 e0       	ldi	r19, 0x05	; 5
    27bc:	89 91       	ld	r24, Y+
    27be:	82 87       	std	Z+10, r24	; 0x0a
    27c0:	8d 91       	ld	r24, X+
    27c2:	81 93       	st	Z+, r24
    27c4:	a2 17       	cp	r26, r18
    27c6:	b3 07       	cpc	r27, r19
    27c8:	c9 f7       	brne	.-14     	; 0x27bc <client_arp_whohas+0x74>
    27ca:	b7 01       	movw	r22, r14
    27cc:	8a e2       	ldi	r24, 0x2A	; 42
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	12 db       	rcall	.-2524   	; 0x1df6 <enc28j60PacketSend>
    27d2:	df 91       	pop	r29
    27d4:	cf 91       	pop	r28
    27d6:	1f 91       	pop	r17
    27d8:	0f 91       	pop	r16
    27da:	ff 90       	pop	r15
    27dc:	ef 90       	pop	r14
    27de:	df 90       	pop	r13
    27e0:	cf 90       	pop	r12
    27e2:	08 95       	ret

000027e4 <get_mac_with_arp_wait>:
    27e4:	81 e0       	ldi	r24, 0x01	; 1
    27e6:	90 91 6e 05 	lds	r25, 0x056E	; 0x80056e <arpip_state>
    27ea:	92 30       	cpi	r25, 0x02	; 2
    27ec:	09 f4       	brne	.+2      	; 0x27f0 <get_mac_with_arp_wait+0xc>
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	08 95       	ret

000027f2 <get_mac_with_arp>:
    27f2:	50 93 83 1b 	sts	0x1B83, r21	; 0x801b83 <client_arp_result_callback+0x1>
    27f6:	40 93 82 1b 	sts	0x1B82, r20	; 0x801b82 <client_arp_result_callback>
    27fa:	21 e0       	ldi	r18, 0x01	; 1
    27fc:	20 93 6e 05 	sts	0x056E, r18	; 0x80056e <arpip_state>
    2800:	60 93 6d 05 	sts	0x056D, r22	; 0x80056d <arp_reference_number>
    2804:	dc 01       	movw	r26, r24
    2806:	ef e6       	ldi	r30, 0x6F	; 111
    2808:	f5 e0       	ldi	r31, 0x05	; 5
    280a:	23 e7       	ldi	r18, 0x73	; 115
    280c:	35 e0       	ldi	r19, 0x05	; 5
    280e:	8d 91       	ld	r24, X+
    2810:	81 93       	st	Z+, r24
    2812:	e2 17       	cp	r30, r18
    2814:	f3 07       	cpc	r31, r19
    2816:	d9 f7       	brne	.-10     	; 0x280e <get_mac_with_arp+0x1c>
    2818:	08 95       	ret

0000281a <tcp_client_syn>:
    281a:	df 92       	push	r13
    281c:	ef 92       	push	r14
    281e:	ff 92       	push	r15
    2820:	0f 93       	push	r16
    2822:	1f 93       	push	r17
    2824:	cf 93       	push	r28
    2826:	df 93       	push	r29
    2828:	ec 01       	movw	r28, r24
    282a:	f6 2e       	mov	r15, r22
    282c:	e4 2e       	mov	r14, r20
    282e:	d5 2e       	mov	r13, r21
    2830:	aa e8       	ldi	r26, 0x8A	; 138
    2832:	b5 e0       	ldi	r27, 0x05	; 5
    2834:	bc 01       	movw	r22, r24
    2836:	8b e9       	ldi	r24, 0x9B	; 155
    2838:	95 e0       	ldi	r25, 0x05	; 5
    283a:	40 e9       	ldi	r20, 0x90	; 144
    283c:	55 e0       	ldi	r21, 0x05	; 5
    283e:	2d 91       	ld	r18, X+
    2840:	fb 01       	movw	r30, r22
    2842:	21 93       	st	Z+, r18
    2844:	bf 01       	movw	r22, r30
    2846:	fc 01       	movw	r30, r24
    2848:	21 91       	ld	r18, Z+
    284a:	cf 01       	movw	r24, r30
    284c:	fb 01       	movw	r30, r22
    284e:	25 83       	std	Z+5, r18	; 0x05
    2850:	a4 17       	cp	r26, r20
    2852:	b5 07       	cpc	r27, r21
    2854:	a1 f7       	brne	.-24     	; 0x283e <tcp_client_syn+0x24>
    2856:	88 e0       	ldi	r24, 0x08	; 8
    2858:	8c 87       	std	Y+12, r24	; 0x0c
    285a:	1d 86       	std	Y+13, r1	; 0x0d
    285c:	43 ed       	ldi	r20, 0xD3	; 211
    285e:	52 e0       	ldi	r21, 0x02	; 2
    2860:	69 e0       	ldi	r22, 0x09	; 9
    2862:	70 e0       	ldi	r23, 0x00	; 0
    2864:	ce 01       	movw	r24, r28
    2866:	0e 96       	adiw	r24, 0x0e	; 14
    2868:	61 df       	rcall	.-318    	; 0x272c <fill_buf_p>
    286a:	8c e2       	ldi	r24, 0x2C	; 44
    286c:	89 8b       	std	Y+17, r24	; 0x11
    286e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ipid>
    2872:	8b 8b       	std	Y+19, r24	; 0x13
    2874:	8f 5f       	subi	r24, 0xFF	; 255
    2876:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ipid>
    287a:	86 e0       	ldi	r24, 0x06	; 6
    287c:	8f 8b       	std	Y+23, r24	; 0x17
    287e:	a0 e9       	ldi	r26, 0x90	; 144
    2880:	b5 e0       	ldi	r27, 0x05	; 5
    2882:	87 e9       	ldi	r24, 0x97	; 151
    2884:	95 e0       	ldi	r25, 0x05	; 5
    2886:	8e 01       	movw	r16, r28
    2888:	06 5e       	subi	r16, 0xE6	; 230
    288a:	1f 4f       	sbci	r17, 0xFF	; 255
    288c:	b8 01       	movw	r22, r16
    288e:	44 e9       	ldi	r20, 0x94	; 148
    2890:	55 e0       	ldi	r21, 0x05	; 5
    2892:	2d 91       	ld	r18, X+
    2894:	fb 01       	movw	r30, r22
    2896:	24 83       	std	Z+4, r18	; 0x04
    2898:	fc 01       	movw	r30, r24
    289a:	21 91       	ld	r18, Z+
    289c:	cf 01       	movw	r24, r30
    289e:	fb 01       	movw	r30, r22
    28a0:	21 93       	st	Z+, r18
    28a2:	bf 01       	movw	r22, r30
    28a4:	a4 17       	cp	r26, r20
    28a6:	b5 07       	cpc	r27, r21
    28a8:	a1 f7       	brne	.-24     	; 0x2892 <tcp_client_syn+0x78>
    28aa:	ce 01       	movw	r24, r28
    28ac:	e7 dc       	rcall	.-1586   	; 0x227c <fill_ip_hdr_checksum>
    28ae:	dc a2       	std	Y+36, r13	; 0x24
    28b0:	ed a2       	std	Y+37, r14	; 0x25
    28b2:	8b e0       	ldi	r24, 0x0B	; 11
    28b4:	8a a3       	std	Y+34, r24	; 0x22
    28b6:	fb a2       	std	Y+35, r15	; 0x23
    28b8:	fe 01       	movw	r30, r28
    28ba:	b6 96       	adiw	r30, 0x26	; 38
    28bc:	ce 01       	movw	r24, r28
    28be:	8e 96       	adiw	r24, 0x2e	; 46
    28c0:	11 92       	st	Z+, r1
    28c2:	8e 17       	cp	r24, r30
    28c4:	9f 07       	cpc	r25, r31
    28c6:	e1 f7       	brne	.-8      	; 0x28c0 <tcp_client_syn+0xa6>
    28c8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <seqnum>
    28cc:	88 a7       	std	Y+40, r24	; 0x28
    28ce:	8d 5f       	subi	r24, 0xFD	; 253
    28d0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <seqnum>
    28d4:	80 e6       	ldi	r24, 0x60	; 96
    28d6:	8e a7       	std	Y+46, r24	; 0x2e
    28d8:	82 e0       	ldi	r24, 0x02	; 2
    28da:	8f a7       	std	Y+47, r24	; 0x2f
    28dc:	93 e0       	ldi	r25, 0x03	; 3
    28de:	98 ab       	std	Y+48, r25	; 0x30
    28e0:	19 aa       	std	Y+49, r1	; 0x31
    28e2:	1a aa       	std	Y+50, r1	; 0x32
    28e4:	1b aa       	std	Y+51, r1	; 0x33
    28e6:	1c aa       	std	Y+52, r1	; 0x34
    28e8:	1d aa       	std	Y+53, r1	; 0x35
    28ea:	8e ab       	std	Y+54, r24	; 0x36
    28ec:	94 e0       	ldi	r25, 0x04	; 4
    28ee:	9f ab       	std	Y+55, r25	; 0x37
    28f0:	88 af       	std	Y+56, r24	; 0x38
    28f2:	8e ee       	ldi	r24, 0xEE	; 238
    28f4:	89 af       	std	Y+57, r24	; 0x39
    28f6:	42 e0       	ldi	r20, 0x02	; 2
    28f8:	60 e2       	ldi	r22, 0x20	; 32
    28fa:	70 e0       	ldi	r23, 0x00	; 0
    28fc:	c8 01       	movw	r24, r16
    28fe:	a5 db       	rcall	.-2230   	; 0x204a <checksum>
    2900:	9a ab       	std	Y+50, r25	; 0x32
    2902:	8b ab       	std	Y+51, r24	; 0x33
    2904:	be 01       	movw	r22, r28
    2906:	8a e3       	ldi	r24, 0x3A	; 58
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	75 da       	rcall	.-2838   	; 0x1df6 <enc28j60PacketSend>
    290c:	df 91       	pop	r29
    290e:	cf 91       	pop	r28
    2910:	1f 91       	pop	r17
    2912:	0f 91       	pop	r16
    2914:	ff 90       	pop	r15
    2916:	ef 90       	pop	r14
    2918:	df 90       	pop	r13
    291a:	08 95       	ret

0000291c <client_tcp_req>:
    291c:	0f 93       	push	r16
    291e:	1f 93       	push	r17
    2920:	90 93 86 05 	sts	0x0586, r25	; 0x800586 <client_tcp_result_callback+0x1>
    2924:	80 93 85 05 	sts	0x0585, r24	; 0x800585 <client_tcp_result_callback>
    2928:	70 93 84 05 	sts	0x0584, r23	; 0x800584 <client_tcp_datafill_callback+0x1>
    292c:	60 93 83 05 	sts	0x0583, r22	; 0x800583 <client_tcp_datafill_callback>
    2930:	a2 2f       	mov	r26, r18
    2932:	b3 2f       	mov	r27, r19
    2934:	e0 e9       	ldi	r30, 0x90	; 144
    2936:	f5 e0       	ldi	r31, 0x05	; 5
    2938:	24 e9       	ldi	r18, 0x94	; 148
    293a:	35 e0       	ldi	r19, 0x05	; 5
    293c:	8d 91       	ld	r24, X+
    293e:	81 93       	st	Z+, r24
    2940:	e2 17       	cp	r30, r18
    2942:	f3 07       	cpc	r31, r19
    2944:	d9 f7       	brne	.-10     	; 0x293c <client_tcp_req+0x20>
    2946:	a0 2f       	mov	r26, r16
    2948:	b1 2f       	mov	r27, r17
    294a:	ea e8       	ldi	r30, 0x8A	; 138
    294c:	f5 e0       	ldi	r31, 0x05	; 5
    294e:	20 e9       	ldi	r18, 0x90	; 144
    2950:	35 e0       	ldi	r19, 0x05	; 5
    2952:	8d 91       	ld	r24, X+
    2954:	81 93       	st	Z+, r24
    2956:	e2 17       	cp	r30, r18
    2958:	f3 07       	cpc	r31, r19
    295a:	d9 f7       	brne	.-10     	; 0x2952 <client_tcp_req+0x36>
    295c:	50 93 88 05 	sts	0x0588, r21	; 0x800588 <tcp_client_port+0x1>
    2960:	40 93 87 05 	sts	0x0587, r20	; 0x800587 <tcp_client_port>
    2964:	81 e0       	ldi	r24, 0x01	; 1
    2966:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <tcp_client_state>
    296a:	80 91 94 05 	lds	r24, 0x0594	; 0x800594 <tcp_fd>
    296e:	8f 5f       	subi	r24, 0xFF	; 255
    2970:	88 30       	cpi	r24, 0x08	; 8
    2972:	18 f4       	brcc	.+6      	; 0x297a <client_tcp_req+0x5e>
    2974:	80 93 94 05 	sts	0x0594, r24	; 0x800594 <tcp_fd>
    2978:	02 c0       	rjmp	.+4      	; 0x297e <client_tcp_req+0x62>
    297a:	10 92 94 05 	sts	0x0594, r1	; 0x800594 <tcp_fd>
    297e:	80 91 94 05 	lds	r24, 0x0594	; 0x800594 <tcp_fd>
    2982:	1f 91       	pop	r17
    2984:	0f 91       	pop	r16
    2986:	08 95       	ret

00002988 <client_tcpSend>:
    2988:	8f 92       	push	r8
    298a:	9f 92       	push	r9
    298c:	af 92       	push	r10
    298e:	bf 92       	push	r11
    2990:	cf 92       	push	r12
    2992:	df 92       	push	r13
    2994:	ef 92       	push	r14
    2996:	ff 92       	push	r15
    2998:	0f 93       	push	r16
    299a:	1f 93       	push	r17
    299c:	cf 93       	push	r28
    299e:	df 93       	push	r29
    29a0:	4c 01       	movw	r8, r24
    29a2:	5b 01       	movw	r10, r22
    29a4:	7a 01       	movw	r14, r20
    29a6:	69 01       	movw	r12, r18
    29a8:	e8 01       	movw	r28, r16
    29aa:	1f da       	rcall	.-3010   	; 0x1dea <enc28j60linkup>
    29ac:	88 23       	and	r24, r24
    29ae:	a9 f0       	breq	.+42     	; 0x29da <client_tcpSend+0x52>
    29b0:	90 92 78 05 	sts	0x0578, r9	; 0x800578 <client_urlbuf_var+0x1>
    29b4:	80 92 77 05 	sts	0x0577, r8	; 0x800577 <client_urlbuf_var>
    29b8:	82 e0       	ldi	r24, 0x02	; 2
    29ba:	80 93 81 05 	sts	0x0581, r24	; 0x800581 <browsertype>
    29be:	b0 92 80 05 	sts	0x0580, r11	; 0x800580 <client_browser_callback+0x1>
    29c2:	a0 92 7f 05 	sts	0x057F, r10	; 0x80057f <client_browser_callback>
    29c6:	86 01       	movw	r16, r12
    29c8:	97 01       	movw	r18, r14
    29ca:	ae 01       	movw	r20, r28
    29cc:	6a e1       	ldi	r22, 0x1A	; 26
    29ce:	72 e1       	ldi	r23, 0x12	; 18
    29d0:	83 ea       	ldi	r24, 0xA3	; 163
    29d2:	9f e0       	ldi	r25, 0x0F	; 15
    29d4:	a3 df       	rcall	.-186    	; 0x291c <client_tcp_req>
    29d6:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <www_fd>
    29da:	df 91       	pop	r29
    29dc:	cf 91       	pop	r28
    29de:	1f 91       	pop	r17
    29e0:	0f 91       	pop	r16
    29e2:	ff 90       	pop	r15
    29e4:	ef 90       	pop	r14
    29e6:	df 90       	pop	r13
    29e8:	cf 90       	pop	r12
    29ea:	bf 90       	pop	r11
    29ec:	af 90       	pop	r10
    29ee:	9f 90       	pop	r9
    29f0:	8f 90       	pop	r8
    29f2:	08 95       	ret

000029f4 <packetloop_arp_icmp_tcp>:


// return 0 to just continue in the packet loop and return the position 
// of the tcp data if there is tcp data part
uint16_t packetloop_arp_icmp_tcp(uint8_t *buf,uint16_t plen)
{
    29f4:	df 92       	push	r13
    29f6:	ef 92       	push	r14
    29f8:	ff 92       	push	r15
    29fa:	0f 93       	push	r16
    29fc:	1f 93       	push	r17
    29fe:	cf 93       	push	r28
    2a00:	df 93       	push	r29
    2a02:	8c 01       	movw	r16, r24
    2a04:	eb 01       	movw	r28, r22
        uint16_t save_len;
#endif
#ifdef ARP_MAC_resolver_client
        //plen will be unequal to zero if there is a valid 
        // packet (without crc error):
        if(plen==0){
    2a06:	20 97       	sbiw	r28, 0x00	; 0
    2a08:	09 f0       	breq	.+2      	; 0x2a0c <packetloop_arp_icmp_tcp+0x18>
    2a0a:	50 c0       	rjmp	.+160    	; 0x2aac <packetloop_arp_icmp_tcp+0xb8>
                if (arpip_state == (WGW_ACCEPT_ARP_REPLY|WGW_INITIAL_ARP) && arp_delaycnt==0 ){
    2a0c:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <arpip_state>
    2a10:	89 30       	cpi	r24, 0x09	; 9
    2a12:	69 f4       	brne	.+26     	; 0x2a2e <packetloop_arp_icmp_tcp+0x3a>
    2a14:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <arp_delaycnt>
    2a18:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <arp_delaycnt+0x1>
    2a1c:	89 2b       	or	r24, r25
    2a1e:	d9 f4       	brne	.+54     	; 0x2a56 <packetloop_arp_icmp_tcp+0x62>
                        // arp_delaycnt has wrapped no arp reply yet
                        if (enc28j60linkup()) client_arp_whohas(buf,arpip);
    2a20:	e4 d9       	rcall	.-3128   	; 0x1dea <enc28j60linkup>
    2a22:	88 23       	and	r24, r24
    2a24:	21 f0       	breq	.+8      	; 0x2a2e <packetloop_arp_icmp_tcp+0x3a>
    2a26:	6f e6       	ldi	r22, 0x6F	; 111
    2a28:	75 e0       	ldi	r23, 0x05	; 5
    2a2a:	c8 01       	movw	r24, r16
    2a2c:	8d de       	rcall	.-742    	; 0x2748 <client_arp_whohas>
                }
                if (arpip_state == WGW_INITIAL_ARP && enc28j60linkup()){
    2a2e:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <arpip_state>
    2a32:	81 30       	cpi	r24, 0x01	; 1
    2a34:	81 f4       	brne	.+32     	; 0x2a56 <packetloop_arp_icmp_tcp+0x62>
    2a36:	d9 d9       	rcall	.-3150   	; 0x1dea <enc28j60linkup>
    2a38:	88 23       	and	r24, r24
    2a3a:	69 f0       	breq	.+26     	; 0x2a56 <packetloop_arp_icmp_tcp+0x62>
                        client_arp_whohas(buf,arpip);
    2a3c:	6f e6       	ldi	r22, 0x6F	; 111
    2a3e:	75 e0       	ldi	r23, 0x05	; 5
    2a40:	c8 01       	movw	r24, r16
    2a42:	82 de       	rcall	.-764    	; 0x2748 <client_arp_whohas>
                        arpip_state|=WGW_ACCEPT_ARP_REPLY; // WGW_INITIAL_ARP and WGW_ACCEPT_ARP_REPLY set
    2a44:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <arpip_state>
    2a48:	88 60       	ori	r24, 0x08	; 8
    2a4a:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <arpip_state>
                        arp_delaycnt=0; // this is like a timer, not so precise but good enough, it wraps in about 2 sec
    2a4e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <arp_delaycnt+0x1>
    2a52:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <arp_delaycnt>
                }
                arp_delaycnt++;
    2a56:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <arp_delaycnt>
    2a5a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <arp_delaycnt+0x1>
    2a5e:	01 96       	adiw	r24, 0x01	; 1
    2a60:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <arp_delaycnt+0x1>
    2a64:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <arp_delaycnt>
#if defined (TCP_client)
                if (tcp_client_state==1 && enc28j60linkup()){ // send a syn
    2a68:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <tcp_client_state>
    2a6c:	81 30       	cpi	r24, 0x01	; 1
    2a6e:	09 f0       	breq	.+2      	; 0x2a72 <packetloop_arp_icmp_tcp+0x7e>
    2a70:	96 c1       	rjmp	.+812    	; 0x2d9e <packetloop_arp_icmp_tcp+0x3aa>
    2a72:	bb d9       	rcall	.-3210   	; 0x1dea <enc28j60linkup>
    2a74:	88 23       	and	r24, r24
    2a76:	09 f4       	brne	.+2      	; 0x2a7a <packetloop_arp_icmp_tcp+0x86>
    2a78:	95 c1       	rjmp	.+810    	; 0x2da4 <packetloop_arp_icmp_tcp+0x3b0>
                        tcp_client_state=2;
    2a7a:	82 e0       	ldi	r24, 0x02	; 2
    2a7c:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <tcp_client_state>
                        tcpclient_src_port_l++; // allocate a new port
    2a80:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <tcpclient_src_port_l>
    2a84:	8f 5f       	subi	r24, 0xFF	; 255
    2a86:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <tcpclient_src_port_l>
                        // we encode our 3 bit fd into the src port this
                        // way we get it back in every message that comes
                        // from the server:
                        tcp_client_syn(buf,((tcp_fd<<5) | (0x1f & tcpclient_src_port_l)),tcp_client_port);
    2a8a:	40 91 87 05 	lds	r20, 0x0587	; 0x800587 <tcp_client_port>
    2a8e:	50 91 88 05 	lds	r21, 0x0588	; 0x800588 <tcp_client_port+0x1>
    2a92:	60 91 94 05 	lds	r22, 0x0594	; 0x800594 <tcp_fd>
    2a96:	90 e2       	ldi	r25, 0x20	; 32
    2a98:	69 9f       	mul	r22, r25
    2a9a:	b0 01       	movw	r22, r0
    2a9c:	11 24       	eor	r1, r1
    2a9e:	8f 71       	andi	r24, 0x1F	; 31
    2aa0:	68 2b       	or	r22, r24
    2aa2:	c8 01       	movw	r24, r16
                }
#endif
                return(0);
    2aa4:	ba de       	rcall	.-652    	; 0x281a <tcp_client_syn>
    2aa6:	e1 2c       	mov	r14, r1
    2aa8:	f1 2c       	mov	r15, r1
        }
#endif // ARP_MAC_resolver_client
        // arp is broadcast if unknown but a host may also
        // verify the mac address by sending it to 
        // a unicast address.
        if(eth_type_is_arp_and_my_ip(buf,plen)){
    2aaa:	b0 c1       	rjmp	.+864    	; 0x2e0c <packetloop_arp_icmp_tcp+0x418>
    2aac:	89 db       	rcall	.-2286   	; 0x21c0 <eth_type_is_arp_and_my_ip>
    2aae:	88 23       	and	r24, r24
                if (buf[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V){
    2ab0:	69 f1       	breq	.+90     	; 0x2b0c <packetloop_arp_icmp_tcp+0x118>
    2ab2:	d8 01       	movw	r26, r16
    2ab4:	55 96       	adiw	r26, 0x15	; 21
    2ab6:	8c 91       	ld	r24, X
    2ab8:	81 30       	cpi	r24, 0x01	; 1
                        // is it an arp request 
                        make_arp_answer_from_request(buf);
    2aba:	11 f4       	brne	.+4      	; 0x2ac0 <packetloop_arp_icmp_tcp+0xcc>
    2abc:	c8 01       	movw	r24, r16
    2abe:	2a dc       	rcall	.-1964   	; 0x2314 <make_arp_answer_from_request>
                }
#ifdef ARP_MAC_resolver_client
                if ((arpip_state & WGW_ACCEPT_ARP_REPLY) && (buf[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V)){
    2ac0:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <arpip_state>
    2ac4:	83 ff       	sbrs	r24, 3
    2ac6:	71 c1       	rjmp	.+738    	; 0x2daa <packetloop_arp_icmp_tcp+0x3b6>
    2ac8:	f8 01       	movw	r30, r16
    2aca:	85 89       	ldd	r24, Z+21	; 0x15
    2acc:	82 30       	cpi	r24, 0x02	; 2
    2ace:	09 f0       	breq	.+2      	; 0x2ad2 <packetloop_arp_icmp_tcp+0xde>
    2ad0:	6f c1       	rjmp	.+734    	; 0x2db0 <packetloop_arp_icmp_tcp+0x3bc>
                        // is it an arp reply 
                        if (memcmp(&buf[ETH_ARP_SRC_IP_P],arpip,4)!=0) return(0); // not an arp reply for the IP we were searching           
    2ad2:	44 e0       	ldi	r20, 0x04	; 4
    2ad4:	50 e0       	ldi	r21, 0x00	; 0
    2ad6:	6f e6       	ldi	r22, 0x6F	; 111
    2ad8:	75 e0       	ldi	r23, 0x05	; 5
    2ada:	c8 01       	movw	r24, r16
    2adc:	4c 96       	adiw	r24, 0x1c	; 28
    2ade:	0e 94 a3 45 	call	0x8b46	; 0x8b46 <memcmp>
    2ae2:	89 2b       	or	r24, r25
    2ae4:	09 f0       	breq	.+2      	; 0x2ae8 <packetloop_arp_icmp_tcp+0xf4>
    2ae6:	67 c1       	rjmp	.+718    	; 0x2db6 <packetloop_arp_icmp_tcp+0x3c2>
                        (*client_arp_result_callback)(arpip,arp_reference_number,buf+ETH_ARP_SRC_MAC_P);
    2ae8:	a8 01       	movw	r20, r16
    2aea:	4a 5e       	subi	r20, 0xEA	; 234
    2aec:	5f 4f       	sbci	r21, 0xFF	; 255
    2aee:	e0 91 82 1b 	lds	r30, 0x1B82	; 0x801b82 <client_arp_result_callback>
    2af2:	f0 91 83 1b 	lds	r31, 0x1B83	; 0x801b83 <client_arp_result_callback+0x1>
    2af6:	60 91 6d 05 	lds	r22, 0x056D	; 0x80056d <arp_reference_number>
    2afa:	8f e6       	ldi	r24, 0x6F	; 111
    2afc:	95 e0       	ldi	r25, 0x05	; 5
    2afe:	09 95       	icall
                        arpip_state=WGW_HAVE_MAC;
    2b00:	82 e0       	ldi	r24, 0x02	; 2
    2b02:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <arpip_state>
                }
#endif // ARP_MAC_resolver_client
                return(0);
    2b06:	e1 2c       	mov	r14, r1
    2b08:	f1 2c       	mov	r15, r1

        }
        // check if ip packets are for us:
        if(eth_type_is_ip_and_my_ip(buf,plen)==0){
    2b0a:	80 c1       	rjmp	.+768    	; 0x2e0c <packetloop_arp_icmp_tcp+0x418>
    2b0c:	be 01       	movw	r22, r28
    2b0e:	c8 01       	movw	r24, r16
    2b10:	7d db       	rcall	.-2310   	; 0x220c <eth_type_is_ip_and_my_ip>
    2b12:	88 23       	and	r24, r24
    2b14:	09 f4       	brne	.+2      	; 0x2b18 <packetloop_arp_icmp_tcp+0x124>
    2b16:	52 c1       	rjmp	.+676    	; 0x2dbc <packetloop_arp_icmp_tcp+0x3c8>
                return(0);
        }
        if(buf[IP_PROTO_P]==IP_PROTO_ICMP_V && buf[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V){
    2b18:	d8 01       	movw	r26, r16
    2b1a:	57 96       	adiw	r26, 0x17	; 23
    2b1c:	8c 91       	ld	r24, X
    2b1e:	57 97       	sbiw	r26, 0x17	; 23
    2b20:	81 30       	cpi	r24, 0x01	; 1
    2b22:	a1 f4       	brne	.+40     	; 0x2b4c <packetloop_arp_icmp_tcp+0x158>
    2b24:	92 96       	adiw	r26, 0x22	; 34
    2b26:	8c 91       	ld	r24, X
    2b28:	88 30       	cpi	r24, 0x08	; 8
    2b2a:	09 f0       	breq	.+2      	; 0x2b2e <packetloop_arp_icmp_tcp+0x13a>
    2b2c:	4a c1       	rjmp	.+660    	; 0x2dc2 <packetloop_arp_icmp_tcp+0x3ce>
                if (icmp_callback){
    2b2e:	e0 91 95 05 	lds	r30, 0x0595	; 0x800595 <icmp_callback>
    2b32:	f0 91 96 05 	lds	r31, 0x0596	; 0x800596 <icmp_callback+0x1>
    2b36:	30 97       	sbiw	r30, 0x00	; 0
                        (*icmp_callback)(&(buf[IP_SRC_P]));
    2b38:	19 f0       	breq	.+6      	; 0x2b40 <packetloop_arp_icmp_tcp+0x14c>
    2b3a:	c8 01       	movw	r24, r16
    2b3c:	4a 96       	adiw	r24, 0x1a	; 26
                }
                // a ping packet, let's send pong
                make_echo_reply_from_request(buf,plen);
    2b3e:	09 95       	icall
    2b40:	be 01       	movw	r22, r28
    2b42:	c8 01       	movw	r24, r16
    2b44:	0f dc       	rcall	.-2018   	; 0x2364 <make_echo_reply_from_request>
                return(0);
    2b46:	e1 2c       	mov	r14, r1
    2b48:	f1 2c       	mov	r15, r1
    2b4a:	60 c1       	rjmp	.+704    	; 0x2e0c <packetloop_arp_icmp_tcp+0x418>
        }
        // this is an important check to avoid working on the wrong packets:
        if (plen<54 || buf[IP_PROTO_P]!=IP_PROTO_TCP_V ){
    2b4c:	c6 33       	cpi	r28, 0x36	; 54
    2b4e:	d1 05       	cpc	r29, r1
    2b50:	08 f4       	brcc	.+2      	; 0x2b54 <packetloop_arp_icmp_tcp+0x160>
    2b52:	3a c1       	rjmp	.+628    	; 0x2dc8 <packetloop_arp_icmp_tcp+0x3d4>
    2b54:	86 30       	cpi	r24, 0x06	; 6
    2b56:	09 f0       	breq	.+2      	; 0x2b5a <packetloop_arp_icmp_tcp+0x166>
    2b58:	3a c1       	rjmp	.+628    	; 0x2dce <packetloop_arp_icmp_tcp+0x3da>
                // smaller than the smallest TCP packet (TCP packet with no options section) or not tcp port
                return(0);
        }
#if defined (TCP_client)
        // a message for the tcp client, tcp_client_state is zero if client was never used
        if ( buf[TCP_DST_PORT_H_P]==TCPCLIENT_SRC_PORT_H){
    2b5a:	f8 01       	movw	r30, r16
    2b5c:	84 a1       	ldd	r24, Z+36	; 0x24
    2b5e:	8b 30       	cpi	r24, 0x0B	; 11
    2b60:	09 f0       	breq	.+2      	; 0x2b64 <packetloop_arp_icmp_tcp+0x170>
#if defined (WWW_client)
                // workaround to pass pointer to www_client_internal..
                bufptr=buf; 
    2b62:	e7 c0       	rjmp	.+462    	; 0x2d32 <packetloop_arp_icmp_tcp+0x33e>
    2b64:	10 93 74 05 	sts	0x0574, r17	; 0x800574 <bufptr+0x1>
    2b68:	00 93 73 05 	sts	0x0573, r16	; 0x800573 <bufptr>
#endif // WWW_client
                if (check_ip_message_is_from(buf,tcp_otherside_ip)==0){
    2b6c:	60 e9       	ldi	r22, 0x90	; 144
    2b6e:	75 e0       	ldi	r23, 0x05	; 5
    2b70:	c8 01       	movw	r24, r16
    2b72:	0f db       	rcall	.-2530   	; 0x2192 <check_ip_message_is_from>
    2b74:	88 23       	and	r24, r24
    2b76:	09 f4       	brne	.+2      	; 0x2b7a <packetloop_arp_icmp_tcp+0x186>
    2b78:	2d c1       	rjmp	.+602    	; 0x2dd4 <packetloop_arp_icmp_tcp+0x3e0>
                        return(0);
                }
                // if we get a reset:
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_RST_V){
    2b7a:	d8 01       	movw	r26, r16
    2b7c:	9f 96       	adiw	r26, 0x2f	; 47
    2b7e:	dc 90       	ld	r13, X
    2b80:	9f 97       	sbiw	r26, 0x2f	; 47
    2b82:	d2 fe       	sbrs	r13, 2
    2b84:	17 c0       	rjmp	.+46     	; 0x2bb4 <packetloop_arp_icmp_tcp+0x1c0>
                        if (client_tcp_result_callback){
    2b86:	e0 91 85 05 	lds	r30, 0x0585	; 0x800585 <client_tcp_result_callback>
    2b8a:	f0 91 86 05 	lds	r31, 0x0586	; 0x800586 <client_tcp_result_callback+0x1>
    2b8e:	30 97       	sbiw	r30, 0x00	; 0
    2b90:	59 f0       	breq	.+22     	; 0x2ba8 <packetloop_arp_icmp_tcp+0x1b4>
                                // parameters in client_tcp_result_callback: fd, status, buf_start, len
                                (*client_tcp_result_callback)((buf[TCP_DST_PORT_L_P]>>5)&0x7,3,0,0);
    2b92:	95 96       	adiw	r26, 0x25	; 37
    2b94:	8c 91       	ld	r24, X
    2b96:	20 e0       	ldi	r18, 0x00	; 0
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	40 e0       	ldi	r20, 0x00	; 0
    2b9c:	50 e0       	ldi	r21, 0x00	; 0
    2b9e:	63 e0       	ldi	r22, 0x03	; 3
    2ba0:	82 95       	swap	r24
    2ba2:	86 95       	lsr	r24
    2ba4:	87 70       	andi	r24, 0x07	; 7
                        }
                        tcp_client_state=6;
    2ba6:	09 95       	icall
    2ba8:	86 e0       	ldi	r24, 0x06	; 6
    2baa:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <tcp_client_state>
                        return(0);
    2bae:	e1 2c       	mov	r14, r1
    2bb0:	f1 2c       	mov	r15, r1
                }
                len=get_tcp_data_len(buf);
    2bb2:	2c c1       	rjmp	.+600    	; 0x2e0c <packetloop_arp_icmp_tcp+0x418>
    2bb4:	c8 01       	movw	r24, r16
    2bb6:	f0 db       	rcall	.-2080   	; 0x2398 <get_tcp_data_len>
    2bb8:	7c 01       	movw	r14, r24
                if (tcp_client_state==2){
    2bba:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <tcp_client_state>
    2bbe:	82 30       	cpi	r24, 0x02	; 2
    2bc0:	c1 f5       	brne	.+112    	; 0x2c32 <packetloop_arp_icmp_tcp+0x23e>
    2bc2:	9d 2d       	mov	r25, r13
                        if ((buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V) && (buf[TCP_FLAGS_P] &TCP_FLAGS_ACK_V)){
    2bc4:	90 71       	andi	r25, 0x10	; 16
    2bc6:	8d 2d       	mov	r24, r13
    2bc8:	82 71       	andi	r24, 0x12	; 18
    2bca:	82 31       	cpi	r24, 0x12	; 18
                                // synack, answer with ack
                                make_tcp_ack_from_any(buf,0,0);
    2bcc:	09 f5       	brne	.+66     	; 0x2c10 <packetloop_arp_icmp_tcp+0x21c>
    2bce:	40 e0       	ldi	r20, 0x00	; 0
    2bd0:	60 e0       	ldi	r22, 0x00	; 0
    2bd2:	70 e0       	ldi	r23, 0x00	; 0
    2bd4:	c8 01       	movw	r24, r16
    2bd6:	f0 dc       	rcall	.-1568   	; 0x25b8 <make_tcp_ack_from_any>
                                buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V;
    2bd8:	88 e1       	ldi	r24, 0x18	; 24
    2bda:	f8 01       	movw	r30, r16
    2bdc:	87 a7       	std	Z+47, r24	; 0x2f

                                // Make a tcp message with data. When calling this function we must
                                // still have a valid tcp-ack in the buffer. In other words
                                // you have just called make_tcp_ack_from_any(buf,0).
                                if (client_tcp_datafill_callback){
    2bde:	e0 91 83 05 	lds	r30, 0x0583	; 0x800583 <client_tcp_datafill_callback>
    2be2:	f0 91 84 05 	lds	r31, 0x0584	; 0x800584 <client_tcp_datafill_callback+0x1>
    2be6:	30 97       	sbiw	r30, 0x00	; 0
    2be8:	41 f0       	breq	.+16     	; 0x2bfa <packetloop_arp_icmp_tcp+0x206>
                                        // in this case it is src port because the above 
                                        // make_tcp_ack_from_any swaps the dst and src port:
                                        len=(*client_tcp_datafill_callback)((buf[TCP_SRC_PORT_L_P]>>5)&0x7);
    2bea:	d8 01       	movw	r26, r16
    2bec:	93 96       	adiw	r26, 0x23	; 35
    2bee:	8c 91       	ld	r24, X
    2bf0:	82 95       	swap	r24
    2bf2:	86 95       	lsr	r24
    2bf4:	87 70       	andi	r24, 0x07	; 7
    2bf6:	09 95       	icall
                                }else{
                                        // this is just to prevent a crash
                                        len=0;
    2bf8:	02 c0       	rjmp	.+4      	; 0x2bfe <packetloop_arp_icmp_tcp+0x20a>
    2bfa:	80 e0       	ldi	r24, 0x00	; 0
                                }
                                tcp_client_state=3;
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	23 e0       	ldi	r18, 0x03	; 3
    2c00:	20 93 89 05 	sts	0x0589, r18	; 0x800589 <tcp_client_state>
                                make_tcp_ack_with_data_noflags(buf,len);
    2c04:	bc 01       	movw	r22, r24
    2c06:	c8 01       	movw	r24, r16
    2c08:	0e dd       	rcall	.-1508   	; 0x2626 <make_tcp_ack_with_data_noflags>
                                return(0);
    2c0a:	e1 2c       	mov	r14, r1
    2c0c:	f1 2c       	mov	r15, r1
                        }else{
                                // reset only if we have sent a syn and don't get syn-ack back.
                                // If we connect to a non listen port then we get a RST
                                // which will be handeled above. In other words there is
                                // normally no danger for an endless loop.
                                tcp_client_state=1; // retry
    2c0e:	fe c0       	rjmp	.+508    	; 0x2e0c <packetloop_arp_icmp_tcp+0x418>
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <tcp_client_state>
                                // do not inform application layer as we retry.
                                len++;
                                if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
    2c16:	91 11       	cpse	r25, r1
                                // If we connect to a non listen port then we get a RST
                                // which will be handeled above. In other words there is
                                // normally no danger for an endless loop.
                                tcp_client_state=1; // retry
                                // do not inform application layer as we retry.
                                len++;
    2c18:	04 c0       	rjmp	.+8      	; 0x2c22 <packetloop_arp_icmp_tcp+0x22e>
    2c1a:	b7 01       	movw	r22, r14
    2c1c:	6f 5f       	subi	r22, 0xFF	; 255
    2c1e:	7f 4f       	sbci	r23, 0xFF	; 255
                                if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
                                        // if packet was an ack then do not step the ack number
                                        len=0;
    2c20:	02 c0       	rjmp	.+4      	; 0x2c26 <packetloop_arp_icmp_tcp+0x232>
    2c22:	60 e0       	ldi	r22, 0x00	; 0
                                }
                                // refuse and reset the connection
                                make_tcp_ack_from_any(buf,len,TCP_FLAGS_RST_V);
    2c24:	70 e0       	ldi	r23, 0x00	; 0
    2c26:	44 e0       	ldi	r20, 0x04	; 4
    2c28:	c8 01       	movw	r24, r16
    2c2a:	c6 dc       	rcall	.-1652   	; 0x25b8 <make_tcp_ack_from_any>
                                return(0);
    2c2c:	e1 2c       	mov	r14, r1
    2c2e:	f1 2c       	mov	r15, r1
    2c30:	ed c0       	rjmp	.+474    	; 0x2e0c <packetloop_arp_icmp_tcp+0x418>
                        }
                }
                // in tcp_client_state==3 we will normally first get an empty
                // ack-packet and then a ack-packet with data.
                if (tcp_client_state==3 && len>0){ 
    2c32:	83 30       	cpi	r24, 0x03	; 3
    2c34:	09 f0       	breq	.+2      	; 0x2c38 <packetloop_arp_icmp_tcp+0x244>
    2c36:	3e c0       	rjmp	.+124    	; 0x2cb4 <packetloop_arp_icmp_tcp+0x2c0>
    2c38:	e1 14       	cp	r14, r1
    2c3a:	f1 04       	cpc	r15, r1
    2c3c:	09 f4       	brne	.+2      	; 0x2c40 <packetloop_arp_icmp_tcp+0x24c>
    2c3e:	df c0       	rjmp	.+446    	; 0x2dfe <packetloop_arp_icmp_tcp+0x40a>
                        // our first real data packet
                        tcp_client_state=4;
    2c40:	84 e0       	ldi	r24, 0x04	; 4
    2c42:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <tcp_client_state>
                        // return the data we received
                        if (client_tcp_result_callback){
    2c46:	e0 91 85 05 	lds	r30, 0x0585	; 0x800585 <client_tcp_result_callback>
    2c4a:	f0 91 86 05 	lds	r31, 0x0586	; 0x800586 <client_tcp_result_callback+0x1>
    2c4e:	30 97       	sbiw	r30, 0x00	; 0
    2c50:	09 f4       	brne	.+2      	; 0x2c54 <packetloop_arp_icmp_tcp+0x260>
    2c52:	54 c0       	rjmp	.+168    	; 0x2cfc <packetloop_arp_icmp_tcp+0x308>
                                tcpstart=TCP_DATA_START; // TCP_DATA_START is a formula
    2c54:	d8 01       	movw	r26, r16
    2c56:	9e 96       	adiw	r26, 0x2e	; 46
    2c58:	4c 91       	ld	r20, X
    2c5a:	42 95       	swap	r20
    2c5c:	4f 70       	andi	r20, 0x0F	; 15
    2c5e:	b4 e0       	ldi	r27, 0x04	; 4
    2c60:	4b 9f       	mul	r20, r27
    2c62:	a0 01       	movw	r20, r0
    2c64:	11 24       	eor	r1, r1
                                // out of buffer bounds check, needed in case of fragmented IP packets
                                if (tcpstart>plen-8){
    2c66:	ce 01       	movw	r24, r28
    2c68:	08 97       	sbiw	r24, 0x08	; 8
    2c6a:	4e 5d       	subi	r20, 0xDE	; 222
    2c6c:	5f 4f       	sbci	r21, 0xFF	; 255
    2c6e:	84 17       	cp	r24, r20
    2c70:	95 07       	cpc	r25, r21
    2c72:	08 f4       	brcc	.+2      	; 0x2c76 <packetloop_arp_icmp_tcp+0x282>
    2c74:	ac 01       	movw	r20, r24
                                        tcpstart=plen-8; // dummy but save
                                }
                                save_len=len;
                                if (tcpstart+len>plen){
    2c76:	c7 01       	movw	r24, r14
    2c78:	84 0f       	add	r24, r20
    2c7a:	95 1f       	adc	r25, r21
    2c7c:	c8 17       	cp	r28, r24
    2c7e:	d9 07       	cpc	r29, r25
    2c80:	20 f4       	brcc	.+8      	; 0x2c8a <packetloop_arp_icmp_tcp+0x296>
                                        save_len=plen-tcpstart;
    2c82:	9e 01       	movw	r18, r28
    2c84:	24 1b       	sub	r18, r20
    2c86:	35 0b       	sbc	r19, r21
                                tcpstart=TCP_DATA_START; // TCP_DATA_START is a formula
                                // out of buffer bounds check, needed in case of fragmented IP packets
                                if (tcpstart>plen-8){
                                        tcpstart=plen-8; // dummy but save
                                }
                                save_len=len;
    2c88:	01 c0       	rjmp	.+2      	; 0x2c8c <packetloop_arp_icmp_tcp+0x298>
                                if (tcpstart+len>plen){
                                        save_len=plen-tcpstart;
                                }
                                send_fin=(*client_tcp_result_callback)((buf[TCP_DST_PORT_L_P]>>5)&0x7,0,tcpstart,save_len);
    2c8a:	97 01       	movw	r18, r14
    2c8c:	d8 01       	movw	r26, r16
    2c8e:	95 96       	adiw	r26, 0x25	; 37
    2c90:	8c 91       	ld	r24, X
    2c92:	60 e0       	ldi	r22, 0x00	; 0
    2c94:	82 95       	swap	r24
    2c96:	86 95       	lsr	r24
    2c98:	87 70       	andi	r24, 0x07	; 7
                        }
                        if (send_fin){
    2c9a:	09 95       	icall
    2c9c:	88 23       	and	r24, r24
                                make_tcp_ack_from_any(buf,len,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
    2c9e:	51 f0       	breq	.+20     	; 0x2cb4 <packetloop_arp_icmp_tcp+0x2c0>
    2ca0:	49 e0       	ldi	r20, 0x09	; 9
    2ca2:	b7 01       	movw	r22, r14
    2ca4:	c8 01       	movw	r24, r16
    2ca6:	88 dc       	rcall	.-1776   	; 0x25b8 <make_tcp_ack_from_any>
                                tcp_client_state=5;
    2ca8:	85 e0       	ldi	r24, 0x05	; 5
    2caa:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <tcp_client_state>
                                return(0);
    2cae:	e1 2c       	mov	r14, r1
    2cb0:	f1 2c       	mov	r15, r1
    2cb2:	ac c0       	rjmp	.+344    	; 0x2e0c <packetloop_arp_icmp_tcp+0x418>
                        }
                }
                if(tcp_client_state==5){
    2cb4:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <tcp_client_state>
    2cb8:	85 30       	cpi	r24, 0x05	; 5
    2cba:	51 f4       	brne	.+20     	; 0x2cd0 <packetloop_arp_icmp_tcp+0x2dc>
                        // we get one more final ack to our fin-ack:
                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
    2cbc:	f8 01       	movw	r30, r16
    2cbe:	87 a5       	ldd	r24, Z+47	; 0x2f
    2cc0:	84 ff       	sbrs	r24, 4
    2cc2:	8b c0       	rjmp	.+278    	; 0x2dda <packetloop_arp_icmp_tcp+0x3e6>
                                tcp_client_state=6; // in state 6 communication should be finished
    2cc4:	86 e0       	ldi	r24, 0x06	; 6
    2cc6:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <tcp_client_state>
                        }
                        return(0);
    2cca:	e1 2c       	mov	r14, r1
    2ccc:	f1 2c       	mov	r15, r1
                }
                if(tcp_client_state==6){
    2cce:	9e c0       	rjmp	.+316    	; 0x2e0c <packetloop_arp_icmp_tcp+0x418>
    2cd0:	86 30       	cpi	r24, 0x06	; 6
                        // something wrong, can't deal with this, reset the connection
                        len++;
                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V) len=0; // if packet was an ack then do not step the ack number
    2cd2:	a1 f4       	brne	.+40     	; 0x2cfc <packetloop_arp_icmp_tcp+0x308>
    2cd4:	d8 01       	movw	r26, r16
    2cd6:	9f 96       	adiw	r26, 0x2f	; 47
    2cd8:	8c 91       	ld	r24, X
    2cda:	84 fd       	sbrc	r24, 4
                        }
                        return(0);
                }
                if(tcp_client_state==6){
                        // something wrong, can't deal with this, reset the connection
                        len++;
    2cdc:	04 c0       	rjmp	.+8      	; 0x2ce6 <packetloop_arp_icmp_tcp+0x2f2>
    2cde:	b7 01       	movw	r22, r14
    2ce0:	6f 5f       	subi	r22, 0xFF	; 255
    2ce2:	7f 4f       	sbci	r23, 0xFF	; 255
                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V) len=0; // if packet was an ack then do not step the ack number
    2ce4:	02 c0       	rjmp	.+4      	; 0x2cea <packetloop_arp_icmp_tcp+0x2f6>
    2ce6:	60 e0       	ldi	r22, 0x00	; 0
                        make_tcp_ack_from_any(buf,len,TCP_FLAGS_RST_V);
    2ce8:	70 e0       	ldi	r23, 0x00	; 0
    2cea:	44 e0       	ldi	r20, 0x04	; 4
    2cec:	c8 01       	movw	r24, r16
                        // just a single reset, do not repeat if more messages:
                        tcp_client_state=7;
    2cee:	64 dc       	rcall	.-1848   	; 0x25b8 <make_tcp_ack_from_any>
    2cf0:	87 e0       	ldi	r24, 0x07	; 7
    2cf2:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <tcp_client_state>
                        return(0);
    2cf6:	e1 2c       	mov	r14, r1
    2cf8:	f1 2c       	mov	r15, r1
                }
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
    2cfa:	88 c0       	rjmp	.+272    	; 0x2e0c <packetloop_arp_icmp_tcp+0x418>
    2cfc:	f8 01       	movw	r30, r16
    2cfe:	87 a5       	ldd	r24, Z+47	; 0x2f
    2d00:	80 ff       	sbrs	r24, 0
                        // this normally a fin ack message but it could be
                        // any message with fin we answer with fin-ack:
                        make_tcp_ack_from_any(buf,len+1,TCP_FLAGS_FIN_V);
    2d02:	0c c0       	rjmp	.+24     	; 0x2d1c <packetloop_arp_icmp_tcp+0x328>
    2d04:	b7 01       	movw	r22, r14
    2d06:	6f 5f       	subi	r22, 0xFF	; 255
    2d08:	7f 4f       	sbci	r23, 0xFF	; 255
    2d0a:	41 e0       	ldi	r20, 0x01	; 1
    2d0c:	c8 01       	movw	r24, r16
                        tcp_client_state=5; // connection terminated
    2d0e:	54 dc       	rcall	.-1880   	; 0x25b8 <make_tcp_ack_from_any>
    2d10:	85 e0       	ldi	r24, 0x05	; 5
    2d12:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <tcp_client_state>
                        return(0);
    2d16:	e1 2c       	mov	r14, r1
    2d18:	f1 2c       	mov	r15, r1
                }
                // ack all data (the web page may be long):
                // if we just get a fragment then len will be zero
                // and we ack only once we have the full packet
                if (len>0){
    2d1a:	78 c0       	rjmp	.+240    	; 0x2e0c <packetloop_arp_icmp_tcp+0x418>
    2d1c:	e1 14       	cp	r14, r1
    2d1e:	f1 04       	cpc	r15, r1
    2d20:	09 f4       	brne	.+2      	; 0x2d24 <packetloop_arp_icmp_tcp+0x330>
                        make_tcp_ack_from_any(buf,len,0);
    2d22:	5e c0       	rjmp	.+188    	; 0x2de0 <packetloop_arp_icmp_tcp+0x3ec>
    2d24:	40 e0       	ldi	r20, 0x00	; 0
    2d26:	b7 01       	movw	r22, r14
    2d28:	c8 01       	movw	r24, r16
                }
                return(0);
    2d2a:	46 dc       	rcall	.-1908   	; 0x25b8 <make_tcp_ack_from_any>
    2d2c:	e1 2c       	mov	r14, r1
    2d2e:	f1 2c       	mov	r15, r1
        }
#endif // TCP_client
        //
#ifdef WWW_server
        // tcp port web server start
        if (buf[TCP_DST_PORT_H_P]==wwwport_h && buf[TCP_DST_PORT_L_P]==wwwport_l){
    2d30:	6d c0       	rjmp	.+218    	; 0x2e0c <packetloop_arp_icmp_tcp+0x418>
    2d32:	90 91 6c 05 	lds	r25, 0x056C	; 0x80056c <wwwport_h>
    2d36:	89 13       	cpse	r24, r25
    2d38:	56 c0       	rjmp	.+172    	; 0x2de6 <packetloop_arp_icmp_tcp+0x3f2>
    2d3a:	95 a1       	ldd	r25, Z+37	; 0x25
    2d3c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <wwwport_l>
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V){
    2d40:	98 13       	cpse	r25, r24
    2d42:	54 c0       	rjmp	.+168    	; 0x2dec <packetloop_arp_icmp_tcp+0x3f8>
    2d44:	d7 a4       	ldd	r13, Z+47	; 0x2f
                        make_tcp_synack_from_syn(buf);
    2d46:	d1 fe       	sbrs	r13, 1
    2d48:	05 c0       	rjmp	.+10     	; 0x2d54 <packetloop_arp_icmp_tcp+0x360>
    2d4a:	c8 01       	movw	r24, r16
                        // make_tcp_synack_from_syn does already send the syn,ack
                        return(0);
    2d4c:	a5 dc       	rcall	.-1718   	; 0x2698 <make_tcp_synack_from_syn>
    2d4e:	e1 2c       	mov	r14, r1
                }
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
    2d50:	f1 2c       	mov	r15, r1
    2d52:	5c c0       	rjmp	.+184    	; 0x2e0c <packetloop_arp_icmp_tcp+0x418>
                        info_data_len=get_tcp_data_len(buf);
    2d54:	d4 fe       	sbrs	r13, 4
    2d56:	4d c0       	rjmp	.+154    	; 0x2df2 <packetloop_arp_icmp_tcp+0x3fe>
    2d58:	c8 01       	movw	r24, r16
    2d5a:	1e db       	rcall	.-2500   	; 0x2398 <get_tcp_data_len>
    2d5c:	7c 01       	movw	r14, r24
    2d5e:	90 93 6b 05 	sts	0x056B, r25	; 0x80056b <info_data_len+0x1>
    2d62:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <info_data_len>
                        // we can possibly have no data, just ack:
                        // Here we misuse plen for something else to save a variable.
                        // plen is now the position of start of the tcp user data.
                        if (info_data_len==0){
    2d66:	89 2b       	or	r24, r25
                                if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
    2d68:	41 f4       	brne	.+16     	; 0x2d7a <packetloop_arp_icmp_tcp+0x386>
    2d6a:	d0 fe       	sbrs	r13, 0
                                        // finack, answer with ack
                                        make_tcp_ack_from_any(buf,0,0);
    2d6c:	4f c0       	rjmp	.+158    	; 0x2e0c <packetloop_arp_icmp_tcp+0x418>
    2d6e:	40 e0       	ldi	r20, 0x00	; 0
    2d70:	60 e0       	ldi	r22, 0x00	; 0
    2d72:	70 e0       	ldi	r23, 0x00	; 0
    2d74:	c8 01       	movw	r24, r16
    2d76:	20 dc       	rcall	.-1984   	; 0x25b8 <make_tcp_ack_from_any>
    2d78:	49 c0       	rjmp	.+146    	; 0x2e0c <packetloop_arp_icmp_tcp+0x418>
                                }
                                // just an ack with no data, wait for next packet
                                return(0);
                        }
                        // Here we misuse len for something else to save a variable
                        len=TCP_DATA_START; // TCP_DATA_START is a formula
    2d7a:	f8 01       	movw	r30, r16
    2d7c:	e6 a4       	ldd	r14, Z+46	; 0x2e
    2d7e:	e6 94       	lsr	r14
    2d80:	e6 94       	lsr	r14
    2d82:	e6 94       	lsr	r14
    2d84:	e6 94       	lsr	r14
    2d86:	f4 e0       	ldi	r31, 0x04	; 4
    2d88:	ef 9e       	mul	r14, r31
    2d8a:	70 01       	movw	r14, r0
    2d8c:	11 24       	eor	r1, r1
    2d8e:	82 e2       	ldi	r24, 0x22	; 34
    2d90:	e8 0e       	add	r14, r24
    2d92:	f1 1c       	adc	r15, r1
                        // check for data corruption
                        if (len>plen-8){
    2d94:	28 97       	sbiw	r28, 0x08	; 8
    2d96:	ce 15       	cp	r28, r14
    2d98:	df 05       	cpc	r29, r15
    2d9a:	70 f1       	brcs	.+92     	; 0x2df8 <packetloop_arp_icmp_tcp+0x404>
    2d9c:	37 c0       	rjmp	.+110    	; 0x2e0c <packetloop_arp_icmp_tcp+0x418>
                        // way we get it back in every message that comes
                        // from the server:
                        tcp_client_syn(buf,((tcp_fd<<5) | (0x1f & tcpclient_src_port_l)),tcp_client_port);
                }
#endif
                return(0);
    2d9e:	e1 2c       	mov	r14, r1
    2da0:	f1 2c       	mov	r15, r1
    2da2:	34 c0       	rjmp	.+104    	; 0x2e0c <packetloop_arp_icmp_tcp+0x418>
    2da4:	e1 2c       	mov	r14, r1
    2da6:	f1 2c       	mov	r15, r1
    2da8:	31 c0       	rjmp	.+98     	; 0x2e0c <packetloop_arp_icmp_tcp+0x418>
                        if (memcmp(&buf[ETH_ARP_SRC_IP_P],arpip,4)!=0) return(0); // not an arp reply for the IP we were searching           
                        (*client_arp_result_callback)(arpip,arp_reference_number,buf+ETH_ARP_SRC_MAC_P);
                        arpip_state=WGW_HAVE_MAC;
                }
#endif // ARP_MAC_resolver_client
                return(0);
    2daa:	e1 2c       	mov	r14, r1
    2dac:	f1 2c       	mov	r15, r1
    2dae:	2e c0       	rjmp	.+92     	; 0x2e0c <packetloop_arp_icmp_tcp+0x418>
    2db0:	e1 2c       	mov	r14, r1
    2db2:	f1 2c       	mov	r15, r1
    2db4:	2b c0       	rjmp	.+86     	; 0x2e0c <packetloop_arp_icmp_tcp+0x418>
                        make_arp_answer_from_request(buf);
                }
#ifdef ARP_MAC_resolver_client
                if ((arpip_state & WGW_ACCEPT_ARP_REPLY) && (buf[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V)){
                        // is it an arp reply 
                        if (memcmp(&buf[ETH_ARP_SRC_IP_P],arpip,4)!=0) return(0); // not an arp reply for the IP we were searching           
    2db6:	e1 2c       	mov	r14, r1
    2db8:	f1 2c       	mov	r15, r1
    2dba:	28 c0       	rjmp	.+80     	; 0x2e0c <packetloop_arp_icmp_tcp+0x418>
                return(0);

        }
        // check if ip packets are for us:
        if(eth_type_is_ip_and_my_ip(buf,plen)==0){
                return(0);
    2dbc:	e1 2c       	mov	r14, r1
    2dbe:	f1 2c       	mov	r15, r1
    2dc0:	25 c0       	rjmp	.+74     	; 0x2e0c <packetloop_arp_icmp_tcp+0x418>
                return(0);
        }
        // this is an important check to avoid working on the wrong packets:
        if (plen<54 || buf[IP_PROTO_P]!=IP_PROTO_TCP_V ){
                // smaller than the smallest TCP packet (TCP packet with no options section) or not tcp port
                return(0);
    2dc2:	e1 2c       	mov	r14, r1
    2dc4:	f1 2c       	mov	r15, r1
    2dc6:	22 c0       	rjmp	.+68     	; 0x2e0c <packetloop_arp_icmp_tcp+0x418>
    2dc8:	e1 2c       	mov	r14, r1
    2dca:	f1 2c       	mov	r15, r1
    2dcc:	1f c0       	rjmp	.+62     	; 0x2e0c <packetloop_arp_icmp_tcp+0x418>
    2dce:	e1 2c       	mov	r14, r1
    2dd0:	f1 2c       	mov	r15, r1
    2dd2:	1c c0       	rjmp	.+56     	; 0x2e0c <packetloop_arp_icmp_tcp+0x418>
#if defined (WWW_client)
                // workaround to pass pointer to www_client_internal..
                bufptr=buf; 
#endif // WWW_client
                if (check_ip_message_is_from(buf,tcp_otherside_ip)==0){
                        return(0);
    2dd4:	e1 2c       	mov	r14, r1
    2dd6:	f1 2c       	mov	r15, r1
    2dd8:	19 c0       	rjmp	.+50     	; 0x2e0c <packetloop_arp_icmp_tcp+0x418>
                if(tcp_client_state==5){
                        // we get one more final ack to our fin-ack:
                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
                                tcp_client_state=6; // in state 6 communication should be finished
                        }
                        return(0);
    2dda:	e1 2c       	mov	r14, r1
    2ddc:	f1 2c       	mov	r15, r1
    2dde:	16 c0       	rjmp	.+44     	; 0x2e0c <packetloop_arp_icmp_tcp+0x418>
                // if we just get a fragment then len will be zero
                // and we ack only once we have the full packet
                if (len>0){
                        make_tcp_ack_from_any(buf,len,0);
                }
                return(0);
    2de0:	e1 2c       	mov	r14, r1
    2de2:	f1 2c       	mov	r15, r1
    2de4:	13 c0       	rjmp	.+38     	; 0x2e0c <packetloop_arp_icmp_tcp+0x418>
                        }
                        return(len);
                }
        }
#endif // WWW_server
        return(0);
    2de6:	e1 2c       	mov	r14, r1
    2de8:	f1 2c       	mov	r15, r1
    2dea:	10 c0       	rjmp	.+32     	; 0x2e0c <packetloop_arp_icmp_tcp+0x418>
    2dec:	e1 2c       	mov	r14, r1
    2dee:	f1 2c       	mov	r15, r1
    2df0:	0d c0       	rjmp	.+26     	; 0x2e0c <packetloop_arp_icmp_tcp+0x418>
    2df2:	e1 2c       	mov	r14, r1
    2df4:	f1 2c       	mov	r15, r1
    2df6:	0a c0       	rjmp	.+20     	; 0x2e0c <packetloop_arp_icmp_tcp+0x418>
                        }
                        // Here we misuse len for something else to save a variable
                        len=TCP_DATA_START; // TCP_DATA_START is a formula
                        // check for data corruption
                        if (len>plen-8){
                                return(0);
    2df8:	e1 2c       	mov	r14, r1
    2dfa:	f1 2c       	mov	r15, r1
    2dfc:	07 c0       	rjmp	.+14     	; 0x2e0c <packetloop_arp_icmp_tcp+0x418>
                        make_tcp_ack_from_any(buf,len,TCP_FLAGS_RST_V);
                        // just a single reset, do not repeat if more messages:
                        tcp_client_state=7;
                        return(0);
                }
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
    2dfe:	d8 01       	movw	r26, r16
    2e00:	9f 96       	adiw	r26, 0x2f	; 47
    2e02:	8c 91       	ld	r24, X
    2e04:	80 fd       	sbrc	r24, 0
    2e06:	7e cf       	rjmp	.-260    	; 0x2d04 <packetloop_arp_icmp_tcp+0x310>
                // if we just get a fragment then len will be zero
                // and we ack only once we have the full packet
                if (len>0){
                        make_tcp_ack_from_any(buf,len,0);
                }
                return(0);
    2e08:	e1 2c       	mov	r14, r1
    2e0a:	f1 2c       	mov	r15, r1
                        return(len);
                }
        }
#endif // WWW_server
        return(0);
}
    2e0c:	c7 01       	movw	r24, r14
    2e0e:	df 91       	pop	r29
    2e10:	cf 91       	pop	r28
    2e12:	1f 91       	pop	r17
    2e14:	0f 91       	pop	r16
    2e16:	ff 90       	pop	r15
    2e18:	ef 90       	pop	r14
    2e1a:	df 90       	pop	r13
    2e1c:	08 95       	ret

00002e1e <browserresult_callback>:
char charNumber[24];
char* toChar(int number)
{
	itoa(number, charNumber, 24);
	return charNumber;
}
    2e1e:	08 95       	ret

00002e20 <arpresolver_result_callback>:
    2e20:	61 30       	cpi	r22, 0x01	; 1
    2e22:	59 f4       	brne	.+22     	; 0x2e3a <arpresolver_result_callback+0x1a>
    2e24:	a4 2f       	mov	r26, r20
    2e26:	b5 2f       	mov	r27, r21
    2e28:	e5 e3       	ldi	r30, 0x35	; 53
    2e2a:	f9 e1       	ldi	r31, 0x19	; 25
    2e2c:	2b e3       	ldi	r18, 0x3B	; 59
    2e2e:	39 e1       	ldi	r19, 0x19	; 25
    2e30:	8d 91       	ld	r24, X+
    2e32:	81 93       	st	Z+, r24
    2e34:	e2 17       	cp	r30, r18
    2e36:	f3 07       	cpc	r31, r19
    2e38:	d9 f7       	brne	.-10     	; 0x2e30 <arpresolver_result_callback+0x10>
    2e3a:	08 95       	ret

00002e3c <init_cnt2>:
    2e3c:	10 92 a6 05 	sts	0x05A6, r1	; 0x8005a6 <cnt2step>
    2e40:	82 e0       	ldi	r24, 0x02	; 2
    2e42:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    2e46:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    2e4a:	94 ef       	ldi	r25, 0xF4	; 244
    2e4c:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    2e50:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2e54:	87 e0       	ldi	r24, 0x07	; 7
    2e56:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2e5a:	08 95       	ret

00002e5c <__vector_9>:
    2e5c:	1f 92       	push	r1
    2e5e:	0f 92       	push	r0
    2e60:	0f b6       	in	r0, 0x3f	; 63
    2e62:	0f 92       	push	r0
    2e64:	11 24       	eor	r1, r1
    2e66:	8f 93       	push	r24
    2e68:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <cnt2step>
    2e6c:	8f 5f       	subi	r24, 0xFF	; 255
    2e6e:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <cnt2step>
    2e72:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <cnt2step>
    2e76:	83 33       	cpi	r24, 0x33	; 51
    2e78:	38 f0       	brcs	.+14     	; 0x2e88 <__vector_9+0x2c>
    2e7a:	10 92 a6 05 	sts	0x05A6, r1	; 0x8005a6 <cnt2step>
    2e7e:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <sec>
    2e82:	8f 5f       	subi	r24, 0xFF	; 255
    2e84:	80 93 a7 05 	sts	0x05A7, r24	; 0x8005a7 <sec>
    2e88:	8f 91       	pop	r24
    2e8a:	0f 90       	pop	r0
    2e8c:	0f be       	out	0x3f, r0	; 63
    2e8e:	0f 90       	pop	r0
    2e90:	1f 90       	pop	r1
    2e92:	18 95       	reti

00002e94 <http200ok>:
    2e94:	4b ee       	ldi	r20, 0xEB	; 235
    2e96:	51 e1       	ldi	r21, 0x11	; 17
    2e98:	60 e0       	ldi	r22, 0x00	; 0
    2e9a:	70 e0       	ldi	r23, 0x00	; 0
    2e9c:	88 ea       	ldi	r24, 0xA8	; 168
    2e9e:	95 e0       	ldi	r25, 0x05	; 5
    2ea0:	93 ca       	rjmp	.-2778   	; 0x23c8 <fill_tcp_data_p>
    2ea2:	08 95       	ret

00002ea4 <print_webpage>:

uint32_t print_webpage(uint8_t *buf)
{
    2ea4:	cf 93       	push	r28
    2ea6:	df 93       	push	r29
    2ea8:	ec 01       	movw	r28, r24
	uint32_t plen;
	plen=http200ok();
    2eaa:	f4 df       	rcall	.-24     	; 0x2e94 <http200ok>
	plen=fill_tcp_data_p(buf,plen,PSTR("\n<pre>\n"));
    2eac:	43 ee       	ldi	r20, 0xE3	; 227
    2eae:	51 e1       	ldi	r21, 0x11	; 17
    2eb0:	bc 01       	movw	r22, r24
    2eb2:	ce 01       	movw	r24, r28
    2eb4:	89 da       	rcall	.-2798   	; 0x23c8 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("<style>\n"));
    2eb6:	4a ed       	ldi	r20, 0xDA	; 218
    2eb8:	51 e1       	ldi	r21, 0x11	; 17
    2eba:	bc 01       	movw	r22, r24
    2ebc:	ce 01       	movw	r24, r28
    2ebe:	84 da       	rcall	.-2808   	; 0x23c8 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("div.center {\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%)\n}\n"));
    2ec0:	4c e6       	ldi	r20, 0x6C	; 108
    2ec2:	51 e1       	ldi	r21, 0x11	; 17
    2ec4:	bc 01       	movw	r22, r24
    2ec6:	ce 01       	movw	r24, r28
    2ec8:	7f da       	rcall	.-2818   	; 0x23c8 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("table, th, td {\nborder: 1px solid black;\nborder-collapse: collapse;\npadding: 15px;\ntext-align: center;\n}\n"));
    2eca:	42 e0       	ldi	r20, 0x02	; 2
    2ecc:	51 e1       	ldi	r21, 0x11	; 17
    2ece:	bc 01       	movw	r22, r24
    2ed0:	ce 01       	movw	r24, r28
    2ed2:	7a da       	rcall	.-2828   	; 0x23c8 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("td.button {\npadding: 0px;\n}\n"));
    2ed4:	45 ee       	ldi	r20, 0xE5	; 229
    2ed6:	50 e1       	ldi	r21, 0x10	; 16
    2ed8:	bc 01       	movw	r22, r24
    2eda:	ce 01       	movw	r24, r28
    2edc:	75 da       	rcall	.-2838   	; 0x23c8 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("h2, hr {\ntext-align: center;\n}\n"));
    2ede:	45 ec       	ldi	r20, 0xC5	; 197
    2ee0:	50 e1       	ldi	r21, 0x10	; 16
    2ee2:	bc 01       	movw	r22, r24
    2ee4:	ce 01       	movw	r24, r28
    2ee6:	70 da       	rcall	.-2848   	; 0x23c8 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("body {\nbackground-color: powderblue;\n}\n"));
    2ee8:	4d e9       	ldi	r20, 0x9D	; 157
    2eea:	50 e1       	ldi	r21, 0x10	; 16
    2eec:	bc 01       	movw	r22, r24
    2eee:	ce 01       	movw	r24, r28
    2ef0:	6b da       	rcall	.-2858   	; 0x23c8 <fill_tcp_data_p>

	plen=fill_tcp_data_p(buf,plen,PSTR("</style>\n"));
    2ef2:	43 e9       	ldi	r20, 0x93	; 147
    2ef4:	50 e1       	ldi	r21, 0x10	; 16
    2ef6:	bc 01       	movw	r22, r24
    2ef8:	ce 01       	movw	r24, r28
    2efa:	66 da       	rcall	.-2868   	; 0x23c8 <fill_tcp_data_p>
	//plen=fill_tcp_data_p(buf,plen,PSTR("<meta charset=UTF-8>\n"));
	plen=fill_tcp_data_p(buf,plen,PSTR("<body>\n<div class=center>\n<h2>Weather Station</h2>\n<table>\n"));
    2efc:	47 e5       	ldi	r20, 0x57	; 87
    2efe:	50 e1       	ldi	r21, 0x10	; 16
    2f00:	bc 01       	movw	r22, r24
    2f02:	ce 01       	movw	r24, r28
    2f04:	61 da       	rcall	.-2878   	; 0x23c8 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("<tr>\n<th>Information</th>\n</tr>"));
    2f06:	47 e3       	ldi	r20, 0x37	; 55
    2f08:	50 e1       	ldi	r21, 0x10	; 16
    2f0a:	bc 01       	movw	r22, r24
    2f0c:	ce 01       	movw	r24, r28
    2f0e:	5c da       	rcall	.-2888   	; 0x23c8 <fill_tcp_data_p>

	plen=fill_tcp_data_p(buf,plen,PSTR("\n<tr>\n<td>Temperature: "));
    2f10:	4f e1       	ldi	r20, 0x1F	; 31
    2f12:	50 e1       	ldi	r21, 0x10	; 16
    2f14:	bc 01       	movw	r22, r24
    2f16:	ce 01       	movw	r24, r28
    2f18:	57 da       	rcall	.-2898   	; 0x23c8 <fill_tcp_data_p>
	plen=fill_tcp_data(buf,plen,tempChar);
    2f1a:	4e e0       	ldi	r20, 0x0E	; 14
    2f1c:	5e e1       	ldi	r21, 0x1E	; 30
    2f1e:	bc 01       	movw	r22, r24
    2f20:	ce 01       	movw	r24, r28
    2f22:	7e da       	rcall	.-2820   	; 0x2420 <fill_tcp_data>
	plen=fill_tcp_data_p(buf,plen,PSTR(" &#x2103;</td>\n</tr>"));
    2f24:	4a e0       	ldi	r20, 0x0A	; 10
    2f26:	50 e1       	ldi	r21, 0x10	; 16
    2f28:	bc 01       	movw	r22, r24
    2f2a:	ce 01       	movw	r24, r28
    2f2c:	4d da       	rcall	.-2918   	; 0x23c8 <fill_tcp_data_p>
	
	plen=fill_tcp_data_p(buf,plen,PSTR("\n<tr>\n<td>Humidity: "));
    2f2e:	45 ef       	ldi	r20, 0xF5	; 245
    2f30:	5f e0       	ldi	r21, 0x0F	; 15
    2f32:	bc 01       	movw	r22, r24
    2f34:	ce 01       	movw	r24, r28
    2f36:	48 da       	rcall	.-2928   	; 0x23c8 <fill_tcp_data_p>
	plen=fill_tcp_data(buf,plen,humidChar);
    2f38:	42 e0       	ldi	r20, 0x02	; 2
    2f3a:	5e e1       	ldi	r21, 0x1E	; 30
    2f3c:	bc 01       	movw	r22, r24
    2f3e:	ce 01       	movw	r24, r28
    2f40:	6f da       	rcall	.-2850   	; 0x2420 <fill_tcp_data>
	plen=fill_tcp_data_p(buf,plen,PSTR(" %</td>\n</tr>"));
    2f42:	47 ee       	ldi	r20, 0xE7	; 231
    2f44:	5f e0       	ldi	r21, 0x0F	; 15
    2f46:	bc 01       	movw	r22, r24
    2f48:	ce 01       	movw	r24, r28
    2f4a:	3e da       	rcall	.-2948   	; 0x23c8 <fill_tcp_data_p>
	
	plen=fill_tcp_data_p(buf,plen,PSTR("\n<tr><td>Pressure: "));
    2f4c:	43 ed       	ldi	r20, 0xD3	; 211
    2f4e:	5f e0       	ldi	r21, 0x0F	; 15
    2f50:	bc 01       	movw	r22, r24
    2f52:	ce 01       	movw	r24, r28
    2f54:	39 da       	rcall	.-2958   	; 0x23c8 <fill_tcp_data_p>
	plen=fill_tcp_data(buf,plen,pressChar);
    2f56:	4a e1       	ldi	r20, 0x1A	; 26
    2f58:	5e e1       	ldi	r21, 0x1E	; 30
    2f5a:	bc 01       	movw	r22, r24
    2f5c:	ce 01       	movw	r24, r28
    2f5e:	60 da       	rcall	.-2880   	; 0x2420 <fill_tcp_data>
	plen=fill_tcp_data_p(buf,plen,PSTR(" Pa</td>\n</tr>"));
    2f60:	44 ec       	ldi	r20, 0xC4	; 196
    2f62:	5f e0       	ldi	r21, 0x0F	; 15
    2f64:	bc 01       	movw	r22, r24
    2f66:	ce 01       	movw	r24, r28
    2f68:	2f da       	rcall	.-2978   	; 0x23c8 <fill_tcp_data_p>
	
	//
	plen=fill_tcp_data_p(buf,plen,PSTR("\n<tr>\n<td>Wind Angle: "));
    2f6a:	4d ea       	ldi	r20, 0xAD	; 173
    2f6c:	5f e0       	ldi	r21, 0x0F	; 15
    2f6e:	bc 01       	movw	r22, r24
    2f70:	ce 01       	movw	r24, r28
    2f72:	2a da       	rcall	.-2988   	; 0x23c8 <fill_tcp_data_p>
	plen=fill_tcp_data(buf,plen,anglChar);
    2f74:	4d ee       	ldi	r20, 0xED	; 237
    2f76:	5d e1       	ldi	r21, 0x1D	; 29
    2f78:	bc 01       	movw	r22, r24
    2f7a:	ce 01       	movw	r24, r28
    2f7c:	51 da       	rcall	.-2910   	; 0x2420 <fill_tcp_data>
	plen=fill_tcp_data_p(buf,plen,PSTR("&#xb0;</td>\n</tr>"));
    2f7e:	4b e9       	ldi	r20, 0x9B	; 155
    2f80:	5f e0       	ldi	r21, 0x0F	; 15
    2f82:	bc 01       	movw	r22, r24
    2f84:	ce 01       	movw	r24, r28
    2f86:	20 da       	rcall	.-3008   	; 0x23c8 <fill_tcp_data_p>

	//
	plen=fill_tcp_data_p(buf,plen,PSTR("\n<tr>\n<td>Wind Speed: "));
    2f88:	44 e8       	ldi	r20, 0x84	; 132
    2f8a:	5f e0       	ldi	r21, 0x0F	; 15
    2f8c:	bc 01       	movw	r22, r24
    2f8e:	ce 01       	movw	r24, r28
    2f90:	1b da       	rcall	.-3018   	; 0x23c8 <fill_tcp_data_p>
    2f92:	4a e4       	ldi	r20, 0x4A	; 74
	plen=fill_tcp_data(buf,plen,speedChar);
    2f94:	5e e1       	ldi	r21, 0x1E	; 30
    2f96:	bc 01       	movw	r22, r24
    2f98:	ce 01       	movw	r24, r28
    2f9a:	42 da       	rcall	.-2940   	; 0x2420 <fill_tcp_data>
    2f9c:	44 e7       	ldi	r20, 0x74	; 116
    2f9e:	5f e0       	ldi	r21, 0x0F	; 15
	plen=fill_tcp_data_p(buf,plen,PSTR(" m/s</td>\n</tr>"));
    2fa0:	bc 01       	movw	r22, r24
    2fa2:	ce 01       	movw	r24, r28
    2fa4:	11 da       	rcall	.-3038   	; 0x23c8 <fill_tcp_data_p>
    2fa6:	4d e5       	ldi	r20, 0x5D	; 93
    2fa8:	5f e0       	ldi	r21, 0x0F	; 15
	
	plen=fill_tcp_data_p(buf,plen,PSTR("\n<tr>\n<td>Box Status: "));
    2faa:	bc 01       	movw	r22, r24
    2fac:	ce 01       	movw	r24, r28
    2fae:	0c da       	rcall	.-3048   	; 0x23c8 <fill_tcp_data_p>
    2fb0:	40 91 f7 1d 	lds	r20, 0x1DF7	; 0x801df7 <magnetVal>
	if(magnetVal >= halleff)
    2fb4:	50 91 f8 1d 	lds	r21, 0x1DF8	; 0x801df8 <magnetVal+0x1>
    2fb8:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <halleff>
    2fbc:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <halleff+0x1>
    2fc0:	42 17       	cp	r20, r18
    2fc2:	53 07       	cpc	r21, r19
    2fc4:	38 f0       	brcs	.+14     	; 0x2fd4 <print_webpage+0x130>
		plen=fill_tcp_data_p(buf,plen,PSTR("<font color=\"red\">Closed</font>"));
    2fc6:	4d e3       	ldi	r20, 0x3D	; 61
    2fc8:	5f e0       	ldi	r21, 0x0F	; 15
    2fca:	bc 01       	movw	r22, r24
    2fcc:	ce 01       	movw	r24, r28
    2fce:	fc d9       	rcall	.-3080   	; 0x23c8 <fill_tcp_data_p>
    2fd0:	bc 01       	movw	r22, r24
    2fd2:	06 c0       	rjmp	.+12     	; 0x2fe0 <print_webpage+0x13c>
	else
		plen=fill_tcp_data_p(buf,plen,PSTR("<font color=\"green\">Open</font>"));
    2fd4:	4d e1       	ldi	r20, 0x1D	; 29
    2fd6:	5f e0       	ldi	r21, 0x0F	; 15
    2fd8:	bc 01       	movw	r22, r24
    2fda:	ce 01       	movw	r24, r28
    2fdc:	f5 d9       	rcall	.-3094   	; 0x23c8 <fill_tcp_data_p>
    2fde:	bc 01       	movw	r22, r24
	plen=fill_tcp_data_p(buf,plen,PSTR("</td>\n</tr>"));
    2fe0:	41 e1       	ldi	r20, 0x11	; 17
    2fe2:	5f e0       	ldi	r21, 0x0F	; 15
    2fe4:	ce 01       	movw	r24, r28
    2fe6:	f0 d9       	rcall	.-3104   	; 0x23c8 <fill_tcp_data_p>

	plen=fill_tcp_data_p(buf,plen,PSTR("\n</table>\n</form>\n"));
    2fe8:	4e ef       	ldi	r20, 0xFE	; 254
    2fea:	5e e0       	ldi	r21, 0x0E	; 14
    2fec:	bc 01       	movw	r22, r24
    2fee:	ce 01       	movw	r24, r28
    2ff0:	eb d9       	rcall	.-3114   	; 0x23c8 <fill_tcp_data_p>
    2ff2:	4a e9       	ldi	r20, 0x9A	; 154
	plen=fill_tcp_data_p(buf,plen,PSTR("<input type=\"submit\" value=\"Settings\" style=\"width:100%\" onclick=\"window.location='/settings';\" />\n"));
    2ff4:	5e e0       	ldi	r21, 0x0E	; 14
    2ff6:	bc 01       	movw	r22, r24
    2ff8:	ce 01       	movw	r24, r28
    2ffa:	e6 d9       	rcall	.-3124   	; 0x23c8 <fill_tcp_data_p>
    2ffc:	47 e3       	ldi	r20, 0x37	; 55
    2ffe:	5e e0       	ldi	r21, 0x0E	; 14
	plen=fill_tcp_data_p(buf,plen,PSTR("<input type=\"submit\" value=\"RTC Settings\" style=\"width:100%\" onclick=\"window.location='/rtc';\" />\n"));
    3000:	bc 01       	movw	r22, r24
    3002:	ce 01       	movw	r24, r28
    3004:	e1 d9       	rcall	.-3134   	; 0x23c8 <fill_tcp_data_p>
    3006:	4f e0       	ldi	r20, 0x0F	; 15
    3008:	5e e0       	ldi	r21, 0x0E	; 14
    300a:	bc 01       	movw	r22, r24
	//plen=fill_tcp_data_p(buf,plen,PSTR("<tr>\n<td class=button><input type=submit value=\"Confirm\" style=\"width:100%\"></td>\n</tr>\n</table></form>"));
	
	//plen=fill_tcp_data_p(buf,plen,PSTR("\n</form>\n<form action=/ method=get><input type=hidden name=\"rr\" value=\"1\"><td class=button><input type=submit value=\"Reset\" style=\"width:100%\"></td></form>\n</tr>\n</table>"));
	plen=fill_tcp_data_p(buf,plen,PSTR("<br><hr>by Daniels Fi&#353ers</hr></br>"));
    300c:	ce 01       	movw	r24, r28
    300e:	dc d9       	rcall	.-3144   	; 0x23c8 <fill_tcp_data_p>
    3010:	4f ef       	ldi	r20, 0xFF	; 255
    3012:	5d e0       	ldi	r21, 0x0D	; 13
    3014:	bc 01       	movw	r22, r24
    3016:	ce 01       	movw	r24, r28
	plen=fill_tcp_data_p(buf,plen,PSTR("</div>\n</body>\n"));
    3018:	d7 d9       	rcall	.-3154   	; 0x23c8 <fill_tcp_data_p>
    301a:	48 ef       	ldi	r20, 0xF8	; 248
    301c:	5d e0       	ldi	r21, 0x0D	; 13
    301e:	bc 01       	movw	r22, r24
    3020:	ce 01       	movw	r24, r28
    3022:	d2 d9       	rcall	.-3164   	; 0x23c8 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("</pre>"));
    3024:	bc 01       	movw	r22, r24
    3026:	80 e0       	ldi	r24, 0x00	; 0
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	df 91       	pop	r29
    302c:	cf 91       	pop	r28
    302e:	08 95       	ret

00003030 <print_settings>:

	
	return(plen);
    3030:	af 92       	push	r10
    3032:	bf 92       	push	r11
    3034:	cf 92       	push	r12
}
    3036:	df 92       	push	r13
    3038:	ef 92       	push	r14
    303a:	ff 92       	push	r15
uint32_t print_settings(uint8_t *buf)
{
    303c:	0f 93       	push	r16
    303e:	1f 93       	push	r17
    3040:	cf 93       	push	r28
    3042:	df 93       	push	r29
    3044:	cd b7       	in	r28, 0x3d	; 61
    3046:	de b7       	in	r29, 0x3e	; 62
    3048:	ad 97       	sbiw	r28, 0x2d	; 45
    304a:	0f b6       	in	r0, 0x3f	; 63
    304c:	f8 94       	cli
    304e:	de bf       	out	0x3e, r29	; 62
    3050:	0f be       	out	0x3f, r0	; 63
    3052:	cd bf       	out	0x3d, r28	; 61
    3054:	7c 01       	movw	r14, r24
	char charMyIP[16], charGWIP[16];
	uint32_t plen;
	char vstr[5];
	plen=http200ok();
    3056:	1e df       	rcall	.-452    	; 0x2e94 <http200ok>
	plen=fill_tcp_data_p(buf,plen,PSTR("\n<pre>\n"));
    3058:	40 ef       	ldi	r20, 0xF0	; 240
    305a:	5d e0       	ldi	r21, 0x0D	; 13
    305c:	bc 01       	movw	r22, r24
    305e:	c7 01       	movw	r24, r14
    3060:	b3 d9       	rcall	.-3226   	; 0x23c8 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("<style>\n"));
    3062:	47 ee       	ldi	r20, 0xE7	; 231
    3064:	5d e0       	ldi	r21, 0x0D	; 13
    3066:	bc 01       	movw	r22, r24
    3068:	c7 01       	movw	r24, r14
    306a:	ae d9       	rcall	.-3236   	; 0x23c8 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("div.center {\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%)\n}\n"));
    306c:	49 e7       	ldi	r20, 0x79	; 121
    306e:	5d e0       	ldi	r21, 0x0D	; 13
    3070:	bc 01       	movw	r22, r24
    3072:	c7 01       	movw	r24, r14
    3074:	a9 d9       	rcall	.-3246   	; 0x23c8 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("table, th, td {\nborder: 1px solid black;\nborder-collapse: collapse;\npadding: 15px;\ntext-align: center;\n}\n"));
    3076:	4f e0       	ldi	r20, 0x0F	; 15
    3078:	5d e0       	ldi	r21, 0x0D	; 13
    307a:	bc 01       	movw	r22, r24
    307c:	c7 01       	movw	r24, r14
    307e:	a4 d9       	rcall	.-3256   	; 0x23c8 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("td.button {\npadding: 0px;\n}\n"));
    3080:	42 ef       	ldi	r20, 0xF2	; 242
    3082:	5c e0       	ldi	r21, 0x0C	; 12
    3084:	bc 01       	movw	r22, r24
    3086:	c7 01       	movw	r24, r14
    3088:	9f d9       	rcall	.-3266   	; 0x23c8 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("h2, hr {\ntext-align: center;\n}\n"));
    308a:	42 ed       	ldi	r20, 0xD2	; 210
    308c:	5c e0       	ldi	r21, 0x0C	; 12
    308e:	bc 01       	movw	r22, r24
    3090:	c7 01       	movw	r24, r14
    3092:	9a d9       	rcall	.-3276   	; 0x23c8 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("body {\nbackground-color: powderblue;\n}\n"));
    3094:	4a ea       	ldi	r20, 0xAA	; 170
    3096:	5c e0       	ldi	r21, 0x0C	; 12
    3098:	bc 01       	movw	r22, r24
    309a:	c7 01       	movw	r24, r14
    309c:	95 d9       	rcall	.-3286   	; 0x23c8 <fill_tcp_data_p>

	plen=fill_tcp_data_p(buf,plen,PSTR("</style>\n"));
    309e:	40 ea       	ldi	r20, 0xA0	; 160
    30a0:	5c e0       	ldi	r21, 0x0C	; 12
    30a2:	bc 01       	movw	r22, r24
    30a4:	c7 01       	movw	r24, r14
    30a6:	90 d9       	rcall	.-3296   	; 0x23c8 <fill_tcp_data_p>
	//plen=fill_tcp_data_p(buf,plen,PSTR("<meta charset=UTF-8>\n"));
	plen=fill_tcp_data_p(buf,plen,PSTR("<body>\n<div class=center>\n<h2>Weather Station</h2>\n<table>\n"));
    30a8:	44 e6       	ldi	r20, 0x64	; 100
    30aa:	5c e0       	ldi	r21, 0x0C	; 12
    30ac:	bc 01       	movw	r22, r24
    30ae:	c7 01       	movw	r24, r14
    30b0:	8b d9       	rcall	.-3306   	; 0x23c8 <fill_tcp_data_p>
	
	plen=fill_tcp_data_p(buf,plen,PSTR("<tr>\n<th>Settings</th>\n</tr>\n"));
    30b2:	46 e4       	ldi	r20, 0x46	; 70
    30b4:	5c e0       	ldi	r21, 0x0C	; 12
    30b6:	bc 01       	movw	r22, r24
    30b8:	c7 01       	movw	r24, r14
    30ba:	86 d9       	rcall	.-3316   	; 0x23c8 <fill_tcp_data_p>
    30bc:	45 ee       	ldi	r20, 0xE5	; 229

	
	plen=fill_tcp_data_p(buf,plen,PSTR("<tr><td><form action=/ method=get>Weather Station IP: <input type=text size=12 name=myip value=\""));
    30be:	5b e0       	ldi	r21, 0x0B	; 11
    30c0:	bc 01       	movw	r22, r24
    30c2:	c7 01       	movw	r24, r14
    30c4:	81 d9       	rcall	.-3326   	; 0x23c8 <fill_tcp_data_p>
    30c6:	5c 01       	movw	r10, r24
    30c8:	e4 e2       	ldi	r30, 0x24	; 36
    30ca:	f1 e0       	ldi	r31, 0x01	; 1
	sprintf(charMyIP, "%d.%d.%d.%d", myip[0], myip[1], myip[2], myip[3]);
    30cc:	83 81       	ldd	r24, Z+3	; 0x03
    30ce:	1f 92       	push	r1
    30d0:	8f 93       	push	r24
    30d2:	82 81       	ldd	r24, Z+2	; 0x02
    30d4:	1f 92       	push	r1
    30d6:	8f 93       	push	r24
    30d8:	81 81       	ldd	r24, Z+1	; 0x01
    30da:	1f 92       	push	r1
    30dc:	8f 93       	push	r24
    30de:	80 81       	ld	r24, Z
    30e0:	1f 92       	push	r1
    30e2:	8f 93       	push	r24
    30e4:	0e e3       	ldi	r16, 0x3E	; 62
    30e6:	11 e0       	ldi	r17, 0x01	; 1
    30e8:	1f 93       	push	r17
    30ea:	0f 93       	push	r16
    30ec:	9e 01       	movw	r18, r28
    30ee:	2f 5f       	subi	r18, 0xFF	; 255
    30f0:	3f 4f       	sbci	r19, 0xFF	; 255
    30f2:	69 01       	movw	r12, r18
    30f4:	3f 93       	push	r19
    30f6:	2f 93       	push	r18
    30f8:	0e 94 06 47 	call	0x8e0c	; 0x8e0c <sprintf>
	plen=fill_tcp_data(buf,plen,charMyIP);
    30fc:	a6 01       	movw	r20, r12
    30fe:	b5 01       	movw	r22, r10
    3100:	c7 01       	movw	r24, r14
    3102:	8e d9       	rcall	.-3300   	; 0x2420 <fill_tcp_data>
	plen=fill_tcp_data_p(buf,plen,PSTR("\" /></td></tr>\n"));
    3104:	45 ed       	ldi	r20, 0xD5	; 213
    3106:	5b e0       	ldi	r21, 0x0B	; 11
    3108:	bc 01       	movw	r22, r24
    310a:	c7 01       	movw	r24, r14
    310c:	5d d9       	rcall	.-3398   	; 0x23c8 <fill_tcp_data_p>
	
	
	plen=fill_tcp_data_p(buf,plen,PSTR("<tr><td>Destination IP: <input type=text size=12 name=servip value=\""));
    310e:	40 e9       	ldi	r20, 0x90	; 144
    3110:	5b e0       	ldi	r21, 0x0B	; 11
    3112:	bc 01       	movw	r22, r24
    3114:	c7 01       	movw	r24, r14
    3116:	58 d9       	rcall	.-3408   	; 0x23c8 <fill_tcp_data_p>
	plen=fill_tcp_data(buf,plen,serverip);
    3118:	44 e1       	ldi	r20, 0x14	; 20
    311a:	51 e0       	ldi	r21, 0x01	; 1
    311c:	bc 01       	movw	r22, r24
    311e:	c7 01       	movw	r24, r14
    3120:	7f d9       	rcall	.-3330   	; 0x2420 <fill_tcp_data>
    3122:	40 e8       	ldi	r20, 0x80	; 128
	plen=fill_tcp_data_p(buf,plen,PSTR("\" /></td></tr>\n"));
    3124:	5b e0       	ldi	r21, 0x0B	; 11
    3126:	bc 01       	movw	r22, r24
    3128:	c7 01       	movw	r24, r14
    312a:	4e d9       	rcall	.-3428   	; 0x23c8 <fill_tcp_data_p>
    312c:	41 e4       	ldi	r20, 0x41	; 65
    312e:	5b e0       	ldi	r21, 0x0B	; 11
	
	
	plen=fill_tcp_data_p(buf,plen,PSTR("<tr><td>Gateway IP: <input type=text size=12 name=gwip value=\""));
    3130:	bc 01       	movw	r22, r24
    3132:	c7 01       	movw	r24, r14
    3134:	49 d9       	rcall	.-3438   	; 0x23c8 <fill_tcp_data_p>
    3136:	6c 01       	movw	r12, r24
    3138:	ee e0       	ldi	r30, 0x0E	; 14
    313a:	f1 e0       	ldi	r31, 0x01	; 1
    313c:	83 81       	ldd	r24, Z+3	; 0x03
	sprintf(charGWIP, "%d.%d.%d.%d", gwip[0], gwip[1], gwip[2], gwip[3]);
    313e:	1f 92       	push	r1
    3140:	8f 93       	push	r24
    3142:	82 81       	ldd	r24, Z+2	; 0x02
    3144:	1f 92       	push	r1
    3146:	8f 93       	push	r24
    3148:	81 81       	ldd	r24, Z+1	; 0x01
    314a:	1f 92       	push	r1
    314c:	8f 93       	push	r24
    314e:	80 81       	ld	r24, Z
    3150:	1f 92       	push	r1
    3152:	8f 93       	push	r24
    3154:	1f 93       	push	r17
    3156:	0f 93       	push	r16
    3158:	8e 01       	movw	r16, r28
    315a:	0f 5e       	subi	r16, 0xEF	; 239
    315c:	1f 4f       	sbci	r17, 0xFF	; 255
    315e:	1f 93       	push	r17
    3160:	0f 93       	push	r16
    3162:	0e 94 06 47 	call	0x8e0c	; 0x8e0c <sprintf>
    3166:	a8 01       	movw	r20, r16
	plen=fill_tcp_data(buf,plen,charGWIP);
    3168:	b6 01       	movw	r22, r12
    316a:	c7 01       	movw	r24, r14
    316c:	59 d9       	rcall	.-3406   	; 0x2420 <fill_tcp_data>
    316e:	41 e3       	ldi	r20, 0x31	; 49
    3170:	5b e0       	ldi	r21, 0x0B	; 11
	plen=fill_tcp_data_p(buf,plen,PSTR("\" /></td></tr>\n"));
    3172:	bc 01       	movw	r22, r24
    3174:	c7 01       	movw	r24, r14
    3176:	28 d9       	rcall	.-3504   	; 0x23c8 <fill_tcp_data_p>
    3178:	6c 01       	movw	r12, r24
    317a:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <SERVERPORT>
	//
 	char port[8];
 	// 	plen=fill_tcp_data_p(buf,plen,PSTR("<tr>\n<td>\nPort: <input type=text size=12 name=port value="));
 	dtostrf(SERVERPORT,1,0,port);
    317e:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <SERVERPORT+0x1>
    3182:	80 e0       	ldi	r24, 0x00	; 0
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	0e 94 5b 40 	call	0x80b6	; 0x80b6 <__floatunsisf>
    318a:	0b 5e       	subi	r16, 0xEB	; 235
    318c:	1f 4f       	sbci	r17, 0xFF	; 255
    318e:	20 e0       	ldi	r18, 0x00	; 0
    3190:	41 e0       	ldi	r20, 0x01	; 1
    3192:	0e 94 d4 43 	call	0x87a8	; 0x87a8 <dtostrf>
 	plen=fill_tcp_data_p(buf,plen,PSTR("<tr><td>Port: <input type=text size=6 name=port value=\""));
    3196:	49 ef       	ldi	r20, 0xF9	; 249
    3198:	5a e0       	ldi	r21, 0x0A	; 10
    319a:	b6 01       	movw	r22, r12
    319c:	c7 01       	movw	r24, r14
    319e:	14 d9       	rcall	.-3544   	; 0x23c8 <fill_tcp_data_p>
    31a0:	a8 01       	movw	r20, r16
 	plen=fill_tcp_data(buf,plen,port);
    31a2:	bc 01       	movw	r22, r24
    31a4:	c7 01       	movw	r24, r14
    31a6:	3c d9       	rcall	.-3464   	; 0x2420 <fill_tcp_data>
    31a8:	49 ee       	ldi	r20, 0xE9	; 233
    31aa:	5a e0       	ldi	r21, 0x0A	; 10
 	plen=fill_tcp_data_p(buf,plen,PSTR("\" /></td></tr>\n"));
    31ac:	bc 01       	movw	r22, r24
    31ae:	c7 01       	movw	r24, r14
    31b0:	0b d9       	rcall	.-3562   	; 0x23c8 <fill_tcp_data_p>
    31b2:	40 ea       	ldi	r20, 0xA0	; 160
    31b4:	5a e0       	ldi	r21, 0x0A	; 10
	
	plen=fill_tcp_data_p(buf,plen,PSTR("<tr><td>Timeout (Seconds): <input type=text size=12 name=timeout value=\""));
    31b6:	bc 01       	movw	r22, r24
    31b8:	c7 01       	movw	r24, r14
    31ba:	06 d9       	rcall	.-3572   	; 0x23c8 <fill_tcp_data_p>
    31bc:	8c 01       	movw	r16, r24
    31be:	4a e0       	ldi	r20, 0x0A	; 10
    31c0:	be 01       	movw	r22, r28
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    31c2:	6f 5d       	subi	r22, 0xDF	; 223
    31c4:	7f 4f       	sbci	r23, 0xFF	; 255
    31c6:	80 91 0c 1e 	lds	r24, 0x1E0C	; 0x801e0c <timeout>
    31ca:	90 91 0d 1e 	lds	r25, 0x1E0D	; 0x801e0d <timeout+0x1>
    31ce:	0e 94 c5 45 	call	0x8b8a	; 0x8b8a <__itoa_ncheck>
    31d2:	ae 01       	movw	r20, r28
	itoa(timeout,vstr,10);
	plen=fill_tcp_data(buf,plen,vstr);
    31d4:	4f 5d       	subi	r20, 0xDF	; 223
    31d6:	5f 4f       	sbci	r21, 0xFF	; 255
    31d8:	b8 01       	movw	r22, r16
    31da:	c7 01       	movw	r24, r14
    31dc:	21 d9       	rcall	.-3518   	; 0x2420 <fill_tcp_data>
    31de:	40 e9       	ldi	r20, 0x90	; 144
    31e0:	5a e0       	ldi	r21, 0x0A	; 10
	plen=fill_tcp_data_p(buf,plen,PSTR("\" /></td></tr>\n"));
    31e2:	bc 01       	movw	r22, r24
    31e4:	c7 01       	movw	r24, r14
    31e6:	f0 d8       	rcall	.-3616   	; 0x23c8 <fill_tcp_data_p>
    31e8:	40 e5       	ldi	r20, 0x50	; 80
    31ea:	5a e0       	ldi	r21, 0x0A	; 10
	
	plen=fill_tcp_data_p(buf,plen,PSTR("<tr><td>Hall Sensor: <input type=text size=12 name=hall value=\""));
    31ec:	bc 01       	movw	r22, r24
    31ee:	c7 01       	movw	r24, r14
    31f0:	eb d8       	rcall	.-3626   	; 0x23c8 <fill_tcp_data_p>
    31f2:	8c 01       	movw	r16, r24
    31f4:	4a e0       	ldi	r20, 0x0A	; 10
    31f6:	be 01       	movw	r22, r28
    31f8:	6f 5d       	subi	r22, 0xDF	; 223
    31fa:	7f 4f       	sbci	r23, 0xFF	; 255
    31fc:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <halleff>
    3200:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <halleff+0x1>
    3204:	0e 94 c5 45 	call	0x8b8a	; 0x8b8a <__itoa_ncheck>
 	itoa(halleff,vstr,10);
 	plen=fill_tcp_data(buf,plen,vstr);
    3208:	ae 01       	movw	r20, r28
    320a:	4f 5d       	subi	r20, 0xDF	; 223
    320c:	5f 4f       	sbci	r21, 0xFF	; 255
    320e:	b8 01       	movw	r22, r16
    3210:	c7 01       	movw	r24, r14
	plen=fill_tcp_data_p(buf,plen,PSTR("\" /></td></tr>\n"));
    3212:	06 d9       	rcall	.-3572   	; 0x2420 <fill_tcp_data>
    3214:	40 e4       	ldi	r20, 0x40	; 64
    3216:	5a e0       	ldi	r21, 0x0A	; 10
    3218:	bc 01       	movw	r22, r24
    321a:	c7 01       	movw	r24, r14
	
	
	//
	plen=fill_tcp_data_p(buf,plen,PSTR("<tr><td class=button><input type=submit value=\"Confirm\" style=\"width:100%\"></td></tr>\n</form>"));
    321c:	d5 d8       	rcall	.-3670   	; 0x23c8 <fill_tcp_data_p>
    321e:	42 ee       	ldi	r20, 0xE2	; 226
    3220:	59 e0       	ldi	r21, 0x09	; 9
    3222:	bc 01       	movw	r22, r24
    3224:	c7 01       	movw	r24, r14
	plen=fill_tcp_data_p(buf,plen,PSTR("<tr><td class=button><input type=\"submit\" value=\"Restart\" style=\"width:100%\" onclick=\"window.location='/reset';\" /></td></tr>\n"));
    3226:	d0 d8       	rcall	.-3680   	; 0x23c8 <fill_tcp_data_p>
    3228:	43 e6       	ldi	r20, 0x63	; 99
    322a:	59 e0       	ldi	r21, 0x09	; 9
    322c:	bc 01       	movw	r22, r24
    322e:	c7 01       	movw	r24, r14
    3230:	cb d8       	rcall	.-3690   	; 0x23c8 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("</table>\n"));
    3232:	49 e5       	ldi	r20, 0x59	; 89
    3234:	59 e0       	ldi	r21, 0x09	; 9
    3236:	bc 01       	movw	r22, r24
    3238:	c7 01       	movw	r24, r14
    323a:	c6 d8       	rcall	.-3700   	; 0x23c8 <fill_tcp_data_p>
    323c:	4d ef       	ldi	r20, 0xFD	; 253
	plen=fill_tcp_data_p(buf,plen,PSTR("<input type=\"submit\" value=\"Home\" style=\"width:100%\" onclick=\"window.location='/home';\" />\n"));
    323e:	58 e0       	ldi	r21, 0x08	; 8
    3240:	bc 01       	movw	r22, r24
    3242:	c7 01       	movw	r24, r14
    3244:	c1 d8       	rcall	.-3710   	; 0x23c8 <fill_tcp_data_p>
    3246:	45 ed       	ldi	r20, 0xD5	; 213
    3248:	58 e0       	ldi	r21, 0x08	; 8
	//plen=fill_tcp_data_p(buf,plen,PSTR("<input type=\"submit\" value=\"Information\" style=\"width:100%\" onclick=\"window.location='/';\" />\n</table></form>"));
	//plen=fill_tcp_data_p(buf,plen,PSTR("<tr>\n<td class=button><input type=submit value=\"Confirm\" style=\"width:100%\"></td>\n</tr>\n</table></form>"));
	
	//plen=fill_tcp_data_p(buf,plen,PSTR("\n</form>\n<form action=/ method=get><input type=hidden name=\"rr\" value=\"1\"><td class=button><input type=submit value=\"Reset\" style=\"width:100%\"></td></form>\n</tr>\n</table>"));
	plen=fill_tcp_data_p(buf,plen,PSTR("<br><hr>by Daniels Fi&#353ers</hr></br>"));
    324a:	bc 01       	movw	r22, r24
    324c:	c7 01       	movw	r24, r14
    324e:	bc d8       	rcall	.-3720   	; 0x23c8 <fill_tcp_data_p>
    3250:	45 ec       	ldi	r20, 0xC5	; 197
    3252:	58 e0       	ldi	r21, 0x08	; 8
    3254:	bc 01       	movw	r22, r24
	plen=fill_tcp_data_p(buf,plen,PSTR("</div>\n</body>\n"));
    3256:	c7 01       	movw	r24, r14
    3258:	b7 d8       	rcall	.-3730   	; 0x23c8 <fill_tcp_data_p>
    325a:	4e eb       	ldi	r20, 0xBE	; 190
    325c:	58 e0       	ldi	r21, 0x08	; 8
    325e:	bc 01       	movw	r22, r24
    3260:	c7 01       	movw	r24, r14
	plen=fill_tcp_data_p(buf,plen,PSTR("</pre>"));
    3262:	b2 d8       	rcall	.-3740   	; 0x23c8 <fill_tcp_data_p>
    3264:	bc 01       	movw	r22, r24
    3266:	80 e0       	ldi	r24, 0x00	; 0
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	0f b6       	in	r0, 0x3f	; 63
    326c:	f8 94       	cli

	
	return(plen);
    326e:	de bf       	out	0x3e, r29	; 62
    3270:	0f be       	out	0x3f, r0	; 63
    3272:	cd bf       	out	0x3d, r28	; 61
    3274:	ad 96       	adiw	r28, 0x2d	; 45
    3276:	0f b6       	in	r0, 0x3f	; 63
    3278:	f8 94       	cli
    327a:	de bf       	out	0x3e, r29	; 62
    327c:	0f be       	out	0x3f, r0	; 63
}
    327e:	cd bf       	out	0x3d, r28	; 61
    3280:	df 91       	pop	r29
    3282:	cf 91       	pop	r28
    3284:	1f 91       	pop	r17
    3286:	0f 91       	pop	r16
    3288:	ff 90       	pop	r15
    328a:	ef 90       	pop	r14
    328c:	df 90       	pop	r13
    328e:	cf 90       	pop	r12
    3290:	bf 90       	pop	r11
    3292:	af 90       	pop	r10
    3294:	08 95       	ret

00003296 <print_rtc>:
    3296:	af 92       	push	r10
    3298:	bf 92       	push	r11
    329a:	cf 92       	push	r12
    329c:	df 92       	push	r13
    329e:	ef 92       	push	r14
uint32_t print_rtc(uint8_t *buf)
{
    32a0:	ff 92       	push	r15
    32a2:	0f 93       	push	r16
    32a4:	1f 93       	push	r17
    32a6:	cf 93       	push	r28
    32a8:	df 93       	push	r29
    32aa:	cd b7       	in	r28, 0x3d	; 61
    32ac:	de b7       	in	r29, 0x3e	; 62
    32ae:	e0 97       	sbiw	r28, 0x30	; 48
    32b0:	0f b6       	in	r0, 0x3f	; 63
    32b2:	f8 94       	cli
    32b4:	de bf       	out	0x3e, r29	; 62
    32b6:	0f be       	out	0x3f, r0	; 63
    32b8:	cd bf       	out	0x3d, r28	; 61
    32ba:	7c 01       	movw	r14, r24
	char year[8],month[8],day[8],hour[8],minute[8],second[8];
	uint32_t plen;
	plen=http200ok();
    32bc:	eb dd       	rcall	.-1066   	; 0x2e94 <http200ok>
	plen=fill_tcp_data_p(buf,plen,PSTR("\n<pre>\n"));
    32be:	46 eb       	ldi	r20, 0xB6	; 182
    32c0:	58 e0       	ldi	r21, 0x08	; 8
    32c2:	bc 01       	movw	r22, r24
    32c4:	c7 01       	movw	r24, r14
    32c6:	80 d8       	rcall	.-3840   	; 0x23c8 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("<style>\n"));
    32c8:	4d ea       	ldi	r20, 0xAD	; 173
    32ca:	58 e0       	ldi	r21, 0x08	; 8
    32cc:	bc 01       	movw	r22, r24
    32ce:	c7 01       	movw	r24, r14
    32d0:	7b d8       	rcall	.-3850   	; 0x23c8 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("div.center {\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%)\n}\n"));
    32d2:	4f e3       	ldi	r20, 0x3F	; 63
    32d4:	58 e0       	ldi	r21, 0x08	; 8
    32d6:	bc 01       	movw	r22, r24
    32d8:	c7 01       	movw	r24, r14
    32da:	76 d8       	rcall	.-3860   	; 0x23c8 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("table, th, td {\nborder: 1px solid black;\nborder-collapse: collapse;\npadding: 15px;\ntext-align: center;\n}\n"));
    32dc:	45 ed       	ldi	r20, 0xD5	; 213
    32de:	57 e0       	ldi	r21, 0x07	; 7
    32e0:	bc 01       	movw	r22, r24
    32e2:	c7 01       	movw	r24, r14
    32e4:	71 d8       	rcall	.-3870   	; 0x23c8 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("td.button {\npadding: 0px;\n}\n"));
    32e6:	48 eb       	ldi	r20, 0xB8	; 184
    32e8:	57 e0       	ldi	r21, 0x07	; 7
    32ea:	bc 01       	movw	r22, r24
    32ec:	c7 01       	movw	r24, r14
    32ee:	6c d8       	rcall	.-3880   	; 0x23c8 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("h2, hr {\ntext-align: center;\n}\n"));
    32f0:	48 e9       	ldi	r20, 0x98	; 152
    32f2:	57 e0       	ldi	r21, 0x07	; 7
    32f4:	bc 01       	movw	r22, r24
    32f6:	c7 01       	movw	r24, r14
    32f8:	67 d8       	rcall	.-3890   	; 0x23c8 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("body {\nbackground-color: powderblue;\n}\n"));
    32fa:	40 e7       	ldi	r20, 0x70	; 112
    32fc:	57 e0       	ldi	r21, 0x07	; 7
    32fe:	bc 01       	movw	r22, r24
    3300:	c7 01       	movw	r24, r14
    3302:	62 d8       	rcall	.-3900   	; 0x23c8 <fill_tcp_data_p>

	plen=fill_tcp_data_p(buf,plen,PSTR("</style>\n"));
    3304:	46 e6       	ldi	r20, 0x66	; 102
    3306:	57 e0       	ldi	r21, 0x07	; 7
    3308:	bc 01       	movw	r22, r24
    330a:	c7 01       	movw	r24, r14
    330c:	5d d8       	rcall	.-3910   	; 0x23c8 <fill_tcp_data_p>
	//plen=fill_tcp_data_p(buf,plen,PSTR("<meta charset=UTF-8>\n"));
	plen=fill_tcp_data_p(buf,plen,PSTR("<body>\n<div class=center>\n<h2>Weather Station</h2>\n<table>\n"));
    330e:	4a e2       	ldi	r20, 0x2A	; 42
    3310:	57 e0       	ldi	r21, 0x07	; 7
    3312:	bc 01       	movw	r22, r24
    3314:	c7 01       	movw	r24, r14
    3316:	58 d8       	rcall	.-3920   	; 0x23c8 <fill_tcp_data_p>
	
	plen=fill_tcp_data_p(buf,plen,PSTR("<tr>\n<th colspan=\"2\">Real Time Clock Settings</th>\n</tr>\n"));
    3318:	40 ef       	ldi	r20, 0xF0	; 240
    331a:	56 e0       	ldi	r21, 0x06	; 6
    331c:	bc 01       	movw	r22, r24
    331e:	c7 01       	movw	r24, r14
    3320:	53 d8       	rcall	.-3930   	; 0x23c8 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("<tr>\n<th>Date</th><th>Time</th>\n</tr>"));
    3322:	4a ec       	ldi	r20, 0xCA	; 202
    3324:	56 e0       	ldi	r21, 0x06	; 6
    3326:	bc 01       	movw	r22, r24
    3328:	c7 01       	movw	r24, r14
    332a:	4e d8       	rcall	.-3940   	; 0x23c8 <fill_tcp_data_p>
    332c:	46 e7       	ldi	r20, 0x76	; 118

	
	plen=fill_tcp_data_p(buf,plen,PSTR("<tr>\n<td><form action=/ method=get>\nYear: <input type=text size=12 name=year value="));
    332e:	56 e0       	ldi	r21, 0x06	; 6
    3330:	bc 01       	movw	r22, r24
    3332:	c7 01       	movw	r24, r14
    3334:	49 d8       	rcall	.-3950   	; 0x23c8 <fill_tcp_data_p>
    3336:	5c 01       	movw	r10, r24
    3338:	0f 2e       	mov	r0, r31
    333a:	fb ef       	ldi	r31, 0xFB	; 251
	dtostrf(rtc.year,1,0,year);
    333c:	cf 2e       	mov	r12, r31
    333e:	fd e1       	ldi	r31, 0x1D	; 29
    3340:	df 2e       	mov	r13, r31
    3342:	f0 2d       	mov	r31, r0
    3344:	f6 01       	movw	r30, r12
    3346:	66 81       	ldd	r22, Z+6	; 0x06
    3348:	70 e0       	ldi	r23, 0x00	; 0
    334a:	80 e0       	ldi	r24, 0x00	; 0
    334c:	90 e0       	ldi	r25, 0x00	; 0
    334e:	0e 94 5b 40 	call	0x80b6	; 0x80b6 <__floatunsisf>
    3352:	8e 01       	movw	r16, r28
    3354:	0f 5f       	subi	r16, 0xFF	; 255
    3356:	1f 4f       	sbci	r17, 0xFF	; 255
    3358:	20 e0       	ldi	r18, 0x00	; 0
    335a:	41 e0       	ldi	r20, 0x01	; 1
    335c:	0e 94 d4 43 	call	0x87a8	; 0x87a8 <dtostrf>
	plen=fill_tcp_data(buf,plen,year);
    3360:	a8 01       	movw	r20, r16
    3362:	b5 01       	movw	r22, r10
    3364:	c7 01       	movw	r24, r14
    3366:	5c d8       	rcall	.-3912   	; 0x2420 <fill_tcp_data>
	plen=fill_tcp_data_p(buf,plen,PSTR("></td>"));
    3368:	4f e6       	ldi	r20, 0x6F	; 111
    336a:	56 e0       	ldi	r21, 0x06	; 6
    336c:	bc 01       	movw	r22, r24
    336e:	c7 01       	movw	r24, r14
    3370:	2b d8       	rcall	.-4010   	; 0x23c8 <fill_tcp_data_p>
    3372:	4f e1       	ldi	r20, 0x1F	; 31
	
	plen=fill_tcp_data_p(buf,plen,PSTR("\n<td><form action=/ method=get>\nHour: <input type=text size=12 name=hour value="));
    3374:	56 e0       	ldi	r21, 0x06	; 6
    3376:	bc 01       	movw	r22, r24
    3378:	c7 01       	movw	r24, r14
    337a:	26 d8       	rcall	.-4020   	; 0x23c8 <fill_tcp_data_p>
    337c:	5c 01       	movw	r10, r24
    337e:	f6 01       	movw	r30, r12
    3380:	62 81       	ldd	r22, Z+2	; 0x02
	dtostrf(rtc.hour,1,0,hour);
    3382:	70 e0       	ldi	r23, 0x00	; 0
    3384:	80 e0       	ldi	r24, 0x00	; 0
    3386:	90 e0       	ldi	r25, 0x00	; 0
    3388:	0e 94 5b 40 	call	0x80b6	; 0x80b6 <__floatunsisf>
    338c:	08 5e       	subi	r16, 0xE8	; 232
    338e:	1f 4f       	sbci	r17, 0xFF	; 255
    3390:	20 e0       	ldi	r18, 0x00	; 0
    3392:	41 e0       	ldi	r20, 0x01	; 1
    3394:	0e 94 d4 43 	call	0x87a8	; 0x87a8 <dtostrf>
	plen=fill_tcp_data(buf,plen,hour);
    3398:	a8 01       	movw	r20, r16
    339a:	b5 01       	movw	r22, r10
    339c:	c7 01       	movw	r24, r14
    339e:	40 d8       	rcall	.-3968   	; 0x2420 <fill_tcp_data>
	plen=fill_tcp_data_p(buf,plen,PSTR("></td>\n</tr>"));
    33a0:	42 e1       	ldi	r20, 0x12	; 18
    33a2:	56 e0       	ldi	r21, 0x06	; 6
    33a4:	bc 01       	movw	r22, r24
    33a6:	c7 01       	movw	r24, r14
    33a8:	0f d8       	rcall	.-4066   	; 0x23c8 <fill_tcp_data_p>
    33aa:	4c eb       	ldi	r20, 0xBC	; 188
	
	
	plen=fill_tcp_data_p(buf,plen,PSTR("<tr>\n<td><form action=/ method=get>\nMonth: <input type=text size=12 name=month value="));
    33ac:	55 e0       	ldi	r21, 0x05	; 5
    33ae:	bc 01       	movw	r22, r24
    33b0:	c7 01       	movw	r24, r14
    33b2:	0a d8       	rcall	.-4076   	; 0x23c8 <fill_tcp_data_p>
    33b4:	5c 01       	movw	r10, r24
    33b6:	f6 01       	movw	r30, r12
	dtostrf(rtc.month,1,0,month);
    33b8:	65 81       	ldd	r22, Z+5	; 0x05
    33ba:	70 e0       	ldi	r23, 0x00	; 0
    33bc:	80 e0       	ldi	r24, 0x00	; 0
    33be:	90 e0       	ldi	r25, 0x00	; 0
    33c0:	0e 94 5b 40 	call	0x80b6	; 0x80b6 <__floatunsisf>
    33c4:	00 51       	subi	r16, 0x10	; 16
    33c6:	11 09       	sbc	r17, r1
    33c8:	20 e0       	ldi	r18, 0x00	; 0
    33ca:	41 e0       	ldi	r20, 0x01	; 1
    33cc:	0e 94 d4 43 	call	0x87a8	; 0x87a8 <dtostrf>
    33d0:	a8 01       	movw	r20, r16
	plen=fill_tcp_data(buf,plen,month);
    33d2:	b5 01       	movw	r22, r10
    33d4:	c7 01       	movw	r24, r14
    33d6:	24 d8       	rcall	.-4024   	; 0x2420 <fill_tcp_data>
    33d8:	45 eb       	ldi	r20, 0xB5	; 181
    33da:	55 e0       	ldi	r21, 0x05	; 5
	plen=fill_tcp_data_p(buf,plen,PSTR("></td>"));
    33dc:	bc 01       	movw	r22, r24
    33de:	c7 01       	movw	r24, r14
    33e0:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <fill_tcp_data_p>
    33e4:	44 e6       	ldi	r20, 0x64	; 100
    33e6:	55 e0       	ldi	r21, 0x05	; 5
	
	plen=fill_tcp_data_p(buf,plen,PSTR("\n<td><form action=/ method=get>\nMinute: <input type=text size=12 name=min value="));
    33e8:	bc 01       	movw	r22, r24
    33ea:	c7 01       	movw	r24, r14
    33ec:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <fill_tcp_data_p>
    33f0:	5c 01       	movw	r10, r24
    33f2:	f6 01       	movw	r30, r12
	dtostrf(rtc.min,1,0,minute);
    33f4:	61 81       	ldd	r22, Z+1	; 0x01
    33f6:	70 e0       	ldi	r23, 0x00	; 0
    33f8:	80 e0       	ldi	r24, 0x00	; 0
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	0e 94 5b 40 	call	0x80b6	; 0x80b6 <__floatunsisf>
    3400:	08 5e       	subi	r16, 0xE8	; 232
    3402:	1f 4f       	sbci	r17, 0xFF	; 255
    3404:	20 e0       	ldi	r18, 0x00	; 0
    3406:	41 e0       	ldi	r20, 0x01	; 1
    3408:	0e 94 d4 43 	call	0x87a8	; 0x87a8 <dtostrf>
    340c:	a8 01       	movw	r20, r16
	plen=fill_tcp_data(buf,plen,minute);
    340e:	b5 01       	movw	r22, r10
    3410:	c7 01       	movw	r24, r14
    3412:	06 d8       	rcall	.-4084   	; 0x2420 <fill_tcp_data>
    3414:	47 e5       	ldi	r20, 0x57	; 87
    3416:	55 e0       	ldi	r21, 0x05	; 5
	plen=fill_tcp_data_p(buf,plen,PSTR("></td>\n</tr>"));
    3418:	bc 01       	movw	r22, r24
    341a:	c7 01       	movw	r24, r14
    341c:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <fill_tcp_data_p>
    3420:	45 e0       	ldi	r20, 0x05	; 5
    3422:	55 e0       	ldi	r21, 0x05	; 5
	
	
	plen=fill_tcp_data_p(buf,plen,PSTR("<tr>\n<td><form action=/ method=get>\nDay: <input type=text size=12 name=day value="));
    3424:	bc 01       	movw	r22, r24
    3426:	c7 01       	movw	r24, r14
    3428:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <fill_tcp_data_p>
    342c:	5c 01       	movw	r10, r24
    342e:	f6 01       	movw	r30, r12
    3430:	64 81       	ldd	r22, Z+4	; 0x04
	dtostrf(rtc.date,1,0,day);
    3432:	70 e0       	ldi	r23, 0x00	; 0
    3434:	80 e0       	ldi	r24, 0x00	; 0
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	0e 94 5b 40 	call	0x80b6	; 0x80b6 <__floatunsisf>
    343c:	00 51       	subi	r16, 0x10	; 16
    343e:	11 09       	sbc	r17, r1
    3440:	20 e0       	ldi	r18, 0x00	; 0
    3442:	41 e0       	ldi	r20, 0x01	; 1
    3444:	0e 94 d4 43 	call	0x87a8	; 0x87a8 <dtostrf>
    3448:	a8 01       	movw	r20, r16
    344a:	b5 01       	movw	r22, r10
	plen=fill_tcp_data(buf,plen,day);
    344c:	c7 01       	movw	r24, r14
    344e:	0e 94 10 12 	call	0x2420	; 0x2420 <fill_tcp_data>
    3452:	4e ef       	ldi	r20, 0xFE	; 254
    3454:	54 e0       	ldi	r21, 0x04	; 4
	plen=fill_tcp_data_p(buf,plen,PSTR("></td>"));
    3456:	bc 01       	movw	r22, r24
    3458:	c7 01       	movw	r24, r14
    345a:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <fill_tcp_data_p>
    345e:	4d ea       	ldi	r20, 0xAD	; 173
    3460:	54 e0       	ldi	r21, 0x04	; 4
	//
	plen=fill_tcp_data_p(buf,plen,PSTR("\n<td><form action=/ method=get>\nSecond: <input type=text size=12 name=sec value="));
    3462:	bc 01       	movw	r22, r24
    3464:	c7 01       	movw	r24, r14
    3466:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <fill_tcp_data_p>
    346a:	5c 01       	movw	r10, r24
    346c:	f6 01       	movw	r30, r12
    346e:	60 81       	ld	r22, Z
	dtostrf(rtc.sec,1,0,second);
    3470:	70 e0       	ldi	r23, 0x00	; 0
    3472:	80 e0       	ldi	r24, 0x00	; 0
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	0e 94 5b 40 	call	0x80b6	; 0x80b6 <__floatunsisf>
    347a:	08 5e       	subi	r16, 0xE8	; 232
    347c:	1f 4f       	sbci	r17, 0xFF	; 255
    347e:	20 e0       	ldi	r18, 0x00	; 0
    3480:	41 e0       	ldi	r20, 0x01	; 1
    3482:	0e 94 d4 43 	call	0x87a8	; 0x87a8 <dtostrf>
    3486:	a8 01       	movw	r20, r16
    3488:	b5 01       	movw	r22, r10
	plen=fill_tcp_data(buf,plen,second);
    348a:	c7 01       	movw	r24, r14
    348c:	0e 94 10 12 	call	0x2420	; 0x2420 <fill_tcp_data>
    3490:	40 ea       	ldi	r20, 0xA0	; 160
    3492:	54 e0       	ldi	r21, 0x04	; 4
	plen=fill_tcp_data_p(buf,plen,PSTR("></td>\n</tr>"));
    3494:	bc 01       	movw	r22, r24
    3496:	c7 01       	movw	r24, r14
    3498:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <fill_tcp_data_p>
    349c:	44 e3       	ldi	r20, 0x34	; 52
    349e:	54 e0       	ldi	r21, 0x04	; 4

	//
	plen=fill_tcp_data_p(buf,plen,PSTR("<tr>\n<td class=button colspan=\"2\"><input type=submit value=\"Confirm\" style=\"width:100%\"></td>\n</tr>\n</form>"));
    34a0:	bc 01       	movw	r22, r24
    34a2:	c7 01       	movw	r24, r14
    34a4:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <fill_tcp_data_p>
    34a8:	49 e2       	ldi	r20, 0x29	; 41
    34aa:	54 e0       	ldi	r21, 0x04	; 4
	plen=fill_tcp_data_p(buf,plen,PSTR("\n</table>\n"));
    34ac:	bc 01       	movw	r22, r24
    34ae:	c7 01       	movw	r24, r14
    34b0:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <fill_tcp_data_p>
    34b4:	4d ec       	ldi	r20, 0xCD	; 205
    34b6:	53 e0       	ldi	r21, 0x03	; 3
	plen=fill_tcp_data_p(buf,plen,PSTR("<input type=\"submit\" value=\"Home\" style=\"width:100%\" onclick=\"window.location='/home';\" />\n"));
    34b8:	bc 01       	movw	r22, r24
    34ba:	c7 01       	movw	r24, r14
    34bc:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <fill_tcp_data_p>
    34c0:	45 ea       	ldi	r20, 0xA5	; 165
    34c2:	53 e0       	ldi	r21, 0x03	; 3
	//plen=fill_tcp_data_p(buf,plen,PSTR("<input type=\"submit\" value=\"Information\" style=\"width:100%\" onclick=\"window.location='/';\" />\n</table></form>"));
	//plen=fill_tcp_data_p(buf,plen,PSTR("<tr>\n<td class=button><input type=submit value=\"Confirm\" style=\"width:100%\"></td>\n</tr>\n</table></form>"));
	
	//plen=fill_tcp_data_p(buf,plen,PSTR("\n</form>\n<form action=/ method=get><input type=hidden name=\"rr\" value=\"1\"><td class=button><input type=submit value=\"Reset\" style=\"width:100%\"></td></form>\n</tr>\n</table>"));
	plen=fill_tcp_data_p(buf,plen,PSTR("<br><hr>by Daniels Fi&#353ers</hr></br>"));
    34c4:	bc 01       	movw	r22, r24
    34c6:	c7 01       	movw	r24, r14
    34c8:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <fill_tcp_data_p>
    34cc:	45 e9       	ldi	r20, 0x95	; 149
    34ce:	53 e0       	ldi	r21, 0x03	; 3
	plen=fill_tcp_data_p(buf,plen,PSTR("</div>\n</body>\n"));
    34d0:	bc 01       	movw	r22, r24
    34d2:	c7 01       	movw	r24, r14
    34d4:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <fill_tcp_data_p>
    34d8:	4e e8       	ldi	r20, 0x8E	; 142
    34da:	53 e0       	ldi	r21, 0x03	; 3
	plen=fill_tcp_data_p(buf,plen,PSTR("</pre>"));
    34dc:	bc 01       	movw	r22, r24
    34de:	c7 01       	movw	r24, r14
    34e0:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <fill_tcp_data_p>
    34e4:	bc 01       	movw	r22, r24
    34e6:	80 e0       	ldi	r24, 0x00	; 0

	
	return(plen);
    34e8:	90 e0       	ldi	r25, 0x00	; 0
    34ea:	e0 96       	adiw	r28, 0x30	; 48
    34ec:	0f b6       	in	r0, 0x3f	; 63
}
    34ee:	f8 94       	cli
    34f0:	de bf       	out	0x3e, r29	; 62
    34f2:	0f be       	out	0x3f, r0	; 63
    34f4:	cd bf       	out	0x3d, r28	; 61
    34f6:	df 91       	pop	r29
    34f8:	cf 91       	pop	r28
    34fa:	1f 91       	pop	r17
    34fc:	0f 91       	pop	r16
    34fe:	ff 90       	pop	r15
    3500:	ef 90       	pop	r14
    3502:	df 90       	pop	r13
    3504:	cf 90       	pop	r12
    3506:	bf 90       	pop	r11
    3508:	af 90       	pop	r10
    350a:	08 95       	ret

0000350c <software_reset>:
    350c:	a8 95       	wdr
    350e:	9c e0       	ldi	r25, 0x0C	; 12
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    3510:	88 e1       	ldi	r24, 0x18	; 24
    3512:	0f b6       	in	r0, 0x3f	; 63
    3514:	f8 94       	cli
    3516:	a8 95       	wdr
    3518:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    351c:	0f be       	out	0x3f, r0	; 63
    351e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>

void software_reset()
{
	wdt_reset();
	wdt_enable(WDTO_250MS);
	exit (1);  // loop forever
    3522:	81 e0       	ldi	r24, 0x01	; 1
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	0e 94 8e 4f 	call	0x9f1c	; 0x9f1c <_exit>

0000352a <analyse_get_url>:
}

int restart = 0;

int8_t analyse_get_url(char *str)
{
    352a:	ff 92       	push	r15
    352c:	0f 93       	push	r16
    352e:	1f 93       	push	r17
    3530:	cf 93       	push	r28
    3532:	df 93       	push	r29
    3534:	cd b7       	in	r28, 0x3d	; 61
    3536:	de b7       	in	r29, 0x3e	; 62
    3538:	2a 97       	sbiw	r28, 0x0a	; 10
    353a:	0f b6       	in	r0, 0x3f	; 63
    353c:	f8 94       	cli
    353e:	de bf       	out	0x3e, r29	; 62
    3540:	0f be       	out	0x3f, r0	; 63
    3542:	cd bf       	out	0x3d, r28	; 61
	uint8_t mn=0;
	char kvalstrbuf[10];
	// the first slash:
	if(str[0] == '/' && str[1] == 'r' && str[3] == 'c' && str[4] == ' ')
    3544:	fc 01       	movw	r30, r24
    3546:	20 81       	ld	r18, Z
    3548:	2f 32       	cpi	r18, 0x2F	; 47
    354a:	61 f5       	brne	.+88     	; 0x35a4 <analyse_get_url+0x7a>
    354c:	21 81       	ldd	r18, Z+1	; 0x01
    354e:	22 37       	cpi	r18, 0x72	; 114
    3550:	39 f4       	brne	.+14     	; 0x3560 <analyse_get_url+0x36>
    3552:	33 81       	ldd	r19, Z+3	; 0x03
    3554:	33 36       	cpi	r19, 0x63	; 99
    3556:	71 f4       	brne	.+28     	; 0x3574 <analyse_get_url+0x4a>
    3558:	34 81       	ldd	r19, Z+4	; 0x04
    355a:	30 32       	cpi	r19, 0x20	; 32
    355c:	59 f4       	brne	.+22     	; 0x3574 <analyse_get_url+0x4a>
    355e:	36 c1       	rjmp	.+620    	; 0x37cc <analyse_get_url+0x2a2>
	{
		return (4);
	}
	if(str[0] == '/' && str[1] == 's' && str[8] == 's' && str[9] == ' ')
    3560:	23 37       	cpi	r18, 0x73	; 115
    3562:	41 f4       	brne	.+16     	; 0x3574 <analyse_get_url+0x4a>
    3564:	fc 01       	movw	r30, r24
    3566:	30 85       	ldd	r19, Z+8	; 0x08
    3568:	33 37       	cpi	r19, 0x73	; 115
    356a:	51 f4       	brne	.+20     	; 0x3580 <analyse_get_url+0x56>
    356c:	31 85       	ldd	r19, Z+9	; 0x09
    356e:	30 32       	cpi	r19, 0x20	; 32
    3570:	39 f4       	brne	.+14     	; 0x3580 <analyse_get_url+0x56>
    3572:	2e c1       	rjmp	.+604    	; 0x37d0 <analyse_get_url+0x2a6>
	{
		return (3);
	}
	if ((str[0] == '/' && str[1] == ' ') || (str[0] == '/' && str[1] == 'h')){
    3574:	20 32       	cpi	r18, 0x20	; 32
    3576:	09 f4       	brne	.+2      	; 0x357a <analyse_get_url+0x50>
    3578:	2d c1       	rjmp	.+602    	; 0x37d4 <analyse_get_url+0x2aa>
    357a:	28 36       	cpi	r18, 0x68	; 104
    357c:	09 f4       	brne	.+2      	; 0x3580 <analyse_get_url+0x56>
    357e:	2c c1       	rjmp	.+600    	; 0x37d8 <analyse_get_url+0x2ae>
		// end of url, display just the web page
		return(2);
	}
	if(str[0] == '/' && str[1] == 'r' && str[5] == 't' && str[6] == ' ')
    3580:	22 37       	cpi	r18, 0x72	; 114
    3582:	91 f4       	brne	.+36     	; 0x35a8 <analyse_get_url+0x7e>
    3584:	fc 01       	movw	r30, r24
    3586:	25 81       	ldd	r18, Z+5	; 0x05
    3588:	24 37       	cpi	r18, 0x74	; 116
    358a:	81 f4       	brne	.+32     	; 0x35ac <analyse_get_url+0x82>
    358c:	26 81       	ldd	r18, Z+6	; 0x06
    358e:	20 32       	cpi	r18, 0x20	; 32
    3590:	79 f4       	brne	.+30     	; 0x35b0 <analyse_get_url+0x86>
	{
		restart = 1;
    3592:	21 e0       	ldi	r18, 0x01	; 1
    3594:	30 e0       	ldi	r19, 0x00	; 0
    3596:	30 93 a2 05 	sts	0x05A2, r19	; 0x8005a2 <restart+0x1>
    359a:	20 93 a1 05 	sts	0x05A1, r18	; 0x8005a1 <restart>
		mn = 1;
    359e:	ff 24       	eor	r15, r15
    35a0:	f3 94       	inc	r15
    35a2:	07 c0       	rjmp	.+14     	; 0x35b2 <analyse_get_url+0x88>

int restart = 0;

int8_t analyse_get_url(char *str)
{
	uint8_t mn=0;
    35a4:	f1 2c       	mov	r15, r1
    35a6:	05 c0       	rjmp	.+10     	; 0x35b2 <analyse_get_url+0x88>
    35a8:	f1 2c       	mov	r15, r1
    35aa:	03 c0       	rjmp	.+6      	; 0x35b2 <analyse_get_url+0x88>
    35ac:	f1 2c       	mov	r15, r1
    35ae:	01 c0       	rjmp	.+2      	; 0x35b2 <analyse_get_url+0x88>
    35b0:	f1 2c       	mov	r15, r1
    35b2:	8c 01       	movw	r16, r24
	}
// 	if (find_key_val(str,kvalstrbuf,16,"settings")){
// 		mn = 3;
// 	}
	// str is now something like ?pw=secret&mn=0 or just end of url
	if (find_key_val(str,kvalstrbuf,16,"myip")){
    35b4:	2a e4       	ldi	r18, 0x4A	; 74
    35b6:	31 e0       	ldi	r19, 0x01	; 1
    35b8:	40 e1       	ldi	r20, 0x10	; 16
    35ba:	be 01       	movw	r22, r28
    35bc:	6f 5f       	subi	r22, 0xFF	; 255
    35be:	7f 4f       	sbci	r23, 0xFF	; 255
    35c0:	d3 d2       	rcall	.+1446   	; 0x3b68 <find_key_val>
    35c2:	88 23       	and	r24, r24
    35c4:	59 f0       	breq	.+22     	; 0x35dc <analyse_get_url+0xb2>
		stringToIntArray(myip, kvalstrbuf, (uint8_t*)0x20);
    35c6:	40 e2       	ldi	r20, 0x20	; 32
    35c8:	50 e0       	ldi	r21, 0x00	; 0
    35ca:	be 01       	movw	r22, r28
    35cc:	6f 5f       	subi	r22, 0xFF	; 255
    35ce:	7f 4f       	sbci	r23, 0xFF	; 255
    35d0:	84 e2       	ldi	r24, 0x24	; 36
    35d2:	91 e0       	ldi	r25, 0x01	; 1
    35d4:	0e 94 da 3a 	call	0x75b4	; 0x75b4 <stringToIntArray>
		mn = 1;
    35d8:	ff 24       	eor	r15, r15
    35da:	f3 94       	inc	r15
	}
	if (find_key_val(str,kvalstrbuf,16,"servip")){
    35dc:	2f e4       	ldi	r18, 0x4F	; 79
    35de:	31 e0       	ldi	r19, 0x01	; 1
    35e0:	40 e1       	ldi	r20, 0x10	; 16
    35e2:	be 01       	movw	r22, r28
    35e4:	6f 5f       	subi	r22, 0xFF	; 255
    35e6:	7f 4f       	sbci	r23, 0xFF	; 255
    35e8:	c8 01       	movw	r24, r16
    35ea:	be d2       	rcall	.+1404   	; 0x3b68 <find_key_val>
    35ec:	88 23       	and	r24, r24
    35ee:	89 f0       	breq	.+34     	; 0x3612 <analyse_get_url+0xe8>
		sprintf(serverip, "%s", kvalstrbuf);
    35f0:	be 01       	movw	r22, r28
    35f2:	6f 5f       	subi	r22, 0xFF	; 255
    35f4:	7f 4f       	sbci	r23, 0xFF	; 255
    35f6:	84 e1       	ldi	r24, 0x14	; 20
    35f8:	91 e0       	ldi	r25, 0x01	; 1
    35fa:	0e 94 b0 45 	call	0x8b60	; 0x8b60 <strcpy>
		eeprom_write_block((const void*)kvalstrbuf, (void*)0x30, 16);
    35fe:	40 e1       	ldi	r20, 0x10	; 16
    3600:	50 e0       	ldi	r21, 0x00	; 0
    3602:	60 e3       	ldi	r22, 0x30	; 48
    3604:	70 e0       	ldi	r23, 0x00	; 0
    3606:	ce 01       	movw	r24, r28
    3608:	01 96       	adiw	r24, 0x01	; 1
    360a:	0e 94 6f 4f 	call	0x9ede	; 0x9ede <eeprom_write_block>
		mn = 1;
    360e:	ff 24       	eor	r15, r15
    3610:	f3 94       	inc	r15
	}
	if (find_key_val(str,kvalstrbuf,16,"gwip")){
    3612:	26 e5       	ldi	r18, 0x56	; 86
    3614:	31 e0       	ldi	r19, 0x01	; 1
    3616:	40 e1       	ldi	r20, 0x10	; 16
    3618:	be 01       	movw	r22, r28
    361a:	6f 5f       	subi	r22, 0xFF	; 255
    361c:	7f 4f       	sbci	r23, 0xFF	; 255
    361e:	c8 01       	movw	r24, r16
    3620:	a3 d2       	rcall	.+1350   	; 0x3b68 <find_key_val>
    3622:	88 23       	and	r24, r24
    3624:	59 f0       	breq	.+22     	; 0x363c <analyse_get_url+0x112>
		stringToIntArray(gwip, kvalstrbuf, (uint8_t*)0x40);
    3626:	40 e4       	ldi	r20, 0x40	; 64
    3628:	50 e0       	ldi	r21, 0x00	; 0
    362a:	be 01       	movw	r22, r28
    362c:	6f 5f       	subi	r22, 0xFF	; 255
    362e:	7f 4f       	sbci	r23, 0xFF	; 255
    3630:	8e e0       	ldi	r24, 0x0E	; 14
    3632:	91 e0       	ldi	r25, 0x01	; 1
    3634:	0e 94 da 3a 	call	0x75b4	; 0x75b4 <stringToIntArray>
		mn = 1;
    3638:	ff 24       	eor	r15, r15
    363a:	f3 94       	inc	r15
	}
	if (find_key_val(str,kvalstrbuf,10,"port")){
    363c:	2b e5       	ldi	r18, 0x5B	; 91
    363e:	31 e0       	ldi	r19, 0x01	; 1
    3640:	4a e0       	ldi	r20, 0x0A	; 10
    3642:	be 01       	movw	r22, r28
    3644:	6f 5f       	subi	r22, 0xFF	; 255
    3646:	7f 4f       	sbci	r23, 0xFF	; 255
    3648:	c8 01       	movw	r24, r16
    364a:	8e d2       	rcall	.+1308   	; 0x3b68 <find_key_val>
    364c:	88 23       	and	r24, r24
    364e:	79 f0       	breq	.+30     	; 0x366e <analyse_get_url+0x144>
		SERVERPORT = atoi(kvalstrbuf);
    3650:	ce 01       	movw	r24, r28
    3652:	01 96       	adiw	r24, 0x01	; 1
    3654:	0e 94 74 45 	call	0x8ae8	; 0x8ae8 <atoi>
    3658:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <SERVERPORT+0x1>
    365c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <SERVERPORT>
		eeprom_write_word((uint16_t*)0x70, (uint16_t)SERVERPORT);
    3660:	bc 01       	movw	r22, r24
    3662:	80 e7       	ldi	r24, 0x70	; 112
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	0e 94 8b 4f 	call	0x9f16	; 0x9f16 <eeprom_write_word>
		mn = 1;
    366a:	ff 24       	eor	r15, r15
    366c:	f3 94       	inc	r15
	}
	if (find_key_val(str,kvalstrbuf,10,"timeout")){
    366e:	28 e8       	ldi	r18, 0x88	; 136
    3670:	31 e0       	ldi	r19, 0x01	; 1
    3672:	4a e0       	ldi	r20, 0x0A	; 10
    3674:	be 01       	movw	r22, r28
    3676:	6f 5f       	subi	r22, 0xFF	; 255
    3678:	7f 4f       	sbci	r23, 0xFF	; 255
    367a:	c8 01       	movw	r24, r16
    367c:	75 d2       	rcall	.+1258   	; 0x3b68 <find_key_val>
    367e:	88 23       	and	r24, r24
    3680:	79 f0       	breq	.+30     	; 0x36a0 <analyse_get_url+0x176>
		timeout = atoi(kvalstrbuf);
    3682:	ce 01       	movw	r24, r28
    3684:	01 96       	adiw	r24, 0x01	; 1
    3686:	0e 94 74 45 	call	0x8ae8	; 0x8ae8 <atoi>
    368a:	90 93 0d 1e 	sts	0x1E0D, r25	; 0x801e0d <timeout+0x1>
    368e:	80 93 0c 1e 	sts	0x1E0C, r24	; 0x801e0c <timeout>
		eeprom_write_word((uint16_t*)0x10, (uint16_t)timeout);
    3692:	bc 01       	movw	r22, r24
    3694:	80 e1       	ldi	r24, 0x10	; 16
    3696:	90 e0       	ldi	r25, 0x00	; 0
    3698:	0e 94 8b 4f 	call	0x9f16	; 0x9f16 <eeprom_write_word>
		mn = 1;
    369c:	ff 24       	eor	r15, r15
    369e:	f3 94       	inc	r15
	}
	if (find_key_val(str,kvalstrbuf,10,"hall")){
    36a0:	20 e6       	ldi	r18, 0x60	; 96
    36a2:	31 e0       	ldi	r19, 0x01	; 1
    36a4:	4a e0       	ldi	r20, 0x0A	; 10
    36a6:	be 01       	movw	r22, r28
    36a8:	6f 5f       	subi	r22, 0xFF	; 255
    36aa:	7f 4f       	sbci	r23, 0xFF	; 255
    36ac:	c8 01       	movw	r24, r16
    36ae:	5c d2       	rcall	.+1208   	; 0x3b68 <find_key_val>
    36b0:	88 23       	and	r24, r24
    36b2:	79 f0       	breq	.+30     	; 0x36d2 <analyse_get_url+0x1a8>
		halleff = atoi(kvalstrbuf);
    36b4:	ce 01       	movw	r24, r28
    36b6:	01 96       	adiw	r24, 0x01	; 1
    36b8:	0e 94 74 45 	call	0x8ae8	; 0x8ae8 <atoi>
    36bc:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <halleff+0x1>
    36c0:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <halleff>
		eeprom_write_word((uint16_t*)0x60, (uint16_t)halleff);
    36c4:	bc 01       	movw	r22, r24
    36c6:	80 e6       	ldi	r24, 0x60	; 96
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	0e 94 8b 4f 	call	0x9f16	; 0x9f16 <eeprom_write_word>
		mn = 1;
    36ce:	ff 24       	eor	r15, r15
    36d0:	f3 94       	inc	r15
	}
	if (find_key_val(str,kvalstrbuf,8,"year")){
    36d2:	25 e6       	ldi	r18, 0x65	; 101
    36d4:	31 e0       	ldi	r19, 0x01	; 1
    36d6:	48 e0       	ldi	r20, 0x08	; 8
    36d8:	be 01       	movw	r22, r28
    36da:	6f 5f       	subi	r22, 0xFF	; 255
    36dc:	7f 4f       	sbci	r23, 0xFF	; 255
    36de:	c8 01       	movw	r24, r16
    36e0:	43 d2       	rcall	.+1158   	; 0x3b68 <find_key_val>
    36e2:	88 23       	and	r24, r24
    36e4:	41 f0       	breq	.+16     	; 0x36f6 <analyse_get_url+0x1cc>
		rtc.year = atoi(kvalstrbuf);
    36e6:	ce 01       	movw	r24, r28
    36e8:	01 96       	adiw	r24, 0x01	; 1
    36ea:	0e 94 74 45 	call	0x8ae8	; 0x8ae8 <atoi>
    36ee:	80 93 01 1e 	sts	0x1E01, r24	; 0x801e01 <rtc+0x6>
		mn = 1;
    36f2:	ff 24       	eor	r15, r15
    36f4:	f3 94       	inc	r15
	}
	if (find_key_val(str,kvalstrbuf,8,"month")){
    36f6:	2a e6       	ldi	r18, 0x6A	; 106
    36f8:	31 e0       	ldi	r19, 0x01	; 1
    36fa:	48 e0       	ldi	r20, 0x08	; 8
    36fc:	be 01       	movw	r22, r28
    36fe:	6f 5f       	subi	r22, 0xFF	; 255
    3700:	7f 4f       	sbci	r23, 0xFF	; 255
    3702:	c8 01       	movw	r24, r16
    3704:	31 d2       	rcall	.+1122   	; 0x3b68 <find_key_val>
    3706:	88 23       	and	r24, r24
    3708:	41 f0       	breq	.+16     	; 0x371a <analyse_get_url+0x1f0>
		rtc.month = atoi(kvalstrbuf);
    370a:	ce 01       	movw	r24, r28
    370c:	01 96       	adiw	r24, 0x01	; 1
    370e:	0e 94 74 45 	call	0x8ae8	; 0x8ae8 <atoi>
    3712:	80 93 00 1e 	sts	0x1E00, r24	; 0x801e00 <rtc+0x5>
		mn = 1;
    3716:	ff 24       	eor	r15, r15
	}
	if (find_key_val(str,kvalstrbuf,8,"day")){
    3718:	f3 94       	inc	r15
    371a:	20 e7       	ldi	r18, 0x70	; 112
    371c:	31 e0       	ldi	r19, 0x01	; 1
    371e:	48 e0       	ldi	r20, 0x08	; 8
    3720:	be 01       	movw	r22, r28
    3722:	6f 5f       	subi	r22, 0xFF	; 255
    3724:	7f 4f       	sbci	r23, 0xFF	; 255
    3726:	c8 01       	movw	r24, r16
    3728:	1f d2       	rcall	.+1086   	; 0x3b68 <find_key_val>
    372a:	88 23       	and	r24, r24
    372c:	41 f0       	breq	.+16     	; 0x373e <analyse_get_url+0x214>
		rtc.date = atoi(kvalstrbuf);
    372e:	ce 01       	movw	r24, r28
    3730:	01 96       	adiw	r24, 0x01	; 1
    3732:	0e 94 74 45 	call	0x8ae8	; 0x8ae8 <atoi>
    3736:	80 93 ff 1d 	sts	0x1DFF, r24	; 0x801dff <rtc+0x4>
		mn = 1;
    373a:	ff 24       	eor	r15, r15
	}
	if (find_key_val(str,kvalstrbuf,8,"hour")){
    373c:	f3 94       	inc	r15
    373e:	24 e7       	ldi	r18, 0x74	; 116
    3740:	31 e0       	ldi	r19, 0x01	; 1
    3742:	48 e0       	ldi	r20, 0x08	; 8
    3744:	be 01       	movw	r22, r28
    3746:	6f 5f       	subi	r22, 0xFF	; 255
    3748:	7f 4f       	sbci	r23, 0xFF	; 255
    374a:	c8 01       	movw	r24, r16
    374c:	0d d2       	rcall	.+1050   	; 0x3b68 <find_key_val>
    374e:	88 23       	and	r24, r24
    3750:	41 f0       	breq	.+16     	; 0x3762 <analyse_get_url+0x238>
		rtc.hour = atoi(kvalstrbuf);
    3752:	ce 01       	movw	r24, r28
    3754:	01 96       	adiw	r24, 0x01	; 1
    3756:	0e 94 74 45 	call	0x8ae8	; 0x8ae8 <atoi>
    375a:	80 93 fd 1d 	sts	0x1DFD, r24	; 0x801dfd <rtc+0x2>
		mn = 1;
    375e:	ff 24       	eor	r15, r15
	}
	if (find_key_val(str,kvalstrbuf,8,"min")){
    3760:	f3 94       	inc	r15
    3762:	29 e7       	ldi	r18, 0x79	; 121
    3764:	31 e0       	ldi	r19, 0x01	; 1
    3766:	48 e0       	ldi	r20, 0x08	; 8
    3768:	be 01       	movw	r22, r28
    376a:	6f 5f       	subi	r22, 0xFF	; 255
    376c:	7f 4f       	sbci	r23, 0xFF	; 255
    376e:	c8 01       	movw	r24, r16
    3770:	fb d1       	rcall	.+1014   	; 0x3b68 <find_key_val>
    3772:	88 23       	and	r24, r24
    3774:	89 f0       	breq	.+34     	; 0x3798 <analyse_get_url+0x26e>
		rtc.min = atoi(kvalstrbuf);
    3776:	ce 01       	movw	r24, r28
    3778:	01 96       	adiw	r24, 0x01	; 1
    377a:	0e 94 74 45 	call	0x8ae8	; 0x8ae8 <atoi>
    377e:	80 93 fc 1d 	sts	0x1DFC, r24	; 0x801dfc <rtc+0x1>
		mn = 1;
	}
	if (find_key_val(str,kvalstrbuf,8,"sec")){
    3782:	2d e7       	ldi	r18, 0x7D	; 125
    3784:	31 e0       	ldi	r19, 0x01	; 1
    3786:	48 e0       	ldi	r20, 0x08	; 8
    3788:	be 01       	movw	r22, r28
    378a:	6f 5f       	subi	r22, 0xFF	; 255
    378c:	7f 4f       	sbci	r23, 0xFF	; 255
    378e:	c8 01       	movw	r24, r16
    3790:	eb d1       	rcall	.+982    	; 0x3b68 <find_key_val>
    3792:	81 11       	cpse	r24, r1
    3794:	0b c0       	rjmp	.+22     	; 0x37ac <analyse_get_url+0x282>
    3796:	14 c0       	rjmp	.+40     	; 0x37c0 <analyse_get_url+0x296>
    3798:	2d e7       	ldi	r18, 0x7D	; 125
    379a:	31 e0       	ldi	r19, 0x01	; 1
    379c:	48 e0       	ldi	r20, 0x08	; 8
    379e:	be 01       	movw	r22, r28
    37a0:	6f 5f       	subi	r22, 0xFF	; 255
    37a2:	7f 4f       	sbci	r23, 0xFF	; 255
    37a4:	c8 01       	movw	r24, r16
    37a6:	e0 d1       	rcall	.+960    	; 0x3b68 <find_key_val>
    37a8:	88 23       	and	r24, r24
    37aa:	39 f0       	breq	.+14     	; 0x37ba <analyse_get_url+0x290>
		rtc.sec = atoi(kvalstrbuf);
    37ac:	ce 01       	movw	r24, r28
    37ae:	01 96       	adiw	r24, 0x01	; 1
    37b0:	0e 94 74 45 	call	0x8ae8	; 0x8ae8 <atoi>
    37b4:	80 93 fb 1d 	sts	0x1DFB, r24	; 0x801dfb <rtc>
    37b8:	03 c0       	rjmp	.+6      	; 0x37c0 <analyse_get_url+0x296>
		mn = 1;
	}
	if(mn == 1)
    37ba:	f1 e0       	ldi	r31, 0x01	; 1
    37bc:	ff 12       	cpse	r15, r31
    37be:	0e c0       	rjmp	.+28     	; 0x37dc <analyse_get_url+0x2b2>
	{
		RTC_SetDateTime(&rtc);
    37c0:	8b ef       	ldi	r24, 0xFB	; 251
    37c2:	9d e1       	ldi	r25, 0x1D	; 29
    37c4:	0e 94 e8 35 	call	0x6bd0	; 0x6bd0 <RTC_SetDateTime>
		return(1);
    37c8:	81 e0       	ldi	r24, 0x01	; 1
    37ca:	09 c0       	rjmp	.+18     	; 0x37de <analyse_get_url+0x2b4>
	uint8_t mn=0;
	char kvalstrbuf[10];
	// the first slash:
	if(str[0] == '/' && str[1] == 'r' && str[3] == 'c' && str[4] == ' ')
	{
		return (4);
    37cc:	84 e0       	ldi	r24, 0x04	; 4
    37ce:	07 c0       	rjmp	.+14     	; 0x37de <analyse_get_url+0x2b4>
	}
	if(str[0] == '/' && str[1] == 's' && str[8] == 's' && str[9] == ' ')
	{
		return (3);
    37d0:	83 e0       	ldi	r24, 0x03	; 3
    37d2:	05 c0       	rjmp	.+10     	; 0x37de <analyse_get_url+0x2b4>
	}
	if ((str[0] == '/' && str[1] == ' ') || (str[0] == '/' && str[1] == 'h')){
		// end of url, display just the web page
		return(2);
    37d4:	82 e0       	ldi	r24, 0x02	; 2
    37d6:	03 c0       	rjmp	.+6      	; 0x37de <analyse_get_url+0x2b4>
    37d8:	82 e0       	ldi	r24, 0x02	; 2
    37da:	01 c0       	rjmp	.+2      	; 0x37de <analyse_get_url+0x2b4>
	{
		RTC_SetDateTime(&rtc);
		return(1);
	}
	// browsers looking for /favion.ico, non existing pages etc...
	return(-1);
    37dc:	8f ef       	ldi	r24, 0xFF	; 255
}
    37de:	2a 96       	adiw	r28, 0x0a	; 10
    37e0:	0f b6       	in	r0, 0x3f	; 63
    37e2:	f8 94       	cli
    37e4:	de bf       	out	0x3e, r29	; 62
    37e6:	0f be       	out	0x3f, r0	; 63
    37e8:	cd bf       	out	0x3d, r28	; 61
    37ea:	df 91       	pop	r29
    37ec:	cf 91       	pop	r28
    37ee:	1f 91       	pop	r17
    37f0:	0f 91       	pop	r16
    37f2:	ff 90       	pop	r15
    37f4:	08 95       	ret

000037f6 <Ether_SendPacket>:

void Ether_SendPacket(char* text){
    37f6:	cf 92       	push	r12
    37f8:	df 92       	push	r13
    37fa:	ef 92       	push	r14
    37fc:	ff 92       	push	r15
    37fe:	0f 93       	push	r16
    3800:	1f 93       	push	r17
    3802:	cf 93       	push	r28
    3804:	df 93       	push	r29
    3806:	cd b7       	in	r28, 0x3d	; 61
    3808:	de b7       	in	r29, 0x3e	; 62
    380a:	60 97       	sbiw	r28, 0x10	; 16
    380c:	0f b6       	in	r0, 0x3f	; 63
    380e:	f8 94       	cli
    3810:	de bf       	out	0x3e, r29	; 62
    3812:	0f be       	out	0x3f, r0	; 63
    3814:	cd bf       	out	0x3d, r28	; 61
	uint16_t dat_p,plen;
	
	if(sec > timeout)
    3816:	20 91 a7 05 	lds	r18, 0x05A7	; 0x8005a7 <sec>
    381a:	30 e0       	ldi	r19, 0x00	; 0
    381c:	40 91 0c 1e 	lds	r20, 0x1E0C	; 0x801e0c <timeout>
    3820:	50 91 0d 1e 	lds	r21, 0x1E0D	; 0x801e0d <timeout+0x1>
    3824:	42 17       	cp	r20, r18
    3826:	53 07       	cpc	r21, r19
    3828:	30 f4       	brcc	.+12     	; 0x3836 <Ether_SendPacket+0x40>
	{
		sendingPacket = 0;
    382a:	10 92 a5 05 	sts	0x05A5, r1	; 0x8005a5 <sendingPacket>
		start_web_client = 1;
    382e:	81 e0       	ldi	r24, 0x01	; 1
    3830:	80 93 a4 05 	sts	0x05A4, r24	; 0x8005a4 <start_web_client>
		return;
    3834:	14 c1       	rjmp	.+552    	; 0x3a5e <Ether_SendPacket+0x268>
    3836:	7c 01       	movw	r14, r24
	}
	cli();
    3838:	f8 94       	cli
	sendingPacket = 1;
    383a:	81 e0       	ldi	r24, 0x01	; 1
    383c:	80 93 a5 05 	sts	0x05A5, r24	; 0x8005a5 <sendingPacket>
	plen=enc28j60PacketReceive(BUFFER_SIZE, buf);
    3840:	68 ea       	ldi	r22, 0xA8	; 168
    3842:	75 e0       	ldi	r23, 0x05	; 5
    3844:	88 e8       	ldi	r24, 0x88	; 136
    3846:	93 e1       	ldi	r25, 0x13	; 19
    3848:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <enc28j60PacketReceive>
    384c:	8c 01       	movw	r16, r24
	buf[BUFFER_SIZE]='\0';
    384e:	10 92 30 19 	sts	0x1930, r1	; 0x801930 <buf+0x1388>
	dat_p=packetloop_arp_icmp_tcp(buf,plen);
    3852:	bc 01       	movw	r22, r24
    3854:	88 ea       	ldi	r24, 0xA8	; 168
    3856:	95 e0       	ldi	r25, 0x05	; 5
    3858:	cd d8       	rcall	.-3686   	; 0x29f4 <packetloop_arp_icmp_tcp>
    385a:	6c 01       	movw	r12, r24
	if(plen == 0){
    385c:	01 15       	cp	r16, r1
    385e:	11 05       	cpc	r17, r1
    3860:	a9 f4       	brne	.+42     	; 0x388c <Ether_SendPacket+0x96>
		if(start_web_client == 1)
    3862:	80 91 a4 05 	lds	r24, 0x05A4	; 0x8005a4 <start_web_client>
    3866:	81 30       	cpi	r24, 0x01	; 1
    3868:	89 f4       	brne	.+34     	; 0x388c <Ether_SendPacket+0x96>
		{
			sec = 0;
    386a:	10 92 a7 05 	sts	0x05A7, r1	; 0x8005a7 <sec>
			start_web_client = 0;
    386e:	10 92 a4 05 	sts	0x05A4, r1	; 0x8005a4 <start_web_client>
			client_tcpSend(text,&browserresult_callback,otherside_www_ip,gwmac,SERVERPORT);
    3872:	00 91 12 01 	lds	r16, 0x0112	; 0x800112 <SERVERPORT>
    3876:	10 91 13 01 	lds	r17, 0x0113	; 0x800113 <SERVERPORT+0x1>
    387a:	25 e3       	ldi	r18, 0x35	; 53
    387c:	39 e1       	ldi	r19, 0x19	; 25
    387e:	41 e3       	ldi	r20, 0x31	; 49
    3880:	59 e1       	ldi	r21, 0x19	; 25
    3882:	6f e0       	ldi	r22, 0x0F	; 15
    3884:	77 e1       	ldi	r23, 0x17	; 23
    3886:	c7 01       	movw	r24, r14
    3888:	7f d8       	rcall	.-3842   	; 0x2988 <client_tcpSend>
			//client_http_post(PSTR("/api/statuses/update.xml"),"",PSTR("192.168.0.100"),NULL,text,&browserresult_callback,otherside_www_ip,gwmac);
			return;
    388a:	e9 c0       	rjmp	.+466    	; 0x3a5e <Ether_SendPacket+0x268>
			//
			
		}
	}
	sei();
    388c:	78 94       	sei
	if(dat_p==0){ // plen!=0
    388e:	c1 14       	cp	r12, r1
    3890:	d1 04       	cpc	r13, r1
    3892:	31 f4       	brne	.+12     	; 0x38a0 <Ether_SendPacket+0xaa>
		                         // check for incomming messages not processed
		                         // as part of packetloop_arp_icmp_tcp, e.g udp messages
		                         udp_client_check_for_dns_answer(buf,plen);
    3894:	b8 01       	movw	r22, r16
    3896:	88 ea       	ldi	r24, 0xA8	; 168
    3898:	95 e0       	ldi	r25, 0x05	; 5
    389a:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <udp_client_check_for_dns_answer>
		                         return;
    389e:	df c0       	rjmp	.+446    	; 0x3a5e <Ether_SendPacket+0x268>
		                 }
		if (strncmp("POST / timeout",(char *)&(buf[dat_p]),14)==0){
    38a0:	86 01       	movw	r16, r12
    38a2:	08 55       	subi	r16, 0x58	; 88
    38a4:	1a 4f       	sbci	r17, 0xFA	; 250
    38a6:	4e e0       	ldi	r20, 0x0E	; 14
    38a8:	50 e0       	ldi	r21, 0x00	; 0
    38aa:	b8 01       	movw	r22, r16
    38ac:	81 e8       	ldi	r24, 0x81	; 129
    38ae:	91 e0       	ldi	r25, 0x01	; 1
    38b0:	0e 94 b7 45 	call	0x8b6e	; 0x8b6e <strncmp>
    38b4:	89 2b       	or	r24, r25
    38b6:	d9 f4       	brne	.+54     	; 0x38ee <Ether_SendPacket+0xf8>
			sscanf((char *)&(buf[dat_p]), "POST / timeout %d", &timeout);
    38b8:	8c e0       	ldi	r24, 0x0C	; 12
    38ba:	9e e1       	ldi	r25, 0x1E	; 30
    38bc:	9f 93       	push	r25
    38be:	8f 93       	push	r24
    38c0:	80 e9       	ldi	r24, 0x90	; 144
    38c2:	91 e0       	ldi	r25, 0x01	; 1
    38c4:	9f 93       	push	r25
    38c6:	8f 93       	push	r24
    38c8:	1f 93       	push	r17
    38ca:	0f 93       	push	r16
    38cc:	0e 94 34 47 	call	0x8e68	; 0x8e68 <sscanf>
			eeprom_write_word((uint16_t*)0x10, (uint16_t)timeout);
    38d0:	60 91 0c 1e 	lds	r22, 0x1E0C	; 0x801e0c <timeout>
    38d4:	70 91 0d 1e 	lds	r23, 0x1E0D	; 0x801e0d <timeout+0x1>
    38d8:	80 e1       	ldi	r24, 0x10	; 16
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	0e 94 8b 4f 	call	0x9f16	; 0x9f16 <eeprom_write_word>
    38e0:	0f 90       	pop	r0
    38e2:	0f 90       	pop	r0
    38e4:	0f 90       	pop	r0
    38e6:	0f 90       	pop	r0
    38e8:	0f 90       	pop	r0
    38ea:	0f 90       	pop	r0
    38ec:	32 c0       	rjmp	.+100    	; 0x3952 <Ether_SendPacket+0x15c>
		}
		else if (strncmp("POST / setrtc",(char *)&(buf[dat_p]),13)==0){
    38ee:	4d e0       	ldi	r20, 0x0D	; 13
    38f0:	50 e0       	ldi	r21, 0x00	; 0
    38f2:	b8 01       	movw	r22, r16
    38f4:	82 ea       	ldi	r24, 0xA2	; 162
    38f6:	91 e0       	ldi	r25, 0x01	; 1
    38f8:	0e 94 b7 45 	call	0x8b6e	; 0x8b6e <strncmp>
    38fc:	89 2b       	or	r24, r25
    38fe:	49 f5       	brne	.+82     	; 0x3952 <Ether_SendPacket+0x15c>
			//rtc_t tempRtc;
			sscanf((char *)&(buf[dat_p]), "POST / setrtc %"SCNu8"/%"SCNu8"/%"SCNu8" %"SCNu8"/%"SCNu8"/%"SCNu8, &rtc.date, &rtc.month, &rtc.year, &rtc.hour, &rtc.min, &rtc.sec);
    3900:	8b ef       	ldi	r24, 0xFB	; 251
    3902:	9d e1       	ldi	r25, 0x1D	; 29
    3904:	9f 93       	push	r25
    3906:	8f 93       	push	r24
    3908:	8c ef       	ldi	r24, 0xFC	; 252
    390a:	9d e1       	ldi	r25, 0x1D	; 29
    390c:	9f 93       	push	r25
    390e:	8f 93       	push	r24
    3910:	8d ef       	ldi	r24, 0xFD	; 253
    3912:	9d e1       	ldi	r25, 0x1D	; 29
    3914:	9f 93       	push	r25
    3916:	8f 93       	push	r24
    3918:	81 e0       	ldi	r24, 0x01	; 1
    391a:	9e e1       	ldi	r25, 0x1E	; 30
    391c:	9f 93       	push	r25
    391e:	8f 93       	push	r24
    3920:	80 e0       	ldi	r24, 0x00	; 0
    3922:	9e e1       	ldi	r25, 0x1E	; 30
    3924:	9f 93       	push	r25
    3926:	8f 93       	push	r24
    3928:	8f ef       	ldi	r24, 0xFF	; 255
    392a:	9d e1       	ldi	r25, 0x1D	; 29
    392c:	9f 93       	push	r25
    392e:	8f 93       	push	r24
    3930:	80 eb       	ldi	r24, 0xB0	; 176
    3932:	91 e0       	ldi	r25, 0x01	; 1
    3934:	9f 93       	push	r25
    3936:	8f 93       	push	r24
    3938:	1f 93       	push	r17
    393a:	0f 93       	push	r16
    393c:	0e 94 34 47 	call	0x8e68	; 0x8e68 <sscanf>
			RTC_SetDateTime(&rtc);
    3940:	8b ef       	ldi	r24, 0xFB	; 251
    3942:	9d e1       	ldi	r25, 0x1D	; 29
    3944:	0e 94 e8 35 	call	0x6bd0	; 0x6bd0 <RTC_SetDateTime>
    3948:	0f b6       	in	r0, 0x3f	; 63
    394a:	f8 94       	cli
    394c:	de bf       	out	0x3e, r29	; 62
    394e:	0f be       	out	0x3f, r0	; 63
    3950:	cd bf       	out	0x3d, r28	; 61
		}
		if (strncmp("GET ",(char *)&(buf[dat_p]),4)!=0){
    3952:	44 e0       	ldi	r20, 0x04	; 4
    3954:	50 e0       	ldi	r21, 0x00	; 0
    3956:	b8 01       	movw	r22, r16
    3958:	8c ed       	ldi	r24, 0xDC	; 220
    395a:	91 e0       	ldi	r25, 0x01	; 1
    395c:	0e 94 b7 45 	call	0x8b6e	; 0x8b6e <strncmp>
    3960:	89 2b       	or	r24, r25
    3962:	51 f0       	breq	.+20     	; 0x3978 <Ether_SendPacket+0x182>
			//head, post and other methods:
						                         
				//for possible status codes see:
				///http:www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
				dat_p=http200ok();
    3964:	97 da       	rcall	.-2770   	; 0x2e94 <http200ok>
				dat_p=fill_tcp_data_p(buf,dat_p,PSTR("<h1>200 OK</h1>"));
    3966:	4e e7       	ldi	r20, 0x7E	; 126
    3968:	53 e0       	ldi	r21, 0x03	; 3
    396a:	bc 01       	movw	r22, r24
    396c:	88 ea       	ldi	r24, 0xA8	; 168
    396e:	95 e0       	ldi	r25, 0x05	; 5
    3970:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <fill_tcp_data_p>
    3974:	bc 01       	movw	r22, r24
				goto SENDTCP;
    3976:	6f c0       	rjmp	.+222    	; 0x3a56 <Ether_SendPacket+0x260>
		}
		int8_t cmd = analyse_get_url((char *)&(buf[dat_p+4]));
    3978:	c6 01       	movw	r24, r12
    397a:	84 55       	subi	r24, 0x54	; 84
    397c:	9a 4f       	sbci	r25, 0xFA	; 250
    397e:	d5 dd       	rcall	.-1110   	; 0x352a <analyse_get_url>
		if (cmd==-1){
    3980:	8f 3f       	cpi	r24, 0xFF	; 255
    3982:	51 f4       	brne	.+20     	; 0x3998 <Ether_SendPacket+0x1a2>
			dat_p=fill_tcp_data_p(buf,0,PSTR("HTTP/1.0 401 Unauthorized\r\nContent-Type: text/html\r\n\r\n<h1>401 Unauthorized</h1>"));
    3984:	4e e2       	ldi	r20, 0x2E	; 46
    3986:	53 e0       	ldi	r21, 0x03	; 3
    3988:	60 e0       	ldi	r22, 0x00	; 0
    398a:	70 e0       	ldi	r23, 0x00	; 0
    398c:	88 ea       	ldi	r24, 0xA8	; 168
    398e:	95 e0       	ldi	r25, 0x05	; 5
    3990:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <fill_tcp_data_p>
    3994:	bc 01       	movw	r22, r24
			goto SENDTCP;
    3996:	5f c0       	rjmp	.+190    	; 0x3a56 <Ether_SendPacket+0x260>
		}
		if(cmd == 1)
    3998:	81 30       	cpi	r24, 0x01	; 1
    399a:	09 f0       	breq	.+2      	; 0x399e <Ether_SendPacket+0x1a8>
    399c:	43 c0       	rjmp	.+134    	; 0x3a24 <Ether_SendPacket+0x22e>
		{
			char charMyIP[16];
			sprintf(charMyIP, "%d.%d.%d.%d", myip[0], myip[1], myip[2], myip[3]);
    399e:	e4 e2       	ldi	r30, 0x24	; 36
    39a0:	f1 e0       	ldi	r31, 0x01	; 1
    39a2:	83 81       	ldd	r24, Z+3	; 0x03
    39a4:	1f 92       	push	r1
    39a6:	8f 93       	push	r24
    39a8:	82 81       	ldd	r24, Z+2	; 0x02
    39aa:	1f 92       	push	r1
    39ac:	8f 93       	push	r24
    39ae:	81 81       	ldd	r24, Z+1	; 0x01
    39b0:	1f 92       	push	r1
    39b2:	8f 93       	push	r24
    39b4:	80 81       	ld	r24, Z
    39b6:	1f 92       	push	r1
    39b8:	8f 93       	push	r24
    39ba:	8e e3       	ldi	r24, 0x3E	; 62
    39bc:	91 e0       	ldi	r25, 0x01	; 1
    39be:	9f 93       	push	r25
    39c0:	8f 93       	push	r24
    39c2:	8e 01       	movw	r16, r28
    39c4:	0f 5f       	subi	r16, 0xFF	; 255
    39c6:	1f 4f       	sbci	r17, 0xFF	; 255
    39c8:	1f 93       	push	r17
    39ca:	0f 93       	push	r16
    39cc:	0e 94 06 47 	call	0x8e0c	; 0x8e0c <sprintf>
			dat_p=http200ok();
    39d0:	61 da       	rcall	.-2878   	; 0x2e94 <http200ok>
			dat_p=fill_tcp_data_p(buf,dat_p,PSTR("<pre>\n"));
    39d2:	47 e2       	ldi	r20, 0x27	; 39
    39d4:	53 e0       	ldi	r21, 0x03	; 3
    39d6:	bc 01       	movw	r22, r24
    39d8:	88 ea       	ldi	r24, 0xA8	; 168
    39da:	95 e0       	ldi	r25, 0x05	; 5
    39dc:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <fill_tcp_data_p>
			dat_p=fill_tcp_data_p(buf,dat_p,PSTR("<script type=text/javascript>\n"));
    39e0:	48 e0       	ldi	r20, 0x08	; 8
    39e2:	53 e0       	ldi	r21, 0x03	; 3
    39e4:	bc 01       	movw	r22, r24
    39e6:	88 ea       	ldi	r24, 0xA8	; 168
    39e8:	95 e0       	ldi	r25, 0x05	; 5
    39ea:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <fill_tcp_data_p>
			dat_p=fill_tcp_data_p(buf,dat_p,PSTR("location.href = 'http://"));
    39ee:	4f ee       	ldi	r20, 0xEF	; 239
    39f0:	52 e0       	ldi	r21, 0x02	; 2
    39f2:	bc 01       	movw	r22, r24
    39f4:	88 ea       	ldi	r24, 0xA8	; 168
    39f6:	95 e0       	ldi	r25, 0x05	; 5
    39f8:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <fill_tcp_data_p>
			dat_p=fill_tcp_data(buf,dat_p,charMyIP);
    39fc:	a8 01       	movw	r20, r16
    39fe:	bc 01       	movw	r22, r24
    3a00:	88 ea       	ldi	r24, 0xA8	; 168
    3a02:	95 e0       	ldi	r25, 0x05	; 5
    3a04:	0e 94 10 12 	call	0x2420	; 0x2420 <fill_tcp_data>
			dat_p=fill_tcp_data_p(buf,dat_p,PSTR("/home';\n</script>\n"));
    3a08:	4c ed       	ldi	r20, 0xDC	; 220
    3a0a:	52 e0       	ldi	r21, 0x02	; 2
    3a0c:	bc 01       	movw	r22, r24
    3a0e:	88 ea       	ldi	r24, 0xA8	; 168
    3a10:	95 e0       	ldi	r25, 0x05	; 5
    3a12:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <fill_tcp_data_p>
    3a16:	bc 01       	movw	r22, r24
    3a18:	0f b6       	in	r0, 0x3f	; 63
    3a1a:	f8 94       	cli
    3a1c:	de bf       	out	0x3e, r29	; 62
    3a1e:	0f be       	out	0x3f, r0	; 63
    3a20:	cd bf       	out	0x3d, r28	; 61
			goto SENDTCP;
		}
		if(cmd == 3)
    3a22:	19 c0       	rjmp	.+50     	; 0x3a56 <Ether_SendPacket+0x260>
    3a24:	83 30       	cpi	r24, 0x03	; 3
		{
			dat_p=http200ok();
    3a26:	29 f4       	brne	.+10     	; 0x3a32 <Ether_SendPacket+0x23c>
			dat_p=print_settings(buf);
    3a28:	35 da       	rcall	.-2966   	; 0x2e94 <http200ok>
    3a2a:	88 ea       	ldi	r24, 0xA8	; 168
    3a2c:	95 e0       	ldi	r25, 0x05	; 5
			goto SENDTCP;
    3a2e:	00 db       	rcall	.-2560   	; 0x3030 <print_settings>
		}
		if(cmd == 4)
    3a30:	12 c0       	rjmp	.+36     	; 0x3a56 <Ether_SendPacket+0x260>
		{
			dat_p=http200ok();
    3a32:	84 30       	cpi	r24, 0x04	; 4
			dat_p=print_rtc(buf);
    3a34:	29 f4       	brne	.+10     	; 0x3a40 <Ether_SendPacket+0x24a>
    3a36:	2e da       	rcall	.-2980   	; 0x2e94 <http200ok>
    3a38:	88 ea       	ldi	r24, 0xA8	; 168
			goto SENDTCP;
    3a3a:	95 e0       	ldi	r25, 0x05	; 5
		}
		dat_p=http200ok();
    3a3c:	2c dc       	rcall	.-1960   	; 0x3296 <print_rtc>
    3a3e:	0b c0       	rjmp	.+22     	; 0x3a56 <Ether_SendPacket+0x260>
		dat_p=print_webpage(buf);
    3a40:	29 da       	rcall	.-2990   	; 0x2e94 <http200ok>
    3a42:	88 ea       	ldi	r24, 0xA8	; 168
    3a44:	95 e0       	ldi	r25, 0x05	; 5
		if(restart) software_reset();
    3a46:	2e da       	rcall	.-2980   	; 0x2ea4 <print_webpage>
    3a48:	80 91 a1 05 	lds	r24, 0x05A1	; 0x8005a1 <restart>
    3a4c:	90 91 a2 05 	lds	r25, 0x05A2	; 0x8005a2 <restart+0x1>
    3a50:	89 2b       	or	r24, r25
    3a52:	09 f0       	breq	.+2      	; 0x3a56 <Ether_SendPacket+0x260>
    3a54:	5b dd       	rcall	.-1354   	; 0x350c <software_reset>
		goto SENDTCP;
						                 
	SENDTCP:
				www_server_reply(buf,dat_p);
    3a56:	88 ea       	ldi	r24, 0xA8	; 168
    3a58:	95 e0       	ldi	r25, 0x05	; 5
    3a5a:	0e 94 80 13 	call	0x2700	; 0x2700 <www_server_reply>
}
    3a5e:	60 96       	adiw	r28, 0x10	; 16
    3a60:	0f b6       	in	r0, 0x3f	; 63
    3a62:	f8 94       	cli
    3a64:	de bf       	out	0x3e, r29	; 62
    3a66:	0f be       	out	0x3f, r0	; 63
    3a68:	cd bf       	out	0x3d, r28	; 61
    3a6a:	df 91       	pop	r29
    3a6c:	cf 91       	pop	r28
    3a6e:	1f 91       	pop	r17
    3a70:	0f 91       	pop	r16
    3a72:	ff 90       	pop	r15
    3a74:	ef 90       	pop	r14
    3a76:	df 90       	pop	r13
    3a78:	cf 90       	pop	r12
    3a7a:	08 95       	ret

00003a7c <Ether_init>:


void Ether_init()
{
    3a7c:	cf 93       	push	r28
    3a7e:	df 93       	push	r29
	 // full external speed)
	 // set the clock prescaler. First write CLKPCE to enable setting
	 // of clock the next four instructions.
	 // Note that the CKDIV8 Fuse determines the initial
	 // value of the CKKPS bits.
	 CLKPR=(1<<CLKPCE); // change enable
    3a80:	e1 e6       	ldi	r30, 0x61	; 97
    3a82:	f0 e0       	ldi	r31, 0x00	; 0
    3a84:	80 e8       	ldi	r24, 0x80	; 128
    3a86:	80 83       	st	Z, r24
	 CLKPR=0; // "no pre-scaler"
    3a88:	10 82       	st	Z, r1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3a8a:	c0 e0       	ldi	r28, 0x00	; 0
    3a8c:	8c 2f       	mov	r24, r28
    3a8e:	8a 95       	dec	r24
    3a90:	f1 f7       	brne	.-4      	; 0x3a8e <Ether_init+0x12>
	 _delay_loop_1(0); // 60us

	 /*initialize enc28j60*/
	 enc28j60Init(mymac);
    3a92:	88 e2       	ldi	r24, 0x28	; 40
    3a94:	91 e0       	ldi	r25, 0x01	; 1
    3a96:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <enc28j60Init>
	 enc28j60clkout(1); // change clkout from 6.25MHz to 12.5MHz
    3a9a:	81 e0       	ldi	r24, 0x01	; 1
    3a9c:	0e 94 76 0e 	call	0x1cec	; 0x1cec <enc28j60clkout>
    3aa0:	ca 95       	dec	r28
    3aa2:	f1 f7       	brne	.-4      	; 0x3aa0 <Ether_init+0x24>
	 _delay_loop_1(0); // 60us

	 init_cnt2();
    3aa4:	cb d9       	rcall	.-3178   	; 0x2e3c <init_cnt2>
	 sei();
    3aa6:	78 94       	sei
	 /* Magjack leds configuration, see enc28j60 datasheet, page 11 */
	 // LEDB=yellow LEDA=green
	 //
	 // 0x476 is PHLCON LEDA=links status, LEDB=receive/transmit
	 // enc28j60PhyWrite(PHLCON,0b0000 0100 0111 01 10);
	 enc28j60PhyWrite(PHLCON,0x476);
    3aa8:	66 e7       	ldi	r22, 0x76	; 118
    3aaa:	74 e0       	ldi	r23, 0x04	; 4
    3aac:	84 e1       	ldi	r24, 0x14	; 20
    3aae:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <enc28j60PhyWrite>

	 
	 //init the web server ethernet/ip layer:
	 init_udp_or_www_server(mymac,myip);
    3ab2:	64 e2       	ldi	r22, 0x24	; 36
    3ab4:	71 e0       	ldi	r23, 0x01	; 1
    3ab6:	88 e2       	ldi	r24, 0x28	; 40
    3ab8:	91 e0       	ldi	r25, 0x01	; 1
    3aba:	0e 94 33 13 	call	0x2666	; 0x2666 <init_udp_or_www_server>
	 www_server_port(MYWWWPORT);
    3abe:	80 e5       	ldi	r24, 0x50	; 80
    3ac0:	90 e0       	ldi	r25, 0x00	; 0
    3ac2:	0e 94 47 13 	call	0x268e	; 0x268e <www_server_port>

	 get_mac_with_arp(gwip,TRANS_NUM_GWMAC,&arpresolver_result_callback);
    3ac6:	40 e1       	ldi	r20, 0x10	; 16
    3ac8:	57 e1       	ldi	r21, 0x17	; 23
    3aca:	61 e0       	ldi	r22, 0x01	; 1
    3acc:	8e e0       	ldi	r24, 0x0E	; 14
    3ace:	91 e0       	ldi	r25, 0x01	; 1
    3ad0:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <get_mac_with_arp>
	 sec = 0;
    3ad4:	10 92 a7 05 	sts	0x05A7, r1	; 0x8005a7 <sec>
	 while(get_mac_with_arp_wait()){
    3ad8:	13 c0       	rjmp	.+38     	; 0x3b00 <Ether_init+0x84>
		 if(sec > 10)
    3ada:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <sec>
    3ade:	8b 30       	cpi	r24, 0x0B	; 11
    3ae0:	20 f0       	brcs	.+8      	; 0x3aea <Ether_init+0x6e>
		 {
			 processing_state=4;
    3ae2:	84 e0       	ldi	r24, 0x04	; 4
    3ae4:	80 93 a3 05 	sts	0x05A3, r24	; 0x8005a3 <processing_state>
			 break;
    3ae8:	0f c0       	rjmp	.+30     	; 0x3b08 <Ether_init+0x8c>
		 }
		 // to process the ARP reply we must call the packetloop
		 plen=enc28j60PacketReceive(BUFFER_SIZE, buf);
    3aea:	68 ea       	ldi	r22, 0xA8	; 168
    3aec:	75 e0       	ldi	r23, 0x05	; 5
    3aee:	88 e8       	ldi	r24, 0x88	; 136
    3af0:	93 e1       	ldi	r25, 0x13	; 19
    3af2:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <enc28j60PacketReceive>
		 packetloop_arp_icmp_tcp(buf,plen);
    3af6:	bc 01       	movw	r22, r24
    3af8:	88 ea       	ldi	r24, 0xA8	; 168
    3afa:	95 e0       	ldi	r25, 0x05	; 5
    3afc:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <packetloop_arp_icmp_tcp>
	 init_udp_or_www_server(mymac,myip);
	 www_server_port(MYWWWPORT);

	 get_mac_with_arp(gwip,TRANS_NUM_GWMAC,&arpresolver_result_callback);
	 sec = 0;
	 while(get_mac_with_arp_wait()){
    3b00:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <get_mac_with_arp_wait>
    3b04:	81 11       	cpse	r24, r1
    3b06:	e9 cf       	rjmp	.-46     	; 0x3ada <Ether_init+0x5e>
		 // to process the ARP reply we must call the packetloop
		 plen=enc28j60PacketReceive(BUFFER_SIZE, buf);
		 packetloop_arp_icmp_tcp(buf,plen);
	 }

	 parse_ip(otherside_www_ip,serverip);
    3b08:	64 e1       	ldi	r22, 0x14	; 20
    3b0a:	71 e0       	ldi	r23, 0x01	; 1
    3b0c:	81 e3       	ldi	r24, 0x31	; 49
    3b0e:	99 e1       	ldi	r25, 0x19	; 25
    3b10:	9e d0       	rcall	.+316    	; 0x3c4e <parse_ip>
	 processing_state=2; // no need to do any dns look-up
    3b12:	82 e0       	ldi	r24, 0x02	; 2
    3b14:	80 93 a3 05 	sts	0x05A3, r24	; 0x8005a3 <processing_state>
					 i++;
				 }
				 processing_state=4;
				 }else{
				 get_mac_with_arp(otherside_www_ip,TRANS_NUM_WEBMAC,&arpresolver_result_callback);
				 processing_state=3;
    3b18:	d3 e0       	ldi	r29, 0x03	; 3
			 }
			 continue;
		 }
		 if (processing_state==3 && get_mac_with_arp_wait()==0){
			 processing_state=4;
    3b1a:	c4 e0       	ldi	r28, 0x04	; 4
    3b1c:	02 c0       	rjmp	.+4      	; 0x3b22 <Ether_init+0xa6>
	 parse_ip(otherside_www_ip,serverip);
	 processing_state=2; // no need to do any dns look-up
	 
	 while(processing_state != 4)
	 {
		 if (processing_state==2){
    3b1e:	82 30       	cpi	r24, 0x02	; 2
    3b20:	a1 f4       	brne	.+40     	; 0x3b4a <Ether_init+0xce>
			 if (route_via_gw(otherside_www_ip)){
    3b22:	81 e3       	ldi	r24, 0x31	; 49
    3b24:	99 e1       	ldi	r25, 0x19	; 25
    3b26:	0e 94 a6 10 	call	0x214c	; 0x214c <route_via_gw>
    3b2a:	88 23       	and	r24, r24
    3b2c:	21 f0       	breq	.+8      	; 0x3b36 <Ether_init+0xba>
				 i=0;
				 while(i<6){
					 otherside_www_gwmac[i]=gwmac[i];
					 i++;
				 }
				 processing_state=4;
    3b2e:	84 e0       	ldi	r24, 0x04	; 4
    3b30:	80 93 a3 05 	sts	0x05A3, r24	; 0x8005a3 <processing_state>
    3b34:	16 c0       	rjmp	.+44     	; 0x3b62 <Ether_init+0xe6>
				 }else{
				 get_mac_with_arp(otherside_www_ip,TRANS_NUM_WEBMAC,&arpresolver_result_callback);
    3b36:	40 e1       	ldi	r20, 0x10	; 16
    3b38:	57 e1       	ldi	r21, 0x17	; 23
    3b3a:	62 e0       	ldi	r22, 0x02	; 2
    3b3c:	81 e3       	ldi	r24, 0x31	; 49
    3b3e:	99 e1       	ldi	r25, 0x19	; 25
    3b40:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <get_mac_with_arp>
				 processing_state=3;
    3b44:	d0 93 a3 05 	sts	0x05A3, r29	; 0x8005a3 <processing_state>
    3b48:	08 c0       	rjmp	.+16     	; 0x3b5a <Ether_init+0xde>
			 }
			 continue;
		 }
		 if (processing_state==3 && get_mac_with_arp_wait()==0){
    3b4a:	83 30       	cpi	r24, 0x03	; 3
    3b4c:	31 f4       	brne	.+12     	; 0x3b5a <Ether_init+0xde>
    3b4e:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <get_mac_with_arp_wait>
    3b52:	81 11       	cpse	r24, r1
    3b54:	02 c0       	rjmp	.+4      	; 0x3b5a <Ether_init+0xde>
			 processing_state=4;
    3b56:	c0 93 a3 05 	sts	0x05A3, r28	; 0x8005a3 <processing_state>
	 }

	 parse_ip(otherside_www_ip,serverip);
	 processing_state=2; // no need to do any dns look-up
	 
	 while(processing_state != 4)
    3b5a:	80 91 a3 05 	lds	r24, 0x05A3	; 0x8005a3 <processing_state>
    3b5e:	84 30       	cpi	r24, 0x04	; 4
    3b60:	f1 f6       	brne	.-68     	; 0x3b1e <Ether_init+0xa2>
		 }
		 if (processing_state==3 && get_mac_with_arp_wait()==0){
			 processing_state=4;
		 }
	 }
}
    3b62:	df 91       	pop	r29
    3b64:	cf 91       	pop	r28
    3b66:	08 95       	ret

00003b68 <find_key_val>:
                urlbuf++;
                urlbuf++;
                str++;
        }
        *urlbuf='\0';
}
    3b68:	1f 93       	push	r17
    3b6a:	cf 93       	push	r28
    3b6c:	df 93       	push	r29
    3b6e:	ec 01       	movw	r28, r24
    3b70:	98 81       	ld	r25, Y
    3b72:	89 2f       	mov	r24, r25
    3b74:	8f 7d       	andi	r24, 0xDF	; 223
    3b76:	09 f4       	brne	.+2      	; 0x3b7a <find_key_val+0x12>
    3b78:	54 c0       	rjmp	.+168    	; 0x3c22 <find_key_val+0xba>
    3b7a:	9d 30       	cpi	r25, 0x0D	; 13
    3b7c:	09 f4       	brne	.+2      	; 0x3b80 <find_key_val+0x18>
    3b7e:	53 c0       	rjmp	.+166    	; 0x3c26 <find_key_val+0xbe>
    3b80:	d9 01       	movw	r26, r18
    3b82:	50 e0       	ldi	r21, 0x00	; 0
    3b84:	11 e0       	ldi	r17, 0x01	; 1
    3b86:	8c 91       	ld	r24, X
    3b88:	89 13       	cpse	r24, r25
    3b8a:	1c c0       	rjmp	.+56     	; 0x3bc4 <find_key_val+0x5c>
    3b8c:	2a 17       	cp	r18, r26
    3b8e:	3b 07       	cpc	r19, r27
    3b90:	39 f4       	brne	.+14     	; 0x3ba0 <find_key_val+0x38>
    3b92:	fe 01       	movw	r30, r28
    3b94:	31 97       	sbiw	r30, 0x01	; 1
    3b96:	80 81       	ld	r24, Z
    3b98:	8f 33       	cpi	r24, 0x3F	; 63
    3b9a:	11 f0       	breq	.+4      	; 0x3ba0 <find_key_val+0x38>
    3b9c:	86 32       	cpi	r24, 0x26	; 38
    3b9e:	b1 f4       	brne	.+44     	; 0x3bcc <find_key_val+0x64>
    3ba0:	11 96       	adiw	r26, 0x01	; 1
    3ba2:	8c 91       	ld	r24, X
    3ba4:	11 97       	sbiw	r26, 0x01	; 1
    3ba6:	88 23       	and	r24, r24
    3ba8:	21 f0       	breq	.+8      	; 0x3bb2 <find_key_val+0x4a>
    3baa:	11 96       	adiw	r26, 0x01	; 1
    3bac:	fe 01       	movw	r30, r28
    3bae:	85 2f       	mov	r24, r21
    3bb0:	10 c0       	rjmp	.+32     	; 0x3bd2 <find_key_val+0x6a>
    3bb2:	fe 01       	movw	r30, r28
    3bb4:	31 96       	adiw	r30, 0x01	; 1
    3bb6:	81 2f       	mov	r24, r17
    3bb8:	99 81       	ldd	r25, Y+1	; 0x01
    3bba:	9d 33       	cpi	r25, 0x3D	; 61
    3bbc:	09 f0       	breq	.+2      	; 0x3bc0 <find_key_val+0x58>
    3bbe:	85 2f       	mov	r24, r21
    3bc0:	d9 01       	movw	r26, r18
    3bc2:	07 c0       	rjmp	.+14     	; 0x3bd2 <find_key_val+0x6a>
    3bc4:	d9 01       	movw	r26, r18
    3bc6:	fe 01       	movw	r30, r28
    3bc8:	85 2f       	mov	r24, r21
    3bca:	03 c0       	rjmp	.+6      	; 0x3bd2 <find_key_val+0x6a>
    3bcc:	d9 01       	movw	r26, r18
    3bce:	fe 01       	movw	r30, r28
    3bd0:	85 2f       	mov	r24, r21
    3bd2:	ef 01       	movw	r28, r30
    3bd4:	21 96       	adiw	r28, 0x01	; 1
    3bd6:	91 81       	ldd	r25, Z+1	; 0x01
    3bd8:	99 23       	and	r25, r25
    3bda:	99 f1       	breq	.+102    	; 0x3c42 <find_key_val+0xda>
    3bdc:	90 32       	cpi	r25, 0x20	; 32
    3bde:	59 f1       	breq	.+86     	; 0x3c36 <find_key_val+0xce>
    3be0:	9d 30       	cpi	r25, 0x0D	; 13
    3be2:	61 f1       	breq	.+88     	; 0x3c3c <find_key_val+0xd4>
    3be4:	88 23       	and	r24, r24
    3be6:	79 f2       	breq	.-98     	; 0x3b86 <find_key_val+0x1e>
    3be8:	23 c0       	rjmp	.+70     	; 0x3c30 <find_key_val+0xc8>
    3bea:	50 e0       	ldi	r21, 0x00	; 0
    3bec:	41 50       	subi	r20, 0x01	; 1
    3bee:	51 09       	sbc	r21, r1
    3bf0:	14 16       	cp	r1, r20
    3bf2:	15 06       	cpc	r1, r21
    3bf4:	9c f4       	brge	.+38     	; 0x3c1c <find_key_val+0xb4>
    3bf6:	db 01       	movw	r26, r22
    3bf8:	32 96       	adiw	r30, 0x02	; 2
    3bfa:	20 e0       	ldi	r18, 0x00	; 0
    3bfc:	9d 93       	st	X+, r25
    3bfe:	2f 5f       	subi	r18, 0xFF	; 255
    3c00:	bd 01       	movw	r22, r26
    3c02:	91 91       	ld	r25, Z+
    3c04:	39 2f       	mov	r19, r25
    3c06:	3f 7d       	andi	r19, 0xDF	; 223
    3c08:	49 f0       	breq	.+18     	; 0x3c1c <find_key_val+0xb4>
    3c0a:	9d 30       	cpi	r25, 0x0D	; 13
    3c0c:	39 f0       	breq	.+14     	; 0x3c1c <find_key_val+0xb4>
    3c0e:	96 32       	cpi	r25, 0x26	; 38
    3c10:	29 f0       	breq	.+10     	; 0x3c1c <find_key_val+0xb4>
    3c12:	c2 2f       	mov	r28, r18
    3c14:	d0 e0       	ldi	r29, 0x00	; 0
    3c16:	c4 17       	cp	r28, r20
    3c18:	d5 07       	cpc	r29, r21
    3c1a:	84 f3       	brlt	.-32     	; 0x3bfc <find_key_val+0x94>
    3c1c:	fb 01       	movw	r30, r22
    3c1e:	10 82       	st	Z, r1
    3c20:	12 c0       	rjmp	.+36     	; 0x3c46 <find_key_val+0xde>
    3c22:	80 e0       	ldi	r24, 0x00	; 0
    3c24:	10 c0       	rjmp	.+32     	; 0x3c46 <find_key_val+0xde>
    3c26:	80 e0       	ldi	r24, 0x00	; 0
    3c28:	0e c0       	rjmp	.+28     	; 0x3c46 <find_key_val+0xde>
    3c2a:	96 32       	cpi	r25, 0x26	; 38
    3c2c:	f1 f6       	brne	.-68     	; 0x3bea <find_key_val+0x82>
    3c2e:	f6 cf       	rjmp	.-20     	; 0x3c1c <find_key_val+0xb4>
    3c30:	81 30       	cpi	r24, 0x01	; 1
    3c32:	d9 f3       	breq	.-10     	; 0x3c2a <find_key_val+0xc2>
    3c34:	08 c0       	rjmp	.+16     	; 0x3c46 <find_key_val+0xde>
    3c36:	81 30       	cpi	r24, 0x01	; 1
    3c38:	31 f4       	brne	.+12     	; 0x3c46 <find_key_val+0xde>
    3c3a:	f0 cf       	rjmp	.-32     	; 0x3c1c <find_key_val+0xb4>
    3c3c:	81 30       	cpi	r24, 0x01	; 1
    3c3e:	19 f4       	brne	.+6      	; 0x3c46 <find_key_val+0xde>
    3c40:	ed cf       	rjmp	.-38     	; 0x3c1c <find_key_val+0xb4>
    3c42:	81 30       	cpi	r24, 0x01	; 1
    3c44:	59 f3       	breq	.-42     	; 0x3c1c <find_key_val+0xb4>
    3c46:	df 91       	pop	r29
    3c48:	cf 91       	pop	r28
    3c4a:	1f 91       	pop	r17
    3c4c:	08 95       	ret

00003c4e <parse_ip>:

#endif // URLENCODE_websrv_help

// parse a string that is an IP address and extract the IP to ip_byte_str
uint8_t parse_ip(uint8_t *ip_byte_str,const char *str)
{
    3c4e:	af 92       	push	r10
    3c50:	bf 92       	push	r11
    3c52:	df 92       	push	r13
    3c54:	ef 92       	push	r14
    3c56:	ff 92       	push	r15
    3c58:	0f 93       	push	r16
    3c5a:	1f 93       	push	r17
    3c5c:	cf 93       	push	r28
    3c5e:	df 93       	push	r29
    3c60:	00 d0       	rcall	.+0      	; 0x3c62 <parse_ip+0x14>
    3c62:	00 d0       	rcall	.+0      	; 0x3c64 <parse_ip+0x16>
    3c64:	cd b7       	in	r28, 0x3d	; 61
    3c66:	de b7       	in	r29, 0x3e	; 62
    3c68:	fc 01       	movw	r30, r24
        char strbuf[4];
        uint8_t bufpos=0;
        uint8_t i=0;
        while(i<4){
                ip_byte_str[i]=0;
    3c6a:	10 82       	st	Z, r1
    3c6c:	11 82       	std	Z+1, r1	; 0x01
    3c6e:	12 82       	std	Z+2, r1	; 0x02
    3c70:	13 82       	std	Z+3, r1	; 0x03
                i++;
        }
        i=0;
        while(*str && i<4){
    3c72:	db 01       	movw	r26, r22
    3c74:	9c 91       	ld	r25, X
    3c76:	99 23       	and	r25, r25
    3c78:	09 f4       	brne	.+2      	; 0x3c7c <parse_ip+0x2e>
    3c7a:	48 c0       	rjmp	.+144    	; 0x3d0c <parse_ip+0xbe>
    3c7c:	7f 01       	movw	r14, r30
    3c7e:	8b 01       	movw	r16, r22
    3c80:	0f 5f       	subi	r16, 0xFF	; 255
    3c82:	1f 4f       	sbci	r17, 0xFF	; 255
    3c84:	d1 2c       	mov	r13, r1
    3c86:	20 e0       	ldi	r18, 0x00	; 0
                // if a number then start
                if (bufpos < 3 && isdigit(*str)){
    3c88:	23 30       	cpi	r18, 0x03	; 3
    3c8a:	78 f4       	brcc	.+30     	; 0x3caa <parse_ip+0x5c>
    3c8c:	49 2f       	mov	r20, r25
    3c8e:	50 e0       	ldi	r21, 0x00	; 0
    3c90:	40 53       	subi	r20, 0x30	; 48
    3c92:	51 09       	sbc	r21, r1
    3c94:	4a 30       	cpi	r20, 0x0A	; 10
    3c96:	51 05       	cpc	r21, r1
    3c98:	40 f4       	brcc	.+16     	; 0x3caa <parse_ip+0x5c>
                        strbuf[bufpos]=*str; // copy
    3c9a:	e1 e0       	ldi	r30, 0x01	; 1
    3c9c:	f0 e0       	ldi	r31, 0x00	; 0
    3c9e:	ec 0f       	add	r30, r28
    3ca0:	fd 1f       	adc	r31, r29
    3ca2:	e2 0f       	add	r30, r18
    3ca4:	f1 1d       	adc	r31, r1
    3ca6:	90 83       	st	Z, r25
                        bufpos++;
    3ca8:	2f 5f       	subi	r18, 0xFF	; 255
                }
                if (bufpos && *str == '.'){
    3caa:	22 23       	and	r18, r18
    3cac:	a1 f0       	breq	.+40     	; 0x3cd6 <parse_ip+0x88>
    3cae:	9e 32       	cpi	r25, 0x2E	; 46
    3cb0:	91 f4       	brne	.+36     	; 0x3cd6 <parse_ip+0x88>
                        strbuf[bufpos]='\0';
    3cb2:	e1 e0       	ldi	r30, 0x01	; 1
    3cb4:	f0 e0       	ldi	r31, 0x00	; 0
    3cb6:	ec 0f       	add	r30, r28
    3cb8:	fd 1f       	adc	r31, r29
    3cba:	e2 0f       	add	r30, r18
    3cbc:	f1 1d       	adc	r31, r1
    3cbe:	10 82       	st	Z, r1
                        ip_byte_str[i]=(atoi(strbuf)&0xff);
    3cc0:	57 01       	movw	r10, r14
    3cc2:	ad 0c       	add	r10, r13
    3cc4:	b1 1c       	adc	r11, r1
    3cc6:	ce 01       	movw	r24, r28
    3cc8:	01 96       	adiw	r24, 0x01	; 1
    3cca:	0e 94 74 45 	call	0x8ae8	; 0x8ae8 <atoi>
    3cce:	f5 01       	movw	r30, r10
    3cd0:	80 83       	st	Z, r24
                        i++;
    3cd2:	d3 94       	inc	r13
                        bufpos=0;
    3cd4:	20 e0       	ldi	r18, 0x00	; 0
        while(i<4){
                ip_byte_str[i]=0;
                i++;
        }
        i=0;
        while(*str && i<4){
    3cd6:	d8 01       	movw	r26, r16
    3cd8:	9d 91       	ld	r25, X+
    3cda:	8d 01       	movw	r16, r26
    3cdc:	99 23       	and	r25, r25
    3cde:	19 f0       	breq	.+6      	; 0x3ce6 <parse_ip+0x98>
    3ce0:	b3 e0       	ldi	r27, 0x03	; 3
    3ce2:	bd 15       	cp	r27, r13
    3ce4:	88 f6       	brcc	.-94     	; 0x3c88 <parse_ip+0x3a>
                        i++;
                        bufpos=0;
                }
                str++;
        }
        if (i==3){ // must have read the first componets of the IP
    3ce6:	e3 e0       	ldi	r30, 0x03	; 3
    3ce8:	de 12       	cpse	r13, r30
    3cea:	12 c0       	rjmp	.+36     	; 0x3d10 <parse_ip+0xc2>
                strbuf[bufpos]='\0';
    3cec:	e1 e0       	ldi	r30, 0x01	; 1
    3cee:	f0 e0       	ldi	r31, 0x00	; 0
    3cf0:	ec 0f       	add	r30, r28
    3cf2:	fd 1f       	adc	r31, r29
    3cf4:	e2 0f       	add	r30, r18
    3cf6:	f1 1d       	adc	r31, r1
    3cf8:	10 82       	st	Z, r1
                ip_byte_str[i]=(atoi(strbuf)&0xff);
    3cfa:	ce 01       	movw	r24, r28
    3cfc:	01 96       	adiw	r24, 0x01	; 1
    3cfe:	0e 94 74 45 	call	0x8ae8	; 0x8ae8 <atoi>
    3d02:	d7 01       	movw	r26, r14
    3d04:	13 96       	adiw	r26, 0x03	; 3
    3d06:	8c 93       	st	X, r24
                return(0);
    3d08:	80 e0       	ldi	r24, 0x00	; 0
    3d0a:	03 c0       	rjmp	.+6      	; 0x3d12 <parse_ip+0xc4>
        }
        return(1);
    3d0c:	81 e0       	ldi	r24, 0x01	; 1
    3d0e:	01 c0       	rjmp	.+2      	; 0x3d12 <parse_ip+0xc4>
    3d10:	81 e0       	ldi	r24, 0x01	; 1
}
    3d12:	0f 90       	pop	r0
    3d14:	0f 90       	pop	r0
    3d16:	0f 90       	pop	r0
    3d18:	0f 90       	pop	r0
    3d1a:	df 91       	pop	r29
    3d1c:	cf 91       	pop	r28
    3d1e:	1f 91       	pop	r17
    3d20:	0f 91       	pop	r16
    3d22:	ff 90       	pop	r15
    3d24:	ef 90       	pop	r14
    3d26:	df 90       	pop	r13
    3d28:	bf 90       	pop	r11
    3d2a:	af 90       	pop	r10
    3d2c:	08 95       	ret

00003d2e <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    3d2e:	cf 93       	push	r28
    3d30:	df 93       	push	r29
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

#if _WORD_ACCESS == 1
	while (cnt >= sizeof (int)) {
    3d32:	42 30       	cpi	r20, 0x02	; 2
    3d34:	51 05       	cpc	r21, r1
    3d36:	c0 f0       	brcs	.+48     	; 0x3d68 <mem_cpy+0x3a>
    3d38:	db 01       	movw	r26, r22
    3d3a:	fc 01       	movw	r30, r24
    3d3c:	9a 01       	movw	r18, r20
		*(int*)d = *(int*)s;
    3d3e:	cd 91       	ld	r28, X+
    3d40:	dd 91       	ld	r29, X+
    3d42:	c1 93       	st	Z+, r28
    3d44:	d1 93       	st	Z+, r29
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
    3d46:	22 50       	subi	r18, 0x02	; 2
    3d48:	31 09       	sbc	r19, r1
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

#if _WORD_ACCESS == 1
	while (cnt >= sizeof (int)) {
    3d4a:	22 30       	cpi	r18, 0x02	; 2
    3d4c:	31 05       	cpc	r19, r1
    3d4e:	b8 f7       	brcc	.-18     	; 0x3d3e <mem_cpy+0x10>
    3d50:	9a 01       	movw	r18, r20
    3d52:	22 50       	subi	r18, 0x02	; 2
    3d54:	31 09       	sbc	r19, r1
    3d56:	2e 7f       	andi	r18, 0xFE	; 254
    3d58:	2e 5f       	subi	r18, 0xFE	; 254
    3d5a:	3f 4f       	sbci	r19, 0xFF	; 255
    3d5c:	82 0f       	add	r24, r18
    3d5e:	93 1f       	adc	r25, r19
    3d60:	62 0f       	add	r22, r18
    3d62:	73 1f       	adc	r23, r19
    3d64:	41 70       	andi	r20, 0x01	; 1
    3d66:	55 27       	eor	r21, r21
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
    3d68:	41 15       	cp	r20, r1
    3d6a:	51 05       	cpc	r21, r1
    3d6c:	49 f0       	breq	.+18     	; 0x3d80 <mem_cpy+0x52>
    3d6e:	db 01       	movw	r26, r22
    3d70:	fc 01       	movw	r30, r24
    3d72:	48 0f       	add	r20, r24
    3d74:	59 1f       	adc	r21, r25
		*d++ = *s++;
    3d76:	9d 91       	ld	r25, X+
    3d78:	91 93       	st	Z+, r25
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
    3d7a:	e4 17       	cp	r30, r20
    3d7c:	f5 07       	cpc	r31, r21
    3d7e:	d9 f7       	brne	.-10     	; 0x3d76 <mem_cpy+0x48>
		*d++ = *s++;
}
    3d80:	df 91       	pop	r29
    3d82:	cf 91       	pop	r28
    3d84:	08 95       	ret

00003d86 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
    3d86:	cf 93       	push	r28
    3d88:	df 93       	push	r29
    3d8a:	ec 01       	movw	r28, r24
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
    3d8c:	a8 81       	ld	r26, Y
    3d8e:	b9 81       	ldd	r27, Y+1	; 0x01
    3d90:	10 97       	sbiw	r26, 0x00	; 0
    3d92:	f9 f0       	breq	.+62     	; 0x3dd2 <get_ldnumber+0x4c>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
    3d94:	4c 91       	ld	r20, X
    3d96:	41 32       	cpi	r20, 0x21	; 33
    3d98:	58 f0       	brcs	.+22     	; 0x3db0 <get_ldnumber+0x2a>
    3d9a:	4a 33       	cpi	r20, 0x3A	; 58
    3d9c:	31 f1       	breq	.+76     	; 0x3dea <get_ldnumber+0x64>
    3d9e:	fd 01       	movw	r30, r26
    3da0:	31 96       	adiw	r30, 0x01	; 1
    3da2:	9f 01       	movw	r18, r30
    3da4:	91 91       	ld	r25, Z+
    3da6:	91 32       	cpi	r25, 0x21	; 33
    3da8:	28 f0       	brcs	.+10     	; 0x3db4 <get_ldnumber+0x2e>
    3daa:	9a 33       	cpi	r25, 0x3A	; 58
    3dac:	d1 f7       	brne	.-12     	; 0x3da2 <get_ldnumber+0x1c>
    3dae:	04 c0       	rjmp	.+8      	; 0x3db8 <get_ldnumber+0x32>
    3db0:	94 2f       	mov	r25, r20
    3db2:	9d 01       	movw	r18, r26
		if (*tt == ':') {	/* If a ':' is exist in the path name */
    3db4:	9a 33       	cpi	r25, 0x3A	; 58
    3db6:	81 f4       	brne	.+32     	; 0x3dd8 <get_ldnumber+0x52>
			tp = *path;
			i = *tp++ - '0'; 
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
    3db8:	cd 01       	movw	r24, r26
    3dba:	01 96       	adiw	r24, 0x01	; 1
    3dbc:	28 17       	cp	r18, r24
    3dbe:	39 07       	cpc	r19, r25
    3dc0:	71 f4       	brne	.+28     	; 0x3dde <get_ldnumber+0x58>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
    3dc2:	40 33       	cpi	r20, 0x30	; 48
    3dc4:	79 f4       	brne	.+30     	; 0x3de4 <get_ldnumber+0x5e>
					vol = (int)i;
					*path = ++tt;
    3dc6:	12 96       	adiw	r26, 0x02	; 2
    3dc8:	b9 83       	std	Y+1, r27	; 0x01
    3dca:	a8 83       	st	Y, r26
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
					vol = (int)i;
    3dcc:	80 e0       	ldi	r24, 0x00	; 0
    3dce:	90 e0       	ldi	r25, 0x00	; 0
    3dd0:	0e c0       	rjmp	.+28     	; 0x3dee <get_ldnumber+0x68>
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
    3dd2:	8f ef       	ldi	r24, 0xFF	; 255
    3dd4:	9f ef       	ldi	r25, 0xFF	; 255
    3dd6:	0b c0       	rjmp	.+22     	; 0x3dee <get_ldnumber+0x68>
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
    3dd8:	80 e0       	ldi	r24, 0x00	; 0
    3dda:	90 e0       	ldi	r25, 0x00	; 0
    3ddc:	08 c0       	rjmp	.+16     	; 0x3dee <get_ldnumber+0x68>
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
    3dde:	8f ef       	ldi	r24, 0xFF	; 255
    3de0:	9f ef       	ldi	r25, 0xFF	; 255
    3de2:	05 c0       	rjmp	.+10     	; 0x3dee <get_ldnumber+0x68>
    3de4:	8f ef       	ldi	r24, 0xFF	; 255
    3de6:	9f ef       	ldi	r25, 0xFF	; 255
    3de8:	02 c0       	rjmp	.+4      	; 0x3dee <get_ldnumber+0x68>
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
    3dea:	9d 01       	movw	r18, r26
    3dec:	e5 cf       	rjmp	.-54     	; 0x3db8 <get_ldnumber+0x32>
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
    3dee:	df 91       	pop	r29
    3df0:	cf 91       	pop	r28
    3df2:	08 95       	ret

00003df4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
    3df4:	8f 92       	push	r8
    3df6:	9f 92       	push	r9
    3df8:	af 92       	push	r10
    3dfa:	bf 92       	push	r11
    3dfc:	cf 92       	push	r12
    3dfe:	df 92       	push	r13
    3e00:	ef 92       	push	r14
    3e02:	ff 92       	push	r15
    3e04:	0f 93       	push	r16
    3e06:	1f 93       	push	r17
    3e08:	cf 93       	push	r28
    3e0a:	df 93       	push	r29
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;


	if (fs->wflag) {	/* Write back the sector if it is dirty */
    3e0c:	fc 01       	movw	r30, r24
    3e0e:	24 81       	ldd	r18, Z+4	; 0x04
    3e10:	22 23       	and	r18, r18
    3e12:	09 f4       	brne	.+2      	; 0x3e16 <sync_window+0x22>
    3e14:	46 c0       	rjmp	.+140    	; 0x3ea2 <sync_window+0xae>
    3e16:	ec 01       	movw	r28, r24
		wsect = fs->winsect;	/* Current sector number */
    3e18:	c2 a4       	ldd	r12, Z+42	; 0x2a
    3e1a:	d3 a4       	ldd	r13, Z+43	; 0x2b
    3e1c:	e4 a4       	ldd	r14, Z+44	; 0x2c
    3e1e:	f5 a4       	ldd	r15, Z+45	; 0x2d
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
    3e20:	5c 01       	movw	r10, r24
    3e22:	fe e2       	ldi	r31, 0x2E	; 46
    3e24:	af 0e       	add	r10, r31
    3e26:	b1 1c       	adc	r11, r1
    3e28:	01 e0       	ldi	r16, 0x01	; 1
    3e2a:	10 e0       	ldi	r17, 0x00	; 0
    3e2c:	a7 01       	movw	r20, r14
    3e2e:	96 01       	movw	r18, r12
    3e30:	b5 01       	movw	r22, r10
    3e32:	89 81       	ldd	r24, Y+1	; 0x01
    3e34:	0e 94 b7 31 	call	0x636e	; 0x636e <disk_write>
    3e38:	81 11       	cpse	r24, r1
    3e3a:	35 c0       	rjmp	.+106    	; 0x3ea6 <sync_window+0xb2>
			res = FR_DISK_ERR;
		} else {
			fs->wflag = 0;
    3e3c:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
    3e3e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3e40:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3e42:	a8 a1       	ldd	r26, Y+32	; 0x20
    3e44:	b9 a1       	ldd	r27, Y+33	; 0x21
    3e46:	b7 01       	movw	r22, r14
    3e48:	a6 01       	movw	r20, r12
    3e4a:	48 1b       	sub	r20, r24
    3e4c:	59 0b       	sbc	r21, r25
    3e4e:	6a 0b       	sbc	r22, r26
    3e50:	7b 0b       	sbc	r23, r27
    3e52:	8e 89       	ldd	r24, Y+22	; 0x16
    3e54:	9f 89       	ldd	r25, Y+23	; 0x17
    3e56:	a8 8d       	ldd	r26, Y+24	; 0x18
    3e58:	b9 8d       	ldd	r27, Y+25	; 0x19
    3e5a:	48 17       	cp	r20, r24
    3e5c:	59 07       	cpc	r21, r25
    3e5e:	6a 07       	cpc	r22, r26
    3e60:	7b 07       	cpc	r23, r27
    3e62:	18 f5       	brcc	.+70     	; 0x3eaa <sync_window+0xb6>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
    3e64:	8b 80       	ldd	r8, Y+3	; 0x03
    3e66:	91 2c       	mov	r9, r1
    3e68:	82 e0       	ldi	r24, 0x02	; 2
    3e6a:	88 16       	cp	r8, r24
    3e6c:	91 04       	cpc	r9, r1
    3e6e:	f8 f0       	brcs	.+62     	; 0x3eae <sync_window+0xba>
					wsect += fs->fsize;
    3e70:	8e 89       	ldd	r24, Y+22	; 0x16
    3e72:	9f 89       	ldd	r25, Y+23	; 0x17
    3e74:	a8 8d       	ldd	r26, Y+24	; 0x18
    3e76:	b9 8d       	ldd	r27, Y+25	; 0x19
    3e78:	c8 0e       	add	r12, r24
    3e7a:	d9 1e       	adc	r13, r25
    3e7c:	ea 1e       	adc	r14, r26
    3e7e:	fb 1e       	adc	r15, r27
					disk_write(fs->drv, fs->win, wsect, 1);
    3e80:	01 e0       	ldi	r16, 0x01	; 1
    3e82:	10 e0       	ldi	r17, 0x00	; 0
    3e84:	a7 01       	movw	r20, r14
    3e86:	96 01       	movw	r18, r12
    3e88:	b5 01       	movw	r22, r10
    3e8a:	89 81       	ldd	r24, Y+1	; 0x01
    3e8c:	0e 94 b7 31 	call	0x636e	; 0x636e <disk_write>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
			res = FR_DISK_ERR;
		} else {
			fs->wflag = 0;
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
    3e90:	e1 e0       	ldi	r30, 0x01	; 1
    3e92:	8e 1a       	sub	r8, r30
    3e94:	91 08       	sbc	r9, r1
    3e96:	f1 e0       	ldi	r31, 0x01	; 1
    3e98:	8f 16       	cp	r8, r31
    3e9a:	91 04       	cpc	r9, r1
    3e9c:	49 f7       	brne	.-46     	; 0x3e70 <sync_window+0x7c>
	FATFS* fs		/* File system object */
)
{
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
    3e9e:	80 e0       	ldi	r24, 0x00	; 0
    3ea0:	07 c0       	rjmp	.+14     	; 0x3eb0 <sync_window+0xbc>
    3ea2:	80 e0       	ldi	r24, 0x00	; 0
    3ea4:	05 c0       	rjmp	.+10     	; 0x3eb0 <sync_window+0xbc>


	if (fs->wflag) {	/* Write back the sector if it is dirty */
		wsect = fs->winsect;	/* Current sector number */
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
			res = FR_DISK_ERR;
    3ea6:	81 e0       	ldi	r24, 0x01	; 1
    3ea8:	03 c0       	rjmp	.+6      	; 0x3eb0 <sync_window+0xbc>
	FATFS* fs		/* File system object */
)
{
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
    3eaa:	80 e0       	ldi	r24, 0x00	; 0
    3eac:	01 c0       	rjmp	.+2      	; 0x3eb0 <sync_window+0xbc>
    3eae:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		}
	}
	return res;
}
    3eb0:	df 91       	pop	r29
    3eb2:	cf 91       	pop	r28
    3eb4:	1f 91       	pop	r17
    3eb6:	0f 91       	pop	r16
    3eb8:	ff 90       	pop	r15
    3eba:	ef 90       	pop	r14
    3ebc:	df 90       	pop	r13
    3ebe:	cf 90       	pop	r12
    3ec0:	bf 90       	pop	r11
    3ec2:	af 90       	pop	r10
    3ec4:	9f 90       	pop	r9
    3ec6:	8f 90       	pop	r8
    3ec8:	08 95       	ret

00003eca <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)
{
    3eca:	8f 92       	push	r8
    3ecc:	9f 92       	push	r9
    3ece:	af 92       	push	r10
    3ed0:	bf 92       	push	r11
    3ed2:	ff 92       	push	r15
    3ed4:	0f 93       	push	r16
    3ed6:	1f 93       	push	r17
    3ed8:	cf 93       	push	r28
    3eda:	df 93       	push	r29
    3edc:	ec 01       	movw	r28, r24
    3ede:	4a 01       	movw	r8, r20
    3ee0:	5b 01       	movw	r10, r22
	FRESULT res = FR_OK;


	if (sector != fs->winsect) {	/* Window offset changed? */
    3ee2:	8a a5       	ldd	r24, Y+42	; 0x2a
    3ee4:	9b a5       	ldd	r25, Y+43	; 0x2b
    3ee6:	ac a5       	ldd	r26, Y+44	; 0x2c
    3ee8:	bd a5       	ldd	r27, Y+45	; 0x2d
    3eea:	84 17       	cp	r24, r20
    3eec:	95 07       	cpc	r25, r21
    3eee:	a6 07       	cpc	r26, r22
    3ef0:	b7 07       	cpc	r27, r23
    3ef2:	e1 f0       	breq	.+56     	; 0x3f2c <move_window+0x62>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
    3ef4:	ce 01       	movw	r24, r28
    3ef6:	7e df       	rcall	.-260    	; 0x3df4 <sync_window>
    3ef8:	f8 2e       	mov	r15, r24
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
    3efa:	81 11       	cpse	r24, r1
    3efc:	18 c0       	rjmp	.+48     	; 0x3f2e <move_window+0x64>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
    3efe:	01 e0       	ldi	r16, 0x01	; 1
    3f00:	10 e0       	ldi	r17, 0x00	; 0
    3f02:	a5 01       	movw	r20, r10
    3f04:	94 01       	movw	r18, r8
    3f06:	be 01       	movw	r22, r28
    3f08:	62 5d       	subi	r22, 0xD2	; 210
    3f0a:	7f 4f       	sbci	r23, 0xFF	; 255
    3f0c:	89 81       	ldd	r24, Y+1	; 0x01
    3f0e:	0e 94 65 31 	call	0x62ca	; 0x62ca <disk_read>
    3f12:	88 23       	and	r24, r24
    3f14:	31 f0       	breq	.+12     	; 0x3f22 <move_window+0x58>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
				res = FR_DISK_ERR;
    3f16:	ff 24       	eor	r15, r15
    3f18:	f3 94       	inc	r15
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
    3f1a:	88 24       	eor	r8, r8
    3f1c:	8a 94       	dec	r8
    3f1e:	98 2c       	mov	r9, r8
    3f20:	54 01       	movw	r10, r8
				res = FR_DISK_ERR;
			}
			fs->winsect = sector;
    3f22:	8a a6       	std	Y+42, r8	; 0x2a
    3f24:	9b a6       	std	Y+43, r9	; 0x2b
    3f26:	ac a6       	std	Y+44, r10	; 0x2c
    3f28:	bd a6       	std	Y+45, r11	; 0x2d
    3f2a:	01 c0       	rjmp	.+2      	; 0x3f2e <move_window+0x64>
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)
{
	FRESULT res = FR_OK;
    3f2c:	f1 2c       	mov	r15, r1
			}
			fs->winsect = sector;
		}
	}
	return res;
}
    3f2e:	8f 2d       	mov	r24, r15
    3f30:	df 91       	pop	r29
    3f32:	cf 91       	pop	r28
    3f34:	1f 91       	pop	r17
    3f36:	0f 91       	pop	r16
    3f38:	ff 90       	pop	r15
    3f3a:	bf 90       	pop	r11
    3f3c:	af 90       	pop	r10
    3f3e:	9f 90       	pop	r9
    3f40:	8f 90       	pop	r8
    3f42:	08 95       	ret

00003f44 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    3f44:	cf 93       	push	r28
    3f46:	df 93       	push	r29
    3f48:	ec 01       	movw	r28, r24
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
    3f4a:	1c 82       	std	Y+4, r1	; 0x04
    3f4c:	8f ef       	ldi	r24, 0xFF	; 255
    3f4e:	9f ef       	ldi	r25, 0xFF	; 255
    3f50:	dc 01       	movw	r26, r24
    3f52:	8a a7       	std	Y+42, r24	; 0x2a
    3f54:	9b a7       	std	Y+43, r25	; 0x2b
    3f56:	ac a7       	std	Y+44, r26	; 0x2c
    3f58:	bd a7       	std	Y+45, r27	; 0x2d
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
    3f5a:	ce 01       	movw	r24, r28
    3f5c:	b6 df       	rcall	.-148    	; 0x3eca <move_window>
    3f5e:	81 11       	cpse	r24, r1
    3f60:	23 c0       	rjmp	.+70     	; 0x3fa8 <check_fs+0x64>
		return 3;

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
    3f62:	fe 01       	movw	r30, r28
    3f64:	e4 5d       	subi	r30, 0xD4	; 212
    3f66:	fd 4f       	sbci	r31, 0xFD	; 253
    3f68:	80 81       	ld	r24, Z
    3f6a:	91 81       	ldd	r25, Z+1	; 0x01
    3f6c:	85 35       	cpi	r24, 0x55	; 85
    3f6e:	9a 4a       	sbci	r25, 0xAA	; 170
    3f70:	e9 f4       	brne	.+58     	; 0x3fac <check_fs+0x68>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
    3f72:	e8 5c       	subi	r30, 0xC8	; 200
    3f74:	f1 40       	sbci	r31, 0x01	; 1
    3f76:	80 81       	ld	r24, Z
    3f78:	91 81       	ldd	r25, Z+1	; 0x01
    3f7a:	a2 81       	ldd	r26, Z+2	; 0x02
    3f7c:	b3 81       	ldd	r27, Z+3	; 0x03
    3f7e:	bb 27       	eor	r27, r27
    3f80:	86 34       	cpi	r24, 0x46	; 70
    3f82:	91 44       	sbci	r25, 0x41	; 65
    3f84:	a4 45       	sbci	r26, 0x54	; 84
    3f86:	b1 05       	cpc	r27, r1
    3f88:	99 f0       	breq	.+38     	; 0x3fb0 <check_fs+0x6c>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    3f8a:	c0 58       	subi	r28, 0x80	; 128
    3f8c:	df 4f       	sbci	r29, 0xFF	; 255
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
		return 3;
    3f8e:	48 81       	ld	r20, Y
    3f90:	59 81       	ldd	r21, Y+1	; 0x01
    3f92:	6a 81       	ldd	r22, Y+2	; 0x02
    3f94:	7b 81       	ldd	r23, Y+3	; 0x03
    3f96:	77 27       	eor	r23, r23
    3f98:	81 e0       	ldi	r24, 0x01	; 1
    3f9a:	46 34       	cpi	r20, 0x46	; 70
    3f9c:	51 44       	sbci	r21, 0x41	; 65
    3f9e:	64 45       	sbci	r22, 0x54	; 84
    3fa0:	71 05       	cpc	r23, r1
    3fa2:	39 f4       	brne	.+14     	; 0x3fb2 <check_fs+0x6e>
    3fa4:	80 e0       	ldi	r24, 0x00	; 0
    3fa6:	05 c0       	rjmp	.+10     	; 0x3fb2 <check_fs+0x6e>
    3fa8:	83 e0       	ldi	r24, 0x03	; 3
    3faa:	03 c0       	rjmp	.+6      	; 0x3fb2 <check_fs+0x6e>

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
    3fac:	82 e0       	ldi	r24, 0x02	; 2
    3fae:	01 c0       	rjmp	.+2      	; 0x3fb2 <check_fs+0x6e>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
		return 0;
    3fb0:	80 e0       	ldi	r24, 0x00	; 0
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
		return 0;

	return 1;
}
    3fb2:	df 91       	pop	r29
    3fb4:	cf 91       	pop	r28
    3fb6:	08 95       	ret

00003fb8 <validate>:
)
{
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
    3fb8:	00 97       	sbiw	r24, 0x00	; 0
    3fba:	c9 f0       	breq	.+50     	; 0x3fee <validate+0x36>
    3fbc:	dc 01       	movw	r26, r24
    3fbe:	ed 91       	ld	r30, X+
    3fc0:	fc 91       	ld	r31, X
    3fc2:	11 97       	sbiw	r26, 0x01	; 1
    3fc4:	30 97       	sbiw	r30, 0x00	; 0
    3fc6:	a9 f0       	breq	.+42     	; 0x3ff2 <validate+0x3a>
    3fc8:	20 81       	ld	r18, Z
    3fca:	22 23       	and	r18, r18
    3fcc:	a1 f0       	breq	.+40     	; 0x3ff6 <validate+0x3e>
    3fce:	26 81       	ldd	r18, Z+6	; 0x06
    3fd0:	37 81       	ldd	r19, Z+7	; 0x07
    3fd2:	12 96       	adiw	r26, 0x02	; 2
    3fd4:	8d 91       	ld	r24, X+
    3fd6:	9c 91       	ld	r25, X
    3fd8:	13 97       	sbiw	r26, 0x03	; 3
    3fda:	28 17       	cp	r18, r24
    3fdc:	39 07       	cpc	r19, r25
    3fde:	69 f4       	brne	.+26     	; 0x3ffa <validate+0x42>
		return FR_INVALID_OBJECT;

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
    3fe0:	81 81       	ldd	r24, Z+1	; 0x01
    3fe2:	0e 94 5e 31 	call	0x62bc	; 0x62bc <disk_status>
    3fe6:	80 fd       	sbrc	r24, 0
    3fe8:	0a c0       	rjmp	.+20     	; 0x3ffe <validate+0x46>
		return FR_NOT_READY;

	return FR_OK;
    3fea:	80 e0       	ldi	r24, 0x00	; 0
    3fec:	08 95       	ret
{
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
		return FR_INVALID_OBJECT;
    3fee:	89 e0       	ldi	r24, 0x09	; 9
    3ff0:	08 95       	ret
    3ff2:	89 e0       	ldi	r24, 0x09	; 9
    3ff4:	08 95       	ret
    3ff6:	89 e0       	ldi	r24, 0x09	; 9
    3ff8:	08 95       	ret
    3ffa:	89 e0       	ldi	r24, 0x09	; 9
    3ffc:	08 95       	ret

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
		return FR_NOT_READY;
    3ffe:	83 e0       	ldi	r24, 0x03	; 3

	return FR_OK;
}
    4000:	08 95       	ret

00004002 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
    4002:	2f 92       	push	r2
    4004:	3f 92       	push	r3
    4006:	4f 92       	push	r4
    4008:	5f 92       	push	r5
    400a:	6f 92       	push	r6
    400c:	7f 92       	push	r7
    400e:	8f 92       	push	r8
    4010:	9f 92       	push	r9
    4012:	af 92       	push	r10
    4014:	bf 92       	push	r11
    4016:	cf 92       	push	r12
    4018:	df 92       	push	r13
    401a:	ef 92       	push	r14
    401c:	ff 92       	push	r15
    401e:	0f 93       	push	r16
    4020:	1f 93       	push	r17
    4022:	cf 93       	push	r28
    4024:	df 93       	push	r29
    4026:	cd b7       	in	r28, 0x3d	; 61
    4028:	de b7       	in	r29, 0x3e	; 62
    402a:	6d 97       	sbiw	r28, 0x1d	; 29
    402c:	0f b6       	in	r0, 0x3f	; 63
    402e:	f8 94       	cli
    4030:	de bf       	out	0x3e, r29	; 62
    4032:	0f be       	out	0x3f, r0	; 63
    4034:	cd bf       	out	0x3d, r28	; 61
    4036:	6c 01       	movw	r12, r24
    4038:	cb 01       	movw	r24, r22
    403a:	b4 2e       	mov	r11, r20
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
    403c:	d6 01       	movw	r26, r12
    403e:	1d 92       	st	X+, r1
    4040:	1c 92       	st	X, r1
	vol = get_ldnumber(path);
    4042:	a1 de       	rcall	.-702    	; 0x3d86 <get_ldnumber>
    4044:	7c 01       	movw	r14, r24
	if (vol < 0) return FR_INVALID_DRIVE;
    4046:	99 23       	and	r25, r25
    4048:	0c f4       	brge	.+2      	; 0x404c <find_volume+0x4a>
    404a:	02 c2       	rjmp	.+1028   	; 0x4450 <__stack+0x351>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
    404c:	fc 01       	movw	r30, r24
    404e:	ee 0f       	add	r30, r30
    4050:	ff 1f       	adc	r31, r31
    4052:	e3 5c       	subi	r30, 0xC3	; 195
    4054:	f6 4e       	sbci	r31, 0xE6	; 230
    4056:	00 81       	ld	r16, Z
    4058:	11 81       	ldd	r17, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    405a:	01 15       	cp	r16, r1
    405c:	11 05       	cpc	r17, r1
    405e:	09 f4       	brne	.+2      	; 0x4062 <find_volume+0x60>
    4060:	f9 c1       	rjmp	.+1010   	; 0x4454 <__stack+0x355>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
    4062:	f6 01       	movw	r30, r12
    4064:	11 83       	std	Z+1, r17	; 0x01
    4066:	00 83       	st	Z, r16

	if (fs->fs_type) {					/* If the volume has been mounted */
    4068:	d8 01       	movw	r26, r16
    406a:	8c 91       	ld	r24, X
    406c:	88 23       	and	r24, r24
    406e:	69 f0       	breq	.+26     	; 0x408a <find_volume+0x88>
		stat = disk_status(fs->drv);
    4070:	11 96       	adiw	r26, 0x01	; 1
    4072:	8c 91       	ld	r24, X
    4074:	0e 94 5e 31 	call	0x62bc	; 0x62bc <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
    4078:	80 fd       	sbrc	r24, 0
    407a:	07 c0       	rjmp	.+14     	; 0x408a <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
    407c:	bb 20       	and	r11, r11
    407e:	09 f4       	brne	.+2      	; 0x4082 <find_volume+0x80>
    4080:	eb c1       	rjmp	.+982    	; 0x4458 <__stack+0x359>
    4082:	82 ff       	sbrs	r24, 2
    4084:	eb c1       	rjmp	.+982    	; 0x445c <__stack+0x35d>
				return FR_WRITE_PROTECTED;
    4086:	8a e0       	ldi	r24, 0x0A	; 10
    4088:	8b c2       	rjmp	.+1302   	; 0x45a0 <__stack+0x4a1>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    408a:	f8 01       	movw	r30, r16
    408c:	10 82       	st	Z, r1
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    408e:	e1 82       	std	Z+1, r14	; 0x01
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
    4090:	8e 2d       	mov	r24, r14
    4092:	0e 94 a4 30 	call	0x6148	; 0x6148 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    4096:	80 fd       	sbrc	r24, 0
    4098:	e3 c1       	rjmp	.+966    	; 0x4460 <__stack+0x361>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    409a:	bb 20       	and	r11, r11
    409c:	09 f4       	brne	.+2      	; 0x40a0 <find_volume+0x9e>
    409e:	00 c2       	rjmp	.+1024   	; 0x44a0 <__stack+0x3a1>
    40a0:	82 fd       	sbrc	r24, 2
    40a2:	e0 c1       	rjmp	.+960    	; 0x4464 <__stack+0x365>
    40a4:	fd c1       	rjmp	.+1018   	; 0x44a0 <__stack+0x3a1>
	bsect = 0;
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
		for (i = 0; i < 4; i++) {			/* Get partition offset */
			pt = fs->win + MBR_Table + i * SZ_PTE;
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
    40a6:	80 81       	ld	r24, Z
    40a8:	88 23       	and	r24, r24
    40aa:	29 f0       	breq	.+10     	; 0x40b6 <find_volume+0xb4>
    40ac:	44 80       	ldd	r4, Z+4	; 0x04
    40ae:	55 80       	ldd	r5, Z+5	; 0x05
    40b0:	66 80       	ldd	r6, Z+6	; 0x06
    40b2:	77 80       	ldd	r7, Z+7	; 0x07
    40b4:	04 c0       	rjmp	.+8      	; 0x40be <find_volume+0xbc>
    40b6:	4e 2c       	mov	r4, r14
    40b8:	5f 2c       	mov	r5, r15
    40ba:	67 2e       	mov	r6, r23
    40bc:	76 2e       	mov	r7, r22
    40be:	d9 01       	movw	r26, r18
    40c0:	4d 92       	st	X+, r4
    40c2:	5d 92       	st	X+, r5
    40c4:	6d 92       	st	X+, r6
    40c6:	7d 92       	st	X+, r7
    40c8:	9d 01       	movw	r18, r26
    40ca:	70 96       	adiw	r30, 0x10	; 16
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
		for (i = 0; i < 4; i++) {			/* Get partition offset */
    40cc:	4e 17       	cp	r20, r30
    40ce:	5f 07       	cpc	r21, r31
    40d0:	51 f7       	brne	.-44     	; 0x40a6 <find_volume+0xa4>
    40d2:	4e 01       	movw	r8, r28
    40d4:	b1 e1       	ldi	r27, 0x11	; 17
    40d6:	8b 0e       	add	r8, r27
    40d8:	91 1c       	adc	r9, r1
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
    40da:	68 94       	set
    40dc:	77 24       	eor	r7, r7
    40de:	71 f8       	bld	r7, 1
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
    40e0:	f5 01       	movw	r30, r10
    40e2:	c1 90       	ld	r12, Z+
    40e4:	d1 90       	ld	r13, Z+
    40e6:	e1 90       	ld	r14, Z+
    40e8:	f1 90       	ld	r15, Z+
    40ea:	5f 01       	movw	r10, r30
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
    40ec:	c1 14       	cp	r12, r1
    40ee:	d1 04       	cpc	r13, r1
    40f0:	e1 04       	cpc	r14, r1
    40f2:	f1 04       	cpc	r15, r1
    40f4:	39 f0       	breq	.+14     	; 0x4104 <__stack+0x5>
    40f6:	b7 01       	movw	r22, r14
    40f8:	a6 01       	movw	r20, r12
    40fa:	c8 01       	movw	r24, r16
    40fc:	23 df       	rcall	.-442    	; 0x3f44 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
    40fe:	81 11       	cpse	r24, r1
    4100:	02 c0       	rjmp	.+4      	; 0x4106 <__stack+0x7>
    4102:	0d c0       	rjmp	.+26     	; 0x411e <__stack+0x1f>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
    4104:	87 2d       	mov	r24, r7
		} while (!LD2PT(vol) && fmt && ++i < 4);
    4106:	a8 14       	cp	r10, r8
    4108:	b9 04       	cpc	r11, r9
    410a:	51 f7       	brne	.-44     	; 0x40e0 <find_volume+0xde>
    410c:	03 c0       	rjmp	.+6      	; 0x4114 <__stack+0x15>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
    410e:	c1 2c       	mov	r12, r1
    4110:	d1 2c       	mov	r13, r1
    4112:	76 01       	movw	r14, r12
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
		} while (!LD2PT(vol) && fmt && ++i < 4);
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
    4114:	83 30       	cpi	r24, 0x03	; 3
    4116:	09 f4       	brne	.+2      	; 0x411a <__stack+0x1b>
    4118:	a7 c1       	rjmp	.+846    	; 0x4468 <__stack+0x369>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    411a:	81 11       	cpse	r24, r1
    411c:	a7 c1       	rjmp	.+846    	; 0x446c <__stack+0x36d>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
    411e:	d8 01       	movw	r26, r16
    4120:	d9 96       	adiw	r26, 0x39	; 57
    4122:	8d 91       	ld	r24, X+
    4124:	9c 91       	ld	r25, X
    4126:	da 97       	sbiw	r26, 0x3a	; 58
    4128:	81 15       	cp	r24, r1
    412a:	92 40       	sbci	r25, 0x02	; 2
    412c:	09 f0       	breq	.+2      	; 0x4130 <__stack+0x31>
    412e:	a0 c1       	rjmp	.+832    	; 0x4470 <__stack+0x371>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
    4130:	f8 01       	movw	r30, r16
    4132:	ec 5b       	subi	r30, 0xBC	; 188
    4134:	ff 4f       	sbci	r31, 0xFF	; 255
    4136:	40 80       	ld	r4, Z
    4138:	51 80       	ldd	r5, Z+1	; 0x01
    413a:	61 2c       	mov	r6, r1
    413c:	71 2c       	mov	r7, r1
	if (!fasize) fasize = LD_DWORD(fs->win + BPB_FATSz32);
    413e:	41 14       	cp	r4, r1
    4140:	51 04       	cpc	r5, r1
    4142:	61 04       	cpc	r6, r1
    4144:	71 04       	cpc	r7, r1
    4146:	29 f4       	brne	.+10     	; 0x4152 <__stack+0x53>
    4148:	3e 96       	adiw	r30, 0x0e	; 14
    414a:	40 80       	ld	r4, Z
    414c:	51 80       	ldd	r5, Z+1	; 0x01
    414e:	62 80       	ldd	r6, Z+2	; 0x02
    4150:	73 80       	ldd	r7, Z+3	; 0x03
	fs->fsize = fasize;
    4152:	f8 01       	movw	r30, r16
    4154:	46 8a       	std	Z+22, r4	; 0x16
    4156:	57 8a       	std	Z+23, r5	; 0x17
    4158:	60 8e       	std	Z+24, r6	; 0x18
    415a:	71 8e       	std	Z+25, r7	; 0x19

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
    415c:	a6 ad       	ldd	r26, Z+62	; 0x3e
    415e:	a3 83       	std	Z+3, r26	; 0x03
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
    4160:	8f ef       	ldi	r24, 0xFF	; 255
    4162:	8a 0f       	add	r24, r26
    4164:	82 30       	cpi	r24, 0x02	; 2
    4166:	08 f0       	brcs	.+2      	; 0x416a <__stack+0x6b>
    4168:	85 c1       	rjmp	.+778    	; 0x4474 <__stack+0x375>
		return FR_NO_FILESYSTEM;
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */

	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
    416a:	f3 ad       	ldd	r31, Z+59	; 0x3b
    416c:	f9 8b       	std	Y+17, r31	; 0x11
    416e:	2f 2f       	mov	r18, r31
    4170:	f8 01       	movw	r30, r16
    4172:	22 83       	std	Z+2, r18	; 0x02
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
    4174:	22 23       	and	r18, r18
    4176:	09 f4       	brne	.+2      	; 0x417a <__stack+0x7b>
    4178:	7f c1       	rjmp	.+766    	; 0x4478 <__stack+0x379>
    417a:	82 2f       	mov	r24, r18
    417c:	90 e0       	ldi	r25, 0x00	; 0
    417e:	9c 01       	movw	r18, r24
    4180:	21 50       	subi	r18, 0x01	; 1
    4182:	31 09       	sbc	r19, r1
    4184:	82 23       	and	r24, r18
    4186:	93 23       	and	r25, r19
    4188:	89 2b       	or	r24, r25
    418a:	09 f0       	breq	.+2      	; 0x418e <__stack+0x8f>
    418c:	77 c1       	rjmp	.+750    	; 0x447c <__stack+0x37d>
		return FR_NO_FILESYSTEM;

	fs->n_rootdir = LD_WORD(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
    418e:	ff 96       	adiw	r30, 0x3f	; 63
    4190:	20 80       	ld	r2, Z
    4192:	31 80       	ldd	r3, Z+1	; 0x01
    4194:	f8 01       	movw	r30, r16
    4196:	31 86       	std	Z+9, r3	; 0x09
    4198:	20 86       	std	Z+8, r2	; 0x08
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
    419a:	c1 01       	movw	r24, r2
    419c:	8f 70       	andi	r24, 0x0F	; 15
    419e:	99 27       	eor	r25, r25
    41a0:	89 2b       	or	r24, r25
    41a2:	09 f0       	breq	.+2      	; 0x41a6 <__stack+0xa7>
    41a4:	6d c1       	rjmp	.+730    	; 0x4480 <__stack+0x381>
		return FR_NO_FILESYSTEM;

	tsect = LD_WORD(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
    41a6:	ef 5b       	subi	r30, 0xBF	; 191
    41a8:	ff 4f       	sbci	r31, 0xFF	; 255
    41aa:	80 80       	ld	r8, Z
    41ac:	91 80       	ldd	r9, Z+1	; 0x01
    41ae:	a1 2c       	mov	r10, r1
    41b0:	b1 2c       	mov	r11, r1
	if (!tsect) tsect = LD_DWORD(fs->win + BPB_TotSec32);
    41b2:	81 14       	cp	r8, r1
    41b4:	91 04       	cpc	r9, r1
    41b6:	a1 04       	cpc	r10, r1
    41b8:	b1 04       	cpc	r11, r1
    41ba:	29 f4       	brne	.+10     	; 0x41c6 <__stack+0xc7>
    41bc:	3d 96       	adiw	r30, 0x0d	; 13
    41be:	80 80       	ld	r8, Z
    41c0:	91 80       	ldd	r9, Z+1	; 0x01
    41c2:	a2 80       	ldd	r10, Z+2	; 0x02
    41c4:	b3 80       	ldd	r11, Z+3	; 0x03

	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
    41c6:	f8 01       	movw	r30, r16
    41c8:	04 ac       	ldd	r0, Z+60	; 0x3c
    41ca:	f5 ad       	ldd	r31, Z+61	; 0x3d
    41cc:	e0 2d       	mov	r30, r0
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
    41ce:	30 97       	sbiw	r30, 0x00	; 0
    41d0:	09 f4       	brne	.+2      	; 0x41d4 <__stack+0xd5>
    41d2:	58 c1       	rjmp	.+688    	; 0x4484 <__stack+0x385>
	fs->fsize = fasize;

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
		return FR_NO_FILESYSTEM;
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
    41d4:	b0 e0       	ldi	r27, 0x00	; 0
    41d6:	a3 01       	movw	r20, r6
    41d8:	92 01       	movw	r18, r4
    41da:	0e 94 3a 42 	call	0x8474	; 0x8474 <__muluhisi3>
    41de:	6a 8f       	std	Y+26, r22	; 0x1a
    41e0:	7b 8f       	std	Y+27, r23	; 0x1b
    41e2:	8c 8f       	std	Y+28, r24	; 0x1c
    41e4:	9d 8f       	std	Y+29, r25	; 0x1d

	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
    41e6:	9f 01       	movw	r18, r30
    41e8:	40 e0       	ldi	r20, 0x00	; 0
    41ea:	50 e0       	ldi	r21, 0x00	; 0
    41ec:	2e 8b       	std	Y+22, r18	; 0x16
    41ee:	3f 8b       	std	Y+23, r19	; 0x17
    41f0:	48 8f       	std	Y+24, r20	; 0x18
    41f2:	59 8f       	std	Y+25, r21	; 0x19
    41f4:	c1 01       	movw	r24, r2
    41f6:	92 95       	swap	r25
    41f8:	82 95       	swap	r24
    41fa:	8f 70       	andi	r24, 0x0F	; 15
    41fc:	89 27       	eor	r24, r25
    41fe:	9f 70       	andi	r25, 0x0F	; 15
    4200:	89 27       	eor	r24, r25
    4202:	28 0f       	add	r18, r24
    4204:	39 1f       	adc	r19, r25
    4206:	41 1d       	adc	r20, r1
    4208:	51 1d       	adc	r21, r1
    420a:	da 01       	movw	r26, r20
    420c:	c9 01       	movw	r24, r18
    420e:	2a 8d       	ldd	r18, Y+26	; 0x1a
    4210:	3b 8d       	ldd	r19, Y+27	; 0x1b
    4212:	4c 8d       	ldd	r20, Y+28	; 0x1c
    4214:	5d 8d       	ldd	r21, Y+29	; 0x1d
    4216:	28 0f       	add	r18, r24
    4218:	39 1f       	adc	r19, r25
    421a:	4a 1f       	adc	r20, r26
    421c:	5b 1f       	adc	r21, r27
    421e:	2a 8b       	std	Y+18, r18	; 0x12
    4220:	3b 8b       	std	Y+19, r19	; 0x13
    4222:	4c 8b       	std	Y+20, r20	; 0x14
    4224:	5d 8b       	std	Y+21, r21	; 0x15
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    4226:	82 16       	cp	r8, r18
    4228:	93 06       	cpc	r9, r19
    422a:	a4 06       	cpc	r10, r20
    422c:	b5 06       	cpc	r11, r21
    422e:	08 f4       	brcc	.+2      	; 0x4232 <__stack+0x133>
    4230:	2b c1       	rjmp	.+598    	; 0x4488 <__stack+0x389>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    4232:	c5 01       	movw	r24, r10
    4234:	b4 01       	movw	r22, r8
    4236:	62 1b       	sub	r22, r18
    4238:	73 0b       	sbc	r23, r19
    423a:	84 0b       	sbc	r24, r20
    423c:	95 0b       	sbc	r25, r21
    423e:	e9 89       	ldd	r30, Y+17	; 0x11
    4240:	2e 2f       	mov	r18, r30
    4242:	30 e0       	ldi	r19, 0x00	; 0
    4244:	40 e0       	ldi	r20, 0x00	; 0
    4246:	50 e0       	ldi	r21, 0x00	; 0
    4248:	0e 94 e4 41 	call	0x83c8	; 0x83c8 <__udivmodsi4>
    424c:	da 01       	movw	r26, r20
    424e:	c9 01       	movw	r24, r18
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    4250:	21 15       	cp	r18, r1
    4252:	31 05       	cpc	r19, r1
    4254:	41 05       	cpc	r20, r1
    4256:	51 05       	cpc	r21, r1
    4258:	09 f4       	brne	.+2      	; 0x425c <__stack+0x15d>
    425a:	18 c1       	rjmp	.+560    	; 0x448c <__stack+0x38d>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    425c:	26 3f       	cpi	r18, 0xF6	; 246
    425e:	ff e0       	ldi	r31, 0x0F	; 15
    4260:	3f 07       	cpc	r19, r31
    4262:	41 05       	cpc	r20, r1
    4264:	51 05       	cpc	r21, r1
    4266:	18 f0       	brcs	.+6      	; 0x426e <__stack+0x16f>
    4268:	e2 e0       	ldi	r30, 0x02	; 2
    426a:	e9 8b       	std	Y+17, r30	; 0x11
    426c:	02 c0       	rjmp	.+4      	; 0x4272 <__stack+0x173>
	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
    426e:	f1 e0       	ldi	r31, 0x01	; 1
    4270:	f9 8b       	std	Y+17, r31	; 0x11
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    4272:	86 3f       	cpi	r24, 0xF6	; 246
    4274:	9f 4f       	sbci	r25, 0xFF	; 255
    4276:	a1 05       	cpc	r26, r1
    4278:	b1 05       	cpc	r27, r1
    427a:	08 f0       	brcs	.+2      	; 0x427e <__stack+0x17f>
    427c:	28 c1       	rjmp	.+592    	; 0x44ce <__stack+0x3cf>

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    427e:	49 01       	movw	r8, r18
    4280:	5a 01       	movw	r10, r20
    4282:	82 e0       	ldi	r24, 0x02	; 2
    4284:	88 0e       	add	r8, r24
    4286:	91 1c       	adc	r9, r1
    4288:	a1 1c       	adc	r10, r1
    428a:	b1 1c       	adc	r11, r1
    428c:	d8 01       	movw	r26, r16
    428e:	52 96       	adiw	r26, 0x12	; 18
    4290:	8d 92       	st	X+, r8
    4292:	9d 92       	st	X+, r9
    4294:	ad 92       	st	X+, r10
    4296:	bc 92       	st	X, r11
    4298:	55 97       	sbiw	r26, 0x15	; 21
	fs->volbase = bsect;								/* Volume start sector */
    429a:	f8 01       	movw	r30, r16
    429c:	c2 8e       	std	Z+26, r12	; 0x1a
    429e:	d3 8e       	std	Z+27, r13	; 0x1b
    42a0:	e4 8e       	std	Z+28, r14	; 0x1c
    42a2:	f5 8e       	std	Z+29, r15	; 0x1d
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    42a4:	8e 89       	ldd	r24, Y+22	; 0x16
    42a6:	9f 89       	ldd	r25, Y+23	; 0x17
    42a8:	a8 8d       	ldd	r26, Y+24	; 0x18
    42aa:	b9 8d       	ldd	r27, Y+25	; 0x19
    42ac:	8c 0d       	add	r24, r12
    42ae:	9d 1d       	adc	r25, r13
    42b0:	ae 1d       	adc	r26, r14
    42b2:	bf 1d       	adc	r27, r15
    42b4:	86 8f       	std	Z+30, r24	; 0x1e
    42b6:	97 8f       	std	Z+31, r25	; 0x1f
    42b8:	a0 a3       	std	Z+32, r26	; 0x20
    42ba:	b1 a3       	std	Z+33, r27	; 0x21
	fs->database = bsect + sysect;						/* Data start sector */
    42bc:	4a 89       	ldd	r20, Y+18	; 0x12
    42be:	5b 89       	ldd	r21, Y+19	; 0x13
    42c0:	6c 89       	ldd	r22, Y+20	; 0x14
    42c2:	7d 89       	ldd	r23, Y+21	; 0x15
    42c4:	4c 0d       	add	r20, r12
    42c6:	5d 1d       	adc	r21, r13
    42c8:	6e 1d       	adc	r22, r14
    42ca:	7f 1d       	adc	r23, r15
    42cc:	46 a3       	std	Z+38, r20	; 0x26
    42ce:	57 a3       	std	Z+39, r21	; 0x27
    42d0:	60 a7       	std	Z+40, r22	; 0x28
    42d2:	71 a7       	std	Z+41, r23	; 0x29
	if (fmt == FS_FAT32) {
    42d4:	f9 89       	ldd	r31, Y+17	; 0x11
    42d6:	f3 30       	cpi	r31, 0x03	; 3
    42d8:	69 f5       	brne	.+90     	; 0x4334 <__stack+0x235>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    42da:	23 28       	or	r2, r3
    42dc:	09 f0       	breq	.+2      	; 0x42e0 <__stack+0x1e1>
    42de:	d8 c0       	rjmp	.+432    	; 0x4490 <__stack+0x391>
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
    42e0:	f8 01       	movw	r30, r16
    42e2:	e6 5a       	subi	r30, 0xA6	; 166
    42e4:	ff 4f       	sbci	r31, 0xFF	; 255
    42e6:	80 81       	ld	r24, Z
    42e8:	91 81       	ldd	r25, Z+1	; 0x01
    42ea:	a2 81       	ldd	r26, Z+2	; 0x02
    42ec:	b3 81       	ldd	r27, Z+3	; 0x03
    42ee:	f8 01       	movw	r30, r16
    42f0:	82 a3       	std	Z+34, r24	; 0x22
    42f2:	93 a3       	std	Z+35, r25	; 0x23
    42f4:	a4 a3       	std	Z+36, r26	; 0x24
    42f6:	b5 a3       	std	Z+37, r27	; 0x25
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
    42f8:	88 0c       	add	r8, r8
    42fa:	99 1c       	adc	r9, r9
    42fc:	aa 1c       	adc	r10, r10
    42fe:	bb 1c       	adc	r11, r11
    4300:	88 0c       	add	r8, r8
    4302:	99 1c       	adc	r9, r9
    4304:	aa 1c       	adc	r10, r10
    4306:	bb 1c       	adc	r11, r11
    4308:	ff ef       	ldi	r31, 0xFF	; 255
    430a:	8f 0e       	add	r8, r31
    430c:	f1 e0       	ldi	r31, 0x01	; 1
    430e:	9f 1e       	adc	r9, r31
    4310:	a1 1c       	adc	r10, r1
    4312:	b1 1c       	adc	r11, r1
    4314:	07 2e       	mov	r0, r23
    4316:	79 e0       	ldi	r23, 0x09	; 9
    4318:	b6 94       	lsr	r11
    431a:	a7 94       	ror	r10
    431c:	97 94       	ror	r9
    431e:	87 94       	ror	r8
    4320:	7a 95       	dec	r23
    4322:	d1 f7       	brne	.-12     	; 0x4318 <__stack+0x219>
    4324:	70 2d       	mov	r23, r0
    4326:	48 14       	cp	r4, r8
    4328:	59 04       	cpc	r5, r9
    432a:	6a 04       	cpc	r6, r10
    432c:	7b 04       	cpc	r7, r11
    432e:	08 f4       	brcc	.+2      	; 0x4332 <__stack+0x233>
    4330:	b1 c0       	rjmp	.+354    	; 0x4494 <__stack+0x395>
    4332:	f9 c0       	rjmp	.+498    	; 0x4526 <__stack+0x427>
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    4334:	23 28       	or	r2, r3
    4336:	09 f4       	brne	.+2      	; 0x433a <__stack+0x23b>
    4338:	af c0       	rjmp	.+350    	; 0x4498 <__stack+0x399>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    433a:	2a 8d       	ldd	r18, Y+26	; 0x1a
    433c:	3b 8d       	ldd	r19, Y+27	; 0x1b
    433e:	4c 8d       	ldd	r20, Y+28	; 0x1c
    4340:	5d 8d       	ldd	r21, Y+29	; 0x1d
    4342:	82 0f       	add	r24, r18
    4344:	93 1f       	adc	r25, r19
    4346:	a4 1f       	adc	r26, r20
    4348:	b5 1f       	adc	r27, r21
    434a:	f8 01       	movw	r30, r16
    434c:	82 a3       	std	Z+34, r24	; 0x22
    434e:	93 a3       	std	Z+35, r25	; 0x23
    4350:	a4 a3       	std	Z+36, r26	; 0x24
    4352:	b5 a3       	std	Z+37, r27	; 0x25
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    4354:	f9 89       	ldd	r31, Y+17	; 0x11
    4356:	f2 30       	cpi	r31, 0x02	; 2
    4358:	29 f4       	brne	.+10     	; 0x4364 <__stack+0x265>
    435a:	88 0c       	add	r8, r8
    435c:	99 1c       	adc	r9, r9
    435e:	aa 1c       	adc	r10, r10
    4360:	bb 1c       	adc	r11, r11
    4362:	08 c1       	rjmp	.+528    	; 0x4574 <__stack+0x475>
    4364:	a3 e0       	ldi	r26, 0x03	; 3
    4366:	b0 e0       	ldi	r27, 0x00	; 0
    4368:	a5 01       	movw	r20, r10
    436a:	94 01       	movw	r18, r8
    436c:	0e 94 3a 42 	call	0x8474	; 0x8474 <__muluhisi3>
    4370:	dc 01       	movw	r26, r24
    4372:	cb 01       	movw	r24, r22
    4374:	b6 95       	lsr	r27
    4376:	a7 95       	ror	r26
    4378:	97 95       	ror	r25
    437a:	87 95       	ror	r24
    437c:	21 e0       	ldi	r18, 0x01	; 1
    437e:	82 22       	and	r8, r18
    4380:	99 24       	eor	r9, r9
    4382:	aa 24       	eor	r10, r10
    4384:	bb 24       	eor	r11, r11
    4386:	88 0e       	add	r8, r24
    4388:	99 1e       	adc	r9, r25
    438a:	aa 1e       	adc	r10, r26
    438c:	bb 1e       	adc	r11, r27
    438e:	f2 c0       	rjmp	.+484    	; 0x4574 <__stack+0x475>
	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
		&& LD_WORD(fs->win + BPB_FSInfo) == 1
		&& move_window(fs, bsect + 1) == FR_OK)
    4390:	b7 01       	movw	r22, r14
    4392:	a6 01       	movw	r20, r12
    4394:	4f 5f       	subi	r20, 0xFF	; 255
    4396:	5f 4f       	sbci	r21, 0xFF	; 255
    4398:	6f 4f       	sbci	r22, 0xFF	; 255
    439a:	7f 4f       	sbci	r23, 0xFF	; 255
    439c:	c8 01       	movw	r24, r16
    439e:	95 dd       	rcall	.-1238   	; 0x3eca <move_window>
    43a0:	81 11       	cpse	r24, r1
    43a2:	39 c0       	rjmp	.+114    	; 0x4416 <__stack+0x317>
	{
		fs->fsi_flag = 0;
    43a4:	d8 01       	movw	r26, r16
    43a6:	15 96       	adiw	r26, 0x05	; 5
    43a8:	1c 92       	st	X, r1
		if (LD_WORD(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
    43aa:	f8 01       	movw	r30, r16
    43ac:	e4 5d       	subi	r30, 0xD4	; 212
    43ae:	fd 4f       	sbci	r31, 0xFD	; 253
    43b0:	80 81       	ld	r24, Z
    43b2:	91 81       	ldd	r25, Z+1	; 0x01
    43b4:	85 35       	cpi	r24, 0x55	; 85
    43b6:	9a 4a       	sbci	r25, 0xAA	; 170
    43b8:	89 f5       	brne	.+98     	; 0x441c <__stack+0x31d>
			&& LD_DWORD(fs->win + FSI_LeadSig) == 0x41615252
    43ba:	f8 01       	movw	r30, r16
    43bc:	86 a5       	ldd	r24, Z+46	; 0x2e
    43be:	97 a5       	ldd	r25, Z+47	; 0x2f
    43c0:	a0 a9       	ldd	r26, Z+48	; 0x30
    43c2:	b1 a9       	ldd	r27, Z+49	; 0x31
    43c4:	82 35       	cpi	r24, 0x52	; 82
    43c6:	92 45       	sbci	r25, 0x52	; 82
    43c8:	a1 46       	sbci	r26, 0x61	; 97
    43ca:	b1 44       	sbci	r27, 0x41	; 65
    43cc:	51 f5       	brne	.+84     	; 0x4422 <__stack+0x323>
			&& LD_DWORD(fs->win + FSI_StrucSig) == 0x61417272)
    43ce:	f8 01       	movw	r30, r16
    43d0:	ee 5e       	subi	r30, 0xEE	; 238
    43d2:	fd 4f       	sbci	r31, 0xFD	; 253
    43d4:	80 81       	ld	r24, Z
    43d6:	91 81       	ldd	r25, Z+1	; 0x01
    43d8:	a2 81       	ldd	r26, Z+2	; 0x02
    43da:	b3 81       	ldd	r27, Z+3	; 0x03
    43dc:	82 37       	cpi	r24, 0x72	; 114
    43de:	92 47       	sbci	r25, 0x72	; 114
    43e0:	a1 44       	sbci	r26, 0x41	; 65
    43e2:	b1 46       	sbci	r27, 0x61	; 97
    43e4:	09 f5       	brne	.+66     	; 0x4428 <__stack+0x329>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win + FSI_Free_Count);
    43e6:	34 96       	adiw	r30, 0x04	; 4
    43e8:	80 81       	ld	r24, Z
    43ea:	91 81       	ldd	r25, Z+1	; 0x01
    43ec:	a2 81       	ldd	r26, Z+2	; 0x02
    43ee:	b3 81       	ldd	r27, Z+3	; 0x03
    43f0:	f8 01       	movw	r30, r16
    43f2:	86 87       	std	Z+14, r24	; 0x0e
    43f4:	97 87       	std	Z+15, r25	; 0x0f
    43f6:	a0 8b       	std	Z+16, r26	; 0x10
    43f8:	b1 8b       	std	Z+17, r27	; 0x11
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win + FSI_Nxt_Free);
    43fa:	e6 5e       	subi	r30, 0xE6	; 230
    43fc:	fd 4f       	sbci	r31, 0xFD	; 253
    43fe:	80 81       	ld	r24, Z
    4400:	91 81       	ldd	r25, Z+1	; 0x01
    4402:	a2 81       	ldd	r26, Z+2	; 0x02
    4404:	b3 81       	ldd	r27, Z+3	; 0x03
    4406:	f8 01       	movw	r30, r16
    4408:	82 87       	std	Z+10, r24	; 0x0a
    440a:	93 87       	std	Z+11, r25	; 0x0b
    440c:	a4 87       	std	Z+12, r26	; 0x0c
    440e:	b5 87       	std	Z+13, r27	; 0x0d
    4410:	f3 e0       	ldi	r31, 0x03	; 3
    4412:	f9 8b       	std	Y+17, r31	; 0x11
    4414:	0b c0       	rjmp	.+22     	; 0x442c <__stack+0x32d>
    4416:	e3 e0       	ldi	r30, 0x03	; 3
    4418:	e9 8b       	std	Y+17, r30	; 0x11
    441a:	08 c0       	rjmp	.+16     	; 0x442c <__stack+0x32d>
    441c:	f3 e0       	ldi	r31, 0x03	; 3
    441e:	f9 8b       	std	Y+17, r31	; 0x11
    4420:	05 c0       	rjmp	.+10     	; 0x442c <__stack+0x32d>
    4422:	e3 e0       	ldi	r30, 0x03	; 3
    4424:	e9 8b       	std	Y+17, r30	; 0x11
    4426:	02 c0       	rjmp	.+4      	; 0x442c <__stack+0x32d>
    4428:	f3 e0       	ldi	r31, 0x03	; 3
    442a:	f9 8b       	std	Y+17, r31	; 0x11
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
    442c:	e9 89       	ldd	r30, Y+17	; 0x11
    442e:	d8 01       	movw	r26, r16
    4430:	ec 93       	st	X, r30
	fs->id = ++Fsid;	/* File system mount ID */
    4432:	80 91 3b 19 	lds	r24, 0x193B	; 0x80193b <Fsid>
    4436:	90 91 3c 19 	lds	r25, 0x193C	; 0x80193c <Fsid+0x1>
    443a:	01 96       	adiw	r24, 0x01	; 1
    443c:	90 93 3c 19 	sts	0x193C, r25	; 0x80193c <Fsid+0x1>
    4440:	80 93 3b 19 	sts	0x193B, r24	; 0x80193b <Fsid>
    4444:	17 96       	adiw	r26, 0x07	; 7
    4446:	9c 93       	st	X, r25
    4448:	8e 93       	st	-X, r24
    444a:	16 97       	sbiw	r26, 0x06	; 6
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
    444c:	80 e0       	ldi	r24, 0x00	; 0
    444e:	a8 c0       	rjmp	.+336    	; 0x45a0 <__stack+0x4a1>


	/* Get logical drive number from the path name */
	*rfs = 0;
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
    4450:	8b e0       	ldi	r24, 0x0B	; 11
    4452:	a6 c0       	rjmp	.+332    	; 0x45a0 <__stack+0x4a1>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    4454:	8c e0       	ldi	r24, 0x0C	; 12
    4456:	a4 c0       	rjmp	.+328    	; 0x45a0 <__stack+0x4a1>
	if (fs->fs_type) {					/* If the volume has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
    4458:	80 e0       	ldi	r24, 0x00	; 0
    445a:	a2 c0       	rjmp	.+324    	; 0x45a0 <__stack+0x4a1>
    445c:	80 e0       	ldi	r24, 0x00	; 0
    445e:	a0 c0       	rjmp	.+320    	; 0x45a0 <__stack+0x4a1>

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
    4460:	83 e0       	ldi	r24, 0x03	; 3
    4462:	9e c0       	rjmp	.+316    	; 0x45a0 <__stack+0x4a1>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
    4464:	8a e0       	ldi	r24, 0x0A	; 10
    4466:	9c c0       	rjmp	.+312    	; 0x45a0 <__stack+0x4a1>
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
		} while (!LD2PT(vol) && fmt && ++i < 4);
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
    4468:	81 e0       	ldi	r24, 0x01	; 1
    446a:	9a c0       	rjmp	.+308    	; 0x45a0 <__stack+0x4a1>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    446c:	8d e0       	ldi	r24, 0x0D	; 13
    446e:	98 c0       	rjmp	.+304    	; 0x45a0 <__stack+0x4a1>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
		return FR_NO_FILESYSTEM;
    4470:	8d e0       	ldi	r24, 0x0D	; 13
    4472:	96 c0       	rjmp	.+300    	; 0x45a0 <__stack+0x4a1>
	if (!fasize) fasize = LD_DWORD(fs->win + BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
		return FR_NO_FILESYSTEM;
    4474:	8d e0       	ldi	r24, 0x0D	; 13
    4476:	94 c0       	rjmp	.+296    	; 0x45a0 <__stack+0x4a1>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */

	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
		return FR_NO_FILESYSTEM;
    4478:	8d e0       	ldi	r24, 0x0D	; 13
    447a:	92 c0       	rjmp	.+292    	; 0x45a0 <__stack+0x4a1>
    447c:	8d e0       	ldi	r24, 0x0D	; 13
    447e:	90 c0       	rjmp	.+288    	; 0x45a0 <__stack+0x4a1>

	fs->n_rootdir = LD_WORD(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
		return FR_NO_FILESYSTEM;
    4480:	8d e0       	ldi	r24, 0x0D	; 13
    4482:	8e c0       	rjmp	.+284    	; 0x45a0 <__stack+0x4a1>

	tsect = LD_WORD(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
	if (!tsect) tsect = LD_DWORD(fs->win + BPB_TotSec32);

	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
    4484:	8d e0       	ldi	r24, 0x0D	; 13
    4486:	8c c0       	rjmp	.+280    	; 0x45a0 <__stack+0x4a1>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    4488:	8d e0       	ldi	r24, 0x0D	; 13
    448a:	8a c0       	rjmp	.+276    	; 0x45a0 <__stack+0x4a1>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    448c:	8d e0       	ldi	r24, 0x0D	; 13
    448e:	88 c0       	rjmp	.+272    	; 0x45a0 <__stack+0x4a1>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
	fs->volbase = bsect;								/* Volume start sector */
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
	fs->database = bsect + sysect;						/* Data start sector */
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    4490:	8d e0       	ldi	r24, 0x0D	; 13
    4492:	86 c0       	rjmp	.+268    	; 0x45a0 <__stack+0x4a1>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
		return FR_NO_FILESYSTEM;
    4494:	8d e0       	ldi	r24, 0x0D	; 13
    4496:	84 c0       	rjmp	.+264    	; 0x45a0 <__stack+0x4a1>
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    4498:	8d e0       	ldi	r24, 0x0D	; 13
    449a:	82 c0       	rjmp	.+260    	; 0x45a0 <__stack+0x4a1>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
		return FR_NO_FILESYSTEM;
    449c:	8d e0       	ldi	r24, 0x0D	; 13
    449e:	80 c0       	rjmp	.+256    	; 0x45a0 <__stack+0x4a1>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
    44a0:	40 e0       	ldi	r20, 0x00	; 0
    44a2:	50 e0       	ldi	r21, 0x00	; 0
    44a4:	ba 01       	movw	r22, r20
    44a6:	c8 01       	movw	r24, r16
    44a8:	4d dd       	rcall	.-1382   	; 0x3f44 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
    44aa:	81 30       	cpi	r24, 0x01	; 1
    44ac:	09 f0       	breq	.+2      	; 0x44b0 <__stack+0x3b1>
    44ae:	2f ce       	rjmp	.-930    	; 0x410e <__stack+0xf>
    44b0:	f8 01       	movw	r30, r16
    44b2:	e0 51       	subi	r30, 0x10	; 16
    44b4:	fe 4f       	sbci	r31, 0xFE	; 254
    44b6:	9e 01       	movw	r18, r28
    44b8:	2f 5f       	subi	r18, 0xFF	; 255
    44ba:	3f 4f       	sbci	r19, 0xFF	; 255
    44bc:	59 01       	movw	r10, r18
    44be:	a8 01       	movw	r20, r16
    44c0:	40 5d       	subi	r20, 0xD0	; 208
    44c2:	5d 4f       	sbci	r21, 0xFD	; 253
		for (i = 0; i < 4; i++) {			/* Get partition offset */
			pt = fs->win + MBR_Table + i * SZ_PTE;
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
    44c4:	e1 2c       	mov	r14, r1
    44c6:	f1 2c       	mov	r15, r1
    44c8:	70 e0       	ldi	r23, 0x00	; 0
    44ca:	60 e0       	ldi	r22, 0x00	; 0
    44cc:	ec cd       	rjmp	.-1064   	; 0x40a6 <find_volume+0xa4>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    44ce:	49 01       	movw	r8, r18
    44d0:	5a 01       	movw	r10, r20
    44d2:	62 e0       	ldi	r22, 0x02	; 2
    44d4:	86 0e       	add	r8, r22
    44d6:	91 1c       	adc	r9, r1
    44d8:	a1 1c       	adc	r10, r1
    44da:	b1 1c       	adc	r11, r1
    44dc:	d8 01       	movw	r26, r16
    44de:	52 96       	adiw	r26, 0x12	; 18
    44e0:	8d 92       	st	X+, r8
    44e2:	9d 92       	st	X+, r9
    44e4:	ad 92       	st	X+, r10
    44e6:	bc 92       	st	X, r11
    44e8:	55 97       	sbiw	r26, 0x15	; 21
	fs->volbase = bsect;								/* Volume start sector */
    44ea:	f8 01       	movw	r30, r16
    44ec:	c2 8e       	std	Z+26, r12	; 0x1a
    44ee:	d3 8e       	std	Z+27, r13	; 0x1b
    44f0:	e4 8e       	std	Z+28, r14	; 0x1c
    44f2:	f5 8e       	std	Z+29, r15	; 0x1d
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    44f4:	8e 89       	ldd	r24, Y+22	; 0x16
    44f6:	9f 89       	ldd	r25, Y+23	; 0x17
    44f8:	a8 8d       	ldd	r26, Y+24	; 0x18
    44fa:	b9 8d       	ldd	r27, Y+25	; 0x19
    44fc:	8c 0d       	add	r24, r12
    44fe:	9d 1d       	adc	r25, r13
    4500:	ae 1d       	adc	r26, r14
    4502:	bf 1d       	adc	r27, r15
    4504:	86 8f       	std	Z+30, r24	; 0x1e
    4506:	97 8f       	std	Z+31, r25	; 0x1f
    4508:	a0 a3       	std	Z+32, r26	; 0x20
    450a:	b1 a3       	std	Z+33, r27	; 0x21
	fs->database = bsect + sysect;						/* Data start sector */
    450c:	8a 89       	ldd	r24, Y+18	; 0x12
    450e:	9b 89       	ldd	r25, Y+19	; 0x13
    4510:	ac 89       	ldd	r26, Y+20	; 0x14
    4512:	bd 89       	ldd	r27, Y+21	; 0x15
    4514:	8c 0d       	add	r24, r12
    4516:	9d 1d       	adc	r25, r13
    4518:	ae 1d       	adc	r26, r14
    451a:	bf 1d       	adc	r27, r15
    451c:	86 a3       	std	Z+38, r24	; 0x26
    451e:	97 a3       	std	Z+39, r25	; 0x27
    4520:	a0 a7       	std	Z+40, r26	; 0x28
    4522:	b1 a7       	std	Z+41, r27	; 0x29
    4524:	da ce       	rjmp	.-588    	; 0x42da <__stack+0x1db>
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
    4526:	8f ef       	ldi	r24, 0xFF	; 255
    4528:	9f ef       	ldi	r25, 0xFF	; 255
    452a:	dc 01       	movw	r26, r24
    452c:	f8 01       	movw	r30, r16
    452e:	86 87       	std	Z+14, r24	; 0x0e
    4530:	97 87       	std	Z+15, r25	; 0x0f
    4532:	a0 8b       	std	Z+16, r26	; 0x10
    4534:	b1 8b       	std	Z+17, r27	; 0x11
    4536:	82 87       	std	Z+10, r24	; 0x0a
    4538:	93 87       	std	Z+11, r25	; 0x0b
    453a:	a4 87       	std	Z+12, r26	; 0x0c
    453c:	b5 87       	std	Z+13, r27	; 0x0d

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
    453e:	80 e8       	ldi	r24, 0x80	; 128
    4540:	85 83       	std	Z+5, r24	; 0x05
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
		&& LD_WORD(fs->win + BPB_FSInfo) == 1
    4542:	e2 5a       	subi	r30, 0xA2	; 162
    4544:	ff 4f       	sbci	r31, 0xFF	; 255
    4546:	80 81       	ld	r24, Z
    4548:	91 81       	ldd	r25, Z+1	; 0x01
    454a:	01 97       	sbiw	r24, 0x01	; 1
    454c:	09 f4       	brne	.+2      	; 0x4550 <__stack+0x451>
    454e:	20 cf       	rjmp	.-448    	; 0x4390 <__stack+0x291>
    4550:	f3 e0       	ldi	r31, 0x03	; 3
    4552:	f9 8b       	std	Y+17, r31	; 0x11
    4554:	6b cf       	rjmp	.-298    	; 0x442c <__stack+0x32d>
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
    4556:	8f ef       	ldi	r24, 0xFF	; 255
    4558:	9f ef       	ldi	r25, 0xFF	; 255
    455a:	dc 01       	movw	r26, r24
    455c:	f8 01       	movw	r30, r16
    455e:	86 87       	std	Z+14, r24	; 0x0e
    4560:	97 87       	std	Z+15, r25	; 0x0f
    4562:	a0 8b       	std	Z+16, r26	; 0x10
    4564:	b1 8b       	std	Z+17, r27	; 0x11
    4566:	82 87       	std	Z+10, r24	; 0x0a
    4568:	93 87       	std	Z+11, r25	; 0x0b
    456a:	a4 87       	std	Z+12, r26	; 0x0c
    456c:	b5 87       	std	Z+13, r27	; 0x0d

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
    456e:	80 e8       	ldi	r24, 0x80	; 128
    4570:	85 83       	std	Z+5, r24	; 0x05
    4572:	5c cf       	rjmp	.-328    	; 0x442c <__stack+0x32d>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
    4574:	ff ef       	ldi	r31, 0xFF	; 255
    4576:	8f 0e       	add	r8, r31
    4578:	f1 e0       	ldi	r31, 0x01	; 1
    457a:	9f 1e       	adc	r9, r31
    457c:	a1 1c       	adc	r10, r1
    457e:	b1 1c       	adc	r11, r1
    4580:	07 2e       	mov	r0, r23
    4582:	79 e0       	ldi	r23, 0x09	; 9
    4584:	b6 94       	lsr	r11
    4586:	a7 94       	ror	r10
    4588:	97 94       	ror	r9
    458a:	87 94       	ror	r8
    458c:	7a 95       	dec	r23
    458e:	d1 f7       	brne	.-12     	; 0x4584 <__stack+0x485>
    4590:	70 2d       	mov	r23, r0
    4592:	48 14       	cp	r4, r8
    4594:	59 04       	cpc	r5, r9
    4596:	6a 04       	cpc	r6, r10
    4598:	7b 04       	cpc	r7, r11
    459a:	08 f4       	brcc	.+2      	; 0x459e <__stack+0x49f>
    459c:	7f cf       	rjmp	.-258    	; 0x449c <__stack+0x39d>
    459e:	db cf       	rjmp	.-74     	; 0x4556 <__stack+0x457>
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
}
    45a0:	6d 96       	adiw	r28, 0x1d	; 29
    45a2:	0f b6       	in	r0, 0x3f	; 63
    45a4:	f8 94       	cli
    45a6:	de bf       	out	0x3e, r29	; 62
    45a8:	0f be       	out	0x3f, r0	; 63
    45aa:	cd bf       	out	0x3d, r28	; 61
    45ac:	df 91       	pop	r29
    45ae:	cf 91       	pop	r28
    45b0:	1f 91       	pop	r17
    45b2:	0f 91       	pop	r16
    45b4:	ff 90       	pop	r15
    45b6:	ef 90       	pop	r14
    45b8:	df 90       	pop	r13
    45ba:	cf 90       	pop	r12
    45bc:	bf 90       	pop	r11
    45be:	af 90       	pop	r10
    45c0:	9f 90       	pop	r9
    45c2:	8f 90       	pop	r8
    45c4:	7f 90       	pop	r7
    45c6:	6f 90       	pop	r6
    45c8:	5f 90       	pop	r5
    45ca:	4f 90       	pop	r4
    45cc:	3f 90       	pop	r3
    45ce:	2f 90       	pop	r2
    45d0:	08 95       	ret

000045d2 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    45d2:	0f 93       	push	r16
    45d4:	1f 93       	push	r17
    45d6:	fc 01       	movw	r30, r24
	clst -= 2;
    45d8:	9a 01       	movw	r18, r20
    45da:	ab 01       	movw	r20, r22
    45dc:	22 50       	subi	r18, 0x02	; 2
    45de:	31 09       	sbc	r19, r1
    45e0:	41 09       	sbc	r20, r1
    45e2:	51 09       	sbc	r21, r1
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    45e4:	82 89       	ldd	r24, Z+18	; 0x12
    45e6:	93 89       	ldd	r25, Z+19	; 0x13
    45e8:	a4 89       	ldd	r26, Z+20	; 0x14
    45ea:	b5 89       	ldd	r27, Z+21	; 0x15
    45ec:	02 97       	sbiw	r24, 0x02	; 2
    45ee:	a1 09       	sbc	r26, r1
    45f0:	b1 09       	sbc	r27, r1
    45f2:	28 17       	cp	r18, r24
    45f4:	39 07       	cpc	r19, r25
    45f6:	4a 07       	cpc	r20, r26
    45f8:	5b 07       	cpc	r21, r27
    45fa:	68 f4       	brcc	.+26     	; 0x4616 <clust2sect+0x44>
	return clst * fs->csize + fs->database;
    45fc:	a2 81       	ldd	r26, Z+2	; 0x02
    45fe:	b0 e0       	ldi	r27, 0x00	; 0
    4600:	0e 94 3a 42 	call	0x8474	; 0x8474 <__muluhisi3>
    4604:	06 a1       	ldd	r16, Z+38	; 0x26
    4606:	17 a1       	ldd	r17, Z+39	; 0x27
    4608:	20 a5       	ldd	r18, Z+40	; 0x28
    460a:	31 a5       	ldd	r19, Z+41	; 0x29
    460c:	60 0f       	add	r22, r16
    460e:	71 1f       	adc	r23, r17
    4610:	82 1f       	adc	r24, r18
    4612:	93 1f       	adc	r25, r19
    4614:	03 c0       	rjmp	.+6      	; 0x461c <clust2sect+0x4a>
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    4616:	60 e0       	ldi	r22, 0x00	; 0
    4618:	70 e0       	ldi	r23, 0x00	; 0
    461a:	cb 01       	movw	r24, r22
	return clst * fs->csize + fs->database;
}
    461c:	1f 91       	pop	r17
    461e:	0f 91       	pop	r16
    4620:	08 95       	ret

00004622 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
    4622:	af 92       	push	r10
    4624:	bf 92       	push	r11
    4626:	cf 92       	push	r12
    4628:	df 92       	push	r13
    462a:	ef 92       	push	r14
    462c:	ff 92       	push	r15
    462e:	0f 93       	push	r16
    4630:	1f 93       	push	r17
    4632:	cf 93       	push	r28
    4634:	df 93       	push	r29
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    4636:	42 30       	cpi	r20, 0x02	; 2
    4638:	51 05       	cpc	r21, r1
    463a:	61 05       	cpc	r22, r1
    463c:	71 05       	cpc	r23, r1
    463e:	08 f4       	brcc	.+2      	; 0x4642 <get_fat+0x20>
    4640:	aa c0       	rjmp	.+340    	; 0x4796 <get_fat+0x174>
    4642:	fc 01       	movw	r30, r24
    4644:	c2 88       	ldd	r12, Z+18	; 0x12
    4646:	d3 88       	ldd	r13, Z+19	; 0x13
    4648:	e4 88       	ldd	r14, Z+20	; 0x14
    464a:	f5 88       	ldd	r15, Z+21	; 0x15
    464c:	4c 15       	cp	r20, r12
    464e:	5d 05       	cpc	r21, r13
    4650:	6e 05       	cpc	r22, r14
    4652:	7f 05       	cpc	r23, r15
    4654:	08 f0       	brcs	.+2      	; 0x4658 <get_fat+0x36>
    4656:	a4 c0       	rjmp	.+328    	; 0x47a0 <get_fat+0x17e>
    4658:	6a 01       	movw	r12, r20
    465a:	7b 01       	movw	r14, r22
    465c:	ec 01       	movw	r28, r24
		val = 1;	/* Internal error */

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */

		switch (fs->fs_type) {
    465e:	80 81       	ld	r24, Z
    4660:	82 30       	cpi	r24, 0x02	; 2
    4662:	09 f4       	brne	.+2      	; 0x4666 <get_fat+0x44>
    4664:	4b c0       	rjmp	.+150    	; 0x46fc <get_fat+0xda>
    4666:	83 30       	cpi	r24, 0x03	; 3
    4668:	09 f4       	brne	.+2      	; 0x466c <get_fat+0x4a>
    466a:	69 c0       	rjmp	.+210    	; 0x473e <get_fat+0x11c>
    466c:	81 30       	cpi	r24, 0x01	; 1
    466e:	09 f0       	breq	.+2      	; 0x4672 <get_fat+0x50>
    4670:	9c c0       	rjmp	.+312    	; 0x47aa <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
    4672:	8a 01       	movw	r16, r20
    4674:	16 95       	lsr	r17
    4676:	07 95       	ror	r16
    4678:	04 0f       	add	r16, r20
    467a:	15 1f       	adc	r17, r21
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    467c:	c8 01       	movw	r24, r16
    467e:	89 2f       	mov	r24, r25
    4680:	99 27       	eor	r25, r25
    4682:	86 95       	lsr	r24
    4684:	46 8d       	ldd	r20, Z+30	; 0x1e
    4686:	57 8d       	ldd	r21, Z+31	; 0x1f
    4688:	60 a1       	ldd	r22, Z+32	; 0x20
    468a:	71 a1       	ldd	r23, Z+33	; 0x21
    468c:	48 0f       	add	r20, r24
    468e:	59 1f       	adc	r21, r25
    4690:	61 1d       	adc	r22, r1
    4692:	71 1d       	adc	r23, r1
    4694:	cf 01       	movw	r24, r30
    4696:	19 dc       	rcall	.-1998   	; 0x3eca <move_window>
    4698:	81 11       	cpse	r24, r1
    469a:	8c c0       	rjmp	.+280    	; 0x47b4 <get_fat+0x192>
			wc = fs->win[bc++ % SS(fs)];
    469c:	58 01       	movw	r10, r16
    469e:	ff ef       	ldi	r31, 0xFF	; 255
    46a0:	af 1a       	sub	r10, r31
    46a2:	bf 0a       	sbc	r11, r31
    46a4:	11 70       	andi	r17, 0x01	; 1
    46a6:	fe 01       	movw	r30, r28
    46a8:	e0 0f       	add	r30, r16
    46aa:	f1 1f       	adc	r31, r17
    46ac:	16 a5       	ldd	r17, Z+46	; 0x2e
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    46ae:	c5 01       	movw	r24, r10
    46b0:	89 2f       	mov	r24, r25
    46b2:	99 27       	eor	r25, r25
    46b4:	86 95       	lsr	r24
    46b6:	4e 8d       	ldd	r20, Y+30	; 0x1e
    46b8:	5f 8d       	ldd	r21, Y+31	; 0x1f
    46ba:	68 a1       	ldd	r22, Y+32	; 0x20
    46bc:	79 a1       	ldd	r23, Y+33	; 0x21
    46be:	48 0f       	add	r20, r24
    46c0:	59 1f       	adc	r21, r25
    46c2:	61 1d       	adc	r22, r1
    46c4:	71 1d       	adc	r23, r1
    46c6:	ce 01       	movw	r24, r28
    46c8:	00 dc       	rcall	.-2048   	; 0x3eca <move_window>
    46ca:	81 11       	cpse	r24, r1
    46cc:	77 c0       	rjmp	.+238    	; 0x47bc <get_fat+0x19a>
			wc |= fs->win[bc % SS(fs)] << 8;
    46ce:	81 e0       	ldi	r24, 0x01	; 1
    46d0:	b8 22       	and	r11, r24
    46d2:	ca 0d       	add	r28, r10
    46d4:	db 1d       	adc	r29, r11
    46d6:	8e a5       	ldd	r24, Y+46	; 0x2e
    46d8:	61 2f       	mov	r22, r17
    46da:	70 e0       	ldi	r23, 0x00	; 0
    46dc:	78 2b       	or	r23, r24
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
    46de:	c0 fe       	sbrs	r12, 0
    46e0:	09 c0       	rjmp	.+18     	; 0x46f4 <get_fat+0xd2>
    46e2:	72 95       	swap	r23
    46e4:	62 95       	swap	r22
    46e6:	6f 70       	andi	r22, 0x0F	; 15
    46e8:	67 27       	eor	r22, r23
    46ea:	7f 70       	andi	r23, 0x0F	; 15
    46ec:	67 27       	eor	r22, r23
    46ee:	80 e0       	ldi	r24, 0x00	; 0
    46f0:	90 e0       	ldi	r25, 0x00	; 0
    46f2:	6f c0       	rjmp	.+222    	; 0x47d2 <get_fat+0x1b0>
    46f4:	7f 70       	andi	r23, 0x0F	; 15
    46f6:	80 e0       	ldi	r24, 0x00	; 0
    46f8:	90 e0       	ldi	r25, 0x00	; 0
    46fa:	6b c0       	rjmp	.+214    	; 0x47d2 <get_fat+0x1b0>
			break;

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
    46fc:	45 2f       	mov	r20, r21
    46fe:	56 2f       	mov	r21, r22
    4700:	67 2f       	mov	r22, r23
    4702:	77 27       	eor	r23, r23
    4704:	86 8d       	ldd	r24, Z+30	; 0x1e
    4706:	97 8d       	ldd	r25, Z+31	; 0x1f
    4708:	a0 a1       	ldd	r26, Z+32	; 0x20
    470a:	b1 a1       	ldd	r27, Z+33	; 0x21
    470c:	48 0f       	add	r20, r24
    470e:	59 1f       	adc	r21, r25
    4710:	6a 1f       	adc	r22, r26
    4712:	7b 1f       	adc	r23, r27
    4714:	cf 01       	movw	r24, r30
    4716:	d9 db       	rcall	.-2126   	; 0x3eca <move_window>
    4718:	81 11       	cpse	r24, r1
    471a:	54 c0       	rjmp	.+168    	; 0x47c4 <get_fat+0x1a2>
			p = &fs->win[clst * 2 % SS(fs)];
    471c:	b7 01       	movw	r22, r14
    471e:	a6 01       	movw	r20, r12
    4720:	44 0f       	add	r20, r20
    4722:	55 1f       	adc	r21, r21
    4724:	66 1f       	adc	r22, r22
    4726:	77 1f       	adc	r23, r23
    4728:	4e 7f       	andi	r20, 0xFE	; 254
    472a:	51 70       	andi	r21, 0x01	; 1
    472c:	66 27       	eor	r22, r22
    472e:	77 27       	eor	r23, r23
			val = LD_WORD(p);
    4730:	c4 0f       	add	r28, r20
    4732:	d5 1f       	adc	r29, r21
    4734:	6e a5       	ldd	r22, Y+46	; 0x2e
    4736:	7f a5       	ldd	r23, Y+47	; 0x2f
    4738:	80 e0       	ldi	r24, 0x00	; 0
    473a:	90 e0       	ldi	r25, 0x00	; 0
			break;
    473c:	4a c0       	rjmp	.+148    	; 0x47d2 <get_fat+0x1b0>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
    473e:	86 8d       	ldd	r24, Z+30	; 0x1e
    4740:	97 8d       	ldd	r25, Z+31	; 0x1f
    4742:	a0 a1       	ldd	r26, Z+32	; 0x20
    4744:	b1 a1       	ldd	r27, Z+33	; 0x21
    4746:	68 94       	set
    4748:	16 f8       	bld	r1, 6
    474a:	76 95       	lsr	r23
    474c:	67 95       	ror	r22
    474e:	57 95       	ror	r21
    4750:	47 95       	ror	r20
    4752:	16 94       	lsr	r1
    4754:	d1 f7       	brne	.-12     	; 0x474a <get_fat+0x128>
    4756:	48 0f       	add	r20, r24
    4758:	59 1f       	adc	r21, r25
    475a:	6a 1f       	adc	r22, r26
    475c:	7b 1f       	adc	r23, r27
    475e:	cf 01       	movw	r24, r30
    4760:	b4 db       	rcall	.-2200   	; 0x3eca <move_window>
    4762:	81 11       	cpse	r24, r1
    4764:	33 c0       	rjmp	.+102    	; 0x47cc <get_fat+0x1aa>
			p = &fs->win[clst * 4 % SS(fs)];
    4766:	b7 01       	movw	r22, r14
    4768:	a6 01       	movw	r20, r12
    476a:	44 0f       	add	r20, r20
    476c:	55 1f       	adc	r21, r21
    476e:	66 1f       	adc	r22, r22
    4770:	77 1f       	adc	r23, r23
    4772:	44 0f       	add	r20, r20
    4774:	55 1f       	adc	r21, r21
    4776:	66 1f       	adc	r22, r22
    4778:	77 1f       	adc	r23, r23
    477a:	4c 7f       	andi	r20, 0xFC	; 252
    477c:	51 70       	andi	r21, 0x01	; 1
    477e:	66 27       	eor	r22, r22
    4780:	77 27       	eor	r23, r23
			val = LD_DWORD(p) & 0x0FFFFFFF;
    4782:	c4 0f       	add	r28, r20
    4784:	d5 1f       	adc	r29, r21
    4786:	8e a5       	ldd	r24, Y+46	; 0x2e
    4788:	9f a5       	ldd	r25, Y+47	; 0x2f
    478a:	a8 a9       	ldd	r26, Y+48	; 0x30
    478c:	b9 a9       	ldd	r27, Y+49	; 0x31
    478e:	bc 01       	movw	r22, r24
    4790:	cd 01       	movw	r24, r26
    4792:	9f 70       	andi	r25, 0x0F	; 15
			break;
    4794:	1e c0       	rjmp	.+60     	; 0x47d2 <get_fat+0x1b0>
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		val = 1;	/* Internal error */
    4796:	61 e0       	ldi	r22, 0x01	; 1
    4798:	70 e0       	ldi	r23, 0x00	; 0
    479a:	80 e0       	ldi	r24, 0x00	; 0
    479c:	90 e0       	ldi	r25, 0x00	; 0
    479e:	19 c0       	rjmp	.+50     	; 0x47d2 <get_fat+0x1b0>
    47a0:	61 e0       	ldi	r22, 0x01	; 1
    47a2:	70 e0       	ldi	r23, 0x00	; 0
    47a4:	80 e0       	ldi	r24, 0x00	; 0
    47a6:	90 e0       	ldi	r25, 0x00	; 0
    47a8:	14 c0       	rjmp	.+40     	; 0x47d2 <get_fat+0x1b0>
			p = &fs->win[clst * 4 % SS(fs)];
			val = LD_DWORD(p) & 0x0FFFFFFF;
			break;

		default:
			val = 1;	/* Internal error */
    47aa:	61 e0       	ldi	r22, 0x01	; 1
    47ac:	70 e0       	ldi	r23, 0x00	; 0
    47ae:	80 e0       	ldi	r24, 0x00	; 0
    47b0:	90 e0       	ldi	r25, 0x00	; 0
    47b2:	0f c0       	rjmp	.+30     	; 0x47d2 <get_fat+0x1b0>

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		val = 1;	/* Internal error */

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    47b4:	6f ef       	ldi	r22, 0xFF	; 255
    47b6:	7f ef       	ldi	r23, 0xFF	; 255
    47b8:	cb 01       	movw	r24, r22
    47ba:	0b c0       	rjmp	.+22     	; 0x47d2 <get_fat+0x1b0>
    47bc:	6f ef       	ldi	r22, 0xFF	; 255
    47be:	7f ef       	ldi	r23, 0xFF	; 255
    47c0:	cb 01       	movw	r24, r22
    47c2:	07 c0       	rjmp	.+14     	; 0x47d2 <get_fat+0x1b0>
    47c4:	6f ef       	ldi	r22, 0xFF	; 255
    47c6:	7f ef       	ldi	r23, 0xFF	; 255
    47c8:	cb 01       	movw	r24, r22
    47ca:	03 c0       	rjmp	.+6      	; 0x47d2 <get_fat+0x1b0>
    47cc:	6f ef       	ldi	r22, 0xFF	; 255
    47ce:	7f ef       	ldi	r23, 0xFF	; 255
    47d0:	cb 01       	movw	r24, r22
			val = 1;	/* Internal error */
		}
	}

	return val;
}
    47d2:	df 91       	pop	r29
    47d4:	cf 91       	pop	r28
    47d6:	1f 91       	pop	r17
    47d8:	0f 91       	pop	r16
    47da:	ff 90       	pop	r15
    47dc:	ef 90       	pop	r14
    47de:	df 90       	pop	r13
    47e0:	cf 90       	pop	r12
    47e2:	bf 90       	pop	r11
    47e4:	af 90       	pop	r10
    47e6:	08 95       	ret

000047e8 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
    47e8:	af 92       	push	r10
    47ea:	bf 92       	push	r11
    47ec:	cf 92       	push	r12
    47ee:	df 92       	push	r13
    47f0:	ef 92       	push	r14
    47f2:	ff 92       	push	r15
    47f4:	0f 93       	push	r16
    47f6:	1f 93       	push	r17
    47f8:	cf 93       	push	r28
    47fa:	df 93       	push	r29
    47fc:	ec 01       	movw	r28, r24
    47fe:	8b 01       	movw	r16, r22
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
    4800:	7d 83       	std	Y+5, r23	; 0x05
    4802:	6c 83       	std	Y+4, r22	; 0x04
	clst = dp->sclust;		/* Table start cluster (0:root) */
    4804:	ce 80       	ldd	r12, Y+6	; 0x06
    4806:	df 80       	ldd	r13, Y+7	; 0x07
    4808:	e8 84       	ldd	r14, Y+8	; 0x08
    480a:	f9 84       	ldd	r15, Y+9	; 0x09
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
    480c:	81 e0       	ldi	r24, 0x01	; 1
    480e:	c8 16       	cp	r12, r24
    4810:	d1 04       	cpc	r13, r1
    4812:	e1 04       	cpc	r14, r1
    4814:	f1 04       	cpc	r15, r1
    4816:	09 f4       	brne	.+2      	; 0x481a <dir_sdi+0x32>
    4818:	89 c0       	rjmp	.+274    	; 0x492c <dir_sdi+0x144>
    481a:	e8 81       	ld	r30, Y
    481c:	f9 81       	ldd	r31, Y+1	; 0x01
    481e:	82 89       	ldd	r24, Z+18	; 0x12
    4820:	93 89       	ldd	r25, Z+19	; 0x13
    4822:	a4 89       	ldd	r26, Z+20	; 0x14
    4824:	b5 89       	ldd	r27, Z+21	; 0x15
    4826:	c8 16       	cp	r12, r24
    4828:	d9 06       	cpc	r13, r25
    482a:	ea 06       	cpc	r14, r26
    482c:	fb 06       	cpc	r15, r27
    482e:	08 f0       	brcs	.+2      	; 0x4832 <dir_sdi+0x4a>
    4830:	7f c0       	rjmp	.+254    	; 0x4930 <dir_sdi+0x148>
		return FR_INT_ERR;
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    4832:	c1 14       	cp	r12, r1
    4834:	d1 04       	cpc	r13, r1
    4836:	e1 04       	cpc	r14, r1
    4838:	f1 04       	cpc	r15, r1
    483a:	c1 f4       	brne	.+48     	; 0x486c <dir_sdi+0x84>
    483c:	80 81       	ld	r24, Z
    483e:	83 30       	cpi	r24, 0x03	; 3
    4840:	41 f4       	brne	.+16     	; 0x4852 <dir_sdi+0x6a>
		clst = dp->fs->dirbase;
    4842:	82 a1       	ldd	r24, Z+34	; 0x22
    4844:	93 a1       	ldd	r25, Z+35	; 0x23
    4846:	a4 a1       	ldd	r26, Z+36	; 0x24
    4848:	b5 a1       	ldd	r27, Z+37	; 0x25

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
    484a:	00 97       	sbiw	r24, 0x00	; 0
    484c:	a1 05       	cpc	r26, r1
    484e:	b1 05       	cpc	r27, r1
    4850:	59 f4       	brne	.+22     	; 0x4868 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
    4852:	80 85       	ldd	r24, Z+8	; 0x08
    4854:	91 85       	ldd	r25, Z+9	; 0x09
    4856:	08 17       	cp	r16, r24
    4858:	19 07       	cpc	r17, r25
    485a:	08 f0       	brcs	.+2      	; 0x485e <dir_sdi+0x76>
    485c:	6b c0       	rjmp	.+214    	; 0x4934 <dir_sdi+0x14c>
			return FR_INT_ERR;
		sect = dp->fs->dirbase;
    485e:	62 a1       	ldd	r22, Z+34	; 0x22
    4860:	73 a1       	ldd	r23, Z+35	; 0x23
    4862:	84 a1       	ldd	r24, Z+36	; 0x24
    4864:	95 a1       	ldd	r25, Z+37	; 0x25
    4866:	35 c0       	rjmp	.+106    	; 0x48d2 <dir_sdi+0xea>
	dp->index = (WORD)idx;	/* Current index */
	clst = dp->sclust;		/* Table start cluster (0:root) */
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
		return FR_INT_ERR;
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = dp->fs->dirbase;
    4868:	6c 01       	movw	r12, r24
    486a:	7d 01       	movw	r14, r26
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
			return FR_INT_ERR;
		sect = dp->fs->dirbase;
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
    486c:	a2 80       	ldd	r10, Z+2	; 0x02
    486e:	80 e1       	ldi	r24, 0x10	; 16
    4870:	a8 9e       	mul	r10, r24
    4872:	50 01       	movw	r10, r0
    4874:	11 24       	eor	r1, r1
		while (idx >= ic) {	/* Follow cluster chain */
    4876:	0a 15       	cp	r16, r10
    4878:	1b 05       	cpc	r17, r11
    487a:	30 f1       	brcs	.+76     	; 0x48c8 <dir_sdi+0xe0>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
    487c:	b7 01       	movw	r22, r14
    487e:	a6 01       	movw	r20, r12
    4880:	88 81       	ld	r24, Y
    4882:	99 81       	ldd	r25, Y+1	; 0x01
    4884:	ce de       	rcall	.-612    	; 0x4622 <get_fat>
    4886:	6b 01       	movw	r12, r22
    4888:	7c 01       	movw	r14, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    488a:	8f ef       	ldi	r24, 0xFF	; 255
    488c:	c8 16       	cp	r12, r24
    488e:	d8 06       	cpc	r13, r24
    4890:	e8 06       	cpc	r14, r24
    4892:	f8 06       	cpc	r15, r24
    4894:	09 f4       	brne	.+2      	; 0x4898 <dir_sdi+0xb0>
    4896:	50 c0       	rjmp	.+160    	; 0x4938 <dir_sdi+0x150>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
    4898:	82 e0       	ldi	r24, 0x02	; 2
    489a:	c8 16       	cp	r12, r24
    489c:	d1 04       	cpc	r13, r1
    489e:	e1 04       	cpc	r14, r1
    48a0:	f1 04       	cpc	r15, r1
    48a2:	08 f4       	brcc	.+2      	; 0x48a6 <dir_sdi+0xbe>
    48a4:	4b c0       	rjmp	.+150    	; 0x493c <dir_sdi+0x154>
    48a6:	e8 81       	ld	r30, Y
    48a8:	f9 81       	ldd	r31, Y+1	; 0x01
    48aa:	82 89       	ldd	r24, Z+18	; 0x12
    48ac:	93 89       	ldd	r25, Z+19	; 0x13
    48ae:	a4 89       	ldd	r26, Z+20	; 0x14
    48b0:	b5 89       	ldd	r27, Z+21	; 0x15
    48b2:	c8 16       	cp	r12, r24
    48b4:	d9 06       	cpc	r13, r25
    48b6:	ea 06       	cpc	r14, r26
    48b8:	fb 06       	cpc	r15, r27
    48ba:	08 f0       	brcs	.+2      	; 0x48be <dir_sdi+0xd6>
    48bc:	41 c0       	rjmp	.+130    	; 0x4940 <dir_sdi+0x158>
				return FR_INT_ERR;
			idx -= ic;
    48be:	0a 19       	sub	r16, r10
    48c0:	1b 09       	sbc	r17, r11
			return FR_INT_ERR;
		sect = dp->fs->dirbase;
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    48c2:	0a 15       	cp	r16, r10
    48c4:	1b 05       	cpc	r17, r11
    48c6:	d0 f6       	brcc	.-76     	; 0x487c <dir_sdi+0x94>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
				return FR_INT_ERR;
			idx -= ic;
		}
		sect = clust2sect(dp->fs, clst);
    48c8:	b7 01       	movw	r22, r14
    48ca:	a6 01       	movw	r20, r12
    48cc:	88 81       	ld	r24, Y
    48ce:	99 81       	ldd	r25, Y+1	; 0x01
    48d0:	80 de       	rcall	.-768    	; 0x45d2 <clust2sect>
	}
	dp->clust = clst;	/* Current cluster# */
    48d2:	ca 86       	std	Y+10, r12	; 0x0a
    48d4:	db 86       	std	Y+11, r13	; 0x0b
    48d6:	ec 86       	std	Y+12, r14	; 0x0c
    48d8:	fd 86       	std	Y+13, r15	; 0x0d
	if (!sect) return FR_INT_ERR;
    48da:	61 15       	cp	r22, r1
    48dc:	71 05       	cpc	r23, r1
    48de:	81 05       	cpc	r24, r1
    48e0:	91 05       	cpc	r25, r1
    48e2:	81 f1       	breq	.+96     	; 0x4944 <dir_sdi+0x15c>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
    48e4:	98 01       	movw	r18, r16
    48e6:	32 95       	swap	r19
    48e8:	22 95       	swap	r18
    48ea:	2f 70       	andi	r18, 0x0F	; 15
    48ec:	23 27       	eor	r18, r19
    48ee:	3f 70       	andi	r19, 0x0F	; 15
    48f0:	23 27       	eor	r18, r19
    48f2:	dc 01       	movw	r26, r24
    48f4:	cb 01       	movw	r24, r22
    48f6:	82 0f       	add	r24, r18
    48f8:	93 1f       	adc	r25, r19
    48fa:	a1 1d       	adc	r26, r1
    48fc:	b1 1d       	adc	r27, r1
    48fe:	8e 87       	std	Y+14, r24	; 0x0e
    4900:	9f 87       	std	Y+15, r25	; 0x0f
    4902:	a8 8b       	std	Y+16, r26	; 0x10
    4904:	b9 8b       	std	Y+17, r27	; 0x11
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
    4906:	88 81       	ld	r24, Y
    4908:	99 81       	ldd	r25, Y+1	; 0x01
    490a:	8e 96       	adiw	r24, 0x2e	; 46
    490c:	0f 70       	andi	r16, 0x0F	; 15
    490e:	11 27       	eor	r17, r17
    4910:	00 0f       	add	r16, r16
    4912:	11 1f       	adc	r17, r17
    4914:	02 95       	swap	r16
    4916:	12 95       	swap	r17
    4918:	10 7f       	andi	r17, 0xF0	; 240
    491a:	10 27       	eor	r17, r16
    491c:	00 7f       	andi	r16, 0xF0	; 240
    491e:	10 27       	eor	r17, r16
    4920:	08 0f       	add	r16, r24
    4922:	19 1f       	adc	r17, r25
    4924:	1b 8b       	std	Y+19, r17	; 0x13
    4926:	0a 8b       	std	Y+18, r16	; 0x12

	return FR_OK;
    4928:	80 e0       	ldi	r24, 0x00	; 0
    492a:	0d c0       	rjmp	.+26     	; 0x4946 <dir_sdi+0x15e>


	dp->index = (WORD)idx;	/* Current index */
	clst = dp->sclust;		/* Table start cluster (0:root) */
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
		return FR_INT_ERR;
    492c:	82 e0       	ldi	r24, 0x02	; 2
    492e:	0b c0       	rjmp	.+22     	; 0x4946 <dir_sdi+0x15e>
    4930:	82 e0       	ldi	r24, 0x02	; 2
    4932:	09 c0       	rjmp	.+18     	; 0x4946 <dir_sdi+0x15e>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = dp->fs->dirbase;

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
			return FR_INT_ERR;
    4934:	82 e0       	ldi	r24, 0x02	; 2
    4936:	07 c0       	rjmp	.+14     	; 0x4946 <dir_sdi+0x15e>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    4938:	81 e0       	ldi	r24, 0x01	; 1
    493a:	05 c0       	rjmp	.+10     	; 0x4946 <dir_sdi+0x15e>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
				return FR_INT_ERR;
    493c:	82 e0       	ldi	r24, 0x02	; 2
    493e:	03 c0       	rjmp	.+6      	; 0x4946 <dir_sdi+0x15e>
    4940:	82 e0       	ldi	r24, 0x02	; 2
    4942:	01 c0       	rjmp	.+2      	; 0x4946 <dir_sdi+0x15e>
			idx -= ic;
		}
		sect = clust2sect(dp->fs, clst);
	}
	dp->clust = clst;	/* Current cluster# */
	if (!sect) return FR_INT_ERR;
    4944:	82 e0       	ldi	r24, 0x02	; 2
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */

	return FR_OK;
}
    4946:	df 91       	pop	r29
    4948:	cf 91       	pop	r28
    494a:	1f 91       	pop	r17
    494c:	0f 91       	pop	r16
    494e:	ff 90       	pop	r15
    4950:	ef 90       	pop	r14
    4952:	df 90       	pop	r13
    4954:	cf 90       	pop	r12
    4956:	bf 90       	pop	r11
    4958:	af 90       	pop	r10
    495a:	08 95       	ret

0000495c <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
    495c:	4f 92       	push	r4
    495e:	5f 92       	push	r5
    4960:	6f 92       	push	r6
    4962:	7f 92       	push	r7
    4964:	9f 92       	push	r9
    4966:	af 92       	push	r10
    4968:	bf 92       	push	r11
    496a:	cf 92       	push	r12
    496c:	df 92       	push	r13
    496e:	ef 92       	push	r14
    4970:	ff 92       	push	r15
    4972:	0f 93       	push	r16
    4974:	1f 93       	push	r17
    4976:	cf 93       	push	r28
    4978:	df 93       	push	r29
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    497a:	42 30       	cpi	r20, 0x02	; 2
    497c:	51 05       	cpc	r21, r1
    497e:	61 05       	cpc	r22, r1
    4980:	71 05       	cpc	r23, r1
    4982:	08 f4       	brcc	.+2      	; 0x4986 <put_fat+0x2a>
    4984:	d6 c0       	rjmp	.+428    	; 0x4b32 <put_fat+0x1d6>
    4986:	fc 01       	movw	r30, r24
    4988:	c2 88       	ldd	r12, Z+18	; 0x12
    498a:	d3 88       	ldd	r13, Z+19	; 0x13
    498c:	e4 88       	ldd	r14, Z+20	; 0x14
    498e:	f5 88       	ldd	r15, Z+21	; 0x15
    4990:	4c 15       	cp	r20, r12
    4992:	5d 05       	cpc	r21, r13
    4994:	6e 05       	cpc	r22, r14
    4996:	7f 05       	cpc	r23, r15
    4998:	08 f0       	brcs	.+2      	; 0x499c <put_fat+0x40>
    499a:	cf c0       	rjmp	.+414    	; 0x4b3a <put_fat+0x1de>
    499c:	68 01       	movw	r12, r16
    499e:	79 01       	movw	r14, r18
    49a0:	2a 01       	movw	r4, r20
    49a2:	3b 01       	movw	r6, r22
    49a4:	ec 01       	movw	r28, r24
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
    49a6:	80 81       	ld	r24, Z
    49a8:	82 30       	cpi	r24, 0x02	; 2
    49aa:	09 f4       	brne	.+2      	; 0x49ae <put_fat+0x52>
    49ac:	62 c0       	rjmp	.+196    	; 0x4a72 <put_fat+0x116>
    49ae:	83 30       	cpi	r24, 0x03	; 3
    49b0:	09 f4       	brne	.+2      	; 0x49b4 <put_fat+0x58>
    49b2:	84 c0       	rjmp	.+264    	; 0x4abc <put_fat+0x160>
    49b4:	81 30       	cpi	r24, 0x01	; 1
    49b6:	09 f0       	breq	.+2      	; 0x49ba <put_fat+0x5e>
    49b8:	c4 c0       	rjmp	.+392    	; 0x4b42 <put_fat+0x1e6>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
    49ba:	8a 01       	movw	r16, r20
    49bc:	16 95       	lsr	r17
    49be:	07 95       	ror	r16
    49c0:	04 0f       	add	r16, r20
    49c2:	15 1f       	adc	r17, r21
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    49c4:	c8 01       	movw	r24, r16
    49c6:	89 2f       	mov	r24, r25
    49c8:	99 27       	eor	r25, r25
    49ca:	86 95       	lsr	r24
    49cc:	46 8d       	ldd	r20, Z+30	; 0x1e
    49ce:	57 8d       	ldd	r21, Z+31	; 0x1f
    49d0:	60 a1       	ldd	r22, Z+32	; 0x20
    49d2:	71 a1       	ldd	r23, Z+33	; 0x21
    49d4:	48 0f       	add	r20, r24
    49d6:	59 1f       	adc	r21, r25
    49d8:	61 1d       	adc	r22, r1
    49da:	71 1d       	adc	r23, r1
    49dc:	cf 01       	movw	r24, r30
    49de:	75 da       	rcall	.-2838   	; 0x3eca <move_window>
    49e0:	98 2e       	mov	r9, r24
			if (res != FR_OK) break;
    49e2:	81 11       	cpse	r24, r1
    49e4:	cd c0       	rjmp	.+410    	; 0x4b80 <put_fat+0x224>
			p = &fs->win[bc++ % SS(fs)];
    49e6:	58 01       	movw	r10, r16
    49e8:	ff ef       	ldi	r31, 0xFF	; 255
    49ea:	af 1a       	sub	r10, r31
    49ec:	bf 0a       	sbc	r11, r31
    49ee:	11 70       	andi	r17, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    49f0:	40 fe       	sbrs	r4, 0
    49f2:	20 c0       	rjmp	.+64     	; 0x4a34 <put_fat+0xd8>
    49f4:	fe 01       	movw	r30, r28
    49f6:	e0 0f       	add	r30, r16
    49f8:	f1 1f       	adc	r31, r17
    49fa:	86 a5       	ldd	r24, Z+46	; 0x2e
    49fc:	28 2f       	mov	r18, r24
    49fe:	2f 70       	andi	r18, 0x0F	; 15
    4a00:	30 e1       	ldi	r19, 0x10	; 16
    4a02:	c3 9e       	mul	r12, r19
    4a04:	c0 01       	movw	r24, r0
    4a06:	11 24       	eor	r1, r1
    4a08:	82 2b       	or	r24, r18
    4a0a:	86 a7       	std	Z+46, r24	; 0x2e
			fs->wflag = 1;
    4a0c:	81 e0       	ldi	r24, 0x01	; 1
    4a0e:	8c 83       	std	Y+4, r24	; 0x04
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    4a10:	4e 8d       	ldd	r20, Y+30	; 0x1e
    4a12:	5f 8d       	ldd	r21, Y+31	; 0x1f
    4a14:	68 a1       	ldd	r22, Y+32	; 0x20
    4a16:	79 a1       	ldd	r23, Y+33	; 0x21
    4a18:	c5 01       	movw	r24, r10
    4a1a:	89 2f       	mov	r24, r25
    4a1c:	99 27       	eor	r25, r25
    4a1e:	86 95       	lsr	r24
    4a20:	48 0f       	add	r20, r24
    4a22:	59 1f       	adc	r21, r25
    4a24:	61 1d       	adc	r22, r1
    4a26:	71 1d       	adc	r23, r1
    4a28:	ce 01       	movw	r24, r28
    4a2a:	4f da       	rcall	.-2914   	; 0x3eca <move_window>
			if (res != FR_OK) break;
    4a2c:	88 23       	and	r24, r24
    4a2e:	09 f4       	brne	.+2      	; 0x4a32 <put_fat+0xd6>
    4a30:	90 c0       	rjmp	.+288    	; 0x4b52 <put_fat+0x1f6>
    4a32:	8b c0       	rjmp	.+278    	; 0x4b4a <put_fat+0x1ee>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc++ % SS(fs)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    4a34:	fe 01       	movw	r30, r28
    4a36:	e0 0f       	add	r30, r16
    4a38:	f1 1f       	adc	r31, r17
    4a3a:	c6 a6       	std	Z+46, r12	; 0x2e
			fs->wflag = 1;
    4a3c:	81 e0       	ldi	r24, 0x01	; 1
    4a3e:	8c 83       	std	Y+4, r24	; 0x04
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    4a40:	4e 8d       	ldd	r20, Y+30	; 0x1e
    4a42:	5f 8d       	ldd	r21, Y+31	; 0x1f
    4a44:	68 a1       	ldd	r22, Y+32	; 0x20
    4a46:	79 a1       	ldd	r23, Y+33	; 0x21
    4a48:	c5 01       	movw	r24, r10
    4a4a:	89 2f       	mov	r24, r25
    4a4c:	99 27       	eor	r25, r25
    4a4e:	86 95       	lsr	r24
    4a50:	48 0f       	add	r20, r24
    4a52:	59 1f       	adc	r21, r25
    4a54:	61 1d       	adc	r22, r1
    4a56:	71 1d       	adc	r23, r1
    4a58:	ce 01       	movw	r24, r28
    4a5a:	37 da       	rcall	.-2962   	; 0x3eca <move_window>
			if (res != FR_OK) break;
    4a5c:	88 23       	and	r24, r24
    4a5e:	09 f4       	brne	.+2      	; 0x4a62 <put_fat+0x106>
    4a60:	83 c0       	rjmp	.+262    	; 0x4b68 <put_fat+0x20c>
    4a62:	75 c0       	rjmp	.+234    	; 0x4b4e <put_fat+0x1f2>
			p = &fs->win[bc % SS(fs)];
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    4a64:	fe 01       	movw	r30, r28
    4a66:	ea 0d       	add	r30, r10
    4a68:	fb 1d       	adc	r31, r11
    4a6a:	c6 a6       	std	Z+46, r12	; 0x2e
			fs->wflag = 1;
    4a6c:	81 e0       	ldi	r24, 0x01	; 1
    4a6e:	8c 83       	std	Y+4, r24	; 0x04
			break;
    4a70:	87 c0       	rjmp	.+270    	; 0x4b80 <put_fat+0x224>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    4a72:	45 2f       	mov	r20, r21
    4a74:	56 2f       	mov	r21, r22
    4a76:	67 2f       	mov	r22, r23
    4a78:	77 27       	eor	r23, r23
    4a7a:	86 8d       	ldd	r24, Z+30	; 0x1e
    4a7c:	97 8d       	ldd	r25, Z+31	; 0x1f
    4a7e:	a0 a1       	ldd	r26, Z+32	; 0x20
    4a80:	b1 a1       	ldd	r27, Z+33	; 0x21
    4a82:	48 0f       	add	r20, r24
    4a84:	59 1f       	adc	r21, r25
    4a86:	6a 1f       	adc	r22, r26
    4a88:	7b 1f       	adc	r23, r27
    4a8a:	cf 01       	movw	r24, r30
    4a8c:	1e da       	rcall	.-3012   	; 0x3eca <move_window>
    4a8e:	98 2e       	mov	r9, r24
			if (res != FR_OK) break;
    4a90:	81 11       	cpse	r24, r1
    4a92:	76 c0       	rjmp	.+236    	; 0x4b80 <put_fat+0x224>
			p = &fs->win[clst * 2 % SS(fs)];
    4a94:	b3 01       	movw	r22, r6
    4a96:	a2 01       	movw	r20, r4
    4a98:	44 0f       	add	r20, r20
    4a9a:	55 1f       	adc	r21, r21
    4a9c:	66 1f       	adc	r22, r22
    4a9e:	77 1f       	adc	r23, r23
    4aa0:	4e 7f       	andi	r20, 0xFE	; 254
    4aa2:	51 70       	andi	r21, 0x01	; 1
    4aa4:	66 27       	eor	r22, r22
    4aa6:	77 27       	eor	r23, r23
    4aa8:	42 5d       	subi	r20, 0xD2	; 210
    4aaa:	5f 4f       	sbci	r21, 0xFF	; 255
			ST_WORD(p, (WORD)val);
    4aac:	fe 01       	movw	r30, r28
    4aae:	e4 0f       	add	r30, r20
    4ab0:	f5 1f       	adc	r31, r21
    4ab2:	d1 82       	std	Z+1, r13	; 0x01
    4ab4:	c0 82       	st	Z, r12
			fs->wflag = 1;
    4ab6:	81 e0       	ldi	r24, 0x01	; 1
    4ab8:	8c 83       	std	Y+4, r24	; 0x04
			break;
    4aba:	62 c0       	rjmp	.+196    	; 0x4b80 <put_fat+0x224>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    4abc:	86 8d       	ldd	r24, Z+30	; 0x1e
    4abe:	97 8d       	ldd	r25, Z+31	; 0x1f
    4ac0:	a0 a1       	ldd	r26, Z+32	; 0x20
    4ac2:	b1 a1       	ldd	r27, Z+33	; 0x21
    4ac4:	68 94       	set
    4ac6:	16 f8       	bld	r1, 6
    4ac8:	76 95       	lsr	r23
    4aca:	67 95       	ror	r22
    4acc:	57 95       	ror	r21
    4ace:	47 95       	ror	r20
    4ad0:	16 94       	lsr	r1
    4ad2:	d1 f7       	brne	.-12     	; 0x4ac8 <put_fat+0x16c>
    4ad4:	48 0f       	add	r20, r24
    4ad6:	59 1f       	adc	r21, r25
    4ad8:	6a 1f       	adc	r22, r26
    4ada:	7b 1f       	adc	r23, r27
    4adc:	cf 01       	movw	r24, r30
    4ade:	f5 d9       	rcall	.-3094   	; 0x3eca <move_window>
    4ae0:	98 2e       	mov	r9, r24
			if (res != FR_OK) break;
    4ae2:	81 11       	cpse	r24, r1
    4ae4:	4d c0       	rjmp	.+154    	; 0x4b80 <put_fat+0x224>
			p = &fs->win[clst * 4 % SS(fs)];
    4ae6:	b3 01       	movw	r22, r6
    4ae8:	a2 01       	movw	r20, r4
    4aea:	44 0f       	add	r20, r20
    4aec:	55 1f       	adc	r21, r21
    4aee:	66 1f       	adc	r22, r22
    4af0:	77 1f       	adc	r23, r23
    4af2:	44 0f       	add	r20, r20
    4af4:	55 1f       	adc	r21, r21
    4af6:	66 1f       	adc	r22, r22
    4af8:	77 1f       	adc	r23, r23
    4afa:	4c 7f       	andi	r20, 0xFC	; 252
    4afc:	51 70       	andi	r21, 0x01	; 1
    4afe:	66 27       	eor	r22, r22
    4b00:	77 27       	eor	r23, r23
    4b02:	42 5d       	subi	r20, 0xD2	; 210
    4b04:	5f 4f       	sbci	r21, 0xFF	; 255
    4b06:	fe 01       	movw	r30, r28
    4b08:	e4 0f       	add	r30, r20
    4b0a:	f5 1f       	adc	r31, r21
			val |= LD_DWORD(p) & 0xF0000000;
			ST_DWORD(p, val);
    4b0c:	00 81       	ld	r16, Z
    4b0e:	11 81       	ldd	r17, Z+1	; 0x01
    4b10:	22 81       	ldd	r18, Z+2	; 0x02
    4b12:	33 81       	ldd	r19, Z+3	; 0x03
    4b14:	00 27       	eor	r16, r16
    4b16:	11 27       	eor	r17, r17
    4b18:	22 27       	eor	r18, r18
    4b1a:	30 7f       	andi	r19, 0xF0	; 240
    4b1c:	c0 2a       	or	r12, r16
    4b1e:	d1 2a       	or	r13, r17
    4b20:	e2 2a       	or	r14, r18
    4b22:	f3 2a       	or	r15, r19
    4b24:	c0 82       	st	Z, r12
    4b26:	d1 82       	std	Z+1, r13	; 0x01
    4b28:	e2 82       	std	Z+2, r14	; 0x02
    4b2a:	f3 82       	std	Z+3, r15	; 0x03
			fs->wflag = 1;
    4b2c:	81 e0       	ldi	r24, 0x01	; 1
    4b2e:	8c 83       	std	Y+4, r24	; 0x04
			break;
    4b30:	27 c0       	rjmp	.+78     	; 0x4b80 <put_fat+0x224>
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
    4b32:	68 94       	set
    4b34:	99 24       	eor	r9, r9
    4b36:	91 f8       	bld	r9, 1
    4b38:	23 c0       	rjmp	.+70     	; 0x4b80 <put_fat+0x224>
    4b3a:	68 94       	set
    4b3c:	99 24       	eor	r9, r9
    4b3e:	91 f8       	bld	r9, 1
    4b40:	1f c0       	rjmp	.+62     	; 0x4b80 <put_fat+0x224>
			ST_DWORD(p, val);
			fs->wflag = 1;
			break;

		default :
			res = FR_INT_ERR;
    4b42:	68 94       	set
    4b44:	99 24       	eor	r9, r9
    4b46:	91 f8       	bld	r9, 1
    4b48:	1b c0       	rjmp	.+54     	; 0x4b80 <put_fat+0x224>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc++ % SS(fs)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    4b4a:	98 2e       	mov	r9, r24
    4b4c:	19 c0       	rjmp	.+50     	; 0x4b80 <put_fat+0x224>
    4b4e:	98 2e       	mov	r9, r24
		default :
			res = FR_INT_ERR;
		}
	}

	return res;
    4b50:	17 c0       	rjmp	.+46     	; 0x4b80 <put_fat+0x224>
			p = &fs->win[bc++ % SS(fs)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc % SS(fs)];
    4b52:	81 e0       	ldi	r24, 0x01	; 1
    4b54:	b8 22       	and	r11, r24
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    4b56:	68 94       	set
    4b58:	13 f8       	bld	r1, 3
    4b5a:	f6 94       	lsr	r15
    4b5c:	e7 94       	ror	r14
    4b5e:	d7 94       	ror	r13
    4b60:	c7 94       	ror	r12
    4b62:	16 94       	lsr	r1
    4b64:	d1 f7       	brne	.-12     	; 0x4b5a <put_fat+0x1fe>
    4b66:	7e cf       	rjmp	.-260    	; 0x4a64 <put_fat+0x108>
			p = &fs->win[bc++ % SS(fs)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc % SS(fs)];
    4b68:	e1 e0       	ldi	r30, 0x01	; 1
    4b6a:	be 22       	and	r11, r30
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    4b6c:	fe 01       	movw	r30, r28
    4b6e:	ea 0d       	add	r30, r10
    4b70:	fb 1d       	adc	r31, r11
    4b72:	96 a5       	ldd	r25, Z+46	; 0x2e
    4b74:	90 7f       	andi	r25, 0xF0	; 240
    4b76:	8d 2d       	mov	r24, r13
    4b78:	8f 70       	andi	r24, 0x0F	; 15
    4b7a:	c9 2e       	mov	r12, r25
    4b7c:	c8 2a       	or	r12, r24
    4b7e:	72 cf       	rjmp	.-284    	; 0x4a64 <put_fat+0x108>
			res = FR_INT_ERR;
		}
	}

	return res;
}
    4b80:	89 2d       	mov	r24, r9
    4b82:	df 91       	pop	r29
    4b84:	cf 91       	pop	r28
    4b86:	1f 91       	pop	r17
    4b88:	0f 91       	pop	r16
    4b8a:	ff 90       	pop	r15
    4b8c:	ef 90       	pop	r14
    4b8e:	df 90       	pop	r13
    4b90:	cf 90       	pop	r12
    4b92:	bf 90       	pop	r11
    4b94:	af 90       	pop	r10
    4b96:	9f 90       	pop	r9
    4b98:	7f 90       	pop	r7
    4b9a:	6f 90       	pop	r6
    4b9c:	5f 90       	pop	r5
    4b9e:	4f 90       	pop	r4
    4ba0:	08 95       	ret

00004ba2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    4ba2:	4f 92       	push	r4
    4ba4:	5f 92       	push	r5
    4ba6:	6f 92       	push	r6
    4ba8:	7f 92       	push	r7
    4baa:	8f 92       	push	r8
    4bac:	9f 92       	push	r9
    4bae:	af 92       	push	r10
    4bb0:	bf 92       	push	r11
    4bb2:	cf 92       	push	r12
    4bb4:	df 92       	push	r13
    4bb6:	ef 92       	push	r14
    4bb8:	ff 92       	push	r15
    4bba:	0f 93       	push	r16
    4bbc:	1f 93       	push	r17
    4bbe:	cf 93       	push	r28
    4bc0:	df 93       	push	r29
    4bc2:	ec 01       	movw	r28, r24
    4bc4:	2a 01       	movw	r4, r20
    4bc6:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    4bc8:	41 15       	cp	r20, r1
    4bca:	51 05       	cpc	r21, r1
    4bcc:	61 05       	cpc	r22, r1
    4bce:	71 05       	cpc	r23, r1
    4bd0:	b9 f4       	brne	.+46     	; 0x4c00 <create_chain+0x5e>
		scl = fs->last_clust;			/* Get suggested start point */
    4bd2:	8a 84       	ldd	r8, Y+10	; 0x0a
    4bd4:	9b 84       	ldd	r9, Y+11	; 0x0b
    4bd6:	ac 84       	ldd	r10, Y+12	; 0x0c
    4bd8:	bd 84       	ldd	r11, Y+13	; 0x0d
		if (!scl || scl >= fs->n_fatent) scl = 1;
    4bda:	81 14       	cp	r8, r1
    4bdc:	91 04       	cpc	r9, r1
    4bde:	a1 04       	cpc	r10, r1
    4be0:	b1 04       	cpc	r11, r1
    4be2:	59 f1       	breq	.+86     	; 0x4c3a <create_chain+0x98>
    4be4:	8a 89       	ldd	r24, Y+18	; 0x12
    4be6:	9b 89       	ldd	r25, Y+19	; 0x13
    4be8:	ac 89       	ldd	r26, Y+20	; 0x14
    4bea:	bd 89       	ldd	r27, Y+21	; 0x15
    4bec:	88 16       	cp	r8, r24
    4bee:	99 06       	cpc	r9, r25
    4bf0:	aa 06       	cpc	r10, r26
    4bf2:	bb 06       	cpc	r11, r27
    4bf4:	30 f1       	brcs	.+76     	; 0x4c42 <create_chain+0xa0>
    4bf6:	81 2c       	mov	r8, r1
    4bf8:	91 2c       	mov	r9, r1
    4bfa:	54 01       	movw	r10, r8
    4bfc:	83 94       	inc	r8
    4bfe:	21 c0       	rjmp	.+66     	; 0x4c42 <create_chain+0xa0>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    4c00:	10 dd       	rcall	.-1504   	; 0x4622 <get_fat>
    4c02:	6b 01       	movw	r12, r22
    4c04:	7c 01       	movw	r14, r24
		if (cs < 2) return 1;			/* Invalid value */
    4c06:	62 30       	cpi	r22, 0x02	; 2
    4c08:	71 05       	cpc	r23, r1
    4c0a:	81 05       	cpc	r24, r1
    4c0c:	91 05       	cpc	r25, r1
    4c0e:	08 f4       	brcc	.+2      	; 0x4c12 <create_chain+0x70>
    4c10:	8b c0       	rjmp	.+278    	; 0x4d28 <create_chain+0x186>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
    4c12:	8f ef       	ldi	r24, 0xFF	; 255
    4c14:	c8 16       	cp	r12, r24
    4c16:	d8 06       	cpc	r13, r24
    4c18:	e8 06       	cpc	r14, r24
    4c1a:	f8 06       	cpc	r15, r24
    4c1c:	09 f4       	brne	.+2      	; 0x4c20 <create_chain+0x7e>
    4c1e:	89 c0       	rjmp	.+274    	; 0x4d32 <create_chain+0x190>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    4c20:	8a 89       	ldd	r24, Y+18	; 0x12
    4c22:	9b 89       	ldd	r25, Y+19	; 0x13
    4c24:	ac 89       	ldd	r26, Y+20	; 0x14
    4c26:	bd 89       	ldd	r27, Y+21	; 0x15
    4c28:	c8 16       	cp	r12, r24
    4c2a:	d9 06       	cpc	r13, r25
    4c2c:	ea 06       	cpc	r14, r26
    4c2e:	fb 06       	cpc	r15, r27
    4c30:	08 f4       	brcc	.+2      	; 0x4c34 <create_chain+0x92>
    4c32:	84 c0       	rjmp	.+264    	; 0x4d3c <create_chain+0x19a>
		scl = clst;
    4c34:	53 01       	movw	r10, r6
    4c36:	42 01       	movw	r8, r4
    4c38:	04 c0       	rjmp	.+8      	; 0x4c42 <create_chain+0xa0>
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
    4c3a:	81 2c       	mov	r8, r1
    4c3c:	91 2c       	mov	r9, r1
    4c3e:	54 01       	movw	r10, r8
    4c40:	83 94       	inc	r8
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
    4c42:	75 01       	movw	r14, r10
    4c44:	64 01       	movw	r12, r8
	for (;;) {
		ncl++;							/* Next cluster */
    4c46:	2f ef       	ldi	r18, 0xFF	; 255
    4c48:	c2 1a       	sub	r12, r18
    4c4a:	d2 0a       	sbc	r13, r18
    4c4c:	e2 0a       	sbc	r14, r18
    4c4e:	f2 0a       	sbc	r15, r18
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
    4c50:	8a 89       	ldd	r24, Y+18	; 0x12
    4c52:	9b 89       	ldd	r25, Y+19	; 0x13
    4c54:	ac 89       	ldd	r26, Y+20	; 0x14
    4c56:	bd 89       	ldd	r27, Y+21	; 0x15
    4c58:	c8 16       	cp	r12, r24
    4c5a:	d9 06       	cpc	r13, r25
    4c5c:	ea 06       	cpc	r14, r26
    4c5e:	fb 06       	cpc	r15, r27
    4c60:	60 f0       	brcs	.+24     	; 0x4c7a <create_chain+0xd8>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    4c62:	82 e0       	ldi	r24, 0x02	; 2
    4c64:	88 16       	cp	r8, r24
    4c66:	91 04       	cpc	r9, r1
    4c68:	a1 04       	cpc	r10, r1
    4c6a:	b1 04       	cpc	r11, r1
    4c6c:	08 f4       	brcc	.+2      	; 0x4c70 <create_chain+0xce>
    4c6e:	6b c0       	rjmp	.+214    	; 0x4d46 <create_chain+0x1a4>

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
			ncl = 2;
    4c70:	c1 2c       	mov	r12, r1
    4c72:	d1 2c       	mov	r13, r1
    4c74:	76 01       	movw	r14, r12
    4c76:	68 94       	set
    4c78:	c1 f8       	bld	r12, 1
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    4c7a:	b7 01       	movw	r22, r14
    4c7c:	a6 01       	movw	r20, r12
    4c7e:	ce 01       	movw	r24, r28
    4c80:	d0 dc       	rcall	.-1632   	; 0x4622 <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
    4c82:	61 15       	cp	r22, r1
    4c84:	71 05       	cpc	r23, r1
    4c86:	81 05       	cpc	r24, r1
    4c88:	91 05       	cpc	r25, r1
    4c8a:	99 f0       	breq	.+38     	; 0x4cb2 <create_chain+0x110>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    4c8c:	6f 3f       	cpi	r22, 0xFF	; 255
    4c8e:	2f ef       	ldi	r18, 0xFF	; 255
    4c90:	72 07       	cpc	r23, r18
    4c92:	82 07       	cpc	r24, r18
    4c94:	92 07       	cpc	r25, r18
    4c96:	09 f4       	brne	.+2      	; 0x4c9a <create_chain+0xf8>
    4c98:	5b c0       	rjmp	.+182    	; 0x4d50 <create_chain+0x1ae>
    4c9a:	61 30       	cpi	r22, 0x01	; 1
    4c9c:	71 05       	cpc	r23, r1
    4c9e:	81 05       	cpc	r24, r1
    4ca0:	91 05       	cpc	r25, r1
    4ca2:	09 f4       	brne	.+2      	; 0x4ca6 <create_chain+0x104>
    4ca4:	5a c0       	rjmp	.+180    	; 0x4d5a <create_chain+0x1b8>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    4ca6:	c8 14       	cp	r12, r8
    4ca8:	d9 04       	cpc	r13, r9
    4caa:	ea 04       	cpc	r14, r10
    4cac:	fb 04       	cpc	r15, r11
    4cae:	59 f6       	brne	.-106    	; 0x4c46 <create_chain+0xa4>
    4cb0:	59 c0       	rjmp	.+178    	; 0x4d64 <create_chain+0x1c2>
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    4cb2:	0f ef       	ldi	r16, 0xFF	; 255
    4cb4:	1f ef       	ldi	r17, 0xFF	; 255
    4cb6:	2f ef       	ldi	r18, 0xFF	; 255
    4cb8:	3f e0       	ldi	r19, 0x0F	; 15
    4cba:	b7 01       	movw	r22, r14
    4cbc:	a6 01       	movw	r20, r12
    4cbe:	ce 01       	movw	r24, r28
    4cc0:	4d de       	rcall	.-870    	; 0x495c <put_fat>
	if (res == FR_OK && clst != 0) {
    4cc2:	81 11       	cpse	r24, r1
    4cc4:	2a c0       	rjmp	.+84     	; 0x4d1a <create_chain+0x178>
    4cc6:	41 14       	cp	r4, r1
    4cc8:	51 04       	cpc	r5, r1
    4cca:	61 04       	cpc	r6, r1
    4ccc:	71 04       	cpc	r7, r1
    4cce:	41 f0       	breq	.+16     	; 0x4ce0 <create_chain+0x13e>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    4cd0:	97 01       	movw	r18, r14
    4cd2:	86 01       	movw	r16, r12
    4cd4:	b3 01       	movw	r22, r6
    4cd6:	a2 01       	movw	r20, r4
    4cd8:	ce 01       	movw	r24, r28
    4cda:	40 de       	rcall	.-896    	; 0x495c <put_fat>
	}
	if (res == FR_OK) {
    4cdc:	81 11       	cpse	r24, r1
    4cde:	1d c0       	rjmp	.+58     	; 0x4d1a <create_chain+0x178>
		fs->last_clust = ncl;			/* Update FSINFO */
    4ce0:	ca 86       	std	Y+10, r12	; 0x0a
    4ce2:	db 86       	std	Y+11, r13	; 0x0b
    4ce4:	ec 86       	std	Y+12, r14	; 0x0c
    4ce6:	fd 86       	std	Y+13, r15	; 0x0d
		if (fs->free_clust != 0xFFFFFFFF) {
    4ce8:	8e 85       	ldd	r24, Y+14	; 0x0e
    4cea:	9f 85       	ldd	r25, Y+15	; 0x0f
    4cec:	a8 89       	ldd	r26, Y+16	; 0x10
    4cee:	b9 89       	ldd	r27, Y+17	; 0x11
    4cf0:	8f 3f       	cpi	r24, 0xFF	; 255
    4cf2:	2f ef       	ldi	r18, 0xFF	; 255
    4cf4:	92 07       	cpc	r25, r18
    4cf6:	a2 07       	cpc	r26, r18
    4cf8:	b2 07       	cpc	r27, r18
    4cfa:	c9 f1       	breq	.+114    	; 0x4d6e <create_chain+0x1cc>
			fs->free_clust--;
    4cfc:	01 97       	sbiw	r24, 0x01	; 1
    4cfe:	a1 09       	sbc	r26, r1
    4d00:	b1 09       	sbc	r27, r1
    4d02:	8e 87       	std	Y+14, r24	; 0x0e
    4d04:	9f 87       	std	Y+15, r25	; 0x0f
    4d06:	a8 8b       	std	Y+16, r26	; 0x10
    4d08:	b9 8b       	std	Y+17, r27	; 0x11
			fs->fsi_flag |= 1;
    4d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    4d0c:	81 60       	ori	r24, 0x01	; 1
    4d0e:	8d 83       	std	Y+5, r24	; 0x05
    4d10:	6c 2d       	mov	r22, r12
    4d12:	7d 2d       	mov	r23, r13
    4d14:	8e 2d       	mov	r24, r14
    4d16:	9f 2d       	mov	r25, r15
    4d18:	33 c0       	rjmp	.+102    	; 0x4d80 <create_chain+0x1de>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    4d1a:	81 30       	cpi	r24, 0x01	; 1
    4d1c:	69 f1       	breq	.+90     	; 0x4d78 <create_chain+0x1d6>
    4d1e:	61 e0       	ldi	r22, 0x01	; 1
    4d20:	70 e0       	ldi	r23, 0x00	; 0
    4d22:	80 e0       	ldi	r24, 0x00	; 0
    4d24:	90 e0       	ldi	r25, 0x00	; 0
    4d26:	2c c0       	rjmp	.+88     	; 0x4d80 <create_chain+0x1de>
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
		if (cs < 2) return 1;			/* Invalid value */
    4d28:	61 e0       	ldi	r22, 0x01	; 1
    4d2a:	70 e0       	ldi	r23, 0x00	; 0
    4d2c:	80 e0       	ldi	r24, 0x00	; 0
    4d2e:	90 e0       	ldi	r25, 0x00	; 0
    4d30:	27 c0       	rjmp	.+78     	; 0x4d80 <create_chain+0x1de>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
    4d32:	6f ef       	ldi	r22, 0xFF	; 255
    4d34:	7f ef       	ldi	r23, 0xFF	; 255
    4d36:	8f ef       	ldi	r24, 0xFF	; 255
    4d38:	9f ef       	ldi	r25, 0xFF	; 255
    4d3a:	22 c0       	rjmp	.+68     	; 0x4d80 <create_chain+0x1de>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    4d3c:	6c 2d       	mov	r22, r12
    4d3e:	7d 2d       	mov	r23, r13
    4d40:	8e 2d       	mov	r24, r14
    4d42:	9f 2d       	mov	r25, r15
    4d44:	1d c0       	rjmp	.+58     	; 0x4d80 <create_chain+0x1de>
	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    4d46:	60 e0       	ldi	r22, 0x00	; 0
    4d48:	70 e0       	ldi	r23, 0x00	; 0
    4d4a:	80 e0       	ldi	r24, 0x00	; 0
    4d4c:	90 e0       	ldi	r25, 0x00	; 0
    4d4e:	18 c0       	rjmp	.+48     	; 0x4d80 <create_chain+0x1de>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
    4d50:	6f ef       	ldi	r22, 0xFF	; 255
    4d52:	7f ef       	ldi	r23, 0xFF	; 255
    4d54:	8f ef       	ldi	r24, 0xFF	; 255
    4d56:	9f ef       	ldi	r25, 0xFF	; 255
    4d58:	13 c0       	rjmp	.+38     	; 0x4d80 <create_chain+0x1de>
    4d5a:	61 e0       	ldi	r22, 0x01	; 1
    4d5c:	70 e0       	ldi	r23, 0x00	; 0
    4d5e:	80 e0       	ldi	r24, 0x00	; 0
    4d60:	90 e0       	ldi	r25, 0x00	; 0
    4d62:	0e c0       	rjmp	.+28     	; 0x4d80 <create_chain+0x1de>
		if (ncl == scl) return 0;		/* No free cluster */
    4d64:	60 e0       	ldi	r22, 0x00	; 0
    4d66:	70 e0       	ldi	r23, 0x00	; 0
    4d68:	80 e0       	ldi	r24, 0x00	; 0
    4d6a:	90 e0       	ldi	r25, 0x00	; 0
    4d6c:	09 c0       	rjmp	.+18     	; 0x4d80 <create_chain+0x1de>
    4d6e:	6c 2d       	mov	r22, r12
    4d70:	7d 2d       	mov	r23, r13
    4d72:	8e 2d       	mov	r24, r14
    4d74:	9f 2d       	mov	r25, r15
    4d76:	04 c0       	rjmp	.+8      	; 0x4d80 <create_chain+0x1de>
		if (fs->free_clust != 0xFFFFFFFF) {
			fs->free_clust--;
			fs->fsi_flag |= 1;
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    4d78:	6f ef       	ldi	r22, 0xFF	; 255
    4d7a:	7f ef       	ldi	r23, 0xFF	; 255
    4d7c:	8f ef       	ldi	r24, 0xFF	; 255
    4d7e:	9f ef       	ldi	r25, 0xFF	; 255
	}

	return ncl;		/* Return new cluster number or error code */
}
    4d80:	df 91       	pop	r29
    4d82:	cf 91       	pop	r28
    4d84:	1f 91       	pop	r17
    4d86:	0f 91       	pop	r16
    4d88:	ff 90       	pop	r15
    4d8a:	ef 90       	pop	r14
    4d8c:	df 90       	pop	r13
    4d8e:	cf 90       	pop	r12
    4d90:	bf 90       	pop	r11
    4d92:	af 90       	pop	r10
    4d94:	9f 90       	pop	r9
    4d96:	8f 90       	pop	r8
    4d98:	7f 90       	pop	r7
    4d9a:	6f 90       	pop	r6
    4d9c:	5f 90       	pop	r5
    4d9e:	4f 90       	pop	r4
    4da0:	08 95       	ret

00004da2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    4da2:	7f 92       	push	r7
    4da4:	8f 92       	push	r8
    4da6:	9f 92       	push	r9
    4da8:	af 92       	push	r10
    4daa:	bf 92       	push	r11
    4dac:	cf 92       	push	r12
    4dae:	df 92       	push	r13
    4db0:	ef 92       	push	r14
    4db2:	ff 92       	push	r15
    4db4:	0f 93       	push	r16
    4db6:	1f 93       	push	r17
    4db8:	cf 93       	push	r28
    4dba:	df 93       	push	r29
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
    4dbc:	dc 01       	movw	r26, r24
    4dbe:	14 96       	adiw	r26, 0x04	; 4
    4dc0:	cd 91       	ld	r28, X+
    4dc2:	dc 91       	ld	r29, X
    4dc4:	15 97       	sbiw	r26, 0x05	; 5
    4dc6:	21 96       	adiw	r28, 0x01	; 1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
    4dc8:	09 f4       	brne	.+2      	; 0x4dcc <dir_next+0x2a>
    4dca:	fd c0       	rjmp	.+506    	; 0x4fc6 <dir_next+0x224>
    4dcc:	1e 96       	adiw	r26, 0x0e	; 14
    4dce:	8d 90       	ld	r8, X+
    4dd0:	9d 90       	ld	r9, X+
    4dd2:	ad 90       	ld	r10, X+
    4dd4:	bc 90       	ld	r11, X
    4dd6:	51 97       	sbiw	r26, 0x11	; 17
    4dd8:	81 14       	cp	r8, r1
    4dda:	91 04       	cpc	r9, r1
    4ddc:	a1 04       	cpc	r10, r1
    4dde:	b1 04       	cpc	r11, r1
    4de0:	09 f4       	brne	.+2      	; 0x4de4 <dir_next+0x42>
    4de2:	f3 c0       	rjmp	.+486    	; 0x4fca <dir_next+0x228>
    4de4:	7b 01       	movw	r14, r22
    4de6:	8c 01       	movw	r16, r24
		return FR_NO_FILE;

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
    4de8:	6e 01       	movw	r12, r28
    4dea:	bf e0       	ldi	r27, 0x0F	; 15
    4dec:	cb 22       	and	r12, r27
    4dee:	dd 24       	eor	r13, r13
    4df0:	c1 14       	cp	r12, r1
    4df2:	d1 04       	cpc	r13, r1
    4df4:	09 f0       	breq	.+2      	; 0x4df8 <dir_next+0x56>
    4df6:	d1 c0       	rjmp	.+418    	; 0x4f9a <dir_next+0x1f8>
		dp->sect++;					/* Next sector */
    4df8:	ef ef       	ldi	r30, 0xFF	; 255
    4dfa:	8e 1a       	sub	r8, r30
    4dfc:	9e 0a       	sbc	r9, r30
    4dfe:	ae 0a       	sbc	r10, r30
    4e00:	be 0a       	sbc	r11, r30
    4e02:	dc 01       	movw	r26, r24
    4e04:	1e 96       	adiw	r26, 0x0e	; 14
    4e06:	8d 92       	st	X+, r8
    4e08:	9d 92       	st	X+, r9
    4e0a:	ad 92       	st	X+, r10
    4e0c:	bc 92       	st	X, r11
    4e0e:	51 97       	sbiw	r26, 0x11	; 17

		if (!dp->clust) {		/* Static table */
    4e10:	1a 96       	adiw	r26, 0x0a	; 10
    4e12:	4d 91       	ld	r20, X+
    4e14:	5d 91       	ld	r21, X+
    4e16:	6d 91       	ld	r22, X+
    4e18:	7c 91       	ld	r23, X
    4e1a:	1d 97       	sbiw	r26, 0x0d	; 13
    4e1c:	41 15       	cp	r20, r1
    4e1e:	51 05       	cpc	r21, r1
    4e20:	61 05       	cpc	r22, r1
    4e22:	71 05       	cpc	r23, r1
    4e24:	49 f4       	brne	.+18     	; 0x4e38 <dir_next+0x96>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
    4e26:	ed 91       	ld	r30, X+
    4e28:	fc 91       	ld	r31, X
    4e2a:	80 85       	ldd	r24, Z+8	; 0x08
    4e2c:	91 85       	ldd	r25, Z+9	; 0x09
    4e2e:	c8 17       	cp	r28, r24
    4e30:	d9 07       	cpc	r29, r25
    4e32:	08 f0       	brcs	.+2      	; 0x4e36 <dir_next+0x94>
    4e34:	cc c0       	rjmp	.+408    	; 0x4fce <dir_next+0x22c>
    4e36:	b1 c0       	rjmp	.+354    	; 0x4f9a <dir_next+0x1f8>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
    4e38:	dc 01       	movw	r26, r24
    4e3a:	ed 91       	ld	r30, X+
    4e3c:	fc 91       	ld	r31, X
    4e3e:	22 81       	ldd	r18, Z+2	; 0x02
    4e40:	30 e0       	ldi	r19, 0x00	; 0
    4e42:	21 50       	subi	r18, 0x01	; 1
    4e44:	31 09       	sbc	r19, r1
    4e46:	ce 01       	movw	r24, r28
    4e48:	92 95       	swap	r25
    4e4a:	82 95       	swap	r24
    4e4c:	8f 70       	andi	r24, 0x0F	; 15
    4e4e:	89 27       	eor	r24, r25
    4e50:	9f 70       	andi	r25, 0x0F	; 15
    4e52:	89 27       	eor	r24, r25
    4e54:	28 23       	and	r18, r24
    4e56:	39 23       	and	r19, r25
    4e58:	23 2b       	or	r18, r19
    4e5a:	09 f0       	breq	.+2      	; 0x4e5e <dir_next+0xbc>
    4e5c:	9e c0       	rjmp	.+316    	; 0x4f9a <dir_next+0x1f8>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
    4e5e:	cf 01       	movw	r24, r30
    4e60:	e0 db       	rcall	.-2112   	; 0x4622 <get_fat>
    4e62:	4b 01       	movw	r8, r22
    4e64:	5c 01       	movw	r10, r24
				if (clst <= 1) return FR_INT_ERR;
    4e66:	62 30       	cpi	r22, 0x02	; 2
    4e68:	71 05       	cpc	r23, r1
    4e6a:	81 05       	cpc	r24, r1
    4e6c:	91 05       	cpc	r25, r1
    4e6e:	08 f4       	brcc	.+2      	; 0x4e72 <dir_next+0xd0>
    4e70:	b0 c0       	rjmp	.+352    	; 0x4fd2 <dir_next+0x230>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    4e72:	6f 3f       	cpi	r22, 0xFF	; 255
    4e74:	7f 4f       	sbci	r23, 0xFF	; 255
    4e76:	8f 4f       	sbci	r24, 0xFF	; 255
    4e78:	9f 4f       	sbci	r25, 0xFF	; 255
    4e7a:	09 f4       	brne	.+2      	; 0x4e7e <dir_next+0xdc>
    4e7c:	ac c0       	rjmp	.+344    	; 0x4fd6 <dir_next+0x234>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
    4e7e:	d8 01       	movw	r26, r16
    4e80:	ed 91       	ld	r30, X+
    4e82:	fc 91       	ld	r31, X
    4e84:	82 89       	ldd	r24, Z+18	; 0x12
    4e86:	93 89       	ldd	r25, Z+19	; 0x13
    4e88:	a4 89       	ldd	r26, Z+20	; 0x14
    4e8a:	b5 89       	ldd	r27, Z+21	; 0x15
    4e8c:	88 16       	cp	r8, r24
    4e8e:	99 06       	cpc	r9, r25
    4e90:	aa 06       	cpc	r10, r26
    4e92:	bb 06       	cpc	r11, r27
    4e94:	08 f4       	brcc	.+2      	; 0x4e98 <dir_next+0xf6>
    4e96:	70 c0       	rjmp	.+224    	; 0x4f78 <dir_next+0x1d6>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
    4e98:	ef 28       	or	r14, r15
    4e9a:	09 f4       	brne	.+2      	; 0x4e9e <dir_next+0xfc>
    4e9c:	9e c0       	rjmp	.+316    	; 0x4fda <dir_next+0x238>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
    4e9e:	d8 01       	movw	r26, r16
    4ea0:	1a 96       	adiw	r26, 0x0a	; 10
    4ea2:	4d 91       	ld	r20, X+
    4ea4:	5d 91       	ld	r21, X+
    4ea6:	6d 91       	ld	r22, X+
    4ea8:	7c 91       	ld	r23, X
    4eaa:	1d 97       	sbiw	r26, 0x0d	; 13
    4eac:	cf 01       	movw	r24, r30
    4eae:	79 de       	rcall	.-782    	; 0x4ba2 <create_chain>
    4eb0:	4b 01       	movw	r8, r22
    4eb2:	5c 01       	movw	r10, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    4eb4:	61 15       	cp	r22, r1
    4eb6:	71 05       	cpc	r23, r1
    4eb8:	81 05       	cpc	r24, r1
    4eba:	91 05       	cpc	r25, r1
    4ebc:	09 f4       	brne	.+2      	; 0x4ec0 <dir_next+0x11e>
    4ebe:	8f c0       	rjmp	.+286    	; 0x4fde <dir_next+0x23c>
					if (clst == 1) return FR_INT_ERR;
    4ec0:	61 30       	cpi	r22, 0x01	; 1
    4ec2:	71 05       	cpc	r23, r1
    4ec4:	81 05       	cpc	r24, r1
    4ec6:	91 05       	cpc	r25, r1
    4ec8:	09 f4       	brne	.+2      	; 0x4ecc <dir_next+0x12a>
    4eca:	8b c0       	rjmp	.+278    	; 0x4fe2 <dir_next+0x240>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    4ecc:	6f 3f       	cpi	r22, 0xFF	; 255
    4ece:	7f 4f       	sbci	r23, 0xFF	; 255
    4ed0:	8f 4f       	sbci	r24, 0xFF	; 255
    4ed2:	9f 4f       	sbci	r25, 0xFF	; 255
    4ed4:	09 f4       	brne	.+2      	; 0x4ed8 <dir_next+0x136>
    4ed6:	87 c0       	rjmp	.+270    	; 0x4fe6 <dir_next+0x244>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
    4ed8:	d8 01       	movw	r26, r16
    4eda:	8d 91       	ld	r24, X+
    4edc:	9c 91       	ld	r25, X
    4ede:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <sync_window>
    4ee2:	81 11       	cpse	r24, r1
    4ee4:	82 c0       	rjmp	.+260    	; 0x4fea <dir_next+0x248>
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
    4ee6:	f8 01       	movw	r30, r16
    4ee8:	80 81       	ld	r24, Z
    4eea:	91 81       	ldd	r25, Z+1	; 0x01
    4eec:	fc 01       	movw	r30, r24
    4eee:	be 96       	adiw	r30, 0x2e	; 46
    4ef0:	82 5d       	subi	r24, 0xD2	; 210
    4ef2:	9d 4f       	sbci	r25, 0xFD	; 253
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    4ef4:	11 92       	st	Z+, r1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    4ef6:	e8 17       	cp	r30, r24
    4ef8:	f9 07       	cpc	r31, r25
    4efa:	e1 f7       	brne	.-8      	; 0x4ef4 <dir_next+0x152>
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
    4efc:	d8 01       	movw	r26, r16
    4efe:	ed 90       	ld	r14, X+
    4f00:	fc 90       	ld	r15, X
    4f02:	b5 01       	movw	r22, r10
    4f04:	a4 01       	movw	r20, r8
    4f06:	c7 01       	movw	r24, r14
    4f08:	64 db       	rcall	.-2360   	; 0x45d2 <clust2sect>
    4f0a:	f7 01       	movw	r30, r14
    4f0c:	62 a7       	std	Z+42, r22	; 0x2a
    4f0e:	73 a7       	std	Z+43, r23	; 0x2b
    4f10:	84 a7       	std	Z+44, r24	; 0x2c
    4f12:	95 a7       	std	Z+45, r25	; 0x2d
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
    4f14:	e1 2c       	mov	r14, r1
    4f16:	f1 2c       	mov	r15, r1
						dp->fs->wflag = 1;
    4f18:	77 24       	eor	r7, r7
    4f1a:	73 94       	inc	r7
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
    4f1c:	19 c0       	rjmp	.+50     	; 0x4f50 <dir_next+0x1ae>
						dp->fs->wflag = 1;
    4f1e:	74 82       	std	Z+4, r7	; 0x04
						if (sync_window(dp->fs)) return FR_DISK_ERR;
    4f20:	d8 01       	movw	r26, r16
    4f22:	8d 91       	ld	r24, X+
    4f24:	9c 91       	ld	r25, X
    4f26:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <sync_window>
    4f2a:	81 11       	cpse	r24, r1
    4f2c:	60 c0       	rjmp	.+192    	; 0x4fee <dir_next+0x24c>
						dp->fs->winsect++;
    4f2e:	d8 01       	movw	r26, r16
    4f30:	ed 91       	ld	r30, X+
    4f32:	fc 91       	ld	r31, X
    4f34:	82 a5       	ldd	r24, Z+42	; 0x2a
    4f36:	93 a5       	ldd	r25, Z+43	; 0x2b
    4f38:	a4 a5       	ldd	r26, Z+44	; 0x2c
    4f3a:	b5 a5       	ldd	r27, Z+45	; 0x2d
    4f3c:	01 96       	adiw	r24, 0x01	; 1
    4f3e:	a1 1d       	adc	r26, r1
    4f40:	b1 1d       	adc	r27, r1
    4f42:	82 a7       	std	Z+42, r24	; 0x2a
    4f44:	93 a7       	std	Z+43, r25	; 0x2b
    4f46:	a4 a7       	std	Z+44, r26	; 0x2c
    4f48:	b5 a7       	std	Z+45, r27	; 0x2d
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
    4f4a:	bf ef       	ldi	r27, 0xFF	; 255
    4f4c:	eb 1a       	sub	r14, r27
    4f4e:	fb 0a       	sbc	r15, r27
    4f50:	d8 01       	movw	r26, r16
    4f52:	ed 91       	ld	r30, X+
    4f54:	fc 91       	ld	r31, X
    4f56:	82 81       	ldd	r24, Z+2	; 0x02
    4f58:	90 e0       	ldi	r25, 0x00	; 0
    4f5a:	e8 16       	cp	r14, r24
    4f5c:	f9 06       	cpc	r15, r25
    4f5e:	f8 f2       	brcs	.-66     	; 0x4f1e <dir_next+0x17c>
						dp->fs->wflag = 1;
						if (sync_window(dp->fs)) return FR_DISK_ERR;
						dp->fs->winsect++;
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
    4f60:	82 a5       	ldd	r24, Z+42	; 0x2a
    4f62:	93 a5       	ldd	r25, Z+43	; 0x2b
    4f64:	a4 a5       	ldd	r26, Z+44	; 0x2c
    4f66:	b5 a5       	ldd	r27, Z+45	; 0x2d
    4f68:	8e 19       	sub	r24, r14
    4f6a:	9f 09       	sbc	r25, r15
    4f6c:	a1 09       	sbc	r26, r1
    4f6e:	b1 09       	sbc	r27, r1
    4f70:	82 a7       	std	Z+42, r24	; 0x2a
    4f72:	93 a7       	std	Z+43, r25	; 0x2b
    4f74:	a4 a7       	std	Z+44, r26	; 0x2c
    4f76:	b5 a7       	std	Z+45, r27	; 0x2d
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
    4f78:	f8 01       	movw	r30, r16
    4f7a:	82 86       	std	Z+10, r8	; 0x0a
    4f7c:	93 86       	std	Z+11, r9	; 0x0b
    4f7e:	a4 86       	std	Z+12, r10	; 0x0c
    4f80:	b5 86       	std	Z+13, r11	; 0x0d
				dp->sect = clust2sect(dp->fs, clst);
    4f82:	b5 01       	movw	r22, r10
    4f84:	a4 01       	movw	r20, r8
    4f86:	80 81       	ld	r24, Z
    4f88:	91 81       	ldd	r25, Z+1	; 0x01
    4f8a:	23 db       	rcall	.-2490   	; 0x45d2 <clust2sect>
    4f8c:	d8 01       	movw	r26, r16
    4f8e:	1e 96       	adiw	r26, 0x0e	; 14
    4f90:	6d 93       	st	X+, r22
    4f92:	7d 93       	st	X+, r23
    4f94:	8d 93       	st	X+, r24
    4f96:	9c 93       	st	X, r25
    4f98:	51 97       	sbiw	r26, 0x11	; 17
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
    4f9a:	f8 01       	movw	r30, r16
    4f9c:	d5 83       	std	Z+5, r29	; 0x05
    4f9e:	c4 83       	std	Z+4, r28	; 0x04
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
    4fa0:	80 81       	ld	r24, Z
    4fa2:	91 81       	ldd	r25, Z+1	; 0x01
    4fa4:	8e 96       	adiw	r24, 0x2e	; 46
    4fa6:	cc 0c       	add	r12, r12
    4fa8:	dd 1c       	adc	r13, r13
    4faa:	cc 0c       	add	r12, r12
    4fac:	dd 1c       	adc	r13, r13
    4fae:	cc 0c       	add	r12, r12
    4fb0:	dd 1c       	adc	r13, r13
    4fb2:	cc 0c       	add	r12, r12
    4fb4:	dd 1c       	adc	r13, r13
    4fb6:	cc 0c       	add	r12, r12
    4fb8:	dd 1c       	adc	r13, r13
    4fba:	c8 0e       	add	r12, r24
    4fbc:	d9 1e       	adc	r13, r25
    4fbe:	d3 8a       	std	Z+19, r13	; 0x13
    4fc0:	c2 8a       	std	Z+18, r12	; 0x12

	return FR_OK;
    4fc2:	80 e0       	ldi	r24, 0x00	; 0
    4fc4:	15 c0       	rjmp	.+42     	; 0x4ff0 <dir_next+0x24e>
#endif


	i = dp->index + 1;
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;
    4fc6:	84 e0       	ldi	r24, 0x04	; 4
    4fc8:	13 c0       	rjmp	.+38     	; 0x4ff0 <dir_next+0x24e>
    4fca:	84 e0       	ldi	r24, 0x04	; 4
    4fcc:	11 c0       	rjmp	.+34     	; 0x4ff0 <dir_next+0x24e>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
		dp->sect++;					/* Next sector */

		if (!dp->clust) {		/* Static table */
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
				return FR_NO_FILE;
    4fce:	84 e0       	ldi	r24, 0x04	; 4
    4fd0:	0f c0       	rjmp	.+30     	; 0x4ff0 <dir_next+0x24e>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;
    4fd2:	82 e0       	ldi	r24, 0x02	; 2
    4fd4:	0d c0       	rjmp	.+26     	; 0x4ff0 <dir_next+0x24e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    4fd6:	81 e0       	ldi	r24, 0x01	; 1
    4fd8:	0b c0       	rjmp	.+22     	; 0x4ff0 <dir_next+0x24e>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
    4fda:	84 e0       	ldi	r24, 0x04	; 4
    4fdc:	09 c0       	rjmp	.+18     	; 0x4ff0 <dir_next+0x24e>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    4fde:	87 e0       	ldi	r24, 0x07	; 7
    4fe0:	07 c0       	rjmp	.+14     	; 0x4ff0 <dir_next+0x24e>
					if (clst == 1) return FR_INT_ERR;
    4fe2:	82 e0       	ldi	r24, 0x02	; 2
    4fe4:	05 c0       	rjmp	.+10     	; 0x4ff0 <dir_next+0x24e>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    4fe6:	81 e0       	ldi	r24, 0x01	; 1
    4fe8:	03 c0       	rjmp	.+6      	; 0x4ff0 <dir_next+0x24e>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
    4fea:	81 e0       	ldi	r24, 0x01	; 1
    4fec:	01 c0       	rjmp	.+2      	; 0x4ff0 <dir_next+0x24e>
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dp->fs->wflag = 1;
						if (sync_window(dp->fs)) return FR_DISK_ERR;
    4fee:	81 e0       	ldi	r24, 0x01	; 1

	dp->index = (WORD)i;	/* Current index */
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */

	return FR_OK;
}
    4ff0:	df 91       	pop	r29
    4ff2:	cf 91       	pop	r28
    4ff4:	1f 91       	pop	r17
    4ff6:	0f 91       	pop	r16
    4ff8:	ff 90       	pop	r15
    4ffa:	ef 90       	pop	r14
    4ffc:	df 90       	pop	r13
    4ffe:	cf 90       	pop	r12
    5000:	bf 90       	pop	r11
    5002:	af 90       	pop	r10
    5004:	9f 90       	pop	r9
    5006:	8f 90       	pop	r8
    5008:	7f 90       	pop	r7
    500a:	08 95       	ret

0000500c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
    500c:	1f 93       	push	r17
    500e:	cf 93       	push	r28
    5010:	df 93       	push	r29
    5012:	00 d0       	rcall	.+0      	; 0x5014 <f_mount+0x8>
    5014:	00 d0       	rcall	.+0      	; 0x5016 <f_mount+0xa>
    5016:	00 d0       	rcall	.+0      	; 0x5018 <f_mount+0xc>
    5018:	cd b7       	in	r28, 0x3d	; 61
    501a:	de b7       	in	r29, 0x3e	; 62
    501c:	9c 83       	std	Y+4, r25	; 0x04
    501e:	8b 83       	std	Y+3, r24	; 0x03
    5020:	7e 83       	std	Y+6, r23	; 0x06
    5022:	6d 83       	std	Y+5, r22	; 0x05
    5024:	14 2f       	mov	r17, r20
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
    5026:	7a 83       	std	Y+2, r23	; 0x02
    5028:	69 83       	std	Y+1, r22	; 0x01

	vol = get_ldnumber(&rp);
    502a:	ce 01       	movw	r24, r28
    502c:	01 96       	adiw	r24, 0x01	; 1
    502e:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
    5032:	99 23       	and	r25, r25
    5034:	34 f1       	brlt	.+76     	; 0x5082 <f_mount+0x76>
	cfs = FatFs[vol];					/* Pointer to fs object */
    5036:	fc 01       	movw	r30, r24
    5038:	ee 0f       	add	r30, r30
    503a:	ff 1f       	adc	r31, r31
    503c:	e3 5c       	subi	r30, 0xC3	; 195
    503e:	f6 4e       	sbci	r31, 0xE6	; 230
    5040:	01 90       	ld	r0, Z+
    5042:	f0 81       	ld	r31, Z
    5044:	e0 2d       	mov	r30, r0

	if (cfs) {
    5046:	30 97       	sbiw	r30, 0x00	; 0
    5048:	09 f0       	breq	.+2      	; 0x504c <f_mount+0x40>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
    504a:	10 82       	st	Z, r1
	}

	if (fs) {
    504c:	eb 81       	ldd	r30, Y+3	; 0x03
    504e:	fc 81       	ldd	r31, Y+4	; 0x04
    5050:	30 97       	sbiw	r30, 0x00	; 0
    5052:	e9 f0       	breq	.+58     	; 0x508e <f_mount+0x82>
		fs->fs_type = 0;				/* Clear new fs object */
    5054:	10 82       	st	Z, r1
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    5056:	2b 81       	ldd	r18, Y+3	; 0x03
    5058:	3c 81       	ldd	r19, Y+4	; 0x04
    505a:	88 0f       	add	r24, r24
    505c:	99 1f       	adc	r25, r25
    505e:	fc 01       	movw	r30, r24
    5060:	e3 5c       	subi	r30, 0xC3	; 195
    5062:	f6 4e       	sbci	r31, 0xE6	; 230
    5064:	31 83       	std	Z+1, r19	; 0x01
    5066:	20 83       	st	Z, r18

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    5068:	23 2b       	or	r18, r19
    506a:	69 f0       	breq	.+26     	; 0x5086 <f_mount+0x7a>
    506c:	11 30       	cpi	r17, 0x01	; 1
    506e:	69 f4       	brne	.+26     	; 0x508a <f_mount+0x7e>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
    5070:	40 e0       	ldi	r20, 0x00	; 0
    5072:	be 01       	movw	r22, r28
    5074:	6b 5f       	subi	r22, 0xFB	; 251
    5076:	7f 4f       	sbci	r23, 0xFF	; 255
    5078:	ce 01       	movw	r24, r28
    507a:	03 96       	adiw	r24, 0x03	; 3
    507c:	0e 94 01 20 	call	0x4002	; 0x4002 <find_volume>
	LEAVE_FF(fs, res);
    5080:	0e c0       	rjmp	.+28     	; 0x509e <f_mount+0x92>
	int vol;
	FRESULT res;
	const TCHAR *rp = path;

	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
    5082:	8b e0       	ldi	r24, 0x0B	; 11
    5084:	0c c0       	rjmp	.+24     	; 0x509e <f_mount+0x92>
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    5086:	80 e0       	ldi	r24, 0x00	; 0
    5088:	0a c0       	rjmp	.+20     	; 0x509e <f_mount+0x92>
    508a:	80 e0       	ldi	r24, 0x00	; 0
    508c:	08 c0       	rjmp	.+16     	; 0x509e <f_mount+0x92>
		fs->fs_type = 0;				/* Clear new fs object */
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    508e:	88 0f       	add	r24, r24
    5090:	99 1f       	adc	r25, r25
    5092:	fc 01       	movw	r30, r24
    5094:	e3 5c       	subi	r30, 0xC3	; 195
    5096:	f6 4e       	sbci	r31, 0xE6	; 230
    5098:	11 82       	std	Z+1, r1	; 0x01
    509a:	10 82       	st	Z, r1

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    509c:	80 e0       	ldi	r24, 0x00	; 0

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
    509e:	26 96       	adiw	r28, 0x06	; 6
    50a0:	0f b6       	in	r0, 0x3f	; 63
    50a2:	f8 94       	cli
    50a4:	de bf       	out	0x3e, r29	; 62
    50a6:	0f be       	out	0x3f, r0	; 63
    50a8:	cd bf       	out	0x3d, r28	; 61
    50aa:	df 91       	pop	r29
    50ac:	cf 91       	pop	r28
    50ae:	1f 91       	pop	r17
    50b0:	08 95       	ret

000050b2 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    50b2:	2f 92       	push	r2
    50b4:	3f 92       	push	r3
    50b6:	4f 92       	push	r4
    50b8:	5f 92       	push	r5
    50ba:	6f 92       	push	r6
    50bc:	7f 92       	push	r7
    50be:	8f 92       	push	r8
    50c0:	9f 92       	push	r9
    50c2:	af 92       	push	r10
    50c4:	bf 92       	push	r11
    50c6:	cf 92       	push	r12
    50c8:	df 92       	push	r13
    50ca:	ef 92       	push	r14
    50cc:	ff 92       	push	r15
    50ce:	0f 93       	push	r16
    50d0:	1f 93       	push	r17
    50d2:	cf 93       	push	r28
    50d4:	df 93       	push	r29
    50d6:	cd b7       	in	r28, 0x3d	; 61
    50d8:	de b7       	in	r29, 0x3e	; 62
    50da:	ae 97       	sbiw	r28, 0x2e	; 46
    50dc:	0f b6       	in	r0, 0x3f	; 63
    50de:	f8 94       	cli
    50e0:	de bf       	out	0x3e, r29	; 62
    50e2:	0f be       	out	0x3f, r0	; 63
    50e4:	cd bf       	out	0x3d, r28	; 61
    50e6:	7c a3       	std	Y+36, r23	; 0x24
    50e8:	6b a3       	std	Y+35, r22	; 0x23
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
    50ea:	00 97       	sbiw	r24, 0x00	; 0
    50ec:	09 f4       	brne	.+2      	; 0x50f0 <f_open+0x3e>
    50ee:	92 c2       	rjmp	.+1316   	; 0x5614 <f_open+0x562>
    50f0:	84 2e       	mov	r8, r20
    50f2:	1c 01       	movw	r2, r24
	fp->fs = 0;			/* Clear file object */
    50f4:	dc 01       	movw	r26, r24
    50f6:	1d 92       	st	X+, r1
    50f8:	1c 92       	st	X, r1

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
    50fa:	4e 71       	andi	r20, 0x1E	; 30
    50fc:	be 01       	movw	r22, r28
    50fe:	6d 5d       	subi	r22, 0xDD	; 221
    5100:	7f 4f       	sbci	r23, 0xFF	; 255
    5102:	ce 01       	movw	r24, r28
    5104:	01 96       	adiw	r24, 0x01	; 1
    5106:	0e 94 01 20 	call	0x4002	; 0x4002 <find_volume>
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
    510a:	81 11       	cpse	r24, r1
    510c:	ec c2       	rjmp	.+1496   	; 0x56e6 <f_open+0x634>
		INIT_BUF(dj);
    510e:	ce 01       	movw	r24, r28
    5110:	47 96       	adiw	r24, 0x17	; 23
    5112:	9e 8b       	std	Y+22, r25	; 0x16
    5114:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);	/* Follow the file path */
    5116:	cb a0       	ldd	r12, Y+35	; 0x23
    5118:	dc a0       	ldd	r13, Y+36	; 0x24
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
    511a:	f6 01       	movw	r30, r12
    511c:	80 81       	ld	r24, Z
    511e:	8f 32       	cpi	r24, 0x2F	; 47
    5120:	11 f0       	breq	.+4      	; 0x5126 <f_open+0x74>
    5122:	8c 35       	cpi	r24, 0x5C	; 92
    5124:	19 f4       	brne	.+6      	; 0x512c <f_open+0x7a>
		path++;
    5126:	ff ef       	ldi	r31, 0xFF	; 255
    5128:	cf 1a       	sub	r12, r31
    512a:	df 0a       	sbc	r13, r31
	if (!fp) return FR_INVALID_OBJECT;
	fp->fs = 0;			/* Clear file object */

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    512c:	28 2d       	mov	r18, r8
    512e:	2f 71       	andi	r18, 0x1F	; 31
    5130:	2d a7       	std	Y+45, r18	; 0x2d
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
		path++;
	dp->sclust = 0;							/* Always start from the root directory */
    5132:	1f 82       	std	Y+7, r1	; 0x07
    5134:	18 86       	std	Y+8, r1	; 0x08
    5136:	19 86       	std	Y+9, r1	; 0x09
    5138:	1a 86       	std	Y+10, r1	; 0x0a
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
    513a:	d6 01       	movw	r26, r12
    513c:	8c 91       	ld	r24, X
    513e:	80 32       	cpi	r24, 0x20	; 32
    5140:	68 f4       	brcc	.+26     	; 0x515c <f_open+0xaa>
		res = dir_sdi(dp, 0);
    5142:	60 e0       	ldi	r22, 0x00	; 0
    5144:	70 e0       	ldi	r23, 0x00	; 0
    5146:	ce 01       	movw	r24, r28
    5148:	01 96       	adiw	r24, 0x01	; 1
    514a:	4e db       	rcall	.-2404   	; 0x47e8 <dir_sdi>
		dp->dir = 0;
    514c:	1c 8a       	std	Y+20, r1	; 0x14
    514e:	1b 8a       	std	Y+19, r1	; 0x13
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);	/* Follow the file path */
		dir = dj.dir;
    5150:	e1 2c       	mov	r14, r1
    5152:	f1 2c       	mov	r15, r1
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
    5154:	88 23       	and	r24, r24
    5156:	09 f4       	brne	.+2      	; 0x515a <f_open+0xa8>
    5158:	92 c2       	rjmp	.+1316   	; 0x567e <f_open+0x5cc>
    515a:	98 c2       	rjmp	.+1328   	; 0x568c <f_open+0x5da>
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    515c:	68 94       	set
    515e:	bb 24       	eor	r11, r11
    5160:	b5 f8       	bld	r11, 5
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    5162:	a1 2c       	mov	r10, r1
    5164:	71 2c       	mov	r7, r1
    5166:	68 94       	set
    5168:	66 24       	eor	r6, r6
    516a:	63 f8       	bld	r6, 3
    516c:	41 2c       	mov	r4, r1
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    516e:	56 2c       	mov	r5, r6
    5170:	4e a6       	std	Y+46, r4	; 0x2e
    5172:	f6 01       	movw	r30, r12
    5174:	03 c0       	rjmp	.+6      	; 0x517c <f_open+0xca>
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    5176:	fd 01       	movw	r30, r26
    5178:	01 c0       	rjmp	.+2      	; 0x517c <f_open+0xca>
    517a:	fd 01       	movw	r30, r26
    517c:	9f 01       	movw	r18, r30
    517e:	df 01       	movw	r26, r30
    5180:	8d 91       	ld	r24, X+
    5182:	8f 32       	cpi	r24, 0x2F	; 47
    5184:	c1 f3       	breq	.-16     	; 0x5176 <f_open+0xc4>
    5186:	8c 35       	cpi	r24, 0x5C	; 92
    5188:	c1 f3       	breq	.-16     	; 0x517a <f_open+0xc8>
	sfn = dp->fn;
    518a:	6d 89       	ldd	r22, Y+21	; 0x15
    518c:	7e 89       	ldd	r23, Y+22	; 0x16
    518e:	db 01       	movw	r26, r22
    5190:	cb 01       	movw	r24, r22
    5192:	0b 96       	adiw	r24, 0x0b	; 11
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    5194:	bd 92       	st	X+, r11
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    5196:	a8 17       	cp	r26, r24
    5198:	b9 07       	cpc	r27, r25
    519a:	e1 f7       	brne	.-8      	; 0x5194 <f_open+0xe2>
    519c:	4a 2d       	mov	r20, r10
    519e:	57 2d       	mov	r21, r7
    51a0:	c1 2c       	mov	r12, r1
    51a2:	d1 2c       	mov	r13, r1
    51a4:	e6 2c       	mov	r14, r6
    51a6:	f4 2c       	mov	r15, r4
    51a8:	91 2c       	mov	r9, r1
    51aa:	3a a7       	std	Y+42, r19	; 0x2a
    51ac:	29 a7       	std	Y+41, r18	; 0x29
    51ae:	7e a3       	std	Y+38, r23	; 0x26
    51b0:	6d a3       	std	Y+37, r22	; 0x25
    51b2:	39 2d       	mov	r19, r9
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    51b4:	bf ef       	ldi	r27, 0xFF	; 255
    51b6:	cb 1a       	sub	r12, r27
    51b8:	db 0a       	sbc	r13, r27
    51ba:	71 91       	ld	r23, Z+
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    51bc:	71 32       	cpi	r23, 0x21	; 33
    51be:	08 f4       	brcc	.+2      	; 0x51c2 <f_open+0x110>
    51c0:	3a c2       	rjmp	.+1140   	; 0x5636 <f_open+0x584>
    51c2:	7f 32       	cpi	r23, 0x2F	; 47
    51c4:	09 f4       	brne	.+2      	; 0x51c8 <f_open+0x116>
    51c6:	2e c2       	rjmp	.+1116   	; 0x5624 <f_open+0x572>
    51c8:	7c 35       	cpi	r23, 0x5C	; 92
    51ca:	09 f4       	brne	.+2      	; 0x51ce <f_open+0x11c>
    51cc:	2b c2       	rjmp	.+1110   	; 0x5624 <f_open+0x572>
		if (c == '.' || i >= ni) {
    51ce:	7e 32       	cpi	r23, 0x2E	; 46
    51d0:	19 f0       	breq	.+6      	; 0x51d8 <f_open+0x126>
    51d2:	4e 15       	cp	r20, r14
    51d4:	5f 05       	cpc	r21, r15
    51d6:	90 f0       	brcs	.+36     	; 0x51fc <f_open+0x14a>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    51d8:	28 e0       	ldi	r18, 0x08	; 8
    51da:	e2 16       	cp	r14, r18
    51dc:	f1 04       	cpc	r15, r1
    51de:	09 f0       	breq	.+2      	; 0x51e2 <f_open+0x130>
    51e0:	6e c2       	rjmp	.+1244   	; 0x56be <f_open+0x60c>
    51e2:	7e 32       	cpi	r23, 0x2E	; 46
    51e4:	09 f0       	breq	.+2      	; 0x51e8 <f_open+0x136>
    51e6:	6b c2       	rjmp	.+1238   	; 0x56be <f_open+0x60c>
			i = 8; ni = 11;
			b <<= 2; continue;
    51e8:	33 0f       	add	r19, r19
    51ea:	33 0f       	add	r19, r19
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    51ec:	45 2d       	mov	r20, r5
    51ee:	5e a5       	ldd	r21, Y+46	; 0x2e
    51f0:	0f 2e       	mov	r0, r31
    51f2:	fb e0       	ldi	r31, 0x0B	; 11
    51f4:	ef 2e       	mov	r14, r31
    51f6:	f0 2d       	mov	r31, r0
    51f8:	f1 2c       	mov	r15, r1
    51fa:	dc cf       	rjmp	.-72     	; 0x51b4 <f_open+0x102>
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended character? */
    51fc:	77 23       	and	r23, r23
    51fe:	0c f4       	brge	.+2      	; 0x5202 <f_open+0x150>
    5200:	5e c2       	rjmp	.+1212   	; 0x56be <f_open+0x60c>
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
    5202:	07 2f       	mov	r16, r23
    5204:	10 e0       	ldi	r17, 0x00	; 0
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    5206:	02 32       	cpi	r16, 0x22	; 34
    5208:	11 05       	cpc	r17, r1
    520a:	09 f4       	brne	.+2      	; 0x520e <f_open+0x15c>
    520c:	2c c2       	rjmp	.+1112   	; 0x5666 <f_open+0x5b4>
    520e:	a2 ee       	ldi	r26, 0xE2	; 226
    5210:	b1 e0       	ldi	r27, 0x01	; 1
    5212:	8d 91       	ld	r24, X+
    5214:	88 23       	and	r24, r24
    5216:	09 f4       	brne	.+2      	; 0x521a <f_open+0x168>
    5218:	ff c1       	rjmp	.+1022   	; 0x5618 <f_open+0x566>
    521a:	90 e0       	ldi	r25, 0x00	; 0
    521c:	08 17       	cp	r16, r24
    521e:	19 07       	cpc	r17, r25
    5220:	c1 f7       	brne	.-16     	; 0x5212 <f_open+0x160>
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
    5222:	86 e0       	ldi	r24, 0x06	; 6
    5224:	25 c2       	rjmp	.+1098   	; 0x5670 <f_open+0x5be>
			if (IsUpper(c)) {			/* ASCII large capital? */
				b |= 2;
    5226:	32 60       	ori	r19, 0x02	; 2
    5228:	06 c0       	rjmp	.+12     	; 0x5236 <f_open+0x184>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    522a:	8f e9       	ldi	r24, 0x9F	; 159
    522c:	87 0f       	add	r24, r23
    522e:	8a 31       	cpi	r24, 0x1A	; 26
    5230:	10 f4       	brcc	.+4      	; 0x5236 <f_open+0x184>
					b |= 1; c -= 0x20;
    5232:	31 60       	ori	r19, 0x01	; 1
    5234:	70 52       	subi	r23, 0x20	; 32
				}
			}
			sfn[i++] = c;
    5236:	ad a1       	ldd	r26, Y+37	; 0x25
    5238:	be a1       	ldd	r27, Y+38	; 0x26
    523a:	a4 0f       	add	r26, r20
    523c:	b5 1f       	adc	r27, r21
    523e:	7c 93       	st	X, r23
    5240:	4f 5f       	subi	r20, 0xFF	; 255
    5242:	5f 4f       	sbci	r21, 0xFF	; 255
    5244:	b7 cf       	rjmp	.-146    	; 0x51b4 <f_open+0x102>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    5246:	45 2b       	or	r20, r21
    5248:	09 f4       	brne	.+2      	; 0x524c <f_open+0x19a>
    524a:	39 c2       	rjmp	.+1138   	; 0x56be <f_open+0x60c>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
    524c:	db 01       	movw	r26, r22
    524e:	9c 91       	ld	r25, X
    5250:	95 3e       	cpi	r25, 0xE5	; 229
    5252:	11 f4       	brne	.+4      	; 0x5258 <f_open+0x1a6>
    5254:	e5 e0       	ldi	r30, 0x05	; 5
    5256:	ec 93       	st	X, r30

	if (ni == 8) b <<= 2;
    5258:	f8 e0       	ldi	r31, 0x08	; 8
    525a:	ef 16       	cp	r14, r31
    525c:	f1 04       	cpc	r15, r1
    525e:	11 f4       	brne	.+4      	; 0x5264 <f_open+0x1b2>
    5260:	99 0c       	add	r9, r9
    5262:	99 0c       	add	r9, r9
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    5264:	99 2d       	mov	r25, r9
    5266:	93 70       	andi	r25, 0x03	; 3
    5268:	91 30       	cpi	r25, 0x01	; 1
    526a:	09 f4       	brne	.+2      	; 0x526e <f_open+0x1bc>
    526c:	80 61       	ori	r24, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    526e:	99 2d       	mov	r25, r9
    5270:	9c 70       	andi	r25, 0x0C	; 12
    5272:	94 30       	cpi	r25, 0x04	; 4
    5274:	09 f4       	brne	.+2      	; 0x5278 <f_open+0x1c6>
    5276:	88 60       	ori	r24, 0x08	; 8

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
    5278:	db 01       	movw	r26, r22
    527a:	1b 96       	adiw	r26, 0x0b	; 11
    527c:	8c 93       	st	X, r24
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
    527e:	6a 2d       	mov	r22, r10
    5280:	77 2d       	mov	r23, r7
    5282:	ce 01       	movw	r24, r28
    5284:	01 96       	adiw	r24, 0x01	; 1
    5286:	b0 da       	rcall	.-2720   	; 0x47e8 <dir_sdi>
	if (res != FR_OK) return res;
    5288:	81 11       	cpse	r24, r1
    528a:	e3 c1       	rjmp	.+966    	; 0x5652 <f_open+0x5a0>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
    528c:	4f 85       	ldd	r20, Y+15	; 0x0f
    528e:	58 89       	ldd	r21, Y+16	; 0x10
    5290:	69 89       	ldd	r22, Y+17	; 0x11
    5292:	7a 89       	ldd	r23, Y+18	; 0x12
    5294:	89 81       	ldd	r24, Y+1	; 0x01
    5296:	9a 81       	ldd	r25, Y+2	; 0x02
    5298:	0e 94 65 1f 	call	0x3eca	; 0x3eca <move_window>
		if (res != FR_OK) break;
    529c:	81 11       	cpse	r24, r1
    529e:	d9 c1       	rjmp	.+946    	; 0x5652 <f_open+0x5a0>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
    52a0:	eb 88       	ldd	r14, Y+19	; 0x13
    52a2:	fc 88       	ldd	r15, Y+20	; 0x14
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    52a4:	f7 01       	movw	r30, r14
    52a6:	80 81       	ld	r24, Z
    52a8:	88 23       	and	r24, r24
    52aa:	d1 f0       	breq	.+52     	; 0x52e0 <f_open+0x22e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
    52ac:	63 85       	ldd	r22, Z+11	; 0x0b
    52ae:	63 fd       	sbrc	r22, 3
    52b0:	0f c0       	rjmp	.+30     	; 0x52d0 <f_open+0x21e>
    52b2:	4d 89       	ldd	r20, Y+21	; 0x15
    52b4:	5e 89       	ldd	r21, Y+22	; 0x16
    52b6:	da 01       	movw	r26, r20
    52b8:	97 01       	movw	r18, r14
    52ba:	25 5f       	subi	r18, 0xF5	; 245
    52bc:	3f 4f       	sbci	r19, 0xFF	; 255
    52be:	04 c0       	rjmp	.+8      	; 0x52c8 <f_open+0x216>
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    52c0:	2e 17       	cp	r18, r30
    52c2:	3f 07       	cpc	r19, r31
    52c4:	09 f4       	brne	.+2      	; 0x52c8 <f_open+0x216>
    52c6:	c0 c1       	rjmp	.+896    	; 0x5648 <f_open+0x596>
    52c8:	91 91       	ld	r25, Z+
    52ca:	8d 91       	ld	r24, X+
    52cc:	98 17       	cp	r25, r24
    52ce:	c1 f3       	breq	.-16     	; 0x52c0 <f_open+0x20e>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
    52d0:	6a 2d       	mov	r22, r10
    52d2:	77 2d       	mov	r23, r7
    52d4:	ce 01       	movw	r24, r28
    52d6:	01 96       	adiw	r24, 0x01	; 1
    52d8:	64 dd       	rcall	.-1336   	; 0x4da2 <dir_next>
	} while (res == FR_OK);
    52da:	88 23       	and	r24, r24
    52dc:	b9 f2       	breq	.-82     	; 0x528c <f_open+0x1da>
    52de:	b9 c1       	rjmp	.+882    	; 0x5652 <f_open+0x5a0>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the sagment name */
			ns = dp->fn[NSFLAG];
    52e0:	ed 89       	ldd	r30, Y+21	; 0x15
    52e2:	fe 89       	ldd	r31, Y+22	; 0x16
    52e4:	93 85       	ldd	r25, Z+11	; 0x0b
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    52e6:	92 fd       	sbrc	r25, 2
    52e8:	c0 c1       	rjmp	.+896    	; 0x566a <f_open+0x5b8>
    52ea:	85 e0       	ldi	r24, 0x05	; 5
    52ec:	c1 c1       	rjmp	.+898    	; 0x5670 <f_open+0x5be>
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			dir = dp->dir;						/* Follow the sub-directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
    52ee:	64 ff       	sbrs	r22, 4
    52f0:	be c1       	rjmp	.+892    	; 0x566e <f_open+0x5bc>
	BYTE* dir	/* Pointer to the directory entry */
)
{
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
    52f2:	d7 01       	movw	r26, r14
    52f4:	5a 96       	adiw	r26, 0x1a	; 26
    52f6:	8d 91       	ld	r24, X+
    52f8:	9c 91       	ld	r25, X
    52fa:	5b 97       	sbiw	r26, 0x1b	; 27
    52fc:	a0 e0       	ldi	r26, 0x00	; 0
    52fe:	b0 e0       	ldi	r27, 0x00	; 0
	if (fs->fs_type == FS_FAT32)
    5300:	e9 81       	ldd	r30, Y+1	; 0x01
    5302:	fa 81       	ldd	r31, Y+2	; 0x02
    5304:	20 81       	ld	r18, Z
    5306:	23 30       	cpi	r18, 0x03	; 3
    5308:	61 f4       	brne	.+24     	; 0x5322 <f_open+0x270>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
    530a:	f7 01       	movw	r30, r14
    530c:	44 89       	ldd	r20, Z+20	; 0x14
    530e:	55 89       	ldd	r21, Z+21	; 0x15
    5310:	60 e0       	ldi	r22, 0x00	; 0
    5312:	70 e0       	ldi	r23, 0x00	; 0
    5314:	ba 01       	movw	r22, r20
    5316:	55 27       	eor	r21, r21
    5318:	44 27       	eor	r20, r20
    531a:	84 2b       	or	r24, r20
    531c:	95 2b       	or	r25, r21
    531e:	a6 2b       	or	r26, r22
    5320:	b7 2b       	or	r27, r23
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			dir = dp->dir;						/* Follow the sub-directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
				res = FR_NO_PATH; break;
			}
			dp->sclust = ld_clust(dp->fs, dir);
    5322:	8f 83       	std	Y+7, r24	; 0x07
    5324:	98 87       	std	Y+8, r25	; 0x08
    5326:	a9 87       	std	Y+9, r26	; 0x09
    5328:	ba 87       	std	Y+10, r27	; 0x0a
    532a:	23 cf       	rjmp	.-442    	; 0x5172 <f_open+0xc0>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
			if (res != FR_OK) {					/* No file, create new */
    532c:	88 23       	and	r24, r24
    532e:	09 f4       	brne	.+2      	; 0x5332 <f_open+0x280>
    5330:	53 c0       	rjmp	.+166    	; 0x53d8 <f_open+0x326>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    5332:	84 30       	cpi	r24, 0x04	; 4
    5334:	09 f0       	breq	.+2      	; 0x5338 <f_open+0x286>
    5336:	48 c0       	rjmp	.+144    	; 0x53c8 <f_open+0x316>
{
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
    5338:	60 e0       	ldi	r22, 0x00	; 0
    533a:	70 e0       	ldi	r23, 0x00	; 0
    533c:	ce 01       	movw	r24, r28
    533e:	01 96       	adiw	r24, 0x01	; 1
    5340:	53 da       	rcall	.-2906   	; 0x47e8 <dir_sdi>
	if (res == FR_OK) {
    5342:	81 11       	cpse	r24, r1
    5344:	18 c0       	rjmp	.+48     	; 0x5376 <f_open+0x2c4>
		n = 0;
		do {
			res = move_window(dp->fs, dp->sect);
    5346:	4f 85       	ldd	r20, Y+15	; 0x0f
    5348:	58 89       	ldd	r21, Y+16	; 0x10
    534a:	69 89       	ldd	r22, Y+17	; 0x11
    534c:	7a 89       	ldd	r23, Y+18	; 0x12
    534e:	89 81       	ldd	r24, Y+1	; 0x01
    5350:	9a 81       	ldd	r25, Y+2	; 0x02
    5352:	0e 94 65 1f 	call	0x3eca	; 0x3eca <move_window>
			if (res != FR_OK) break;
    5356:	81 11       	cpse	r24, r1
    5358:	0e c0       	rjmp	.+28     	; 0x5376 <f_open+0x2c4>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
    535a:	eb 89       	ldd	r30, Y+19	; 0x13
    535c:	fc 89       	ldd	r31, Y+20	; 0x14
    535e:	80 81       	ld	r24, Z
    5360:	85 3e       	cpi	r24, 0xE5	; 229
    5362:	71 f0       	breq	.+28     	; 0x5380 <f_open+0x2ce>
    5364:	88 23       	and	r24, r24
    5366:	61 f0       	breq	.+24     	; 0x5380 <f_open+0x2ce>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
    5368:	61 e0       	ldi	r22, 0x01	; 1
    536a:	70 e0       	ldi	r23, 0x00	; 0
    536c:	ce 01       	movw	r24, r28
    536e:	01 96       	adiw	r24, 0x01	; 1
    5370:	18 dd       	rcall	.-1488   	; 0x4da2 <dir_next>
		} while (res == FR_OK);
    5372:	88 23       	and	r24, r24
    5374:	41 f3       	breq	.-48     	; 0x5346 <f_open+0x294>
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    5376:	84 30       	cpi	r24, 0x04	; 4
    5378:	09 f4       	brne	.+2      	; 0x537c <f_open+0x2ca>
    537a:	a5 c1       	rjmp	.+842    	; 0x56c6 <f_open+0x614>
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
    537c:	81 11       	cpse	r24, r1
    537e:	a6 c1       	rjmp	.+844    	; 0x56cc <f_open+0x61a>
		res = move_window(dp->fs, dp->sect);
    5380:	4f 85       	ldd	r20, Y+15	; 0x0f
    5382:	58 89       	ldd	r21, Y+16	; 0x10
    5384:	69 89       	ldd	r22, Y+17	; 0x11
    5386:	7a 89       	ldd	r23, Y+18	; 0x12
    5388:	89 81       	ldd	r24, Y+1	; 0x01
    538a:	9a 81       	ldd	r25, Y+2	; 0x02
    538c:	0e 94 65 1f 	call	0x3eca	; 0x3eca <move_window>
		if (res == FR_OK) {
    5390:	81 11       	cpse	r24, r1
    5392:	9c c1       	rjmp	.+824    	; 0x56cc <f_open+0x61a>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
    5394:	eb 89       	ldd	r30, Y+19	; 0x13
    5396:	fc 89       	ldd	r31, Y+20	; 0x14
    5398:	cf 01       	movw	r24, r30
    539a:	80 96       	adiw	r24, 0x20	; 32
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    539c:	11 92       	st	Z+, r1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    539e:	e8 17       	cp	r30, r24
    53a0:	f9 07       	cpc	r31, r25
    53a2:	e1 f7       	brne	.-8      	; 0x539c <f_open+0x2ea>

	if (res == FR_OK) {				/* Set SFN entry */
		res = move_window(dp->fs, dp->sect);
		if (res == FR_OK) {
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
    53a4:	6d 89       	ldd	r22, Y+21	; 0x15
    53a6:	7e 89       	ldd	r23, Y+22	; 0x16
    53a8:	4b e0       	ldi	r20, 0x0B	; 11
    53aa:	50 e0       	ldi	r21, 0x00	; 0
    53ac:	8b 89       	ldd	r24, Y+19	; 0x13
    53ae:	9c 89       	ldd	r25, Y+20	; 0x14
    53b0:	0e 94 97 1e 	call	0x3d2e	; 0x3d2e <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
    53b4:	e9 81       	ldd	r30, Y+1	; 0x01
    53b6:	fa 81       	ldd	r31, Y+2	; 0x02
    53b8:	81 e0       	ldi	r24, 0x01	; 1
    53ba:	84 83       	std	Z+4, r24	; 0x04
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    53bc:	fd a5       	ldd	r31, Y+45	; 0x2d
    53be:	f8 60       	ori	r31, 0x08	; 8
    53c0:	fd a7       	std	Y+45, r31	; 0x2d
				dir = dj.dir;					/* New entry */
    53c2:	eb 88       	ldd	r14, Y+19	; 0x13
    53c4:	fc 88       	ldd	r15, Y+20	; 0x14
    53c6:	10 c0       	rjmp	.+32     	; 0x53e8 <f_open+0x336>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    53c8:	2d a5       	ldd	r18, Y+45	; 0x2d
    53ca:	28 60       	ori	r18, 0x08	; 8
    53cc:	2d a7       	std	Y+45, r18	; 0x2d
				dir = dj.dir;					/* New entry */
    53ce:	eb 88       	ldd	r14, Y+19	; 0x13
    53d0:	fc 88       	ldd	r15, Y+20	; 0x14
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    53d2:	88 23       	and	r24, r24
    53d4:	49 f0       	breq	.+18     	; 0x53e8 <f_open+0x336>
    53d6:	87 c1       	rjmp	.+782    	; 0x56e6 <f_open+0x634>
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
				dir = dj.dir;					/* New entry */
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    53d8:	d7 01       	movw	r26, r14
    53da:	1b 96       	adiw	r26, 0x0b	; 11
    53dc:	8c 91       	ld	r24, X
    53de:	81 71       	andi	r24, 0x11	; 17
    53e0:	09 f0       	breq	.+2      	; 0x53e4 <f_open+0x332>
    53e2:	7a c1       	rjmp	.+756    	; 0x56d8 <f_open+0x626>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    53e4:	82 fc       	sbrc	r8, 2
    53e6:	7a c1       	rjmp	.+756    	; 0x56dc <f_open+0x62a>
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    53e8:	bd a5       	ldd	r27, Y+45	; 0x2d
    53ea:	b3 ff       	sbrs	r27, 3
    53ec:	c4 c0       	rjmp	.+392    	; 0x5576 <f_open+0x4c4>
				dw = GET_FATTIME();				/* Created time */
				ST_DWORD(dir + DIR_CrtTime, dw);
    53ee:	80 e0       	ldi	r24, 0x00	; 0
    53f0:	90 e0       	ldi	r25, 0x00	; 0
    53f2:	a0 ef       	ldi	r26, 0xF0	; 240
    53f4:	be e4       	ldi	r27, 0x4E	; 78
    53f6:	f7 01       	movw	r30, r14
    53f8:	86 87       	std	Z+14, r24	; 0x0e
    53fa:	97 87       	std	Z+15, r25	; 0x0f
    53fc:	a0 8b       	std	Z+16, r26	; 0x10
    53fe:	b1 8b       	std	Z+17, r27	; 0x11
				dir[DIR_Attr] = 0;				/* Reset attribute */
    5400:	13 86       	std	Z+11, r1	; 0x0b
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
    5402:	d7 01       	movw	r26, r14
    5404:	14 8e       	std	Z+28, r1	; 0x1c
    5406:	15 8e       	std	Z+29, r1	; 0x1d
    5408:	16 8e       	std	Z+30, r1	; 0x1e
    540a:	17 8e       	std	Z+31, r1	; 0x1f
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
    540c:	c9 80       	ldd	r12, Y+1	; 0x01
    540e:	da 80       	ldd	r13, Y+2	; 0x02
	BYTE* dir	/* Pointer to the directory entry */
)
{
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
    5410:	82 8c       	ldd	r8, Z+26	; 0x1a
    5412:	93 8c       	ldd	r9, Z+27	; 0x1b
    5414:	a1 2c       	mov	r10, r1
    5416:	b1 2c       	mov	r11, r1
	if (fs->fs_type == FS_FAT32)
    5418:	f6 01       	movw	r30, r12
    541a:	80 81       	ld	r24, Z
    541c:	83 30       	cpi	r24, 0x03	; 3
    541e:	69 f4       	brne	.+26     	; 0x543a <f_open+0x388>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
    5420:	54 96       	adiw	r26, 0x14	; 20
    5422:	8d 91       	ld	r24, X+
    5424:	9c 91       	ld	r25, X
    5426:	55 97       	sbiw	r26, 0x15	; 21
    5428:	a0 e0       	ldi	r26, 0x00	; 0
    542a:	b0 e0       	ldi	r27, 0x00	; 0
    542c:	dc 01       	movw	r26, r24
    542e:	99 27       	eor	r25, r25
    5430:	88 27       	eor	r24, r24
    5432:	88 2a       	or	r8, r24
    5434:	99 2a       	or	r9, r25
    5436:	aa 2a       	or	r10, r26
    5438:	bb 2a       	or	r11, r27
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir + DIR_FstClusLO, cl);
    543a:	d7 01       	movw	r26, r14
    543c:	5b 96       	adiw	r26, 0x1b	; 27
    543e:	1c 92       	st	X, r1
    5440:	1e 92       	st	-X, r1
    5442:	5a 97       	sbiw	r26, 0x1a	; 26
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
    5444:	55 96       	adiw	r26, 0x15	; 21
    5446:	1c 92       	st	X, r1
    5448:	1e 92       	st	-X, r1
    544a:	54 97       	sbiw	r26, 0x14	; 20
				ST_DWORD(dir + DIR_CrtTime, dw);
				dir[DIR_Attr] = 0;				/* Reset attribute */
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
				st_clust(dir, 0);				/* cluster = 0 */
				dj.fs->wflag = 1;
    544c:	81 e0       	ldi	r24, 0x01	; 1
    544e:	f6 01       	movw	r30, r12
    5450:	84 83       	std	Z+4, r24	; 0x04
				if (cl) {						/* Remove the cluster chain if exist */
    5452:	81 14       	cp	r8, r1
    5454:	91 04       	cpc	r9, r1
    5456:	a1 04       	cpc	r10, r1
    5458:	b1 04       	cpc	r11, r1
    545a:	09 f4       	brne	.+2      	; 0x545e <f_open+0x3ac>
    545c:	89 c0       	rjmp	.+274    	; 0x5570 <f_open+0x4be>
					dw = dj.fs->winsect;
    545e:	22 a5       	ldd	r18, Z+42	; 0x2a
    5460:	33 a5       	ldd	r19, Z+43	; 0x2b
    5462:	44 a5       	ldd	r20, Z+44	; 0x2c
    5464:	55 a5       	ldd	r21, Z+45	; 0x2d
    5466:	29 a7       	std	Y+41, r18	; 0x29
    5468:	3a a7       	std	Y+42, r19	; 0x2a
    546a:	4b a7       	std	Y+43, r20	; 0x2b
    546c:	5c a7       	std	Y+44, r21	; 0x2c
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    546e:	b2 e0       	ldi	r27, 0x02	; 2
    5470:	8b 16       	cp	r8, r27
    5472:	91 04       	cpc	r9, r1
    5474:	a1 04       	cpc	r10, r1
    5476:	b1 04       	cpc	r11, r1
    5478:	08 f4       	brcc	.+2      	; 0x547c <f_open+0x3ca>
    547a:	12 c1       	rjmp	.+548    	; 0x56a0 <f_open+0x5ee>
    547c:	82 89       	ldd	r24, Z+18	; 0x12
    547e:	93 89       	ldd	r25, Z+19	; 0x13
    5480:	a4 89       	ldd	r26, Z+20	; 0x14
    5482:	b5 89       	ldd	r27, Z+21	; 0x15
    5484:	88 16       	cp	r8, r24
    5486:	99 06       	cpc	r9, r25
    5488:	aa 06       	cpc	r10, r26
    548a:	bb 06       	cpc	r11, r27
    548c:	08 f0       	brcs	.+2      	; 0x5490 <f_open+0x3de>
    548e:	0a c1       	rjmp	.+532    	; 0x56a4 <f_open+0x5f2>
    5490:	8d a2       	std	Y+37, r8	; 0x25
    5492:	9e a2       	std	Y+38, r9	; 0x26
    5494:	af a2       	std	Y+39, r10	; 0x27
    5496:	b8 a6       	std	Y+40, r11	; 0x28
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    5498:	4d a1       	ldd	r20, Y+37	; 0x25
    549a:	5e a1       	ldd	r21, Y+38	; 0x26
    549c:	6f a1       	ldd	r22, Y+39	; 0x27
    549e:	78 a5       	ldd	r23, Y+40	; 0x28
    54a0:	c6 01       	movw	r24, r12
    54a2:	bf d8       	rcall	.-3714   	; 0x4622 <get_fat>
    54a4:	2b 01       	movw	r4, r22
    54a6:	3c 01       	movw	r6, r24
			if (nxt == 0) break;				/* Empty cluster? */
    54a8:	61 15       	cp	r22, r1
    54aa:	71 05       	cpc	r23, r1
    54ac:	81 05       	cpc	r24, r1
    54ae:	91 05       	cpc	r25, r1
    54b0:	e1 f1       	breq	.+120    	; 0x552a <f_open+0x478>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    54b2:	61 30       	cpi	r22, 0x01	; 1
    54b4:	71 05       	cpc	r23, r1
    54b6:	81 05       	cpc	r24, r1
    54b8:	91 05       	cpc	r25, r1
    54ba:	09 f4       	brne	.+2      	; 0x54be <f_open+0x40c>
    54bc:	f5 c0       	rjmp	.+490    	; 0x56a8 <f_open+0x5f6>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    54be:	6f 3f       	cpi	r22, 0xFF	; 255
    54c0:	7f 4f       	sbci	r23, 0xFF	; 255
    54c2:	8f 4f       	sbci	r24, 0xFF	; 255
    54c4:	9f 4f       	sbci	r25, 0xFF	; 255
    54c6:	09 f4       	brne	.+2      	; 0x54ca <f_open+0x418>
    54c8:	f1 c0       	rjmp	.+482    	; 0x56ac <f_open+0x5fa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    54ca:	00 e0       	ldi	r16, 0x00	; 0
    54cc:	10 e0       	ldi	r17, 0x00	; 0
    54ce:	98 01       	movw	r18, r16
    54d0:	4d a1       	ldd	r20, Y+37	; 0x25
    54d2:	5e a1       	ldd	r21, Y+38	; 0x26
    54d4:	6f a1       	ldd	r22, Y+39	; 0x27
    54d6:	78 a5       	ldd	r23, Y+40	; 0x28
    54d8:	c6 01       	movw	r24, r12
    54da:	40 da       	rcall	.-2944   	; 0x495c <put_fat>
			if (res != FR_OK) break;
    54dc:	81 11       	cpse	r24, r1
    54de:	e7 c0       	rjmp	.+462    	; 0x56ae <f_open+0x5fc>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
    54e0:	f6 01       	movw	r30, r12
    54e2:	86 85       	ldd	r24, Z+14	; 0x0e
    54e4:	97 85       	ldd	r25, Z+15	; 0x0f
    54e6:	a0 89       	ldd	r26, Z+16	; 0x10
    54e8:	b1 89       	ldd	r27, Z+17	; 0x11
    54ea:	8f 3f       	cpi	r24, 0xFF	; 255
    54ec:	ff ef       	ldi	r31, 0xFF	; 255
    54ee:	9f 07       	cpc	r25, r31
    54f0:	af 07       	cpc	r26, r31
    54f2:	bf 07       	cpc	r27, r31
    54f4:	59 f0       	breq	.+22     	; 0x550c <f_open+0x45a>
				fs->free_clust++;
    54f6:	01 96       	adiw	r24, 0x01	; 1
    54f8:	a1 1d       	adc	r26, r1
    54fa:	b1 1d       	adc	r27, r1
    54fc:	f6 01       	movw	r30, r12
    54fe:	86 87       	std	Z+14, r24	; 0x0e
    5500:	97 87       	std	Z+15, r25	; 0x0f
    5502:	a0 8b       	std	Z+16, r26	; 0x10
    5504:	b1 8b       	std	Z+17, r27	; 0x11
				fs->fsi_flag |= 1;
    5506:	85 81       	ldd	r24, Z+5	; 0x05
    5508:	81 60       	ori	r24, 0x01	; 1
    550a:	85 83       	std	Z+5, r24	; 0x05
    550c:	4d a2       	std	Y+37, r4	; 0x25
    550e:	5e a2       	std	Y+38, r5	; 0x26
    5510:	6f a2       	std	Y+39, r6	; 0x27
    5512:	78 a6       	std	Y+40, r7	; 0x28
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    5514:	f6 01       	movw	r30, r12
    5516:	82 89       	ldd	r24, Z+18	; 0x12
    5518:	93 89       	ldd	r25, Z+19	; 0x13
    551a:	a4 89       	ldd	r26, Z+20	; 0x14
    551c:	b5 89       	ldd	r27, Z+21	; 0x15
    551e:	48 16       	cp	r4, r24
    5520:	59 06       	cpc	r5, r25
    5522:	6a 06       	cpc	r6, r26
    5524:	7b 06       	cpc	r7, r27
    5526:	08 f4       	brcc	.+2      	; 0x552a <f_open+0x478>
    5528:	b7 cf       	rjmp	.-146    	; 0x5498 <f_open+0x3e6>
				dj.fs->wflag = 1;
				if (cl) {						/* Remove the cluster chain if exist */
					dw = dj.fs->winsect;
					res = remove_chain(dj.fs, cl);
					if (res == FR_OK) {
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    552a:	89 81       	ldd	r24, Y+1	; 0x01
    552c:	9a 81       	ldd	r25, Y+2	; 0x02
    552e:	f1 e0       	ldi	r31, 0x01	; 1
    5530:	8f 1a       	sub	r8, r31
    5532:	91 08       	sbc	r9, r1
    5534:	a1 08       	sbc	r10, r1
    5536:	b1 08       	sbc	r11, r1
    5538:	dc 01       	movw	r26, r24
    553a:	1a 96       	adiw	r26, 0x0a	; 10
    553c:	8d 92       	st	X+, r8
    553e:	9d 92       	st	X+, r9
    5540:	ad 92       	st	X+, r10
    5542:	bc 92       	st	X, r11
    5544:	1d 97       	sbiw	r26, 0x0d	; 13
						res = move_window(dj.fs, dw);
    5546:	49 a5       	ldd	r20, Y+41	; 0x29
    5548:	5a a5       	ldd	r21, Y+42	; 0x2a
    554a:	6b a5       	ldd	r22, Y+43	; 0x2b
    554c:	7c a5       	ldd	r23, Y+44	; 0x2c
    554e:	0e 94 65 1f 	call	0x3eca	; 0x3eca <move_window>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
    5552:	88 23       	and	r24, r24
    5554:	69 f0       	breq	.+26     	; 0x5570 <f_open+0x4be>
    5556:	c7 c0       	rjmp	.+398    	; 0x56e6 <f_open+0x634>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
    5558:	81 11       	cpse	r24, r1
    555a:	c5 c0       	rjmp	.+394    	; 0x56e6 <f_open+0x634>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
    555c:	f7 01       	movw	r30, r14
    555e:	83 85       	ldd	r24, Z+11	; 0x0b
    5560:	84 fd       	sbrc	r24, 4
    5562:	be c0       	rjmp	.+380    	; 0x56e0 <f_open+0x62e>
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    5564:	81 fe       	sbrs	r8, 1
    5566:	02 c0       	rjmp	.+4      	; 0x556c <f_open+0x4ba>
    5568:	80 fd       	sbrc	r24, 0
    556a:	bc c0       	rjmp	.+376    	; 0x56e4 <f_open+0x632>
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
    556c:	83 fe       	sbrs	r8, 3
    556e:	03 c0       	rjmp	.+6      	; 0x5576 <f_open+0x4c4>
				mode |= FA__WRITTEN;
    5570:	fd a5       	ldd	r31, Y+45	; 0x2d
    5572:	f0 62       	ori	r31, 0x20	; 32
    5574:	fd a7       	std	Y+45, r31	; 0x2d
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    5576:	e9 81       	ldd	r30, Y+1	; 0x01
    5578:	fa 81       	ldd	r31, Y+2	; 0x02
    557a:	82 a5       	ldd	r24, Z+42	; 0x2a
    557c:	93 a5       	ldd	r25, Z+43	; 0x2b
    557e:	a4 a5       	ldd	r26, Z+44	; 0x2c
    5580:	b5 a5       	ldd	r27, Z+45	; 0x2d
    5582:	f1 01       	movw	r30, r2
    5584:	82 8f       	std	Z+26, r24	; 0x1a
    5586:	93 8f       	std	Z+27, r25	; 0x1b
    5588:	a4 8f       	std	Z+28, r26	; 0x1c
    558a:	b5 8f       	std	Z+29, r27	; 0x1d
			fp->dir_ptr = dir;
    558c:	f7 8e       	std	Z+31, r15	; 0x1f
    558e:	e6 8e       	std	Z+30, r14	; 0x1e
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
    5590:	ed a5       	ldd	r30, Y+45	; 0x2d
    5592:	d1 01       	movw	r26, r2
    5594:	14 96       	adiw	r26, 0x04	; 4
    5596:	ec 93       	st	X, r30
    5598:	14 97       	sbiw	r26, 0x04	; 4
			fp->err = 0;						/* Clear error flag */
    559a:	15 96       	adiw	r26, 0x05	; 5
    559c:	1c 92       	st	X, r1
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
    559e:	09 81       	ldd	r16, Y+1	; 0x01
    55a0:	1a 81       	ldd	r17, Y+2	; 0x02
	BYTE* dir	/* Pointer to the directory entry */
)
{
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
    55a2:	d7 01       	movw	r26, r14
    55a4:	5a 96       	adiw	r26, 0x1a	; 26
    55a6:	8d 91       	ld	r24, X+
    55a8:	9c 91       	ld	r25, X
    55aa:	5b 97       	sbiw	r26, 0x1b	; 27
    55ac:	a0 e0       	ldi	r26, 0x00	; 0
    55ae:	b0 e0       	ldi	r27, 0x00	; 0
	if (fs->fs_type == FS_FAT32)
    55b0:	f8 01       	movw	r30, r16
    55b2:	20 81       	ld	r18, Z
    55b4:	23 30       	cpi	r18, 0x03	; 3
    55b6:	61 f4       	brne	.+24     	; 0x55d0 <f_open+0x51e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
    55b8:	f7 01       	movw	r30, r14
    55ba:	44 89       	ldd	r20, Z+20	; 0x14
    55bc:	55 89       	ldd	r21, Z+21	; 0x15
    55be:	60 e0       	ldi	r22, 0x00	; 0
    55c0:	70 e0       	ldi	r23, 0x00	; 0
    55c2:	ba 01       	movw	r22, r20
    55c4:	55 27       	eor	r21, r21
    55c6:	44 27       	eor	r20, r20
    55c8:	84 2b       	or	r24, r20
    55ca:	95 2b       	or	r25, r21
    55cc:	a6 2b       	or	r26, r22
    55ce:	b7 2b       	or	r27, r23
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
			fp->err = 0;						/* Clear error flag */
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
    55d0:	f1 01       	movw	r30, r2
    55d2:	86 87       	std	Z+14, r24	; 0x0e
    55d4:	97 87       	std	Z+15, r25	; 0x0f
    55d6:	a0 8b       	std	Z+16, r26	; 0x10
    55d8:	b1 8b       	std	Z+17, r27	; 0x11
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
    55da:	f7 01       	movw	r30, r14
    55dc:	84 8d       	ldd	r24, Z+28	; 0x1c
    55de:	95 8d       	ldd	r25, Z+29	; 0x1d
    55e0:	a6 8d       	ldd	r26, Z+30	; 0x1e
    55e2:	b7 8d       	ldd	r27, Z+31	; 0x1f
    55e4:	f1 01       	movw	r30, r2
    55e6:	82 87       	std	Z+10, r24	; 0x0a
    55e8:	93 87       	std	Z+11, r25	; 0x0b
    55ea:	a4 87       	std	Z+12, r26	; 0x0c
    55ec:	b5 87       	std	Z+13, r27	; 0x0d
			fp->fptr = 0;						/* File pointer */
    55ee:	16 82       	std	Z+6, r1	; 0x06
    55f0:	17 82       	std	Z+7, r1	; 0x07
    55f2:	10 86       	std	Z+8, r1	; 0x08
    55f4:	11 86       	std	Z+9, r1	; 0x09
			fp->dsect = 0;
    55f6:	16 8a       	std	Z+22, r1	; 0x16
    55f8:	17 8a       	std	Z+23, r1	; 0x17
    55fa:	10 8e       	std	Z+24, r1	; 0x18
    55fc:	11 8e       	std	Z+25, r1	; 0x19
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
    55fe:	11 83       	std	Z+1, r17	; 0x01
    5600:	00 83       	st	Z, r16
			fp->id = fp->fs->id;
    5602:	d8 01       	movw	r26, r16
    5604:	16 96       	adiw	r26, 0x06	; 6
    5606:	8d 91       	ld	r24, X+
    5608:	9c 91       	ld	r25, X
    560a:	17 97       	sbiw	r26, 0x07	; 7
    560c:	93 83       	std	Z+3, r25	; 0x03
    560e:	82 83       	std	Z+2, r24	; 0x02
    5610:	80 e0       	ldi	r24, 0x00	; 0
    5612:	69 c0       	rjmp	.+210    	; 0x56e6 <f_open+0x634>
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
    5614:	89 e0       	ldi	r24, 0x09	; 9
    5616:	67 c0       	rjmp	.+206    	; 0x56e6 <f_open+0x634>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    5618:	8f eb       	ldi	r24, 0xBF	; 191
    561a:	87 0f       	add	r24, r23
    561c:	8a 31       	cpi	r24, 0x1A	; 26
    561e:	08 f4       	brcc	.+2      	; 0x5622 <f_open+0x570>
    5620:	02 ce       	rjmp	.-1020   	; 0x5226 <f_open+0x174>
    5622:	03 ce       	rjmp	.-1018   	; 0x522a <f_open+0x178>
    5624:	6d a1       	ldd	r22, Y+37	; 0x25
    5626:	7e a1       	ldd	r23, Y+38	; 0x26
    5628:	93 2e       	mov	r9, r19
    562a:	29 a5       	ldd	r18, Y+41	; 0x29
    562c:	3a a5       	ldd	r19, Y+42	; 0x2a
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    562e:	c2 0e       	add	r12, r18
    5630:	d3 1e       	adc	r13, r19
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    5632:	80 e0       	ldi	r24, 0x00	; 0
    5634:	08 ce       	rjmp	.-1008   	; 0x5246 <f_open+0x194>
    5636:	6d a1       	ldd	r22, Y+37	; 0x25
    5638:	7e a1       	ldd	r23, Y+38	; 0x26
    563a:	93 2e       	mov	r9, r19
    563c:	29 a5       	ldd	r18, Y+41	; 0x29
    563e:	3a a5       	ldd	r19, Y+42	; 0x2a
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    5640:	c2 0e       	add	r12, r18
    5642:	d3 1e       	adc	r13, r19
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    5644:	84 e0       	ldi	r24, 0x04	; 4
    5646:	ff cd       	rjmp	.-1026   	; 0x5246 <f_open+0x194>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
    5648:	fa 01       	movw	r30, r20
    564a:	83 85       	ldd	r24, Z+11	; 0x0b
    564c:	82 ff       	sbrs	r24, 2
    564e:	4f ce       	rjmp	.-866    	; 0x52ee <f_open+0x23c>
    5650:	06 c0       	rjmp	.+12     	; 0x565e <f_open+0x5ac>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the sagment name */
			ns = dp->fn[NSFLAG];
    5652:	ed 89       	ldd	r30, Y+21	; 0x15
    5654:	fe 89       	ldd	r31, Y+22	; 0x16
    5656:	93 85       	ldd	r25, Z+11	; 0x0b
			if (res != FR_OK) {				/* Failed to find the object */
				if (res == FR_NO_FILE) {	/* Object is not found */
    5658:	84 30       	cpi	r24, 0x04	; 4
    565a:	51 f4       	brne	.+20     	; 0x5670 <f_open+0x5be>
    565c:	44 ce       	rjmp	.-888    	; 0x52e6 <f_open+0x234>
		INIT_BUF(dj);
		res = follow_path(&dj, path);	/* Follow the file path */
		dir = dj.dir;
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
			if (!dir)	/* Default directory itself */
    565e:	e1 14       	cp	r14, r1
    5660:	f1 04       	cpc	r15, r1
    5662:	c9 f4       	brne	.+50     	; 0x5696 <f_open+0x5e4>
    5664:	0c c0       	rjmp	.+24     	; 0x567e <f_open+0x5cc>
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
    5666:	86 e0       	ldi	r24, 0x06	; 6
    5668:	03 c0       	rjmp	.+6      	; 0x5670 <f_open+0x5be>
		dp->dir = 0;
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the sagment name */
    566a:	84 e0       	ldi	r24, 0x04	; 4
    566c:	01 c0       	rjmp	.+2      	; 0x5670 <f_open+0x5be>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			dir = dp->dir;						/* Follow the sub-directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
				res = FR_NO_PATH; break;
    566e:	85 e0       	ldi	r24, 0x05	; 5
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);	/* Follow the file path */
		dir = dj.dir;
    5670:	eb 88       	ldd	r14, Y+19	; 0x13
    5672:	fc 88       	ldd	r15, Y+20	; 0x14
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    5674:	98 2d       	mov	r25, r8
    5676:	9c 71       	andi	r25, 0x1C	; 28
    5678:	09 f0       	breq	.+2      	; 0x567c <f_open+0x5ca>
    567a:	58 ce       	rjmp	.-848    	; 0x532c <f_open+0x27a>
    567c:	6d cf       	rjmp	.-294    	; 0x5558 <f_open+0x4a6>
    567e:	18 2d       	mov	r17, r8
    5680:	1c 71       	andi	r17, 0x1C	; 28
    5682:	19 f5       	brne	.+70     	; 0x56ca <f_open+0x618>
    5684:	e1 2c       	mov	r14, r1
    5686:	f1 2c       	mov	r15, r1
		res = follow_path(&dj, path);	/* Follow the file path */
		dir = dj.dir;
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
			if (!dir)	/* Default directory itself */
				res = FR_INVALID_NAME;
    5688:	86 e0       	ldi	r24, 0x06	; 6
    568a:	15 c0       	rjmp	.+42     	; 0x56b6 <f_open+0x604>
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    568c:	18 2d       	mov	r17, r8
    568e:	1c 71       	andi	r17, 0x1C	; 28
    5690:	09 f0       	breq	.+2      	; 0x5694 <f_open+0x5e2>
    5692:	4f ce       	rjmp	.-866    	; 0x5332 <f_open+0x280>
    5694:	10 c0       	rjmp	.+32     	; 0x56b6 <f_open+0x604>
    5696:	88 2d       	mov	r24, r8
    5698:	8c 71       	andi	r24, 0x1C	; 28
    569a:	09 f0       	breq	.+2      	; 0x569e <f_open+0x5ec>
    569c:	9d ce       	rjmp	.-710    	; 0x53d8 <f_open+0x326>
    569e:	5e cf       	rjmp	.-324    	; 0x555c <f_open+0x4aa>
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
    56a0:	82 e0       	ldi	r24, 0x02	; 2
    56a2:	05 c0       	rjmp	.+10     	; 0x56ae <f_open+0x5fc>
    56a4:	82 e0       	ldi	r24, 0x02	; 2
    56a6:	03 c0       	rjmp	.+6      	; 0x56ae <f_open+0x5fc>
	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    56a8:	82 e0       	ldi	r24, 0x02	; 2
    56aa:	01 c0       	rjmp	.+2      	; 0x56ae <f_open+0x5fc>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    56ac:	81 e0       	ldi	r24, 0x01	; 1
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
    56ae:	88 23       	and	r24, r24
    56b0:	09 f4       	brne	.+2      	; 0x56b4 <f_open+0x602>
    56b2:	5e cf       	rjmp	.-324    	; 0x5570 <f_open+0x4be>
    56b4:	18 c0       	rjmp	.+48     	; 0x56e6 <f_open+0x634>
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
    56b6:	88 23       	and	r24, r24
    56b8:	09 f4       	brne	.+2      	; 0x56bc <f_open+0x60a>
    56ba:	6a cf       	rjmp	.-300    	; 0x5590 <f_open+0x4de>
    56bc:	14 c0       	rjmp	.+40     	; 0x56e6 <f_open+0x634>
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);	/* Follow the file path */
		dir = dj.dir;
    56be:	eb 88       	ldd	r14, Y+19	; 0x13
    56c0:	fc 88       	ldd	r15, Y+20	; 0x14
    56c2:	86 e0       	ldi	r24, 0x06	; 6
    56c4:	e3 cf       	rjmp	.-58     	; 0x568c <f_open+0x5da>
				n = 0;					/* Not a blank entry. Restart to search */
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
		} while (res == FR_OK);
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    56c6:	87 e0       	ldi	r24, 0x07	; 7
    56c8:	01 c0       	rjmp	.+2      	; 0x56cc <f_open+0x61a>
		res = follow_path(&dj, path);	/* Follow the file path */
		dir = dj.dir;
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
			if (!dir)	/* Default directory itself */
				res = FR_INVALID_NAME;
    56ca:	86 e0       	ldi	r24, 0x06	; 6
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    56cc:	fd a5       	ldd	r31, Y+45	; 0x2d
    56ce:	f8 60       	ori	r31, 0x08	; 8
    56d0:	fd a7       	std	Y+45, r31	; 0x2d
				dir = dj.dir;					/* New entry */
    56d2:	eb 88       	ldd	r14, Y+19	; 0x13
    56d4:	fc 88       	ldd	r15, Y+20	; 0x14
    56d6:	ef cf       	rjmp	.-34     	; 0x56b6 <f_open+0x604>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
					res = FR_DENIED;
    56d8:	87 e0       	ldi	r24, 0x07	; 7
    56da:	05 c0       	rjmp	.+10     	; 0x56e6 <f_open+0x634>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
    56dc:	88 e0       	ldi	r24, 0x08	; 8
    56de:	03 c0       	rjmp	.+6      	; 0x56e6 <f_open+0x634>
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
					res = FR_NO_FILE;
    56e0:	84 e0       	ldi	r24, 0x04	; 4
    56e2:	01 c0       	rjmp	.+2      	; 0x56e6 <f_open+0x634>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
    56e4:	87 e0       	ldi	r24, 0x07	; 7
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
    56e6:	ae 96       	adiw	r28, 0x2e	; 46
    56e8:	0f b6       	in	r0, 0x3f	; 63
    56ea:	f8 94       	cli
    56ec:	de bf       	out	0x3e, r29	; 62
    56ee:	0f be       	out	0x3f, r0	; 63
    56f0:	cd bf       	out	0x3d, r28	; 61
    56f2:	df 91       	pop	r29
    56f4:	cf 91       	pop	r28
    56f6:	1f 91       	pop	r17
    56f8:	0f 91       	pop	r16
    56fa:	ff 90       	pop	r15
    56fc:	ef 90       	pop	r14
    56fe:	df 90       	pop	r13
    5700:	cf 90       	pop	r12
    5702:	bf 90       	pop	r11
    5704:	af 90       	pop	r10
    5706:	9f 90       	pop	r9
    5708:	8f 90       	pop	r8
    570a:	7f 90       	pop	r7
    570c:	6f 90       	pop	r6
    570e:	5f 90       	pop	r5
    5710:	4f 90       	pop	r4
    5712:	3f 90       	pop	r3
    5714:	2f 90       	pop	r2
    5716:	08 95       	ret

00005718 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
    5718:	2f 92       	push	r2
    571a:	3f 92       	push	r3
    571c:	4f 92       	push	r4
    571e:	5f 92       	push	r5
    5720:	6f 92       	push	r6
    5722:	7f 92       	push	r7
    5724:	8f 92       	push	r8
    5726:	9f 92       	push	r9
    5728:	af 92       	push	r10
    572a:	bf 92       	push	r11
    572c:	cf 92       	push	r12
    572e:	df 92       	push	r13
    5730:	ef 92       	push	r14
    5732:	ff 92       	push	r15
    5734:	0f 93       	push	r16
    5736:	1f 93       	push	r17
    5738:	cf 93       	push	r28
    573a:	df 93       	push	r29
    573c:	ec 01       	movw	r28, r24
    573e:	4b 01       	movw	r8, r22
    5740:	6a 01       	movw	r12, r20
    5742:	59 01       	movw	r10, r18
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
    5744:	f9 01       	movw	r30, r18
    5746:	11 82       	std	Z+1, r1	; 0x01
    5748:	10 82       	st	Z, r1

	res = validate(fp);						/* Check validity */
    574a:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    574e:	81 11       	cpse	r24, r1
    5750:	6a c1       	rjmp	.+724    	; 0x5a26 <f_write+0x30e>
	if (fp->err)							/* Check error */
    5752:	8d 81       	ldd	r24, Y+5	; 0x05
    5754:	81 11       	cpse	r24, r1
    5756:	67 c1       	rjmp	.+718    	; 0x5a26 <f_write+0x30e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    5758:	8c 81       	ldd	r24, Y+4	; 0x04
    575a:	81 ff       	sbrs	r24, 1
    575c:	63 c1       	rjmp	.+710    	; 0x5a24 <f_write+0x30c>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
    575e:	8e 81       	ldd	r24, Y+6	; 0x06
    5760:	9f 81       	ldd	r25, Y+7	; 0x07
    5762:	a8 85       	ldd	r26, Y+8	; 0x08
    5764:	b9 85       	ldd	r27, Y+9	; 0x09
    5766:	ac 01       	movw	r20, r24
    5768:	bd 01       	movw	r22, r26
    576a:	4c 0d       	add	r20, r12
    576c:	5d 1d       	adc	r21, r13
    576e:	61 1d       	adc	r22, r1
    5770:	71 1d       	adc	r23, r1
    5772:	48 17       	cp	r20, r24
    5774:	59 07       	cpc	r21, r25
    5776:	6a 07       	cpc	r22, r26
    5778:	7b 07       	cpc	r23, r27
    577a:	08 f4       	brcc	.+2      	; 0x577e <f_write+0x66>
    577c:	3d c1       	rjmp	.+634    	; 0x59f8 <f_write+0x2e0>

	for ( ;  btw;							/* Repeat until all data written */
    577e:	c1 14       	cp	r12, r1
    5780:	d1 04       	cpc	r13, r1
    5782:	09 f4       	brne	.+2      	; 0x5786 <f_write+0x6e>
    5784:	39 c1       	rjmp	.+626    	; 0x59f8 <f_write+0x2e0>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    5786:	4e 81       	ldd	r20, Y+6	; 0x06
    5788:	5f 81       	ldd	r21, Y+7	; 0x07
    578a:	68 85       	ldd	r22, Y+8	; 0x08
    578c:	79 85       	ldd	r23, Y+9	; 0x09
    578e:	db 01       	movw	r26, r22
    5790:	ca 01       	movw	r24, r20
    5792:	91 70       	andi	r25, 0x01	; 1
    5794:	aa 27       	eor	r26, r26
    5796:	bb 27       	eor	r27, r27
    5798:	89 2b       	or	r24, r25
    579a:	8a 2b       	or	r24, r26
    579c:	8b 2b       	or	r24, r27
    579e:	09 f0       	breq	.+2      	; 0x57a2 <f_write+0x8a>
    57a0:	e5 c0       	rjmp	.+458    	; 0x596c <f_write+0x254>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    57a2:	e8 81       	ld	r30, Y
    57a4:	f9 81       	ldd	r31, Y+1	; 0x01
    57a6:	12 81       	ldd	r17, Z+2	; 0x02
    57a8:	11 50       	subi	r17, 0x01	; 1
    57aa:	db 01       	movw	r26, r22
    57ac:	ca 01       	movw	r24, r20
    57ae:	07 2e       	mov	r0, r23
    57b0:	79 e0       	ldi	r23, 0x09	; 9
    57b2:	b6 95       	lsr	r27
    57b4:	a7 95       	ror	r26
    57b6:	97 95       	ror	r25
    57b8:	87 95       	ror	r24
    57ba:	7a 95       	dec	r23
    57bc:	d1 f7       	brne	.-12     	; 0x57b2 <f_write+0x9a>
    57be:	70 2d       	mov	r23, r0
    57c0:	18 23       	and	r17, r24
			if (!csect) {					/* On the cluster boundary? */
    57c2:	09 f0       	breq	.+2      	; 0x57c6 <f_write+0xae>
    57c4:	40 c0       	rjmp	.+128    	; 0x5846 <f_write+0x12e>
				if (fp->fptr == 0) {		/* On the top of the file? */
    57c6:	45 2b       	or	r20, r21
    57c8:	46 2b       	or	r20, r22
    57ca:	47 2b       	or	r20, r23
    57cc:	79 f4       	brne	.+30     	; 0x57ec <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
    57ce:	6e 85       	ldd	r22, Y+14	; 0x0e
    57d0:	7f 85       	ldd	r23, Y+15	; 0x0f
    57d2:	88 89       	ldd	r24, Y+16	; 0x10
    57d4:	99 89       	ldd	r25, Y+17	; 0x11
					if (clst == 0)			/* When no cluster is allocated, */
    57d6:	61 15       	cp	r22, r1
    57d8:	71 05       	cpc	r23, r1
    57da:	81 05       	cpc	r24, r1
    57dc:	91 05       	cpc	r25, r1
    57de:	91 f4       	brne	.+36     	; 0x5804 <f_write+0xec>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    57e0:	40 e0       	ldi	r20, 0x00	; 0
    57e2:	50 e0       	ldi	r21, 0x00	; 0
    57e4:	ba 01       	movw	r22, r20
    57e6:	cf 01       	movw	r24, r30
    57e8:	dc d9       	rcall	.-3144   	; 0x4ba2 <create_chain>
    57ea:	06 c0       	rjmp	.+12     	; 0x57f8 <f_write+0xe0>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    57ec:	4a 89       	ldd	r20, Y+18	; 0x12
    57ee:	5b 89       	ldd	r21, Y+19	; 0x13
    57f0:	6c 89       	ldd	r22, Y+20	; 0x14
    57f2:	7d 89       	ldd	r23, Y+21	; 0x15
    57f4:	cf 01       	movw	r24, r30
    57f6:	d5 d9       	rcall	.-3158   	; 0x4ba2 <create_chain>
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    57f8:	61 15       	cp	r22, r1
    57fa:	71 05       	cpc	r23, r1
    57fc:	81 05       	cpc	r24, r1
    57fe:	91 05       	cpc	r25, r1
    5800:	09 f4       	brne	.+2      	; 0x5804 <f_write+0xec>
    5802:	fa c0       	rjmp	.+500    	; 0x59f8 <f_write+0x2e0>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    5804:	61 30       	cpi	r22, 0x01	; 1
    5806:	71 05       	cpc	r23, r1
    5808:	81 05       	cpc	r24, r1
    580a:	91 05       	cpc	r25, r1
    580c:	19 f4       	brne	.+6      	; 0x5814 <f_write+0xfc>
    580e:	82 e0       	ldi	r24, 0x02	; 2
    5810:	8d 83       	std	Y+5, r24	; 0x05
    5812:	09 c1       	rjmp	.+530    	; 0x5a26 <f_write+0x30e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    5814:	6f 3f       	cpi	r22, 0xFF	; 255
    5816:	ff ef       	ldi	r31, 0xFF	; 255
    5818:	7f 07       	cpc	r23, r31
    581a:	8f 07       	cpc	r24, r31
    581c:	9f 07       	cpc	r25, r31
    581e:	19 f4       	brne	.+6      	; 0x5826 <f_write+0x10e>
    5820:	81 e0       	ldi	r24, 0x01	; 1
    5822:	8d 83       	std	Y+5, r24	; 0x05
    5824:	00 c1       	rjmp	.+512    	; 0x5a26 <f_write+0x30e>
				fp->clust = clst;			/* Update current cluster */
    5826:	6a 8b       	std	Y+18, r22	; 0x12
    5828:	7b 8b       	std	Y+19, r23	; 0x13
    582a:	8c 8b       	std	Y+20, r24	; 0x14
    582c:	9d 8b       	std	Y+21, r25	; 0x15
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
    582e:	4e 84       	ldd	r4, Y+14	; 0x0e
    5830:	5f 84       	ldd	r5, Y+15	; 0x0f
    5832:	68 88       	ldd	r6, Y+16	; 0x10
    5834:	79 88       	ldd	r7, Y+17	; 0x11
    5836:	45 28       	or	r4, r5
    5838:	46 28       	or	r4, r6
    583a:	47 28       	or	r4, r7
    583c:	21 f4       	brne	.+8      	; 0x5846 <f_write+0x12e>
    583e:	6e 87       	std	Y+14, r22	; 0x0e
    5840:	7f 87       	std	Y+15, r23	; 0x0f
    5842:	88 8b       	std	Y+16, r24	; 0x10
    5844:	99 8b       	std	Y+17, r25	; 0x11
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
    5846:	e8 81       	ld	r30, Y
    5848:	f9 81       	ldd	r31, Y+1	; 0x01
    584a:	42 a5       	ldd	r20, Z+42	; 0x2a
    584c:	53 a5       	ldd	r21, Z+43	; 0x2b
    584e:	64 a5       	ldd	r22, Z+44	; 0x2c
    5850:	75 a5       	ldd	r23, Z+45	; 0x2d
    5852:	8e 89       	ldd	r24, Y+22	; 0x16
    5854:	9f 89       	ldd	r25, Y+23	; 0x17
    5856:	a8 8d       	ldd	r26, Y+24	; 0x18
    5858:	b9 8d       	ldd	r27, Y+25	; 0x19
    585a:	48 17       	cp	r20, r24
    585c:	59 07       	cpc	r21, r25
    585e:	6a 07       	cpc	r22, r26
    5860:	7b 07       	cpc	r23, r27
    5862:	41 f4       	brne	.+16     	; 0x5874 <f_write+0x15c>
    5864:	cf 01       	movw	r24, r30
    5866:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <sync_window>
    586a:	88 23       	and	r24, r24
    586c:	19 f0       	breq	.+6      	; 0x5874 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
    586e:	81 e0       	ldi	r24, 0x01	; 1
    5870:	8d 83       	std	Y+5, r24	; 0x05
    5872:	d9 c0       	rjmp	.+434    	; 0x5a26 <f_write+0x30e>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    5874:	28 80       	ld	r2, Y
    5876:	39 80       	ldd	r3, Y+1	; 0x01
    5878:	4a 89       	ldd	r20, Y+18	; 0x12
    587a:	5b 89       	ldd	r21, Y+19	; 0x13
    587c:	6c 89       	ldd	r22, Y+20	; 0x14
    587e:	7d 89       	ldd	r23, Y+21	; 0x15
    5880:	c1 01       	movw	r24, r2
    5882:	0e 94 e9 22 	call	0x45d2	; 0x45d2 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    5886:	61 15       	cp	r22, r1
    5888:	71 05       	cpc	r23, r1
    588a:	81 05       	cpc	r24, r1
    588c:	91 05       	cpc	r25, r1
    588e:	19 f4       	brne	.+6      	; 0x5896 <f_write+0x17e>
    5890:	82 e0       	ldi	r24, 0x02	; 2
    5892:	8d 83       	std	Y+5, r24	; 0x05
    5894:	c8 c0       	rjmp	.+400    	; 0x5a26 <f_write+0x30e>
			sect += csect;
    5896:	2b 01       	movw	r4, r22
    5898:	3c 01       	movw	r6, r24
    589a:	41 0e       	add	r4, r17
    589c:	51 1c       	adc	r5, r1
    589e:	61 1c       	adc	r6, r1
    58a0:	71 1c       	adc	r7, r1
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    58a2:	76 01       	movw	r14, r12
    58a4:	ef 2c       	mov	r14, r15
    58a6:	ff 24       	eor	r15, r15
    58a8:	e6 94       	lsr	r14
			if (cc) {						/* Write maximum contiguous sectors directly */
    58aa:	e1 14       	cp	r14, r1
    58ac:	f1 04       	cpc	r15, r1
    58ae:	09 f4       	brne	.+2      	; 0x58b2 <f_write+0x19a>
    58b0:	3e c0       	rjmp	.+124    	; 0x592e <f_write+0x216>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    58b2:	f1 01       	movw	r30, r2
    58b4:	42 81       	ldd	r20, Z+2	; 0x02
    58b6:	24 2f       	mov	r18, r20
    58b8:	30 e0       	ldi	r19, 0x00	; 0
    58ba:	c7 01       	movw	r24, r14
    58bc:	81 0f       	add	r24, r17
    58be:	91 1d       	adc	r25, r1
    58c0:	28 17       	cp	r18, r24
    58c2:	39 07       	cpc	r19, r25
    58c4:	18 f4       	brcc	.+6      	; 0x58cc <f_write+0x1b4>
					cc = fp->fs->csize - csect;
    58c6:	79 01       	movw	r14, r18
    58c8:	e1 1a       	sub	r14, r17
    58ca:	f1 08       	sbc	r15, r1
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
    58cc:	87 01       	movw	r16, r14
    58ce:	a3 01       	movw	r20, r6
    58d0:	92 01       	movw	r18, r4
    58d2:	b4 01       	movw	r22, r8
    58d4:	f1 01       	movw	r30, r2
    58d6:	81 81       	ldd	r24, Z+1	; 0x01
    58d8:	4a d5       	rcall	.+2708   	; 0x636e <disk_write>
    58da:	88 23       	and	r24, r24
    58dc:	19 f0       	breq	.+6      	; 0x58e4 <f_write+0x1cc>
					ABORT(fp->fs, FR_DISK_ERR);
    58de:	81 e0       	ldi	r24, 0x01	; 1
    58e0:	8d 83       	std	Y+5, r24	; 0x05
    58e2:	a1 c0       	rjmp	.+322    	; 0x5a26 <f_write+0x30e>
#if _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    58e4:	e8 81       	ld	r30, Y
    58e6:	f9 81       	ldd	r31, Y+1	; 0x01
    58e8:	82 a5       	ldd	r24, Z+42	; 0x2a
    58ea:	93 a5       	ldd	r25, Z+43	; 0x2b
    58ec:	a4 a5       	ldd	r26, Z+44	; 0x2c
    58ee:	b5 a5       	ldd	r27, Z+45	; 0x2d
    58f0:	84 19       	sub	r24, r4
    58f2:	95 09       	sbc	r25, r5
    58f4:	a6 09       	sbc	r26, r6
    58f6:	b7 09       	sbc	r27, r7
    58f8:	a7 01       	movw	r20, r14
    58fa:	60 e0       	ldi	r22, 0x00	; 0
    58fc:	70 e0       	ldi	r23, 0x00	; 0
    58fe:	84 17       	cp	r24, r20
    5900:	95 07       	cpc	r25, r21
    5902:	a6 07       	cpc	r26, r22
    5904:	b7 07       	cpc	r27, r23
    5906:	78 f4       	brcc	.+30     	; 0x5926 <f_write+0x20e>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    5908:	98 2f       	mov	r25, r24
    590a:	88 27       	eor	r24, r24
    590c:	99 0f       	add	r25, r25
    590e:	b4 01       	movw	r22, r8
    5910:	68 0f       	add	r22, r24
    5912:	79 1f       	adc	r23, r25
    5914:	40 e0       	ldi	r20, 0x00	; 0
    5916:	52 e0       	ldi	r21, 0x02	; 2
    5918:	cf 01       	movw	r24, r30
    591a:	8e 96       	adiw	r24, 0x2e	; 46
    591c:	0e 94 97 1e 	call	0x3d2e	; 0x3d2e <mem_cpy>
					fp->fs->wflag = 0;
    5920:	e8 81       	ld	r30, Y
    5922:	f9 81       	ldd	r31, Y+1	; 0x01
    5924:	14 82       	std	Z+4, r1	; 0x04
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    5926:	fe 2c       	mov	r15, r14
    5928:	ee 24       	eor	r14, r14
    592a:	ff 0c       	add	r15, r15
				continue;
    592c:	4c c0       	rjmp	.+152    	; 0x59c6 <f_write+0x2ae>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    592e:	4e 81       	ldd	r20, Y+6	; 0x06
    5930:	5f 81       	ldd	r21, Y+7	; 0x07
    5932:	68 85       	ldd	r22, Y+8	; 0x08
    5934:	79 85       	ldd	r23, Y+9	; 0x09
    5936:	8a 85       	ldd	r24, Y+10	; 0x0a
    5938:	9b 85       	ldd	r25, Y+11	; 0x0b
    593a:	ac 85       	ldd	r26, Y+12	; 0x0c
    593c:	bd 85       	ldd	r27, Y+13	; 0x0d
    593e:	48 17       	cp	r20, r24
    5940:	59 07       	cpc	r21, r25
    5942:	6a 07       	cpc	r22, r26
    5944:	7b 07       	cpc	r23, r27
    5946:	70 f0       	brcs	.+28     	; 0x5964 <f_write+0x24c>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
    5948:	c1 01       	movw	r24, r2
    594a:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <sync_window>
    594e:	88 23       	and	r24, r24
    5950:	19 f0       	breq	.+6      	; 0x5958 <f_write+0x240>
    5952:	81 e0       	ldi	r24, 0x01	; 1
    5954:	8d 83       	std	Y+5, r24	; 0x05
    5956:	67 c0       	rjmp	.+206    	; 0x5a26 <f_write+0x30e>
				fp->fs->winsect = sect;
    5958:	e8 81       	ld	r30, Y
    595a:	f9 81       	ldd	r31, Y+1	; 0x01
    595c:	42 a6       	std	Z+42, r4	; 0x2a
    595e:	53 a6       	std	Z+43, r5	; 0x2b
    5960:	64 a6       	std	Z+44, r6	; 0x2c
    5962:	75 a6       	std	Z+45, r7	; 0x2d
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    5964:	4e 8a       	std	Y+22, r4	; 0x16
    5966:	5f 8a       	std	Y+23, r5	; 0x17
    5968:	68 8e       	std	Y+24, r6	; 0x18
    596a:	79 8e       	std	Y+25, r7	; 0x19
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    596c:	8e 81       	ldd	r24, Y+6	; 0x06
    596e:	9f 81       	ldd	r25, Y+7	; 0x07
    5970:	91 70       	andi	r25, 0x01	; 1
    5972:	20 e0       	ldi	r18, 0x00	; 0
    5974:	32 e0       	ldi	r19, 0x02	; 2
    5976:	79 01       	movw	r14, r18
    5978:	e8 1a       	sub	r14, r24
    597a:	f9 0a       	sbc	r15, r25
    597c:	ce 14       	cp	r12, r14
    597e:	df 04       	cpc	r13, r15
    5980:	08 f4       	brcc	.+2      	; 0x5984 <f_write+0x26c>
    5982:	76 01       	movw	r14, r12
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
    5984:	4e 89       	ldd	r20, Y+22	; 0x16
    5986:	5f 89       	ldd	r21, Y+23	; 0x17
    5988:	68 8d       	ldd	r22, Y+24	; 0x18
    598a:	79 8d       	ldd	r23, Y+25	; 0x19
    598c:	88 81       	ld	r24, Y
    598e:	99 81       	ldd	r25, Y+1	; 0x01
    5990:	0e 94 65 1f 	call	0x3eca	; 0x3eca <move_window>
    5994:	88 23       	and	r24, r24
    5996:	19 f0       	breq	.+6      	; 0x599e <f_write+0x286>
			ABORT(fp->fs, FR_DISK_ERR);
    5998:	81 e0       	ldi	r24, 0x01	; 1
    599a:	8d 83       	std	Y+5, r24	; 0x05
    599c:	44 c0       	rjmp	.+136    	; 0x5a26 <f_write+0x30e>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    599e:	8e 81       	ldd	r24, Y+6	; 0x06
    59a0:	9f 81       	ldd	r25, Y+7	; 0x07
    59a2:	a8 85       	ldd	r26, Y+8	; 0x08
    59a4:	b9 85       	ldd	r27, Y+9	; 0x09
    59a6:	91 70       	andi	r25, 0x01	; 1
    59a8:	aa 27       	eor	r26, r26
    59aa:	bb 27       	eor	r27, r27
    59ac:	8e 96       	adiw	r24, 0x2e	; 46
    59ae:	28 81       	ld	r18, Y
    59b0:	39 81       	ldd	r19, Y+1	; 0x01
    59b2:	a7 01       	movw	r20, r14
    59b4:	b4 01       	movw	r22, r8
    59b6:	82 0f       	add	r24, r18
    59b8:	93 1f       	adc	r25, r19
    59ba:	0e 94 97 1e 	call	0x3d2e	; 0x3d2e <mem_cpy>
		fp->fs->wflag = 1;
    59be:	e8 81       	ld	r30, Y
    59c0:	f9 81       	ldd	r31, Y+1	; 0x01
    59c2:	21 e0       	ldi	r18, 0x01	; 1
    59c4:	24 83       	std	Z+4, r18	; 0x04
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    59c6:	8e 0c       	add	r8, r14
    59c8:	9f 1c       	adc	r9, r15
    59ca:	8e 81       	ldd	r24, Y+6	; 0x06
    59cc:	9f 81       	ldd	r25, Y+7	; 0x07
    59ce:	a8 85       	ldd	r26, Y+8	; 0x08
    59d0:	b9 85       	ldd	r27, Y+9	; 0x09
    59d2:	8e 0d       	add	r24, r14
    59d4:	9f 1d       	adc	r25, r15
    59d6:	a1 1d       	adc	r26, r1
    59d8:	b1 1d       	adc	r27, r1
    59da:	8e 83       	std	Y+6, r24	; 0x06
    59dc:	9f 83       	std	Y+7, r25	; 0x07
    59de:	a8 87       	std	Y+8, r26	; 0x08
    59e0:	b9 87       	std	Y+9, r27	; 0x09
    59e2:	f5 01       	movw	r30, r10
    59e4:	80 81       	ld	r24, Z
    59e6:	91 81       	ldd	r25, Z+1	; 0x01
    59e8:	8e 0d       	add	r24, r14
    59ea:	9f 1d       	adc	r25, r15
    59ec:	91 83       	std	Z+1, r25	; 0x01
    59ee:	80 83       	st	Z, r24
    59f0:	ce 18       	sub	r12, r14
    59f2:	df 08       	sbc	r13, r15
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
    59f4:	09 f0       	breq	.+2      	; 0x59f8 <f_write+0x2e0>
    59f6:	c7 ce       	rjmp	.-626    	; 0x5786 <f_write+0x6e>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    59f8:	8e 81       	ldd	r24, Y+6	; 0x06
    59fa:	9f 81       	ldd	r25, Y+7	; 0x07
    59fc:	a8 85       	ldd	r26, Y+8	; 0x08
    59fe:	b9 85       	ldd	r27, Y+9	; 0x09
    5a00:	4a 85       	ldd	r20, Y+10	; 0x0a
    5a02:	5b 85       	ldd	r21, Y+11	; 0x0b
    5a04:	6c 85       	ldd	r22, Y+12	; 0x0c
    5a06:	7d 85       	ldd	r23, Y+13	; 0x0d
    5a08:	48 17       	cp	r20, r24
    5a0a:	59 07       	cpc	r21, r25
    5a0c:	6a 07       	cpc	r22, r26
    5a0e:	7b 07       	cpc	r23, r27
    5a10:	20 f4       	brcc	.+8      	; 0x5a1a <f_write+0x302>
    5a12:	8a 87       	std	Y+10, r24	; 0x0a
    5a14:	9b 87       	std	Y+11, r25	; 0x0b
    5a16:	ac 87       	std	Y+12, r26	; 0x0c
    5a18:	bd 87       	std	Y+13, r27	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    5a1a:	8c 81       	ldd	r24, Y+4	; 0x04
    5a1c:	80 62       	ori	r24, 0x20	; 32
    5a1e:	8c 83       	std	Y+4, r24	; 0x04

	LEAVE_FF(fp->fs, FR_OK);
    5a20:	80 e0       	ldi	r24, 0x00	; 0
    5a22:	01 c0       	rjmp	.+2      	; 0x5a26 <f_write+0x30e>
	res = validate(fp);						/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->err)							/* Check error */
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    5a24:	87 e0       	ldi	r24, 0x07	; 7

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    5a26:	df 91       	pop	r29
    5a28:	cf 91       	pop	r28
    5a2a:	1f 91       	pop	r17
    5a2c:	0f 91       	pop	r16
    5a2e:	ff 90       	pop	r15
    5a30:	ef 90       	pop	r14
    5a32:	df 90       	pop	r13
    5a34:	cf 90       	pop	r12
    5a36:	bf 90       	pop	r11
    5a38:	af 90       	pop	r10
    5a3a:	9f 90       	pop	r9
    5a3c:	8f 90       	pop	r8
    5a3e:	7f 90       	pop	r7
    5a40:	6f 90       	pop	r6
    5a42:	5f 90       	pop	r5
    5a44:	4f 90       	pop	r4
    5a46:	3f 90       	pop	r3
    5a48:	2f 90       	pop	r2
    5a4a:	08 95       	ret

00005a4c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
    5a4c:	0f 93       	push	r16
    5a4e:	1f 93       	push	r17
    5a50:	cf 93       	push	r28
    5a52:	df 93       	push	r29
    5a54:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
    5a56:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <validate>
    5a5a:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    5a5c:	81 11       	cpse	r24, r1
    5a5e:	96 c0       	rjmp	.+300    	; 0x5b8c <f_sync+0x140>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    5a60:	8c 81       	ldd	r24, Y+4	; 0x04
    5a62:	85 ff       	sbrs	r24, 5
    5a64:	93 c0       	rjmp	.+294    	; 0x5b8c <f_sync+0x140>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    5a66:	4a 8d       	ldd	r20, Y+26	; 0x1a
    5a68:	5b 8d       	ldd	r21, Y+27	; 0x1b
    5a6a:	6c 8d       	ldd	r22, Y+28	; 0x1c
    5a6c:	7d 8d       	ldd	r23, Y+29	; 0x1d
    5a6e:	88 81       	ld	r24, Y
    5a70:	99 81       	ldd	r25, Y+1	; 0x01
    5a72:	0e 94 65 1f 	call	0x3eca	; 0x3eca <move_window>
    5a76:	98 2f       	mov	r25, r24
			if (res == FR_OK) {
    5a78:	81 11       	cpse	r24, r1
    5a7a:	88 c0       	rjmp	.+272    	; 0x5b8c <f_sync+0x140>
				dir = fp->dir_ptr;
    5a7c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    5a7e:	ff 8d       	ldd	r31, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    5a80:	83 85       	ldd	r24, Z+11	; 0x0b
    5a82:	80 62       	ori	r24, 0x20	; 32
    5a84:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
    5a86:	8a 85       	ldd	r24, Y+10	; 0x0a
    5a88:	9b 85       	ldd	r25, Y+11	; 0x0b
    5a8a:	ac 85       	ldd	r26, Y+12	; 0x0c
    5a8c:	bd 85       	ldd	r27, Y+13	; 0x0d
    5a8e:	84 8f       	std	Z+28, r24	; 0x1c
    5a90:	95 8f       	std	Z+29, r25	; 0x1d
    5a92:	a6 8f       	std	Z+30, r26	; 0x1e
    5a94:	b7 8f       	std	Z+31, r27	; 0x1f
				st_clust(dir, fp->sclust);					/* Update start cluster */
    5a96:	8e 85       	ldd	r24, Y+14	; 0x0e
    5a98:	9f 85       	ldd	r25, Y+15	; 0x0f
    5a9a:	a8 89       	ldd	r26, Y+16	; 0x10
    5a9c:	b9 89       	ldd	r27, Y+17	; 0x11
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir + DIR_FstClusLO, cl);
    5a9e:	93 8f       	std	Z+27, r25	; 0x1b
    5aa0:	82 8f       	std	Z+26, r24	; 0x1a
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
    5aa2:	b5 8b       	std	Z+21, r27	; 0x15
    5aa4:	a4 8b       	std	Z+20, r26	; 0x14
				dir = fp->dir_ptr;
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
				st_clust(dir, fp->sclust);					/* Update start cluster */
				tm = GET_FATTIME();							/* Update updated time */
				ST_DWORD(dir + DIR_WrtTime, tm);
    5aa6:	80 e0       	ldi	r24, 0x00	; 0
    5aa8:	90 e0       	ldi	r25, 0x00	; 0
    5aaa:	a0 ef       	ldi	r26, 0xF0	; 240
    5aac:	be e4       	ldi	r27, 0x4E	; 78
    5aae:	86 8b       	std	Z+22, r24	; 0x16
    5ab0:	97 8b       	std	Z+23, r25	; 0x17
    5ab2:	a0 8f       	std	Z+24, r26	; 0x18
    5ab4:	b1 8f       	std	Z+25, r27	; 0x19
				ST_WORD(dir + DIR_LstAccDate, 0);
    5ab6:	13 8a       	std	Z+19, r1	; 0x13
    5ab8:	12 8a       	std	Z+18, r1	; 0x12
				fp->flag &= ~FA__WRITTEN;
    5aba:	8c 81       	ldd	r24, Y+4	; 0x04
    5abc:	8f 7d       	andi	r24, 0xDF	; 223
    5abe:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    5ac0:	e8 81       	ld	r30, Y
    5ac2:	f9 81       	ldd	r31, Y+1	; 0x01
    5ac4:	81 e0       	ldi	r24, 0x01	; 1
    5ac6:	84 83       	std	Z+4, r24	; 0x04
				res = sync_fs(fp->fs);
    5ac8:	09 90       	ld	r0, Y+
    5aca:	d8 81       	ld	r29, Y
    5acc:	c0 2d       	mov	r28, r0
)
{
	FRESULT res;


	res = sync_window(fs);
    5ace:	ce 01       	movw	r24, r28
    5ad0:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <sync_window>
    5ad4:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    5ad6:	81 11       	cpse	r24, r1
    5ad8:	59 c0       	rjmp	.+178    	; 0x5b8c <f_sync+0x140>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
    5ada:	88 81       	ld	r24, Y
    5adc:	83 30       	cpi	r24, 0x03	; 3
    5ade:	09 f0       	breq	.+2      	; 0x5ae2 <f_sync+0x96>
    5ae0:	4c c0       	rjmp	.+152    	; 0x5b7a <f_sync+0x12e>
    5ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    5ae4:	81 30       	cpi	r24, 0x01	; 1
    5ae6:	09 f0       	breq	.+2      	; 0x5aea <f_sync+0x9e>
    5ae8:	48 c0       	rjmp	.+144    	; 0x5b7a <f_sync+0x12e>
			/* Create FSINFO structure */
			mem_set(fs->win, 0, SS(fs));
    5aea:	be 01       	movw	r22, r28
    5aec:	62 5d       	subi	r22, 0xD2	; 210
    5aee:	7f 4f       	sbci	r23, 0xFF	; 255
    5af0:	fb 01       	movw	r30, r22
    5af2:	ce 01       	movw	r24, r28
    5af4:	82 5d       	subi	r24, 0xD2	; 210
    5af6:	9d 4f       	sbci	r25, 0xFD	; 253
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    5af8:	11 92       	st	Z+, r1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    5afa:	e8 17       	cp	r30, r24
    5afc:	f9 07       	cpc	r31, r25
    5afe:	e1 f7       	brne	.-8      	; 0x5af8 <f_sync+0xac>
	if (res == FR_OK) {
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
			/* Create FSINFO structure */
			mem_set(fs->win, 0, SS(fs));
			ST_WORD(fs->win + BS_55AA, 0xAA55);
    5b00:	85 e5       	ldi	r24, 0x55	; 85
    5b02:	9a ea       	ldi	r25, 0xAA	; 170
    5b04:	fe 01       	movw	r30, r28
    5b06:	e4 5d       	subi	r30, 0xD4	; 212
    5b08:	fd 4f       	sbci	r31, 0xFD	; 253
    5b0a:	91 83       	std	Z+1, r25	; 0x01
    5b0c:	80 83       	st	Z, r24
			ST_DWORD(fs->win + FSI_LeadSig, 0x41615252);
    5b0e:	82 e5       	ldi	r24, 0x52	; 82
    5b10:	92 e5       	ldi	r25, 0x52	; 82
    5b12:	a1 e6       	ldi	r26, 0x61	; 97
    5b14:	b1 e4       	ldi	r27, 0x41	; 65
    5b16:	8e a7       	std	Y+46, r24	; 0x2e
    5b18:	9f a7       	std	Y+47, r25	; 0x2f
    5b1a:	a8 ab       	std	Y+48, r26	; 0x30
    5b1c:	b9 ab       	std	Y+49, r27	; 0x31
			ST_DWORD(fs->win + FSI_StrucSig, 0x61417272);
    5b1e:	82 e7       	ldi	r24, 0x72	; 114
    5b20:	92 e7       	ldi	r25, 0x72	; 114
    5b22:	a1 e4       	ldi	r26, 0x41	; 65
    5b24:	b1 e6       	ldi	r27, 0x61	; 97
    5b26:	7a 97       	sbiw	r30, 0x1a	; 26
    5b28:	80 83       	st	Z, r24
    5b2a:	91 83       	std	Z+1, r25	; 0x01
    5b2c:	a2 83       	std	Z+2, r26	; 0x02
    5b2e:	b3 83       	std	Z+3, r27	; 0x03
			ST_DWORD(fs->win + FSI_Free_Count, fs->free_clust);
    5b30:	8e 85       	ldd	r24, Y+14	; 0x0e
    5b32:	9f 85       	ldd	r25, Y+15	; 0x0f
    5b34:	a8 89       	ldd	r26, Y+16	; 0x10
    5b36:	b9 89       	ldd	r27, Y+17	; 0x11
    5b38:	34 96       	adiw	r30, 0x04	; 4
    5b3a:	80 83       	st	Z, r24
    5b3c:	91 83       	std	Z+1, r25	; 0x01
    5b3e:	a2 83       	std	Z+2, r26	; 0x02
    5b40:	b3 83       	std	Z+3, r27	; 0x03
			ST_DWORD(fs->win + FSI_Nxt_Free, fs->last_clust);
    5b42:	8a 85       	ldd	r24, Y+10	; 0x0a
    5b44:	9b 85       	ldd	r25, Y+11	; 0x0b
    5b46:	ac 85       	ldd	r26, Y+12	; 0x0c
    5b48:	bd 85       	ldd	r27, Y+13	; 0x0d
    5b4a:	34 96       	adiw	r30, 0x04	; 4
    5b4c:	80 83       	st	Z, r24
    5b4e:	91 83       	std	Z+1, r25	; 0x01
    5b50:	a2 83       	std	Z+2, r26	; 0x02
    5b52:	b3 83       	std	Z+3, r27	; 0x03
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
    5b54:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5b56:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5b58:	ac 8d       	ldd	r26, Y+28	; 0x1c
    5b5a:	bd 8d       	ldd	r27, Y+29	; 0x1d
    5b5c:	9c 01       	movw	r18, r24
    5b5e:	ad 01       	movw	r20, r26
    5b60:	2f 5f       	subi	r18, 0xFF	; 255
    5b62:	3f 4f       	sbci	r19, 0xFF	; 255
    5b64:	4f 4f       	sbci	r20, 0xFF	; 255
    5b66:	5f 4f       	sbci	r21, 0xFF	; 255
    5b68:	2a a7       	std	Y+42, r18	; 0x2a
    5b6a:	3b a7       	std	Y+43, r19	; 0x2b
    5b6c:	4c a7       	std	Y+44, r20	; 0x2c
    5b6e:	5d a7       	std	Y+45, r21	; 0x2d
			disk_write(fs->drv, fs->win, fs->winsect, 1);
    5b70:	01 e0       	ldi	r16, 0x01	; 1
    5b72:	10 e0       	ldi	r17, 0x00	; 0
    5b74:	89 81       	ldd	r24, Y+1	; 0x01
    5b76:	fb d3       	rcall	.+2038   	; 0x636e <disk_write>
			fs->fsi_flag = 0;
    5b78:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    5b7a:	40 e0       	ldi	r20, 0x00	; 0
    5b7c:	50 e0       	ldi	r21, 0x00	; 0
    5b7e:	60 e0       	ldi	r22, 0x00	; 0
    5b80:	89 81       	ldd	r24, Y+1	; 0x01
    5b82:	63 d4       	rcall	.+2246   	; 0x644a <disk_ioctl>
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
    5b84:	91 e0       	ldi	r25, 0x01	; 1
    5b86:	81 11       	cpse	r24, r1
    5b88:	01 c0       	rjmp	.+2      	; 0x5b8c <f_sync+0x140>
    5b8a:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    5b8c:	89 2f       	mov	r24, r25
    5b8e:	df 91       	pop	r29
    5b90:	cf 91       	pop	r28
    5b92:	1f 91       	pop	r17
    5b94:	0f 91       	pop	r16
    5b96:	08 95       	ret

00005b98 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    5b98:	cf 93       	push	r28
    5b9a:	df 93       	push	r29
    5b9c:	ec 01       	movw	r28, r24
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    5b9e:	56 df       	rcall	.-340    	; 0x5a4c <f_sync>
	if (res == FR_OK)
    5ba0:	81 11       	cpse	r24, r1
    5ba2:	07 c0       	rjmp	.+14     	; 0x5bb2 <f_close+0x1a>
#endif
	{
		res = validate(fp);				/* Lock volume */
    5ba4:	ce 01       	movw	r24, r28
    5ba6:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <validate>
		if (res == FR_OK) {
    5baa:	81 11       	cpse	r24, r1
    5bac:	02 c0       	rjmp	.+4      	; 0x5bb2 <f_close+0x1a>
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
				fp->fs = 0;				/* Invalidate file object */
    5bae:	19 82       	std	Y+1, r1	; 0x01
    5bb0:	18 82       	st	Y, r1
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    5bb2:	df 91       	pop	r29
    5bb4:	cf 91       	pop	r28
    5bb6:	08 95       	ret

00005bb8 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    5bb8:	4f 92       	push	r4
    5bba:	5f 92       	push	r5
    5bbc:	6f 92       	push	r6
    5bbe:	7f 92       	push	r7
    5bc0:	8f 92       	push	r8
    5bc2:	9f 92       	push	r9
    5bc4:	af 92       	push	r10
    5bc6:	bf 92       	push	r11
    5bc8:	cf 92       	push	r12
    5bca:	df 92       	push	r13
    5bcc:	ef 92       	push	r14
    5bce:	ff 92       	push	r15
    5bd0:	0f 93       	push	r16
    5bd2:	1f 93       	push	r17
    5bd4:	cf 93       	push	r28
    5bd6:	df 93       	push	r29
    5bd8:	00 d0       	rcall	.+0      	; 0x5bda <f_lseek+0x22>
    5bda:	00 d0       	rcall	.+0      	; 0x5bdc <f_lseek+0x24>
    5bdc:	00 d0       	rcall	.+0      	; 0x5bde <f_lseek+0x26>
    5bde:	cd b7       	in	r28, 0x3d	; 61
    5be0:	de b7       	in	r29, 0x3e	; 62
    5be2:	9e 83       	std	Y+6, r25	; 0x06
    5be4:	8d 83       	std	Y+5, r24	; 0x05
    5be6:	6a 01       	movw	r12, r20
    5be8:	7b 01       	movw	r14, r22
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
    5bea:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    5bee:	81 11       	cpse	r24, r1
    5bf0:	93 c1       	rjmp	.+806    	; 0x5f18 <f_lseek+0x360>
	if (fp->err)						/* Check error */
    5bf2:	ad 81       	ldd	r26, Y+5	; 0x05
    5bf4:	be 81       	ldd	r27, Y+6	; 0x06
    5bf6:	15 96       	adiw	r26, 0x05	; 5
    5bf8:	8c 91       	ld	r24, X
    5bfa:	15 97       	sbiw	r26, 0x05	; 5
    5bfc:	81 11       	cpse	r24, r1
    5bfe:	8c c1       	rjmp	.+792    	; 0x5f18 <f_lseek+0x360>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    5c00:	1a 96       	adiw	r26, 0x0a	; 10
    5c02:	8d 91       	ld	r24, X+
    5c04:	9d 91       	ld	r25, X+
    5c06:	0d 90       	ld	r0, X+
    5c08:	bc 91       	ld	r27, X
    5c0a:	a0 2d       	mov	r26, r0
    5c0c:	8c 15       	cp	r24, r12
    5c0e:	9d 05       	cpc	r25, r13
    5c10:	ae 05       	cpc	r26, r14
    5c12:	bf 05       	cpc	r27, r15
    5c14:	38 f4       	brcc	.+14     	; 0x5c24 <f_lseek+0x6c>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    5c16:	ed 81       	ldd	r30, Y+5	; 0x05
    5c18:	fe 81       	ldd	r31, Y+6	; 0x06
    5c1a:	24 81       	ldd	r18, Z+4	; 0x04
    5c1c:	21 fd       	sbrc	r18, 1
    5c1e:	02 c0       	rjmp	.+4      	; 0x5c24 <f_lseek+0x6c>
#endif
			) ofs = fp->fsize;
    5c20:	6c 01       	movw	r12, r24
    5c22:	7d 01       	movw	r14, r26

		ifptr = fp->fptr;
    5c24:	ad 81       	ldd	r26, Y+5	; 0x05
    5c26:	be 81       	ldd	r27, Y+6	; 0x06
    5c28:	16 96       	adiw	r26, 0x06	; 6
    5c2a:	4d 90       	ld	r4, X+
    5c2c:	5d 90       	ld	r5, X+
    5c2e:	6d 90       	ld	r6, X+
    5c30:	7c 90       	ld	r7, X
    5c32:	19 97       	sbiw	r26, 0x09	; 9
		fp->fptr = nsect = 0;
    5c34:	fd 01       	movw	r30, r26
    5c36:	16 82       	std	Z+6, r1	; 0x06
    5c38:	17 82       	std	Z+7, r1	; 0x07
    5c3a:	10 86       	std	Z+8, r1	; 0x08
    5c3c:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    5c3e:	c1 14       	cp	r12, r1
    5c40:	d1 04       	cpc	r13, r1
    5c42:	e1 04       	cpc	r14, r1
    5c44:	f1 04       	cpc	r15, r1
    5c46:	09 f4       	brne	.+2      	; 0x5c4a <f_lseek+0x92>
    5c48:	64 c1       	rjmp	.+712    	; 0x5f12 <f_lseek+0x35a>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    5c4a:	00 81       	ld	r16, Z
    5c4c:	11 81       	ldd	r17, Z+1	; 0x01
    5c4e:	d8 01       	movw	r26, r16
    5c50:	12 96       	adiw	r26, 0x02	; 2
    5c52:	8c 90       	ld	r8, X
    5c54:	91 2c       	mov	r9, r1
    5c56:	a1 2c       	mov	r10, r1
    5c58:	b1 2c       	mov	r11, r1
    5c5a:	07 2e       	mov	r0, r23
    5c5c:	79 e0       	ldi	r23, 0x09	; 9
    5c5e:	88 0c       	add	r8, r8
    5c60:	99 1c       	adc	r9, r9
    5c62:	aa 1c       	adc	r10, r10
    5c64:	bb 1c       	adc	r11, r11
    5c66:	7a 95       	dec	r23
    5c68:	d1 f7       	brne	.-12     	; 0x5c5e <f_lseek+0xa6>
    5c6a:	70 2d       	mov	r23, r0
			if (ifptr > 0 &&
    5c6c:	41 14       	cp	r4, r1
    5c6e:	51 04       	cpc	r5, r1
    5c70:	61 04       	cpc	r6, r1
    5c72:	71 04       	cpc	r7, r1
    5c74:	09 f4       	brne	.+2      	; 0x5c78 <f_lseek+0xc0>
    5c76:	40 c0       	rjmp	.+128    	; 0x5cf8 <f_lseek+0x140>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    5c78:	b1 e0       	ldi	r27, 0x01	; 1
    5c7a:	4b 1a       	sub	r4, r27
    5c7c:	51 08       	sbc	r5, r1
    5c7e:	61 08       	sbc	r6, r1
    5c80:	71 08       	sbc	r7, r1

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    5c82:	c7 01       	movw	r24, r14
    5c84:	b6 01       	movw	r22, r12
    5c86:	61 50       	subi	r22, 0x01	; 1
    5c88:	71 09       	sbc	r23, r1
    5c8a:	81 09       	sbc	r24, r1
    5c8c:	91 09       	sbc	r25, r1
    5c8e:	a5 01       	movw	r20, r10
    5c90:	94 01       	movw	r18, r8
    5c92:	0e 94 e4 41 	call	0x83c8	; 0x83c8 <__udivmodsi4>
    5c96:	29 83       	std	Y+1, r18	; 0x01
    5c98:	3a 83       	std	Y+2, r19	; 0x02
    5c9a:	4b 83       	std	Y+3, r20	; 0x03
    5c9c:	5c 83       	std	Y+4, r21	; 0x04
    5c9e:	c3 01       	movw	r24, r6
    5ca0:	b2 01       	movw	r22, r4
    5ca2:	a5 01       	movw	r20, r10
    5ca4:	94 01       	movw	r18, r8
    5ca6:	0e 94 e4 41 	call	0x83c8	; 0x83c8 <__udivmodsi4>
    5caa:	89 81       	ldd	r24, Y+1	; 0x01
    5cac:	9a 81       	ldd	r25, Y+2	; 0x02
    5cae:	ab 81       	ldd	r26, Y+3	; 0x03
    5cb0:	bc 81       	ldd	r27, Y+4	; 0x04
    5cb2:	82 17       	cp	r24, r18
    5cb4:	93 07       	cpc	r25, r19
    5cb6:	a4 07       	cpc	r26, r20
    5cb8:	b5 07       	cpc	r27, r21
    5cba:	f0 f0       	brcs	.+60     	; 0x5cf8 <f_lseek+0x140>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    5cbc:	88 27       	eor	r24, r24
    5cbe:	99 27       	eor	r25, r25
    5cc0:	dc 01       	movw	r26, r24
    5cc2:	88 19       	sub	r24, r8
    5cc4:	99 09       	sbc	r25, r9
    5cc6:	aa 09       	sbc	r26, r10
    5cc8:	bb 09       	sbc	r27, r11
    5cca:	48 22       	and	r4, r24
    5ccc:	59 22       	and	r5, r25
    5cce:	6a 22       	and	r6, r26
    5cd0:	7b 22       	and	r7, r27
    5cd2:	ad 81       	ldd	r26, Y+5	; 0x05
    5cd4:	be 81       	ldd	r27, Y+6	; 0x06
    5cd6:	16 96       	adiw	r26, 0x06	; 6
    5cd8:	4d 92       	st	X+, r4
    5cda:	5d 92       	st	X+, r5
    5cdc:	6d 92       	st	X+, r6
    5cde:	7c 92       	st	X, r7
    5ce0:	19 97       	sbiw	r26, 0x09	; 9
				ofs -= fp->fptr;
    5ce2:	c4 18       	sub	r12, r4
    5ce4:	d5 08       	sbc	r13, r5
    5ce6:	e6 08       	sbc	r14, r6
    5ce8:	f7 08       	sbc	r15, r7
				clst = fp->clust;
    5cea:	52 96       	adiw	r26, 0x12	; 18
    5cec:	4d 91       	ld	r20, X+
    5cee:	5d 91       	ld	r21, X+
    5cf0:	6d 91       	ld	r22, X+
    5cf2:	7c 91       	ld	r23, X
    5cf4:	55 97       	sbiw	r26, 0x15	; 21
    5cf6:	37 c0       	rjmp	.+110    	; 0x5d66 <f_lseek+0x1ae>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    5cf8:	ed 81       	ldd	r30, Y+5	; 0x05
    5cfa:	fe 81       	ldd	r31, Y+6	; 0x06
    5cfc:	46 85       	ldd	r20, Z+14	; 0x0e
    5cfe:	57 85       	ldd	r21, Z+15	; 0x0f
    5d00:	60 89       	ldd	r22, Z+16	; 0x10
    5d02:	71 89       	ldd	r23, Z+17	; 0x11
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    5d04:	41 15       	cp	r20, r1
    5d06:	51 05       	cpc	r21, r1
    5d08:	61 05       	cpc	r22, r1
    5d0a:	71 05       	cpc	r23, r1
    5d0c:	31 f5       	brne	.+76     	; 0x5d5a <f_lseek+0x1a2>
					clst = create_chain(fp->fs, 0);
    5d0e:	40 e0       	ldi	r20, 0x00	; 0
    5d10:	50 e0       	ldi	r21, 0x00	; 0
    5d12:	ba 01       	movw	r22, r20
    5d14:	c8 01       	movw	r24, r16
    5d16:	0e 94 d1 25 	call	0x4ba2	; 0x4ba2 <create_chain>
    5d1a:	ab 01       	movw	r20, r22
    5d1c:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    5d1e:	41 30       	cpi	r20, 0x01	; 1
    5d20:	51 05       	cpc	r21, r1
    5d22:	61 05       	cpc	r22, r1
    5d24:	71 05       	cpc	r23, r1
    5d26:	31 f4       	brne	.+12     	; 0x5d34 <f_lseek+0x17c>
    5d28:	82 e0       	ldi	r24, 0x02	; 2
    5d2a:	ad 81       	ldd	r26, Y+5	; 0x05
    5d2c:	be 81       	ldd	r27, Y+6	; 0x06
    5d2e:	15 96       	adiw	r26, 0x05	; 5
    5d30:	8c 93       	st	X, r24
    5d32:	f2 c0       	rjmp	.+484    	; 0x5f18 <f_lseek+0x360>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    5d34:	4f 3f       	cpi	r20, 0xFF	; 255
    5d36:	bf ef       	ldi	r27, 0xFF	; 255
    5d38:	5b 07       	cpc	r21, r27
    5d3a:	6b 07       	cpc	r22, r27
    5d3c:	7b 07       	cpc	r23, r27
    5d3e:	29 f4       	brne	.+10     	; 0x5d4a <f_lseek+0x192>
    5d40:	81 e0       	ldi	r24, 0x01	; 1
    5d42:	ed 81       	ldd	r30, Y+5	; 0x05
    5d44:	fe 81       	ldd	r31, Y+6	; 0x06
    5d46:	85 83       	std	Z+5, r24	; 0x05
    5d48:	e7 c0       	rjmp	.+462    	; 0x5f18 <f_lseek+0x360>
					fp->sclust = clst;
    5d4a:	ad 81       	ldd	r26, Y+5	; 0x05
    5d4c:	be 81       	ldd	r27, Y+6	; 0x06
    5d4e:	1e 96       	adiw	r26, 0x0e	; 14
    5d50:	4d 93       	st	X+, r20
    5d52:	5d 93       	st	X+, r21
    5d54:	6d 93       	st	X+, r22
    5d56:	7c 93       	st	X, r23
    5d58:	51 97       	sbiw	r26, 0x11	; 17
				}
#endif
				fp->clust = clst;
    5d5a:	ed 81       	ldd	r30, Y+5	; 0x05
    5d5c:	fe 81       	ldd	r31, Y+6	; 0x06
    5d5e:	42 8b       	std	Z+18, r20	; 0x12
    5d60:	53 8b       	std	Z+19, r21	; 0x13
    5d62:	64 8b       	std	Z+20, r22	; 0x14
    5d64:	75 8b       	std	Z+21, r23	; 0x15
			}
			if (clst != 0) {
    5d66:	41 15       	cp	r20, r1
    5d68:	51 05       	cpc	r21, r1
    5d6a:	61 05       	cpc	r22, r1
    5d6c:	71 05       	cpc	r23, r1
    5d6e:	09 f4       	brne	.+2      	; 0x5d72 <f_lseek+0x1ba>
    5d70:	99 c0       	rjmp	.+306    	; 0x5ea4 <f_lseek+0x2ec>
				while (ofs > bcs) {						/* Cluster following loop */
    5d72:	8c 14       	cp	r8, r12
    5d74:	9d 04       	cpc	r9, r13
    5d76:	ae 04       	cpc	r10, r14
    5d78:	bf 04       	cpc	r11, r15
    5d7a:	08 f0       	brcs	.+2      	; 0x5d7e <f_lseek+0x1c6>
    5d7c:	5f c0       	rjmp	.+190    	; 0x5e3c <f_lseek+0x284>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    5d7e:	ad 81       	ldd	r26, Y+5	; 0x05
    5d80:	be 81       	ldd	r27, Y+6	; 0x06
    5d82:	14 96       	adiw	r26, 0x04	; 4
    5d84:	8c 91       	ld	r24, X
    5d86:	14 97       	sbiw	r26, 0x04	; 4
    5d88:	81 ff       	sbrs	r24, 1
    5d8a:	0c c0       	rjmp	.+24     	; 0x5da4 <f_lseek+0x1ec>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    5d8c:	8d 91       	ld	r24, X+
    5d8e:	9c 91       	ld	r25, X
    5d90:	0e 94 d1 25 	call	0x4ba2	; 0x4ba2 <create_chain>
    5d94:	ab 01       	movw	r20, r22
    5d96:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    5d98:	41 15       	cp	r20, r1
    5d9a:	51 05       	cpc	r21, r1
    5d9c:	61 05       	cpc	r22, r1
    5d9e:	71 05       	cpc	r23, r1
    5da0:	49 f4       	brne	.+18     	; 0x5db4 <f_lseek+0x1fc>
    5da2:	4a c0       	rjmp	.+148    	; 0x5e38 <f_lseek+0x280>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    5da4:	ad 81       	ldd	r26, Y+5	; 0x05
    5da6:	be 81       	ldd	r27, Y+6	; 0x06
    5da8:	8d 91       	ld	r24, X+
    5daa:	9c 91       	ld	r25, X
    5dac:	0e 94 11 23 	call	0x4622	; 0x4622 <get_fat>
    5db0:	ab 01       	movw	r20, r22
    5db2:	bc 01       	movw	r22, r24
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    5db4:	4f 3f       	cpi	r20, 0xFF	; 255
    5db6:	bf ef       	ldi	r27, 0xFF	; 255
    5db8:	5b 07       	cpc	r21, r27
    5dba:	6b 07       	cpc	r22, r27
    5dbc:	7b 07       	cpc	r23, r27
    5dbe:	29 f4       	brne	.+10     	; 0x5dca <f_lseek+0x212>
    5dc0:	ed 81       	ldd	r30, Y+5	; 0x05
    5dc2:	fe 81       	ldd	r31, Y+6	; 0x06
    5dc4:	81 e0       	ldi	r24, 0x01	; 1
    5dc6:	85 83       	std	Z+5, r24	; 0x05
    5dc8:	a7 c0       	rjmp	.+334    	; 0x5f18 <f_lseek+0x360>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    5dca:	42 30       	cpi	r20, 0x02	; 2
    5dcc:	51 05       	cpc	r21, r1
    5dce:	61 05       	cpc	r22, r1
    5dd0:	71 05       	cpc	r23, r1
    5dd2:	68 f0       	brcs	.+26     	; 0x5dee <f_lseek+0x236>
    5dd4:	ad 81       	ldd	r26, Y+5	; 0x05
    5dd6:	be 81       	ldd	r27, Y+6	; 0x06
    5dd8:	ed 91       	ld	r30, X+
    5dda:	fc 91       	ld	r31, X
    5ddc:	82 89       	ldd	r24, Z+18	; 0x12
    5dde:	93 89       	ldd	r25, Z+19	; 0x13
    5de0:	a4 89       	ldd	r26, Z+20	; 0x14
    5de2:	b5 89       	ldd	r27, Z+21	; 0x15
    5de4:	48 17       	cp	r20, r24
    5de6:	59 07       	cpc	r21, r25
    5de8:	6a 07       	cpc	r22, r26
    5dea:	7b 07       	cpc	r23, r27
    5dec:	28 f0       	brcs	.+10     	; 0x5df8 <f_lseek+0x240>
    5dee:	ed 81       	ldd	r30, Y+5	; 0x05
    5df0:	fe 81       	ldd	r31, Y+6	; 0x06
    5df2:	82 e0       	ldi	r24, 0x02	; 2
    5df4:	85 83       	std	Z+5, r24	; 0x05
    5df6:	90 c0       	rjmp	.+288    	; 0x5f18 <f_lseek+0x360>
					fp->clust = clst;
    5df8:	ad 81       	ldd	r26, Y+5	; 0x05
    5dfa:	be 81       	ldd	r27, Y+6	; 0x06
    5dfc:	52 96       	adiw	r26, 0x12	; 18
    5dfe:	4d 93       	st	X+, r20
    5e00:	5d 93       	st	X+, r21
    5e02:	6d 93       	st	X+, r22
    5e04:	7c 93       	st	X, r23
    5e06:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    5e08:	fd 01       	movw	r30, r26
    5e0a:	86 81       	ldd	r24, Z+6	; 0x06
    5e0c:	97 81       	ldd	r25, Z+7	; 0x07
    5e0e:	a0 85       	ldd	r26, Z+8	; 0x08
    5e10:	b1 85       	ldd	r27, Z+9	; 0x09
    5e12:	88 0d       	add	r24, r8
    5e14:	99 1d       	adc	r25, r9
    5e16:	aa 1d       	adc	r26, r10
    5e18:	bb 1d       	adc	r27, r11
    5e1a:	86 83       	std	Z+6, r24	; 0x06
    5e1c:	97 83       	std	Z+7, r25	; 0x07
    5e1e:	a0 87       	std	Z+8, r26	; 0x08
    5e20:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    5e22:	c8 18       	sub	r12, r8
    5e24:	d9 08       	sbc	r13, r9
    5e26:	ea 08       	sbc	r14, r10
    5e28:	fb 08       	sbc	r15, r11
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    5e2a:	8c 14       	cp	r8, r12
    5e2c:	9d 04       	cpc	r9, r13
    5e2e:	ae 04       	cpc	r10, r14
    5e30:	bf 04       	cpc	r11, r15
    5e32:	08 f4       	brcc	.+2      	; 0x5e36 <f_lseek+0x27e>
    5e34:	a4 cf       	rjmp	.-184    	; 0x5d7e <f_lseek+0x1c6>
    5e36:	02 c0       	rjmp	.+4      	; 0x5e3c <f_lseek+0x284>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
    5e38:	75 01       	movw	r14, r10
    5e3a:	64 01       	movw	r12, r8
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    5e3c:	ed 81       	ldd	r30, Y+5	; 0x05
    5e3e:	fe 81       	ldd	r31, Y+6	; 0x06
    5e40:	86 81       	ldd	r24, Z+6	; 0x06
    5e42:	97 81       	ldd	r25, Z+7	; 0x07
    5e44:	a0 85       	ldd	r26, Z+8	; 0x08
    5e46:	b1 85       	ldd	r27, Z+9	; 0x09
    5e48:	8c 0d       	add	r24, r12
    5e4a:	9d 1d       	adc	r25, r13
    5e4c:	ae 1d       	adc	r26, r14
    5e4e:	bf 1d       	adc	r27, r15
    5e50:	86 83       	std	Z+6, r24	; 0x06
    5e52:	97 83       	std	Z+7, r25	; 0x07
    5e54:	a0 87       	std	Z+8, r26	; 0x08
    5e56:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    5e58:	d7 01       	movw	r26, r14
    5e5a:	c6 01       	movw	r24, r12
    5e5c:	91 70       	andi	r25, 0x01	; 1
    5e5e:	aa 27       	eor	r26, r26
    5e60:	bb 27       	eor	r27, r27
    5e62:	89 2b       	or	r24, r25
    5e64:	8a 2b       	or	r24, r26
    5e66:	8b 2b       	or	r24, r27
    5e68:	09 f1       	breq	.+66     	; 0x5eac <f_lseek+0x2f4>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    5e6a:	80 81       	ld	r24, Z
    5e6c:	91 81       	ldd	r25, Z+1	; 0x01
    5e6e:	0e 94 e9 22 	call	0x45d2	; 0x45d2 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    5e72:	61 15       	cp	r22, r1
    5e74:	71 05       	cpc	r23, r1
    5e76:	81 05       	cpc	r24, r1
    5e78:	91 05       	cpc	r25, r1
    5e7a:	31 f4       	brne	.+12     	; 0x5e88 <f_lseek+0x2d0>
    5e7c:	82 e0       	ldi	r24, 0x02	; 2
    5e7e:	ad 81       	ldd	r26, Y+5	; 0x05
    5e80:	be 81       	ldd	r27, Y+6	; 0x06
    5e82:	15 96       	adiw	r26, 0x05	; 5
    5e84:	8c 93       	st	X, r24
    5e86:	48 c0       	rjmp	.+144    	; 0x5f18 <f_lseek+0x360>
					nsect += ofs / SS(fp->fs);
    5e88:	0b 2e       	mov	r0, r27
    5e8a:	b9 e0       	ldi	r27, 0x09	; 9
    5e8c:	f6 94       	lsr	r15
    5e8e:	e7 94       	ror	r14
    5e90:	d7 94       	ror	r13
    5e92:	c7 94       	ror	r12
    5e94:	ba 95       	dec	r27
    5e96:	d1 f7       	brne	.-12     	; 0x5e8c <f_lseek+0x2d4>
    5e98:	b0 2d       	mov	r27, r0
    5e9a:	c6 0e       	add	r12, r22
    5e9c:	d7 1e       	adc	r13, r23
    5e9e:	e8 1e       	adc	r14, r24
    5ea0:	f9 1e       	adc	r15, r25
    5ea2:	07 c0       	rjmp	.+14     	; 0x5eb2 <f_lseek+0x2fa>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    5ea4:	c1 2c       	mov	r12, r1
    5ea6:	d1 2c       	mov	r13, r1
    5ea8:	76 01       	movw	r14, r12
    5eaa:	03 c0       	rjmp	.+6      	; 0x5eb2 <f_lseek+0x2fa>
    5eac:	c1 2c       	mov	r12, r1
    5eae:	d1 2c       	mov	r13, r1
    5eb0:	76 01       	movw	r14, r12
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    5eb2:	ed 81       	ldd	r30, Y+5	; 0x05
    5eb4:	fe 81       	ldd	r31, Y+6	; 0x06
    5eb6:	86 81       	ldd	r24, Z+6	; 0x06
    5eb8:	97 81       	ldd	r25, Z+7	; 0x07
    5eba:	a0 85       	ldd	r26, Z+8	; 0x08
    5ebc:	b1 85       	ldd	r27, Z+9	; 0x09
    5ebe:	ac 01       	movw	r20, r24
    5ec0:	bd 01       	movw	r22, r26
    5ec2:	51 70       	andi	r21, 0x01	; 1
    5ec4:	66 27       	eor	r22, r22
    5ec6:	77 27       	eor	r23, r23
    5ec8:	45 2b       	or	r20, r21
    5eca:	46 2b       	or	r20, r22
    5ecc:	47 2b       	or	r20, r23
    5ece:	69 f0       	breq	.+26     	; 0x5eea <f_lseek+0x332>
    5ed0:	46 89       	ldd	r20, Z+22	; 0x16
    5ed2:	57 89       	ldd	r21, Z+23	; 0x17
    5ed4:	60 8d       	ldd	r22, Z+24	; 0x18
    5ed6:	71 8d       	ldd	r23, Z+25	; 0x19
    5ed8:	c4 16       	cp	r12, r20
    5eda:	d5 06       	cpc	r13, r21
    5edc:	e6 06       	cpc	r14, r22
    5ede:	f7 06       	cpc	r15, r23
    5ee0:	21 f0       	breq	.+8      	; 0x5eea <f_lseek+0x332>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    5ee2:	c6 8a       	std	Z+22, r12	; 0x16
    5ee4:	d7 8a       	std	Z+23, r13	; 0x17
    5ee6:	e0 8e       	std	Z+24, r14	; 0x18
    5ee8:	f1 8e       	std	Z+25, r15	; 0x19
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    5eea:	ed 81       	ldd	r30, Y+5	; 0x05
    5eec:	fe 81       	ldd	r31, Y+6	; 0x06
    5eee:	42 85       	ldd	r20, Z+10	; 0x0a
    5ef0:	53 85       	ldd	r21, Z+11	; 0x0b
    5ef2:	64 85       	ldd	r22, Z+12	; 0x0c
    5ef4:	75 85       	ldd	r23, Z+13	; 0x0d
    5ef6:	48 17       	cp	r20, r24
    5ef8:	59 07       	cpc	r21, r25
    5efa:	6a 07       	cpc	r22, r26
    5efc:	7b 07       	cpc	r23, r27
    5efe:	58 f4       	brcc	.+22     	; 0x5f16 <f_lseek+0x35e>
			fp->fsize = fp->fptr;
    5f00:	82 87       	std	Z+10, r24	; 0x0a
    5f02:	93 87       	std	Z+11, r25	; 0x0b
    5f04:	a4 87       	std	Z+12, r26	; 0x0c
    5f06:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA__WRITTEN;
    5f08:	84 81       	ldd	r24, Z+4	; 0x04
    5f0a:	80 62       	ori	r24, 0x20	; 32
    5f0c:	84 83       	std	Z+4, r24	; 0x04
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
    5f0e:	80 e0       	ldi	r24, 0x00	; 0
    5f10:	03 c0       	rjmp	.+6      	; 0x5f18 <f_lseek+0x360>
    5f12:	80 e0       	ldi	r24, 0x00	; 0
    5f14:	01 c0       	rjmp	.+2      	; 0x5f18 <f_lseek+0x360>
    5f16:	80 e0       	ldi	r24, 0x00	; 0
}
    5f18:	26 96       	adiw	r28, 0x06	; 6
    5f1a:	0f b6       	in	r0, 0x3f	; 63
    5f1c:	f8 94       	cli
    5f1e:	de bf       	out	0x3e, r29	; 62
    5f20:	0f be       	out	0x3f, r0	; 63
    5f22:	cd bf       	out	0x3d, r28	; 61
    5f24:	df 91       	pop	r29
    5f26:	cf 91       	pop	r28
    5f28:	1f 91       	pop	r17
    5f2a:	0f 91       	pop	r16
    5f2c:	ff 90       	pop	r15
    5f2e:	ef 90       	pop	r14
    5f30:	df 90       	pop	r13
    5f32:	cf 90       	pop	r12
    5f34:	bf 90       	pop	r11
    5f36:	af 90       	pop	r10
    5f38:	9f 90       	pop	r9
    5f3a:	8f 90       	pop	r8
    5f3c:	7f 90       	pop	r7
    5f3e:	6f 90       	pop	r6
    5f40:	5f 90       	pop	r5
    5f42:	4f 90       	pop	r4
    5f44:	08 95       	ret

00005f46 <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
    5f46:	29 9a       	sbi	0x05, 1	; 5
	spi_rwSPI(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    5f48:	8f ef       	ldi	r24, 0xFF	; 255
    5f4a:	0c 94 d8 39 	jmp	0x73b0	; 0x73b0 <spi_rwSPI>
    5f4e:	08 95       	ret

00005f50 <select>:

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	//PORTB = (0 << 1) | (0 << 2) | (0 << 3);
	CS_LOW();		/* Set CS# low */
    5f50:	29 98       	cbi	0x05, 1	; 5
	spi_rwSPI(0xFF);	/* Dummy clock (force DO enabled) */
    5f52:	8f ef       	ldi	r24, 0xFF	; 255
    5f54:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <spi_rwSPI>
)
{
	BYTE d;


	Timer2 = wt / 10;
    5f58:	82 e3       	ldi	r24, 0x32	; 50
    5f5a:	80 93 40 19 	sts	0x1940, r24	; 0x801940 <Timer2>
	do
		d = spi_rwSPI(0xFF);
    5f5e:	8f ef       	ldi	r24, 0xFF	; 255
    5f60:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <spi_rwSPI>
	while (d != 0xFF && Timer2);
    5f64:	8f 3f       	cpi	r24, 0xFF	; 255
    5f66:	41 f0       	breq	.+16     	; 0x5f78 <select+0x28>
    5f68:	80 91 40 19 	lds	r24, 0x1940	; 0x801940 <Timer2>
    5f6c:	81 11       	cpse	r24, r1
    5f6e:	f7 cf       	rjmp	.-18     	; 0x5f5e <select+0xe>
	//PORTB = (0 << 1) | (0 << 2) | (0 << 3);
	CS_LOW();		/* Set CS# low */
	spi_rwSPI(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */

	deselect();
    5f70:	ea df       	rcall	.-44     	; 0x5f46 <deselect>
	return 0;	/* Timeout */
    5f72:	80 e0       	ldi	r24, 0x00	; 0
    5f74:	90 e0       	ldi	r25, 0x00	; 0
    5f76:	08 95       	ret
int select (void)	/* 1:Successful, 0:Timeout */
{
	//PORTB = (0 << 1) | (0 << 2) | (0 << 3);
	CS_LOW();		/* Set CS# low */
	spi_rwSPI(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */
    5f78:	81 e0       	ldi	r24, 0x01	; 1
    5f7a:	90 e0       	ldi	r25, 0x00	; 0

	deselect();
	return 0;	/* Timeout */
}
    5f7c:	08 95       	ret

00005f7e <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    5f7e:	ff 92       	push	r15
    5f80:	0f 93       	push	r16
    5f82:	1f 93       	push	r17
    5f84:	cf 93       	push	r28
    5f86:	df 93       	push	r29
    5f88:	c8 2f       	mov	r28, r24
    5f8a:	d4 2f       	mov	r29, r20
    5f8c:	15 2f       	mov	r17, r21
    5f8e:	06 2f       	mov	r16, r22
    5f90:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    5f92:	88 23       	and	r24, r24
    5f94:	4c f4       	brge	.+18     	; 0x5fa8 <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    5f96:	40 e0       	ldi	r20, 0x00	; 0
    5f98:	50 e0       	ldi	r21, 0x00	; 0
    5f9a:	ba 01       	movw	r22, r20
    5f9c:	87 e3       	ldi	r24, 0x37	; 55
    5f9e:	ef df       	rcall	.-34     	; 0x5f7e <send_cmd>
		if (res > 1) return res;
    5fa0:	82 30       	cpi	r24, 0x02	; 2
    5fa2:	08 f0       	brcs	.+2      	; 0x5fa6 <send_cmd+0x28>
    5fa4:	4c c0       	rjmp	.+152    	; 0x603e <send_cmd+0xc0>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    5fa6:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    5fa8:	cc 30       	cpi	r28, 0x0C	; 12
		deselect();
    5faa:	29 f1       	breq	.+74     	; 0x5ff6 <send_cmd+0x78>
		if (!select()) return 0xFF;
    5fac:	cc df       	rcall	.-104    	; 0x5f46 <deselect>
    5fae:	d0 df       	rcall	.-96     	; 0x5f50 <select>
    5fb0:	89 2b       	or	r24, r25
    5fb2:	f9 f0       	breq	.+62     	; 0x5ff2 <send_cmd+0x74>
	}

	/* Send command packet */
	spi_rwSPI(0x40 | cmd);				/* Start + Command index */
    5fb4:	8c 2f       	mov	r24, r28
    5fb6:	80 64       	ori	r24, 0x40	; 64
    5fb8:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <spi_rwSPI>
	spi_rwSPI((BYTE)(arg >> 24));		/* Argument[31..24] */
    5fbc:	8f 2d       	mov	r24, r15
    5fbe:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <spi_rwSPI>
	spi_rwSPI((BYTE)(arg >> 16));		/* Argument[23..16] */
    5fc2:	80 2f       	mov	r24, r16
    5fc4:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <spi_rwSPI>
	spi_rwSPI((BYTE)(arg >> 8));			/* Argument[15..8] */
    5fc8:	81 2f       	mov	r24, r17
    5fca:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <spi_rwSPI>
	spi_rwSPI((BYTE)arg);				/* Argument[7..0] */
    5fce:	8d 2f       	mov	r24, r29
    5fd0:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <spi_rwSPI>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
    5fd4:	cc 23       	and	r28, r28
    5fd6:	79 f1       	breq	.+94     	; 0x6036 <send_cmd+0xb8>
    5fd8:	2b c0       	rjmp	.+86     	; 0x6030 <send_cmd+0xb2>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	spi_rwSPI(n);

	/* Receive command response */
	if (cmd == CMD12) spi_rwSPI(0xFF);		/* Skip a stuff byte when stop reading */
    5fda:	8f ef       	ldi	r24, 0xFF	; 255
    5fdc:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <spi_rwSPI>
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    5fe0:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) spi_rwSPI(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = spi_rwSPI(0xFF);
    5fe2:	8f ef       	ldi	r24, 0xFF	; 255
    5fe4:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <spi_rwSPI>
	while ((res & 0x80) && --n);
    5fe8:	88 23       	and	r24, r24
    5fea:	4c f5       	brge	.+82     	; 0x603e <send_cmd+0xc0>
    5fec:	c1 50       	subi	r28, 0x01	; 1
    5fee:	c9 f7       	brne	.-14     	; 0x5fe2 <send_cmd+0x64>
    5ff0:	26 c0       	rjmp	.+76     	; 0x603e <send_cmd+0xc0>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
    5ff2:	8f ef       	ldi	r24, 0xFF	; 255
    5ff4:	24 c0       	rjmp	.+72     	; 0x603e <send_cmd+0xc0>
	}

	/* Send command packet */
	spi_rwSPI(0x40 | cmd);				/* Start + Command index */
    5ff6:	8c e4       	ldi	r24, 0x4C	; 76
    5ff8:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <spi_rwSPI>
	spi_rwSPI((BYTE)(arg >> 24));		/* Argument[31..24] */
    5ffc:	8f 2d       	mov	r24, r15
    5ffe:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <spi_rwSPI>
	spi_rwSPI((BYTE)(arg >> 16));		/* Argument[23..16] */
    6002:	80 2f       	mov	r24, r16
    6004:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <spi_rwSPI>
	spi_rwSPI((BYTE)(arg >> 8));			/* Argument[15..8] */
    6008:	81 2f       	mov	r24, r17
    600a:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <spi_rwSPI>
	spi_rwSPI((BYTE)arg);				/* Argument[7..0] */
    600e:	8d 2f       	mov	r24, r29
    6010:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <spi_rwSPI>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	spi_rwSPI(n);
    6014:	81 e0       	ldi	r24, 0x01	; 1
    6016:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <spi_rwSPI>

	/* Receive command response */
	if (cmd == CMD12) spi_rwSPI(0xFF);		/* Skip a stuff byte when stop reading */
    601a:	cc 30       	cpi	r28, 0x0C	; 12
    601c:	f1 f2       	breq	.-68     	; 0x5fda <send_cmd+0x5c>
    601e:	e0 cf       	rjmp	.-64     	; 0x5fe0 <send_cmd+0x62>
	spi_rwSPI((BYTE)(arg >> 8));			/* Argument[15..8] */
	spi_rwSPI((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	spi_rwSPI(n);
    6020:	87 e8       	ldi	r24, 0x87	; 135
    6022:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <spi_rwSPI>
    6026:	dc cf       	rjmp	.-72     	; 0x5fe0 <send_cmd+0x62>
    6028:	81 e0       	ldi	r24, 0x01	; 1
    602a:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <spi_rwSPI>
    602e:	d8 cf       	rjmp	.-80     	; 0x5fe0 <send_cmd+0x62>
	spi_rwSPI((BYTE)(arg >> 16));		/* Argument[23..16] */
	spi_rwSPI((BYTE)(arg >> 8));			/* Argument[15..8] */
	spi_rwSPI((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    6030:	c8 30       	cpi	r28, 0x08	; 8
    6032:	b1 f3       	breq	.-20     	; 0x6020 <send_cmd+0xa2>
    6034:	f9 cf       	rjmp	.-14     	; 0x6028 <send_cmd+0xaa>
	spi_rwSPI(n);
    6036:	85 e9       	ldi	r24, 0x95	; 149
    6038:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <spi_rwSPI>
    603c:	d1 cf       	rjmp	.-94     	; 0x5fe0 <send_cmd+0x62>
	do
		res = spi_rwSPI(0xFF);
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
    603e:	df 91       	pop	r29
    6040:	cf 91       	pop	r28
    6042:	1f 91       	pop	r17
    6044:	0f 91       	pop	r16
    6046:	ff 90       	pop	r15
    6048:	08 95       	ret

0000604a <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    604a:	0f 93       	push	r16
    604c:	1f 93       	push	r17
    604e:	cf 93       	push	r28
    6050:	df 93       	push	r29
    6052:	08 2f       	mov	r16, r24
    6054:	19 2f       	mov	r17, r25
    6056:	eb 01       	movw	r28, r22
	BYTE token;


	Timer1 = 20;
    6058:	84 e1       	ldi	r24, 0x14	; 20
    605a:	80 93 41 19 	sts	0x1941, r24	; 0x801941 <Timer1>
	do {							/* Wait for data packet in timeout of 200ms */
		token = spi_rwSPI(0xFF);
    605e:	8f ef       	ldi	r24, 0xFF	; 255
    6060:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <spi_rwSPI>
	} while ((token == 0xFF) && Timer1);
    6064:	8f 3f       	cpi	r24, 0xFF	; 255
    6066:	39 f4       	brne	.+14     	; 0x6076 <rcvr_datablock+0x2c>
    6068:	80 91 41 19 	lds	r24, 0x1941	; 0x801941 <Timer1>
    606c:	81 11       	cpse	r24, r1
    606e:	f7 cf       	rjmp	.-18     	; 0x605e <rcvr_datablock+0x14>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    6070:	80 e0       	ldi	r24, 0x00	; 0
    6072:	90 e0       	ldi	r25, 0x00	; 0
    6074:	22 c0       	rjmp	.+68     	; 0x60ba <rcvr_datablock+0x70>
    6076:	8e 3f       	cpi	r24, 0xFE	; 254
    6078:	f1 f4       	brne	.+60     	; 0x60b6 <rcvr_datablock+0x6c>
    607a:	e0 2f       	mov	r30, r16
    607c:	f1 2f       	mov	r31, r17
	BYTE *p,	/* Data buffer */
	UINT cnt	/* Size of data block (must be multiple of 2) */
)
{
	do {
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
    607e:	8f ef       	ldi	r24, 0xFF	; 255
    6080:	8e bd       	out	0x2e, r24	; 46
    6082:	0d b4       	in	r0, 0x2d	; 45
    6084:	07 fe       	sbrs	r0, 7
    6086:	fd cf       	rjmp	.-6      	; 0x6082 <rcvr_datablock+0x38>
    6088:	9e b5       	in	r25, 0x2e	; 46
    608a:	df 01       	movw	r26, r30
    608c:	90 83       	st	Z, r25
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
    608e:	8e bd       	out	0x2e, r24	; 46
    6090:	0d b4       	in	r0, 0x2d	; 45
    6092:	07 fe       	sbrs	r0, 7
    6094:	fd cf       	rjmp	.-6      	; 0x6090 <rcvr_datablock+0x46>
    6096:	9e b5       	in	r25, 0x2e	; 46
    6098:	11 96       	adiw	r26, 0x01	; 1
    609a:	9c 93       	st	X, r25
	} while (cnt -= 2);
    609c:	22 97       	sbiw	r28, 0x02	; 2
    609e:	32 96       	adiw	r30, 0x02	; 2
    60a0:	20 97       	sbiw	r28, 0x00	; 0
    60a2:	71 f7       	brne	.-36     	; 0x6080 <rcvr_datablock+0x36>
		token = spi_rwSPI(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	spi_rwSPI(0xFF);					/* Discard CRC */
    60a4:	8f ef       	ldi	r24, 0xFF	; 255
    60a6:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <spi_rwSPI>
	spi_rwSPI(0xFF);
    60aa:	8f ef       	ldi	r24, 0xFF	; 255
    60ac:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <spi_rwSPI>

	return 1;						/* Return with success */
    60b0:	81 e0       	ldi	r24, 0x01	; 1
    60b2:	90 e0       	ldi	r25, 0x00	; 0
    60b4:	02 c0       	rjmp	.+4      	; 0x60ba <rcvr_datablock+0x70>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = spi_rwSPI(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    60b6:	80 e0       	ldi	r24, 0x00	; 0
    60b8:	90 e0       	ldi	r25, 0x00	; 0
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	spi_rwSPI(0xFF);					/* Discard CRC */
	spi_rwSPI(0xFF);

	return 1;						/* Return with success */
}
    60ba:	df 91       	pop	r29
    60bc:	cf 91       	pop	r28
    60be:	1f 91       	pop	r17
    60c0:	0f 91       	pop	r16
    60c2:	08 95       	ret

000060c4 <xmit_datablock>:
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    60c4:	1f 93       	push	r17
    60c6:	cf 93       	push	r28
    60c8:	df 93       	push	r29
    60ca:	ec 01       	movw	r28, r24
    60cc:	16 2f       	mov	r17, r22
)
{
	BYTE d;


	Timer2 = wt / 10;
    60ce:	82 e3       	ldi	r24, 0x32	; 50
    60d0:	80 93 40 19 	sts	0x1940, r24	; 0x801940 <Timer2>
	do
		d = spi_rwSPI(0xFF);
    60d4:	8f ef       	ldi	r24, 0xFF	; 255
    60d6:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <spi_rwSPI>
	while (d != 0xFF && Timer2);
    60da:	8f 3f       	cpi	r24, 0xFF	; 255
    60dc:	31 f0       	breq	.+12     	; 0x60ea <xmit_datablock+0x26>
    60de:	80 91 40 19 	lds	r24, 0x1940	; 0x801940 <Timer2>
    60e2:	81 11       	cpse	r24, r1
    60e4:	f7 cf       	rjmp	.-18     	; 0x60d4 <xmit_datablock+0x10>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
    60e6:	90 e0       	ldi	r25, 0x00	; 0
    60e8:	2b c0       	rjmp	.+86     	; 0x6140 <xmit_datablock+0x7c>

	spi_rwSPI(token);					/* Xmit data token */
    60ea:	81 2f       	mov	r24, r17
    60ec:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <spi_rwSPI>
	if (token != 0xFD) {	/* Is data token */
    60f0:	1d 3f       	cpi	r17, 0xFD	; 253
    60f2:	21 f1       	breq	.+72     	; 0x613c <xmit_datablock+0x78>
    60f4:	fe 01       	movw	r30, r28
    60f6:	9e 01       	movw	r18, r28
    60f8:	3e 5f       	subi	r19, 0xFE	; 254
    60fa:	df 01       	movw	r26, r30
	const BYTE *p,	/* Data block to be sent */
	UINT cnt		/* Size of data block (must be multiple of 2) */
)
{
	do {
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
    60fc:	90 81       	ld	r25, Z
    60fe:	9e bd       	out	0x2e, r25	; 46
    6100:	0d b4       	in	r0, 0x2d	; 45
    6102:	07 fe       	sbrs	r0, 7
    6104:	fd cf       	rjmp	.-6      	; 0x6100 <xmit_datablock+0x3c>
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
    6106:	11 96       	adiw	r26, 0x01	; 1
    6108:	9c 91       	ld	r25, X
    610a:	9e bd       	out	0x2e, r25	; 46
    610c:	0d b4       	in	r0, 0x2d	; 45
    610e:	07 fe       	sbrs	r0, 7
    6110:	fd cf       	rjmp	.-6      	; 0x610c <xmit_datablock+0x48>
    6112:	32 96       	adiw	r30, 0x02	; 2
	} while (cnt -= 2);
    6114:	e2 17       	cp	r30, r18
    6116:	f3 07       	cpc	r31, r19
    6118:	81 f7       	brne	.-32     	; 0x60fa <xmit_datablock+0x36>
	if (!wait_ready(500)) return 0;

	spi_rwSPI(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, 512);		/* Xmit the data block to the MMC */
		spi_rwSPI(0xFF);					/* CRC (Dummy) */
    611a:	8f ef       	ldi	r24, 0xFF	; 255
    611c:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <spi_rwSPI>
		spi_rwSPI(0xFF);
    6120:	8f ef       	ldi	r24, 0xFF	; 255
    6122:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <spi_rwSPI>
		resp = spi_rwSPI(0xFF);			/* Reveive data response */
    6126:	8f ef       	ldi	r24, 0xFF	; 255
    6128:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <spi_rwSPI>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
    612c:	28 2f       	mov	r18, r24
    612e:	2f 71       	andi	r18, 0x1F	; 31
    6130:	81 e0       	ldi	r24, 0x01	; 1
    6132:	90 e0       	ldi	r25, 0x00	; 0
    6134:	25 30       	cpi	r18, 0x05	; 5
    6136:	21 f0       	breq	.+8      	; 0x6140 <xmit_datablock+0x7c>
    6138:	80 e0       	ldi	r24, 0x00	; 0
    613a:	02 c0       	rjmp	.+4      	; 0x6140 <xmit_datablock+0x7c>
		resp = spi_rwSPI(0xFF);			/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return 0;
	}

	return 1;
    613c:	81 e0       	ldi	r24, 0x01	; 1
    613e:	90 e0       	ldi	r25, 0x00	; 0
}
    6140:	df 91       	pop	r29
    6142:	cf 91       	pop	r28
    6144:	1f 91       	pop	r17
    6146:	08 95       	ret

00006148 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
    6148:	cf 92       	push	r12
    614a:	df 92       	push	r13
    614c:	ef 92       	push	r14
    614e:	ff 92       	push	r15
    6150:	0f 93       	push	r16
    6152:	1f 93       	push	r17
    6154:	cf 93       	push	r28
    6156:	df 93       	push	r29
    6158:	00 d0       	rcall	.+0      	; 0x615a <disk_initialize+0x12>
    615a:	00 d0       	rcall	.+0      	; 0x615c <disk_initialize+0x14>
    615c:	cd b7       	in	r28, 0x3d	; 61
    615e:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    6160:	81 11       	cpse	r24, r1
    6162:	94 c0       	rjmp	.+296    	; 0x628c <disk_initialize+0x144>
	//power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    6164:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <Stat>
    6168:	81 ff       	sbrs	r24, 1
    616a:	03 c0       	rjmp	.+6      	; 0x6172 <disk_initialize+0x2a>
    616c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <Stat>
    6170:	98 c0       	rjmp	.+304    	; 0x62a2 <disk_initialize+0x15a>
	//power_on();							/* Turn on the socket power */
	FCLK_SLOW();
    6172:	82 e5       	ldi	r24, 0x52	; 82
    6174:	8c bd       	out	0x2c, r24	; 44
    6176:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) spi_rwSPI(0xFF);	/* 80 dummy clocks */
    6178:	8f ef       	ldi	r24, 0xFF	; 255
    617a:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <spi_rwSPI>
    617e:	11 50       	subi	r17, 0x01	; 1
    6180:	d9 f7       	brne	.-10     	; 0x6178 <disk_initialize+0x30>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    6182:	40 e0       	ldi	r20, 0x00	; 0
    6184:	50 e0       	ldi	r21, 0x00	; 0
    6186:	ba 01       	movw	r22, r20
    6188:	80 e0       	ldi	r24, 0x00	; 0
    618a:	f9 de       	rcall	.-526    	; 0x5f7e <send_cmd>
    618c:	81 30       	cpi	r24, 0x01	; 1
    618e:	09 f0       	breq	.+2      	; 0x6192 <disk_initialize+0x4a>
    6190:	84 c0       	rjmp	.+264    	; 0x629a <disk_initialize+0x152>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    6192:	84 e6       	ldi	r24, 0x64	; 100
    6194:	80 93 41 19 	sts	0x1941, r24	; 0x801941 <Timer1>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    6198:	4a ea       	ldi	r20, 0xAA	; 170
    619a:	51 e0       	ldi	r21, 0x01	; 1
    619c:	60 e0       	ldi	r22, 0x00	; 0
    619e:	70 e0       	ldi	r23, 0x00	; 0
    61a0:	88 e0       	ldi	r24, 0x08	; 8
    61a2:	ed de       	rcall	.-550    	; 0x5f7e <send_cmd>
    61a4:	81 30       	cpi	r24, 0x01	; 1
    61a6:	09 f0       	breq	.+2      	; 0x61aa <disk_initialize+0x62>
    61a8:	3f c0       	rjmp	.+126    	; 0x6228 <disk_initialize+0xe0>
    61aa:	ce 01       	movw	r24, r28
    61ac:	01 96       	adiw	r24, 0x01	; 1
    61ae:	6c 01       	movw	r12, r24
    61b0:	7e 01       	movw	r14, r28
    61b2:	95 e0       	ldi	r25, 0x05	; 5
    61b4:	e9 0e       	add	r14, r25
    61b6:	f1 1c       	adc	r15, r1
    61b8:	86 01       	movw	r16, r12
			for (n = 0; n < 4; n++) ocr[n] = spi_rwSPI(0xFF);		/* Get trailing return value of R7 resp */
    61ba:	8f ef       	ldi	r24, 0xFF	; 255
    61bc:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <spi_rwSPI>
    61c0:	f8 01       	movw	r30, r16
    61c2:	81 93       	st	Z+, r24
    61c4:	8f 01       	movw	r16, r30
    61c6:	ee 16       	cp	r14, r30
    61c8:	ff 06       	cpc	r15, r31
    61ca:	b9 f7       	brne	.-18     	; 0x61ba <disk_initialize+0x72>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    61cc:	8b 81       	ldd	r24, Y+3	; 0x03
    61ce:	81 30       	cpi	r24, 0x01	; 1
    61d0:	09 f0       	breq	.+2      	; 0x61d4 <disk_initialize+0x8c>
    61d2:	63 c0       	rjmp	.+198    	; 0x629a <disk_initialize+0x152>
    61d4:	8c 81       	ldd	r24, Y+4	; 0x04
    61d6:	8a 3a       	cpi	r24, 0xAA	; 170
    61d8:	09 f0       	breq	.+2      	; 0x61dc <disk_initialize+0x94>
    61da:	5f c0       	rjmp	.+190    	; 0x629a <disk_initialize+0x152>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    61dc:	80 91 41 19 	lds	r24, 0x1941	; 0x801941 <Timer1>
    61e0:	88 23       	and	r24, r24
    61e2:	41 f0       	breq	.+16     	; 0x61f4 <disk_initialize+0xac>
    61e4:	40 e0       	ldi	r20, 0x00	; 0
    61e6:	50 e0       	ldi	r21, 0x00	; 0
    61e8:	60 e0       	ldi	r22, 0x00	; 0
    61ea:	70 e4       	ldi	r23, 0x40	; 64
    61ec:	89 ea       	ldi	r24, 0xA9	; 169
    61ee:	c7 de       	rcall	.-626    	; 0x5f7e <send_cmd>
    61f0:	81 11       	cpse	r24, r1
    61f2:	f4 cf       	rjmp	.-24     	; 0x61dc <disk_initialize+0x94>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    61f4:	80 91 41 19 	lds	r24, 0x1941	; 0x801941 <Timer1>
    61f8:	88 23       	and	r24, r24
    61fa:	09 f4       	brne	.+2      	; 0x61fe <disk_initialize+0xb6>
    61fc:	4e c0       	rjmp	.+156    	; 0x629a <disk_initialize+0x152>
    61fe:	40 e0       	ldi	r20, 0x00	; 0
    6200:	50 e0       	ldi	r21, 0x00	; 0
    6202:	ba 01       	movw	r22, r20
    6204:	8a e3       	ldi	r24, 0x3A	; 58
    6206:	bb de       	rcall	.-650    	; 0x5f7e <send_cmd>
    6208:	81 11       	cpse	r24, r1
    620a:	47 c0       	rjmp	.+142    	; 0x629a <disk_initialize+0x152>
					for (n = 0; n < 4; n++) ocr[n] = spi_rwSPI(0xFF);
    620c:	8f ef       	ldi	r24, 0xFF	; 255
    620e:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <spi_rwSPI>
    6212:	f6 01       	movw	r30, r12
    6214:	81 93       	st	Z+, r24
    6216:	6f 01       	movw	r12, r30
    6218:	ee 16       	cp	r14, r30
    621a:	ff 06       	cpc	r15, r31
    621c:	b9 f7       	brne	.-18     	; 0x620c <disk_initialize+0xc4>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    621e:	89 81       	ldd	r24, Y+1	; 0x01
    6220:	86 fd       	sbrc	r24, 6
    6222:	36 c0       	rjmp	.+108    	; 0x6290 <disk_initialize+0x148>
    6224:	84 e0       	ldi	r24, 0x04	; 4
    6226:	35 c0       	rjmp	.+106    	; 0x6292 <disk_initialize+0x14a>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    6228:	40 e0       	ldi	r20, 0x00	; 0
    622a:	50 e0       	ldi	r21, 0x00	; 0
    622c:	ba 01       	movw	r22, r20
    622e:	89 ea       	ldi	r24, 0xA9	; 169
    6230:	a6 de       	rcall	.-692    	; 0x5f7e <send_cmd>
    6232:	82 30       	cpi	r24, 0x02	; 2
    6234:	18 f0       	brcs	.+6      	; 0x623c <disk_initialize+0xf4>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    6236:	01 e0       	ldi	r16, 0x01	; 1
    6238:	11 e0       	ldi	r17, 0x01	; 1
    623a:	02 c0       	rjmp	.+4      	; 0x6240 <disk_initialize+0xf8>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    623c:	02 e0       	ldi	r16, 0x02	; 2
    623e:	19 ea       	ldi	r17, 0xA9	; 169
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    6240:	80 91 41 19 	lds	r24, 0x1941	; 0x801941 <Timer1>
    6244:	88 23       	and	r24, r24
    6246:	39 f0       	breq	.+14     	; 0x6256 <disk_initialize+0x10e>
    6248:	40 e0       	ldi	r20, 0x00	; 0
    624a:	50 e0       	ldi	r21, 0x00	; 0
    624c:	ba 01       	movw	r22, r20
    624e:	81 2f       	mov	r24, r17
    6250:	96 de       	rcall	.-724    	; 0x5f7e <send_cmd>
    6252:	81 11       	cpse	r24, r1
    6254:	f5 cf       	rjmp	.-22     	; 0x6240 <disk_initialize+0xf8>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    6256:	80 91 41 19 	lds	r24, 0x1941	; 0x801941 <Timer1>
    625a:	88 23       	and	r24, r24
    625c:	f1 f0       	breq	.+60     	; 0x629a <disk_initialize+0x152>
    625e:	40 e0       	ldi	r20, 0x00	; 0
    6260:	52 e0       	ldi	r21, 0x02	; 2
    6262:	60 e0       	ldi	r22, 0x00	; 0
    6264:	70 e0       	ldi	r23, 0x00	; 0
    6266:	80 e1       	ldi	r24, 0x10	; 16
    6268:	8a de       	rcall	.-748    	; 0x5f7e <send_cmd>
    626a:	81 11       	cpse	r24, r1
				ty = 0;
		}
	}
	CardType = ty;
    626c:	16 c0       	rjmp	.+44     	; 0x629a <disk_initialize+0x152>
    626e:	00 93 3f 19 	sts	0x193F, r16	; 0x80193f <CardType>
	deselect();
    6272:	69 de       	rcall	.-814    	; 0x5f46 <deselect>

	if (ty) {			/* Initialization succeded */
    6274:	00 23       	and	r16, r16
    6276:	39 f0       	breq	.+14     	; 0x6286 <disk_initialize+0x13e>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    6278:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <Stat>
    627c:	8e 7f       	andi	r24, 0xFE	; 254
    627e:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <Stat>
		FCLK_FAST();
    6282:	80 e5       	ldi	r24, 0x50	; 80
    6284:	8c bd       	out	0x2c, r24	; 44
	} else {			/* Initialization failed */
		//power_off();
	}

	return Stat;
    6286:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <Stat>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    628a:	0b c0       	rjmp	.+22     	; 0x62a2 <disk_initialize+0x15a>
			for (n = 0; n < 4; n++) ocr[n] = spi_rwSPI(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = spi_rwSPI(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    628c:	81 e0       	ldi	r24, 0x01	; 1
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    628e:	09 c0       	rjmp	.+18     	; 0x62a2 <disk_initialize+0x15a>
    6290:	8c e0       	ldi	r24, 0x0C	; 12
	deselect();
    6292:	80 93 3f 19 	sts	0x193F, r24	; 0x80193f <CardType>
    6296:	57 de       	rcall	.-850    	; 0x5f46 <deselect>
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    6298:	ef cf       	rjmp	.-34     	; 0x6278 <disk_initialize+0x130>
    629a:	10 92 3f 19 	sts	0x193F, r1	; 0x80193f <CardType>
	deselect();
    629e:	53 de       	rcall	.-858    	; 0x5f46 <deselect>
    62a0:	f2 cf       	rjmp	.-28     	; 0x6286 <disk_initialize+0x13e>
	} else {			/* Initialization failed */
		//power_off();
	}

	return Stat;
}
    62a2:	0f 90       	pop	r0
    62a4:	0f 90       	pop	r0
    62a6:	0f 90       	pop	r0
    62a8:	0f 90       	pop	r0
    62aa:	df 91       	pop	r29
    62ac:	cf 91       	pop	r28
    62ae:	1f 91       	pop	r17
    62b0:	0f 91       	pop	r16
    62b2:	ff 90       	pop	r15
    62b4:	ef 90       	pop	r14
    62b6:	df 90       	pop	r13
    62b8:	cf 90       	pop	r12
    62ba:	08 95       	ret

000062bc <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    62bc:	81 11       	cpse	r24, r1
    62be:	03 c0       	rjmp	.+6      	; 0x62c6 <disk_status+0xa>
	return Stat;
    62c0:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <Stat>
    62c4:	08 95       	ret

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    62c6:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
    62c8:	08 95       	ret

000062ca <disk_read>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    62ca:	ff 92       	push	r15
    62cc:	0f 93       	push	r16
    62ce:	1f 93       	push	r17
    62d0:	cf 93       	push	r28
    62d2:	df 93       	push	r29
    62d4:	eb 01       	movw	r28, r22
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    62d6:	81 11       	cpse	r24, r1
    62d8:	3f c0       	rjmp	.+126    	; 0x6358 <disk_read+0x8e>
    62da:	01 15       	cp	r16, r1
    62dc:	11 05       	cpc	r17, r1
    62de:	09 f4       	brne	.+2      	; 0x62e2 <disk_read+0x18>
    62e0:	3d c0       	rjmp	.+122    	; 0x635c <disk_read+0x92>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    62e2:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <Stat>
    62e6:	80 fd       	sbrc	r24, 0
    62e8:	3b c0       	rjmp	.+118    	; 0x6360 <disk_read+0x96>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    62ea:	80 91 3f 19 	lds	r24, 0x193F	; 0x80193f <CardType>
    62ee:	83 fd       	sbrc	r24, 3
    62f0:	09 c0       	rjmp	.+18     	; 0x6304 <disk_read+0x3a>
    62f2:	01 2e       	mov	r0, r17
    62f4:	19 e0       	ldi	r17, 0x09	; 9
    62f6:	22 0f       	add	r18, r18
    62f8:	33 1f       	adc	r19, r19
    62fa:	44 1f       	adc	r20, r20
    62fc:	55 1f       	adc	r21, r21
    62fe:	1a 95       	dec	r17
    6300:	d1 f7       	brne	.-12     	; 0x62f6 <disk_read+0x2c>
    6302:	10 2d       	mov	r17, r0

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    6304:	02 30       	cpi	r16, 0x02	; 2
    6306:	11 05       	cpc	r17, r1
    6308:	28 f4       	brcc	.+10     	; 0x6314 <disk_read+0x4a>
    630a:	0f 2e       	mov	r0, r31
    630c:	f1 e1       	ldi	r31, 0x11	; 17
    630e:	ff 2e       	mov	r15, r31
    6310:	f0 2d       	mov	r31, r0
    6312:	04 c0       	rjmp	.+8      	; 0x631c <disk_read+0x52>
    6314:	0f 2e       	mov	r0, r31
    6316:	f2 e1       	ldi	r31, 0x12	; 18
    6318:	ff 2e       	mov	r15, r31
    631a:	f0 2d       	mov	r31, r0
	if (send_cmd(cmd, sector) == 0) {
    631c:	ba 01       	movw	r22, r20
    631e:	a9 01       	movw	r20, r18
    6320:	8f 2d       	mov	r24, r15
    6322:	2d de       	rcall	.-934    	; 0x5f7e <send_cmd>
    6324:	81 11       	cpse	r24, r1
    6326:	12 c0       	rjmp	.+36     	; 0x634c <disk_read+0x82>
		do {
			if (!rcvr_datablock(buff, 512)) break;
    6328:	60 e0       	ldi	r22, 0x00	; 0
    632a:	72 e0       	ldi	r23, 0x02	; 2
    632c:	ce 01       	movw	r24, r28
    632e:	8d de       	rcall	.-742    	; 0x604a <rcvr_datablock>
    6330:	89 2b       	or	r24, r25
    6332:	21 f0       	breq	.+8      	; 0x633c <disk_read+0x72>
			buff += 512;
    6334:	de 5f       	subi	r29, 0xFE	; 254
		} while (--count);
    6336:	01 50       	subi	r16, 0x01	; 1
    6338:	11 09       	sbc	r17, r1
    633a:	b1 f7       	brne	.-20     	; 0x6328 <disk_read+0x5e>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    633c:	82 e1       	ldi	r24, 0x12	; 18
    633e:	f8 12       	cpse	r15, r24
    6340:	05 c0       	rjmp	.+10     	; 0x634c <disk_read+0x82>
    6342:	40 e0       	ldi	r20, 0x00	; 0
    6344:	50 e0       	ldi	r21, 0x00	; 0
    6346:	ba 01       	movw	r22, r20
    6348:	8c e0       	ldi	r24, 0x0C	; 12
	}
	deselect();
    634a:	19 de       	rcall	.-974    	; 0x5f7e <send_cmd>
    634c:	fc dd       	rcall	.-1032   	; 0x5f46 <deselect>

	return count ? RES_ERROR : RES_OK;
    634e:	81 e0       	ldi	r24, 0x01	; 1
    6350:	01 2b       	or	r16, r17
    6352:	39 f4       	brne	.+14     	; 0x6362 <disk_read+0x98>
    6354:	80 e0       	ldi	r24, 0x00	; 0
    6356:	05 c0       	rjmp	.+10     	; 0x6362 <disk_read+0x98>
)
{
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    6358:	84 e0       	ldi	r24, 0x04	; 4
    635a:	03 c0       	rjmp	.+6      	; 0x6362 <disk_read+0x98>
    635c:	84 e0       	ldi	r24, 0x04	; 4
    635e:	01 c0       	rjmp	.+2      	; 0x6362 <disk_read+0x98>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    6360:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    6362:	df 91       	pop	r29
    6364:	cf 91       	pop	r28
    6366:	1f 91       	pop	r17
    6368:	0f 91       	pop	r16
    636a:	ff 90       	pop	r15
    636c:	08 95       	ret

0000636e <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    636e:	cf 92       	push	r12
    6370:	df 92       	push	r13
    6372:	ef 92       	push	r14
    6374:	ff 92       	push	r15
    6376:	0f 93       	push	r16
    6378:	1f 93       	push	r17
    637a:	cf 93       	push	r28
    637c:	df 93       	push	r29
    637e:	eb 01       	movw	r28, r22
    6380:	69 01       	movw	r12, r18
    6382:	7a 01       	movw	r14, r20
	if (pdrv || !count) return RES_PARERR;
    6384:	81 11       	cpse	r24, r1
    6386:	51 c0       	rjmp	.+162    	; 0x642a <disk_write+0xbc>
    6388:	01 15       	cp	r16, r1
    638a:	11 05       	cpc	r17, r1
    638c:	09 f4       	brne	.+2      	; 0x6390 <disk_write+0x22>
    638e:	4f c0       	rjmp	.+158    	; 0x642e <disk_write+0xc0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    6390:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <Stat>
    6394:	80 fd       	sbrc	r24, 0
    6396:	4d c0       	rjmp	.+154    	; 0x6432 <disk_write+0xc4>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    6398:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <Stat>
    639c:	82 fd       	sbrc	r24, 2
    639e:	4b c0       	rjmp	.+150    	; 0x6436 <disk_write+0xc8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    63a0:	80 91 3f 19 	lds	r24, 0x193F	; 0x80193f <CardType>
    63a4:	83 fd       	sbrc	r24, 3
    63a6:	09 c0       	rjmp	.+18     	; 0x63ba <disk_write+0x4c>
    63a8:	0b 2e       	mov	r0, r27
    63aa:	b9 e0       	ldi	r27, 0x09	; 9
    63ac:	cc 0c       	add	r12, r12
    63ae:	dd 1c       	adc	r13, r13
    63b0:	ee 1c       	adc	r14, r14
    63b2:	ff 1c       	adc	r15, r15
    63b4:	ba 95       	dec	r27
    63b6:	d1 f7       	brne	.-12     	; 0x63ac <disk_write+0x3e>
    63b8:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
    63ba:	01 30       	cpi	r16, 0x01	; 1
    63bc:	11 05       	cpc	r17, r1
    63be:	89 f4       	brne	.+34     	; 0x63e2 <disk_write+0x74>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    63c0:	b7 01       	movw	r22, r14
    63c2:	a6 01       	movw	r20, r12
    63c4:	88 e1       	ldi	r24, 0x18	; 24
    63c6:	db dd       	rcall	.-1098   	; 0x5f7e <send_cmd>
    63c8:	81 11       	cpse	r24, r1
    63ca:	29 c0       	rjmp	.+82     	; 0x641e <disk_write+0xb0>
			&& xmit_datablock(buff, 0xFE))
    63cc:	6e ef       	ldi	r22, 0xFE	; 254
    63ce:	ce 01       	movw	r24, r28
    63d0:	79 de       	rcall	.-782    	; 0x60c4 <xmit_datablock>
    63d2:	31 e0       	ldi	r19, 0x01	; 1
    63d4:	20 e0       	ldi	r18, 0x00	; 0
    63d6:	89 2b       	or	r24, r25
    63d8:	09 f0       	breq	.+2      	; 0x63dc <disk_write+0x6e>
    63da:	30 e0       	ldi	r19, 0x00	; 0
    63dc:	03 2f       	mov	r16, r19
    63de:	12 2f       	mov	r17, r18
    63e0:	1e c0       	rjmp	.+60     	; 0x641e <disk_write+0xb0>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    63e2:	86 70       	andi	r24, 0x06	; 6
    63e4:	29 f0       	breq	.+10     	; 0x63f0 <disk_write+0x82>
    63e6:	a8 01       	movw	r20, r16
    63e8:	60 e0       	ldi	r22, 0x00	; 0
    63ea:	70 e0       	ldi	r23, 0x00	; 0
    63ec:	87 e9       	ldi	r24, 0x97	; 151
    63ee:	c7 dd       	rcall	.-1138   	; 0x5f7e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    63f0:	b7 01       	movw	r22, r14
    63f2:	a6 01       	movw	r20, r12
    63f4:	89 e1       	ldi	r24, 0x19	; 25
    63f6:	c3 dd       	rcall	.-1146   	; 0x5f7e <send_cmd>
    63f8:	81 11       	cpse	r24, r1
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    63fa:	11 c0       	rjmp	.+34     	; 0x641e <disk_write+0xb0>
    63fc:	6c ef       	ldi	r22, 0xFC	; 252
    63fe:	ce 01       	movw	r24, r28
    6400:	61 de       	rcall	.-830    	; 0x60c4 <xmit_datablock>
    6402:	89 2b       	or	r24, r25
    6404:	21 f0       	breq	.+8      	; 0x640e <disk_write+0xa0>
				buff += 512;
    6406:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    6408:	01 50       	subi	r16, 0x01	; 1
    640a:	11 09       	sbc	r17, r1
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    640c:	b9 f7       	brne	.-18     	; 0x63fc <disk_write+0x8e>
    640e:	6d ef       	ldi	r22, 0xFD	; 253
    6410:	80 e0       	ldi	r24, 0x00	; 0
    6412:	90 e0       	ldi	r25, 0x00	; 0
    6414:	57 de       	rcall	.-850    	; 0x60c4 <xmit_datablock>
    6416:	89 2b       	or	r24, r25
				count = 1;
    6418:	11 f4       	brne	.+4      	; 0x641e <disk_write+0xb0>
    641a:	01 e0       	ldi	r16, 0x01	; 1
		}
	}
	deselect();
    641c:	10 e0       	ldi	r17, 0x00	; 0
    641e:	93 dd       	rcall	.-1242   	; 0x5f46 <deselect>

	return count ? RES_ERROR : RES_OK;
    6420:	81 e0       	ldi	r24, 0x01	; 1
    6422:	01 2b       	or	r16, r17
    6424:	49 f4       	brne	.+18     	; 0x6438 <disk_write+0xca>
    6426:	80 e0       	ldi	r24, 0x00	; 0
    6428:	07 c0       	rjmp	.+14     	; 0x6438 <disk_write+0xca>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (pdrv || !count) return RES_PARERR;
    642a:	84 e0       	ldi	r24, 0x04	; 4
    642c:	05 c0       	rjmp	.+10     	; 0x6438 <disk_write+0xca>
    642e:	84 e0       	ldi	r24, 0x04	; 4
    6430:	03 c0       	rjmp	.+6      	; 0x6438 <disk_write+0xca>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    6432:	83 e0       	ldi	r24, 0x03	; 3
    6434:	01 c0       	rjmp	.+2      	; 0x6438 <disk_write+0xca>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    6436:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    6438:	df 91       	pop	r29
    643a:	cf 91       	pop	r28
    643c:	1f 91       	pop	r17
    643e:	0f 91       	pop	r16
    6440:	ff 90       	pop	r15
    6442:	ef 90       	pop	r14
    6444:	df 90       	pop	r13
    6446:	cf 90       	pop	r12
    6448:	08 95       	ret

0000644a <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    644a:	ef 92       	push	r14
    644c:	ff 92       	push	r15
    644e:	0f 93       	push	r16
    6450:	1f 93       	push	r17
    6452:	cf 93       	push	r28
    6454:	df 93       	push	r29
    6456:	cd b7       	in	r28, 0x3d	; 61
    6458:	de b7       	in	r29, 0x3e	; 62
    645a:	60 97       	sbiw	r28, 0x10	; 16
    645c:	0f b6       	in	r0, 0x3f	; 63
    645e:	f8 94       	cli
    6460:	de bf       	out	0x3e, r29	; 62
    6462:	0f be       	out	0x3f, r0	; 63
    6464:	cd bf       	out	0x3d, r28	; 61
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    6466:	81 11       	cpse	r24, r1
    6468:	81 c1       	rjmp	.+770    	; 0x676c <disk_ioctl+0x322>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    646a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <Stat>
    646e:	80 fd       	sbrc	r24, 0
    6470:	7f c1       	rjmp	.+766    	; 0x6770 <disk_ioctl+0x326>
    6472:	8a 01       	movw	r16, r20

	switch (cmd) {
    6474:	86 2f       	mov	r24, r22
    6476:	90 e0       	ldi	r25, 0x00	; 0
    6478:	87 33       	cpi	r24, 0x37	; 55
    647a:	91 05       	cpc	r25, r1
    647c:	08 f0       	brcs	.+2      	; 0x6480 <disk_ioctl+0x36>
    647e:	5e c1       	rjmp	.+700    	; 0x673c <disk_ioctl+0x2f2>
    6480:	fc 01       	movw	r30, r24
    6482:	ea 5b       	subi	r30, 0xBA	; 186
    6484:	ff 4f       	sbci	r31, 0xFF	; 255
    6486:	0c 94 22 42 	jmp	0x8444	; 0x8444 <__tablejump2__>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    648a:	62 dd       	rcall	.-1340   	; 0x5f50 <select>
    648c:	11 e0       	ldi	r17, 0x01	; 1
    648e:	89 2b       	or	r24, r25
    6490:	09 f4       	brne	.+2      	; 0x6494 <disk_ioctl+0x4a>
    6492:	69 c1       	rjmp	.+722    	; 0x6766 <disk_ioctl+0x31c>
    6494:	10 e0       	ldi	r17, 0x00	; 0
    6496:	67 c1       	rjmp	.+718    	; 0x6766 <disk_ioctl+0x31c>
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    6498:	40 e0       	ldi	r20, 0x00	; 0
    649a:	50 e0       	ldi	r21, 0x00	; 0
    649c:	ba 01       	movw	r22, r20
    649e:	89 e0       	ldi	r24, 0x09	; 9
    64a0:	6e dd       	rcall	.-1316   	; 0x5f7e <send_cmd>
    64a2:	81 11       	cpse	r24, r1
    64a4:	4d c1       	rjmp	.+666    	; 0x6740 <disk_ioctl+0x2f6>
    64a6:	60 e1       	ldi	r22, 0x10	; 16
    64a8:	70 e0       	ldi	r23, 0x00	; 0
    64aa:	ce 01       	movw	r24, r28
    64ac:	01 96       	adiw	r24, 0x01	; 1
    64ae:	cd dd       	rcall	.-1126   	; 0x604a <rcvr_datablock>
    64b0:	89 2b       	or	r24, r25
    64b2:	09 f4       	brne	.+2      	; 0x64b6 <disk_ioctl+0x6c>
    64b4:	47 c1       	rjmp	.+654    	; 0x6744 <disk_ioctl+0x2fa>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    64b6:	89 81       	ldd	r24, Y+1	; 0x01
    64b8:	82 95       	swap	r24
    64ba:	86 95       	lsr	r24
    64bc:	86 95       	lsr	r24
    64be:	83 70       	andi	r24, 0x03	; 3
    64c0:	81 30       	cpi	r24, 0x01	; 1
    64c2:	31 f5       	brne	.+76     	; 0x6510 <disk_ioctl+0xc6>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
    64c4:	29 85       	ldd	r18, Y+9	; 0x09
    64c6:	30 e0       	ldi	r19, 0x00	; 0
    64c8:	32 2f       	mov	r19, r18
    64ca:	22 27       	eor	r18, r18
    64cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    64ce:	28 0f       	add	r18, r24
    64d0:	31 1d       	adc	r19, r1
    64d2:	88 85       	ldd	r24, Y+8	; 0x08
    64d4:	8f 73       	andi	r24, 0x3F	; 63
    64d6:	90 e0       	ldi	r25, 0x00	; 0
    64d8:	a0 e0       	ldi	r26, 0x00	; 0
    64da:	b0 e0       	ldi	r27, 0x00	; 0
    64dc:	dc 01       	movw	r26, r24
    64de:	99 27       	eor	r25, r25
    64e0:	88 27       	eor	r24, r24
    64e2:	01 96       	adiw	r24, 0x01	; 1
    64e4:	a1 1d       	adc	r26, r1
    64e6:	b1 1d       	adc	r27, r1
    64e8:	82 0f       	add	r24, r18
    64ea:	93 1f       	adc	r25, r19
    64ec:	a1 1d       	adc	r26, r1
    64ee:	b1 1d       	adc	r27, r1
    64f0:	07 2e       	mov	r0, r23
    64f2:	7a e0       	ldi	r23, 0x0A	; 10
    64f4:	88 0f       	add	r24, r24
    64f6:	99 1f       	adc	r25, r25
    64f8:	aa 1f       	adc	r26, r26
    64fa:	bb 1f       	adc	r27, r27
    64fc:	7a 95       	dec	r23
    64fe:	d1 f7       	brne	.-12     	; 0x64f4 <disk_ioctl+0xaa>
    6500:	70 2d       	mov	r23, r0
    6502:	f8 01       	movw	r30, r16
    6504:	80 83       	st	Z, r24
    6506:	91 83       	std	Z+1, r25	; 0x01
    6508:	a2 83       	std	Z+2, r26	; 0x02
    650a:	b3 83       	std	Z+3, r27	; 0x03
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
			}
			res = RES_OK;
    650c:	10 e0       	ldi	r17, 0x00	; 0
    650e:	2b c1       	rjmp	.+598    	; 0x6766 <disk_ioctl+0x31c>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
    6510:	89 85       	ldd	r24, Y+9	; 0x09
    6512:	82 95       	swap	r24
    6514:	86 95       	lsr	r24
    6516:	86 95       	lsr	r24
    6518:	83 70       	andi	r24, 0x03	; 3
    651a:	28 85       	ldd	r18, Y+8	; 0x08
    651c:	90 e0       	ldi	r25, 0x00	; 0
    651e:	f4 e0       	ldi	r31, 0x04	; 4
    6520:	2f 9f       	mul	r18, r31
    6522:	80 0d       	add	r24, r0
    6524:	91 1d       	adc	r25, r1
    6526:	11 24       	eor	r1, r1
    6528:	9c 01       	movw	r18, r24
    652a:	2f 5f       	subi	r18, 0xFF	; 255
    652c:	3f 4f       	sbci	r19, 0xFF	; 255
    652e:	8f 81       	ldd	r24, Y+7	; 0x07
    6530:	83 70       	andi	r24, 0x03	; 3
    6532:	90 e0       	ldi	r25, 0x00	; 0
    6534:	98 2f       	mov	r25, r24
    6536:	88 27       	eor	r24, r24
    6538:	99 0f       	add	r25, r25
    653a:	99 0f       	add	r25, r25
    653c:	82 0f       	add	r24, r18
    653e:	93 1f       	adc	r25, r19
    6540:	a0 e0       	ldi	r26, 0x00	; 0
    6542:	b0 e0       	ldi	r27, 0x00	; 0
    6544:	3e 81       	ldd	r19, Y+6	; 0x06
    6546:	3f 70       	andi	r19, 0x0F	; 15
    6548:	2b 85       	ldd	r18, Y+11	; 0x0b
    654a:	22 1f       	adc	r18, r18
    654c:	22 27       	eor	r18, r18
    654e:	22 1f       	adc	r18, r18
    6550:	32 0f       	add	r19, r18
    6552:	2a 85       	ldd	r18, Y+10	; 0x0a
    6554:	23 70       	andi	r18, 0x03	; 3
    6556:	22 0f       	add	r18, r18
    6558:	23 0f       	add	r18, r19
    655a:	27 50       	subi	r18, 0x07	; 7
    655c:	04 c0       	rjmp	.+8      	; 0x6566 <disk_ioctl+0x11c>
    655e:	88 0f       	add	r24, r24
    6560:	99 1f       	adc	r25, r25
    6562:	aa 1f       	adc	r26, r26
    6564:	bb 1f       	adc	r27, r27
    6566:	2a 95       	dec	r18
    6568:	d2 f7       	brpl	.-12     	; 0x655e <disk_ioctl+0x114>
    656a:	f8 01       	movw	r30, r16
    656c:	80 83       	st	Z, r24
    656e:	91 83       	std	Z+1, r25	; 0x01
    6570:	a2 83       	std	Z+2, r26	; 0x02
    6572:	b3 83       	std	Z+3, r27	; 0x03
			}
			res = RES_OK;
    6574:	10 e0       	ldi	r17, 0x00	; 0
    6576:	f7 c0       	rjmp	.+494    	; 0x6766 <disk_ioctl+0x31c>
		}
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
    6578:	80 91 3f 19 	lds	r24, 0x193F	; 0x80193f <CardType>
    657c:	82 ff       	sbrs	r24, 2
    657e:	2f c0       	rjmp	.+94     	; 0x65de <disk_ioctl+0x194>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    6580:	40 e0       	ldi	r20, 0x00	; 0
    6582:	50 e0       	ldi	r21, 0x00	; 0
    6584:	ba 01       	movw	r22, r20
    6586:	8d e8       	ldi	r24, 0x8D	; 141
    6588:	fa dc       	rcall	.-1548   	; 0x5f7e <send_cmd>
    658a:	81 11       	cpse	r24, r1
				spi_rwSPI(0xFF);
    658c:	dd c0       	rjmp	.+442    	; 0x6748 <disk_ioctl+0x2fe>
    658e:	8f ef       	ldi	r24, 0xFF	; 255
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    6590:	0f d7       	rcall	.+3614   	; 0x73b0 <spi_rwSPI>
    6592:	60 e1       	ldi	r22, 0x10	; 16
    6594:	70 e0       	ldi	r23, 0x00	; 0
    6596:	ce 01       	movw	r24, r28
    6598:	01 96       	adiw	r24, 0x01	; 1
    659a:	57 dd       	rcall	.-1362   	; 0x604a <rcvr_datablock>
    659c:	89 2b       	or	r24, r25
    659e:	09 f4       	brne	.+2      	; 0x65a2 <disk_ioctl+0x158>
    65a0:	d5 c0       	rjmp	.+426    	; 0x674c <disk_ioctl+0x302>
    65a2:	0f 2e       	mov	r0, r31
    65a4:	f0 e3       	ldi	r31, 0x30	; 48
    65a6:	ff 2e       	mov	r15, r31
					for (n = 64 - 16; n; n--) spi_rwSPI(0xFF);	/* Purge trailing data */
    65a8:	f0 2d       	mov	r31, r0
    65aa:	8f ef       	ldi	r24, 0xFF	; 255
    65ac:	01 d7       	rcall	.+3586   	; 0x73b0 <spi_rwSPI>
    65ae:	fa 94       	dec	r15
    65b0:	f1 10       	cpse	r15, r1
    65b2:	fb cf       	rjmp	.-10     	; 0x65aa <disk_ioctl+0x160>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
    65b4:	2b 85       	ldd	r18, Y+11	; 0x0b
    65b6:	22 95       	swap	r18
    65b8:	2f 70       	andi	r18, 0x0F	; 15
    65ba:	80 e1       	ldi	r24, 0x10	; 16
    65bc:	90 e0       	ldi	r25, 0x00	; 0
    65be:	a0 e0       	ldi	r26, 0x00	; 0
    65c0:	b0 e0       	ldi	r27, 0x00	; 0
    65c2:	04 c0       	rjmp	.+8      	; 0x65cc <disk_ioctl+0x182>
    65c4:	88 0f       	add	r24, r24
    65c6:	99 1f       	adc	r25, r25
    65c8:	aa 1f       	adc	r26, r26
    65ca:	bb 1f       	adc	r27, r27
    65cc:	2a 95       	dec	r18
    65ce:	d2 f7       	brpl	.-12     	; 0x65c4 <disk_ioctl+0x17a>
    65d0:	f8 01       	movw	r30, r16
    65d2:	80 83       	st	Z, r24
    65d4:	91 83       	std	Z+1, r25	; 0x01
    65d6:	a2 83       	std	Z+2, r26	; 0x02
					res = RES_OK;
    65d8:	b3 83       	std	Z+3, r27	; 0x03
    65da:	10 e0       	ldi	r17, 0x00	; 0
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    65dc:	c4 c0       	rjmp	.+392    	; 0x6766 <disk_ioctl+0x31c>
    65de:	40 e0       	ldi	r20, 0x00	; 0
    65e0:	50 e0       	ldi	r21, 0x00	; 0
    65e2:	ba 01       	movw	r22, r20
    65e4:	89 e0       	ldi	r24, 0x09	; 9
    65e6:	cb dc       	rcall	.-1642   	; 0x5f7e <send_cmd>
    65e8:	81 11       	cpse	r24, r1
    65ea:	b2 c0       	rjmp	.+356    	; 0x6750 <disk_ioctl+0x306>
    65ec:	60 e1       	ldi	r22, 0x10	; 16
    65ee:	70 e0       	ldi	r23, 0x00	; 0
    65f0:	ce 01       	movw	r24, r28
    65f2:	01 96       	adiw	r24, 0x01	; 1
    65f4:	2a dd       	rcall	.-1452   	; 0x604a <rcvr_datablock>
    65f6:	89 2b       	or	r24, r25
    65f8:	09 f4       	brne	.+2      	; 0x65fc <disk_ioctl+0x1b2>
    65fa:	ac c0       	rjmp	.+344    	; 0x6754 <disk_ioctl+0x30a>
				if (CardType & CT_SD1) {	/* SDv1 */
    65fc:	80 91 3f 19 	lds	r24, 0x193F	; 0x80193f <CardType>
    6600:	81 ff       	sbrs	r24, 1
    6602:	20 c0       	rjmp	.+64     	; 0x6644 <disk_ioctl+0x1fa>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    6604:	2b 85       	ldd	r18, Y+11	; 0x0b
    6606:	2f 73       	andi	r18, 0x3F	; 63
    6608:	8c 85       	ldd	r24, Y+12	; 0x0c
    660a:	88 1f       	adc	r24, r24
    660c:	88 27       	eor	r24, r24
    660e:	88 1f       	adc	r24, r24
    6610:	90 e0       	ldi	r25, 0x00	; 0
    6612:	01 96       	adiw	r24, 0x01	; 1
    6614:	82 0f       	add	r24, r18
    6616:	91 1d       	adc	r25, r1
    6618:	82 0f       	add	r24, r18
    661a:	91 1d       	adc	r25, r1
    661c:	2e 85       	ldd	r18, Y+14	; 0x0e
    661e:	22 95       	swap	r18
    6620:	26 95       	lsr	r18
    6622:	26 95       	lsr	r18
    6624:	23 70       	andi	r18, 0x03	; 3
    6626:	21 50       	subi	r18, 0x01	; 1
    6628:	02 c0       	rjmp	.+4      	; 0x662e <disk_ioctl+0x1e4>
    662a:	88 0f       	add	r24, r24
    662c:	99 1f       	adc	r25, r25
    662e:	2a 95       	dec	r18
    6630:	e2 f7       	brpl	.-8      	; 0x662a <disk_ioctl+0x1e0>
    6632:	a0 e0       	ldi	r26, 0x00	; 0
    6634:	b0 e0       	ldi	r27, 0x00	; 0
    6636:	f8 01       	movw	r30, r16
    6638:	80 83       	st	Z, r24
    663a:	91 83       	std	Z+1, r25	; 0x01
    663c:	a2 83       	std	Z+2, r26	; 0x02
    663e:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
    6640:	10 e0       	ldi	r17, 0x00	; 0
    6642:	91 c0       	rjmp	.+290    	; 0x6766 <disk_ioctl+0x31c>
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
				if (CardType & CT_SD1) {	/* SDv1 */
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    6644:	8c 85       	ldd	r24, Y+12	; 0x0c
    6646:	28 2f       	mov	r18, r24
    6648:	23 70       	andi	r18, 0x03	; 3
    664a:	82 95       	swap	r24
    664c:	86 95       	lsr	r24
    664e:	87 70       	andi	r24, 0x07	; 7
    6650:	90 e0       	ldi	r25, 0x00	; 0
    6652:	f8 e0       	ldi	r31, 0x08	; 8
    6654:	2f 9f       	mul	r18, r31
    6656:	80 0d       	add	r24, r0
    6658:	91 1d       	adc	r25, r1
    665a:	11 24       	eor	r1, r1
    665c:	01 96       	adiw	r24, 0x01	; 1
    665e:	2b 85       	ldd	r18, Y+11	; 0x0b
    6660:	2c 77       	andi	r18, 0x7C	; 124
    6662:	30 e0       	ldi	r19, 0x00	; 0
    6664:	35 95       	asr	r19
    6666:	27 95       	ror	r18
    6668:	35 95       	asr	r19
    666a:	27 95       	ror	r18
    666c:	2f 5f       	subi	r18, 0xFF	; 255
    666e:	3f 4f       	sbci	r19, 0xFF	; 255
    6670:	82 9f       	mul	r24, r18
    6672:	a0 01       	movw	r20, r0
    6674:	83 9f       	mul	r24, r19
    6676:	50 0d       	add	r21, r0
    6678:	92 9f       	mul	r25, r18
    667a:	50 0d       	add	r21, r0
    667c:	11 24       	eor	r1, r1
    667e:	ca 01       	movw	r24, r20
    6680:	a0 e0       	ldi	r26, 0x00	; 0
    6682:	b0 e0       	ldi	r27, 0x00	; 0
    6684:	f8 01       	movw	r30, r16
    6686:	80 83       	st	Z, r24
    6688:	91 83       	std	Z+1, r25	; 0x01
    668a:	a2 83       	std	Z+2, r26	; 0x02
    668c:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
    668e:	10 e0       	ldi	r17, 0x00	; 0
    6690:	6a c0       	rjmp	.+212    	; 0x6766 <disk_ioctl+0x31c>
		break;

	/* Following commands are never used by FatFs module */

	case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
		*ptr = CardType;
    6692:	80 91 3f 19 	lds	r24, 0x193F	; 0x80193f <CardType>
    6696:	fa 01       	movw	r30, r20
		res = RES_OK;
    6698:	80 83       	st	Z, r24
		break;
    669a:	10 e0       	ldi	r17, 0x00	; 0

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    669c:	64 c0       	rjmp	.+200    	; 0x6766 <disk_ioctl+0x31c>
    669e:	40 e0       	ldi	r20, 0x00	; 0
    66a0:	50 e0       	ldi	r21, 0x00	; 0
    66a2:	ba 01       	movw	r22, r20
    66a4:	89 e0       	ldi	r24, 0x09	; 9
    66a6:	6b dc       	rcall	.-1834   	; 0x5f7e <send_cmd>
    66a8:	81 11       	cpse	r24, r1
			&& rcvr_datablock(ptr, 16))
    66aa:	56 c0       	rjmp	.+172    	; 0x6758 <disk_ioctl+0x30e>
    66ac:	60 e1       	ldi	r22, 0x10	; 16
    66ae:	70 e0       	ldi	r23, 0x00	; 0
    66b0:	c8 01       	movw	r24, r16

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	switch (cmd) {
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    66b2:	cb dc       	rcall	.-1642   	; 0x604a <rcvr_datablock>
    66b4:	11 e0       	ldi	r17, 0x01	; 1
    66b6:	89 2b       	or	r24, r25
    66b8:	09 f4       	brne	.+2      	; 0x66bc <disk_ioctl+0x272>
    66ba:	55 c0       	rjmp	.+170    	; 0x6766 <disk_ioctl+0x31c>
			&& rcvr_datablock(ptr, 16))
			res = RES_OK;
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    66bc:	10 e0       	ldi	r17, 0x00	; 0
    66be:	53 c0       	rjmp	.+166    	; 0x6766 <disk_ioctl+0x31c>
    66c0:	40 e0       	ldi	r20, 0x00	; 0
    66c2:	50 e0       	ldi	r21, 0x00	; 0
    66c4:	ba 01       	movw	r22, r20
    66c6:	8a e0       	ldi	r24, 0x0A	; 10
    66c8:	5a dc       	rcall	.-1868   	; 0x5f7e <send_cmd>
    66ca:	81 11       	cpse	r24, r1
			&& rcvr_datablock(ptr, 16))
    66cc:	47 c0       	rjmp	.+142    	; 0x675c <disk_ioctl+0x312>
    66ce:	60 e1       	ldi	r22, 0x10	; 16
    66d0:	70 e0       	ldi	r23, 0x00	; 0
    66d2:	c8 01       	movw	r24, r16

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	switch (cmd) {
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    66d4:	ba dc       	rcall	.-1676   	; 0x604a <rcvr_datablock>
    66d6:	11 e0       	ldi	r17, 0x01	; 1
    66d8:	89 2b       	or	r24, r25
    66da:	09 f4       	brne	.+2      	; 0x66de <disk_ioctl+0x294>
    66dc:	44 c0       	rjmp	.+136    	; 0x6766 <disk_ioctl+0x31c>
			&& rcvr_datablock(ptr, 16))
			res = RES_OK;
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    66de:	10 e0       	ldi	r17, 0x00	; 0
    66e0:	42 c0       	rjmp	.+132    	; 0x6766 <disk_ioctl+0x31c>
    66e2:	40 e0       	ldi	r20, 0x00	; 0
    66e4:	50 e0       	ldi	r21, 0x00	; 0
    66e6:	ba 01       	movw	r22, r20
    66e8:	8a e3       	ldi	r24, 0x3A	; 58
    66ea:	49 dc       	rcall	.-1902   	; 0x5f7e <send_cmd>
    66ec:	81 11       	cpse	r24, r1
    66ee:	38 c0       	rjmp	.+112    	; 0x6760 <disk_ioctl+0x316>
    66f0:	78 01       	movw	r14, r16
    66f2:	0c 5f       	subi	r16, 0xFC	; 252
			for (n = 4; n; n--) *ptr++ = spi_rwSPI(0xFF);
    66f4:	1f 4f       	sbci	r17, 0xFF	; 255
    66f6:	8f ef       	ldi	r24, 0xFF	; 255
    66f8:	5b d6       	rcall	.+3254   	; 0x73b0 <spi_rwSPI>
    66fa:	f7 01       	movw	r30, r14
    66fc:	81 93       	st	Z+, r24
    66fe:	7f 01       	movw	r14, r30
    6700:	0e 17       	cp	r16, r30
			res = RES_OK;
    6702:	1f 07       	cpc	r17, r31
    6704:	c1 f7       	brne	.-16     	; 0x66f6 <disk_ioctl+0x2ac>
		}
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    6706:	10 e0       	ldi	r17, 0x00	; 0
    6708:	2e c0       	rjmp	.+92     	; 0x6766 <disk_ioctl+0x31c>
    670a:	40 e0       	ldi	r20, 0x00	; 0
    670c:	50 e0       	ldi	r21, 0x00	; 0
    670e:	ba 01       	movw	r22, r20
    6710:	8d e8       	ldi	r24, 0x8D	; 141
    6712:	35 dc       	rcall	.-1942   	; 0x5f7e <send_cmd>
    6714:	81 11       	cpse	r24, r1
			spi_rwSPI(0xFF);
    6716:	26 c0       	rjmp	.+76     	; 0x6764 <disk_ioctl+0x31a>
    6718:	8f ef       	ldi	r24, 0xFF	; 255
    671a:	4a d6       	rcall	.+3220   	; 0x73b0 <spi_rwSPI>
			if (rcvr_datablock(ptr, 64))
    671c:	60 e4       	ldi	r22, 0x40	; 64
    671e:	70 e0       	ldi	r23, 0x00	; 0
    6720:	c8 01       	movw	r24, r16
    6722:	93 dc       	rcall	.-1754   	; 0x604a <rcvr_datablock>
    6724:	11 e0       	ldi	r17, 0x01	; 1

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	switch (cmd) {
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    6726:	89 2b       	or	r24, r25
    6728:	f1 f0       	breq	.+60     	; 0x6766 <disk_ioctl+0x31c>
    672a:	10 e0       	ldi	r17, 0x00	; 0
    672c:	1c c0       	rjmp	.+56     	; 0x6766 <disk_ioctl+0x31c>
    672e:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <Stat>
				res = RES_OK;
		}
		break;

	case CTRL_POWER_OFF :	/* Power off */
		Stat |= STA_NOINIT;
    6732:	81 60       	ori	r24, 0x01	; 1
    6734:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <Stat>
    6738:	10 e0       	ldi	r17, 0x00	; 0
		res = RES_OK;
    673a:	15 c0       	rjmp	.+42     	; 0x6766 <disk_ioctl+0x31c>
		break;
    673c:	14 e0       	ldi	r17, 0x04	; 4

	default:
		res = RES_PARERR;
    673e:	13 c0       	rjmp	.+38     	; 0x6766 <disk_ioctl+0x31c>
    6740:	11 e0       	ldi	r17, 0x01	; 1
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    6742:	11 c0       	rjmp	.+34     	; 0x6766 <disk_ioctl+0x31c>
    6744:	11 e0       	ldi	r17, 0x01	; 1
    6746:	0f c0       	rjmp	.+30     	; 0x6766 <disk_ioctl+0x31c>
    6748:	11 e0       	ldi	r17, 0x01	; 1
    674a:	0d c0       	rjmp	.+26     	; 0x6766 <disk_ioctl+0x31c>
    674c:	11 e0       	ldi	r17, 0x01	; 1
    674e:	0b c0       	rjmp	.+22     	; 0x6766 <disk_ioctl+0x31c>
    6750:	11 e0       	ldi	r17, 0x01	; 1
    6752:	09 c0       	rjmp	.+18     	; 0x6766 <disk_ioctl+0x31c>
    6754:	11 e0       	ldi	r17, 0x01	; 1
    6756:	07 c0       	rjmp	.+14     	; 0x6766 <disk_ioctl+0x31c>
    6758:	11 e0       	ldi	r17, 0x01	; 1
    675a:	05 c0       	rjmp	.+10     	; 0x6766 <disk_ioctl+0x31c>
    675c:	11 e0       	ldi	r17, 0x01	; 1
    675e:	03 c0       	rjmp	.+6      	; 0x6766 <disk_ioctl+0x31c>
    6760:	11 e0       	ldi	r17, 0x01	; 1
    6762:	01 c0       	rjmp	.+2      	; 0x6766 <disk_ioctl+0x31c>
    6764:	11 e0       	ldi	r17, 0x01	; 1

	default:
		res = RES_PARERR;
	}

	deselect();
    6766:	ef db       	rcall	.-2082   	; 0x5f46 <deselect>
    6768:	81 2f       	mov	r24, r17

	return res;
    676a:	03 c0       	rjmp	.+6      	; 0x6772 <disk_ioctl+0x328>
    676c:	84 e0       	ldi	r24, 0x04	; 4
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    676e:	01 c0       	rjmp	.+2      	; 0x6772 <disk_ioctl+0x328>
    6770:	83 e0       	ldi	r24, 0x03	; 3

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    6772:	60 96       	adiw	r28, 0x10	; 16
	}

	deselect();

	return res;
}
    6774:	0f b6       	in	r0, 0x3f	; 63
    6776:	f8 94       	cli
    6778:	de bf       	out	0x3e, r29	; 62
    677a:	0f be       	out	0x3f, r0	; 63
    677c:	cd bf       	out	0x3d, r28	; 61
    677e:	df 91       	pop	r29
    6780:	cf 91       	pop	r28
    6782:	1f 91       	pop	r17
    6784:	0f 91       	pop	r16
    6786:	ff 90       	pop	r15
    6788:	ef 90       	pop	r14
    678a:	08 95       	ret

0000678c <hih8120_measure>:

float hih8120_humidity = 1;
float hih8120_temperature_C = 1;

void hih8120_measure()
{
    678c:	0f 93       	push	r16
    678e:	1f 93       	push	r17
    6790:	cf 93       	push	r28
    6792:	df 93       	push	r29
	PORT_CS &= ~(1<<HIH_CS);
    6794:	2c 98       	cbi	0x05, 4	; 5
	uint8_t humidity_hi = spi_rwSPI(0x00);
    6796:	80 e0       	ldi	r24, 0x00	; 0
    6798:	0b d6       	rcall	.+3094   	; 0x73b0 <spi_rwSPI>
    679a:	08 2f       	mov	r16, r24
	uint8_t humidity_lo = spi_rwSPI(0x00);
    679c:	80 e0       	ldi	r24, 0x00	; 0
    679e:	08 d6       	rcall	.+3088   	; 0x73b0 <spi_rwSPI>
    67a0:	d8 2f       	mov	r29, r24
	uint8_t temp_hi = spi_rwSPI(0x00);
    67a2:	80 e0       	ldi	r24, 0x00	; 0
    67a4:	05 d6       	rcall	.+3082   	; 0x73b0 <spi_rwSPI>
    67a6:	c8 2f       	mov	r28, r24
	uint8_t temp_lo = spi_rwSPI(0x00);
    67a8:	80 e0       	ldi	r24, 0x00	; 0
    67aa:	02 d6       	rcall	.+3076   	; 0x73b0 <spi_rwSPI>
    67ac:	18 2f       	mov	r17, r24
	PORT_CS |= (1<<HIH_CS);
    67ae:	2c 9a       	sbi	0x05, 4	; 5
	PORT_CS &= ~(1<<HIH_CS);
    67b0:	2c 98       	cbi	0x05, 4	; 5
	spi_rwSPI(0x00);
    67b2:	80 e0       	ldi	r24, 0x00	; 0
    67b4:	fd d5       	rcall	.+3066   	; 0x73b0 <spi_rwSPI>
    67b6:	2c 9a       	sbi	0x05, 4	; 5
	PORT_CS |= (1<<HIH_CS);
    67b8:	0f 73       	andi	r16, 0x3F	; 63

	
 	// Calculate Relative Humidity
 	hih8120_humidity = (float)((((humidity_hi & 0x3f) << 8) | humidity_lo) / ((pow(2,14) - 2)) * 100);
    67ba:	6d 2f       	mov	r22, r29
    67bc:	70 e0       	ldi	r23, 0x00	; 0
    67be:	70 2b       	or	r23, r16
    67c0:	07 2e       	mov	r0, r23
    67c2:	00 0c       	add	r0, r0
    67c4:	88 0b       	sbc	r24, r24
    67c6:	99 0b       	sbc	r25, r25
    67c8:	0e 94 5d 40 	call	0x80ba	; 0x80ba <__floatsisf>
    67cc:	20 e0       	ldi	r18, 0x00	; 0
    67ce:	38 ef       	ldi	r19, 0xF8	; 248
    67d0:	4f e7       	ldi	r20, 0x7F	; 127
    67d2:	56 e4       	ldi	r21, 0x46	; 70
    67d4:	0e 94 be 3f 	call	0x7f7c	; 0x7f7c <__divsf3>
    67d8:	20 e0       	ldi	r18, 0x00	; 0
    67da:	30 e0       	ldi	r19, 0x00	; 0
    67dc:	48 ec       	ldi	r20, 0xC8	; 200
    67de:	52 e4       	ldi	r21, 0x42	; 66
    67e0:	0e 94 5f 41 	call	0x82be	; 0x82be <__mulsf3>
    67e4:	60 93 33 01 	sts	0x0133, r22	; 0x800133 <hih8120_humidity>
    67e8:	70 93 34 01 	sts	0x0134, r23	; 0x800134 <hih8120_humidity+0x1>
    67ec:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <hih8120_humidity+0x2>
    67f0:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <hih8120_humidity+0x3>
    67f4:	80 e4       	ldi	r24, 0x40	; 64

	 //hih8120_humidity = humidity_lo;
	 //hih8120_temperature_C = humidity_hi;
 
 	// Calculate Temperature
 	hih8120_temperature_C = (float) ((((temp_hi << 6) | (temp_lo >> 2)) / (pow(2, 14) - 2)) * 165 - 40);
    67f6:	c8 9f       	mul	r28, r24
    67f8:	b0 01       	movw	r22, r0
    67fa:	11 24       	eor	r1, r1
    67fc:	16 95       	lsr	r17
    67fe:	16 95       	lsr	r17
    6800:	61 2b       	or	r22, r17
    6802:	07 2e       	mov	r0, r23
    6804:	00 0c       	add	r0, r0
    6806:	88 0b       	sbc	r24, r24
    6808:	99 0b       	sbc	r25, r25
    680a:	0e 94 5d 40 	call	0x80ba	; 0x80ba <__floatsisf>
    680e:	20 e0       	ldi	r18, 0x00	; 0
    6810:	38 ef       	ldi	r19, 0xF8	; 248
    6812:	4f e7       	ldi	r20, 0x7F	; 127
    6814:	56 e4       	ldi	r21, 0x46	; 70
    6816:	0e 94 be 3f 	call	0x7f7c	; 0x7f7c <__divsf3>
    681a:	20 e0       	ldi	r18, 0x00	; 0
    681c:	30 e0       	ldi	r19, 0x00	; 0
    681e:	45 e2       	ldi	r20, 0x25	; 37
    6820:	53 e4       	ldi	r21, 0x43	; 67
    6822:	0e 94 5f 41 	call	0x82be	; 0x82be <__mulsf3>
    6826:	20 e0       	ldi	r18, 0x00	; 0
    6828:	30 e0       	ldi	r19, 0x00	; 0
    682a:	40 e2       	ldi	r20, 0x20	; 32
    682c:	52 e4       	ldi	r21, 0x42	; 66
    682e:	0e 94 55 3f 	call	0x7eaa	; 0x7eaa <__subsf3>
    6832:	60 93 2f 01 	sts	0x012F, r22	; 0x80012f <hih8120_temperature_C>
    6836:	70 93 30 01 	sts	0x0130, r23	; 0x800130 <hih8120_temperature_C+0x1>
    683a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <hih8120_temperature_C+0x2>
    683e:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <hih8120_temperature_C+0x3>
    6842:	df 91       	pop	r29
	 
	 
}
    6844:	cf 91       	pop	r28
    6846:	1f 91       	pop	r17
    6848:	0f 91       	pop	r16
    684a:	08 95       	ret

0000684c <i2c_init>:
    684c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    6850:	88 e4       	ldi	r24, 0x48	; 72
    6852:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    6856:	84 e0       	ldi	r24, 0x04	; 4
    6858:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    685c:	08 95       	ret

0000685e <rtc_I2C_Start>:

void rtc_I2C_Start()
{
	TWCR = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));
    685e:	84 ea       	ldi	r24, 0xA4	; 164
    6860:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & (1<<TWINT)));
    6864:	ec eb       	ldi	r30, 0xBC	; 188
    6866:	f0 e0       	ldi	r31, 0x00	; 0
    6868:	80 81       	ld	r24, Z
    686a:	88 23       	and	r24, r24
    686c:	ec f7       	brge	.-6      	; 0x6868 <rtc_I2C_Start+0xa>
}
    686e:	08 95       	ret

00006870 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    6870:	84 e9       	ldi	r24, 0x94	; 148
    6872:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    6876:	ec eb       	ldi	r30, 0xBC	; 188
    6878:	f0 e0       	ldi	r31, 0x00	; 0
    687a:	80 81       	ld	r24, Z
    687c:	84 fd       	sbrc	r24, 4
    687e:	fd cf       	rjmp	.-6      	; 0x687a <i2c_stop+0xa>

}/* i2c_stop */
    6880:	08 95       	ret

00006882 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    6882:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    6886:	84 e8       	ldi	r24, 0x84	; 132
    6888:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    688c:	ec eb       	ldi	r30, 0xBC	; 188
    688e:	f0 e0       	ldi	r31, 0x00	; 0
    6890:	80 81       	ld	r24, Z
    6892:	88 23       	and	r24, r24
    6894:	ec f7       	brge	.-6      	; 0x6890 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    6896:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    689a:	98 7f       	andi	r25, 0xF8	; 248
    689c:	81 e0       	ldi	r24, 0x01	; 1
    689e:	98 32       	cpi	r25, 0x28	; 40
    68a0:	09 f4       	brne	.+2      	; 0x68a4 <i2c_write+0x22>
    68a2:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    68a4:	08 95       	ret

000068a6 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    68a6:	84 ec       	ldi	r24, 0xC4	; 196
    68a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));    
    68ac:	ec eb       	ldi	r30, 0xBC	; 188
    68ae:	f0 e0       	ldi	r31, 0x00	; 0
    68b0:	80 81       	ld	r24, Z
    68b2:	88 23       	and	r24, r24
    68b4:	ec f7       	brge	.-6      	; 0x68b0 <i2c_readAck+0xa>

    return TWDR;
    68b6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readAck */
    68ba:	08 95       	ret

000068bc <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    68bc:	84 e8       	ldi	r24, 0x84	; 132
    68be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
    68c2:	ec eb       	ldi	r30, 0xBC	; 188
    68c4:	f0 e0       	ldi	r31, 0x00	; 0
    68c6:	80 81       	ld	r24, Z
    68c8:	88 23       	and	r24, r24
    68ca:	ec f7       	brge	.-6      	; 0x68c6 <i2c_readNak+0xa>
	
    return TWDR;
    68cc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readNak */
    68d0:	08 95       	ret

000068d2 <N5110_Cmnd>:
#include "../../Options.h"
#include <avr/pgmspace.h>

void N5110_Cmnd(char DATA)
{
	PORT_LCD &= ~(1<<LCD_DC);				/* make DC pin to logic zero for command operation */
    68d2:	43 98       	cbi	0x08, 3	; 8
	PORT_LCD &= ~(1<<LCD_SCE);				/* enable SS pin to slave selection */
    68d4:	45 98       	cbi	0x08, 5	; 8
	spi_rwSPI(DATA);				/* send data on data register */
    68d6:	6c d5       	rcall	.+2776   	; 0x73b0 <spi_rwSPI>
	PORT_LCD |= (1<<LCD_DC);				/* make DC pin to logic high for data operation */
    68d8:	43 9a       	sbi	0x08, 3	; 8
	PORT_LCD |= (1<<LCD_SCE);	
    68da:	45 9a       	sbi	0x08, 5	; 8
    68dc:	08 95       	ret

000068de <N5110_Data>:
}

void N5110_Data(char *DATA)
{
    68de:	ef 92       	push	r14
    68e0:	ff 92       	push	r15
    68e2:	0f 93       	push	r16
    68e4:	1f 93       	push	r17
    68e6:	cf 93       	push	r28
    68e8:	df 93       	push	r29
	PORT_LCD |= (1<<LCD_DC);									/* make DC pin to logic high for data operation */
    68ea:	43 9a       	sbi	0x08, 3	; 8
	PORT_LCD &= ~(1<<LCD_SCE);									/* enable SS pin to slave selection */
    68ec:	45 98       	cbi	0x08, 5	; 8
	int lenan = strlen(DATA);							/* measure the length of data */
    68ee:	fc 01       	movw	r30, r24
    68f0:	01 90       	ld	r0, Z+
    68f2:	00 20       	and	r0, r0
    68f4:	e9 f7       	brne	.-6      	; 0x68f0 <N5110_Data+0x12>
    68f6:	31 97       	sbiw	r30, 0x01	; 1
    68f8:	e8 1b       	sub	r30, r24
    68fa:	f9 0b       	sbc	r31, r25
	for (int g=0; g<lenan; g++)
    68fc:	1e 16       	cp	r1, r30
    68fe:	1f 06       	cpc	r1, r31
    6900:	2c f5       	brge	.+74     	; 0x694c <N5110_Data+0x6e>
    6902:	ec 01       	movw	r28, r24
    6904:	8c 01       	movw	r16, r24
    6906:	0e 0f       	add	r16, r30
    6908:	1f 1f       	adc	r17, r31
    690a:	1d c0       	rjmp	.+58     	; 0x6946 <N5110_Data+0x68>
	{
		for (int index=0; index<5; index++)
		{
			spi_rwSPI(ASCII[DATA[g] - 0x20][index]);	/* send the data on data register */
    690c:	88 81       	ld	r24, Y
    690e:	90 e0       	ldi	r25, 0x00	; 0
    6910:	80 97       	sbiw	r24, 0x20	; 32
    6912:	fc 01       	movw	r30, r24
    6914:	ee 0f       	add	r30, r30
    6916:	ff 1f       	adc	r31, r31
    6918:	ee 0f       	add	r30, r30
    691a:	ff 1f       	adc	r31, r31
    691c:	e8 0f       	add	r30, r24
    691e:	f9 1f       	adc	r31, r25
    6920:	e9 5a       	subi	r30, 0xA9	; 169
    6922:	fd 4f       	sbci	r31, 0xFD	; 253
    6924:	ee 0d       	add	r30, r14
    6926:	ff 1d       	adc	r31, r15
    6928:	80 81       	ld	r24, Z
    692a:	42 d5       	rcall	.+2692   	; 0x73b0 <spi_rwSPI>
	PORT_LCD |= (1<<LCD_DC);									/* make DC pin to logic high for data operation */
	PORT_LCD &= ~(1<<LCD_SCE);									/* enable SS pin to slave selection */
	int lenan = strlen(DATA);							/* measure the length of data */
	for (int g=0; g<lenan; g++)
	{
		for (int index=0; index<5; index++)
    692c:	8f ef       	ldi	r24, 0xFF	; 255
    692e:	e8 1a       	sub	r14, r24
    6930:	f8 0a       	sbc	r15, r24
    6932:	85 e0       	ldi	r24, 0x05	; 5
    6934:	e8 16       	cp	r14, r24
    6936:	f1 04       	cpc	r15, r1
    6938:	49 f7       	brne	.-46     	; 0x690c <N5110_Data+0x2e>
		{
			spi_rwSPI(ASCII[DATA[g] - 0x20][index]);	/* send the data on data register */
		}
		spi_rwSPI(0x00);
    693a:	80 e0       	ldi	r24, 0x00	; 0
    693c:	39 d5       	rcall	.+2674   	; 0x73b0 <spi_rwSPI>
    693e:	21 96       	adiw	r28, 0x01	; 1
void N5110_Data(char *DATA)
{
	PORT_LCD |= (1<<LCD_DC);									/* make DC pin to logic high for data operation */
	PORT_LCD &= ~(1<<LCD_SCE);									/* enable SS pin to slave selection */
	int lenan = strlen(DATA);							/* measure the length of data */
	for (int g=0; g<lenan; g++)
    6940:	0c 17       	cp	r16, r28
    6942:	1d 07       	cpc	r17, r29
    6944:	19 f0       	breq	.+6      	; 0x694c <N5110_Data+0x6e>
	PORT_LCD |= (1<<LCD_DC);				/* make DC pin to logic high for data operation */
	PORT_LCD |= (1<<LCD_SCE);	
}

void N5110_Data(char *DATA)
{
    6946:	e1 2c       	mov	r14, r1
    6948:	f1 2c       	mov	r15, r1
    694a:	e0 cf       	rjmp	.-64     	; 0x690c <N5110_Data+0x2e>
		{
			spi_rwSPI(ASCII[DATA[g] - 0x20][index]);	/* send the data on data register */
		}
		spi_rwSPI(0x00);
	}
	PORT_LCD |= (1<<LCD_SCE);
    694c:	45 9a       	sbi	0x08, 5	; 8
}
    694e:	df 91       	pop	r29
    6950:	cf 91       	pop	r28
    6952:	1f 91       	pop	r17
    6954:	0f 91       	pop	r16
    6956:	ff 90       	pop	r15
    6958:	ef 90       	pop	r14
    695a:	08 95       	ret

0000695c <N5110_Reset>:

void N5110_Reset()					/* reset the Display at the beginning of initialization */
{
	PORT_LCD &= ~(1<<LCD_RST);
    695c:	42 98       	cbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    695e:	2f ef       	ldi	r18, 0xFF	; 255
    6960:	81 ee       	ldi	r24, 0xE1	; 225
    6962:	94 e0       	ldi	r25, 0x04	; 4
    6964:	21 50       	subi	r18, 0x01	; 1
    6966:	80 40       	sbci	r24, 0x00	; 0
    6968:	90 40       	sbci	r25, 0x00	; 0
    696a:	e1 f7       	brne	.-8      	; 0x6964 <N5110_Reset+0x8>
    696c:	00 c0       	rjmp	.+0      	; 0x696e <N5110_Reset+0x12>
    696e:	00 00       	nop
	_delay_ms(100);
	PORT_LCD |= (1<<LCD_RST);
    6970:	42 9a       	sbi	0x08, 2	; 8
    6972:	08 95       	ret

00006974 <N5110_init>:
}

void N5110_init()
{
    6974:	cf 93       	push	r28
    6976:	df 93       	push	r29
	DDR_LCD |= (1 << LCD_SCE);
    6978:	3d 9a       	sbi	0x07, 5	; 7
	DDR_LCD |= (1 << LCD_RST);
    697a:	3a 9a       	sbi	0x07, 2	; 7
	DDR_LCD |= (1 << LCD_DC);
    697c:	3b 9a       	sbi	0x07, 3	; 7
    697e:	8f e3       	ldi	r24, 0x3F	; 63
    6980:	9c e9       	ldi	r25, 0x9C	; 156
    6982:	01 97       	sbiw	r24, 0x01	; 1
    6984:	f1 f7       	brne	.-4      	; 0x6982 <N5110_init+0xe>
    6986:	00 c0       	rjmp	.+0      	; 0x6988 <N5110_init+0x14>
    6988:	00 00       	nop
	
 	_delay_ms(10);
 	N5110_Reset();					/* reset the display */
    698a:	e8 df       	rcall	.-48     	; 0x695c <N5110_Reset>
 	N5110_Cmnd(0x21);				/* command set in addition mode */
    698c:	81 e2       	ldi	r24, 0x21	; 33
    698e:	a1 df       	rcall	.-190    	; 0x68d2 <N5110_Cmnd>
	N5110_Cmnd(0xC2);				/* set the voltage by sending C0 means VOP = 5V */
    6990:	82 ec       	ldi	r24, 0xC2	; 194
    6992:	9f df       	rcall	.-194    	; 0x68d2 <N5110_Cmnd>
	N5110_Cmnd(0x06);				/* set the temp. coefficient to 3 */
    6994:	86 e0       	ldi	r24, 0x06	; 6
    6996:	9d df       	rcall	.-198    	; 0x68d2 <N5110_Cmnd>
	N5110_Cmnd(0x13);				/* set value of Voltage Bias System */
    6998:	83 e1       	ldi	r24, 0x13	; 19
    699a:	9b df       	rcall	.-202    	; 0x68d2 <N5110_Cmnd>
	N5110_Cmnd(0x20);				/* command set in basic mode */
    699c:	80 e2       	ldi	r24, 0x20	; 32
    699e:	99 df       	rcall	.-206    	; 0x68d2 <N5110_Cmnd>
	
	/* LCD in normal mode */
	N5110_Cmnd(0x09);
    69a0:	89 e0       	ldi	r24, 0x09	; 9
    69a2:	97 df       	rcall	.-210    	; 0x68d2 <N5110_Cmnd>
    69a4:	80 e8       	ldi	r24, 0x80	; 128

	/* Clear LCD RAM */
 	N5110_Cmnd(0x80);
    69a6:	95 df       	rcall	.-214    	; 0x68d2 <N5110_Cmnd>
    69a8:	80 e4       	ldi	r24, 0x40	; 64
	N5110_Cmnd(0x40);
    69aa:	93 df       	rcall	.-218    	; 0x68d2 <N5110_Cmnd>
    69ac:	c8 ef       	ldi	r28, 0xF8	; 248
    69ae:	d1 e0       	ldi	r29, 0x01	; 1
	for (int i = 0; i < 504; i++)
		N5110_Cmnd(0x00);
    69b0:	80 e0       	ldi	r24, 0x00	; 0
    69b2:	8f df       	rcall	.-226    	; 0x68d2 <N5110_Cmnd>
    69b4:	21 97       	sbiw	r28, 0x01	; 1
    69b6:	e1 f7       	brne	.-8      	; 0x69b0 <N5110_init+0x3c>
	N5110_Cmnd(0x09);

	/* Clear LCD RAM */
 	N5110_Cmnd(0x80);
	N5110_Cmnd(0x40);
	for (int i = 0; i < 504; i++)
    69b8:	88 e0       	ldi	r24, 0x08	; 8
		N5110_Cmnd(0x00);

	/* Activate LCD */
	N5110_Cmnd(0x08);
    69ba:	8b df       	rcall	.-234    	; 0x68d2 <N5110_Cmnd>
    69bc:	8c e0       	ldi	r24, 0x0C	; 12
    69be:	89 df       	rcall	.-238    	; 0x68d2 <N5110_Cmnd>
 	N5110_Cmnd(0x0C);				/* display result in normal mode */
    69c0:	df 91       	pop	r29
    69c2:	cf 91       	pop	r28
    69c4:	08 95       	ret

000069c6 <lcd_setXY>:
}
    69c6:	cf 93       	push	r28
    69c8:	c6 2f       	mov	r28, r22
    69ca:	83 df       	rcall	.-250    	; 0x68d2 <N5110_Cmnd>

void lcd_setXY(char x, char y)		/* set the column and row */
{
	N5110_Cmnd(x);
	N5110_Cmnd(y);
    69cc:	8c 2f       	mov	r24, r28
    69ce:	81 df       	rcall	.-254    	; 0x68d2 <N5110_Cmnd>
}
    69d0:	cf 91       	pop	r28
    69d2:	08 95       	ret

000069d4 <N5110_clear>:

void N5110_clear()					/* clear the Display */
{
    69d4:	cf 93       	push	r28
    69d6:	df 93       	push	r29
	PORT_LCD &= ~(1<<LCD_SCE);
    69d8:	45 98       	cbi	0x08, 5	; 8
	PORT_LCD |= (1<<LCD_DC);
    69da:	43 9a       	sbi	0x08, 3	; 8
    69dc:	c8 ef       	ldi	r28, 0xF8	; 248
    69de:	d1 e0       	ldi	r29, 0x01	; 1
	for (int k=0; k<=503; k++)
	{
		spi_rwSPI(0x00);
    69e0:	80 e0       	ldi	r24, 0x00	; 0
    69e2:	e6 d4       	rcall	.+2508   	; 0x73b0 <spi_rwSPI>
    69e4:	21 97       	sbiw	r28, 0x01	; 1

void N5110_clear()					/* clear the Display */
{
	PORT_LCD &= ~(1<<LCD_SCE);
	PORT_LCD |= (1<<LCD_DC);
	for (int k=0; k<=503; k++)
    69e6:	e1 f7       	brne	.-8      	; 0x69e0 <N5110_clear+0xc>
	{
		spi_rwSPI(0x00);
	}
	PORT_LCD &= ~(1<<LCD_DC);
    69e8:	43 98       	cbi	0x08, 3	; 8
	PORT_LCD |= (1<<LCD_SCE);
    69ea:	45 9a       	sbi	0x08, 5	; 8
}
    69ec:	df 91       	pop	r29
    69ee:	cf 91       	pop	r28
    69f0:	08 95       	ret

000069f2 <N5110_image>:

void N5110_image(const unsigned char *image_data, int8_t inverted)		/* clear the Display */
{
    69f2:	0f 93       	push	r16
    69f4:	1f 93       	push	r17
    69f6:	cf 93       	push	r28
    69f8:	df 93       	push	r29
	PORT_LCD &= ~(1<<LCD_SCE);
    69fa:	45 98       	cbi	0x08, 5	; 8
	PORT_LCD |= (1<<LCD_DC);
    69fc:	43 9a       	sbi	0x08, 3	; 8
	if(inverted == 1)
    69fe:	61 30       	cpi	r22, 0x01	; 1
    6a00:	61 f4       	brne	.+24     	; 0x6a1a <N5110_image+0x28>
    6a02:	ec 01       	movw	r28, r24
    6a04:	8c 01       	movw	r16, r24
    6a06:	08 50       	subi	r16, 0x08	; 8
    6a08:	1e 4f       	sbci	r17, 0xFE	; 254
	{
		for (int k=0; k<=503; k++)
		{
			spi_rwSPI(pgm_read_byte(image_data + k));
    6a0a:	fe 01       	movw	r30, r28
    6a0c:	84 91       	lpm	r24, Z
    6a0e:	d0 d4       	rcall	.+2464   	; 0x73b0 <spi_rwSPI>
    6a10:	21 96       	adiw	r28, 0x01	; 1
{
	PORT_LCD &= ~(1<<LCD_SCE);
	PORT_LCD |= (1<<LCD_DC);
	if(inverted == 1)
	{
		for (int k=0; k<=503; k++)
    6a12:	0c 17       	cp	r16, r28
    6a14:	1d 07       	cpc	r17, r29
    6a16:	c9 f7       	brne	.-14     	; 0x6a0a <N5110_image+0x18>
    6a18:	09 c0       	rjmp	.+18     	; 0x6a2c <N5110_image+0x3a>
    6a1a:	ec 01       	movw	r28, r24
    6a1c:	8c 01       	movw	r16, r24
    6a1e:	08 50       	subi	r16, 0x08	; 8
    6a20:	1e 4f       	sbci	r17, 0xFE	; 254
	}
	else
	{
		for (int k=0; k<=503; k++)
		{
			spi_rwSPI(image_data[k]);
    6a22:	89 91       	ld	r24, Y+
    6a24:	c5 d4       	rcall	.+2442   	; 0x73b0 <spi_rwSPI>
			spi_rwSPI(pgm_read_byte(image_data + k));
		}
	}
	else
	{
		for (int k=0; k<=503; k++)
    6a26:	c0 17       	cp	r28, r16
    6a28:	d1 07       	cpc	r29, r17
    6a2a:	d9 f7       	brne	.-10     	; 0x6a22 <N5110_image+0x30>
		{
			spi_rwSPI(image_data[k]);
		}
	}
	
	PORT_LCD &= ~(1<<LCD_DC);
    6a2c:	43 98       	cbi	0x08, 3	; 8
	PORT_LCD |= (1<<LCD_SCE);
    6a2e:	45 9a       	sbi	0x08, 5	; 8
}
    6a30:	df 91       	pop	r29
    6a32:	cf 91       	pop	r28
    6a34:	1f 91       	pop	r17
    6a36:	0f 91       	pop	r16
    6a38:	08 95       	ret

00006a3a <printPage>:

void printPage(int page)
{
    6a3a:	ef 92       	push	r14
    6a3c:	ff 92       	push	r15
    6a3e:	0f 93       	push	r16
    6a40:	1f 93       	push	r17
    6a42:	cf 93       	push	r28
    6a44:	df 93       	push	r29
    6a46:	cd b7       	in	r28, 0x3d	; 61
    6a48:	de b7       	in	r29, 0x3e	; 62
    6a4a:	a0 97       	sbiw	r28, 0x20	; 32
    6a4c:	0f b6       	in	r0, 0x3f	; 63
    6a4e:	f8 94       	cli
    6a50:	de bf       	out	0x3e, r29	; 62
    6a52:	0f be       	out	0x3f, r0	; 63
    6a54:	cd bf       	out	0x3d, r28	; 61
    6a56:	8c 01       	movw	r16, r24
	char charMyIP[16], charGWIP[16];
	N5110_clear();
    6a58:	bd df       	rcall	.-134    	; 0x69d4 <N5110_clear>
	switch(page)
    6a5a:	02 30       	cpi	r16, 0x02	; 2
    6a5c:	11 05       	cpc	r17, r1
    6a5e:	09 f4       	brne	.+2      	; 0x6a62 <printPage+0x28>
    6a60:	36 c0       	rjmp	.+108    	; 0x6ace <printPage+0x94>
    6a62:	03 30       	cpi	r16, 0x03	; 3
    6a64:	11 05       	cpc	r17, r1
    6a66:	09 f4       	brne	.+2      	; 0x6a6a <printPage+0x30>
    6a68:	4e c0       	rjmp	.+156    	; 0x6b06 <printPage+0xcc>
    6a6a:	01 30       	cpi	r16, 0x01	; 1
    6a6c:	11 05       	cpc	r17, r1
    6a6e:	09 f0       	breq	.+2      	; 0x6a72 <printPage+0x38>
    6a70:	a1 c0       	rjmp	.+322    	; 0x6bb4 <printPage+0x17a>
	{
		case (1):
			lcd_setXY(0x40,0x80);
    6a72:	60 e8       	ldi	r22, 0x80	; 128
    6a74:	80 e4       	ldi	r24, 0x40	; 64
    6a76:	a7 df       	rcall	.-178    	; 0x69c6 <lcd_setXY>
			N5110_Data("Temperature:");
    6a78:	80 ef       	ldi	r24, 0xF0	; 240
    6a7a:	91 e0       	ldi	r25, 0x01	; 1
    6a7c:	30 df       	rcall	.-416    	; 0x68de <N5110_Data>
			lcd_setXY(0x41,0x80);
    6a7e:	60 e8       	ldi	r22, 0x80	; 128
    6a80:	81 e4       	ldi	r24, 0x41	; 65
    6a82:	a1 df       	rcall	.-190    	; 0x69c6 <lcd_setXY>
			N5110_Data(tempChar);
    6a84:	8e e0       	ldi	r24, 0x0E	; 14
    6a86:	9e e1       	ldi	r25, 0x1E	; 30
    6a88:	2a df       	rcall	.-428    	; 0x68de <N5110_Data>
			N5110_Data(" C");
    6a8a:	8d ef       	ldi	r24, 0xFD	; 253
    6a8c:	91 e0       	ldi	r25, 0x01	; 1
    6a8e:	27 df       	rcall	.-434    	; 0x68de <N5110_Data>
			lcd_setXY(0x42,0x80);
    6a90:	60 e8       	ldi	r22, 0x80	; 128
    6a92:	82 e4       	ldi	r24, 0x42	; 66
    6a94:	98 df       	rcall	.-208    	; 0x69c6 <lcd_setXY>
			N5110_Data("Humidity:");
    6a96:	80 e0       	ldi	r24, 0x00	; 0
    6a98:	92 e0       	ldi	r25, 0x02	; 2
    6a9a:	21 df       	rcall	.-446    	; 0x68de <N5110_Data>
			lcd_setXY(0x43,0x80);
    6a9c:	60 e8       	ldi	r22, 0x80	; 128
    6a9e:	83 e4       	ldi	r24, 0x43	; 67
    6aa0:	92 df       	rcall	.-220    	; 0x69c6 <lcd_setXY>
			N5110_Data(humidChar);
    6aa2:	82 e0       	ldi	r24, 0x02	; 2
    6aa4:	9e e1       	ldi	r25, 0x1E	; 30
    6aa6:	1b df       	rcall	.-458    	; 0x68de <N5110_Data>
			N5110_Data(" %");
    6aa8:	8a e0       	ldi	r24, 0x0A	; 10
    6aaa:	92 e0       	ldi	r25, 0x02	; 2
    6aac:	18 df       	rcall	.-464    	; 0x68de <N5110_Data>
			lcd_setXY(0x44,0x80);
    6aae:	60 e8       	ldi	r22, 0x80	; 128
    6ab0:	84 e4       	ldi	r24, 0x44	; 68
    6ab2:	89 df       	rcall	.-238    	; 0x69c6 <lcd_setXY>
			N5110_Data("Pressure:");
    6ab4:	8d e0       	ldi	r24, 0x0D	; 13
    6ab6:	92 e0       	ldi	r25, 0x02	; 2
    6ab8:	12 df       	rcall	.-476    	; 0x68de <N5110_Data>
			lcd_setXY(0x45,0x80);
    6aba:	60 e8       	ldi	r22, 0x80	; 128
    6abc:	85 e4       	ldi	r24, 0x45	; 69
    6abe:	83 df       	rcall	.-250    	; 0x69c6 <lcd_setXY>
			N5110_Data(pressChar);
    6ac0:	8a e1       	ldi	r24, 0x1A	; 26
    6ac2:	9e e1       	ldi	r25, 0x1E	; 30
    6ac4:	0c df       	rcall	.-488    	; 0x68de <N5110_Data>
			N5110_Data(" Pa");
    6ac6:	80 ed       	ldi	r24, 0xD0	; 208
    6ac8:	94 e0       	ldi	r25, 0x04	; 4
    6aca:	09 df       	rcall	.-494    	; 0x68de <N5110_Data>
			break;
    6acc:	73 c0       	rjmp	.+230    	; 0x6bb4 <printPage+0x17a>
		case (2):
			lcd_setXY(0x40,0x80);
    6ace:	60 e8       	ldi	r22, 0x80	; 128
    6ad0:	80 e4       	ldi	r24, 0x40	; 64
    6ad2:	79 df       	rcall	.-270    	; 0x69c6 <lcd_setXY>
			N5110_Data("Wind Speed:");
    6ad4:	87 e1       	ldi	r24, 0x17	; 23
    6ad6:	92 e0       	ldi	r25, 0x02	; 2
    6ad8:	02 df       	rcall	.-508    	; 0x68de <N5110_Data>
			lcd_setXY(0x41,0x80);
    6ada:	60 e8       	ldi	r22, 0x80	; 128
    6adc:	81 e4       	ldi	r24, 0x41	; 65
    6ade:	73 df       	rcall	.-282    	; 0x69c6 <lcd_setXY>
			N5110_Data(speedChar);
    6ae0:	8a e4       	ldi	r24, 0x4A	; 74
    6ae2:	9e e1       	ldi	r25, 0x1E	; 30
    6ae4:	fc de       	rcall	.-520    	; 0x68de <N5110_Data>
			N5110_Data(" m/s");
    6ae6:	83 e2       	ldi	r24, 0x23	; 35
    6ae8:	92 e0       	ldi	r25, 0x02	; 2
    6aea:	f9 de       	rcall	.-526    	; 0x68de <N5110_Data>
			lcd_setXY(0x43,0x80);
    6aec:	60 e8       	ldi	r22, 0x80	; 128
    6aee:	83 e4       	ldi	r24, 0x43	; 67
    6af0:	6a df       	rcall	.-300    	; 0x69c6 <lcd_setXY>
			N5110_Data("Wind Angle:");
    6af2:	88 e2       	ldi	r24, 0x28	; 40
    6af4:	92 e0       	ldi	r25, 0x02	; 2
    6af6:	f3 de       	rcall	.-538    	; 0x68de <N5110_Data>
			lcd_setXY(0x44,0x80);
    6af8:	60 e8       	ldi	r22, 0x80	; 128
    6afa:	84 e4       	ldi	r24, 0x44	; 68
    6afc:	64 df       	rcall	.-312    	; 0x69c6 <lcd_setXY>
			N5110_Data(anglChar);
    6afe:	8d ee       	ldi	r24, 0xED	; 237
    6b00:	9d e1       	ldi	r25, 0x1D	; 29
    6b02:	ed de       	rcall	.-550    	; 0x68de <N5110_Data>
			break;
    6b04:	57 c0       	rjmp	.+174    	; 0x6bb4 <printPage+0x17a>
		case (3):
			lcd_setXY(0x40,0x80);
    6b06:	60 e8       	ldi	r22, 0x80	; 128
    6b08:	80 e4       	ldi	r24, 0x40	; 64
    6b0a:	5d df       	rcall	.-326    	; 0x69c6 <lcd_setXY>
    6b0c:	84 e3       	ldi	r24, 0x34	; 52
			N5110_Data("Server IP:");
    6b0e:	92 e0       	ldi	r25, 0x02	; 2
    6b10:	e6 de       	rcall	.-564    	; 0x68de <N5110_Data>
    6b12:	60 e8       	ldi	r22, 0x80	; 128
    6b14:	81 e4       	ldi	r24, 0x41	; 65
			lcd_setXY(0x41,0x80);
    6b16:	57 df       	rcall	.-338    	; 0x69c6 <lcd_setXY>
    6b18:	84 e1       	ldi	r24, 0x14	; 20
    6b1a:	91 e0       	ldi	r25, 0x01	; 1
    6b1c:	e0 de       	rcall	.-576    	; 0x68de <N5110_Data>
			N5110_Data(serverip);
    6b1e:	60 e8       	ldi	r22, 0x80	; 128
    6b20:	82 e4       	ldi	r24, 0x42	; 66
    6b22:	51 df       	rcall	.-350    	; 0x69c6 <lcd_setXY>
    6b24:	8f e3       	ldi	r24, 0x3F	; 63
			lcd_setXY(0x42,0x80);
    6b26:	92 e0       	ldi	r25, 0x02	; 2
    6b28:	da de       	rcall	.-588    	; 0x68de <N5110_Data>
    6b2a:	60 e8       	ldi	r22, 0x80	; 128
    6b2c:	83 e4       	ldi	r24, 0x43	; 67
			N5110_Data("Station IP:");
    6b2e:	4b df       	rcall	.-362    	; 0x69c6 <lcd_setXY>
    6b30:	e4 e2       	ldi	r30, 0x24	; 36
    6b32:	f1 e0       	ldi	r31, 0x01	; 1
			lcd_setXY(0x43,0x80);
    6b34:	83 81       	ldd	r24, Z+3	; 0x03
    6b36:	1f 92       	push	r1
    6b38:	8f 93       	push	r24
			sprintf(charMyIP, "%d.%d.%d.%d", myip[0], myip[1], myip[2], myip[3]);
    6b3a:	82 81       	ldd	r24, Z+2	; 0x02
    6b3c:	1f 92       	push	r1
    6b3e:	8f 93       	push	r24
    6b40:	81 81       	ldd	r24, Z+1	; 0x01
    6b42:	1f 92       	push	r1
    6b44:	8f 93       	push	r24
    6b46:	80 81       	ld	r24, Z
    6b48:	1f 92       	push	r1
    6b4a:	8f 93       	push	r24
    6b4c:	0e e3       	ldi	r16, 0x3E	; 62
    6b4e:	11 e0       	ldi	r17, 0x01	; 1
    6b50:	1f 93       	push	r17
    6b52:	0f 93       	push	r16
    6b54:	ce 01       	movw	r24, r28
    6b56:	01 96       	adiw	r24, 0x01	; 1
    6b58:	7c 01       	movw	r14, r24
    6b5a:	9f 93       	push	r25
    6b5c:	8f 93       	push	r24
    6b5e:	0e 94 06 47 	call	0x8e0c	; 0x8e0c <sprintf>
    6b62:	c7 01       	movw	r24, r14
    6b64:	bc de       	rcall	.-648    	; 0x68de <N5110_Data>
    6b66:	60 e8       	ldi	r22, 0x80	; 128
			N5110_Data(charMyIP);
    6b68:	84 e4       	ldi	r24, 0x44	; 68
    6b6a:	2d df       	rcall	.-422    	; 0x69c6 <lcd_setXY>
    6b6c:	8b e4       	ldi	r24, 0x4B	; 75
			lcd_setXY(0x44,0x80);
    6b6e:	92 e0       	ldi	r25, 0x02	; 2
    6b70:	b6 de       	rcall	.-660    	; 0x68de <N5110_Data>
    6b72:	60 e8       	ldi	r22, 0x80	; 128
			N5110_Data("Gateway IP:");
    6b74:	85 e4       	ldi	r24, 0x45	; 69
    6b76:	27 df       	rcall	.-434    	; 0x69c6 <lcd_setXY>
    6b78:	ee e0       	ldi	r30, 0x0E	; 14
    6b7a:	f1 e0       	ldi	r31, 0x01	; 1
			lcd_setXY(0x45,0x80);
    6b7c:	83 81       	ldd	r24, Z+3	; 0x03
    6b7e:	1f 92       	push	r1
    6b80:	8f 93       	push	r24
    6b82:	82 81       	ldd	r24, Z+2	; 0x02
			sprintf(charGWIP, "%d.%d.%d.%d", gwip[0], gwip[1], gwip[2], gwip[3]);
    6b84:	1f 92       	push	r1
    6b86:	8f 93       	push	r24
    6b88:	81 81       	ldd	r24, Z+1	; 0x01
    6b8a:	1f 92       	push	r1
    6b8c:	8f 93       	push	r24
    6b8e:	80 81       	ld	r24, Z
    6b90:	1f 92       	push	r1
    6b92:	8f 93       	push	r24
    6b94:	1f 93       	push	r17
    6b96:	0f 93       	push	r16
    6b98:	8e 01       	movw	r16, r28
    6b9a:	0f 5e       	subi	r16, 0xEF	; 239
    6b9c:	1f 4f       	sbci	r17, 0xFF	; 255
    6b9e:	1f 93       	push	r17
    6ba0:	0f 93       	push	r16
    6ba2:	0e 94 06 47 	call	0x8e0c	; 0x8e0c <sprintf>
    6ba6:	c8 01       	movw	r24, r16
    6ba8:	9a de       	rcall	.-716    	; 0x68de <N5110_Data>
    6baa:	0f b6       	in	r0, 0x3f	; 63
    6bac:	f8 94       	cli
    6bae:	de bf       	out	0x3e, r29	; 62
    6bb0:	0f be       	out	0x3f, r0	; 63
			N5110_Data(charGWIP);
    6bb2:	cd bf       	out	0x3d, r28	; 61
    6bb4:	45 9a       	sbi	0x08, 5	; 8
    6bb6:	a0 96       	adiw	r28, 0x20	; 32
			break;
    6bb8:	0f b6       	in	r0, 0x3f	; 63
    6bba:	f8 94       	cli
    6bbc:	de bf       	out	0x3e, r29	; 62
    6bbe:	0f be       	out	0x3f, r0	; 63
    6bc0:	cd bf       	out	0x3d, r28	; 61
	}
	PORT_LCD |= (1<<LCD_SCE);
    6bc2:	df 91       	pop	r29
    6bc4:	cf 91       	pop	r28
    6bc6:	1f 91       	pop	r17
    6bc8:	0f 91       	pop	r16
    6bca:	ff 90       	pop	r15
    6bcc:	ef 90       	pop	r14
    6bce:	08 95       	ret

00006bd0 <RTC_SetDateTime>:
    6bd0:	0f 93       	push	r16
    6bd2:	1f 93       	push	r17
    6bd4:	cf 93       	push	r28
    6bd6:	8c 01       	movw	r16, r24
    6bd8:	42 de       	rcall	.-892    	; 0x685e <rtc_I2C_Start>
    6bda:	80 ed       	ldi	r24, 0xD0	; 208
    6bdc:	52 de       	rcall	.-860    	; 0x6882 <i2c_write>
    rtc_I2C_Start();                          // Start I2C communication
	
	//i2c_write(0x00);
	//i2c_write(0x80);
    i2c_write(C_Ds1307WriteMode_U8);      // connect to DS1307 by sending its ID on I2c Bus
    i2c_write(C_Ds1307SecondRegAddress_U8); // Request sec RAM address at 00H
    6bde:	80 e0       	ldi	r24, 0x00	; 0
    6be0:	50 de       	rcall	.-864    	; 0x6882 <i2c_write>
    6be2:	f8 01       	movw	r30, r16
// 	i2c_write(rtc->weekDay);                // Write weekDay on RAM address 03H
// 	i2c_write(rtc->date);                    // Write date on RAM address 04H
// 	i2c_write(rtc->month);                    // Write month on RAM address 05H
// 	i2c_write(rtc->year);

    i2c_write(dec2bcd(rtc->sec));                    // Write sec from RAM address 00H
    6be4:	80 81       	ld	r24, Z
    6be6:	cd ec       	ldi	r28, 0xCD	; 205
    6be8:	8c 9f       	mul	r24, r28
    6bea:	91 2d       	mov	r25, r1
    6bec:	11 24       	eor	r1, r1
    6bee:	96 95       	lsr	r25
    6bf0:	96 95       	lsr	r25
    6bf2:	96 95       	lsr	r25
    6bf4:	39 2f       	mov	r19, r25
    6bf6:	33 0f       	add	r19, r19
    6bf8:	23 2f       	mov	r18, r19
    6bfa:	22 0f       	add	r18, r18
    6bfc:	22 0f       	add	r18, r18
    6bfe:	23 0f       	add	r18, r19
    6c00:	82 1b       	sub	r24, r18
    6c02:	f0 e1       	ldi	r31, 0x10	; 16
    6c04:	9f 9f       	mul	r25, r31
    6c06:	80 0d       	add	r24, r0
    6c08:	11 24       	eor	r1, r1
    6c0a:	3b de       	rcall	.-906    	; 0x6882 <i2c_write>
    6c0c:	f8 01       	movw	r30, r16
    i2c_write(dec2bcd(rtc->min));                    // Write min from RAM address 01H
    6c0e:	81 81       	ldd	r24, Z+1	; 0x01
    6c10:	8c 9f       	mul	r24, r28
    6c12:	91 2d       	mov	r25, r1
    6c14:	11 24       	eor	r1, r1
    6c16:	96 95       	lsr	r25
    6c18:	96 95       	lsr	r25
    6c1a:	96 95       	lsr	r25
    6c1c:	39 2f       	mov	r19, r25
    6c1e:	33 0f       	add	r19, r19
    6c20:	23 2f       	mov	r18, r19
    6c22:	22 0f       	add	r18, r18
    6c24:	22 0f       	add	r18, r18
    6c26:	23 0f       	add	r18, r19
    6c28:	82 1b       	sub	r24, r18
    6c2a:	f0 e1       	ldi	r31, 0x10	; 16
    6c2c:	9f 9f       	mul	r25, r31
    6c2e:	80 0d       	add	r24, r0
    6c30:	11 24       	eor	r1, r1
    6c32:	27 de       	rcall	.-946    	; 0x6882 <i2c_write>
    6c34:	f8 01       	movw	r30, r16
    i2c_write(dec2bcd(rtc->hour));                    // Write hour from RAM address 02H
    6c36:	82 81       	ldd	r24, Z+2	; 0x02
    6c38:	8c 9f       	mul	r24, r28
    6c3a:	91 2d       	mov	r25, r1
    6c3c:	11 24       	eor	r1, r1
    6c3e:	96 95       	lsr	r25
    6c40:	96 95       	lsr	r25
    6c42:	96 95       	lsr	r25
    6c44:	39 2f       	mov	r19, r25
    6c46:	33 0f       	add	r19, r19
    6c48:	23 2f       	mov	r18, r19
    6c4a:	22 0f       	add	r18, r18
    6c4c:	22 0f       	add	r18, r18
    6c4e:	23 0f       	add	r18, r19
    6c50:	82 1b       	sub	r24, r18
    6c52:	f0 e1       	ldi	r31, 0x10	; 16
    6c54:	9f 9f       	mul	r25, r31
    6c56:	80 0d       	add	r24, r0
    6c58:	11 24       	eor	r1, r1
    6c5a:	13 de       	rcall	.-986    	; 0x6882 <i2c_write>
    6c5c:	f8 01       	movw	r30, r16
    i2c_write(dec2bcd(rtc->weekDay));                // Write weekDay on RAM address 03H
    6c5e:	83 81       	ldd	r24, Z+3	; 0x03
    6c60:	8c 9f       	mul	r24, r28
    6c62:	91 2d       	mov	r25, r1
    6c64:	11 24       	eor	r1, r1
    6c66:	96 95       	lsr	r25
    6c68:	96 95       	lsr	r25
    6c6a:	96 95       	lsr	r25
    6c6c:	39 2f       	mov	r19, r25
    6c6e:	33 0f       	add	r19, r19
    6c70:	23 2f       	mov	r18, r19
    6c72:	22 0f       	add	r18, r18
    6c74:	22 0f       	add	r18, r18
    6c76:	23 0f       	add	r18, r19
    6c78:	82 1b       	sub	r24, r18
    6c7a:	f0 e1       	ldi	r31, 0x10	; 16
    6c7c:	9f 9f       	mul	r25, r31
    6c7e:	80 0d       	add	r24, r0
    6c80:	11 24       	eor	r1, r1
    6c82:	ff dd       	rcall	.-1026   	; 0x6882 <i2c_write>
    6c84:	f8 01       	movw	r30, r16
    i2c_write(dec2bcd(rtc->date));                    // Write date on RAM address 04H
    6c86:	84 81       	ldd	r24, Z+4	; 0x04
    6c88:	8c 9f       	mul	r24, r28
    6c8a:	91 2d       	mov	r25, r1
    6c8c:	11 24       	eor	r1, r1
    6c8e:	96 95       	lsr	r25
    6c90:	96 95       	lsr	r25
    6c92:	96 95       	lsr	r25
    6c94:	39 2f       	mov	r19, r25
    6c96:	33 0f       	add	r19, r19
    6c98:	23 2f       	mov	r18, r19
    6c9a:	22 0f       	add	r18, r18
    6c9c:	22 0f       	add	r18, r18
    6c9e:	23 0f       	add	r18, r19
    6ca0:	82 1b       	sub	r24, r18
    6ca2:	f0 e1       	ldi	r31, 0x10	; 16
    6ca4:	9f 9f       	mul	r25, r31
    6ca6:	80 0d       	add	r24, r0
    6ca8:	11 24       	eor	r1, r1
    6caa:	eb dd       	rcall	.-1066   	; 0x6882 <i2c_write>
    6cac:	f8 01       	movw	r30, r16
    i2c_write(dec2bcd(rtc->month));                    // Write month on RAM address 05H
    6cae:	85 81       	ldd	r24, Z+5	; 0x05
    6cb0:	8c 9f       	mul	r24, r28
    6cb2:	91 2d       	mov	r25, r1
    6cb4:	11 24       	eor	r1, r1
    6cb6:	96 95       	lsr	r25
    6cb8:	96 95       	lsr	r25
    6cba:	96 95       	lsr	r25
    6cbc:	39 2f       	mov	r19, r25
    6cbe:	33 0f       	add	r19, r19
    6cc0:	23 2f       	mov	r18, r19
    6cc2:	22 0f       	add	r18, r18
    6cc4:	22 0f       	add	r18, r18
    6cc6:	23 0f       	add	r18, r19
    6cc8:	82 1b       	sub	r24, r18
    6cca:	f0 e1       	ldi	r31, 0x10	; 16
    6ccc:	9f 9f       	mul	r25, r31
    6cce:	80 0d       	add	r24, r0
    6cd0:	11 24       	eor	r1, r1
    6cd2:	d7 dd       	rcall	.-1106   	; 0x6882 <i2c_write>
    6cd4:	f8 01       	movw	r30, r16
    i2c_write(dec2bcd(rtc->year));                    // Write year on RAM address 06h*/
    6cd6:	86 81       	ldd	r24, Z+6	; 0x06
    6cd8:	8c 9f       	mul	r24, r28
    6cda:	c1 2d       	mov	r28, r1
    6cdc:	11 24       	eor	r1, r1
    6cde:	c6 95       	lsr	r28
    6ce0:	c6 95       	lsr	r28
    6ce2:	c6 95       	lsr	r28
    6ce4:	2c 2f       	mov	r18, r28
    6ce6:	22 0f       	add	r18, r18
    6ce8:	92 2f       	mov	r25, r18
    6cea:	99 0f       	add	r25, r25
    6cec:	99 0f       	add	r25, r25
    6cee:	92 0f       	add	r25, r18
    6cf0:	89 1b       	sub	r24, r25
    6cf2:	f0 e1       	ldi	r31, 0x10	; 16
    6cf4:	cf 9f       	mul	r28, r31
    6cf6:	80 0d       	add	r24, r0
    6cf8:	11 24       	eor	r1, r1
    6cfa:	c3 dd       	rcall	.-1146   	; 0x6882 <i2c_write>

    i2c_stop();                              // Stop I2C communication after Setting the Date
    6cfc:	b9 dd       	rcall	.-1166   	; 0x6870 <i2c_stop>
    6cfe:	cf 91       	pop	r28
}
    6d00:	1f 91       	pop	r17
    6d02:	0f 91       	pop	r16
    6d04:	08 95       	ret

00006d06 <RTC_GetDateTime>:
    6d06:	cf 93       	push	r28
    Note: The date and time read from Ds1307 will be of BCD format, 
          like 0x12,0x39,0x26 for 12hr,39min and 26sec.    
               0x15,0x08,0x47 for 15th day,8th month and 47th year.              
***************************************************************************************************/
void RTC_GetDateTime(rtc_t *rtc)
{
    6d08:	df 93       	push	r29
    6d0a:	ec 01       	movw	r28, r24
    rtc_I2C_Start();                            // Start I2C communication
    6d0c:	a8 dd       	rcall	.-1200   	; 0x685e <rtc_I2C_Start>

    i2c_write(C_Ds1307WriteMode_U8);        // connect to DS1307 by sending its ID on I2c Bus
    6d0e:	80 ed       	ldi	r24, 0xD0	; 208
    6d10:	b8 dd       	rcall	.-1168   	; 0x6882 <i2c_write>
    i2c_write(C_Ds1307SecondRegAddress_U8); // Request Sec RAM address at 00H
    6d12:	80 e0       	ldi	r24, 0x00	; 0
    6d14:	b6 dd       	rcall	.-1172   	; 0x6882 <i2c_write>

    i2c_stop();                                // Stop I2C communication after selecting Sec Register
    6d16:	ac dd       	rcall	.-1192   	; 0x6870 <i2c_stop>
    6d18:	2f ef       	ldi	r18, 0xFF	; 255
    6d1a:	81 ee       	ldi	r24, 0xE1	; 225
    6d1c:	94 e0       	ldi	r25, 0x04	; 4
    6d1e:	21 50       	subi	r18, 0x01	; 1
    6d20:	80 40       	sbci	r24, 0x00	; 0
    6d22:	90 40       	sbci	r25, 0x00	; 0
    6d24:	e1 f7       	brne	.-8      	; 0x6d1e <RTC_GetDateTime+0x18>
    6d26:	00 c0       	rjmp	.+0      	; 0x6d28 <RTC_GetDateTime+0x22>
	_delay_ms(100);
    rtc_I2C_Start();                            // Start I2C communication
    6d28:	00 00       	nop
    6d2a:	99 dd       	rcall	.-1230   	; 0x685e <rtc_I2C_Start>
    i2c_write(C_Ds1307ReadMode_U8);            // connect to DS1307(Read mode) by sending its ID
    6d2c:	81 ed       	ldi	r24, 0xD1	; 209
    6d2e:	a9 dd       	rcall	.-1198   	; 0x6882 <i2c_write>
    6d30:	ba dd       	rcall	.-1164   	; 0x68a6 <i2c_readAck>

    rtc->sec = bcd2dec(i2c_readAck());                // read second and return Positive ACK
    6d32:	98 2f       	mov	r25, r24
    6d34:	92 95       	swap	r25
    6d36:	9f 70       	andi	r25, 0x0F	; 15
    6d38:	99 0f       	add	r25, r25
    6d3a:	29 2f       	mov	r18, r25
    6d3c:	22 0f       	add	r18, r18
    6d3e:	22 0f       	add	r18, r18
    6d40:	92 0f       	add	r25, r18
    6d42:	8f 70       	andi	r24, 0x0F	; 15
    6d44:	89 0f       	add	r24, r25
    6d46:	88 83       	st	Y, r24
    6d48:	ae dd       	rcall	.-1188   	; 0x68a6 <i2c_readAck>
    rtc->min = bcd2dec(i2c_readAck());                   // read minute and return Positive ACK
    6d4a:	98 2f       	mov	r25, r24
    6d4c:	92 95       	swap	r25
    6d4e:	9f 70       	andi	r25, 0x0F	; 15
    6d50:	99 0f       	add	r25, r25
    6d52:	29 2f       	mov	r18, r25
    6d54:	22 0f       	add	r18, r18
    6d56:	22 0f       	add	r18, r18
    6d58:	92 0f       	add	r25, r18
    6d5a:	8f 70       	andi	r24, 0x0F	; 15
    6d5c:	89 0f       	add	r24, r25
    6d5e:	89 83       	std	Y+1, r24	; 0x01
    6d60:	a2 dd       	rcall	.-1212   	; 0x68a6 <i2c_readAck>
    rtc->hour= bcd2dec(i2c_readAck());                  // read hour and return Negative/No ACK
    6d62:	98 2f       	mov	r25, r24
    6d64:	92 95       	swap	r25
    6d66:	9f 70       	andi	r25, 0x0F	; 15
    6d68:	99 0f       	add	r25, r25
    6d6a:	29 2f       	mov	r18, r25
    6d6c:	22 0f       	add	r18, r18
    6d6e:	22 0f       	add	r18, r18
    6d70:	92 0f       	add	r25, r18
    6d72:	8f 70       	andi	r24, 0x0F	; 15
    6d74:	89 0f       	add	r24, r25
    6d76:	8a 83       	std	Y+2, r24	; 0x02
    6d78:	96 dd       	rcall	.-1236   	; 0x68a6 <i2c_readAck>
    rtc->weekDay = bcd2dec(i2c_readAck());              // read weekDay and return Positive ACK
    6d7a:	98 2f       	mov	r25, r24
    6d7c:	92 95       	swap	r25
    6d7e:	9f 70       	andi	r25, 0x0F	; 15
    6d80:	99 0f       	add	r25, r25
    6d82:	29 2f       	mov	r18, r25
    6d84:	22 0f       	add	r18, r18
    6d86:	22 0f       	add	r18, r18
    6d88:	92 0f       	add	r25, r18
    6d8a:	8f 70       	andi	r24, 0x0F	; 15
    6d8c:	89 0f       	add	r24, r25
    6d8e:	8b 83       	std	Y+3, r24	; 0x03
    6d90:	8a dd       	rcall	.-1260   	; 0x68a6 <i2c_readAck>
    rtc->date= bcd2dec(i2c_readAck());                // read Date and return Positive ACK
    6d92:	98 2f       	mov	r25, r24
    6d94:	92 95       	swap	r25
    6d96:	9f 70       	andi	r25, 0x0F	; 15
    6d98:	99 0f       	add	r25, r25
    6d9a:	29 2f       	mov	r18, r25
    6d9c:	22 0f       	add	r18, r18
    6d9e:	22 0f       	add	r18, r18
    6da0:	92 0f       	add	r25, r18
    6da2:	8f 70       	andi	r24, 0x0F	; 15
    6da4:	89 0f       	add	r24, r25
    6da6:	8c 83       	std	Y+4, r24	; 0x04
    6da8:	7e dd       	rcall	.-1284   	; 0x68a6 <i2c_readAck>
    rtc->month=bcd2dec(i2c_readAck());               // read Month and return Positive ACK
    6daa:	98 2f       	mov	r25, r24
    6dac:	92 95       	swap	r25
    6dae:	9f 70       	andi	r25, 0x0F	; 15
    6db0:	99 0f       	add	r25, r25
    6db2:	29 2f       	mov	r18, r25
    6db4:	22 0f       	add	r18, r18
    6db6:	22 0f       	add	r18, r18
    6db8:	92 0f       	add	r25, r18
    6dba:	8f 70       	andi	r24, 0x0F	; 15
    6dbc:	89 0f       	add	r24, r25
    6dbe:	8d 83       	std	Y+5, r24	; 0x05
    6dc0:	7d dd       	rcall	.-1286   	; 0x68bc <i2c_readNak>
    rtc->year =bcd2dec(i2c_readNak());                // read Year and return Negative/No ACK
    6dc2:	98 2f       	mov	r25, r24
    6dc4:	92 95       	swap	r25
    6dc6:	9f 70       	andi	r25, 0x0F	; 15
    6dc8:	99 0f       	add	r25, r25
    6dca:	29 2f       	mov	r18, r25
    6dcc:	22 0f       	add	r18, r18
    6dce:	22 0f       	add	r18, r18
    6dd0:	92 0f       	add	r25, r18
    6dd2:	8f 70       	andi	r24, 0x0F	; 15
    6dd4:	89 0f       	add	r24, r25
    6dd6:	8e 83       	std	Y+6, r24	; 0x06
    6dd8:	4b dd       	rcall	.-1386   	; 0x6870 <i2c_stop>

    i2c_stop();                             // Stop I2C communication after reading the Date
    6dda:	df 91       	pop	r29
    6ddc:	cf 91       	pop	r28
}
    6dde:	08 95       	ret

00006de0 <resetEnemy>:
		return;
	}
}

static void resetEnemy()
{
    6de0:	e0 e9       	ldi	r30, 0x90	; 144
    6de2:	fb e1       	ldi	r31, 0x1B	; 27
    6de4:	2a eb       	ldi	r18, 0xBA	; 186
    6de6:	3b e1       	ldi	r19, 0x1B	; 27
    6de8:	09 c0       	rjmp	.+18     	; 0x6dfc <resetEnemy+0x1c>
	for(int r=0; r < 3; r++)
	{
		for(int i=0; i < 7; i++)
		{
			enemy[(r*7)+i] = 0;
    6dea:	11 92       	st	Z+, r1
    6dec:	11 92       	st	Z+, r1

static void resetEnemy()
{
	for(int r=0; r < 3; r++)
	{
		for(int i=0; i < 7; i++)
    6dee:	e8 17       	cp	r30, r24
    6df0:	f9 07       	cpc	r31, r25
    6df2:	d9 f7       	brne	.-10     	; 0x6dea <resetEnemy+0xa>
    6df4:	fc 01       	movw	r30, r24
	}
}

static void resetEnemy()
{
	for(int r=0; r < 3; r++)
    6df6:	28 17       	cp	r18, r24
    6df8:	39 07       	cpc	r19, r25
    6dfa:	19 f0       	breq	.+6      	; 0x6e02 <resetEnemy+0x22>
    6dfc:	cf 01       	movw	r24, r30
    6dfe:	0e 96       	adiw	r24, 0x0e	; 14
    6e00:	f4 cf       	rjmp	.-24     	; 0x6dea <resetEnemy+0xa>
		for(int i=0; i < 7; i++)
		{
			enemy[(r*7)+i] = 0;
		}
	}
	enemyPos = 0;
    6e02:	10 92 4d 19 	sts	0x194D, r1	; 0x80194d <enemyPos>
	sec = 0;
    6e06:	10 92 a7 05 	sts	0x05A7, r1	; 0x8005a7 <sec>
    6e0a:	08 95       	ret

00006e0c <gameover>:
}

static void gameover()
{
    6e0c:	cf 93       	push	r28
    6e0e:	df 93       	push	r29
    6e10:	cd b7       	in	r28, 0x3d	; 61
    6e12:	de b7       	in	r29, 0x3e	; 62
    6e14:	2a 97       	sbiw	r28, 0x0a	; 10
    6e16:	0f b6       	in	r0, 0x3f	; 63
    6e18:	f8 94       	cli
    6e1a:	de bf       	out	0x3e, r29	; 62
    6e1c:	0f be       	out	0x3f, r0	; 63
    6e1e:	cd bf       	out	0x3d, r28	; 61
	N5110_clear();
    6e20:	d9 dd       	rcall	.-1102   	; 0x69d4 <N5110_clear>
	if(score > highscore || (highscore < 1 && highscore > 254))
    6e22:	80 91 47 19 	lds	r24, 0x1947	; 0x801947 <score>
    6e26:	90 91 48 19 	lds	r25, 0x1948	; 0x801948 <score+0x1>
    6e2a:	20 91 45 19 	lds	r18, 0x1945	; 0x801945 <highscore>
    6e2e:	30 91 46 19 	lds	r19, 0x1946	; 0x801946 <highscore+0x1>
    6e32:	28 17       	cp	r18, r24
    6e34:	39 07       	cpc	r19, r25
    6e36:	20 f4       	brcc	.+8      	; 0x6e40 <gameover+0x34>
	{
		highscore = score;
    6e38:	90 93 46 19 	sts	0x1946, r25	; 0x801946 <highscore+0x1>
    6e3c:	80 93 45 19 	sts	0x1945, r24	; 0x801945 <highscore>
	}
	eeprom_write_word((uint16_t*)0x50, highscore);
    6e40:	60 91 45 19 	lds	r22, 0x1945	; 0x801945 <highscore>
    6e44:	70 91 46 19 	lds	r23, 0x1946	; 0x801946 <highscore+0x1>
    6e48:	80 e5       	ldi	r24, 0x50	; 80
    6e4a:	90 e0       	ldi	r25, 0x00	; 0
    6e4c:	0e 94 8b 4f 	call	0x9f16	; 0x9f16 <eeprom_write_word>
	lcd_setXY(0x41,0x90);
    6e50:	60 e9       	ldi	r22, 0x90	; 144
    6e52:	81 e4       	ldi	r24, 0x41	; 65
    6e54:	b8 dd       	rcall	.-1168   	; 0x69c6 <lcd_setXY>
	N5110_Data("GAME OVER");
    6e56:	87 e3       	ldi	r24, 0x37	; 55
    6e58:	94 e0       	ldi	r25, 0x04	; 4
    6e5a:	41 dd       	rcall	.-1406   	; 0x68de <N5110_Data>
	lcd_setXY(0x43,0x89);
    6e5c:	69 e8       	ldi	r22, 0x89	; 137
    6e5e:	83 e4       	ldi	r24, 0x43	; 67
    6e60:	b2 dd       	rcall	.-1180   	; 0x69c6 <lcd_setXY>
	N5110_Data("High Score");
    6e62:	81 e4       	ldi	r24, 0x41	; 65
    6e64:	94 e0       	ldi	r25, 0x04	; 4
    6e66:	3b dd       	rcall	.-1418   	; 0x68de <N5110_Data>
	lcd_setXY(0x44,0xA1);
    6e68:	61 ea       	ldi	r22, 0xA1	; 161
    6e6a:	84 e4       	ldi	r24, 0x44	; 68
    6e6c:	ac dd       	rcall	.-1192   	; 0x69c6 <lcd_setXY>
    6e6e:	4a e0       	ldi	r20, 0x0A	; 10
    6e70:	be 01       	movw	r22, r28
    6e72:	6f 5f       	subi	r22, 0xFF	; 255
    6e74:	7f 4f       	sbci	r23, 0xFF	; 255
    6e76:	80 91 45 19 	lds	r24, 0x1945	; 0x801945 <highscore>
    6e7a:	90 91 46 19 	lds	r25, 0x1946	; 0x801946 <highscore+0x1>
    6e7e:	0e 94 c5 45 	call	0x8b8a	; 0x8b8a <__itoa_ncheck>
	char scoreChar[10];
	itoa(highscore,scoreChar,10);
	N5110_Data(scoreChar);
    6e82:	ce 01       	movw	r24, r28
    6e84:	01 96       	adiw	r24, 0x01	; 1
    6e86:	2b dd       	rcall	.-1450   	; 0x68de <N5110_Data>
    6e88:	2f ef       	ldi	r18, 0xFF	; 255
    6e8a:	83 e2       	ldi	r24, 0x23	; 35
    6e8c:	94 ef       	ldi	r25, 0xF4	; 244
    6e8e:	21 50       	subi	r18, 0x01	; 1
    6e90:	80 40       	sbci	r24, 0x00	; 0
    6e92:	90 40       	sbci	r25, 0x00	; 0
    6e94:	e1 f7       	brne	.-8      	; 0x6e8e <gameover+0x82>
    6e96:	00 c0       	rjmp	.+0      	; 0x6e98 <gameover+0x8c>
    6e98:	00 00       	nop
	
	_delay_ms(5000);
	score = 0;
    6e9a:	10 92 48 19 	sts	0x1948, r1	; 0x801948 <score+0x1>
    6e9e:	10 92 47 19 	sts	0x1947, r1	; 0x801947 <score>
	resetEnemy();
    6ea2:	9e df       	rcall	.-196    	; 0x6de0 <resetEnemy>
    6ea4:	2a 96       	adiw	r28, 0x0a	; 10
}
    6ea6:	0f b6       	in	r0, 0x3f	; 63
    6ea8:	f8 94       	cli
    6eaa:	de bf       	out	0x3e, r29	; 62
    6eac:	0f be       	out	0x3f, r0	; 63
    6eae:	cd bf       	out	0x3d, r28	; 61
    6eb0:	df 91       	pop	r29
    6eb2:	cf 91       	pop	r28
    6eb4:	08 95       	ret

00006eb6 <__vector_8>:
    6eb6:	1f 92       	push	r1
	}
	count++;
}

static volatile uint8_t watchdog_counter=0;
ISR(WDT_vect) {
    6eb8:	0f 92       	push	r0
    6eba:	0f b6       	in	r0, 0x3f	; 63
    6ebc:	0f 92       	push	r0
    6ebe:	11 24       	eor	r1, r1
    6ec0:	8f 93       	push	r24
	//WDTCSR |= (1<<WDIE);
	//wdt_reset();
	watchdog_counter++;
    6ec2:	80 91 42 19 	lds	r24, 0x1942	; 0x801942 <watchdog_counter>
    6ec6:	8f 5f       	subi	r24, 0xFF	; 255
    6ec8:	80 93 42 19 	sts	0x1942, r24	; 0x801942 <watchdog_counter>
}
    6ecc:	8f 91       	pop	r24
    6ece:	0f 90       	pop	r0
    6ed0:	0f be       	out	0x3f, r0	; 63
    6ed2:	0f 90       	pop	r0
    6ed4:	1f 90       	pop	r1
    6ed6:	18 95       	reti

00006ed8 <prevent_wdt_reset>:

void prevent_wdt_reset() {
	if(MCUSR & (1<<WDRF)){            // If a reset was caused by the Watchdog Timer...
    6ed8:	04 b6       	in	r0, 0x34	; 52
    6eda:	03 fe       	sbrs	r0, 3
    6edc:	09 c0       	rjmp	.+18     	; 0x6ef0 <prevent_wdt_reset+0x18>
		MCUSR &= ~(1<<WDRF);                 // Clear the WDT reset flag
    6ede:	84 b7       	in	r24, 0x34	; 52
    6ee0:	87 7f       	andi	r24, 0xF7	; 247
    6ee2:	84 bf       	out	0x34, r24	; 52
		WDTCSR |= (1<<WDCE) | (1<<WDE);   // Enable the WD Change Bit
    6ee4:	e0 e6       	ldi	r30, 0x60	; 96
    6ee6:	f0 e0       	ldi	r31, 0x00	; 0
    6ee8:	80 81       	ld	r24, Z
    6eea:	88 61       	ori	r24, 0x18	; 24
    6eec:	80 83       	st	Z, r24
		WDTCSR = 0x00;                      // Disable the WDT
    6eee:	10 82       	st	Z, r1
    6ef0:	08 95       	ret

00006ef2 <SpaceStart>:
	}
}

void SpaceStart()
{
    6ef2:	cf 93       	push	r28
    6ef4:	df 93       	push	r29
    6ef6:	cd b7       	in	r28, 0x3d	; 61
    6ef8:	de b7       	in	r29, 0x3e	; 62
    6efa:	2a 97       	sbiw	r28, 0x0a	; 10
    6efc:	0f b6       	in	r0, 0x3f	; 63
    6efe:	f8 94       	cli
    6f00:	de bf       	out	0x3e, r29	; 62
    6f02:	0f be       	out	0x3f, r0	; 63
    6f04:	cd bf       	out	0x3d, r28	; 61
	highscore = eeprom_read_word((uint16_t*)0x50);
    6f06:	80 e5       	ldi	r24, 0x50	; 80
    6f08:	90 e0       	ldi	r25, 0x00	; 0
    6f0a:	0e 94 6a 4f 	call	0x9ed4	; 0x9ed4 <eeprom_read_word>
    6f0e:	90 93 46 19 	sts	0x1946, r25	; 0x801946 <highscore+0x1>
    6f12:	80 93 45 19 	sts	0x1945, r24	; 0x801945 <highscore>
	if(highscore <= 0 || highscore > 254)
    6f16:	01 97       	sbiw	r24, 0x01	; 1
    6f18:	8e 3f       	cpi	r24, 0xFE	; 254
    6f1a:	91 05       	cpc	r25, r1
    6f1c:	20 f0       	brcs	.+8      	; 0x6f26 <SpaceStart+0x34>
		highscore = 0;
    6f1e:	10 92 46 19 	sts	0x1946, r1	; 0x801946 <highscore+0x1>
    6f22:	10 92 45 19 	sts	0x1945, r1	; 0x801945 <highscore>
	
	init_cnt2();
    6f26:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <init_cnt2>
	puts_P(PSTR("Space Invaders activated!"));
    6f2a:	8a e2       	ldi	r24, 0x2A	; 42
    6f2c:	92 e1       	ldi	r25, 0x12	; 18
    6f2e:	0e 94 99 46 	call	0x8d32	; 0x8d32 <puts_P>
	N5110_image(SplashScreen, 1);
    6f32:	61 e0       	ldi	r22, 0x01	; 1
    6f34:	84 e4       	ldi	r24, 0x44	; 68
    6f36:	92 e1       	ldi	r25, 0x12	; 18
    6f38:	5c dd       	rcall	.-1352   	; 0x69f2 <N5110_image>
    6f3a:	2f ef       	ldi	r18, 0xFF	; 255
    6f3c:	33 e2       	ldi	r19, 0x23	; 35
    6f3e:	64 ef       	ldi	r22, 0xF4	; 244
    6f40:	21 50       	subi	r18, 0x01	; 1
    6f42:	30 40       	sbci	r19, 0x00	; 0
    6f44:	60 40       	sbci	r22, 0x00	; 0
    6f46:	e1 f7       	brne	.-8      	; 0x6f40 <SpaceStart+0x4e>
    6f48:	00 c0       	rjmp	.+0      	; 0x6f4a <SpaceStart+0x58>
    6f4a:	00 00       	nop
	_delay_ms(5000);
	sec = 0;
    6f4c:	10 92 a7 05 	sts	0x05A7, r1	; 0x8005a7 <sec>
	prevent_wdt_reset();
    6f50:	c3 df       	rcall	.-122    	; 0x6ed8 <prevent_wdt_reset>
	MCUSR = 0;                          // reset various flags
    6f52:	14 be       	out	0x34, r1	; 52
	WDTCSR |= 0b00011000;               // see docs, set WDCE, WDE
    6f54:	e0 e6       	ldi	r30, 0x60	; 96
    6f56:	f0 e0       	ldi	r31, 0x00	; 0
    6f58:	80 81       	ld	r24, Z
    6f5a:	88 61       	ori	r24, 0x18	; 24
    6f5c:	80 83       	st	Z, r24
	WDTCSR =  0b01000000 | 0b100001;    // set WDIE, and appropriate delay
    6f5e:	81 e6       	ldi	r24, 0x61	; 97
    6f60:	80 83       	st	Z, r24
	sei();
    6f62:	78 94       	sei
static void drawEnemy()
{
	tempPos = cursorPos;
	for(int i=0; i < sizeof(invader); i++)
	{
		Level[i+tempPos] = invader[i];
    6f64:	0f 2e       	mov	r0, r31
    6f66:	f8 e1       	ldi	r31, 0x18	; 24
    6f68:	3f 2e       	mov	r3, r31
    6f6a:	f0 2d       	mov	r31, r0
    6f6c:	68 94       	set
    6f6e:	44 24       	eor	r4, r4
    6f70:	42 f8       	bld	r4, 2
    6f72:	0f 2e       	mov	r0, r31
    6f74:	fd e3       	ldi	r31, 0x3D	; 61
    6f76:	5f 2e       	mov	r5, r31
    6f78:	f0 2d       	mov	r31, r0
    6f7a:	0f 2e       	mov	r0, r31
    6f7c:	fa e5       	ldi	r31, 0x5A	; 90
    6f7e:	6f 2e       	mov	r6, r31
    6f80:	f0 2d       	mov	r31, r0
					gameover();
				}
				full++;
				enemy[(r*7)+i] = cursorPos;
				drawEnemy();
				if(rand() % 50 < 1)
    6f82:	0f 2e       	mov	r0, r31
    6f84:	f2 e3       	ldi	r31, 0x32	; 50
    6f86:	8f 2e       	mov	r8, r31
    6f88:	91 2c       	mov	r9, r1
    6f8a:	f0 2d       	mov	r31, r0
	WDTCSR =  0b01000000 | 0b100001;    // set WDIE, and appropriate delay
	sei();
	
	while(1)
	{
		WDTCSR |= (1<<WDIE);
    6f8c:	e0 e6       	ldi	r30, 0x60	; 96
    6f8e:	f0 e0       	ldi	r31, 0x00	; 0
    6f90:	80 81       	ld	r24, Z
    6f92:	80 64       	ori	r24, 0x40	; 64
    6f94:	80 83       	st	Z, r24
		if(watchdog_counter == 3)
    6f96:	80 91 42 19 	lds	r24, 0x1942	; 0x801942 <watchdog_counter>
    6f9a:	83 30       	cpi	r24, 0x03	; 3
    6f9c:	09 f0       	breq	.+2      	; 0x6fa0 <SpaceStart+0xae>
    6f9e:	67 c1       	rjmp	.+718    	; 0x726e <SpaceStart+0x37c>
		{
			watchdog_counter = 0;
    6fa0:	10 92 42 19 	sts	0x1942, r1	; 0x801942 <watchdog_counter>
			software_reset();
    6fa4:	0e 94 86 1a 	call	0x350c	; 0x350c <software_reset>
    6fa8:	62 c1       	rjmp	.+708    	; 0x726e <SpaceStart+0x37c>
		lcd_setXY(0x40,0x80);
	
		//N5110_clear();
		for(int i=0; i < sizeof(Level); i++)
		{
			Level[i] = 0x00;
    6faa:	11 92       	st	Z+, r1
			software_reset();
		}
		lcd_setXY(0x40,0x80);
	
		//N5110_clear();
		for(int i=0; i < sizeof(Level); i++)
    6fac:	e8 17       	cp	r30, r24
    6fae:	f9 07       	cpc	r31, r25
    6fb0:	e1 f7       	brne	.-8      	; 0x6faa <SpaceStart+0xb8>
}

int count = 0;
static void updateBullets()
{
	if(bullets != 0)
    6fb2:	40 91 84 1b 	lds	r20, 0x1B84	; 0x801b84 <bullets>
    6fb6:	50 91 85 1b 	lds	r21, 0x1B85	; 0x801b85 <bullets+0x1>
    6fba:	41 15       	cp	r20, r1
    6fbc:	51 05       	cpc	r21, r1
    6fbe:	09 f4       	brne	.+2      	; 0x6fc2 <SpaceStart+0xd0>
    6fc0:	5e c1       	rjmp	.+700    	; 0x727e <SpaceStart+0x38c>
	{
		bullets -= 84;
    6fc2:	44 55       	subi	r20, 0x54	; 84
    6fc4:	51 09       	sbc	r21, r1
    6fc6:	50 93 85 1b 	sts	0x1B85, r21	; 0x801b85 <bullets+0x1>
    6fca:	40 93 84 1b 	sts	0x1B84, r20	; 0x801b84 <bullets>
    6fce:	ec eb       	ldi	r30, 0xBC	; 188
    6fd0:	fb e1       	ldi	r31, 0x1B	; 27
		for(int e=21; e >= 0; e--)
    6fd2:	25 e1       	ldi	r18, 0x15	; 21
    6fd4:	30 e0       	ldi	r19, 0x00	; 0
		{
			if(enemy[e] == -1) continue;
    6fd6:	92 91       	ld	r25, -Z
    6fd8:	82 91       	ld	r24, -Z
    6fda:	8f 3f       	cpi	r24, 0xFF	; 255
    6fdc:	6f ef       	ldi	r22, 0xFF	; 255
    6fde:	96 07       	cpc	r25, r22
    6fe0:	d1 f0       	breq	.+52     	; 0x7016 <SpaceStart+0x124>
			//printf("BulletPos %d  |  EnemyPos %d\n", bullets[i], enemy[e]);
			if(bullets > enemy[e] && bullets < enemy[e]+10)
    6fe2:	84 17       	cp	r24, r20
    6fe4:	95 07       	cpc	r25, r21
    6fe6:	bc f4       	brge	.+46     	; 0x7016 <SpaceStart+0x124>
    6fe8:	0a 96       	adiw	r24, 0x0a	; 10
    6fea:	48 17       	cp	r20, r24
    6fec:	59 07       	cpc	r21, r25
    6fee:	9c f4       	brge	.+38     	; 0x7016 <SpaceStart+0x124>
			{
				score++;
    6ff0:	80 91 47 19 	lds	r24, 0x1947	; 0x801947 <score>
    6ff4:	90 91 48 19 	lds	r25, 0x1948	; 0x801948 <score+0x1>
    6ff8:	01 96       	adiw	r24, 0x01	; 1
    6ffa:	90 93 48 19 	sts	0x1948, r25	; 0x801948 <score+0x1>
    6ffe:	80 93 47 19 	sts	0x1947, r24	; 0x801947 <score>
				enemy[e] = -1;
    7002:	22 0f       	add	r18, r18
    7004:	33 1f       	adc	r19, r19
    7006:	f9 01       	movw	r30, r18
    7008:	e0 57       	subi	r30, 0x70	; 112
    700a:	f4 4e       	sbci	r31, 0xE4	; 228
    700c:	8f ef       	ldi	r24, 0xFF	; 255
    700e:	9f ef       	ldi	r25, 0xFF	; 255
    7010:	91 83       	std	Z+1, r25	; 0x01
    7012:	80 83       	st	Z, r24
    7014:	06 c0       	rjmp	.+12     	; 0x7022 <SpaceStart+0x130>
static void updateBullets()
{
	if(bullets != 0)
	{
		bullets -= 84;
		for(int e=21; e >= 0; e--)
    7016:	21 50       	subi	r18, 0x01	; 1
    7018:	31 09       	sbc	r19, r1
    701a:	e8 f6       	brcc	.-70     	; 0x6fd6 <SpaceStart+0xe4>
				bullets = 0;
				break;
			}
		}
		
		if(bullets <= 2)
    701c:	43 30       	cpi	r20, 0x03	; 3
    701e:	51 05       	cpc	r21, r1
    7020:	2c f4       	brge	.+10     	; 0x702c <SpaceStart+0x13a>
		{
			bullets = 0;
    7022:	10 92 85 1b 	sts	0x1B85, r1	; 0x801b85 <bullets+0x1>
    7026:	10 92 84 1b 	sts	0x1B84, r1	; 0x801b84 <bullets>
    702a:	4f c0       	rjmp	.+158    	; 0x70ca <SpaceStart+0x1d8>
			return;
		}
		Level[bullets] = bullet;
    702c:	fa 01       	movw	r30, r20
    702e:	e2 5b       	subi	r30, 0xB2	; 178
    7030:	f6 4e       	sbci	r31, 0xE6	; 230
    7032:	80 ec       	ldi	r24, 0xC0	; 192
    7034:	80 83       	st	Z, r24
    7036:	23 c1       	rjmp	.+582    	; 0x727e <SpaceStart+0x38c>
    7038:	68 01       	movw	r12, r16
	}
	if(count >= 5)
	{
		for(int i=0; i < 5; i++)
		{
			if(invaderBullet[i] != 0)
    703a:	f8 01       	movw	r30, r16
    703c:	20 81       	ld	r18, Z
    703e:	31 81       	ldd	r19, Z+1	; 0x01
    7040:	21 15       	cp	r18, r1
    7042:	31 05       	cpc	r19, r1
    7044:	01 f1       	breq	.+64     	; 0x7086 <SpaceStart+0x194>
			{
				invaderBullet[i] += 84;
    7046:	2c 5a       	subi	r18, 0xAC	; 172
    7048:	3f 4f       	sbci	r19, 0xFF	; 255
    704a:	31 83       	std	Z+1, r19	; 0x01
    704c:	20 83       	st	Z, r18
				if(invaderBullet[i] > 408 + (4 * playerPos) && invaderBullet[i] < 408 + (4 * playerPos) + 10)
    704e:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <playerPos>
    7052:	08 2e       	mov	r0, r24
    7054:	00 0c       	add	r0, r0
    7056:	99 0b       	sbc	r25, r25
    7058:	8a 59       	subi	r24, 0x9A	; 154
    705a:	9f 4f       	sbci	r25, 0xFF	; 255
    705c:	88 0f       	add	r24, r24
    705e:	99 1f       	adc	r25, r25
    7060:	88 0f       	add	r24, r24
    7062:	99 1f       	adc	r25, r25
    7064:	82 17       	cp	r24, r18
    7066:	93 07       	cpc	r25, r19
    7068:	2c f4       	brge	.+10     	; 0x7074 <SpaceStart+0x182>
    706a:	0a 96       	adiw	r24, 0x0a	; 10
    706c:	28 17       	cp	r18, r24
    706e:	39 07       	cpc	r19, r25
				{
					gameover();
    7070:	0c f4       	brge	.+2      	; 0x7074 <SpaceStart+0x182>
    7072:	cc de       	rcall	.-616    	; 0x6e0c <gameover>
				}
				if(invaderBullet[i] >= 504)
    7074:	f6 01       	movw	r30, r12
    7076:	80 81       	ld	r24, Z
    7078:	91 81       	ldd	r25, Z+1	; 0x01
    707a:	88 3f       	cpi	r24, 0xF8	; 248
    707c:	91 40       	sbci	r25, 0x01	; 1
    707e:	1c f0       	brlt	.+6      	; 0x7086 <SpaceStart+0x194>
				{
					invaderBullet[i] = 0;
    7080:	f6 01       	movw	r30, r12
    7082:	11 82       	std	Z+1, r1	; 0x01
    7084:	10 82       	st	Z, r1
    7086:	0e 5f       	subi	r16, 0xFE	; 254
    7088:	1f 4f       	sbci	r17, 0xFF	; 255
		Level[bullets] = bullet;
		
	}
	if(count >= 5)
	{
		for(int i=0; i < 5; i++)
    708a:	0e 15       	cp	r16, r14
    708c:	1f 05       	cpc	r17, r15
    708e:	a1 f6       	brne	.-88     	; 0x7038 <SpaceStart+0x146>
					invaderBullet[i] = 0;
					continue;
				}
			}
		}
		count = 0;
    7090:	10 92 44 19 	sts	0x1944, r1	; 0x801944 <count+0x1>
    7094:	10 92 43 19 	sts	0x1943, r1	; 0x801943 <count>
    7098:	e6 e8       	ldi	r30, 0x86	; 134
    709a:	fb e1       	ldi	r31, 0x1B	; 27
    709c:	20 e9       	ldi	r18, 0x90	; 144
    709e:	3b e1       	ldi	r19, 0x1B	; 27
	}
	for(int i=0; i < 5; i++)
	{
		if(invaderBullet[i] != 0)
		{
			Level[invaderBullet[i]] = bullet;
    70a0:	40 ec       	ldi	r20, 0xC0	; 192
		}
		count = 0;
	}
	for(int i=0; i < 5; i++)
	{
		if(invaderBullet[i] != 0)
    70a2:	81 91       	ld	r24, Z+
    70a4:	91 91       	ld	r25, Z+
    70a6:	00 97       	sbiw	r24, 0x00	; 0
    70a8:	21 f0       	breq	.+8      	; 0x70b2 <SpaceStart+0x1c0>
		{
			Level[invaderBullet[i]] = bullet;
    70aa:	dc 01       	movw	r26, r24
    70ac:	a2 5b       	subi	r26, 0xB2	; 178
    70ae:	b6 4e       	sbci	r27, 0xE6	; 230
    70b0:	4c 93       	st	X, r20
				}
			}
		}
		count = 0;
	}
	for(int i=0; i < 5; i++)
    70b2:	e2 17       	cp	r30, r18
    70b4:	f3 07       	cpc	r31, r19
    70b6:	a9 f7       	brne	.-22     	; 0x70a2 <SpaceStart+0x1b0>
		if(invaderBullet[i] != 0)
		{
			Level[invaderBullet[i]] = bullet;
		}
	}
	count++;
    70b8:	80 91 43 19 	lds	r24, 0x1943	; 0x801943 <count>
    70bc:	90 91 44 19 	lds	r25, 0x1944	; 0x801944 <count+0x1>
    70c0:	01 96       	adiw	r24, 0x01	; 1
    70c2:	90 93 44 19 	sts	0x1944, r25	; 0x801944 <count+0x1>
    70c6:	80 93 43 19 	sts	0x1943, r24	; 0x801943 <count>
		for(int i=0; i < sizeof(Level); i++)
		{
			Level[i] = 0x00;
		}
		updateBullets();
		if((PINC&(1 << PINC7)) == 0)
    70ca:	37 99       	sbic	0x06, 7	; 6
    70cc:	1e c0       	rjmp	.+60     	; 0x710a <SpaceStart+0x218>
		{
			wdt_reset();
    70ce:	a8 95       	wdr
			watchdog_counter = 0;
    70d0:	10 92 42 19 	sts	0x1942, r1	; 0x801942 <watchdog_counter>
	}
}

static void shoot()
{
	if(bullets == 0)
    70d4:	80 91 84 1b 	lds	r24, 0x1B84	; 0x801b84 <bullets>
    70d8:	90 91 85 1b 	lds	r25, 0x1B85	; 0x801b85 <bullets+0x1>
    70dc:	89 2b       	or	r24, r25
    70de:	a9 f4       	brne	.+42     	; 0x710a <SpaceStart+0x218>
	{
		cursorPos = 408 + (4 * playerPos) + 5;
    70e0:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <playerPos>
    70e4:	f4 e0       	ldi	r31, 0x04	; 4
    70e6:	8f 02       	muls	r24, r31
    70e8:	c0 01       	movw	r24, r0
    70ea:	11 24       	eor	r1, r1
    70ec:	83 56       	subi	r24, 0x63	; 99
    70ee:	9e 4f       	sbci	r25, 0xFE	; 254
    70f0:	90 93 4c 19 	sts	0x194C, r25	; 0x80194c <cursorPos+0x1>
    70f4:	80 93 4b 19 	sts	0x194B, r24	; 0x80194b <cursorPos>
		Level[cursorPos] = bullet;
    70f8:	fc 01       	movw	r30, r24
    70fa:	e2 5b       	subi	r30, 0xB2	; 178
    70fc:	f6 4e       	sbci	r31, 0xE6	; 230
    70fe:	20 ec       	ldi	r18, 0xC0	; 192
    7100:	20 83       	st	Z, r18
		bullets = cursorPos;
    7102:	90 93 85 1b 	sts	0x1B85, r25	; 0x801b85 <bullets+0x1>
    7106:	80 93 84 1b 	sts	0x1B84, r24	; 0x801b84 <bullets>
		{
			wdt_reset();
			watchdog_counter = 0;
			shoot();
		}
		if((PINC&(1 << PINC6)) == 0)
    710a:	36 99       	sbic	0x06, 6	; 6
    710c:	16 c0       	rjmp	.+44     	; 0x713a <SpaceStart+0x248>
		{
			wdt_reset();
    710e:	a8 95       	wdr
			watchdog_counter = 0;
    7110:	10 92 42 19 	sts	0x1942, r1	; 0x801942 <watchdog_counter>
			if(408 + (4 * playerPos) < 492) playerPos++;
    7114:	20 91 37 01 	lds	r18, 0x0137	; 0x800137 <playerPos>
    7118:	82 2f       	mov	r24, r18
    711a:	02 2e       	mov	r0, r18
    711c:	00 0c       	add	r0, r0
    711e:	99 0b       	sbc	r25, r25
    7120:	8a 59       	subi	r24, 0x9A	; 154
    7122:	9f 4f       	sbci	r25, 0xFF	; 255
    7124:	88 0f       	add	r24, r24
    7126:	99 1f       	adc	r25, r25
    7128:	88 0f       	add	r24, r24
    712a:	99 1f       	adc	r25, r25
    712c:	8c 3e       	cpi	r24, 0xEC	; 236
    712e:	91 40       	sbci	r25, 0x01	; 1
    7130:	dc f4       	brge	.+54     	; 0x7168 <SpaceStart+0x276>
    7132:	2f 5f       	subi	r18, 0xFF	; 255
    7134:	20 93 37 01 	sts	0x0137, r18	; 0x800137 <playerPos>
    7138:	17 c0       	rjmp	.+46     	; 0x7168 <SpaceStart+0x276>
		}
		else if((PINC&(1 << PINC4)) == 0)
    713a:	34 99       	sbic	0x06, 4	; 6
    713c:	15 c0       	rjmp	.+42     	; 0x7168 <SpaceStart+0x276>
		{
			wdt_reset();
    713e:	a8 95       	wdr
			watchdog_counter = 0;
    7140:	10 92 42 19 	sts	0x1942, r1	; 0x801942 <watchdog_counter>
			if(408 + (4 * playerPos) > 420) playerPos--;
    7144:	20 91 37 01 	lds	r18, 0x0137	; 0x800137 <playerPos>
    7148:	82 2f       	mov	r24, r18
    714a:	02 2e       	mov	r0, r18
    714c:	00 0c       	add	r0, r0
    714e:	99 0b       	sbc	r25, r25
    7150:	8a 59       	subi	r24, 0x9A	; 154
    7152:	9f 4f       	sbci	r25, 0xFF	; 255
    7154:	88 0f       	add	r24, r24
    7156:	99 1f       	adc	r25, r25
    7158:	88 0f       	add	r24, r24
    715a:	99 1f       	adc	r25, r25
    715c:	85 3a       	cpi	r24, 0xA5	; 165
    715e:	91 40       	sbci	r25, 0x01	; 1
    7160:	1c f0       	brlt	.+6      	; 0x7168 <SpaceStart+0x276>
    7162:	21 50       	subi	r18, 0x01	; 1
    7164:	20 93 37 01 	sts	0x0137, r18	; 0x800137 <playerPos>
		}
		int timer = 10 - (score / 10);
		if(sec >= timer)
    7168:	40 91 a7 05 	lds	r20, 0x05A7	; 0x8005a7 <sec>
    716c:	20 91 47 19 	lds	r18, 0x1947	; 0x801947 <score>
    7170:	30 91 48 19 	lds	r19, 0x1948	; 0x801948 <score+0x1>
    7174:	ad ec       	ldi	r26, 0xCD	; 205
    7176:	bc ec       	ldi	r27, 0xCC	; 204
    7178:	0e 94 2b 42 	call	0x8456	; 0x8456 <__umulhisi3>
    717c:	96 95       	lsr	r25
    717e:	87 95       	ror	r24
    7180:	96 95       	lsr	r25
    7182:	87 95       	ror	r24
    7184:	96 95       	lsr	r25
    7186:	87 95       	ror	r24
    7188:	2a e0       	ldi	r18, 0x0A	; 10
    718a:	30 e0       	ldi	r19, 0x00	; 0
    718c:	28 1b       	sub	r18, r24
    718e:	39 0b       	sbc	r19, r25
    7190:	84 2f       	mov	r24, r20
    7192:	90 e0       	ldi	r25, 0x00	; 0
    7194:	82 17       	cp	r24, r18
    7196:	93 07       	cpc	r25, r19
    7198:	3c f0       	brlt	.+14     	; 0x71a8 <SpaceStart+0x2b6>
		{
			sec = 0;
    719a:	10 92 a7 05 	sts	0x05A7, r1	; 0x8005a7 <sec>
			enemyPos++;
    719e:	80 91 4d 19 	lds	r24, 0x194D	; 0x80194d <enemyPos>
    71a2:	8f 5f       	subi	r24, 0xFF	; 255
    71a4:	80 93 4d 19 	sts	0x194D, r24	; 0x80194d <enemyPos>
		}
		cursorPos = enemyPos * 84;
    71a8:	80 91 4d 19 	lds	r24, 0x194D	; 0x80194d <enemyPos>
    71ac:	e4 e5       	ldi	r30, 0x54	; 84
    71ae:	8e 02       	muls	r24, r30
    71b0:	c0 01       	movw	r24, r0
    71b2:	11 24       	eor	r1, r1
    71b4:	90 93 4c 19 	sts	0x194C, r25	; 0x80194c <cursorPos+0x1>
    71b8:	80 93 4b 19 	sts	0x194B, r24	; 0x80194b <cursorPos>
    71bc:	00 e9       	ldi	r16, 0x90	; 144
    71be:	1b e1       	ldi	r17, 0x1B	; 27
		int full = 0;
    71c0:	c1 2c       	mov	r12, r1
    71c2:	d1 2c       	mov	r13, r1
static void drawEnemy()
{
	tempPos = cursorPos;
	for(int i=0; i < sizeof(invader); i++)
	{
		Level[i+tempPos] = invader[i];
    71c4:	0f 2e       	mov	r0, r31
    71c6:	fe e1       	ldi	r31, 0x1E	; 30
    71c8:	7f 2e       	mov	r7, r31
    71ca:	f0 2d       	mov	r31, r0
    71cc:	42 c0       	rjmp	.+132    	; 0x7252 <SpaceStart+0x360>
    71ce:	78 01       	movw	r14, r16
		int full = 0;
		for(int r=0; r < 2; r++)
		{
			for(int i=0; i < 7; i++)
			{
				if(enemy[(r*7)+i] == -1)
    71d0:	f8 01       	movw	r30, r16
    71d2:	80 81       	ld	r24, Z
    71d4:	91 81       	ldd	r25, Z+1	; 0x01
    71d6:	01 96       	adiw	r24, 0x01	; 1
    71d8:	51 f4       	brne	.+20     	; 0x71ee <SpaceStart+0x2fc>
				{
					cursorPos += 12;
    71da:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <cursorPos>
    71de:	90 91 4c 19 	lds	r25, 0x194C	; 0x80194c <cursorPos+0x1>
    71e2:	0c 96       	adiw	r24, 0x0c	; 12
    71e4:	90 93 4c 19 	sts	0x194C, r25	; 0x80194c <cursorPos+0x1>
    71e8:	80 93 4b 19 	sts	0x194B, r24	; 0x80194b <cursorPos>
					continue;
    71ec:	27 c0       	rjmp	.+78     	; 0x723c <SpaceStart+0x34a>
				}
				if(cursorPos > 408)
    71ee:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <cursorPos>
    71f2:	90 91 4c 19 	lds	r25, 0x194C	; 0x80194c <cursorPos+0x1>
    71f6:	89 39       	cpi	r24, 0x99	; 153
    71f8:	91 40       	sbci	r25, 0x01	; 1
    71fa:	0c f4       	brge	.+2      	; 0x71fe <SpaceStart+0x30c>
				{
					gameover();
    71fc:	50 c0       	rjmp	.+160    	; 0x729e <SpaceStart+0x3ac>
    71fe:	06 de       	rcall	.-1012   	; 0x6e0c <gameover>
    7200:	4e c0       	rjmp	.+156    	; 0x729e <SpaceStart+0x3ac>

static void invaderShoot()
{
	for(int i=0; i < 5; i++)
	{
		if(invaderBullet[i] == 0)
    7202:	21 91       	ld	r18, Z+
    7204:	31 91       	ld	r19, Z+
    7206:	23 2b       	or	r18, r19
    7208:	a9 f4       	brne	.+42     	; 0x7234 <SpaceStart+0x342>
    720a:	02 c0       	rjmp	.+4      	; 0x7210 <SpaceStart+0x31e>
    720c:	80 e0       	ldi	r24, 0x00	; 0
    720e:	90 e0       	ldi	r25, 0x00	; 0
		{
			cursorPos -= 7;
    7210:	20 91 4b 19 	lds	r18, 0x194B	; 0x80194b <cursorPos>
    7214:	30 91 4c 19 	lds	r19, 0x194C	; 0x80194c <cursorPos+0x1>
    7218:	27 50       	subi	r18, 0x07	; 7
    721a:	31 09       	sbc	r19, r1
			Level[cursorPos] = bullet;
    721c:	f9 01       	movw	r30, r18
    721e:	e2 5b       	subi	r30, 0xB2	; 178
    7220:	f6 4e       	sbci	r31, 0xE6	; 230
    7222:	20 82       	st	Z, r2
			invaderBullet[i] = cursorPos;
    7224:	88 0f       	add	r24, r24
    7226:	99 1f       	adc	r25, r25
    7228:	fc 01       	movw	r30, r24
    722a:	ea 57       	subi	r30, 0x7A	; 122
    722c:	f4 4e       	sbci	r31, 0xE4	; 228
    722e:	31 83       	std	Z+1, r19	; 0x01
    7230:	20 83       	st	Z, r18
    7232:	04 c0       	rjmp	.+8      	; 0x723c <SpaceStart+0x34a>
	cursorPos += 3;
}

static void invaderShoot()
{
	for(int i=0; i < 5; i++)
    7234:	01 96       	adiw	r24, 0x01	; 1
    7236:	85 30       	cpi	r24, 0x05	; 5
    7238:	91 05       	cpc	r25, r1
    723a:	19 f7       	brne	.-58     	; 0x7202 <SpaceStart+0x310>
    723c:	0e 5f       	subi	r16, 0xFE	; 254
    723e:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		cursorPos = enemyPos * 84;
		int full = 0;
		for(int r=0; r < 2; r++)
		{
			for(int i=0; i < 7; i++)
    7240:	0a 15       	cp	r16, r10
    7242:	1b 05       	cpc	r17, r11
    7244:	21 f6       	brne	.-120    	; 0x71ce <SpaceStart+0x2dc>
    7246:	85 01       	movw	r16, r10
			sec = 0;
			enemyPos++;
		}
		cursorPos = enemyPos * 84;
		int full = 0;
		for(int r=0; r < 2; r++)
    7248:	8c ea       	ldi	r24, 0xAC	; 172
    724a:	9b e1       	ldi	r25, 0x1B	; 27
    724c:	8a 15       	cp	r24, r10
    724e:	9b 05       	cpc	r25, r11
    7250:	49 f0       	breq	.+18     	; 0x7264 <SpaceStart+0x372>
    7252:	58 01       	movw	r10, r16
    7254:	9e e0       	ldi	r25, 0x0E	; 14
    7256:	a9 0e       	add	r10, r25
    7258:	b1 1c       	adc	r11, r1
	for(int i=0; i < 5; i++)
	{
		if(invaderBullet[i] == 0)
		{
			cursorPos -= 7;
			Level[cursorPos] = bullet;
    725a:	0f 2e       	mov	r0, r31
    725c:	f0 ec       	ldi	r31, 0xC0	; 192
    725e:	2f 2e       	mov	r2, r31
    7260:	f0 2d       	mov	r31, r0
				{
					invaderShoot();
				}
			}
		}
		if(full == 0)
    7262:	b5 cf       	rjmp	.-150    	; 0x71ce <SpaceStart+0x2dc>
    7264:	cd 28       	or	r12, r13
    7266:	09 f0       	breq	.+2      	; 0x726a <SpaceStart+0x378>
		{
			resetEnemy();
    7268:	55 c0       	rjmp	.+170    	; 0x7314 <SpaceStart+0x422>
    726a:	ba dd       	rcall	.-1164   	; 0x6de0 <resetEnemy>
		if(watchdog_counter == 3)
		{
			watchdog_counter = 0;
			software_reset();
		}
		lcd_setXY(0x40,0x80);
    726c:	53 c0       	rjmp	.+166    	; 0x7314 <SpaceStart+0x422>
    726e:	60 e8       	ldi	r22, 0x80	; 128
    7270:	80 e4       	ldi	r24, 0x40	; 64
    7272:	a9 db       	rcall	.-2222   	; 0x69c6 <lcd_setXY>
    7274:	ee e4       	ldi	r30, 0x4E	; 78
    7276:	f9 e1       	ldi	r31, 0x19	; 25
    7278:	86 e4       	ldi	r24, 0x46	; 70
    727a:	9b e1       	ldi	r25, 0x1B	; 27
    727c:	96 ce       	rjmp	.-724    	; 0x6faa <SpaceStart+0xb8>
			return;
		}
		Level[bullets] = bullet;
		
	}
	if(count >= 5)
    727e:	80 91 43 19 	lds	r24, 0x1943	; 0x801943 <count>
    7282:	90 91 44 19 	lds	r25, 0x1944	; 0x801944 <count+0x1>
    7286:	05 97       	sbiw	r24, 0x05	; 5
    7288:	0c f4       	brge	.+2      	; 0x728c <SpaceStart+0x39a>
    728a:	06 cf       	rjmp	.-500    	; 0x7098 <SpaceStart+0x1a6>
    728c:	06 e8       	ldi	r16, 0x86	; 134
    728e:	1b e1       	ldi	r17, 0x1B	; 27
    7290:	0f 2e       	mov	r0, r31
    7292:	f0 e9       	ldi	r31, 0x90	; 144
    7294:	ef 2e       	mov	r14, r31
    7296:	fb e1       	ldi	r31, 0x1B	; 27
    7298:	ff 2e       	mov	r15, r31
    729a:	f0 2d       	mov	r31, r0
    729c:	cd ce       	rjmp	.-614    	; 0x7038 <SpaceStart+0x146>
				}
				if(cursorPos > 408)
				{
					gameover();
				}
				full++;
    729e:	ef ef       	ldi	r30, 0xFF	; 255
    72a0:	ce 1a       	sub	r12, r30
    72a2:	de 0a       	sbc	r13, r30
				enemy[(r*7)+i] = cursorPos;
    72a4:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <cursorPos>
    72a8:	90 91 4c 19 	lds	r25, 0x194C	; 0x80194c <cursorPos+0x1>
    72ac:	f7 01       	movw	r30, r14
    72ae:	91 83       	std	Z+1, r25	; 0x01
    72b0:	80 83       	st	Z, r24
static void drawEnemy()
{
	tempPos = cursorPos;
	for(int i=0; i < sizeof(invader); i++)
	{
		Level[i+tempPos] = invader[i];
    72b2:	fc 01       	movw	r30, r24
    72b4:	e2 5b       	subi	r30, 0xB2	; 178
    72b6:	f6 4e       	sbci	r31, 0xE6	; 230
    72b8:	30 82       	st	Z, r3
    72ba:	41 82       	std	Z+1, r4	; 0x01
    72bc:	52 82       	std	Z+2, r5	; 0x02
    72be:	63 82       	std	Z+3, r6	; 0x03
    72c0:	9c 01       	movw	r18, r24
    72c2:	2c 5f       	subi	r18, 0xFC	; 252
    72c4:	3f 4f       	sbci	r19, 0xFF	; 255
    72c6:	d9 01       	movw	r26, r18
    72c8:	a2 5b       	subi	r26, 0xB2	; 178
    72ca:	b6 4e       	sbci	r27, 0xE6	; 230
    72cc:	7c 92       	st	X, r7
		cursorPos = tempPos + i;
	}
	tempPos = cursorPos;
    72ce:	30 93 4a 19 	sts	0x194A, r19	; 0x80194a <tempPos+0x1>
    72d2:	20 93 49 19 	sts	0x1949, r18	; 0x801949 <tempPos>
	for(int i=1; i <= sizeof(invader); i++)
	{
		Level[i+tempPos] = invader[sizeof(invader) - i];
    72d6:	75 82       	std	Z+5, r7	; 0x05
    72d8:	66 82       	std	Z+6, r6	; 0x06
    72da:	57 82       	std	Z+7, r5	; 0x07
    72dc:	40 86       	std	Z+8, r4	; 0x08
    72de:	31 86       	std	Z+9, r3	; 0x09
		cursorPos = tempPos + i;
	}
	cursorPos += 3;
    72e0:	0c 96       	adiw	r24, 0x0c	; 12
    72e2:	90 93 4c 19 	sts	0x194C, r25	; 0x80194c <cursorPos+0x1>
    72e6:	80 93 4b 19 	sts	0x194B, r24	; 0x80194b <cursorPos>
					gameover();
				}
				full++;
				enemy[(r*7)+i] = cursorPos;
				drawEnemy();
				if(rand() % 50 < 1)
    72ea:	0e 94 3b 44 	call	0x8876	; 0x8876 <rand>
    72ee:	b4 01       	movw	r22, r8
    72f0:	0e 94 d1 41 	call	0x83a2	; 0x83a2 <__divmodhi4>
    72f4:	18 16       	cp	r1, r24
    72f6:	19 06       	cpc	r1, r25
    72f8:	0c f4       	brge	.+2      	; 0x72fc <SpaceStart+0x40a>
    72fa:	a0 cf       	rjmp	.-192    	; 0x723c <SpaceStart+0x34a>

static void invaderShoot()
{
	for(int i=0; i < 5; i++)
	{
		if(invaderBullet[i] == 0)
    72fc:	e6 e8       	ldi	r30, 0x86	; 134
    72fe:	fb e1       	ldi	r31, 0x1B	; 27
    7300:	80 81       	ld	r24, Z
    7302:	91 81       	ldd	r25, Z+1	; 0x01
    7304:	89 2b       	or	r24, r25
    7306:	09 f4       	brne	.+2      	; 0x730a <SpaceStart+0x418>
    7308:	81 cf       	rjmp	.-254    	; 0x720c <SpaceStart+0x31a>
    730a:	e8 e8       	ldi	r30, 0x88	; 136
    730c:	fb e1       	ldi	r31, 0x1B	; 27
	cursorPos += 3;
}

static void invaderShoot()
{
	for(int i=0; i < 5; i++)
    730e:	81 e0       	ldi	r24, 0x01	; 1
    7310:	90 e0       	ldi	r25, 0x00	; 0
    7312:	77 cf       	rjmp	.-274    	; 0x7202 <SpaceStart+0x310>
		}
		if(full == 0)
		{
			resetEnemy();
		}
		cursorPos = 408 + (4 * playerPos);
    7314:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <playerPos>
    7318:	08 2e       	mov	r0, r24
    731a:	00 0c       	add	r0, r0
    731c:	99 0b       	sbc	r25, r25
    731e:	8a 59       	subi	r24, 0x9A	; 154
    7320:	9f 4f       	sbci	r25, 0xFF	; 255
    7322:	88 0f       	add	r24, r24
    7324:	99 1f       	adc	r25, r25
    7326:	88 0f       	add	r24, r24
    7328:	99 1f       	adc	r25, r25
static void drawPlayer()
{
	tempPos = cursorPos;
	for(int i=0; i < sizeof(player); i++)
	{
		Level[i+tempPos] = player[i];
    732a:	fc 01       	movw	r30, r24
    732c:	e2 5b       	subi	r30, 0xB2	; 178
    732e:	f6 4e       	sbci	r31, 0xE6	; 230
    7330:	10 82       	st	Z, r1
    7332:	28 e7       	ldi	r18, 0x78	; 120
    7334:	21 83       	std	Z+1, r18	; 0x01
    7336:	30 e6       	ldi	r19, 0x60	; 96
    7338:	32 83       	std	Z+2, r19	; 0x02
    733a:	6e e7       	ldi	r22, 0x7E	; 126
    733c:	63 83       	std	Z+3, r22	; 0x03
    733e:	ac 01       	movw	r20, r24
    7340:	4c 5f       	subi	r20, 0xFC	; 252
    7342:	5f 4f       	sbci	r21, 0xFF	; 255
    7344:	da 01       	movw	r26, r20
    7346:	a2 5b       	subi	r26, 0xB2	; 178
    7348:	b6 4e       	sbci	r27, 0xE6	; 230
    734a:	7f e7       	ldi	r23, 0x7F	; 127
    734c:	7c 93       	st	X, r23
		cursorPos = tempPos + i;
	}
	tempPos = cursorPos;
    734e:	50 93 4a 19 	sts	0x194A, r21	; 0x80194a <tempPos+0x1>
    7352:	40 93 49 19 	sts	0x1949, r20	; 0x801949 <tempPos>
	for(int i=1; i <= sizeof(player); i++)
	{
		Level[i+tempPos] = player[sizeof(player) - i];
    7356:	75 83       	std	Z+5, r23	; 0x05
    7358:	66 83       	std	Z+6, r22	; 0x06
    735a:	37 83       	std	Z+7, r19	; 0x07
    735c:	20 87       	std	Z+8, r18	; 0x08
    735e:	11 86       	std	Z+9, r1	; 0x09
		cursorPos = tempPos + i;
	}
	cursorPos += 3;
    7360:	0c 96       	adiw	r24, 0x0c	; 12
    7362:	90 93 4c 19 	sts	0x194C, r25	; 0x80194c <cursorPos+0x1>
    7366:	80 93 4b 19 	sts	0x194B, r24	; 0x80194b <cursorPos>
		}
		cursorPos = 408 + (4 * playerPos);
		drawPlayer();
	
	
		N5110_image(Level, 0);
    736a:	60 e0       	ldi	r22, 0x00	; 0
    736c:	8e e4       	ldi	r24, 0x4E	; 78
    736e:	99 e1       	ldi	r25, 0x19	; 25
		lcd_setXY(0x44,0x80);
    7370:	40 db       	rcall	.-2432   	; 0x69f2 <N5110_image>
    7372:	60 e8       	ldi	r22, 0x80	; 128
    7374:	84 e4       	ldi	r24, 0x44	; 68
    7376:	27 db       	rcall	.-2482   	; 0x69c6 <lcd_setXY>
    7378:	4a e0       	ldi	r20, 0x0A	; 10
    737a:	be 01       	movw	r22, r28
    737c:	6f 5f       	subi	r22, 0xFF	; 255
    737e:	7f 4f       	sbci	r23, 0xFF	; 255
    7380:	80 91 47 19 	lds	r24, 0x1947	; 0x801947 <score>
    7384:	90 91 48 19 	lds	r25, 0x1948	; 0x801948 <score+0x1>
    7388:	0e 94 c5 45 	call	0x8b8a	; 0x8b8a <__itoa_ncheck>
		char scoreChar[10];
		itoa(score,scoreChar,10);
		N5110_Data(scoreChar);
    738c:	ce 01       	movw	r24, r28
    738e:	01 96       	adiw	r24, 0x01	; 1
    7390:	a6 da       	rcall	.-2740   	; 0x68de <N5110_Data>
    7392:	ff ef       	ldi	r31, 0xFF	; 255
    7394:	21 ee       	ldi	r18, 0xE1	; 225
    7396:	34 e0       	ldi	r19, 0x04	; 4
    7398:	f1 50       	subi	r31, 0x01	; 1
    739a:	20 40       	sbci	r18, 0x00	; 0
    739c:	30 40       	sbci	r19, 0x00	; 0
    739e:	e1 f7       	brne	.-8      	; 0x7398 <SpaceStart+0x4a6>
    73a0:	00 c0       	rjmp	.+0      	; 0x73a2 <SpaceStart+0x4b0>
    73a2:	00 00       	nop
	
		_delay_ms(100);
	}
    73a4:	f3 cd       	rjmp	.-1050   	; 0x6f8c <SpaceStart+0x9a>

000073a6 <spi_init_master>:
// 	DDRB &= ~(1<<MISO);
// 	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0);
// 	PORTB |= (1<<MISO);
// 	PORTB &= ~(1<<MISO);
	/*SET MOSI, SCK AND CS AS OUTPUT, REST OF REGISTER INPUT*/
	DDRB = (1<<DDB5) | (1<<DDB7) | (1<<DDB4);
    73a6:	80 eb       	ldi	r24, 0xB0	; 176
    73a8:	84 b9       	out	0x04, r24	; 4
	/*ENABLE SPI, MASTER, SET CLOCK RATE FCK/128 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0);
    73aa:	83 e5       	ldi	r24, 0x53	; 83
    73ac:	8c bd       	out	0x2c, r24	; 44
    73ae:	08 95       	ret

000073b0 <spi_rwSPI>:
SPI READ/WRITE
********************************************/

uint8_t spi_rwSPI( uint8_t byteword)
{
	SPDR = byteword; // put the byteword into data register
    73b0:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    73b2:	0d b4       	in	r0, 0x2d	; 45
    73b4:	07 fe       	sbrs	r0, 7
    73b6:	fd cf       	rjmp	.-6      	; 0x73b2 <spi_rwSPI+0x2>
	return SPDR;
    73b8:	8e b5       	in	r24, 0x2e	; 46
}
    73ba:	08 95       	ret

000073bc <spi_BurstRead>:

/********************************************
BURST READ
********************************************/

void spi_BurstRead(uint8_t addr, uint8_t buffer[], uint8_t countdown, int pin) {
    73bc:	df 92       	push	r13
    73be:	ef 92       	push	r14
    73c0:	ff 92       	push	r15
    73c2:	0f 93       	push	r16
    73c4:	1f 93       	push	r17
    73c6:	cf 93       	push	r28
    73c8:	df 93       	push	r29
    73ca:	8b 01       	movw	r16, r22
    73cc:	d4 2e       	mov	r13, r20

	PORT_CS &= ~(1<<pin);
    73ce:	95 b1       	in	r25, 0x05	; 5
    73d0:	41 e0       	ldi	r20, 0x01	; 1
    73d2:	50 e0       	ldi	r21, 0x00	; 0
    73d4:	7a 01       	movw	r14, r20
    73d6:	02 c0       	rjmp	.+4      	; 0x73dc <spi_BurstRead+0x20>
    73d8:	ee 0c       	add	r14, r14
    73da:	ff 1c       	adc	r15, r15
    73dc:	2a 95       	dec	r18
    73de:	e2 f7       	brpl	.-8      	; 0x73d8 <spi_BurstRead+0x1c>
    73e0:	2e 2d       	mov	r18, r14
    73e2:	20 95       	com	r18
    73e4:	92 23       	and	r25, r18
    73e6:	95 b9       	out	0x05, r25	; 5
	spi_rwSPI(addr);
    73e8:	e3 df       	rcall	.-58     	; 0x73b0 <spi_rwSPI>
	for (int i = 0; i < countdown; i++) {
    73ea:	dd 20       	and	r13, r13
    73ec:	49 f0       	breq	.+18     	; 0x7400 <spi_BurstRead+0x44>
    73ee:	e8 01       	movw	r28, r16
    73f0:	0d 0d       	add	r16, r13
    73f2:	11 1d       	adc	r17, r1
		*buffer++ = spi_rwSPI(0x00);
    73f4:	80 e0       	ldi	r24, 0x00	; 0
    73f6:	dc df       	rcall	.-72     	; 0x73b0 <spi_rwSPI>
    73f8:	89 93       	st	Y+, r24

void spi_BurstRead(uint8_t addr, uint8_t buffer[], uint8_t countdown, int pin) {

	PORT_CS &= ~(1<<pin);
	spi_rwSPI(addr);
	for (int i = 0; i < countdown; i++) {
    73fa:	c0 17       	cp	r28, r16
    73fc:	d1 07       	cpc	r29, r17
    73fe:	d1 f7       	brne	.-12     	; 0x73f4 <spi_BurstRead+0x38>
		*buffer++ = spi_rwSPI(0x00);
	}
	PORT_CS |= (1<<pin);
    7400:	85 b1       	in	r24, 0x05	; 5
    7402:	e8 2a       	or	r14, r24
    7404:	e5 b8       	out	0x05, r14	; 5
}
    7406:	df 91       	pop	r29
    7408:	cf 91       	pop	r28
    740a:	1f 91       	pop	r17
    740c:	0f 91       	pop	r16
    740e:	ff 90       	pop	r15
    7410:	ef 90       	pop	r14
    7412:	df 90       	pop	r13
    7414:	08 95       	ret

00007416 <spi_read16>:

uint16_t spi_read16(uint8_t addr, int pin)
{
    7416:	cf 93       	push	r28
    7418:	df 93       	push	r29
	PORT_CS &= ~(1<<pin);
    741a:	95 b1       	in	r25, 0x05	; 5
    741c:	c1 e0       	ldi	r28, 0x01	; 1
    741e:	d0 e0       	ldi	r29, 0x00	; 0
    7420:	02 c0       	rjmp	.+4      	; 0x7426 <spi_read16+0x10>
    7422:	cc 0f       	add	r28, r28
    7424:	dd 1f       	adc	r29, r29
    7426:	6a 95       	dec	r22
    7428:	e2 f7       	brpl	.-8      	; 0x7422 <spi_read16+0xc>
    742a:	2c 2f       	mov	r18, r28
    742c:	20 95       	com	r18
    742e:	92 23       	and	r25, r18
    7430:	95 b9       	out	0x05, r25	; 5
	spi_rwSPI(addr);
    7432:	be df       	rcall	.-132    	; 0x73b0 <spi_rwSPI>
	uint8_t buffer[2];
	buffer[0] = spi_rwSPI(0x00);
    7434:	80 e0       	ldi	r24, 0x00	; 0
    7436:	bc df       	rcall	.-136    	; 0x73b0 <spi_rwSPI>
    7438:	d8 2f       	mov	r29, r24
	buffer[1] = spi_rwSPI(0x00);
    743a:	80 e0       	ldi	r24, 0x00	; 0
    743c:	b9 df       	rcall	.-142    	; 0x73b0 <spi_rwSPI>
    743e:	95 b1       	in	r25, 0x05	; 5
	uint16_t receivedVal = (buffer[1] << 8) | buffer[0];
	PORT_CS |= (1<<pin);
    7440:	c9 2b       	or	r28, r25
    7442:	c5 b9       	out	0x05, r28	; 5
    7444:	2d 2f       	mov	r18, r29
	return receivedVal;
    7446:	30 e0       	ldi	r19, 0x00	; 0
    7448:	a9 01       	movw	r20, r18
}
    744a:	58 2b       	or	r21, r24
    744c:	ca 01       	movw	r24, r20
    744e:	df 91       	pop	r29
    7450:	cf 91       	pop	r28
    7452:	08 95       	ret

00007454 <spi_readS16>:
    7454:	e0 cf       	rjmp	.-64     	; 0x7416 <spi_read16>

int16_t spi_readS16(uint8_t addr, int pin)
{
	return (int16_t)spi_read16(addr, pin);
}
    7456:	08 95       	ret

00007458 <wind_initWindSpeed>:

static void timer1_init()
{
	
	// Starting timer 1 in normal mode
	TCCR1B= 0x00;
    7458:	e1 e8       	ldi	r30, 0x81	; 129
    745a:	f0 e0       	ldi	r31, 0x00	; 0
    745c:	10 82       	st	Z, r1
	TCCR1A= 0x00;
    745e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	// setting interrupt flag register to 0.
	TIFR1=0x00;
    7462:	16 ba       	out	0x16, r1	; 22
	// timer 1 setup with a pre-scalar of 256
	TCCR1B |=(1<<CS12);
    7464:	80 81       	ld	r24, Z
    7466:	84 60       	ori	r24, 0x04	; 4
    7468:	80 83       	st	Z, r24
	//Input capture on rising edge
	TCCR1B|=(1<<ICES1);
    746a:	80 81       	ld	r24, Z
    746c:	80 64       	ori	r24, 0x40	; 64
    746e:	80 83       	st	Z, r24
	
	// setting the timer/counter i/o locations to 0.
	TCNT1H=0x00;
    7470:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	TCNT1L=0x00;
    7474:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	// enabling input capture
	TIMSK1=(1<<ICIE1);
    7478:	80 e2       	ldi	r24, 0x20	; 32
    747a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	// enabling global interrupt
	sei();
    747e:	78 94       	sei
{
	// initialize timer
	timer1_init();

	// setting PB0 as input for
	DDRD |= (0<<PORTD5);
    7480:	8a b1       	in	r24, 0x0a	; 10
    7482:	8a b9       	out	0x0a, r24	; 10
	//Enable PB0 pull up resistor
	PORTD |= (1<<5);
    7484:	5d 9a       	sbi	0x0b, 5	; 11
    7486:	08 95       	ret

00007488 <wind_measureFrequency>:
	sei();
}

void restartTimer()
{
	TCNT1 = 0x00;
    7488:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    748c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
}

float wind_measureFrequency()
{
	restartTimer();
	if (flag>=2)
    7490:	80 91 ba 1b 	lds	r24, 0x1BBA	; 0x801bba <flag>
    7494:	82 30       	cpi	r24, 0x02	; 2
    7496:	00 f1       	brcs	.+64     	; 0x74d8 <wind_measureFrequency+0x50>
	{
		flag =0;
    7498:	10 92 ba 1b 	sts	0x1BBA, r1	; 0x801bba <flag>
		period= (t_2-t_1);
    749c:	80 91 48 1b 	lds	r24, 0x1B48	; 0x801b48 <t_2>
    74a0:	90 91 49 1b 	lds	r25, 0x1B49	; 0x801b49 <t_2+0x1>
    74a4:	20 91 4a 1b 	lds	r18, 0x1B4A	; 0x801b4a <t_1>
    74a8:	30 91 4b 1b 	lds	r19, 0x1B4B	; 0x801b4b <t_1+0x1>
    74ac:	82 1b       	sub	r24, r18
    74ae:	93 0b       	sbc	r25, r19
    74b0:	90 93 47 1b 	sts	0x1B47, r25	; 0x801b47 <period+0x1>
    74b4:	80 93 46 1b 	sts	0x1B46, r24	; 0x801b46 <period>
		TIFR1=(1<<ICF1);
    74b8:	80 e2       	ldi	r24, 0x20	; 32
    74ba:	86 bb       	out	0x16, r24	; 22
		
		
		
		return (16000000UL/period)/256;
    74bc:	20 91 46 1b 	lds	r18, 0x1B46	; 0x801b46 <period>
    74c0:	30 91 47 1b 	lds	r19, 0x1B47	; 0x801b47 <period+0x1>
    74c4:	40 e0       	ldi	r20, 0x00	; 0
    74c6:	50 e0       	ldi	r21, 0x00	; 0
    74c8:	64 e2       	ldi	r22, 0x24	; 36
    74ca:	74 ef       	ldi	r23, 0xF4	; 244
    74cc:	80 e0       	ldi	r24, 0x00	; 0
    74ce:	90 e0       	ldi	r25, 0x00	; 0
    74d0:	7b d7       	rcall	.+3830   	; 0x83c8 <__udivmodsi4>
    74d2:	ca 01       	movw	r24, r20
    74d4:	b9 01       	movw	r22, r18
    74d6:	ef c5       	rjmp	.+3038   	; 0x80b6 <__floatunsisf>
	}
	return -1;
    74d8:	60 e0       	ldi	r22, 0x00	; 0
    74da:	70 e0       	ldi	r23, 0x00	; 0
    74dc:	80 e8       	ldi	r24, 0x80	; 128
    74de:	9f eb       	ldi	r25, 0xBF	; 191
}
    74e0:	08 95       	ret

000074e2 <__vector_12>:

ISR (TIMER1_CAPT_vect)
{
    74e2:	1f 92       	push	r1
    74e4:	0f 92       	push	r0
    74e6:	0f b6       	in	r0, 0x3f	; 63
    74e8:	0f 92       	push	r0
    74ea:	11 24       	eor	r1, r1
    74ec:	8f 93       	push	r24
    74ee:	9f 93       	push	r25
	if (flag==0)
    74f0:	80 91 ba 1b 	lds	r24, 0x1BBA	; 0x801bba <flag>
    74f4:	81 11       	cpse	r24, r1
    74f6:	0b c0       	rjmp	.+22     	; 0x750e <__vector_12+0x2c>
	{
		t_1=ICR1;
    74f8:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    74fc:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    7500:	90 93 4b 1b 	sts	0x1B4B, r25	; 0x801b4b <t_1+0x1>
    7504:	80 93 4a 1b 	sts	0x1B4A, r24	; 0x801b4a <t_1>
		TIFR1=(1<<ICF1);
    7508:	80 e2       	ldi	r24, 0x20	; 32
    750a:	86 bb       	out	0x16, r24	; 22
    750c:	0e c0       	rjmp	.+28     	; 0x752a <__vector_12+0x48>

	}
	else if (flag==1)
    750e:	80 91 ba 1b 	lds	r24, 0x1BBA	; 0x801bba <flag>
    7512:	81 30       	cpi	r24, 0x01	; 1
    7514:	51 f4       	brne	.+20     	; 0x752a <__vector_12+0x48>
	{
		t_2= ICR1;
    7516:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    751a:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    751e:	90 93 49 1b 	sts	0x1B49, r25	; 0x801b49 <t_2+0x1>
    7522:	80 93 48 1b 	sts	0x1B48, r24	; 0x801b48 <t_2>
		TIFR1=(1<<ICF1);
    7526:	80 e2       	ldi	r24, 0x20	; 32
    7528:	86 bb       	out	0x16, r24	; 22
		
	}
	flag ++;
    752a:	80 91 ba 1b 	lds	r24, 0x1BBA	; 0x801bba <flag>
    752e:	8f 5f       	subi	r24, 0xFF	; 255
    7530:	80 93 ba 1b 	sts	0x1BBA, r24	; 0x801bba <flag>
    7534:	9f 91       	pop	r25
    7536:	8f 91       	pop	r24
    7538:	0f 90       	pop	r0
    753a:	0f be       	out	0x3f, r0	; 63
    753c:	0f 90       	pop	r0
    753e:	1f 90       	pop	r1
    7540:	18 95       	reti

00007542 <getInput>:
		}
	}
}

static void getInput(char *input)
{
    7542:	cf 92       	push	r12
    7544:	df 92       	push	r13
    7546:	ef 92       	push	r14
    7548:	ff 92       	push	r15
    754a:	0f 93       	push	r16
    754c:	1f 93       	push	r17
    754e:	cf 93       	push	r28
    7550:	6c 01       	movw	r12, r24
    7552:	8c 01       	movw	r16, r24
	char c;
	uint8_t i;
	for(i = 0; i < 16; i++) {
    7554:	c0 e0       	ldi	r28, 0x00	; 0
		c = getchar();
    7556:	0f 2e       	mov	r0, r31
    7558:	f4 ed       	ldi	r31, 0xD4	; 212
    755a:	ef 2e       	mov	r14, r31
    755c:	fe e1       	ldi	r31, 0x1E	; 30
    755e:	ff 2e       	mov	r15, r31
    7560:	f0 2d       	mov	r31, r0
    7562:	f7 01       	movw	r30, r14
    7564:	80 81       	ld	r24, Z
    7566:	91 81       	ldd	r25, Z+1	; 0x01
    7568:	0e 94 f1 45 	call	0x8be2	; 0x8be2 <fgetc>
		if (c == '\n') break;
    756c:	8a 30       	cpi	r24, 0x0A	; 10
    756e:	31 f0       	breq	.+12     	; 0x757c <getInput+0x3a>
		input[i] = c;
    7570:	f8 01       	movw	r30, r16
    7572:	81 93       	st	Z+, r24
    7574:	8f 01       	movw	r16, r30

static void getInput(char *input)
{
	char c;
	uint8_t i;
	for(i = 0; i < 16; i++) {
    7576:	cf 5f       	subi	r28, 0xFF	; 255
    7578:	c0 31       	cpi	r28, 0x10	; 16
    757a:	99 f7       	brne	.-26     	; 0x7562 <getInput+0x20>
		c = getchar();
		if (c == '\n') break;
		input[i] = c;
	}
	input[i] = '\0';
    757c:	f6 01       	movw	r30, r12
    757e:	ec 0f       	add	r30, r28
    7580:	f1 1d       	adc	r31, r1
    7582:	10 82       	st	Z, r1
}
    7584:	cf 91       	pop	r28
    7586:	1f 91       	pop	r17
    7588:	0f 91       	pop	r16
    758a:	ff 90       	pop	r15
    758c:	ef 90       	pop	r14
    758e:	df 90       	pop	r13
    7590:	cf 90       	pop	r12
    7592:	08 95       	ret

00007594 <adc_read>:
}

#define REF_AVCC (1<<REFS0)  // reference = AVCC = 3.3 V
uint16_t adc_read(uint8_t channel)
{
	ADMUX = REF_AVCC | channel;  // set reference and channel
    7594:	80 64       	ori	r24, 0x40	; 64
    7596:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1<<ADSC);         // start conversion
    759a:	ea e7       	ldi	r30, 0x7A	; 122
    759c:	f0 e0       	ldi	r31, 0x00	; 0
    759e:	80 81       	ld	r24, Z
    75a0:	80 64       	ori	r24, 0x40	; 64
    75a2:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC)); // wait for conversion complete
    75a4:	80 81       	ld	r24, Z
    75a6:	86 fd       	sbrc	r24, 6
    75a8:	fd cf       	rjmp	.-6      	; 0x75a4 <adc_read+0x10>
	return ADC;
    75aa:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    75ae:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
    75b2:	08 95       	ret

000075b4 <stringToIntArray>:
	eeprom_write_float(0x00, LargestDirectionValue);
	printf_P(PSTR("Calibration complete!\n"));
}

void stringToIntArray(uint8_t * array, char * string, uint8_t * eepromAddr)
{
    75b4:	8f 92       	push	r8
    75b6:	9f 92       	push	r9
    75b8:	af 92       	push	r10
    75ba:	bf 92       	push	r11
    75bc:	df 92       	push	r13
    75be:	ef 92       	push	r14
    75c0:	ff 92       	push	r15
    75c2:	0f 93       	push	r16
    75c4:	1f 93       	push	r17
    75c6:	cf 93       	push	r28
    75c8:	df 93       	push	r29
    75ca:	00 d0       	rcall	.+0      	; 0x75cc <stringToIntArray+0x18>
    75cc:	cd b7       	in	r28, 0x3d	; 61
    75ce:	de b7       	in	r29, 0x3e	; 62
    75d0:	7c 01       	movw	r14, r24
    75d2:	8a 01       	movw	r16, r20
	uint8_t i = 0;
	char * p = string;
    75d4:	7a 83       	std	Y+2, r23	; 0x02
    75d6:	69 83       	std	Y+1, r22	; 0x01
	printf_P(PSTR("Calibration complete!\n"));
}

void stringToIntArray(uint8_t * array, char * string, uint8_t * eepromAddr)
{
	uint8_t i = 0;
    75d8:	d1 2c       	mov	r13, r1
	char * p = string;
	while(*p) {
    75da:	29 c0       	rjmp	.+82     	; 0x762e <stringToIntArray+0x7a>
		if ( isdigit(*p) || ( (*p=='-'||*p=='+') && isdigit(*(p+1)) )) {
    75dc:	28 2f       	mov	r18, r24
    75de:	30 e0       	ldi	r19, 0x00	; 0
    75e0:	20 53       	subi	r18, 0x30	; 48
    75e2:	31 09       	sbc	r19, r1
    75e4:	2a 30       	cpi	r18, 0x0A	; 10
    75e6:	31 05       	cpc	r19, r1
    75e8:	48 f0       	brcs	.+18     	; 0x75fc <stringToIntArray+0x48>
    75ea:	8d 32       	cpi	r24, 0x2D	; 45
    75ec:	11 f0       	breq	.+4      	; 0x75f2 <stringToIntArray+0x3e>
    75ee:	8b 32       	cpi	r24, 0x2B	; 43
    75f0:	d9 f4       	brne	.+54     	; 0x7628 <stringToIntArray+0x74>
    75f2:	81 81       	ldd	r24, Z+1	; 0x01
    75f4:	90 e0       	ldi	r25, 0x00	; 0
    75f6:	c0 97       	sbiw	r24, 0x30	; 48
    75f8:	0a 97       	sbiw	r24, 0x0a	; 10
    75fa:	b0 f4       	brcc	.+44     	; 0x7628 <stringToIntArray+0x74>
			array[i] = strtol(p, &p, 10);
    75fc:	8d 2c       	mov	r8, r13
    75fe:	91 2c       	mov	r9, r1
    7600:	57 01       	movw	r10, r14
    7602:	a8 0c       	add	r10, r8
    7604:	b9 1c       	adc	r11, r9
    7606:	4a e0       	ldi	r20, 0x0A	; 10
    7608:	50 e0       	ldi	r21, 0x00	; 0
    760a:	be 01       	movw	r22, r28
    760c:	6f 5f       	subi	r22, 0xFF	; 255
    760e:	7f 4f       	sbci	r23, 0xFF	; 255
    7610:	cf 01       	movw	r24, r30
    7612:	0e 94 49 44 	call	0x8892	; 0x8892 <strtol>
    7616:	f5 01       	movw	r30, r10
    7618:	60 83       	st	Z, r22
			eeprom_write_byte((uint8_t*)eepromAddr+i, array[i]);
    761a:	c8 01       	movw	r24, r16
    761c:	88 0d       	add	r24, r8
    761e:	99 1d       	adc	r25, r9
    7620:	0e 94 78 4f 	call	0x9ef0	; 0x9ef0 <eeprom_write_byte>
			i++;
    7624:	d3 94       	inc	r13
    7626:	03 c0       	rjmp	.+6      	; 0x762e <stringToIntArray+0x7a>
			} else {
			p++;
    7628:	31 96       	adiw	r30, 0x01	; 1
    762a:	fa 83       	std	Y+2, r31	; 0x02
    762c:	e9 83       	std	Y+1, r30	; 0x01

void stringToIntArray(uint8_t * array, char * string, uint8_t * eepromAddr)
{
	uint8_t i = 0;
	char * p = string;
	while(*p) {
    762e:	e9 81       	ldd	r30, Y+1	; 0x01
    7630:	fa 81       	ldd	r31, Y+2	; 0x02
    7632:	80 81       	ld	r24, Z
    7634:	81 11       	cpse	r24, r1
    7636:	d2 cf       	rjmp	.-92     	; 0x75dc <stringToIntArray+0x28>
			i++;
			} else {
			p++;
		}
	}
}
    7638:	0f 90       	pop	r0
    763a:	0f 90       	pop	r0
    763c:	df 91       	pop	r29
    763e:	cf 91       	pop	r28
    7640:	1f 91       	pop	r17
    7642:	0f 91       	pop	r16
    7644:	ff 90       	pop	r15
    7646:	ef 90       	pop	r14
    7648:	df 90       	pop	r13
    764a:	bf 90       	pop	r11
    764c:	af 90       	pop	r10
    764e:	9f 90       	pop	r9
    7650:	8f 90       	pop	r8
    7652:	08 95       	ret

00007654 <__vector_6>:
uint8_t runOnce = 0;
char humidChar[10],tempChar[10],pressChar[16],anglChar[10],speedChar[10];
int page = 1;

ISR(PCINT2_vect)
{
    7654:	1f 92       	push	r1
    7656:	0f 92       	push	r0
    7658:	0f b6       	in	r0, 0x3f	; 63
    765a:	0f 92       	push	r0
    765c:	11 24       	eor	r1, r1
    765e:	0b b6       	in	r0, 0x3b	; 59
    7660:	0f 92       	push	r0
    7662:	2f 93       	push	r18
    7664:	3f 93       	push	r19
    7666:	4f 93       	push	r20
    7668:	5f 93       	push	r21
    766a:	6f 93       	push	r22
    766c:	7f 93       	push	r23
    766e:	8f 93       	push	r24
    7670:	9f 93       	push	r25
    7672:	af 93       	push	r26
    7674:	bf 93       	push	r27
    7676:	ef 93       	push	r30
    7678:	ff 93       	push	r31
	if((PINC&(1 << PINC4)) == 0)
    767a:	34 99       	sbic	0x06, 4	; 6
    767c:	41 c0       	rjmp	.+130    	; 0x7700 <__vector_6+0xac>
	{
		if((PINC&(1 << PINC7)) == 0)
    767e:	37 99       	sbic	0x06, 7	; 6
    7680:	15 c0       	rjmp	.+42     	; 0x76ac <__vector_6+0x58>
		{
			if(brightness + 25 > 255)
    7682:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <brightness>
    7686:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <brightness+0x1>
    768a:	49 96       	adiw	r24, 0x19	; 25
    768c:	8f 3f       	cpi	r24, 0xFF	; 255
    768e:	91 05       	cpc	r25, r1
    7690:	41 f0       	breq	.+16     	; 0x76a2 <__vector_6+0x4e>
    7692:	3c f0       	brlt	.+14     	; 0x76a2 <__vector_6+0x4e>
			{
				brightness = 255;
    7694:	8f ef       	ldi	r24, 0xFF	; 255
    7696:	90 e0       	ldi	r25, 0x00	; 0
    7698:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <brightness+0x1>
    769c:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <brightness>
    76a0:	2f c0       	rjmp	.+94     	; 0x7700 <__vector_6+0xac>
			}
			else
			{
				brightness += 25;
    76a2:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <brightness+0x1>
    76a6:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <brightness>
    76aa:	2a c0       	rjmp	.+84     	; 0x7700 <__vector_6+0xac>
			}
		}
		else if((PINC&(1 << PINC6)) == 0)
    76ac:	36 99       	sbic	0x06, 6	; 6
    76ae:	10 c0       	rjmp	.+32     	; 0x76d0 <__vector_6+0x7c>
		{
			if(brightness - 25 < 0)
    76b0:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <brightness>
    76b4:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <brightness+0x1>
    76b8:	49 97       	sbiw	r24, 0x19	; 25
    76ba:	2a f4       	brpl	.+10     	; 0x76c6 <__vector_6+0x72>
			{
				brightness = 0;
    76bc:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <brightness+0x1>
    76c0:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <brightness>
    76c4:	1d c0       	rjmp	.+58     	; 0x7700 <__vector_6+0xac>
			}
			else
			{
				brightness -= 25;
    76c6:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <brightness+0x1>
    76ca:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <brightness>
    76ce:	18 c0       	rjmp	.+48     	; 0x7700 <__vector_6+0xac>
			}
		}
		else
		{
			page++;
    76d0:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <page>
    76d4:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <page+0x1>
    76d8:	01 96       	adiw	r24, 0x01	; 1
			if(page >= 4) page = 1;
    76da:	84 30       	cpi	r24, 0x04	; 4
    76dc:	91 05       	cpc	r25, r1
    76de:	2c f4       	brge	.+10     	; 0x76ea <__vector_6+0x96>
				brightness -= 25;
			}
		}
		else
		{
			page++;
    76e0:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <page+0x1>
    76e4:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <page>
    76e8:	06 c0       	rjmp	.+12     	; 0x76f6 <__vector_6+0xa2>
			if(page >= 4) page = 1;
    76ea:	81 e0       	ldi	r24, 0x01	; 1
    76ec:	90 e0       	ldi	r25, 0x00	; 0
    76ee:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <page+0x1>
    76f2:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <page>
		
			printPage(page);
    76f6:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <page>
    76fa:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <page+0x1>
    76fe:	9d d9       	rcall	.-3270   	; 0x6a3a <printPage>
		}
	}
}
    7700:	ff 91       	pop	r31
    7702:	ef 91       	pop	r30
    7704:	bf 91       	pop	r27
    7706:	af 91       	pop	r26
    7708:	9f 91       	pop	r25
    770a:	8f 91       	pop	r24
    770c:	7f 91       	pop	r23
    770e:	6f 91       	pop	r22
    7710:	5f 91       	pop	r21
    7712:	4f 91       	pop	r20
    7714:	3f 91       	pop	r19
    7716:	2f 91       	pop	r18
    7718:	0f 90       	pop	r0
    771a:	0b be       	out	0x3b, r0	; 59
    771c:	0f 90       	pop	r0
    771e:	0f be       	out	0x3f, r0	; 63
    7720:	0f 90       	pop	r0
    7722:	1f 90       	pop	r1
    7724:	18 95       	reti

00007726 <main>:

int main(void)
{	
    7726:	cf 93       	push	r28
    7728:	df 93       	push	r29
    772a:	cd b7       	in	r28, 0x3d	; 61
    772c:	de b7       	in	r29, 0x3e	; 62
    772e:	64 97       	sbiw	r28, 0x14	; 20
    7730:	0f b6       	in	r0, 0x3f	; 63
    7732:	f8 94       	cli
    7734:	de bf       	out	0x3e, r29	; 62
    7736:	0f be       	out	0x3f, r0	; 63
    7738:	cd bf       	out	0x3d, r28	; 61
	// init arrays
	//memset(bullets, 0, 32);
	//
 	DDRD = 0b10111100;
    773a:	8c eb       	ldi	r24, 0xBC	; 188
    773c:	8a b9       	out	0x0a, r24	; 10
 	DDRA |= (1 << PINA1);
    773e:	09 9a       	sbi	0x01, 1	; 1
	PORTA |= (1 << PINA1);
    7740:	11 9a       	sbi	0x02, 1	; 2
	PORTD = 0b00111100;
    7742:	8c e3       	ldi	r24, 0x3C	; 60
    7744:	8b b9       	out	0x0b, r24	; 11
    7746:	2f ef       	ldi	r18, 0xFF	; 255
    7748:	39 e6       	ldi	r19, 0x69	; 105
    774a:	88 e1       	ldi	r24, 0x18	; 24
    774c:	21 50       	subi	r18, 0x01	; 1
    774e:	30 40       	sbci	r19, 0x00	; 0
    7750:	80 40       	sbci	r24, 0x00	; 0
    7752:	e1 f7       	brne	.-8      	; 0x774c <main+0x26>
    7754:	00 c0       	rjmp	.+0      	; 0x7756 <main+0x30>
    7756:	00 00       	nop
	_delay_ms(500);
 	PORTD &= 0b11000111;
    7758:	8b b1       	in	r24, 0x0b	; 11
    775a:	87 7c       	andi	r24, 0xC7	; 199
    775c:	8b b9       	out	0x0b, r24	; 11
 	PORTA &= ~(1 << PINA1);
    775e:	11 98       	cbi	0x02, 1	; 2
	PORTD &= ~(1 << PIND5);
    7760:	5d 98       	cbi	0x0b, 5	; 11

// 	uart_init();
// 	stdout = &uart_output;
// 	stdin  = &uart_input;
// 	puts_P(PSTR("Initializing"));
 	DDRC |= (0 << PINC6);
    7762:	87 b1       	in	r24, 0x07	; 7
    7764:	87 b9       	out	0x07, r24	; 7
 	PORTC |= (1 << PINC6);
    7766:	46 9a       	sbi	0x08, 6	; 8
	DDRC |= (0 << PINC7);
    7768:	87 b1       	in	r24, 0x07	; 7
    776a:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PINC7);
    776c:	47 9a       	sbi	0x08, 7	; 8
	DDRC |= (0 << PINC4);
    776e:	87 b1       	in	r24, 0x07	; 7
    7770:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PINC4);
    7772:	44 9a       	sbi	0x08, 4	; 8
	
	 DDRD |= (1 << DDD7);
    7774:	57 9a       	sbi	0x0a, 7	; 10
	 // PD6 is now an output

	 OCR2A = brightness;
    7776:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <brightness>
    777a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	 // set PWM for 50% duty cycle


	 TCCR2A |= (1 << COM2A1);
    777e:	e0 eb       	ldi	r30, 0xB0	; 176
    7780:	f0 e0       	ldi	r31, 0x00	; 0
    7782:	80 81       	ld	r24, Z
    7784:	80 68       	ori	r24, 0x80	; 128
    7786:	80 83       	st	Z, r24
	 // set none-inverting mode

	 TCCR2A |= (1 << WGM21) | (1 << WGM20);
    7788:	80 81       	ld	r24, Z
    778a:	83 60       	ori	r24, 0x03	; 3
    778c:	80 83       	st	Z, r24
	 // set fast PWM Mode

	 TCCR2B |= (1 << CS21);
    778e:	e1 eb       	ldi	r30, 0xB1	; 177
    7790:	f0 e0       	ldi	r31, 0x00	; 0
    7792:	80 81       	ld	r24, Z
    7794:	82 60       	ori	r24, 0x02	; 2
    7796:	80 83       	st	Z, r24
	 // set prescaler to 8 and starts PWM
	 
	spi_init_master();
    7798:	06 de       	rcall	.-1012   	; 0x73a6 <spi_init_master>
 	N5110_init();
    779a:	ec d8       	rcall	.-3624   	; 0x6974 <N5110_init>
	N5110_clear();
    779c:	1b d9       	rcall	.-3530   	; 0x69d4 <N5110_clear>
    779e:	57 9a       	sbi	0x0a, 7	; 10
	
	DDRD |= (1 << PIND7);
    77a0:	34 99       	sbic	0x06, 4	; 6
	if((PINC&(1 << PINC4)) == 0 && (PINC&(1 << PINC6)) == 0) // Check for both calibration buttons pressed
    77a2:	02 c0       	rjmp	.+4      	; 0x77a8 <main+0x82>
    77a4:	36 9b       	sbis	0x06, 6	; 6
	{
		SpaceStart();
    77a6:	a5 db       	rcall	.-2230   	; 0x6ef2 <SpaceStart>
    77a8:	a8 95       	wdr
	}
	
	wdt_reset();
    77aa:	9f e0       	ldi	r25, 0x0F	; 15
    77ac:	88 e1       	ldi	r24, 0x18	; 24
    77ae:	0f b6       	in	r0, 0x3f	; 63
    77b0:	f8 94       	cli
    77b2:	a8 95       	wdr
    77b4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    77b8:	0f be       	out	0x3f, r0	; 63
    77ba:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    77be:	21 9a       	sbi	0x04, 1	; 4
	wdt_enable(WDTO_2S);
		
	DDRB |= (1 << SD_CS);
	PORT_CS |= (1<<HIH_CS);
    77c0:	2c 9a       	sbi	0x05, 4	; 5
	PORT_CS |= (1<<BMP_CS);
    77c2:	2b 9a       	sbi	0x05, 3	; 5
	PORT_CS |= (1<<SD_CS);
    77c4:	29 9a       	sbi	0x05, 1	; 5
 	i2c_init();
    77c6:	42 d8       	rcall	.-3964   	; 0x684c <i2c_init>
    77c8:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <bmp280_init>
 	bmp280_init();
	wind_initWindSpeed();
    77cc:	45 de       	rcall	.-886    	; 0x7458 <wind_initWindSpeed>
    77ce:	ea e7       	ldi	r30, 0x7A	; 122

int brightness = 128;

static void initADC()
{
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
    77d0:	f0 e0       	ldi	r31, 0x00	; 0
    77d2:	80 81       	ld	r24, Z
    77d4:	87 68       	ori	r24, 0x87	; 135
    77d6:	80 83       	st	Z, r24
    77d8:	ec e7       	ldi	r30, 0x7C	; 124
	ADMUX |= (1 << REFS0) | (1 << MUX1);
    77da:	f0 e0       	ldi	r31, 0x00	; 0
    77dc:	80 81       	ld	r24, Z
    77de:	82 64       	ori	r24, 0x42	; 66
    77e0:	80 83       	st	Z, r24
    77e2:	0f 2e       	mov	r0, r31
    77e4:	f4 e2       	ldi	r31, 0x24	; 36
    77e6:	cf 2e       	mov	r12, r31
    77e8:	f1 e0       	ldi	r31, 0x01	; 1
    77ea:	df 2e       	mov	r13, r31
    77ec:	f0 2d       	mov	r31, r0
    77ee:	0f 2e       	mov	r0, r31
    77f0:	fe e0       	ldi	r31, 0x0E	; 14
    77f2:	ef 2e       	mov	r14, r31
    77f4:	f1 e0       	ldi	r31, 0x01	; 1
    77f6:	ff 2e       	mov	r15, r31
    77f8:	f0 2d       	mov	r31, r0
    77fa:	00 e2       	ldi	r16, 0x20	; 32
    77fc:	10 e0       	ldi	r17, 0x00	; 0
    77fe:	c8 01       	movw	r24, r16
		
	// Read IP values from eeprom
		for(uint8_t i = 0; i<4; i++)
		{
			uint8_t temp;
			temp = eeprom_read_byte((uint8_t*)0x20+i);
    7800:	0e 94 5d 4f 	call	0x9eba	; 0x9eba <eeprom_read_byte>
    7804:	8f 3f       	cpi	r24, 0xFF	; 255
			if(temp == 255)	break;
    7806:	79 f0       	breq	.+30     	; 0x7826 <main+0x100>
    7808:	f6 01       	movw	r30, r12
			myip[i] = eeprom_read_byte((uint8_t*)0x20+i);
    780a:	81 93       	st	Z+, r24
    780c:	6f 01       	movw	r12, r30
    780e:	c8 01       	movw	r24, r16
			gwip[i] = eeprom_read_byte((uint8_t*)0x40+i);
    7810:	80 96       	adiw	r24, 0x20	; 32
    7812:	0e 94 5d 4f 	call	0x9eba	; 0x9eba <eeprom_read_byte>
    7816:	f7 01       	movw	r30, r14
    7818:	81 93       	st	Z+, r24
    781a:	7f 01       	movw	r14, r30
    781c:	0f 5f       	subi	r16, 0xFF	; 255
    781e:	1f 4f       	sbci	r17, 0xFF	; 255
    7820:	04 32       	cpi	r16, 0x24	; 36
 	bmp280_init();
	wind_initWindSpeed();
	initADC();
		
	// Read IP values from eeprom
		for(uint8_t i = 0; i<4; i++)
    7822:	11 05       	cpc	r17, r1
    7824:	61 f7       	brne	.-40     	; 0x77fe <main+0xd8>
    7826:	40 e1       	ldi	r20, 0x10	; 16
			temp = eeprom_read_byte((uint8_t*)0x20+i);
			if(temp == 255)	break;
			myip[i] = eeprom_read_byte((uint8_t*)0x20+i);
			gwip[i] = eeprom_read_byte((uint8_t*)0x40+i);
		}
		eeprom_read_block((void*)serverip, (const void*)0x30, 16);
    7828:	50 e0       	ldi	r21, 0x00	; 0
    782a:	60 e3       	ldi	r22, 0x30	; 48
    782c:	70 e0       	ldi	r23, 0x00	; 0
    782e:	84 e1       	ldi	r24, 0x14	; 20
    7830:	91 e0       	ldi	r25, 0x01	; 1
    7832:	0e 94 4d 4f 	call	0x9e9a	; 0x9e9a <eeprom_read_block>
    7836:	80 e6       	ldi	r24, 0x60	; 96
	//
	halleff = eeprom_read_word((const void*)0x60);
    7838:	90 e0       	ldi	r25, 0x00	; 0
    783a:	0e 94 6a 4f 	call	0x9ed4	; 0x9ed4 <eeprom_read_word>
    783e:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <halleff+0x1>
    7842:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <halleff>
    7846:	a8 95       	wdr

	// calibration
	wdt_reset();
    7848:	36 99       	sbic	0x06, 6	; 6
	if((PINC&(1 << PINC6)) == 0)
    784a:	5a c0       	rjmp	.+180    	; 0x7900 <main+0x1da>
    784c:	83 e5       	ldi	r24, 0x53	; 83
}

int16_t LargestDirectionValue;
static void calibration()
{
	printf_P(PSTR("Calibration started!\n"));
    784e:	94 e1       	ldi	r25, 0x14	; 20
    7850:	9f 93       	push	r25
    7852:	8f 93       	push	r24
    7854:	0e 94 42 46 	call	0x8c84	; 0x8c84 <printf_P>
	lcd_setXY(0x40,0x80);
    7858:	60 e8       	ldi	r22, 0x80	; 128
    785a:	80 e4       	ldi	r24, 0x40	; 64
    785c:	b4 d8       	rcall	.-3736   	; 0x69c6 <lcd_setXY>
	N5110_Data("Calibration");
    785e:	8c e4       	ldi	r24, 0x4C	; 76
    7860:	94 e0       	ldi	r25, 0x04	; 4
    7862:	3d d8       	rcall	.-3974   	; 0x68de <N5110_Data>
 	lcd_setXY(0x41,0x80);
    7864:	60 e8       	ldi	r22, 0x80	; 128
    7866:	81 e4       	ldi	r24, 0x41	; 65
    7868:	ae d8       	rcall	.-3748   	; 0x69c6 <lcd_setXY>
    786a:	88 e5       	ldi	r24, 0x58	; 88
 	N5110_Data("Started");
    786c:	94 e0       	ldi	r25, 0x04	; 4
    786e:	37 d8       	rcall	.-3986   	; 0x68de <N5110_Data>
    7870:	0f 90       	pop	r0
    7872:	0f 90       	pop	r0
    7874:	27 c0       	rjmp	.+78     	; 0x78c4 <main+0x19e>
    7876:	a8 95       	wdr
	while(adc_read(0)+50 >= LargestDirectionValue)
	{
		wdt_reset();
    7878:	80 e0       	ldi	r24, 0x00	; 0
		if(adc_read(0) > LargestDirectionValue)
    787a:	8c de       	rcall	.-744    	; 0x7594 <adc_read>
    787c:	20 91 f9 1d 	lds	r18, 0x1DF9	; 0x801df9 <LargestDirectionValue>
    7880:	30 91 fa 1d 	lds	r19, 0x1DFA	; 0x801dfa <LargestDirectionValue+0x1>
    7884:	28 17       	cp	r18, r24
    7886:	39 07       	cpc	r19, r25
    7888:	b0 f4       	brcc	.+44     	; 0x78b6 <main+0x190>
    788a:	5b 9a       	sbi	0x0b, 3	; 11
		{
			PORTD |= (1 << PIND3);
    788c:	80 e0       	ldi	r24, 0x00	; 0
			LargestDirectionValue = adc_read(0);
    788e:	82 de       	rcall	.-764    	; 0x7594 <adc_read>
    7890:	90 93 fa 1d 	sts	0x1DFA, r25	; 0x801dfa <LargestDirectionValue+0x1>
    7894:	80 93 f9 1d 	sts	0x1DF9, r24	; 0x801df9 <LargestDirectionValue>
    7898:	bc 01       	movw	r22, r24
			dtostrf(LargestDirectionValue,1,2,pressChar);
    789a:	99 0f       	add	r25, r25
    789c:	88 0b       	sbc	r24, r24
    789e:	99 0b       	sbc	r25, r25
    78a0:	0c d4       	rcall	.+2072   	; 0x80ba <__floatsisf>
    78a2:	0a e1       	ldi	r16, 0x1A	; 26
    78a4:	1e e1       	ldi	r17, 0x1E	; 30
    78a6:	22 e0       	ldi	r18, 0x02	; 2
    78a8:	41 e0       	ldi	r20, 0x01	; 1
    78aa:	7e d7       	rcall	.+3836   	; 0x87a8 <dtostrf>
			lcd_setXY(0x43,0x80);
    78ac:	60 e8       	ldi	r22, 0x80	; 128
    78ae:	83 e4       	ldi	r24, 0x43	; 67
    78b0:	8a d8       	rcall	.-3820   	; 0x69c6 <lcd_setXY>
    78b2:	c8 01       	movw	r24, r16
			N5110_Data(pressChar);
    78b4:	14 d8       	rcall	.-4056   	; 0x68de <N5110_Data>
    78b6:	87 ee       	ldi	r24, 0xE7	; 231
    78b8:	93 e0       	ldi	r25, 0x03	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    78ba:	01 97       	sbiw	r24, 0x01	; 1
    78bc:	f1 f7       	brne	.-4      	; 0x78ba <main+0x194>
    78be:	00 c0       	rjmp	.+0      	; 0x78c0 <main+0x19a>
    78c0:	00 00       	nop
    78c2:	5b 98       	cbi	0x0b, 3	; 11
		}
		_delay_us(250);
		PORTD &= ~(1 << PIND3);
    78c4:	80 e0       	ldi	r24, 0x00	; 0
	printf_P(PSTR("Calibration started!\n"));
	lcd_setXY(0x40,0x80);
	N5110_Data("Calibration");
 	lcd_setXY(0x41,0x80);
 	N5110_Data("Started");
	while(adc_read(0)+50 >= LargestDirectionValue)
    78c6:	66 de       	rcall	.-820    	; 0x7594 <adc_read>
    78c8:	60 91 f9 1d 	lds	r22, 0x1DF9	; 0x801df9 <LargestDirectionValue>
    78cc:	70 91 fa 1d 	lds	r23, 0x1DFA	; 0x801dfa <LargestDirectionValue+0x1>
    78d0:	c2 96       	adiw	r24, 0x32	; 50
    78d2:	86 17       	cp	r24, r22
    78d4:	97 07       	cpc	r25, r23
    78d6:	78 f6       	brcc	.-98     	; 0x7876 <main+0x150>
    78d8:	07 2e       	mov	r0, r23
			N5110_Data(pressChar);
		}
		_delay_us(250);
		PORTD &= ~(1 << PIND3);
	}
	eeprom_write_float(0x00, LargestDirectionValue);
    78da:	00 0c       	add	r0, r0
    78dc:	88 0b       	sbc	r24, r24
    78de:	99 0b       	sbc	r25, r25
    78e0:	ec d3       	rcall	.+2008   	; 0x80ba <__floatsisf>
    78e2:	ab 01       	movw	r20, r22
    78e4:	bc 01       	movw	r22, r24
    78e6:	80 e0       	ldi	r24, 0x00	; 0
    78e8:	90 e0       	ldi	r25, 0x00	; 0
    78ea:	0e 94 86 4f 	call	0x9f0c	; 0x9f0c <eeprom_write_dword>
    78ee:	8c e3       	ldi	r24, 0x3C	; 60
    78f0:	94 e1       	ldi	r25, 0x14	; 20
	printf_P(PSTR("Calibration complete!\n"));
    78f2:	9f 93       	push	r25
    78f4:	8f 93       	push	r24
    78f6:	0e 94 42 46 	call	0x8c84	; 0x8c84 <printf_P>
    78fa:	0f 90       	pop	r0
    78fc:	0f 90       	pop	r0
    78fe:	09 c0       	rjmp	.+18     	; 0x7912 <main+0x1ec>
    7900:	80 e0       	ldi	r24, 0x00	; 0
	if((PINC&(1 << PINC6)) == 0)
	{
		calibration();
	}
	else {
		LargestDirectionValue = eeprom_read_float(0x00);
    7902:	90 e0       	ldi	r25, 0x00	; 0
    7904:	0e 94 65 4f 	call	0x9eca	; 0x9eca <eeprom_read_dword>
    7908:	a1 d3       	rcall	.+1858   	; 0x804c <__fixsfsi>
    790a:	70 93 fa 1d 	sts	0x1DFA, r23	; 0x801dfa <LargestDirectionValue+0x1>
    790e:	60 93 f9 1d 	sts	0x1DF9, r22	; 0x801df9 <LargestDirectionValue>
    7912:	37 99       	sbic	0x06, 7	; 6
	}
	
		if((PINC&(1 << PINC7)) == 0)
    7914:	71 c0       	rjmp	.+226    	; 0x79f8 <main+0x2d2>
    7916:	0f b6       	in	r0, 0x3f	; 63
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    7918:	f8 94       	cli
    791a:	a8 95       	wdr
    791c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    7920:	88 61       	ori	r24, 0x18	; 24
    7922:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    7926:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    792a:	0f be       	out	0x3f, r0	; 63

static void ipconfig()
{
	static char input[16];
	
	lcd_setXY(0x40,0x80);
    792c:	60 e8       	ldi	r22, 0x80	; 128
    792e:	80 e4       	ldi	r24, 0x40	; 64
    7930:	4a d8       	rcall	.-3948   	; 0x69c6 <lcd_setXY>
    7932:	8c e4       	ldi	r24, 0x4C	; 76
	N5110_Data("Calibration");
    7934:	94 e0       	ldi	r25, 0x04	; 4
    7936:	0e 94 6f 34 	call	0x68de	; 0x68de <N5110_Data>
    793a:	60 e8       	ldi	r22, 0x80	; 128
	lcd_setXY(0x41,0x80);
    793c:	81 e4       	ldi	r24, 0x41	; 65
    793e:	43 d8       	rcall	.-3962   	; 0x69c6 <lcd_setXY>
    7940:	88 e5       	ldi	r24, 0x58	; 88
    7942:	94 e0       	ldi	r25, 0x04	; 4
	N5110_Data("Started");
    7944:	0e 94 6f 34 	call	0x68de	; 0x68de <N5110_Data>
    7948:	80 e6       	ldi	r24, 0x60	; 96

	puts("Input arduino IP");
    794a:	94 e0       	ldi	r25, 0x04	; 4
    794c:	0e 94 69 46 	call	0x8cd2	; 0x8cd2 <puts>
    7950:	8c e4       	ldi	r24, 0x4C	; 76
	getInput(input);
    7952:	9b e1       	ldi	r25, 0x1B	; 27
    7954:	f6 dd       	rcall	.-1044   	; 0x7542 <getInput>
    7956:	0c e4       	ldi	r16, 0x4C	; 76
    7958:	1b e1       	ldi	r17, 0x1B	; 27
	printf("Arduino IP: %s\n", input);
    795a:	1f 93       	push	r17
    795c:	0f 93       	push	r16
    795e:	81 e7       	ldi	r24, 0x71	; 113
    7960:	94 e0       	ldi	r25, 0x04	; 4
    7962:	9f 93       	push	r25
    7964:	8f 93       	push	r24
    7966:	0e 94 2f 46 	call	0x8c5e	; 0x8c5e <printf>
    796a:	40 e2       	ldi	r20, 0x20	; 32
	stringToIntArray(myip, input, (uint8_t*)0x20);
    796c:	50 e0       	ldi	r21, 0x00	; 0
    796e:	b8 01       	movw	r22, r16
    7970:	84 e2       	ldi	r24, 0x24	; 36
    7972:	91 e0       	ldi	r25, 0x01	; 1
    7974:	1f de       	rcall	.-962    	; 0x75b4 <stringToIntArray>
    7976:	81 e8       	ldi	r24, 0x81	; 129
	
	puts("Input server IP");
    7978:	94 e0       	ldi	r25, 0x04	; 4
    797a:	0e 94 69 46 	call	0x8cd2	; 0x8cd2 <puts>
    797e:	c8 01       	movw	r24, r16
	getInput(input);
    7980:	e0 dd       	rcall	.-1088   	; 0x7542 <getInput>
    7982:	1f 93       	push	r17
    7984:	0f 93       	push	r16
	printf("Server IP: %s\n", input);
    7986:	81 e9       	ldi	r24, 0x91	; 145
    7988:	94 e0       	ldi	r25, 0x04	; 4
    798a:	9f 93       	push	r25
    798c:	8f 93       	push	r24
    798e:	0e 94 2f 46 	call	0x8c5e	; 0x8c5e <printf>
    7992:	b8 01       	movw	r22, r16
    7994:	84 e1       	ldi	r24, 0x14	; 20
	sprintf(serverip, "%s", input);
    7996:	91 e0       	ldi	r25, 0x01	; 1
    7998:	0e 94 b0 45 	call	0x8b60	; 0x8b60 <strcpy>
    799c:	40 e1       	ldi	r20, 0x10	; 16
	eeprom_write_block((const void*)input, (void*)0x30, 16);
    799e:	50 e0       	ldi	r21, 0x00	; 0
    79a0:	60 e3       	ldi	r22, 0x30	; 48
    79a2:	70 e0       	ldi	r23, 0x00	; 0
    79a4:	c8 01       	movw	r24, r16
    79a6:	0e 94 6f 4f 	call	0x9ede	; 0x9ede <eeprom_write_block>
    79aa:	80 ea       	ldi	r24, 0xA0	; 160
	
	puts("Input gateway IP");
    79ac:	94 e0       	ldi	r25, 0x04	; 4
    79ae:	0e 94 69 46 	call	0x8cd2	; 0x8cd2 <puts>
    79b2:	c8 01       	movw	r24, r16
	getInput(input);
    79b4:	c6 dd       	rcall	.-1140   	; 0x7542 <getInput>
    79b6:	1f 93       	push	r17
	printf("Gateway IP: %s\n", input);
    79b8:	0f 93       	push	r16
    79ba:	81 eb       	ldi	r24, 0xB1	; 177
    79bc:	94 e0       	ldi	r25, 0x04	; 4
    79be:	9f 93       	push	r25
    79c0:	8f 93       	push	r24
    79c2:	0e 94 2f 46 	call	0x8c5e	; 0x8c5e <printf>
    79c6:	40 e4       	ldi	r20, 0x40	; 64
	stringToIntArray(gwip, input, (uint8_t*)0x40);
    79c8:	50 e0       	ldi	r21, 0x00	; 0
    79ca:	b8 01       	movw	r22, r16
    79cc:	8e e0       	ldi	r24, 0x0E	; 14
    79ce:	91 e0       	ldi	r25, 0x01	; 1
    79d0:	f1 dd       	rcall	.-1054   	; 0x75b4 <stringToIntArray>
    79d2:	a8 95       	wdr
    79d4:	9f e0       	ldi	r25, 0x0F	; 15
	
		if((PINC&(1 << PINC7)) == 0)
		{
			wdt_disable();
			ipconfig();
			wdt_reset();
    79d6:	88 e1       	ldi	r24, 0x18	; 24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    79d8:	0f b6       	in	r0, 0x3f	; 63
    79da:	f8 94       	cli
    79dc:	a8 95       	wdr
    79de:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    79e2:	0f be       	out	0x3f, r0	; 63
    79e4:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    79e8:	ed b7       	in	r30, 0x3d	; 61
    79ea:	fe b7       	in	r31, 0x3e	; 62
    79ec:	3c 96       	adiw	r30, 0x0c	; 12
    79ee:	0f b6       	in	r0, 0x3f	; 63
    79f0:	f8 94       	cli
    79f2:	fe bf       	out	0x3e, r31	; 62
    79f4:	0f be       	out	0x3f, r0	; 63
    79f6:	ed bf       	out	0x3d, r30	; 61
    79f8:	80 e1       	ldi	r24, 0x10	; 16
    79fa:	90 e0       	ldi	r25, 0x00	; 0
			wdt_enable(WDTO_2S);
		}
// 		//
 	timeout = eeprom_read_word((uint16_t*)0x10);
    79fc:	0e 94 6a 4f 	call	0x9ed4	; 0x9ed4 <eeprom_read_word>
    7a00:	90 93 0d 1e 	sts	0x1E0D, r25	; 0x801e0d <timeout+0x1>
    7a04:	80 93 0c 1e 	sts	0x1E0C, r24	; 0x801e0c <timeout>
    7a08:	a8 95       	wdr
    7a0a:	5d 9a       	sbi	0x0b, 5	; 11
	wdt_reset();
    7a0c:	29 98       	cbi	0x05, 1	; 5
	PORTD |= (1 << PIND5);
    7a0e:	40 e0       	ldi	r20, 0x00	; 0
	PORT_CS &= ~(1<<SD_CS);
    7a10:	6f e5       	ldi	r22, 0x5F	; 95
	f_mount(&FatFs, "", 0);
    7a12:	75 e0       	ldi	r23, 0x05	; 5
    7a14:	8f eb       	ldi	r24, 0xBF	; 191
    7a16:	9b e1       	ldi	r25, 0x1B	; 27
    7a18:	0e 94 06 28 	call	0x500c	; 0x500c <f_mount>
    7a1c:	29 9a       	sbi	0x05, 1	; 5
    7a1e:	5d 98       	cbi	0x0b, 5	; 11
	PORT_CS |= (1<<SD_CS);
    7a20:	a8 95       	wdr
	PORTD &= ~(1 << PIND5);
    7a22:	0f b6       	in	r0, 0x3f	; 63

	wdt_reset();
    7a24:	f8 94       	cli
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    7a26:	a8 95       	wdr
    7a28:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    7a2c:	88 61       	ori	r24, 0x18	; 24
    7a2e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    7a32:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    7a36:	0f be       	out	0x3f, r0	; 63
    7a38:	11 9a       	sbi	0x02, 1	; 2
    7a3a:	2a 9a       	sbi	0x05, 2	; 5
 	wdt_disable();
	PORTA |= (1 << PINA1);
    7a3c:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <Ether_init>
	PORTB |= (1 << ETHER_CS);
	Ether_init();
    7a40:	11 98       	cbi	0x02, 1	; 2
    7a42:	a8 95       	wdr
	PORTA &= ~(1 << PINA1);
    7a44:	9f e0       	ldi	r25, 0x0F	; 15
 	wdt_reset();
    7a46:	88 e1       	ldi	r24, 0x18	; 24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    7a48:	0f b6       	in	r0, 0x3f	; 63
    7a4a:	f8 94       	cli
    7a4c:	a8 95       	wdr
    7a4e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    7a52:	0f be       	out	0x3f, r0	; 63
    7a54:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    7a58:	87 b1       	in	r24, 0x07	; 7
    7a5a:	87 b9       	out	0x07, r24	; 7
 	wdt_enable(WDTO_2S);
		
	DDRC |= (0 << PINC4);
    7a5c:	44 9a       	sbi	0x08, 4	; 8
    7a5e:	ed e6       	ldi	r30, 0x6D	; 109
	PORTC |= (1 << PINC4);
    7a60:	f0 e0       	ldi	r31, 0x00	; 0
	 
	PCMSK2 |= (1 << PCINT20);
    7a62:	80 81       	ld	r24, Z
    7a64:	80 61       	ori	r24, 0x10	; 16
    7a66:	80 83       	st	Z, r24
    7a68:	e8 e6       	ldi	r30, 0x68	; 104
	PCICR |= (1 << PCIE2);
    7a6a:	f0 e0       	ldi	r31, 0x00	; 0
    7a6c:	80 81       	ld	r24, Z
    7a6e:	84 60       	ori	r24, 0x04	; 4
    7a70:	80 83       	st	Z, r24
    7a72:	78 94       	sei
	 	
	sei();
    7a74:	5b 9a       	sbi	0x0b, 3	; 11
	PORTD |= (1 << PIND3);
    7a76:	0f 2e       	mov	r0, r31
			TCCR2B |= (1 << CS21);
		}
		else
		{
			OCR2A = 255;
			TCCR2A |= (1 << COM2A1);
    7a78:	f0 eb       	ldi	r31, 0xB0	; 176
    7a7a:	2f 2e       	mov	r2, r31
    7a7c:	31 2c       	mov	r3, r1
    7a7e:	f0 2d       	mov	r31, r0
    7a80:	82 e0       	ldi	r24, 0x02	; 2
	 	
	sei();
	PORTD |= (1 << PIND3);
	while(1) {	
		float wind_speed;
		magnetVal = adc_read(2);
    7a82:	88 dd       	rcall	.-1264   	; 0x7594 <adc_read>
    7a84:	90 93 f8 1d 	sts	0x1DF8, r25	; 0x801df8 <magnetVal+0x1>
    7a88:	80 93 f7 1d 	sts	0x1DF7, r24	; 0x801df7 <magnetVal>
    7a8c:	80 91 a5 05 	lds	r24, 0x05A5	; 0x8005a5 <sendingPacket>

		if(sendingPacket == 1)
    7a90:	81 30       	cpi	r24, 0x01	; 1
    7a92:	31 f4       	brne	.+12     	; 0x7aa0 <main+0x37a>
    7a94:	11 9a       	sbi	0x02, 1	; 2
    7a96:	84 e5       	ldi	r24, 0x54	; 84
		{
			PORTA |= (1 << PINA1);
    7a98:	9e e1       	ldi	r25, 0x1E	; 30
			Ether_SendPacket(packetStr);
    7a9a:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <Ether_SendPacket>
    7a9e:	f0 cf       	rjmp	.-32     	; 0x7a80 <main+0x35a>
    7aa0:	11 98       	cbi	0x02, 1	; 2
			continue;
    7aa2:	a8 95       	wdr
		}
		PORTA &= ~(1<<PINA1);
    7aa4:	8f e0       	ldi	r24, 0x0F	; 15
		wdt_reset();
    7aa6:	f8 e1       	ldi	r31, 0x18	; 24
    7aa8:	0f b6       	in	r0, 0x3f	; 63
    7aaa:	f8 94       	cli
    7aac:	a8 95       	wdr
    7aae:	f0 93 60 00 	sts	0x0060, r31	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    7ab2:	0f be       	out	0x3f, r0	; 63
    7ab4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    7ab8:	5c 9a       	sbi	0x0b, 4	; 11
    7aba:	80 91 5c 1b 	lds	r24, 0x1B5C	; 0x801b5c <runOnce>
		wdt_enable(WDTO_2S);
		PORTD |= (1 << PIND4);
		if(runOnce == 0) {
    7abe:	81 11       	cpse	r24, r1
    7ac0:	09 c0       	rjmp	.+18     	; 0x7ad4 <main+0x3ae>
    7ac2:	10 92 ba 1b 	sts	0x1BBA, r1	; 0x801bba <flag>
			flag =0;
    7ac6:	80 e2       	ldi	r24, 0x20	; 32
    7ac8:	86 bb       	out	0x16, r24	; 22
			TIFR1=(1<<ICF1);
    7aca:	81 e0       	ldi	r24, 0x01	; 1
    7acc:	80 93 5c 1b 	sts	0x1B5C, r24	; 0x801b5c <runOnce>
			runOnce = 1;
    7ad0:	10 92 a7 05 	sts	0x05A7, r1	; 0x8005a7 <sec>
			sec = 0;
    7ad4:	80 91 ba 1b 	lds	r24, 0x1BBA	; 0x801bba <flag>
		}
		if(flag < 2 && sec < 2) {
    7ad8:	82 30       	cpi	r24, 0x02	; 2
    7ada:	20 f4       	brcc	.+8      	; 0x7ae4 <main+0x3be>
    7adc:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <sec>
    7ae0:	82 30       	cpi	r24, 0x02	; 2
    7ae2:	70 f2       	brcs	.-100    	; 0x7a80 <main+0x35a>
			continue;
		}
		runOnce = 0;
    7ae4:	10 92 5c 1b 	sts	0x1B5C, r1	; 0x801b5c <runOnce>

		wdt_reset();
		//wind_speed = 0.765 * wind_measureFrequency() + 0.35;
		wind_speed = wind_measureFrequency();
    7ae8:	a8 95       	wdr
    7aea:	ce dc       	rcall	.-1636   	; 0x7488 <wind_measureFrequency>
    7aec:	4b 01       	movw	r8, r22
    7aee:	5c 01       	movw	r10, r24
		if(wind_speed < 0 || wind_speed > 1000)
    7af0:	20 e0       	ldi	r18, 0x00	; 0
    7af2:	30 e0       	ldi	r19, 0x00	; 0
    7af4:	a9 01       	movw	r20, r18
    7af6:	3e d2       	rcall	.+1148   	; 0x7f74 <__cmpsf2>
    7af8:	88 23       	and	r24, r24
    7afa:	6c f0       	brlt	.+26     	; 0x7b16 <main+0x3f0>
    7afc:	20 e0       	ldi	r18, 0x00	; 0
    7afe:	30 e0       	ldi	r19, 0x00	; 0
    7b00:	4a e7       	ldi	r20, 0x7A	; 122
    7b02:	54 e4       	ldi	r21, 0x44	; 68
    7b04:	c5 01       	movw	r24, r10
    7b06:	b4 01       	movw	r22, r8
    7b08:	d6 d3       	rcall	.+1964   	; 0x82b6 <__gesf2>
    7b0a:	18 16       	cp	r1, r24
    7b0c:	3c f4       	brge	.+14     	; 0x7b1c <main+0x3f6>
    7b0e:	81 2c       	mov	r8, r1
    7b10:	91 2c       	mov	r9, r1
			wind_speed = 0;
    7b12:	54 01       	movw	r10, r8
    7b14:	03 c0       	rjmp	.+6      	; 0x7b1c <main+0x3f6>
    7b16:	81 2c       	mov	r8, r1
    7b18:	91 2c       	mov	r9, r1
    7b1a:	54 01       	movw	r10, r8
    7b1c:	20 91 f7 1d 	lds	r18, 0x1DF7	; 0x801df7 <magnetVal>
			
		if(magnetVal < halleff)
    7b20:	30 91 f8 1d 	lds	r19, 0x1DF8	; 0x801df8 <magnetVal+0x1>
    7b24:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <halleff>
    7b28:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <halleff+0x1>
    7b2c:	28 17       	cp	r18, r24
    7b2e:	39 07       	cpc	r19, r25
    7b30:	98 f4       	brcc	.+38     	; 0x7b58 <main+0x432>
    7b32:	ea e3       	ldi	r30, 0x3A	; 58
    7b34:	f1 e0       	ldi	r31, 0x01	; 1
		{
			OCR2A = brightness;
    7b36:	80 81       	ld	r24, Z
    7b38:	e3 eb       	ldi	r30, 0xB3	; 179
    7b3a:	f0 e0       	ldi	r31, 0x00	; 0
    7b3c:	80 83       	st	Z, r24
    7b3e:	f1 01       	movw	r30, r2
    7b40:	80 81       	ld	r24, Z
			TCCR2A |= (1 << COM2A1);
    7b42:	80 68       	ori	r24, 0x80	; 128
    7b44:	80 83       	st	Z, r24
    7b46:	80 81       	ld	r24, Z
			TCCR2A |= (1 << WGM21) | (1 << WGM20);
    7b48:	83 60       	ori	r24, 0x03	; 3
    7b4a:	80 83       	st	Z, r24
    7b4c:	e1 eb       	ldi	r30, 0xB1	; 177
			TCCR2B |= (1 << CS21);
    7b4e:	f0 e0       	ldi	r31, 0x00	; 0
    7b50:	80 81       	ld	r24, Z
    7b52:	82 60       	ori	r24, 0x02	; 2
    7b54:	80 83       	st	Z, r24
    7b56:	10 c0       	rjmp	.+32     	; 0x7b78 <main+0x452>
    7b58:	8f ef       	ldi	r24, 0xFF	; 255
		}
		else
		{
			OCR2A = 255;
    7b5a:	e3 eb       	ldi	r30, 0xB3	; 179
    7b5c:	f0 e0       	ldi	r31, 0x00	; 0
    7b5e:	80 83       	st	Z, r24
			TCCR2A |= (1 << COM2A1);
    7b60:	f1 01       	movw	r30, r2
    7b62:	80 81       	ld	r24, Z
    7b64:	80 68       	ori	r24, 0x80	; 128
			TCCR2A |= (1 << WGM21) | (1 << WGM20);
    7b66:	80 83       	st	Z, r24
    7b68:	80 81       	ld	r24, Z
    7b6a:	83 60       	ori	r24, 0x03	; 3
			TCCR2B |= (1 << CS21);
    7b6c:	80 83       	st	Z, r24
    7b6e:	e1 eb       	ldi	r30, 0xB1	; 177
    7b70:	f0 e0       	ldi	r31, 0x00	; 0
    7b72:	80 81       	ld	r24, Z
    7b74:	82 60       	ori	r24, 0x02	; 2
		}
		
 		RTC_GetDateTime(&rtc);
    7b76:	80 83       	st	Z, r24
    7b78:	8b ef       	ldi	r24, 0xFB	; 251
    7b7a:	9d e1       	ldi	r25, 0x1D	; 29

		wdt_reset();
    7b7c:	c4 d8       	rcall	.-3704   	; 0x6d06 <RTC_GetDateTime>
		
		float angle = ((float)adc_read(0) / (float)LargestDirectionValue) * 360.0;
    7b7e:	a8 95       	wdr
    7b80:	80 e0       	ldi	r24, 0x00	; 0
    7b82:	08 dd       	rcall	.-1520   	; 0x7594 <adc_read>
    7b84:	bc 01       	movw	r22, r24
    7b86:	80 e0       	ldi	r24, 0x00	; 0
    7b88:	90 e0       	ldi	r25, 0x00	; 0
    7b8a:	95 d2       	rcall	.+1322   	; 0x80b6 <__floatunsisf>
    7b8c:	6b 01       	movw	r12, r22
    7b8e:	7c 01       	movw	r14, r24
    7b90:	60 91 f9 1d 	lds	r22, 0x1DF9	; 0x801df9 <LargestDirectionValue>
    7b94:	70 91 fa 1d 	lds	r23, 0x1DFA	; 0x801dfa <LargestDirectionValue+0x1>
    7b98:	07 2e       	mov	r0, r23
    7b9a:	00 0c       	add	r0, r0
    7b9c:	88 0b       	sbc	r24, r24
    7b9e:	99 0b       	sbc	r25, r25
    7ba0:	8c d2       	rcall	.+1304   	; 0x80ba <__floatsisf>
    7ba2:	9b 01       	movw	r18, r22
    7ba4:	ac 01       	movw	r20, r24
    7ba6:	c7 01       	movw	r24, r14
    7ba8:	b6 01       	movw	r22, r12
    7baa:	e8 d1       	rcall	.+976    	; 0x7f7c <__divsf3>
    7bac:	20 e0       	ldi	r18, 0x00	; 0
    7bae:	30 e0       	ldi	r19, 0x00	; 0
    7bb0:	44 eb       	ldi	r20, 0xB4	; 180
    7bb2:	53 e4       	ldi	r21, 0x43	; 67
    7bb4:	84 d3       	rcall	.+1800   	; 0x82be <__mulsf3>
    7bb6:	2b 01       	movw	r4, r22
    7bb8:	3c 01       	movw	r6, r24
    7bba:	20 e0       	ldi	r18, 0x00	; 0
		if(angle > 360)
    7bbc:	30 e0       	ldi	r19, 0x00	; 0
    7bbe:	44 eb       	ldi	r20, 0xB4	; 180
    7bc0:	53 e4       	ldi	r21, 0x43	; 67
    7bc2:	79 d3       	rcall	.+1778   	; 0x82b6 <__gesf2>
    7bc4:	18 16       	cp	r1, r24
    7bc6:	44 f4       	brge	.+16     	; 0x7bd8 <main+0x4b2>
    7bc8:	0f 2e       	mov	r0, r31
			angle = 360;
    7bca:	41 2c       	mov	r4, r1
    7bcc:	51 2c       	mov	r5, r1
    7bce:	f4 eb       	ldi	r31, 0xB4	; 180
    7bd0:	6f 2e       	mov	r6, r31
    7bd2:	f3 e4       	ldi	r31, 0x43	; 67
    7bd4:	7f 2e       	mov	r7, r31
    7bd6:	f0 2d       	mov	r31, r0
    7bd8:	0e 94 c6 33 	call	0x678c	; 0x678c <hih8120_measure>
		
		hih8120_measure();
    7bdc:	60 91 33 01 	lds	r22, 0x0133	; 0x800133 <hih8120_humidity>
		dtostrf(hih8120_humidity,1,2,humidChar);
    7be0:	70 91 34 01 	lds	r23, 0x0134	; 0x800134 <hih8120_humidity+0x1>
    7be4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <hih8120_humidity+0x2>
    7be8:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <hih8120_humidity+0x3>
    7bec:	02 e0       	ldi	r16, 0x02	; 2
    7bee:	1e e1       	ldi	r17, 0x1E	; 30
    7bf0:	22 e0       	ldi	r18, 0x02	; 2
    7bf2:	41 e0       	ldi	r20, 0x01	; 1
    7bf4:	d9 d5       	rcall	.+2994   	; 0x87a8 <dtostrf>
    7bf6:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <hih8120_temperature_C>
		dtostrf(hih8120_temperature_C,1,2,tempChar);
    7bfa:	70 91 30 01 	lds	r23, 0x0130	; 0x800130 <hih8120_temperature_C+0x1>
    7bfe:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <hih8120_temperature_C+0x2>
    7c02:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <hih8120_temperature_C+0x3>
    7c06:	0e e0       	ldi	r16, 0x0E	; 14
    7c08:	1e e1       	ldi	r17, 0x1E	; 30
    7c0a:	22 e0       	ldi	r18, 0x02	; 2
    7c0c:	41 e0       	ldi	r20, 0x01	; 1
    7c0e:	cc d5       	rcall	.+2968   	; 0x87a8 <dtostrf>
    7c10:	82 e0       	ldi	r24, 0x02	; 2
		
		printf("%s\n", humidChar);
    7c12:	9e e1       	ldi	r25, 0x1E	; 30
    7c14:	0e 94 69 46 	call	0x8cd2	; 0x8cd2 <puts>
    7c18:	68 01       	movw	r12, r16
		printf("%s C\n", tempChar);
    7c1a:	df 92       	push	r13
    7c1c:	0f 93       	push	r16
    7c1e:	21 ec       	ldi	r18, 0xC1	; 193
    7c20:	34 e0       	ldi	r19, 0x04	; 4
    7c22:	3f 93       	push	r19
    7c24:	2f 93       	push	r18
    7c26:	0e 94 2f 46 	call	0x8c5e	; 0x8c5e <printf>
    7c2a:	0e 94 cc 0a 	call	0x1598	; 0x1598 <bmp280_readPressure>
 		dtostrf(bmp280_readPressure(),1,2,pressChar);
    7c2e:	0a e1       	ldi	r16, 0x1A	; 26
    7c30:	1e e1       	ldi	r17, 0x1E	; 30
    7c32:	22 e0       	ldi	r18, 0x02	; 2
    7c34:	41 e0       	ldi	r20, 0x01	; 1
    7c36:	b8 d5       	rcall	.+2928   	; 0x87a8 <dtostrf>
    7c38:	78 01       	movw	r14, r16
		printf("%s Pa\n", pressChar);
    7c3a:	ff 92       	push	r15
    7c3c:	0f 93       	push	r16
    7c3e:	e7 ec       	ldi	r30, 0xC7	; 199
    7c40:	f4 e0       	ldi	r31, 0x04	; 4
    7c42:	ff 93       	push	r31
    7c44:	ef 93       	push	r30
    7c46:	0e 94 2f 46 	call	0x8c5e	; 0x8c5e <printf>
		 
		
		printf("%s Pa", pressChar);
    7c4a:	ff 92       	push	r15
    7c4c:	0f 93       	push	r16
    7c4e:	8e ec       	ldi	r24, 0xCE	; 206
    7c50:	94 e0       	ldi	r25, 0x04	; 4
    7c52:	9f 93       	push	r25
    7c54:	8f 93       	push	r24
    7c56:	0e 94 2f 46 	call	0x8c5e	; 0x8c5e <printf>
		dtostrf(angle,1,2,anglChar);
    7c5a:	0d ee       	ldi	r16, 0xED	; 237
    7c5c:	1d e1       	ldi	r17, 0x1D	; 29
    7c5e:	22 e0       	ldi	r18, 0x02	; 2
    7c60:	41 e0       	ldi	r20, 0x01	; 1
    7c62:	c3 01       	movw	r24, r6
    7c64:	b2 01       	movw	r22, r4
    7c66:	a0 d5       	rcall	.+2880   	; 0x87a8 <dtostrf>
    7c68:	0a e4       	ldi	r16, 0x4A	; 74
		dtostrf(wind_speed,1,2,speedChar);
    7c6a:	1e e1       	ldi	r17, 0x1E	; 30
    7c6c:	22 e0       	ldi	r18, 0x02	; 2
    7c6e:	41 e0       	ldi	r20, 0x01	; 1
    7c70:	c5 01       	movw	r24, r10
    7c72:	b4 01       	movw	r22, r8
    7c74:	99 d5       	rcall	.+2866   	; 0x87a8 <dtostrf>
    7c76:	c8 01       	movw	r24, r16
    7c78:	9f 93       	push	r25
		sprintf(packetStr, "%02d:%02d:%02d,%s,%s,%s,%s,%s", rtc.hour, rtc.min, rtc.sec,tempChar, humidChar, pressChar, anglChar, speedChar);
    7c7a:	0f 93       	push	r16
    7c7c:	8d ee       	ldi	r24, 0xED	; 237
    7c7e:	9d e1       	ldi	r25, 0x1D	; 29
    7c80:	9f 93       	push	r25
    7c82:	8f 93       	push	r24
    7c84:	ff 92       	push	r15
    7c86:	ef 92       	push	r14
    7c88:	82 e0       	ldi	r24, 0x02	; 2
    7c8a:	9e e1       	ldi	r25, 0x1E	; 30
    7c8c:	9f 93       	push	r25
    7c8e:	8f 93       	push	r24
    7c90:	df 92       	push	r13
    7c92:	cf 92       	push	r12
    7c94:	0b ef       	ldi	r16, 0xFB	; 251
    7c96:	1d e1       	ldi	r17, 0x1D	; 29
    7c98:	f8 01       	movw	r30, r16
    7c9a:	80 81       	ld	r24, Z
    7c9c:	1f 92       	push	r1
    7c9e:	8f 93       	push	r24
    7ca0:	81 81       	ldd	r24, Z+1	; 0x01
    7ca2:	1f 92       	push	r1
    7ca4:	8f 93       	push	r24
    7ca6:	82 81       	ldd	r24, Z+2	; 0x02
    7ca8:	1f 92       	push	r1
    7caa:	8f 93       	push	r24
    7cac:	24 ed       	ldi	r18, 0xD4	; 212
    7cae:	34 e0       	ldi	r19, 0x04	; 4
    7cb0:	3f 93       	push	r19
    7cb2:	2f 93       	push	r18
    7cb4:	e4 e5       	ldi	r30, 0x54	; 84
    7cb6:	fe e1       	ldi	r31, 0x1E	; 30
    7cb8:	ff 93       	push	r31
    7cba:	ef 93       	push	r30
    7cbc:	0e 94 06 47 	call	0x8e0c	; 0x8e0c <sprintf>
    7cc0:	8d b7       	in	r24, 0x3d	; 61
    7cc2:	9e b7       	in	r25, 0x3e	; 62
		printPage(page);
    7cc4:	80 96       	adiw	r24, 0x20	; 32
    7cc6:	0f b6       	in	r0, 0x3f	; 63
    7cc8:	f8 94       	cli
    7cca:	9e bf       	out	0x3e, r25	; 62
    7ccc:	0f be       	out	0x3f, r0	; 63
    7cce:	8d bf       	out	0x3d, r24	; 61
    7cd0:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <page>
    7cd4:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <page+0x1>
    7cd8:	0e 94 1d 35 	call	0x6a3a	; 0x6a3a <printPage>
    7cdc:	a8 95       	wdr
    7cde:	5c 98       	cbi	0x0b, 4	; 11
		
		wdt_reset();
    7ce0:	5d 9a       	sbi	0x0b, 5	; 11
		
		PORTD &= ~(1<<PIND4);
    7ce2:	f8 01       	movw	r30, r16
 		PORTD |= (1 << PIND5);
    7ce4:	86 81       	ldd	r24, Z+6	; 0x06
		char fileName[16];
		sprintf(fileName, "%02d-%02d-%02d.CSV", rtc.date, rtc.month, rtc.year);
    7ce6:	1f 92       	push	r1
    7ce8:	8f 93       	push	r24
    7cea:	85 81       	ldd	r24, Z+5	; 0x05
    7cec:	1f 92       	push	r1
    7cee:	8f 93       	push	r24
    7cf0:	84 81       	ldd	r24, Z+4	; 0x04
    7cf2:	1f 92       	push	r1
    7cf4:	8f 93       	push	r24
    7cf6:	22 ef       	ldi	r18, 0xF2	; 242
    7cf8:	34 e0       	ldi	r19, 0x04	; 4
    7cfa:	3f 93       	push	r19
    7cfc:	2f 93       	push	r18
    7cfe:	e1 e0       	ldi	r30, 0x01	; 1
    7d00:	f0 e0       	ldi	r31, 0x00	; 0
    7d02:	ec 0f       	add	r30, r28
    7d04:	fd 1f       	adc	r31, r29
    7d06:	ff 93       	push	r31
    7d08:	ef 93       	push	r30
    7d0a:	0e 94 06 47 	call	0x8e0c	; 0x8e0c <sprintf>
    7d0e:	42 e0       	ldi	r20, 0x02	; 2
    7d10:	be 01       	movw	r22, r28

		if(f_open(&Fil, fileName, FA_WRITE) == FR_OK)
    7d12:	6f 5f       	subi	r22, 0xFF	; 255
    7d14:	7f 4f       	sbci	r23, 0xFF	; 255
    7d16:	8a e2       	ldi	r24, 0x2A	; 42
    7d18:	9e e1       	ldi	r25, 0x1E	; 30
    7d1a:	0e 94 59 28 	call	0x50b2	; 0x50b2 <f_open>
    7d1e:	2d b7       	in	r18, 0x3d	; 61
    7d20:	3e b7       	in	r19, 0x3e	; 62
    7d22:	26 5f       	subi	r18, 0xF6	; 246
    7d24:	3f 4f       	sbci	r19, 0xFF	; 255
    7d26:	0f b6       	in	r0, 0x3f	; 63
    7d28:	f8 94       	cli
    7d2a:	3e bf       	out	0x3e, r19	; 62
    7d2c:	0f be       	out	0x3f, r0	; 63
    7d2e:	2d bf       	out	0x3d, r18	; 61
    7d30:	81 11       	cpse	r24, r1
    7d32:	8e c0       	rjmp	.+284    	; 0x7e50 <main+0x72a>
    7d34:	4d b6       	in	r4, 0x3d	; 61
    7d36:	5e b6       	in	r5, 0x3e	; 62
		{
    7d38:	40 91 34 1e 	lds	r20, 0x1E34	; 0x801e34 <Fil+0xa>
			f_lseek(&Fil, Fil.fsize);
    7d3c:	50 91 35 1e 	lds	r21, 0x1E35	; 0x801e35 <Fil+0xb>
    7d40:	60 91 36 1e 	lds	r22, 0x1E36	; 0x801e36 <Fil+0xc>
    7d44:	70 91 37 1e 	lds	r23, 0x1E37	; 0x801e37 <Fil+0xd>
    7d48:	8a e2       	ldi	r24, 0x2A	; 42
    7d4a:	9e e1       	ldi	r25, 0x1E	; 30
    7d4c:	0e 94 dc 2d 	call	0x5bb8	; 0x5bb8 <f_lseek>
    7d50:	56 01       	movw	r10, r12
    7d52:	bf 92       	push	r11
			char sdData[snprintf(NULL,0,"%02d:%02d:%02d,%s,%s,%s,%s,%s\r\n", rtc.hour, rtc.min, rtc.sec, pressChar, anglChar, speedChar, humidChar, tempChar)];
    7d54:	cf 92       	push	r12
    7d56:	0f 2e       	mov	r0, r31
    7d58:	f2 e0       	ldi	r31, 0x02	; 2
    7d5a:	6f 2e       	mov	r6, r31
    7d5c:	fe e1       	ldi	r31, 0x1E	; 30
    7d5e:	7f 2e       	mov	r7, r31
    7d60:	f0 2d       	mov	r31, r0
    7d62:	7f 92       	push	r7
    7d64:	6f 92       	push	r6
    7d66:	0f 2e       	mov	r0, r31
    7d68:	fa e4       	ldi	r31, 0x4A	; 74
    7d6a:	cf 2e       	mov	r12, r31
    7d6c:	fe e1       	ldi	r31, 0x1E	; 30
    7d6e:	df 2e       	mov	r13, r31
    7d70:	f0 2d       	mov	r31, r0
    7d72:	df 92       	push	r13
    7d74:	cf 92       	push	r12
    7d76:	0f 2e       	mov	r0, r31
    7d78:	fd ee       	ldi	r31, 0xED	; 237
    7d7a:	ef 2e       	mov	r14, r31
    7d7c:	fd e1       	ldi	r31, 0x1D	; 29
    7d7e:	ff 2e       	mov	r15, r31
    7d80:	f0 2d       	mov	r31, r0
    7d82:	ff 92       	push	r15
    7d84:	ef 92       	push	r14
    7d86:	0a e1       	ldi	r16, 0x1A	; 26
    7d88:	1e e1       	ldi	r17, 0x1E	; 30
    7d8a:	1f 93       	push	r17
    7d8c:	0f 93       	push	r16
    7d8e:	0f 2e       	mov	r0, r31
    7d90:	fb ef       	ldi	r31, 0xFB	; 251
    7d92:	8f 2e       	mov	r8, r31
    7d94:	fd e1       	ldi	r31, 0x1D	; 29
    7d96:	9f 2e       	mov	r9, r31
    7d98:	f0 2d       	mov	r31, r0
    7d9a:	f4 01       	movw	r30, r8
    7d9c:	80 81       	ld	r24, Z
    7d9e:	1f 92       	push	r1
    7da0:	8f 93       	push	r24
    7da2:	81 81       	ldd	r24, Z+1	; 0x01
    7da4:	1f 92       	push	r1
    7da6:	8f 93       	push	r24
    7da8:	82 81       	ldd	r24, Z+2	; 0x02
    7daa:	1f 92       	push	r1
    7dac:	8f 93       	push	r24
    7dae:	25 e0       	ldi	r18, 0x05	; 5
    7db0:	35 e0       	ldi	r19, 0x05	; 5
    7db2:	3f 93       	push	r19
    7db4:	2f 93       	push	r18
    7db6:	1f 92       	push	r1
    7db8:	1f 92       	push	r1
    7dba:	1f 92       	push	r1
    7dbc:	1f 92       	push	r1
    7dbe:	ea d7       	rcall	.+4052   	; 0x8d94 <snprintf>
    7dc0:	9c 8b       	std	Y+20, r25	; 0x14
    7dc2:	8b 8b       	std	Y+19, r24	; 0x13
    7dc4:	ed b7       	in	r30, 0x3d	; 61
    7dc6:	fe b7       	in	r31, 0x3e	; 62
    7dc8:	76 96       	adiw	r30, 0x16	; 22
    7dca:	0f b6       	in	r0, 0x3f	; 63
    7dcc:	f8 94       	cli
    7dce:	fe bf       	out	0x3e, r31	; 62
    7dd0:	0f be       	out	0x3f, r0	; 63
    7dd2:	ed bf       	out	0x3d, r30	; 61
    7dd4:	2d b7       	in	r18, 0x3d	; 61
    7dd6:	3e b7       	in	r19, 0x3e	; 62
    7dd8:	28 1b       	sub	r18, r24
    7dda:	39 0b       	sbc	r19, r25
    7ddc:	0f b6       	in	r0, 0x3f	; 63
    7dde:	f8 94       	cli
    7de0:	3e bf       	out	0x3e, r19	; 62
    7de2:	0f be       	out	0x3f, r0	; 63
    7de4:	2d bf       	out	0x3d, r18	; 61
    7de6:	8d b7       	in	r24, 0x3d	; 61
    7de8:	9e b7       	in	r25, 0x3e	; 62
    7dea:	01 96       	adiw	r24, 0x01	; 1
    7dec:	9a 8b       	std	Y+18, r25	; 0x12
    7dee:	89 8b       	std	Y+17, r24	; 0x11
    7df0:	bf 92       	push	r11
			sprintf(sdData, "%02d:%02d:%02d,%s,%s,%s,%s,%s\r\n", rtc.hour, rtc.min, rtc.sec, pressChar, anglChar, speedChar, humidChar, tempChar);
    7df2:	af 92       	push	r10
    7df4:	7f 92       	push	r7
    7df6:	6f 92       	push	r6
    7df8:	df 92       	push	r13
    7dfa:	cf 92       	push	r12
    7dfc:	ff 92       	push	r15
    7dfe:	ef 92       	push	r14
    7e00:	1f 93       	push	r17
    7e02:	0f 93       	push	r16
    7e04:	f4 01       	movw	r30, r8
    7e06:	80 81       	ld	r24, Z
    7e08:	1f 92       	push	r1
    7e0a:	8f 93       	push	r24
    7e0c:	81 81       	ldd	r24, Z+1	; 0x01
    7e0e:	1f 92       	push	r1
    7e10:	8f 93       	push	r24
    7e12:	82 81       	ldd	r24, Z+2	; 0x02
    7e14:	1f 92       	push	r1
    7e16:	8f 93       	push	r24
    7e18:	25 e0       	ldi	r18, 0x05	; 5
    7e1a:	35 e0       	ldi	r19, 0x05	; 5
    7e1c:	3f 93       	push	r19
    7e1e:	2f 93       	push	r18
    7e20:	9f 93       	push	r25
    7e22:	99 89       	ldd	r25, Y+17	; 0x11
    7e24:	9f 93       	push	r25
    7e26:	f2 d7       	rcall	.+4068   	; 0x8e0c <sprintf>
    7e28:	28 e1       	ldi	r18, 0x18	; 24
    7e2a:	3e e1       	ldi	r19, 0x1E	; 30
			f_write(&Fil, sdData, sizeof(sdData), &bw);	// Write Data to the file
    7e2c:	4b 89       	ldd	r20, Y+19	; 0x13
    7e2e:	5c 89       	ldd	r21, Y+20	; 0x14
    7e30:	69 89       	ldd	r22, Y+17	; 0x11
    7e32:	7a 89       	ldd	r23, Y+18	; 0x12
    7e34:	8a e2       	ldi	r24, 0x2A	; 42
    7e36:	9e e1       	ldi	r25, 0x1E	; 30
    7e38:	0e 94 8c 2b 	call	0x5718	; 0x5718 <f_write>
    7e3c:	8a e2       	ldi	r24, 0x2A	; 42
    7e3e:	9e e1       	ldi	r25, 0x1E	; 30
			f_close(&Fil);
    7e40:	0e 94 cc 2d 	call	0x5b98	; 0x5b98 <f_close>
    7e44:	0f b6       	in	r0, 0x3f	; 63
    7e46:	f8 94       	cli
    7e48:	5e be       	out	0x3e, r5	; 62
    7e4a:	0f be       	out	0x3f, r0	; 63
    7e4c:	4d be       	out	0x3d, r4	; 61
    7e4e:	18 c0       	rjmp	.+48     	; 0x7e80 <main+0x75a>
    7e50:	4a e0       	ldi	r20, 0x0A	; 10
    7e52:	be 01       	movw	r22, r28
		}
		else
		{
			if (f_open(&Fil, fileName, FA_WRITE | FA_CREATE_ALWAYS) == FR_OK) {	/* Create a file */
    7e54:	6f 5f       	subi	r22, 0xFF	; 255
    7e56:	7f 4f       	sbci	r23, 0xFF	; 255
    7e58:	8a e2       	ldi	r24, 0x2A	; 42
    7e5a:	9e e1       	ldi	r25, 0x1E	; 30
    7e5c:	0e 94 59 28 	call	0x50b2	; 0x50b2 <f_open>
    7e60:	81 11       	cpse	r24, r1
    7e62:	0e c0       	rjmp	.+28     	; 0x7e80 <main+0x75a>
    7e64:	28 e1       	ldi	r18, 0x18	; 24
    7e66:	3e e1       	ldi	r19, 0x1E	; 30
				f_write(&Fil, "Time,Pressure,Wind Angle,Wind Speed,Humidity,Temperature\r\n", 58, &bw);	// Create CSV header
    7e68:	4a e3       	ldi	r20, 0x3A	; 58
    7e6a:	50 e0       	ldi	r21, 0x00	; 0
    7e6c:	65 e2       	ldi	r22, 0x25	; 37
    7e6e:	75 e0       	ldi	r23, 0x05	; 5
    7e70:	8a e2       	ldi	r24, 0x2A	; 42
    7e72:	9e e1       	ldi	r25, 0x1E	; 30
    7e74:	0e 94 8c 2b 	call	0x5718	; 0x5718 <f_write>
    7e78:	8a e2       	ldi	r24, 0x2A	; 42
    7e7a:	9e e1       	ldi	r25, 0x1E	; 30
				f_close(&Fil);								/* Close the file */
    7e7c:	0e 94 cc 2d 	call	0x5b98	; 0x5b98 <f_close>
    7e80:	5d 98       	cbi	0x0b, 5	; 11
    7e82:	a8 95       	wdr
			}
		}
 		PORTD &= ~(1<<PIND5);
    7e84:	0f b6       	in	r0, 0x3f	; 63
// 		_delay_ms(1000);
		
 		wdt_reset();
    7e86:	f8 94       	cli
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    7e88:	a8 95       	wdr
    7e8a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    7e8e:	88 61       	ori	r24, 0x18	; 24
    7e90:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    7e94:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    7e98:	0f be       	out	0x3f, r0	; 63
    7e9a:	11 9a       	sbi	0x02, 1	; 2
    7e9c:	10 92 a7 05 	sts	0x05A7, r1	; 0x8005a7 <sec>
 		wdt_disable();
// 		
		PORTA |= (1 << PINA1);
		sec = 0;
    7ea0:	84 e5       	ldi	r24, 0x54	; 84
    7ea2:	9e e1       	ldi	r25, 0x1E	; 30
		Ether_SendPacket(packetStr);
    7ea4:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <Ether_SendPacket>
    7ea8:	eb cd       	rjmp	.-1066   	; 0x7a80 <main+0x35a>

00007eaa <__subsf3>:
    7eaa:	50 58       	subi	r21, 0x80	; 128

00007eac <__addsf3>:
    7eac:	bb 27       	eor	r27, r27
    7eae:	aa 27       	eor	r26, r26
    7eb0:	0e d0       	rcall	.+28     	; 0x7ece <__addsf3x>
    7eb2:	c7 c1       	rjmp	.+910    	; 0x8242 <__fp_round>
    7eb4:	b8 d1       	rcall	.+880    	; 0x8226 <__fp_pscA>
    7eb6:	30 f0       	brcs	.+12     	; 0x7ec4 <__addsf3+0x18>
    7eb8:	bd d1       	rcall	.+890    	; 0x8234 <__fp_pscB>
    7eba:	20 f0       	brcs	.+8      	; 0x7ec4 <__addsf3+0x18>
    7ebc:	31 f4       	brne	.+12     	; 0x7eca <__addsf3+0x1e>
    7ebe:	9f 3f       	cpi	r25, 0xFF	; 255
    7ec0:	11 f4       	brne	.+4      	; 0x7ec6 <__addsf3+0x1a>
    7ec2:	1e f4       	brtc	.+6      	; 0x7eca <__addsf3+0x1e>
    7ec4:	9d c1       	rjmp	.+826    	; 0x8200 <__fp_nan>
    7ec6:	0e f4       	brtc	.+2      	; 0x7eca <__addsf3+0x1e>
    7ec8:	e0 95       	com	r30
    7eca:	e7 fb       	bst	r30, 7
    7ecc:	93 c1       	rjmp	.+806    	; 0x81f4 <__fp_inf>

00007ece <__addsf3x>:
    7ece:	e9 2f       	mov	r30, r25
    7ed0:	c9 d1       	rcall	.+914    	; 0x8264 <__fp_split3>
    7ed2:	80 f3       	brcs	.-32     	; 0x7eb4 <__addsf3+0x8>
    7ed4:	ba 17       	cp	r27, r26
    7ed6:	62 07       	cpc	r22, r18
    7ed8:	73 07       	cpc	r23, r19
    7eda:	84 07       	cpc	r24, r20
    7edc:	95 07       	cpc	r25, r21
    7ede:	18 f0       	brcs	.+6      	; 0x7ee6 <__addsf3x+0x18>
    7ee0:	71 f4       	brne	.+28     	; 0x7efe <__addsf3x+0x30>
    7ee2:	9e f5       	brtc	.+102    	; 0x7f4a <__addsf3x+0x7c>
    7ee4:	e1 c1       	rjmp	.+962    	; 0x82a8 <__fp_zero>
    7ee6:	0e f4       	brtc	.+2      	; 0x7eea <__addsf3x+0x1c>
    7ee8:	e0 95       	com	r30
    7eea:	0b 2e       	mov	r0, r27
    7eec:	ba 2f       	mov	r27, r26
    7eee:	a0 2d       	mov	r26, r0
    7ef0:	0b 01       	movw	r0, r22
    7ef2:	b9 01       	movw	r22, r18
    7ef4:	90 01       	movw	r18, r0
    7ef6:	0c 01       	movw	r0, r24
    7ef8:	ca 01       	movw	r24, r20
    7efa:	a0 01       	movw	r20, r0
    7efc:	11 24       	eor	r1, r1
    7efe:	ff 27       	eor	r31, r31
    7f00:	59 1b       	sub	r21, r25
    7f02:	99 f0       	breq	.+38     	; 0x7f2a <__addsf3x+0x5c>
    7f04:	59 3f       	cpi	r21, 0xF9	; 249
    7f06:	50 f4       	brcc	.+20     	; 0x7f1c <__addsf3x+0x4e>
    7f08:	50 3e       	cpi	r21, 0xE0	; 224
    7f0a:	68 f1       	brcs	.+90     	; 0x7f66 <__addsf3x+0x98>
    7f0c:	1a 16       	cp	r1, r26
    7f0e:	f0 40       	sbci	r31, 0x00	; 0
    7f10:	a2 2f       	mov	r26, r18
    7f12:	23 2f       	mov	r18, r19
    7f14:	34 2f       	mov	r19, r20
    7f16:	44 27       	eor	r20, r20
    7f18:	58 5f       	subi	r21, 0xF8	; 248
    7f1a:	f3 cf       	rjmp	.-26     	; 0x7f02 <__addsf3x+0x34>
    7f1c:	46 95       	lsr	r20
    7f1e:	37 95       	ror	r19
    7f20:	27 95       	ror	r18
    7f22:	a7 95       	ror	r26
    7f24:	f0 40       	sbci	r31, 0x00	; 0
    7f26:	53 95       	inc	r21
    7f28:	c9 f7       	brne	.-14     	; 0x7f1c <__addsf3x+0x4e>
    7f2a:	7e f4       	brtc	.+30     	; 0x7f4a <__addsf3x+0x7c>
    7f2c:	1f 16       	cp	r1, r31
    7f2e:	ba 0b       	sbc	r27, r26
    7f30:	62 0b       	sbc	r22, r18
    7f32:	73 0b       	sbc	r23, r19
    7f34:	84 0b       	sbc	r24, r20
    7f36:	ba f0       	brmi	.+46     	; 0x7f66 <__addsf3x+0x98>
    7f38:	91 50       	subi	r25, 0x01	; 1
    7f3a:	a1 f0       	breq	.+40     	; 0x7f64 <__addsf3x+0x96>
    7f3c:	ff 0f       	add	r31, r31
    7f3e:	bb 1f       	adc	r27, r27
    7f40:	66 1f       	adc	r22, r22
    7f42:	77 1f       	adc	r23, r23
    7f44:	88 1f       	adc	r24, r24
    7f46:	c2 f7       	brpl	.-16     	; 0x7f38 <__addsf3x+0x6a>
    7f48:	0e c0       	rjmp	.+28     	; 0x7f66 <__addsf3x+0x98>
    7f4a:	ba 0f       	add	r27, r26
    7f4c:	62 1f       	adc	r22, r18
    7f4e:	73 1f       	adc	r23, r19
    7f50:	84 1f       	adc	r24, r20
    7f52:	48 f4       	brcc	.+18     	; 0x7f66 <__addsf3x+0x98>
    7f54:	87 95       	ror	r24
    7f56:	77 95       	ror	r23
    7f58:	67 95       	ror	r22
    7f5a:	b7 95       	ror	r27
    7f5c:	f7 95       	ror	r31
    7f5e:	9e 3f       	cpi	r25, 0xFE	; 254
    7f60:	08 f0       	brcs	.+2      	; 0x7f64 <__addsf3x+0x96>
    7f62:	b3 cf       	rjmp	.-154    	; 0x7eca <__addsf3+0x1e>
    7f64:	93 95       	inc	r25
    7f66:	88 0f       	add	r24, r24
    7f68:	08 f0       	brcs	.+2      	; 0x7f6c <__addsf3x+0x9e>
    7f6a:	99 27       	eor	r25, r25
    7f6c:	ee 0f       	add	r30, r30
    7f6e:	97 95       	ror	r25
    7f70:	87 95       	ror	r24
    7f72:	08 95       	ret

00007f74 <__cmpsf2>:
    7f74:	1b d1       	rcall	.+566    	; 0x81ac <__fp_cmp>
    7f76:	08 f4       	brcc	.+2      	; 0x7f7a <__cmpsf2+0x6>
    7f78:	81 e0       	ldi	r24, 0x01	; 1
    7f7a:	08 95       	ret

00007f7c <__divsf3>:
    7f7c:	0c d0       	rcall	.+24     	; 0x7f96 <__divsf3x>
    7f7e:	61 c1       	rjmp	.+706    	; 0x8242 <__fp_round>
    7f80:	59 d1       	rcall	.+690    	; 0x8234 <__fp_pscB>
    7f82:	40 f0       	brcs	.+16     	; 0x7f94 <__divsf3+0x18>
    7f84:	50 d1       	rcall	.+672    	; 0x8226 <__fp_pscA>
    7f86:	30 f0       	brcs	.+12     	; 0x7f94 <__divsf3+0x18>
    7f88:	21 f4       	brne	.+8      	; 0x7f92 <__divsf3+0x16>
    7f8a:	5f 3f       	cpi	r21, 0xFF	; 255
    7f8c:	19 f0       	breq	.+6      	; 0x7f94 <__divsf3+0x18>
    7f8e:	32 c1       	rjmp	.+612    	; 0x81f4 <__fp_inf>
    7f90:	51 11       	cpse	r21, r1
    7f92:	8b c1       	rjmp	.+790    	; 0x82aa <__fp_szero>
    7f94:	35 c1       	rjmp	.+618    	; 0x8200 <__fp_nan>

00007f96 <__divsf3x>:
    7f96:	66 d1       	rcall	.+716    	; 0x8264 <__fp_split3>
    7f98:	98 f3       	brcs	.-26     	; 0x7f80 <__divsf3+0x4>

00007f9a <__divsf3_pse>:
    7f9a:	99 23       	and	r25, r25
    7f9c:	c9 f3       	breq	.-14     	; 0x7f90 <__divsf3+0x14>
    7f9e:	55 23       	and	r21, r21
    7fa0:	b1 f3       	breq	.-20     	; 0x7f8e <__divsf3+0x12>
    7fa2:	95 1b       	sub	r25, r21
    7fa4:	55 0b       	sbc	r21, r21
    7fa6:	bb 27       	eor	r27, r27
    7fa8:	aa 27       	eor	r26, r26
    7faa:	62 17       	cp	r22, r18
    7fac:	73 07       	cpc	r23, r19
    7fae:	84 07       	cpc	r24, r20
    7fb0:	38 f0       	brcs	.+14     	; 0x7fc0 <__divsf3_pse+0x26>
    7fb2:	9f 5f       	subi	r25, 0xFF	; 255
    7fb4:	5f 4f       	sbci	r21, 0xFF	; 255
    7fb6:	22 0f       	add	r18, r18
    7fb8:	33 1f       	adc	r19, r19
    7fba:	44 1f       	adc	r20, r20
    7fbc:	aa 1f       	adc	r26, r26
    7fbe:	a9 f3       	breq	.-22     	; 0x7faa <__divsf3_pse+0x10>
    7fc0:	33 d0       	rcall	.+102    	; 0x8028 <__divsf3_pse+0x8e>
    7fc2:	0e 2e       	mov	r0, r30
    7fc4:	3a f0       	brmi	.+14     	; 0x7fd4 <__divsf3_pse+0x3a>
    7fc6:	e0 e8       	ldi	r30, 0x80	; 128
    7fc8:	30 d0       	rcall	.+96     	; 0x802a <__divsf3_pse+0x90>
    7fca:	91 50       	subi	r25, 0x01	; 1
    7fcc:	50 40       	sbci	r21, 0x00	; 0
    7fce:	e6 95       	lsr	r30
    7fd0:	00 1c       	adc	r0, r0
    7fd2:	ca f7       	brpl	.-14     	; 0x7fc6 <__divsf3_pse+0x2c>
    7fd4:	29 d0       	rcall	.+82     	; 0x8028 <__divsf3_pse+0x8e>
    7fd6:	fe 2f       	mov	r31, r30
    7fd8:	27 d0       	rcall	.+78     	; 0x8028 <__divsf3_pse+0x8e>
    7fda:	66 0f       	add	r22, r22
    7fdc:	77 1f       	adc	r23, r23
    7fde:	88 1f       	adc	r24, r24
    7fe0:	bb 1f       	adc	r27, r27
    7fe2:	26 17       	cp	r18, r22
    7fe4:	37 07       	cpc	r19, r23
    7fe6:	48 07       	cpc	r20, r24
    7fe8:	ab 07       	cpc	r26, r27
    7fea:	b0 e8       	ldi	r27, 0x80	; 128
    7fec:	09 f0       	breq	.+2      	; 0x7ff0 <__divsf3_pse+0x56>
    7fee:	bb 0b       	sbc	r27, r27
    7ff0:	80 2d       	mov	r24, r0
    7ff2:	bf 01       	movw	r22, r30
    7ff4:	ff 27       	eor	r31, r31
    7ff6:	93 58       	subi	r25, 0x83	; 131
    7ff8:	5f 4f       	sbci	r21, 0xFF	; 255
    7ffa:	2a f0       	brmi	.+10     	; 0x8006 <__divsf3_pse+0x6c>
    7ffc:	9e 3f       	cpi	r25, 0xFE	; 254
    7ffe:	51 05       	cpc	r21, r1
    8000:	68 f0       	brcs	.+26     	; 0x801c <__divsf3_pse+0x82>
    8002:	f8 c0       	rjmp	.+496    	; 0x81f4 <__fp_inf>
    8004:	52 c1       	rjmp	.+676    	; 0x82aa <__fp_szero>
    8006:	5f 3f       	cpi	r21, 0xFF	; 255
    8008:	ec f3       	brlt	.-6      	; 0x8004 <__divsf3_pse+0x6a>
    800a:	98 3e       	cpi	r25, 0xE8	; 232
    800c:	dc f3       	brlt	.-10     	; 0x8004 <__divsf3_pse+0x6a>
    800e:	86 95       	lsr	r24
    8010:	77 95       	ror	r23
    8012:	67 95       	ror	r22
    8014:	b7 95       	ror	r27
    8016:	f7 95       	ror	r31
    8018:	9f 5f       	subi	r25, 0xFF	; 255
    801a:	c9 f7       	brne	.-14     	; 0x800e <__divsf3_pse+0x74>
    801c:	88 0f       	add	r24, r24
    801e:	91 1d       	adc	r25, r1
    8020:	96 95       	lsr	r25
    8022:	87 95       	ror	r24
    8024:	97 f9       	bld	r25, 7
    8026:	08 95       	ret
    8028:	e1 e0       	ldi	r30, 0x01	; 1
    802a:	66 0f       	add	r22, r22
    802c:	77 1f       	adc	r23, r23
    802e:	88 1f       	adc	r24, r24
    8030:	bb 1f       	adc	r27, r27
    8032:	62 17       	cp	r22, r18
    8034:	73 07       	cpc	r23, r19
    8036:	84 07       	cpc	r24, r20
    8038:	ba 07       	cpc	r27, r26
    803a:	20 f0       	brcs	.+8      	; 0x8044 <__divsf3_pse+0xaa>
    803c:	62 1b       	sub	r22, r18
    803e:	73 0b       	sbc	r23, r19
    8040:	84 0b       	sbc	r24, r20
    8042:	ba 0b       	sbc	r27, r26
    8044:	ee 1f       	adc	r30, r30
    8046:	88 f7       	brcc	.-30     	; 0x802a <__divsf3_pse+0x90>
    8048:	e0 95       	com	r30
    804a:	08 95       	ret

0000804c <__fixsfsi>:
    804c:	04 d0       	rcall	.+8      	; 0x8056 <__fixunssfsi>
    804e:	68 94       	set
    8050:	b1 11       	cpse	r27, r1
    8052:	2b c1       	rjmp	.+598    	; 0x82aa <__fp_szero>
    8054:	08 95       	ret

00008056 <__fixunssfsi>:
    8056:	0e d1       	rcall	.+540    	; 0x8274 <__fp_splitA>
    8058:	88 f0       	brcs	.+34     	; 0x807c <__fixunssfsi+0x26>
    805a:	9f 57       	subi	r25, 0x7F	; 127
    805c:	90 f0       	brcs	.+36     	; 0x8082 <__fixunssfsi+0x2c>
    805e:	b9 2f       	mov	r27, r25
    8060:	99 27       	eor	r25, r25
    8062:	b7 51       	subi	r27, 0x17	; 23
    8064:	a0 f0       	brcs	.+40     	; 0x808e <__fixunssfsi+0x38>
    8066:	d1 f0       	breq	.+52     	; 0x809c <__fixunssfsi+0x46>
    8068:	66 0f       	add	r22, r22
    806a:	77 1f       	adc	r23, r23
    806c:	88 1f       	adc	r24, r24
    806e:	99 1f       	adc	r25, r25
    8070:	1a f0       	brmi	.+6      	; 0x8078 <__fixunssfsi+0x22>
    8072:	ba 95       	dec	r27
    8074:	c9 f7       	brne	.-14     	; 0x8068 <__fixunssfsi+0x12>
    8076:	12 c0       	rjmp	.+36     	; 0x809c <__fixunssfsi+0x46>
    8078:	b1 30       	cpi	r27, 0x01	; 1
    807a:	81 f0       	breq	.+32     	; 0x809c <__fixunssfsi+0x46>
    807c:	15 d1       	rcall	.+554    	; 0x82a8 <__fp_zero>
    807e:	b1 e0       	ldi	r27, 0x01	; 1
    8080:	08 95       	ret
    8082:	12 c1       	rjmp	.+548    	; 0x82a8 <__fp_zero>
    8084:	67 2f       	mov	r22, r23
    8086:	78 2f       	mov	r23, r24
    8088:	88 27       	eor	r24, r24
    808a:	b8 5f       	subi	r27, 0xF8	; 248
    808c:	39 f0       	breq	.+14     	; 0x809c <__fixunssfsi+0x46>
    808e:	b9 3f       	cpi	r27, 0xF9	; 249
    8090:	cc f3       	brlt	.-14     	; 0x8084 <__fixunssfsi+0x2e>
    8092:	86 95       	lsr	r24
    8094:	77 95       	ror	r23
    8096:	67 95       	ror	r22
    8098:	b3 95       	inc	r27
    809a:	d9 f7       	brne	.-10     	; 0x8092 <__fixunssfsi+0x3c>
    809c:	3e f4       	brtc	.+14     	; 0x80ac <__fixunssfsi+0x56>
    809e:	90 95       	com	r25
    80a0:	80 95       	com	r24
    80a2:	70 95       	com	r23
    80a4:	61 95       	neg	r22
    80a6:	7f 4f       	sbci	r23, 0xFF	; 255
    80a8:	8f 4f       	sbci	r24, 0xFF	; 255
    80aa:	9f 4f       	sbci	r25, 0xFF	; 255
    80ac:	08 95       	ret

000080ae <__floatdisf>:
    80ae:	97 fb       	bst	r25, 7
    80b0:	0e f4       	brtc	.+2      	; 0x80b4 <__floatdisf+0x6>
    80b2:	a9 d0       	rcall	.+338    	; 0x8206 <__fp_negdi>
    80b4:	3e c0       	rjmp	.+124    	; 0x8132 <__fp_di2sf>

000080b6 <__floatunsisf>:
    80b6:	e8 94       	clt
    80b8:	09 c0       	rjmp	.+18     	; 0x80cc <__floatsisf+0x12>

000080ba <__floatsisf>:
    80ba:	97 fb       	bst	r25, 7
    80bc:	3e f4       	brtc	.+14     	; 0x80cc <__floatsisf+0x12>
    80be:	90 95       	com	r25
    80c0:	80 95       	com	r24
    80c2:	70 95       	com	r23
    80c4:	61 95       	neg	r22
    80c6:	7f 4f       	sbci	r23, 0xFF	; 255
    80c8:	8f 4f       	sbci	r24, 0xFF	; 255
    80ca:	9f 4f       	sbci	r25, 0xFF	; 255
    80cc:	99 23       	and	r25, r25
    80ce:	a9 f0       	breq	.+42     	; 0x80fa <__floatsisf+0x40>
    80d0:	f9 2f       	mov	r31, r25
    80d2:	96 e9       	ldi	r25, 0x96	; 150
    80d4:	bb 27       	eor	r27, r27
    80d6:	93 95       	inc	r25
    80d8:	f6 95       	lsr	r31
    80da:	87 95       	ror	r24
    80dc:	77 95       	ror	r23
    80de:	67 95       	ror	r22
    80e0:	b7 95       	ror	r27
    80e2:	f1 11       	cpse	r31, r1
    80e4:	f8 cf       	rjmp	.-16     	; 0x80d6 <__floatsisf+0x1c>
    80e6:	fa f4       	brpl	.+62     	; 0x8126 <__floatsisf+0x6c>
    80e8:	bb 0f       	add	r27, r27
    80ea:	11 f4       	brne	.+4      	; 0x80f0 <__floatsisf+0x36>
    80ec:	60 ff       	sbrs	r22, 0
    80ee:	1b c0       	rjmp	.+54     	; 0x8126 <__floatsisf+0x6c>
    80f0:	6f 5f       	subi	r22, 0xFF	; 255
    80f2:	7f 4f       	sbci	r23, 0xFF	; 255
    80f4:	8f 4f       	sbci	r24, 0xFF	; 255
    80f6:	9f 4f       	sbci	r25, 0xFF	; 255
    80f8:	16 c0       	rjmp	.+44     	; 0x8126 <__floatsisf+0x6c>
    80fa:	88 23       	and	r24, r24
    80fc:	11 f0       	breq	.+4      	; 0x8102 <__floatsisf+0x48>
    80fe:	96 e9       	ldi	r25, 0x96	; 150
    8100:	11 c0       	rjmp	.+34     	; 0x8124 <__floatsisf+0x6a>
    8102:	77 23       	and	r23, r23
    8104:	21 f0       	breq	.+8      	; 0x810e <__floatsisf+0x54>
    8106:	9e e8       	ldi	r25, 0x8E	; 142
    8108:	87 2f       	mov	r24, r23
    810a:	76 2f       	mov	r23, r22
    810c:	05 c0       	rjmp	.+10     	; 0x8118 <__floatsisf+0x5e>
    810e:	66 23       	and	r22, r22
    8110:	71 f0       	breq	.+28     	; 0x812e <__floatsisf+0x74>
    8112:	96 e8       	ldi	r25, 0x86	; 134
    8114:	86 2f       	mov	r24, r22
    8116:	70 e0       	ldi	r23, 0x00	; 0
    8118:	60 e0       	ldi	r22, 0x00	; 0
    811a:	2a f0       	brmi	.+10     	; 0x8126 <__floatsisf+0x6c>
    811c:	9a 95       	dec	r25
    811e:	66 0f       	add	r22, r22
    8120:	77 1f       	adc	r23, r23
    8122:	88 1f       	adc	r24, r24
    8124:	da f7       	brpl	.-10     	; 0x811c <__floatsisf+0x62>
    8126:	88 0f       	add	r24, r24
    8128:	96 95       	lsr	r25
    812a:	87 95       	ror	r24
    812c:	97 f9       	bld	r25, 7
    812e:	08 95       	ret

00008130 <__floatundisf>:
    8130:	e8 94       	clt

00008132 <__fp_di2sf>:
    8132:	f9 2f       	mov	r31, r25
    8134:	96 eb       	ldi	r25, 0xB6	; 182
    8136:	ff 23       	and	r31, r31
    8138:	81 f0       	breq	.+32     	; 0x815a <__fp_di2sf+0x28>
    813a:	12 16       	cp	r1, r18
    813c:	13 06       	cpc	r1, r19
    813e:	14 06       	cpc	r1, r20
    8140:	44 0b       	sbc	r20, r20
    8142:	93 95       	inc	r25
    8144:	f6 95       	lsr	r31
    8146:	87 95       	ror	r24
    8148:	77 95       	ror	r23
    814a:	67 95       	ror	r22
    814c:	57 95       	ror	r21
    814e:	40 40       	sbci	r20, 0x00	; 0
    8150:	ff 23       	and	r31, r31
    8152:	b9 f7       	brne	.-18     	; 0x8142 <__fp_di2sf+0x10>
    8154:	1b c0       	rjmp	.+54     	; 0x818c <__fp_di2sf+0x5a>
    8156:	99 27       	eor	r25, r25
    8158:	08 95       	ret
    815a:	88 23       	and	r24, r24
    815c:	51 f4       	brne	.+20     	; 0x8172 <__fp_di2sf+0x40>
    815e:	98 50       	subi	r25, 0x08	; 8
    8160:	d2 f7       	brpl	.-12     	; 0x8156 <__fp_di2sf+0x24>
    8162:	87 2b       	or	r24, r23
    8164:	76 2f       	mov	r23, r22
    8166:	65 2f       	mov	r22, r21
    8168:	54 2f       	mov	r21, r20
    816a:	43 2f       	mov	r20, r19
    816c:	32 2f       	mov	r19, r18
    816e:	20 e0       	ldi	r18, 0x00	; 0
    8170:	b1 f3       	breq	.-20     	; 0x815e <__fp_di2sf+0x2c>
    8172:	12 16       	cp	r1, r18
    8174:	13 06       	cpc	r1, r19
    8176:	14 06       	cpc	r1, r20
    8178:	44 0b       	sbc	r20, r20
    817a:	88 23       	and	r24, r24
    817c:	3a f0       	brmi	.+14     	; 0x818c <__fp_di2sf+0x5a>
    817e:	9a 95       	dec	r25
    8180:	44 0f       	add	r20, r20
    8182:	55 1f       	adc	r21, r21
    8184:	66 1f       	adc	r22, r22
    8186:	77 1f       	adc	r23, r23
    8188:	88 1f       	adc	r24, r24
    818a:	ca f7       	brpl	.-14     	; 0x817e <__fp_di2sf+0x4c>
    818c:	55 23       	and	r21, r21
    818e:	4a f4       	brpl	.+18     	; 0x81a2 <__fp_di2sf+0x70>
    8190:	44 0f       	add	r20, r20
    8192:	55 1f       	adc	r21, r21
    8194:	11 f4       	brne	.+4      	; 0x819a <__fp_di2sf+0x68>
    8196:	60 ff       	sbrs	r22, 0
    8198:	04 c0       	rjmp	.+8      	; 0x81a2 <__fp_di2sf+0x70>
    819a:	6f 5f       	subi	r22, 0xFF	; 255
    819c:	7f 4f       	sbci	r23, 0xFF	; 255
    819e:	8f 4f       	sbci	r24, 0xFF	; 255
    81a0:	9f 4f       	sbci	r25, 0xFF	; 255
    81a2:	88 0f       	add	r24, r24
    81a4:	96 95       	lsr	r25
    81a6:	87 95       	ror	r24
    81a8:	97 f9       	bld	r25, 7
    81aa:	08 95       	ret

000081ac <__fp_cmp>:
    81ac:	99 0f       	add	r25, r25
    81ae:	00 08       	sbc	r0, r0
    81b0:	55 0f       	add	r21, r21
    81b2:	aa 0b       	sbc	r26, r26
    81b4:	e0 e8       	ldi	r30, 0x80	; 128
    81b6:	fe ef       	ldi	r31, 0xFE	; 254
    81b8:	16 16       	cp	r1, r22
    81ba:	17 06       	cpc	r1, r23
    81bc:	e8 07       	cpc	r30, r24
    81be:	f9 07       	cpc	r31, r25
    81c0:	c0 f0       	brcs	.+48     	; 0x81f2 <__fp_cmp+0x46>
    81c2:	12 16       	cp	r1, r18
    81c4:	13 06       	cpc	r1, r19
    81c6:	e4 07       	cpc	r30, r20
    81c8:	f5 07       	cpc	r31, r21
    81ca:	98 f0       	brcs	.+38     	; 0x81f2 <__fp_cmp+0x46>
    81cc:	62 1b       	sub	r22, r18
    81ce:	73 0b       	sbc	r23, r19
    81d0:	84 0b       	sbc	r24, r20
    81d2:	95 0b       	sbc	r25, r21
    81d4:	39 f4       	brne	.+14     	; 0x81e4 <__fp_cmp+0x38>
    81d6:	0a 26       	eor	r0, r26
    81d8:	61 f0       	breq	.+24     	; 0x81f2 <__fp_cmp+0x46>
    81da:	23 2b       	or	r18, r19
    81dc:	24 2b       	or	r18, r20
    81de:	25 2b       	or	r18, r21
    81e0:	21 f4       	brne	.+8      	; 0x81ea <__fp_cmp+0x3e>
    81e2:	08 95       	ret
    81e4:	0a 26       	eor	r0, r26
    81e6:	09 f4       	brne	.+2      	; 0x81ea <__fp_cmp+0x3e>
    81e8:	a1 40       	sbci	r26, 0x01	; 1
    81ea:	a6 95       	lsr	r26
    81ec:	8f ef       	ldi	r24, 0xFF	; 255
    81ee:	81 1d       	adc	r24, r1
    81f0:	81 1d       	adc	r24, r1
    81f2:	08 95       	ret

000081f4 <__fp_inf>:
    81f4:	97 f9       	bld	r25, 7
    81f6:	9f 67       	ori	r25, 0x7F	; 127
    81f8:	80 e8       	ldi	r24, 0x80	; 128
    81fa:	70 e0       	ldi	r23, 0x00	; 0
    81fc:	60 e0       	ldi	r22, 0x00	; 0
    81fe:	08 95       	ret

00008200 <__fp_nan>:
    8200:	9f ef       	ldi	r25, 0xFF	; 255
    8202:	80 ec       	ldi	r24, 0xC0	; 192
    8204:	08 95       	ret

00008206 <__fp_negdi>:
    8206:	90 95       	com	r25
    8208:	80 95       	com	r24
    820a:	70 95       	com	r23
    820c:	60 95       	com	r22
    820e:	50 95       	com	r21
    8210:	40 95       	com	r20
    8212:	30 95       	com	r19
    8214:	21 95       	neg	r18
    8216:	3f 4f       	sbci	r19, 0xFF	; 255
    8218:	4f 4f       	sbci	r20, 0xFF	; 255
    821a:	5f 4f       	sbci	r21, 0xFF	; 255
    821c:	6f 4f       	sbci	r22, 0xFF	; 255
    821e:	7f 4f       	sbci	r23, 0xFF	; 255
    8220:	8f 4f       	sbci	r24, 0xFF	; 255
    8222:	9f 4f       	sbci	r25, 0xFF	; 255
    8224:	08 95       	ret

00008226 <__fp_pscA>:
    8226:	00 24       	eor	r0, r0
    8228:	0a 94       	dec	r0
    822a:	16 16       	cp	r1, r22
    822c:	17 06       	cpc	r1, r23
    822e:	18 06       	cpc	r1, r24
    8230:	09 06       	cpc	r0, r25
    8232:	08 95       	ret

00008234 <__fp_pscB>:
    8234:	00 24       	eor	r0, r0
    8236:	0a 94       	dec	r0
    8238:	12 16       	cp	r1, r18
    823a:	13 06       	cpc	r1, r19
    823c:	14 06       	cpc	r1, r20
    823e:	05 06       	cpc	r0, r21
    8240:	08 95       	ret

00008242 <__fp_round>:
    8242:	09 2e       	mov	r0, r25
    8244:	03 94       	inc	r0
    8246:	00 0c       	add	r0, r0
    8248:	11 f4       	brne	.+4      	; 0x824e <__fp_round+0xc>
    824a:	88 23       	and	r24, r24
    824c:	52 f0       	brmi	.+20     	; 0x8262 <__fp_round+0x20>
    824e:	bb 0f       	add	r27, r27
    8250:	40 f4       	brcc	.+16     	; 0x8262 <__fp_round+0x20>
    8252:	bf 2b       	or	r27, r31
    8254:	11 f4       	brne	.+4      	; 0x825a <__fp_round+0x18>
    8256:	60 ff       	sbrs	r22, 0
    8258:	04 c0       	rjmp	.+8      	; 0x8262 <__fp_round+0x20>
    825a:	6f 5f       	subi	r22, 0xFF	; 255
    825c:	7f 4f       	sbci	r23, 0xFF	; 255
    825e:	8f 4f       	sbci	r24, 0xFF	; 255
    8260:	9f 4f       	sbci	r25, 0xFF	; 255
    8262:	08 95       	ret

00008264 <__fp_split3>:
    8264:	57 fd       	sbrc	r21, 7
    8266:	90 58       	subi	r25, 0x80	; 128
    8268:	44 0f       	add	r20, r20
    826a:	55 1f       	adc	r21, r21
    826c:	59 f0       	breq	.+22     	; 0x8284 <__fp_splitA+0x10>
    826e:	5f 3f       	cpi	r21, 0xFF	; 255
    8270:	71 f0       	breq	.+28     	; 0x828e <__fp_splitA+0x1a>
    8272:	47 95       	ror	r20

00008274 <__fp_splitA>:
    8274:	88 0f       	add	r24, r24
    8276:	97 fb       	bst	r25, 7
    8278:	99 1f       	adc	r25, r25
    827a:	61 f0       	breq	.+24     	; 0x8294 <__fp_splitA+0x20>
    827c:	9f 3f       	cpi	r25, 0xFF	; 255
    827e:	79 f0       	breq	.+30     	; 0x829e <__fp_splitA+0x2a>
    8280:	87 95       	ror	r24
    8282:	08 95       	ret
    8284:	12 16       	cp	r1, r18
    8286:	13 06       	cpc	r1, r19
    8288:	14 06       	cpc	r1, r20
    828a:	55 1f       	adc	r21, r21
    828c:	f2 cf       	rjmp	.-28     	; 0x8272 <__fp_split3+0xe>
    828e:	46 95       	lsr	r20
    8290:	f1 df       	rcall	.-30     	; 0x8274 <__fp_splitA>
    8292:	08 c0       	rjmp	.+16     	; 0x82a4 <__fp_splitA+0x30>
    8294:	16 16       	cp	r1, r22
    8296:	17 06       	cpc	r1, r23
    8298:	18 06       	cpc	r1, r24
    829a:	99 1f       	adc	r25, r25
    829c:	f1 cf       	rjmp	.-30     	; 0x8280 <__fp_splitA+0xc>
    829e:	86 95       	lsr	r24
    82a0:	71 05       	cpc	r23, r1
    82a2:	61 05       	cpc	r22, r1
    82a4:	08 94       	sec
    82a6:	08 95       	ret

000082a8 <__fp_zero>:
    82a8:	e8 94       	clt

000082aa <__fp_szero>:
    82aa:	bb 27       	eor	r27, r27
    82ac:	66 27       	eor	r22, r22
    82ae:	77 27       	eor	r23, r23
    82b0:	cb 01       	movw	r24, r22
    82b2:	97 f9       	bld	r25, 7
    82b4:	08 95       	ret

000082b6 <__gesf2>:
    82b6:	7a df       	rcall	.-268    	; 0x81ac <__fp_cmp>
    82b8:	08 f4       	brcc	.+2      	; 0x82bc <__gesf2+0x6>
    82ba:	8f ef       	ldi	r24, 0xFF	; 255
    82bc:	08 95       	ret

000082be <__mulsf3>:
    82be:	0b d0       	rcall	.+22     	; 0x82d6 <__mulsf3x>
    82c0:	c0 cf       	rjmp	.-128    	; 0x8242 <__fp_round>
    82c2:	b1 df       	rcall	.-158    	; 0x8226 <__fp_pscA>
    82c4:	28 f0       	brcs	.+10     	; 0x82d0 <__mulsf3+0x12>
    82c6:	b6 df       	rcall	.-148    	; 0x8234 <__fp_pscB>
    82c8:	18 f0       	brcs	.+6      	; 0x82d0 <__mulsf3+0x12>
    82ca:	95 23       	and	r25, r21
    82cc:	09 f0       	breq	.+2      	; 0x82d0 <__mulsf3+0x12>
    82ce:	92 cf       	rjmp	.-220    	; 0x81f4 <__fp_inf>
    82d0:	97 cf       	rjmp	.-210    	; 0x8200 <__fp_nan>
    82d2:	11 24       	eor	r1, r1
    82d4:	ea cf       	rjmp	.-44     	; 0x82aa <__fp_szero>

000082d6 <__mulsf3x>:
    82d6:	c6 df       	rcall	.-116    	; 0x8264 <__fp_split3>
    82d8:	a0 f3       	brcs	.-24     	; 0x82c2 <__mulsf3+0x4>

000082da <__mulsf3_pse>:
    82da:	95 9f       	mul	r25, r21
    82dc:	d1 f3       	breq	.-12     	; 0x82d2 <__mulsf3+0x14>
    82de:	95 0f       	add	r25, r21
    82e0:	50 e0       	ldi	r21, 0x00	; 0
    82e2:	55 1f       	adc	r21, r21
    82e4:	62 9f       	mul	r22, r18
    82e6:	f0 01       	movw	r30, r0
    82e8:	72 9f       	mul	r23, r18
    82ea:	bb 27       	eor	r27, r27
    82ec:	f0 0d       	add	r31, r0
    82ee:	b1 1d       	adc	r27, r1
    82f0:	63 9f       	mul	r22, r19
    82f2:	aa 27       	eor	r26, r26
    82f4:	f0 0d       	add	r31, r0
    82f6:	b1 1d       	adc	r27, r1
    82f8:	aa 1f       	adc	r26, r26
    82fa:	64 9f       	mul	r22, r20
    82fc:	66 27       	eor	r22, r22
    82fe:	b0 0d       	add	r27, r0
    8300:	a1 1d       	adc	r26, r1
    8302:	66 1f       	adc	r22, r22
    8304:	82 9f       	mul	r24, r18
    8306:	22 27       	eor	r18, r18
    8308:	b0 0d       	add	r27, r0
    830a:	a1 1d       	adc	r26, r1
    830c:	62 1f       	adc	r22, r18
    830e:	73 9f       	mul	r23, r19
    8310:	b0 0d       	add	r27, r0
    8312:	a1 1d       	adc	r26, r1
    8314:	62 1f       	adc	r22, r18
    8316:	83 9f       	mul	r24, r19
    8318:	a0 0d       	add	r26, r0
    831a:	61 1d       	adc	r22, r1
    831c:	22 1f       	adc	r18, r18
    831e:	74 9f       	mul	r23, r20
    8320:	33 27       	eor	r19, r19
    8322:	a0 0d       	add	r26, r0
    8324:	61 1d       	adc	r22, r1
    8326:	23 1f       	adc	r18, r19
    8328:	84 9f       	mul	r24, r20
    832a:	60 0d       	add	r22, r0
    832c:	21 1d       	adc	r18, r1
    832e:	82 2f       	mov	r24, r18
    8330:	76 2f       	mov	r23, r22
    8332:	6a 2f       	mov	r22, r26
    8334:	11 24       	eor	r1, r1
    8336:	9f 57       	subi	r25, 0x7F	; 127
    8338:	50 40       	sbci	r21, 0x00	; 0
    833a:	8a f0       	brmi	.+34     	; 0x835e <__mulsf3_pse+0x84>
    833c:	e1 f0       	breq	.+56     	; 0x8376 <__mulsf3_pse+0x9c>
    833e:	88 23       	and	r24, r24
    8340:	4a f0       	brmi	.+18     	; 0x8354 <__mulsf3_pse+0x7a>
    8342:	ee 0f       	add	r30, r30
    8344:	ff 1f       	adc	r31, r31
    8346:	bb 1f       	adc	r27, r27
    8348:	66 1f       	adc	r22, r22
    834a:	77 1f       	adc	r23, r23
    834c:	88 1f       	adc	r24, r24
    834e:	91 50       	subi	r25, 0x01	; 1
    8350:	50 40       	sbci	r21, 0x00	; 0
    8352:	a9 f7       	brne	.-22     	; 0x833e <__mulsf3_pse+0x64>
    8354:	9e 3f       	cpi	r25, 0xFE	; 254
    8356:	51 05       	cpc	r21, r1
    8358:	70 f0       	brcs	.+28     	; 0x8376 <__mulsf3_pse+0x9c>
    835a:	4c cf       	rjmp	.-360    	; 0x81f4 <__fp_inf>
    835c:	a6 cf       	rjmp	.-180    	; 0x82aa <__fp_szero>
    835e:	5f 3f       	cpi	r21, 0xFF	; 255
    8360:	ec f3       	brlt	.-6      	; 0x835c <__mulsf3_pse+0x82>
    8362:	98 3e       	cpi	r25, 0xE8	; 232
    8364:	dc f3       	brlt	.-10     	; 0x835c <__mulsf3_pse+0x82>
    8366:	86 95       	lsr	r24
    8368:	77 95       	ror	r23
    836a:	67 95       	ror	r22
    836c:	b7 95       	ror	r27
    836e:	f7 95       	ror	r31
    8370:	e7 95       	ror	r30
    8372:	9f 5f       	subi	r25, 0xFF	; 255
    8374:	c1 f7       	brne	.-16     	; 0x8366 <__mulsf3_pse+0x8c>
    8376:	fe 2b       	or	r31, r30
    8378:	88 0f       	add	r24, r24
    837a:	91 1d       	adc	r25, r1
    837c:	96 95       	lsr	r25
    837e:	87 95       	ror	r24
    8380:	97 f9       	bld	r25, 7
    8382:	08 95       	ret

00008384 <__mulsi3>:
    8384:	db 01       	movw	r26, r22
    8386:	8f 93       	push	r24
    8388:	9f 93       	push	r25
    838a:	74 d0       	rcall	.+232    	; 0x8474 <__muluhisi3>
    838c:	bf 91       	pop	r27
    838e:	af 91       	pop	r26
    8390:	a2 9f       	mul	r26, r18
    8392:	80 0d       	add	r24, r0
    8394:	91 1d       	adc	r25, r1
    8396:	a3 9f       	mul	r26, r19
    8398:	90 0d       	add	r25, r0
    839a:	b2 9f       	mul	r27, r18
    839c:	90 0d       	add	r25, r0
    839e:	11 24       	eor	r1, r1
    83a0:	08 95       	ret

000083a2 <__divmodhi4>:
    83a2:	97 fb       	bst	r25, 7
    83a4:	07 2e       	mov	r0, r23
    83a6:	16 f4       	brtc	.+4      	; 0x83ac <__divmodhi4+0xa>
    83a8:	00 94       	com	r0
    83aa:	06 d0       	rcall	.+12     	; 0x83b8 <__divmodhi4_neg1>
    83ac:	77 fd       	sbrc	r23, 7
    83ae:	08 d0       	rcall	.+16     	; 0x83c0 <__divmodhi4_neg2>
    83b0:	e7 d1       	rcall	.+974    	; 0x8780 <__udivmodhi4>
    83b2:	07 fc       	sbrc	r0, 7
    83b4:	05 d0       	rcall	.+10     	; 0x83c0 <__divmodhi4_neg2>
    83b6:	3e f4       	brtc	.+14     	; 0x83c6 <__divmodhi4_exit>

000083b8 <__divmodhi4_neg1>:
    83b8:	90 95       	com	r25
    83ba:	81 95       	neg	r24
    83bc:	9f 4f       	sbci	r25, 0xFF	; 255
    83be:	08 95       	ret

000083c0 <__divmodhi4_neg2>:
    83c0:	70 95       	com	r23
    83c2:	61 95       	neg	r22
    83c4:	7f 4f       	sbci	r23, 0xFF	; 255

000083c6 <__divmodhi4_exit>:
    83c6:	08 95       	ret

000083c8 <__udivmodsi4>:
    83c8:	a1 e2       	ldi	r26, 0x21	; 33
    83ca:	1a 2e       	mov	r1, r26
    83cc:	aa 1b       	sub	r26, r26
    83ce:	bb 1b       	sub	r27, r27
    83d0:	fd 01       	movw	r30, r26
    83d2:	0d c0       	rjmp	.+26     	; 0x83ee <__udivmodsi4_ep>

000083d4 <__udivmodsi4_loop>:
    83d4:	aa 1f       	adc	r26, r26
    83d6:	bb 1f       	adc	r27, r27
    83d8:	ee 1f       	adc	r30, r30
    83da:	ff 1f       	adc	r31, r31
    83dc:	a2 17       	cp	r26, r18
    83de:	b3 07       	cpc	r27, r19
    83e0:	e4 07       	cpc	r30, r20
    83e2:	f5 07       	cpc	r31, r21
    83e4:	20 f0       	brcs	.+8      	; 0x83ee <__udivmodsi4_ep>
    83e6:	a2 1b       	sub	r26, r18
    83e8:	b3 0b       	sbc	r27, r19
    83ea:	e4 0b       	sbc	r30, r20
    83ec:	f5 0b       	sbc	r31, r21

000083ee <__udivmodsi4_ep>:
    83ee:	66 1f       	adc	r22, r22
    83f0:	77 1f       	adc	r23, r23
    83f2:	88 1f       	adc	r24, r24
    83f4:	99 1f       	adc	r25, r25
    83f6:	1a 94       	dec	r1
    83f8:	69 f7       	brne	.-38     	; 0x83d4 <__udivmodsi4_loop>
    83fa:	60 95       	com	r22
    83fc:	70 95       	com	r23
    83fe:	80 95       	com	r24
    8400:	90 95       	com	r25
    8402:	9b 01       	movw	r18, r22
    8404:	ac 01       	movw	r20, r24
    8406:	bd 01       	movw	r22, r26
    8408:	cf 01       	movw	r24, r30
    840a:	08 95       	ret

0000840c <__divmodsi4>:
    840c:	05 2e       	mov	r0, r21
    840e:	97 fb       	bst	r25, 7
    8410:	16 f4       	brtc	.+4      	; 0x8416 <__divmodsi4+0xa>
    8412:	00 94       	com	r0
    8414:	0f d0       	rcall	.+30     	; 0x8434 <__negsi2>
    8416:	57 fd       	sbrc	r21, 7
    8418:	05 d0       	rcall	.+10     	; 0x8424 <__divmodsi4_neg2>
    841a:	d6 df       	rcall	.-84     	; 0x83c8 <__udivmodsi4>
    841c:	07 fc       	sbrc	r0, 7
    841e:	02 d0       	rcall	.+4      	; 0x8424 <__divmodsi4_neg2>
    8420:	46 f4       	brtc	.+16     	; 0x8432 <__divmodsi4_exit>
    8422:	08 c0       	rjmp	.+16     	; 0x8434 <__negsi2>

00008424 <__divmodsi4_neg2>:
    8424:	50 95       	com	r21
    8426:	40 95       	com	r20
    8428:	30 95       	com	r19
    842a:	21 95       	neg	r18
    842c:	3f 4f       	sbci	r19, 0xFF	; 255
    842e:	4f 4f       	sbci	r20, 0xFF	; 255
    8430:	5f 4f       	sbci	r21, 0xFF	; 255

00008432 <__divmodsi4_exit>:
    8432:	08 95       	ret

00008434 <__negsi2>:
    8434:	90 95       	com	r25
    8436:	80 95       	com	r24
    8438:	70 95       	com	r23
    843a:	61 95       	neg	r22
    843c:	7f 4f       	sbci	r23, 0xFF	; 255
    843e:	8f 4f       	sbci	r24, 0xFF	; 255
    8440:	9f 4f       	sbci	r25, 0xFF	; 255
    8442:	08 95       	ret

00008444 <__tablejump2__>:
    8444:	ee 0f       	add	r30, r30
    8446:	ff 1f       	adc	r31, r31
    8448:	00 24       	eor	r0, r0
    844a:	00 1c       	adc	r0, r0
    844c:	0b be       	out	0x3b, r0	; 59
    844e:	07 90       	elpm	r0, Z+
    8450:	f6 91       	elpm	r31, Z
    8452:	e0 2d       	mov	r30, r0
    8454:	09 94       	ijmp

00008456 <__umulhisi3>:
    8456:	a2 9f       	mul	r26, r18
    8458:	b0 01       	movw	r22, r0
    845a:	b3 9f       	mul	r27, r19
    845c:	c0 01       	movw	r24, r0
    845e:	a3 9f       	mul	r26, r19
    8460:	70 0d       	add	r23, r0
    8462:	81 1d       	adc	r24, r1
    8464:	11 24       	eor	r1, r1
    8466:	91 1d       	adc	r25, r1
    8468:	b2 9f       	mul	r27, r18
    846a:	70 0d       	add	r23, r0
    846c:	81 1d       	adc	r24, r1
    846e:	11 24       	eor	r1, r1
    8470:	91 1d       	adc	r25, r1
    8472:	08 95       	ret

00008474 <__muluhisi3>:
    8474:	f0 df       	rcall	.-32     	; 0x8456 <__umulhisi3>
    8476:	a5 9f       	mul	r26, r21
    8478:	90 0d       	add	r25, r0
    847a:	b4 9f       	mul	r27, r20
    847c:	90 0d       	add	r25, r0
    847e:	a4 9f       	mul	r26, r20
    8480:	80 0d       	add	r24, r0
    8482:	91 1d       	adc	r25, r1
    8484:	11 24       	eor	r1, r1
    8486:	08 95       	ret

00008488 <__mulshisi3>:
    8488:	b7 ff       	sbrs	r27, 7
    848a:	f4 cf       	rjmp	.-24     	; 0x8474 <__muluhisi3>

0000848c <__mulohisi3>:
    848c:	f3 df       	rcall	.-26     	; 0x8474 <__muluhisi3>
    848e:	82 1b       	sub	r24, r18
    8490:	93 0b       	sbc	r25, r19
    8492:	08 95       	ret

00008494 <__muldi3>:
    8494:	df 93       	push	r29
    8496:	cf 93       	push	r28
    8498:	1f 93       	push	r17
    849a:	0f 93       	push	r16
    849c:	9a 9d       	mul	r25, r10
    849e:	f0 2d       	mov	r31, r0
    84a0:	21 9f       	mul	r18, r17
    84a2:	f0 0d       	add	r31, r0
    84a4:	8b 9d       	mul	r24, r11
    84a6:	f0 0d       	add	r31, r0
    84a8:	8a 9d       	mul	r24, r10
    84aa:	e0 2d       	mov	r30, r0
    84ac:	f1 0d       	add	r31, r1
    84ae:	03 9f       	mul	r16, r19
    84b0:	f0 0d       	add	r31, r0
    84b2:	02 9f       	mul	r16, r18
    84b4:	e0 0d       	add	r30, r0
    84b6:	f1 1d       	adc	r31, r1
    84b8:	4e 9d       	mul	r20, r14
    84ba:	e0 0d       	add	r30, r0
    84bc:	f1 1d       	adc	r31, r1
    84be:	5e 9d       	mul	r21, r14
    84c0:	f0 0d       	add	r31, r0
    84c2:	4f 9d       	mul	r20, r15
    84c4:	f0 0d       	add	r31, r0
    84c6:	7f 93       	push	r23
    84c8:	6f 93       	push	r22
    84ca:	bf 92       	push	r11
    84cc:	af 92       	push	r10
    84ce:	5f 93       	push	r21
    84d0:	4f 93       	push	r20
    84d2:	d5 01       	movw	r26, r10
    84d4:	c0 df       	rcall	.-128    	; 0x8456 <__umulhisi3>
    84d6:	8b 01       	movw	r16, r22
    84d8:	ac 01       	movw	r20, r24
    84da:	d7 01       	movw	r26, r14
    84dc:	bc df       	rcall	.-136    	; 0x8456 <__umulhisi3>
    84de:	eb 01       	movw	r28, r22
    84e0:	e8 0f       	add	r30, r24
    84e2:	f9 1f       	adc	r31, r25
    84e4:	d6 01       	movw	r26, r12
    84e6:	1f d0       	rcall	.+62     	; 0x8526 <__muldi3_6>
    84e8:	2f 91       	pop	r18
    84ea:	3f 91       	pop	r19
    84ec:	d6 01       	movw	r26, r12
    84ee:	b3 df       	rcall	.-154    	; 0x8456 <__umulhisi3>
    84f0:	c6 0f       	add	r28, r22
    84f2:	d7 1f       	adc	r29, r23
    84f4:	e8 1f       	adc	r30, r24
    84f6:	f9 1f       	adc	r31, r25
    84f8:	af 91       	pop	r26
    84fa:	bf 91       	pop	r27
    84fc:	14 d0       	rcall	.+40     	; 0x8526 <__muldi3_6>
    84fe:	2f 91       	pop	r18
    8500:	3f 91       	pop	r19
    8502:	a9 df       	rcall	.-174    	; 0x8456 <__umulhisi3>
    8504:	c6 0f       	add	r28, r22
    8506:	d7 1f       	adc	r29, r23
    8508:	e8 1f       	adc	r30, r24
    850a:	f9 1f       	adc	r31, r25
    850c:	d6 01       	movw	r26, r12
    850e:	a3 df       	rcall	.-186    	; 0x8456 <__umulhisi3>
    8510:	e6 0f       	add	r30, r22
    8512:	f7 1f       	adc	r31, r23
    8514:	98 01       	movw	r18, r16
    8516:	be 01       	movw	r22, r28
    8518:	cf 01       	movw	r24, r30
    851a:	11 24       	eor	r1, r1
    851c:	0f 91       	pop	r16
    851e:	1f 91       	pop	r17
    8520:	cf 91       	pop	r28
    8522:	df 91       	pop	r29
    8524:	08 95       	ret

00008526 <__muldi3_6>:
    8526:	97 df       	rcall	.-210    	; 0x8456 <__umulhisi3>
    8528:	46 0f       	add	r20, r22
    852a:	57 1f       	adc	r21, r23
    852c:	c8 1f       	adc	r28, r24
    852e:	d9 1f       	adc	r29, r25
    8530:	08 f4       	brcc	.+2      	; 0x8534 <__muldi3_6+0xe>
    8532:	31 96       	adiw	r30, 0x01	; 1
    8534:	08 95       	ret

00008536 <__moddi3>:
    8536:	68 94       	set
    8538:	01 c0       	rjmp	.+2      	; 0x853c <__divdi3_moddi3>

0000853a <__divdi3>:
    853a:	e8 94       	clt

0000853c <__divdi3_moddi3>:
    853c:	f9 2f       	mov	r31, r25
    853e:	f1 2b       	or	r31, r17
    8540:	0a f0       	brmi	.+2      	; 0x8544 <__divdi3_moddi3+0x8>
    8542:	27 c0       	rjmp	.+78     	; 0x8592 <__udivdi3_umoddi3>
    8544:	a0 e0       	ldi	r26, 0x00	; 0
    8546:	b0 e0       	ldi	r27, 0x00	; 0
    8548:	e7 ea       	ldi	r30, 0xA7	; 167
    854a:	f2 e4       	ldi	r31, 0x42	; 66
    854c:	93 c0       	rjmp	.+294    	; 0x8674 <__prologue_saves__+0xc>
    854e:	09 2e       	mov	r0, r25
    8550:	05 94       	asr	r0
    8552:	1a f4       	brpl	.+6      	; 0x855a <__divdi3_moddi3+0x1e>
    8554:	79 d0       	rcall	.+242    	; 0x8648 <__negdi2>
    8556:	11 23       	and	r17, r17
    8558:	92 f4       	brpl	.+36     	; 0x857e <__divdi3_moddi3+0x42>
    855a:	f0 e8       	ldi	r31, 0x80	; 128
    855c:	0f 26       	eor	r0, r31
    855e:	ff ef       	ldi	r31, 0xFF	; 255
    8560:	e0 94       	com	r14
    8562:	f0 94       	com	r15
    8564:	00 95       	com	r16
    8566:	10 95       	com	r17
    8568:	b0 94       	com	r11
    856a:	c0 94       	com	r12
    856c:	d0 94       	com	r13
    856e:	a1 94       	neg	r10
    8570:	bf 0a       	sbc	r11, r31
    8572:	cf 0a       	sbc	r12, r31
    8574:	df 0a       	sbc	r13, r31
    8576:	ef 0a       	sbc	r14, r31
    8578:	ff 0a       	sbc	r15, r31
    857a:	0f 0b       	sbc	r16, r31
    857c:	1f 0b       	sbc	r17, r31
    857e:	13 d0       	rcall	.+38     	; 0x85a6 <__udivmod64>
    8580:	07 fc       	sbrc	r0, 7
    8582:	62 d0       	rcall	.+196    	; 0x8648 <__negdi2>
    8584:	cd b7       	in	r28, 0x3d	; 61
    8586:	de b7       	in	r29, 0x3e	; 62
    8588:	ec e0       	ldi	r30, 0x0C	; 12
    858a:	90 c0       	rjmp	.+288    	; 0x86ac <__epilogue_restores__+0xc>

0000858c <__umoddi3>:
    858c:	68 94       	set
    858e:	01 c0       	rjmp	.+2      	; 0x8592 <__udivdi3_umoddi3>

00008590 <__udivdi3>:
    8590:	e8 94       	clt

00008592 <__udivdi3_umoddi3>:
    8592:	8f 92       	push	r8
    8594:	9f 92       	push	r9
    8596:	cf 93       	push	r28
    8598:	df 93       	push	r29
    859a:	05 d0       	rcall	.+10     	; 0x85a6 <__udivmod64>
    859c:	df 91       	pop	r29
    859e:	cf 91       	pop	r28
    85a0:	9f 90       	pop	r9
    85a2:	8f 90       	pop	r8
    85a4:	08 95       	ret

000085a6 <__udivmod64>:
    85a6:	88 24       	eor	r8, r8
    85a8:	99 24       	eor	r9, r9
    85aa:	f4 01       	movw	r30, r8
    85ac:	e4 01       	movw	r28, r8
    85ae:	b0 e4       	ldi	r27, 0x40	; 64
    85b0:	9f 93       	push	r25
    85b2:	aa 27       	eor	r26, r26
    85b4:	9a 15       	cp	r25, r10
    85b6:	8b 04       	cpc	r8, r11
    85b8:	9c 04       	cpc	r9, r12
    85ba:	ed 05       	cpc	r30, r13
    85bc:	fe 05       	cpc	r31, r14
    85be:	cf 05       	cpc	r28, r15
    85c0:	d0 07       	cpc	r29, r16
    85c2:	a1 07       	cpc	r26, r17
    85c4:	98 f4       	brcc	.+38     	; 0x85ec <__udivmod64+0x46>
    85c6:	ad 2f       	mov	r26, r29
    85c8:	dc 2f       	mov	r29, r28
    85ca:	cf 2f       	mov	r28, r31
    85cc:	fe 2f       	mov	r31, r30
    85ce:	e9 2d       	mov	r30, r9
    85d0:	98 2c       	mov	r9, r8
    85d2:	89 2e       	mov	r8, r25
    85d4:	98 2f       	mov	r25, r24
    85d6:	87 2f       	mov	r24, r23
    85d8:	76 2f       	mov	r23, r22
    85da:	65 2f       	mov	r22, r21
    85dc:	54 2f       	mov	r21, r20
    85de:	43 2f       	mov	r20, r19
    85e0:	32 2f       	mov	r19, r18
    85e2:	22 27       	eor	r18, r18
    85e4:	b8 50       	subi	r27, 0x08	; 8
    85e6:	31 f7       	brne	.-52     	; 0x85b4 <__udivmod64+0xe>
    85e8:	bf 91       	pop	r27
    85ea:	27 c0       	rjmp	.+78     	; 0x863a <__udivmod64+0x94>
    85ec:	1b 2e       	mov	r1, r27
    85ee:	bf 91       	pop	r27
    85f0:	bb 27       	eor	r27, r27
    85f2:	22 0f       	add	r18, r18
    85f4:	33 1f       	adc	r19, r19
    85f6:	44 1f       	adc	r20, r20
    85f8:	55 1f       	adc	r21, r21
    85fa:	66 1f       	adc	r22, r22
    85fc:	77 1f       	adc	r23, r23
    85fe:	88 1f       	adc	r24, r24
    8600:	99 1f       	adc	r25, r25
    8602:	88 1c       	adc	r8, r8
    8604:	99 1c       	adc	r9, r9
    8606:	ee 1f       	adc	r30, r30
    8608:	ff 1f       	adc	r31, r31
    860a:	cc 1f       	adc	r28, r28
    860c:	dd 1f       	adc	r29, r29
    860e:	aa 1f       	adc	r26, r26
    8610:	bb 1f       	adc	r27, r27
    8612:	8a 14       	cp	r8, r10
    8614:	9b 04       	cpc	r9, r11
    8616:	ec 05       	cpc	r30, r12
    8618:	fd 05       	cpc	r31, r13
    861a:	ce 05       	cpc	r28, r14
    861c:	df 05       	cpc	r29, r15
    861e:	a0 07       	cpc	r26, r16
    8620:	b1 07       	cpc	r27, r17
    8622:	48 f0       	brcs	.+18     	; 0x8636 <__udivmod64+0x90>
    8624:	8a 18       	sub	r8, r10
    8626:	9b 08       	sbc	r9, r11
    8628:	ec 09       	sbc	r30, r12
    862a:	fd 09       	sbc	r31, r13
    862c:	ce 09       	sbc	r28, r14
    862e:	df 09       	sbc	r29, r15
    8630:	a0 0b       	sbc	r26, r16
    8632:	b1 0b       	sbc	r27, r17
    8634:	21 60       	ori	r18, 0x01	; 1
    8636:	1a 94       	dec	r1
    8638:	e1 f6       	brne	.-72     	; 0x85f2 <__udivmod64+0x4c>
    863a:	2e f4       	brtc	.+10     	; 0x8646 <__udivmod64+0xa0>
    863c:	94 01       	movw	r18, r8
    863e:	af 01       	movw	r20, r30
    8640:	be 01       	movw	r22, r28
    8642:	cd 01       	movw	r24, r26
    8644:	00 0c       	add	r0, r0
    8646:	08 95       	ret

00008648 <__negdi2>:
    8648:	60 95       	com	r22
    864a:	70 95       	com	r23
    864c:	80 95       	com	r24
    864e:	90 95       	com	r25
    8650:	30 95       	com	r19
    8652:	40 95       	com	r20
    8654:	50 95       	com	r21
    8656:	21 95       	neg	r18
    8658:	3f 4f       	sbci	r19, 0xFF	; 255
    865a:	4f 4f       	sbci	r20, 0xFF	; 255
    865c:	5f 4f       	sbci	r21, 0xFF	; 255
    865e:	6f 4f       	sbci	r22, 0xFF	; 255
    8660:	7f 4f       	sbci	r23, 0xFF	; 255
    8662:	8f 4f       	sbci	r24, 0xFF	; 255
    8664:	9f 4f       	sbci	r25, 0xFF	; 255
    8666:	08 95       	ret

00008668 <__prologue_saves__>:
    8668:	2f 92       	push	r2
    866a:	3f 92       	push	r3
    866c:	4f 92       	push	r4
    866e:	5f 92       	push	r5
    8670:	6f 92       	push	r6
    8672:	7f 92       	push	r7
    8674:	8f 92       	push	r8
    8676:	9f 92       	push	r9
    8678:	af 92       	push	r10
    867a:	bf 92       	push	r11
    867c:	cf 92       	push	r12
    867e:	df 92       	push	r13
    8680:	ef 92       	push	r14
    8682:	ff 92       	push	r15
    8684:	0f 93       	push	r16
    8686:	1f 93       	push	r17
    8688:	cf 93       	push	r28
    868a:	df 93       	push	r29
    868c:	cd b7       	in	r28, 0x3d	; 61
    868e:	de b7       	in	r29, 0x3e	; 62
    8690:	ca 1b       	sub	r28, r26
    8692:	db 0b       	sbc	r29, r27
    8694:	0f b6       	in	r0, 0x3f	; 63
    8696:	f8 94       	cli
    8698:	de bf       	out	0x3e, r29	; 62
    869a:	0f be       	out	0x3f, r0	; 63
    869c:	cd bf       	out	0x3d, r28	; 61
    869e:	09 94       	ijmp

000086a0 <__epilogue_restores__>:
    86a0:	2a 88       	ldd	r2, Y+18	; 0x12
    86a2:	39 88       	ldd	r3, Y+17	; 0x11
    86a4:	48 88       	ldd	r4, Y+16	; 0x10
    86a6:	5f 84       	ldd	r5, Y+15	; 0x0f
    86a8:	6e 84       	ldd	r6, Y+14	; 0x0e
    86aa:	7d 84       	ldd	r7, Y+13	; 0x0d
    86ac:	8c 84       	ldd	r8, Y+12	; 0x0c
    86ae:	9b 84       	ldd	r9, Y+11	; 0x0b
    86b0:	aa 84       	ldd	r10, Y+10	; 0x0a
    86b2:	b9 84       	ldd	r11, Y+9	; 0x09
    86b4:	c8 84       	ldd	r12, Y+8	; 0x08
    86b6:	df 80       	ldd	r13, Y+7	; 0x07
    86b8:	ee 80       	ldd	r14, Y+6	; 0x06
    86ba:	fd 80       	ldd	r15, Y+5	; 0x05
    86bc:	0c 81       	ldd	r16, Y+4	; 0x04
    86be:	1b 81       	ldd	r17, Y+3	; 0x03
    86c0:	aa 81       	ldd	r26, Y+2	; 0x02
    86c2:	b9 81       	ldd	r27, Y+1	; 0x01
    86c4:	ce 0f       	add	r28, r30
    86c6:	d1 1d       	adc	r29, r1
    86c8:	0f b6       	in	r0, 0x3f	; 63
    86ca:	f8 94       	cli
    86cc:	de bf       	out	0x3e, r29	; 62
    86ce:	0f be       	out	0x3f, r0	; 63
    86d0:	cd bf       	out	0x3d, r28	; 61
    86d2:	ed 01       	movw	r28, r26
    86d4:	08 95       	ret

000086d6 <__ashldi3>:
    86d6:	0f 93       	push	r16
    86d8:	08 30       	cpi	r16, 0x08	; 8
    86da:	90 f0       	brcs	.+36     	; 0x8700 <__ashldi3+0x2a>
    86dc:	98 2f       	mov	r25, r24
    86de:	87 2f       	mov	r24, r23
    86e0:	76 2f       	mov	r23, r22
    86e2:	65 2f       	mov	r22, r21
    86e4:	54 2f       	mov	r21, r20
    86e6:	43 2f       	mov	r20, r19
    86e8:	32 2f       	mov	r19, r18
    86ea:	22 27       	eor	r18, r18
    86ec:	08 50       	subi	r16, 0x08	; 8
    86ee:	f4 cf       	rjmp	.-24     	; 0x86d8 <__ashldi3+0x2>
    86f0:	22 0f       	add	r18, r18
    86f2:	33 1f       	adc	r19, r19
    86f4:	44 1f       	adc	r20, r20
    86f6:	55 1f       	adc	r21, r21
    86f8:	66 1f       	adc	r22, r22
    86fa:	77 1f       	adc	r23, r23
    86fc:	88 1f       	adc	r24, r24
    86fe:	99 1f       	adc	r25, r25
    8700:	0a 95       	dec	r16
    8702:	b2 f7       	brpl	.-20     	; 0x86f0 <__ashldi3+0x1a>
    8704:	0f 91       	pop	r16
    8706:	08 95       	ret

00008708 <__ashrdi3>:
    8708:	97 fb       	bst	r25, 7
    870a:	10 f8       	bld	r1, 0

0000870c <__lshrdi3>:
    870c:	16 94       	lsr	r1
    870e:	00 08       	sbc	r0, r0
    8710:	0f 93       	push	r16
    8712:	08 30       	cpi	r16, 0x08	; 8
    8714:	98 f0       	brcs	.+38     	; 0x873c <__lshrdi3+0x30>
    8716:	08 50       	subi	r16, 0x08	; 8
    8718:	23 2f       	mov	r18, r19
    871a:	34 2f       	mov	r19, r20
    871c:	45 2f       	mov	r20, r21
    871e:	56 2f       	mov	r21, r22
    8720:	67 2f       	mov	r22, r23
    8722:	78 2f       	mov	r23, r24
    8724:	89 2f       	mov	r24, r25
    8726:	90 2d       	mov	r25, r0
    8728:	f4 cf       	rjmp	.-24     	; 0x8712 <__lshrdi3+0x6>
    872a:	05 94       	asr	r0
    872c:	97 95       	ror	r25
    872e:	87 95       	ror	r24
    8730:	77 95       	ror	r23
    8732:	67 95       	ror	r22
    8734:	57 95       	ror	r21
    8736:	47 95       	ror	r20
    8738:	37 95       	ror	r19
    873a:	27 95       	ror	r18
    873c:	0a 95       	dec	r16
    873e:	aa f7       	brpl	.-22     	; 0x872a <__lshrdi3+0x1e>
    8740:	0f 91       	pop	r16
    8742:	08 95       	ret

00008744 <__adddi3>:
    8744:	2a 0d       	add	r18, r10
    8746:	3b 1d       	adc	r19, r11
    8748:	4c 1d       	adc	r20, r12
    874a:	5d 1d       	adc	r21, r13
    874c:	6e 1d       	adc	r22, r14
    874e:	7f 1d       	adc	r23, r15
    8750:	80 1f       	adc	r24, r16
    8752:	91 1f       	adc	r25, r17
    8754:	08 95       	ret

00008756 <__subdi3>:
    8756:	2a 19       	sub	r18, r10
    8758:	3b 09       	sbc	r19, r11
    875a:	4c 09       	sbc	r20, r12
    875c:	5d 09       	sbc	r21, r13
    875e:	6e 09       	sbc	r22, r14
    8760:	7f 09       	sbc	r23, r15
    8762:	80 0b       	sbc	r24, r16
    8764:	91 0b       	sbc	r25, r17
    8766:	08 95       	ret

00008768 <__cmpdi2_s8>:
    8768:	00 24       	eor	r0, r0
    876a:	a7 fd       	sbrc	r26, 7
    876c:	00 94       	com	r0
    876e:	2a 17       	cp	r18, r26
    8770:	30 05       	cpc	r19, r0
    8772:	40 05       	cpc	r20, r0
    8774:	50 05       	cpc	r21, r0
    8776:	60 05       	cpc	r22, r0
    8778:	70 05       	cpc	r23, r0
    877a:	80 05       	cpc	r24, r0
    877c:	90 05       	cpc	r25, r0
    877e:	08 95       	ret

00008780 <__udivmodhi4>:
    8780:	aa 1b       	sub	r26, r26
    8782:	bb 1b       	sub	r27, r27
    8784:	51 e1       	ldi	r21, 0x11	; 17
    8786:	07 c0       	rjmp	.+14     	; 0x8796 <__udivmodhi4_ep>

00008788 <__udivmodhi4_loop>:
    8788:	aa 1f       	adc	r26, r26
    878a:	bb 1f       	adc	r27, r27
    878c:	a6 17       	cp	r26, r22
    878e:	b7 07       	cpc	r27, r23
    8790:	10 f0       	brcs	.+4      	; 0x8796 <__udivmodhi4_ep>
    8792:	a6 1b       	sub	r26, r22
    8794:	b7 0b       	sbc	r27, r23

00008796 <__udivmodhi4_ep>:
    8796:	88 1f       	adc	r24, r24
    8798:	99 1f       	adc	r25, r25
    879a:	5a 95       	dec	r21
    879c:	a9 f7       	brne	.-22     	; 0x8788 <__udivmodhi4_loop>
    879e:	80 95       	com	r24
    87a0:	90 95       	com	r25
    87a2:	bc 01       	movw	r22, r24
    87a4:	cd 01       	movw	r24, r26
    87a6:	08 95       	ret

000087a8 <dtostrf>:
    87a8:	ef 92       	push	r14
    87aa:	0f 93       	push	r16
    87ac:	1f 93       	push	r17
    87ae:	cf 93       	push	r28
    87b0:	df 93       	push	r29
    87b2:	e8 01       	movw	r28, r16
    87b4:	47 fd       	sbrc	r20, 7
    87b6:	02 c0       	rjmp	.+4      	; 0x87bc <dtostrf+0x14>
    87b8:	34 e0       	ldi	r19, 0x04	; 4
    87ba:	01 c0       	rjmp	.+2      	; 0x87be <dtostrf+0x16>
    87bc:	34 e1       	ldi	r19, 0x14	; 20
    87be:	04 2e       	mov	r0, r20
    87c0:	00 0c       	add	r0, r0
    87c2:	55 0b       	sbc	r21, r21
    87c4:	57 ff       	sbrs	r21, 7
    87c6:	03 c0       	rjmp	.+6      	; 0x87ce <dtostrf+0x26>
    87c8:	51 95       	neg	r21
    87ca:	41 95       	neg	r20
    87cc:	51 09       	sbc	r21, r1
    87ce:	e3 2e       	mov	r14, r19
    87d0:	02 2f       	mov	r16, r18
    87d2:	24 2f       	mov	r18, r20
    87d4:	ae 01       	movw	r20, r28
    87d6:	0e 94 1b 4c 	call	0x9836	; 0x9836 <dtoa_prf>
    87da:	ce 01       	movw	r24, r28
    87dc:	df 91       	pop	r29
    87de:	cf 91       	pop	r28
    87e0:	1f 91       	pop	r17
    87e2:	0f 91       	pop	r16
    87e4:	ef 90       	pop	r14
    87e6:	08 95       	ret

000087e8 <do_rand>:
    87e8:	8f 92       	push	r8
    87ea:	9f 92       	push	r9
    87ec:	af 92       	push	r10
    87ee:	bf 92       	push	r11
    87f0:	cf 92       	push	r12
    87f2:	df 92       	push	r13
    87f4:	ef 92       	push	r14
    87f6:	ff 92       	push	r15
    87f8:	cf 93       	push	r28
    87fa:	df 93       	push	r29
    87fc:	ec 01       	movw	r28, r24
    87fe:	68 81       	ld	r22, Y
    8800:	79 81       	ldd	r23, Y+1	; 0x01
    8802:	8a 81       	ldd	r24, Y+2	; 0x02
    8804:	9b 81       	ldd	r25, Y+3	; 0x03
    8806:	61 15       	cp	r22, r1
    8808:	71 05       	cpc	r23, r1
    880a:	81 05       	cpc	r24, r1
    880c:	91 05       	cpc	r25, r1
    880e:	21 f4       	brne	.+8      	; 0x8818 <do_rand+0x30>
    8810:	64 e2       	ldi	r22, 0x24	; 36
    8812:	79 ed       	ldi	r23, 0xD9	; 217
    8814:	8b e5       	ldi	r24, 0x5B	; 91
    8816:	97 e0       	ldi	r25, 0x07	; 7
    8818:	2d e1       	ldi	r18, 0x1D	; 29
    881a:	33 ef       	ldi	r19, 0xF3	; 243
    881c:	41 e0       	ldi	r20, 0x01	; 1
    881e:	50 e0       	ldi	r21, 0x00	; 0
    8820:	f5 dd       	rcall	.-1046   	; 0x840c <__divmodsi4>
    8822:	49 01       	movw	r8, r18
    8824:	5a 01       	movw	r10, r20
    8826:	9b 01       	movw	r18, r22
    8828:	ac 01       	movw	r20, r24
    882a:	a7 ea       	ldi	r26, 0xA7	; 167
    882c:	b1 e4       	ldi	r27, 0x41	; 65
    882e:	22 de       	rcall	.-956    	; 0x8474 <__muluhisi3>
    8830:	6b 01       	movw	r12, r22
    8832:	7c 01       	movw	r14, r24
    8834:	ac ee       	ldi	r26, 0xEC	; 236
    8836:	b4 ef       	ldi	r27, 0xF4	; 244
    8838:	a5 01       	movw	r20, r10
    883a:	94 01       	movw	r18, r8
    883c:	27 de       	rcall	.-946    	; 0x848c <__mulohisi3>
    883e:	dc 01       	movw	r26, r24
    8840:	cb 01       	movw	r24, r22
    8842:	8c 0d       	add	r24, r12
    8844:	9d 1d       	adc	r25, r13
    8846:	ae 1d       	adc	r26, r14
    8848:	bf 1d       	adc	r27, r15
    884a:	b7 ff       	sbrs	r27, 7
    884c:	03 c0       	rjmp	.+6      	; 0x8854 <do_rand+0x6c>
    884e:	01 97       	sbiw	r24, 0x01	; 1
    8850:	a1 09       	sbc	r26, r1
    8852:	b0 48       	sbci	r27, 0x80	; 128
    8854:	88 83       	st	Y, r24
    8856:	99 83       	std	Y+1, r25	; 0x01
    8858:	aa 83       	std	Y+2, r26	; 0x02
    885a:	bb 83       	std	Y+3, r27	; 0x03
    885c:	9f 77       	andi	r25, 0x7F	; 127
    885e:	df 91       	pop	r29
    8860:	cf 91       	pop	r28
    8862:	ff 90       	pop	r15
    8864:	ef 90       	pop	r14
    8866:	df 90       	pop	r13
    8868:	cf 90       	pop	r12
    886a:	bf 90       	pop	r11
    886c:	af 90       	pop	r10
    886e:	9f 90       	pop	r9
    8870:	8f 90       	pop	r8
    8872:	08 95       	ret

00008874 <rand_r>:
    8874:	b9 cf       	rjmp	.-142    	; 0x87e8 <do_rand>

00008876 <rand>:
    8876:	80 e0       	ldi	r24, 0x00	; 0
    8878:	91 e0       	ldi	r25, 0x01	; 1
    887a:	b6 cf       	rjmp	.-148    	; 0x87e8 <do_rand>

0000887c <srand>:
    887c:	a0 e0       	ldi	r26, 0x00	; 0
    887e:	b0 e0       	ldi	r27, 0x00	; 0
    8880:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    8884:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    8888:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    888c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    8890:	08 95       	ret

00008892 <strtol>:
    8892:	3f 92       	push	r3
    8894:	4f 92       	push	r4
    8896:	5f 92       	push	r5
    8898:	6f 92       	push	r6
    889a:	7f 92       	push	r7
    889c:	8f 92       	push	r8
    889e:	9f 92       	push	r9
    88a0:	af 92       	push	r10
    88a2:	bf 92       	push	r11
    88a4:	cf 92       	push	r12
    88a6:	df 92       	push	r13
    88a8:	ef 92       	push	r14
    88aa:	ff 92       	push	r15
    88ac:	0f 93       	push	r16
    88ae:	1f 93       	push	r17
    88b0:	cf 93       	push	r28
    88b2:	df 93       	push	r29
    88b4:	5c 01       	movw	r10, r24
    88b6:	6b 01       	movw	r12, r22
    88b8:	7a 01       	movw	r14, r20
    88ba:	61 15       	cp	r22, r1
    88bc:	71 05       	cpc	r23, r1
    88be:	19 f0       	breq	.+6      	; 0x88c6 <strtol+0x34>
    88c0:	fb 01       	movw	r30, r22
    88c2:	91 83       	std	Z+1, r25	; 0x01
    88c4:	80 83       	st	Z, r24
    88c6:	e1 14       	cp	r14, r1
    88c8:	f1 04       	cpc	r15, r1
    88ca:	29 f0       	breq	.+10     	; 0x88d6 <strtol+0x44>
    88cc:	c7 01       	movw	r24, r14
    88ce:	02 97       	sbiw	r24, 0x02	; 2
    88d0:	83 97       	sbiw	r24, 0x23	; 35
    88d2:	08 f0       	brcs	.+2      	; 0x88d6 <strtol+0x44>
    88d4:	e2 c0       	rjmp	.+452    	; 0x8a9a <strtol+0x208>
    88d6:	e5 01       	movw	r28, r10
    88d8:	21 96       	adiw	r28, 0x01	; 1
    88da:	f5 01       	movw	r30, r10
    88dc:	10 81       	ld	r17, Z
    88de:	81 2f       	mov	r24, r17
    88e0:	90 e0       	ldi	r25, 0x00	; 0
    88e2:	22 d1       	rcall	.+580    	; 0x8b28 <isspace>
    88e4:	89 2b       	or	r24, r25
    88e6:	11 f0       	breq	.+4      	; 0x88ec <strtol+0x5a>
    88e8:	5e 01       	movw	r10, r28
    88ea:	f5 cf       	rjmp	.-22     	; 0x88d6 <strtol+0x44>
    88ec:	1d 32       	cpi	r17, 0x2D	; 45
    88ee:	29 f4       	brne	.+10     	; 0x88fa <strtol+0x68>
    88f0:	21 96       	adiw	r28, 0x01	; 1
    88f2:	f5 01       	movw	r30, r10
    88f4:	11 81       	ldd	r17, Z+1	; 0x01
    88f6:	01 e0       	ldi	r16, 0x01	; 1
    88f8:	07 c0       	rjmp	.+14     	; 0x8908 <strtol+0x76>
    88fa:	1b 32       	cpi	r17, 0x2B	; 43
    88fc:	21 f4       	brne	.+8      	; 0x8906 <strtol+0x74>
    88fe:	e5 01       	movw	r28, r10
    8900:	22 96       	adiw	r28, 0x02	; 2
    8902:	f5 01       	movw	r30, r10
    8904:	11 81       	ldd	r17, Z+1	; 0x01
    8906:	00 e0       	ldi	r16, 0x00	; 0
    8908:	e1 14       	cp	r14, r1
    890a:	f1 04       	cpc	r15, r1
    890c:	09 f1       	breq	.+66     	; 0x8950 <strtol+0xbe>
    890e:	f0 e1       	ldi	r31, 0x10	; 16
    8910:	ef 16       	cp	r14, r31
    8912:	f1 04       	cpc	r15, r1
    8914:	29 f4       	brne	.+10     	; 0x8920 <strtol+0x8e>
    8916:	3e c0       	rjmp	.+124    	; 0x8994 <strtol+0x102>
    8918:	10 e3       	ldi	r17, 0x30	; 48
    891a:	e1 14       	cp	r14, r1
    891c:	f1 04       	cpc	r15, r1
    891e:	21 f1       	breq	.+72     	; 0x8968 <strtol+0xd6>
    8920:	28 e0       	ldi	r18, 0x08	; 8
    8922:	e2 16       	cp	r14, r18
    8924:	f1 04       	cpc	r15, r1
    8926:	01 f1       	breq	.+64     	; 0x8968 <strtol+0xd6>
    8928:	54 f4       	brge	.+20     	; 0x893e <strtol+0xac>
    892a:	e2 e0       	ldi	r30, 0x02	; 2
    892c:	ee 16       	cp	r14, r30
    892e:	f1 04       	cpc	r15, r1
    8930:	21 f5       	brne	.+72     	; 0x897a <strtol+0xe8>
    8932:	81 2c       	mov	r8, r1
    8934:	91 2c       	mov	r9, r1
    8936:	a1 2c       	mov	r10, r1
    8938:	b0 e4       	ldi	r27, 0x40	; 64
    893a:	bb 2e       	mov	r11, r27
    893c:	3d c0       	rjmp	.+122    	; 0x89b8 <strtol+0x126>
    893e:	fa e0       	ldi	r31, 0x0A	; 10
    8940:	ef 16       	cp	r14, r31
    8942:	f1 04       	cpc	r15, r1
    8944:	39 f0       	breq	.+14     	; 0x8954 <strtol+0xc2>
    8946:	20 e1       	ldi	r18, 0x10	; 16
    8948:	e2 16       	cp	r14, r18
    894a:	f1 04       	cpc	r15, r1
    894c:	b1 f4       	brne	.+44     	; 0x897a <strtol+0xe8>
    894e:	2f c0       	rjmp	.+94     	; 0x89ae <strtol+0x11c>
    8950:	10 33       	cpi	r17, 0x30	; 48
    8952:	11 f1       	breq	.+68     	; 0x8998 <strtol+0x106>
    8954:	fa e0       	ldi	r31, 0x0A	; 10
    8956:	ef 2e       	mov	r14, r31
    8958:	f1 2c       	mov	r15, r1
    895a:	ac ec       	ldi	r26, 0xCC	; 204
    895c:	8a 2e       	mov	r8, r26
    895e:	98 2c       	mov	r9, r8
    8960:	a8 2c       	mov	r10, r8
    8962:	ac e0       	ldi	r26, 0x0C	; 12
    8964:	ba 2e       	mov	r11, r26
    8966:	28 c0       	rjmp	.+80     	; 0x89b8 <strtol+0x126>
    8968:	78 e0       	ldi	r23, 0x08	; 8
    896a:	e7 2e       	mov	r14, r23
    896c:	f1 2c       	mov	r15, r1
    896e:	81 2c       	mov	r8, r1
    8970:	91 2c       	mov	r9, r1
    8972:	a1 2c       	mov	r10, r1
    8974:	e0 e1       	ldi	r30, 0x10	; 16
    8976:	be 2e       	mov	r11, r30
    8978:	1f c0       	rjmp	.+62     	; 0x89b8 <strtol+0x126>
    897a:	60 e0       	ldi	r22, 0x00	; 0
    897c:	70 e0       	ldi	r23, 0x00	; 0
    897e:	80 e0       	ldi	r24, 0x00	; 0
    8980:	90 e8       	ldi	r25, 0x80	; 128
    8982:	97 01       	movw	r18, r14
    8984:	0f 2c       	mov	r0, r15
    8986:	00 0c       	add	r0, r0
    8988:	44 0b       	sbc	r20, r20
    898a:	55 0b       	sbc	r21, r21
    898c:	1d dd       	rcall	.-1478   	; 0x83c8 <__udivmodsi4>
    898e:	49 01       	movw	r8, r18
    8990:	5a 01       	movw	r10, r20
    8992:	12 c0       	rjmp	.+36     	; 0x89b8 <strtol+0x126>
    8994:	10 33       	cpi	r17, 0x30	; 48
    8996:	59 f4       	brne	.+22     	; 0x89ae <strtol+0x11c>
    8998:	88 81       	ld	r24, Y
    899a:	8f 7d       	andi	r24, 0xDF	; 223
    899c:	88 35       	cpi	r24, 0x58	; 88
    899e:	09 f0       	breq	.+2      	; 0x89a2 <strtol+0x110>
    89a0:	bb cf       	rjmp	.-138    	; 0x8918 <strtol+0x86>
    89a2:	19 81       	ldd	r17, Y+1	; 0x01
    89a4:	22 96       	adiw	r28, 0x02	; 2
    89a6:	02 60       	ori	r16, 0x02	; 2
    89a8:	80 e1       	ldi	r24, 0x10	; 16
    89aa:	e8 2e       	mov	r14, r24
    89ac:	f1 2c       	mov	r15, r1
    89ae:	81 2c       	mov	r8, r1
    89b0:	91 2c       	mov	r9, r1
    89b2:	a1 2c       	mov	r10, r1
    89b4:	68 e0       	ldi	r22, 0x08	; 8
    89b6:	b6 2e       	mov	r11, r22
    89b8:	40 e0       	ldi	r20, 0x00	; 0
    89ba:	60 e0       	ldi	r22, 0x00	; 0
    89bc:	70 e0       	ldi	r23, 0x00	; 0
    89be:	cb 01       	movw	r24, r22
    89c0:	27 01       	movw	r4, r14
    89c2:	0f 2c       	mov	r0, r15
    89c4:	00 0c       	add	r0, r0
    89c6:	66 08       	sbc	r6, r6
    89c8:	77 08       	sbc	r7, r7
    89ca:	fe 01       	movw	r30, r28
    89cc:	50 ed       	ldi	r21, 0xD0	; 208
    89ce:	35 2e       	mov	r3, r21
    89d0:	31 0e       	add	r3, r17
    89d2:	29 e0       	ldi	r18, 0x09	; 9
    89d4:	23 15       	cp	r18, r3
    89d6:	70 f4       	brcc	.+28     	; 0x89f4 <strtol+0x162>
    89d8:	2f eb       	ldi	r18, 0xBF	; 191
    89da:	21 0f       	add	r18, r17
    89dc:	2a 31       	cpi	r18, 0x1A	; 26
    89de:	18 f4       	brcc	.+6      	; 0x89e6 <strtol+0x154>
    89e0:	39 ec       	ldi	r19, 0xC9	; 201
    89e2:	33 2e       	mov	r3, r19
    89e4:	06 c0       	rjmp	.+12     	; 0x89f2 <strtol+0x160>
    89e6:	2f e9       	ldi	r18, 0x9F	; 159
    89e8:	21 0f       	add	r18, r17
    89ea:	2a 31       	cpi	r18, 0x1A	; 26
    89ec:	10 f5       	brcc	.+68     	; 0x8a32 <strtol+0x1a0>
    89ee:	29 ea       	ldi	r18, 0xA9	; 169
    89f0:	32 2e       	mov	r3, r18
    89f2:	31 0e       	add	r3, r17
    89f4:	23 2d       	mov	r18, r3
    89f6:	30 e0       	ldi	r19, 0x00	; 0
    89f8:	2e 15       	cp	r18, r14
    89fa:	3f 05       	cpc	r19, r15
    89fc:	d4 f4       	brge	.+52     	; 0x8a32 <strtol+0x1a0>
    89fe:	47 fd       	sbrc	r20, 7
    8a00:	15 c0       	rjmp	.+42     	; 0x8a2c <strtol+0x19a>
    8a02:	86 16       	cp	r8, r22
    8a04:	97 06       	cpc	r9, r23
    8a06:	a8 06       	cpc	r10, r24
    8a08:	b9 06       	cpc	r11, r25
    8a0a:	68 f0       	brcs	.+26     	; 0x8a26 <strtol+0x194>
    8a0c:	a3 01       	movw	r20, r6
    8a0e:	92 01       	movw	r18, r4
    8a10:	b9 dc       	rcall	.-1678   	; 0x8384 <__mulsi3>
    8a12:	63 0d       	add	r22, r3
    8a14:	71 1d       	adc	r23, r1
    8a16:	81 1d       	adc	r24, r1
    8a18:	91 1d       	adc	r25, r1
    8a1a:	61 30       	cpi	r22, 0x01	; 1
    8a1c:	71 05       	cpc	r23, r1
    8a1e:	81 05       	cpc	r24, r1
    8a20:	20 e8       	ldi	r18, 0x80	; 128
    8a22:	92 07       	cpc	r25, r18
    8a24:	10 f0       	brcs	.+4      	; 0x8a2a <strtol+0x198>
    8a26:	4f ef       	ldi	r20, 0xFF	; 255
    8a28:	01 c0       	rjmp	.+2      	; 0x8a2c <strtol+0x19a>
    8a2a:	41 e0       	ldi	r20, 0x01	; 1
    8a2c:	21 96       	adiw	r28, 0x01	; 1
    8a2e:	10 81       	ld	r17, Z
    8a30:	cc cf       	rjmp	.-104    	; 0x89ca <strtol+0x138>
    8a32:	20 2f       	mov	r18, r16
    8a34:	21 70       	andi	r18, 0x01	; 1
    8a36:	c1 14       	cp	r12, r1
    8a38:	d1 04       	cpc	r13, r1
    8a3a:	71 f0       	breq	.+28     	; 0x8a58 <strtol+0x1c6>
    8a3c:	44 23       	and	r20, r20
    8a3e:	29 f0       	breq	.+10     	; 0x8a4a <strtol+0x1b8>
    8a40:	21 97       	sbiw	r28, 0x01	; 1
    8a42:	f6 01       	movw	r30, r12
    8a44:	d1 83       	std	Z+1, r29	; 0x01
    8a46:	c0 83       	st	Z, r28
    8a48:	07 c0       	rjmp	.+14     	; 0x8a58 <strtol+0x1c6>
    8a4a:	01 ff       	sbrs	r16, 1
    8a4c:	19 c0       	rjmp	.+50     	; 0x8a80 <strtol+0x1ee>
    8a4e:	22 97       	sbiw	r28, 0x02	; 2
    8a50:	f6 01       	movw	r30, r12
    8a52:	d1 83       	std	Z+1, r29	; 0x01
    8a54:	c0 83       	st	Z, r28
    8a56:	14 c0       	rjmp	.+40     	; 0x8a80 <strtol+0x1ee>
    8a58:	47 ff       	sbrs	r20, 7
    8a5a:	12 c0       	rjmp	.+36     	; 0x8a80 <strtol+0x1ee>
    8a5c:	22 23       	and	r18, r18
    8a5e:	29 f0       	breq	.+10     	; 0x8a6a <strtol+0x1d8>
    8a60:	60 e0       	ldi	r22, 0x00	; 0
    8a62:	70 e0       	ldi	r23, 0x00	; 0
    8a64:	80 e0       	ldi	r24, 0x00	; 0
    8a66:	90 e8       	ldi	r25, 0x80	; 128
    8a68:	04 c0       	rjmp	.+8      	; 0x8a72 <strtol+0x1e0>
    8a6a:	6f ef       	ldi	r22, 0xFF	; 255
    8a6c:	7f ef       	ldi	r23, 0xFF	; 255
    8a6e:	8f ef       	ldi	r24, 0xFF	; 255
    8a70:	9f e7       	ldi	r25, 0x7F	; 127
    8a72:	22 e2       	ldi	r18, 0x22	; 34
    8a74:	30 e0       	ldi	r19, 0x00	; 0
    8a76:	30 93 db 1e 	sts	0x1EDB, r19	; 0x801edb <errno+0x1>
    8a7a:	20 93 da 1e 	sts	0x1EDA, r18	; 0x801eda <errno>
    8a7e:	09 c0       	rjmp	.+18     	; 0x8a92 <strtol+0x200>
    8a80:	22 23       	and	r18, r18
    8a82:	81 f0       	breq	.+32     	; 0x8aa4 <strtol+0x212>
    8a84:	90 95       	com	r25
    8a86:	80 95       	com	r24
    8a88:	70 95       	com	r23
    8a8a:	61 95       	neg	r22
    8a8c:	7f 4f       	sbci	r23, 0xFF	; 255
    8a8e:	8f 4f       	sbci	r24, 0xFF	; 255
    8a90:	9f 4f       	sbci	r25, 0xFF	; 255
    8a92:	46 2f       	mov	r20, r22
    8a94:	37 2f       	mov	r19, r23
    8a96:	28 2f       	mov	r18, r24
    8a98:	12 c0       	rjmp	.+36     	; 0x8abe <strtol+0x22c>
    8a9a:	40 e0       	ldi	r20, 0x00	; 0
    8a9c:	30 e0       	ldi	r19, 0x00	; 0
    8a9e:	20 e0       	ldi	r18, 0x00	; 0
    8aa0:	90 e0       	ldi	r25, 0x00	; 0
    8aa2:	0d c0       	rjmp	.+26     	; 0x8abe <strtol+0x22c>
    8aa4:	97 ff       	sbrs	r25, 7
    8aa6:	f5 cf       	rjmp	.-22     	; 0x8a92 <strtol+0x200>
    8aa8:	82 e2       	ldi	r24, 0x22	; 34
    8aaa:	90 e0       	ldi	r25, 0x00	; 0
    8aac:	90 93 db 1e 	sts	0x1EDB, r25	; 0x801edb <errno+0x1>
    8ab0:	80 93 da 1e 	sts	0x1EDA, r24	; 0x801eda <errno>
    8ab4:	6f ef       	ldi	r22, 0xFF	; 255
    8ab6:	7f ef       	ldi	r23, 0xFF	; 255
    8ab8:	8f ef       	ldi	r24, 0xFF	; 255
    8aba:	9f e7       	ldi	r25, 0x7F	; 127
    8abc:	ea cf       	rjmp	.-44     	; 0x8a92 <strtol+0x200>
    8abe:	64 2f       	mov	r22, r20
    8ac0:	73 2f       	mov	r23, r19
    8ac2:	82 2f       	mov	r24, r18
    8ac4:	df 91       	pop	r29
    8ac6:	cf 91       	pop	r28
    8ac8:	1f 91       	pop	r17
    8aca:	0f 91       	pop	r16
    8acc:	ff 90       	pop	r15
    8ace:	ef 90       	pop	r14
    8ad0:	df 90       	pop	r13
    8ad2:	cf 90       	pop	r12
    8ad4:	bf 90       	pop	r11
    8ad6:	af 90       	pop	r10
    8ad8:	9f 90       	pop	r9
    8ada:	8f 90       	pop	r8
    8adc:	7f 90       	pop	r7
    8ade:	6f 90       	pop	r6
    8ae0:	5f 90       	pop	r5
    8ae2:	4f 90       	pop	r4
    8ae4:	3f 90       	pop	r3
    8ae6:	08 95       	ret

00008ae8 <atoi>:
    8ae8:	fc 01       	movw	r30, r24
    8aea:	88 27       	eor	r24, r24
    8aec:	99 27       	eor	r25, r25
    8aee:	e8 94       	clt
    8af0:	21 91       	ld	r18, Z+
    8af2:	20 32       	cpi	r18, 0x20	; 32
    8af4:	e9 f3       	breq	.-6      	; 0x8af0 <atoi+0x8>
    8af6:	29 30       	cpi	r18, 0x09	; 9
    8af8:	10 f0       	brcs	.+4      	; 0x8afe <atoi+0x16>
    8afa:	2e 30       	cpi	r18, 0x0E	; 14
    8afc:	c8 f3       	brcs	.-14     	; 0x8af0 <atoi+0x8>
    8afe:	2b 32       	cpi	r18, 0x2B	; 43
    8b00:	39 f0       	breq	.+14     	; 0x8b10 <atoi+0x28>
    8b02:	2d 32       	cpi	r18, 0x2D	; 45
    8b04:	31 f4       	brne	.+12     	; 0x8b12 <atoi+0x2a>
    8b06:	68 94       	set
    8b08:	03 c0       	rjmp	.+6      	; 0x8b10 <atoi+0x28>
    8b0a:	49 d0       	rcall	.+146    	; 0x8b9e <__mulhi_const_10>
    8b0c:	82 0f       	add	r24, r18
    8b0e:	91 1d       	adc	r25, r1
    8b10:	21 91       	ld	r18, Z+
    8b12:	20 53       	subi	r18, 0x30	; 48
    8b14:	2a 30       	cpi	r18, 0x0A	; 10
    8b16:	c8 f3       	brcs	.-14     	; 0x8b0a <atoi+0x22>
    8b18:	1e f4       	brtc	.+6      	; 0x8b20 <atoi+0x38>
    8b1a:	90 95       	com	r25
    8b1c:	81 95       	neg	r24
    8b1e:	9f 4f       	sbci	r25, 0xFF	; 255
    8b20:	08 95       	ret

00008b22 <__ctype_isfalse>:
    8b22:	99 27       	eor	r25, r25
    8b24:	88 27       	eor	r24, r24

00008b26 <__ctype_istrue>:
    8b26:	08 95       	ret

00008b28 <isspace>:
    8b28:	91 11       	cpse	r25, r1
    8b2a:	fb cf       	rjmp	.-10     	; 0x8b22 <__ctype_isfalse>
    8b2c:	80 32       	cpi	r24, 0x20	; 32
    8b2e:	19 f0       	breq	.+6      	; 0x8b36 <isspace+0xe>
    8b30:	89 50       	subi	r24, 0x09	; 9
    8b32:	85 50       	subi	r24, 0x05	; 5
    8b34:	d0 f7       	brcc	.-12     	; 0x8b2a <isspace+0x2>
    8b36:	08 95       	ret

00008b38 <isblank>:
    8b38:	91 11       	cpse	r25, r1
    8b3a:	f3 cf       	rjmp	.-26     	; 0x8b22 <__ctype_isfalse>
    8b3c:	80 32       	cpi	r24, 0x20	; 32
    8b3e:	11 f0       	breq	.+4      	; 0x8b44 <isblank+0xc>
    8b40:	89 30       	cpi	r24, 0x09	; 9
    8b42:	d9 f7       	brne	.-10     	; 0x8b3a <isblank+0x2>
    8b44:	08 95       	ret

00008b46 <memcmp>:
    8b46:	fb 01       	movw	r30, r22
    8b48:	dc 01       	movw	r26, r24
    8b4a:	04 c0       	rjmp	.+8      	; 0x8b54 <memcmp+0xe>
    8b4c:	8d 91       	ld	r24, X+
    8b4e:	01 90       	ld	r0, Z+
    8b50:	80 19       	sub	r24, r0
    8b52:	21 f4       	brne	.+8      	; 0x8b5c <memcmp+0x16>
    8b54:	41 50       	subi	r20, 0x01	; 1
    8b56:	50 40       	sbci	r21, 0x00	; 0
    8b58:	c8 f7       	brcc	.-14     	; 0x8b4c <memcmp+0x6>
    8b5a:	88 1b       	sub	r24, r24
    8b5c:	99 0b       	sbc	r25, r25
    8b5e:	08 95       	ret

00008b60 <strcpy>:
    8b60:	fb 01       	movw	r30, r22
    8b62:	dc 01       	movw	r26, r24
    8b64:	01 90       	ld	r0, Z+
    8b66:	0d 92       	st	X+, r0
    8b68:	00 20       	and	r0, r0
    8b6a:	e1 f7       	brne	.-8      	; 0x8b64 <strcpy+0x4>
    8b6c:	08 95       	ret

00008b6e <strncmp>:
    8b6e:	fb 01       	movw	r30, r22
    8b70:	dc 01       	movw	r26, r24
    8b72:	41 50       	subi	r20, 0x01	; 1
    8b74:	50 40       	sbci	r21, 0x00	; 0
    8b76:	30 f0       	brcs	.+12     	; 0x8b84 <strncmp+0x16>
    8b78:	8d 91       	ld	r24, X+
    8b7a:	01 90       	ld	r0, Z+
    8b7c:	80 19       	sub	r24, r0
    8b7e:	19 f4       	brne	.+6      	; 0x8b86 <strncmp+0x18>
    8b80:	00 20       	and	r0, r0
    8b82:	b9 f7       	brne	.-18     	; 0x8b72 <strncmp+0x4>
    8b84:	88 1b       	sub	r24, r24
    8b86:	99 0b       	sbc	r25, r25
    8b88:	08 95       	ret

00008b8a <__itoa_ncheck>:
    8b8a:	bb 27       	eor	r27, r27
    8b8c:	4a 30       	cpi	r20, 0x0A	; 10
    8b8e:	31 f4       	brne	.+12     	; 0x8b9c <__itoa_ncheck+0x12>
    8b90:	99 23       	and	r25, r25
    8b92:	22 f4       	brpl	.+8      	; 0x8b9c <__itoa_ncheck+0x12>
    8b94:	bd e2       	ldi	r27, 0x2D	; 45
    8b96:	90 95       	com	r25
    8b98:	81 95       	neg	r24
    8b9a:	9f 4f       	sbci	r25, 0xFF	; 255
    8b9c:	09 c0       	rjmp	.+18     	; 0x8bb0 <__utoa_common>

00008b9e <__mulhi_const_10>:
    8b9e:	7a e0       	ldi	r23, 0x0A	; 10
    8ba0:	97 9f       	mul	r25, r23
    8ba2:	90 2d       	mov	r25, r0
    8ba4:	87 9f       	mul	r24, r23
    8ba6:	80 2d       	mov	r24, r0
    8ba8:	91 0d       	add	r25, r1
    8baa:	11 24       	eor	r1, r1
    8bac:	08 95       	ret

00008bae <__utoa_ncheck>:
    8bae:	bb 27       	eor	r27, r27

00008bb0 <__utoa_common>:
    8bb0:	fb 01       	movw	r30, r22
    8bb2:	55 27       	eor	r21, r21
    8bb4:	aa 27       	eor	r26, r26
    8bb6:	88 0f       	add	r24, r24
    8bb8:	99 1f       	adc	r25, r25
    8bba:	aa 1f       	adc	r26, r26
    8bbc:	a4 17       	cp	r26, r20
    8bbe:	10 f0       	brcs	.+4      	; 0x8bc4 <__utoa_common+0x14>
    8bc0:	a4 1b       	sub	r26, r20
    8bc2:	83 95       	inc	r24
    8bc4:	50 51       	subi	r21, 0x10	; 16
    8bc6:	b9 f7       	brne	.-18     	; 0x8bb6 <__utoa_common+0x6>
    8bc8:	a0 5d       	subi	r26, 0xD0	; 208
    8bca:	aa 33       	cpi	r26, 0x3A	; 58
    8bcc:	08 f0       	brcs	.+2      	; 0x8bd0 <__utoa_common+0x20>
    8bce:	a9 5d       	subi	r26, 0xD9	; 217
    8bd0:	a1 93       	st	Z+, r26
    8bd2:	00 97       	sbiw	r24, 0x00	; 0
    8bd4:	79 f7       	brne	.-34     	; 0x8bb4 <__utoa_common+0x4>
    8bd6:	b1 11       	cpse	r27, r1
    8bd8:	b1 93       	st	Z+, r27
    8bda:	11 92       	st	Z+, r1
    8bdc:	cb 01       	movw	r24, r22
    8bde:	0c 94 8a 4e 	jmp	0x9d14	; 0x9d14 <strrev>

00008be2 <fgetc>:
    8be2:	cf 93       	push	r28
    8be4:	df 93       	push	r29
    8be6:	ec 01       	movw	r28, r24
    8be8:	2b 81       	ldd	r18, Y+3	; 0x03
    8bea:	20 ff       	sbrs	r18, 0
    8bec:	33 c0       	rjmp	.+102    	; 0x8c54 <fgetc+0x72>
    8bee:	26 ff       	sbrs	r18, 6
    8bf0:	0a c0       	rjmp	.+20     	; 0x8c06 <fgetc+0x24>
    8bf2:	2f 7b       	andi	r18, 0xBF	; 191
    8bf4:	2b 83       	std	Y+3, r18	; 0x03
    8bf6:	8e 81       	ldd	r24, Y+6	; 0x06
    8bf8:	9f 81       	ldd	r25, Y+7	; 0x07
    8bfa:	01 96       	adiw	r24, 0x01	; 1
    8bfc:	9f 83       	std	Y+7, r25	; 0x07
    8bfe:	8e 83       	std	Y+6, r24	; 0x06
    8c00:	8a 81       	ldd	r24, Y+2	; 0x02
    8c02:	90 e0       	ldi	r25, 0x00	; 0
    8c04:	29 c0       	rjmp	.+82     	; 0x8c58 <fgetc+0x76>
    8c06:	22 ff       	sbrs	r18, 2
    8c08:	0f c0       	rjmp	.+30     	; 0x8c28 <fgetc+0x46>
    8c0a:	e8 81       	ld	r30, Y
    8c0c:	f9 81       	ldd	r31, Y+1	; 0x01
    8c0e:	80 81       	ld	r24, Z
    8c10:	08 2e       	mov	r0, r24
    8c12:	00 0c       	add	r0, r0
    8c14:	99 0b       	sbc	r25, r25
    8c16:	00 97       	sbiw	r24, 0x00	; 0
    8c18:	19 f4       	brne	.+6      	; 0x8c20 <fgetc+0x3e>
    8c1a:	20 62       	ori	r18, 0x20	; 32
    8c1c:	2b 83       	std	Y+3, r18	; 0x03
    8c1e:	1a c0       	rjmp	.+52     	; 0x8c54 <fgetc+0x72>
    8c20:	31 96       	adiw	r30, 0x01	; 1
    8c22:	f9 83       	std	Y+1, r31	; 0x01
    8c24:	e8 83       	st	Y, r30
    8c26:	0e c0       	rjmp	.+28     	; 0x8c44 <fgetc+0x62>
    8c28:	ea 85       	ldd	r30, Y+10	; 0x0a
    8c2a:	fb 85       	ldd	r31, Y+11	; 0x0b
    8c2c:	09 95       	icall
    8c2e:	97 ff       	sbrs	r25, 7
    8c30:	09 c0       	rjmp	.+18     	; 0x8c44 <fgetc+0x62>
    8c32:	2b 81       	ldd	r18, Y+3	; 0x03
    8c34:	01 96       	adiw	r24, 0x01	; 1
    8c36:	11 f0       	breq	.+4      	; 0x8c3c <fgetc+0x5a>
    8c38:	80 e2       	ldi	r24, 0x20	; 32
    8c3a:	01 c0       	rjmp	.+2      	; 0x8c3e <fgetc+0x5c>
    8c3c:	80 e1       	ldi	r24, 0x10	; 16
    8c3e:	82 2b       	or	r24, r18
    8c40:	8b 83       	std	Y+3, r24	; 0x03
    8c42:	08 c0       	rjmp	.+16     	; 0x8c54 <fgetc+0x72>
    8c44:	2e 81       	ldd	r18, Y+6	; 0x06
    8c46:	3f 81       	ldd	r19, Y+7	; 0x07
    8c48:	2f 5f       	subi	r18, 0xFF	; 255
    8c4a:	3f 4f       	sbci	r19, 0xFF	; 255
    8c4c:	3f 83       	std	Y+7, r19	; 0x07
    8c4e:	2e 83       	std	Y+6, r18	; 0x06
    8c50:	99 27       	eor	r25, r25
    8c52:	02 c0       	rjmp	.+4      	; 0x8c58 <fgetc+0x76>
    8c54:	8f ef       	ldi	r24, 0xFF	; 255
    8c56:	9f ef       	ldi	r25, 0xFF	; 255
    8c58:	df 91       	pop	r29
    8c5a:	cf 91       	pop	r28
    8c5c:	08 95       	ret

00008c5e <printf>:
    8c5e:	cf 93       	push	r28
    8c60:	df 93       	push	r29
    8c62:	cd b7       	in	r28, 0x3d	; 61
    8c64:	de b7       	in	r29, 0x3e	; 62
    8c66:	ae 01       	movw	r20, r28
    8c68:	4b 5f       	subi	r20, 0xFB	; 251
    8c6a:	5f 4f       	sbci	r21, 0xFF	; 255
    8c6c:	fa 01       	movw	r30, r20
    8c6e:	61 91       	ld	r22, Z+
    8c70:	71 91       	ld	r23, Z+
    8c72:	af 01       	movw	r20, r30
    8c74:	80 91 d6 1e 	lds	r24, 0x1ED6	; 0x801ed6 <__iob+0x2>
    8c78:	90 91 d7 1e 	lds	r25, 0x1ED7	; 0x801ed7 <__iob+0x3>
    8c7c:	16 d1       	rcall	.+556    	; 0x8eaa <vfprintf>
    8c7e:	df 91       	pop	r29
    8c80:	cf 91       	pop	r28
    8c82:	08 95       	ret

00008c84 <printf_P>:
    8c84:	0f 93       	push	r16
    8c86:	1f 93       	push	r17
    8c88:	cf 93       	push	r28
    8c8a:	df 93       	push	r29
    8c8c:	cd b7       	in	r28, 0x3d	; 61
    8c8e:	de b7       	in	r29, 0x3e	; 62
    8c90:	ae 01       	movw	r20, r28
    8c92:	49 5f       	subi	r20, 0xF9	; 249
    8c94:	5f 4f       	sbci	r21, 0xFF	; 255
    8c96:	da 01       	movw	r26, r20
    8c98:	6d 91       	ld	r22, X+
    8c9a:	7d 91       	ld	r23, X+
    8c9c:	ad 01       	movw	r20, r26
    8c9e:	04 ed       	ldi	r16, 0xD4	; 212
    8ca0:	1e e1       	ldi	r17, 0x1E	; 30
    8ca2:	f8 01       	movw	r30, r16
    8ca4:	82 81       	ldd	r24, Z+2	; 0x02
    8ca6:	93 81       	ldd	r25, Z+3	; 0x03
    8ca8:	dc 01       	movw	r26, r24
    8caa:	13 96       	adiw	r26, 0x03	; 3
    8cac:	2c 91       	ld	r18, X
    8cae:	13 97       	sbiw	r26, 0x03	; 3
    8cb0:	28 60       	ori	r18, 0x08	; 8
    8cb2:	13 96       	adiw	r26, 0x03	; 3
    8cb4:	2c 93       	st	X, r18
    8cb6:	f9 d0       	rcall	.+498    	; 0x8eaa <vfprintf>
    8cb8:	d8 01       	movw	r26, r16
    8cba:	12 96       	adiw	r26, 0x02	; 2
    8cbc:	ed 91       	ld	r30, X+
    8cbe:	fc 91       	ld	r31, X
    8cc0:	13 97       	sbiw	r26, 0x03	; 3
    8cc2:	23 81       	ldd	r18, Z+3	; 0x03
    8cc4:	27 7f       	andi	r18, 0xF7	; 247
    8cc6:	23 83       	std	Z+3, r18	; 0x03
    8cc8:	df 91       	pop	r29
    8cca:	cf 91       	pop	r28
    8ccc:	1f 91       	pop	r17
    8cce:	0f 91       	pop	r16
    8cd0:	08 95       	ret

00008cd2 <puts>:
    8cd2:	0f 93       	push	r16
    8cd4:	1f 93       	push	r17
    8cd6:	cf 93       	push	r28
    8cd8:	df 93       	push	r29
    8cda:	e0 91 d6 1e 	lds	r30, 0x1ED6	; 0x801ed6 <__iob+0x2>
    8cde:	f0 91 d7 1e 	lds	r31, 0x1ED7	; 0x801ed7 <__iob+0x3>
    8ce2:	23 81       	ldd	r18, Z+3	; 0x03
    8ce4:	21 ff       	sbrs	r18, 1
    8ce6:	1b c0       	rjmp	.+54     	; 0x8d1e <puts+0x4c>
    8ce8:	8c 01       	movw	r16, r24
    8cea:	d0 e0       	ldi	r29, 0x00	; 0
    8cec:	c0 e0       	ldi	r28, 0x00	; 0
    8cee:	f8 01       	movw	r30, r16
    8cf0:	81 91       	ld	r24, Z+
    8cf2:	8f 01       	movw	r16, r30
    8cf4:	60 91 d6 1e 	lds	r22, 0x1ED6	; 0x801ed6 <__iob+0x2>
    8cf8:	70 91 d7 1e 	lds	r23, 0x1ED7	; 0x801ed7 <__iob+0x3>
    8cfc:	db 01       	movw	r26, r22
    8cfe:	18 96       	adiw	r26, 0x08	; 8
    8d00:	ed 91       	ld	r30, X+
    8d02:	fc 91       	ld	r31, X
    8d04:	19 97       	sbiw	r26, 0x09	; 9
    8d06:	88 23       	and	r24, r24
    8d08:	31 f0       	breq	.+12     	; 0x8d16 <puts+0x44>
    8d0a:	09 95       	icall
    8d0c:	89 2b       	or	r24, r25
    8d0e:	79 f3       	breq	.-34     	; 0x8cee <puts+0x1c>
    8d10:	df ef       	ldi	r29, 0xFF	; 255
    8d12:	cf ef       	ldi	r28, 0xFF	; 255
    8d14:	ec cf       	rjmp	.-40     	; 0x8cee <puts+0x1c>
    8d16:	8a e0       	ldi	r24, 0x0A	; 10
    8d18:	09 95       	icall
    8d1a:	89 2b       	or	r24, r25
    8d1c:	19 f0       	breq	.+6      	; 0x8d24 <puts+0x52>
    8d1e:	8f ef       	ldi	r24, 0xFF	; 255
    8d20:	9f ef       	ldi	r25, 0xFF	; 255
    8d22:	02 c0       	rjmp	.+4      	; 0x8d28 <puts+0x56>
    8d24:	8d 2f       	mov	r24, r29
    8d26:	9c 2f       	mov	r25, r28
    8d28:	df 91       	pop	r29
    8d2a:	cf 91       	pop	r28
    8d2c:	1f 91       	pop	r17
    8d2e:	0f 91       	pop	r16
    8d30:	08 95       	ret

00008d32 <puts_P>:
    8d32:	0f 93       	push	r16
    8d34:	1f 93       	push	r17
    8d36:	cf 93       	push	r28
    8d38:	df 93       	push	r29
    8d3a:	8c 01       	movw	r16, r24
    8d3c:	e0 91 d6 1e 	lds	r30, 0x1ED6	; 0x801ed6 <__iob+0x2>
    8d40:	f0 91 d7 1e 	lds	r31, 0x1ED7	; 0x801ed7 <__iob+0x3>
    8d44:	83 81       	ldd	r24, Z+3	; 0x03
    8d46:	81 ff       	sbrs	r24, 1
    8d48:	1b c0       	rjmp	.+54     	; 0x8d80 <puts_P+0x4e>
    8d4a:	d0 e0       	ldi	r29, 0x00	; 0
    8d4c:	c0 e0       	ldi	r28, 0x00	; 0
    8d4e:	f8 01       	movw	r30, r16
    8d50:	84 91       	lpm	r24, Z
    8d52:	60 91 d6 1e 	lds	r22, 0x1ED6	; 0x801ed6 <__iob+0x2>
    8d56:	70 91 d7 1e 	lds	r23, 0x1ED7	; 0x801ed7 <__iob+0x3>
    8d5a:	db 01       	movw	r26, r22
    8d5c:	18 96       	adiw	r26, 0x08	; 8
    8d5e:	ed 91       	ld	r30, X+
    8d60:	fc 91       	ld	r31, X
    8d62:	19 97       	sbiw	r26, 0x09	; 9
    8d64:	88 23       	and	r24, r24
    8d66:	41 f0       	breq	.+16     	; 0x8d78 <puts_P+0x46>
    8d68:	09 95       	icall
    8d6a:	89 2b       	or	r24, r25
    8d6c:	11 f0       	breq	.+4      	; 0x8d72 <puts_P+0x40>
    8d6e:	df ef       	ldi	r29, 0xFF	; 255
    8d70:	cf ef       	ldi	r28, 0xFF	; 255
    8d72:	0f 5f       	subi	r16, 0xFF	; 255
    8d74:	1f 4f       	sbci	r17, 0xFF	; 255
    8d76:	eb cf       	rjmp	.-42     	; 0x8d4e <puts_P+0x1c>
    8d78:	8a e0       	ldi	r24, 0x0A	; 10
    8d7a:	09 95       	icall
    8d7c:	89 2b       	or	r24, r25
    8d7e:	19 f0       	breq	.+6      	; 0x8d86 <puts_P+0x54>
    8d80:	8f ef       	ldi	r24, 0xFF	; 255
    8d82:	9f ef       	ldi	r25, 0xFF	; 255
    8d84:	02 c0       	rjmp	.+4      	; 0x8d8a <puts_P+0x58>
    8d86:	8d 2f       	mov	r24, r29
    8d88:	9c 2f       	mov	r25, r28
    8d8a:	df 91       	pop	r29
    8d8c:	cf 91       	pop	r28
    8d8e:	1f 91       	pop	r17
    8d90:	0f 91       	pop	r16
    8d92:	08 95       	ret

00008d94 <snprintf>:
    8d94:	0f 93       	push	r16
    8d96:	1f 93       	push	r17
    8d98:	cf 93       	push	r28
    8d9a:	df 93       	push	r29
    8d9c:	cd b7       	in	r28, 0x3d	; 61
    8d9e:	de b7       	in	r29, 0x3e	; 62
    8da0:	2e 97       	sbiw	r28, 0x0e	; 14
    8da2:	0f b6       	in	r0, 0x3f	; 63
    8da4:	f8 94       	cli
    8da6:	de bf       	out	0x3e, r29	; 62
    8da8:	0f be       	out	0x3f, r0	; 63
    8daa:	cd bf       	out	0x3d, r28	; 61
    8dac:	0d 89       	ldd	r16, Y+21	; 0x15
    8dae:	1e 89       	ldd	r17, Y+22	; 0x16
    8db0:	8f 89       	ldd	r24, Y+23	; 0x17
    8db2:	98 8d       	ldd	r25, Y+24	; 0x18
    8db4:	26 e0       	ldi	r18, 0x06	; 6
    8db6:	2c 83       	std	Y+4, r18	; 0x04
    8db8:	1a 83       	std	Y+2, r17	; 0x02
    8dba:	09 83       	std	Y+1, r16	; 0x01
    8dbc:	97 ff       	sbrs	r25, 7
    8dbe:	02 c0       	rjmp	.+4      	; 0x8dc4 <snprintf+0x30>
    8dc0:	80 e0       	ldi	r24, 0x00	; 0
    8dc2:	90 e8       	ldi	r25, 0x80	; 128
    8dc4:	01 97       	sbiw	r24, 0x01	; 1
    8dc6:	9e 83       	std	Y+6, r25	; 0x06
    8dc8:	8d 83       	std	Y+5, r24	; 0x05
    8dca:	ae 01       	movw	r20, r28
    8dcc:	45 5e       	subi	r20, 0xE5	; 229
    8dce:	5f 4f       	sbci	r21, 0xFF	; 255
    8dd0:	69 8d       	ldd	r22, Y+25	; 0x19
    8dd2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    8dd4:	ce 01       	movw	r24, r28
    8dd6:	01 96       	adiw	r24, 0x01	; 1
    8dd8:	68 d0       	rcall	.+208    	; 0x8eaa <vfprintf>
    8dda:	4d 81       	ldd	r20, Y+5	; 0x05
    8ddc:	5e 81       	ldd	r21, Y+6	; 0x06
    8dde:	57 fd       	sbrc	r21, 7
    8de0:	0a c0       	rjmp	.+20     	; 0x8df6 <snprintf+0x62>
    8de2:	2f 81       	ldd	r18, Y+7	; 0x07
    8de4:	38 85       	ldd	r19, Y+8	; 0x08
    8de6:	42 17       	cp	r20, r18
    8de8:	53 07       	cpc	r21, r19
    8dea:	0c f4       	brge	.+2      	; 0x8dee <snprintf+0x5a>
    8dec:	9a 01       	movw	r18, r20
    8dee:	f8 01       	movw	r30, r16
    8df0:	e2 0f       	add	r30, r18
    8df2:	f3 1f       	adc	r31, r19
    8df4:	10 82       	st	Z, r1
    8df6:	2e 96       	adiw	r28, 0x0e	; 14
    8df8:	0f b6       	in	r0, 0x3f	; 63
    8dfa:	f8 94       	cli
    8dfc:	de bf       	out	0x3e, r29	; 62
    8dfe:	0f be       	out	0x3f, r0	; 63
    8e00:	cd bf       	out	0x3d, r28	; 61
    8e02:	df 91       	pop	r29
    8e04:	cf 91       	pop	r28
    8e06:	1f 91       	pop	r17
    8e08:	0f 91       	pop	r16
    8e0a:	08 95       	ret

00008e0c <sprintf>:
    8e0c:	0f 93       	push	r16
    8e0e:	1f 93       	push	r17
    8e10:	cf 93       	push	r28
    8e12:	df 93       	push	r29
    8e14:	cd b7       	in	r28, 0x3d	; 61
    8e16:	de b7       	in	r29, 0x3e	; 62
    8e18:	2e 97       	sbiw	r28, 0x0e	; 14
    8e1a:	0f b6       	in	r0, 0x3f	; 63
    8e1c:	f8 94       	cli
    8e1e:	de bf       	out	0x3e, r29	; 62
    8e20:	0f be       	out	0x3f, r0	; 63
    8e22:	cd bf       	out	0x3d, r28	; 61
    8e24:	0d 89       	ldd	r16, Y+21	; 0x15
    8e26:	1e 89       	ldd	r17, Y+22	; 0x16
    8e28:	86 e0       	ldi	r24, 0x06	; 6
    8e2a:	8c 83       	std	Y+4, r24	; 0x04
    8e2c:	1a 83       	std	Y+2, r17	; 0x02
    8e2e:	09 83       	std	Y+1, r16	; 0x01
    8e30:	8f ef       	ldi	r24, 0xFF	; 255
    8e32:	9f e7       	ldi	r25, 0x7F	; 127
    8e34:	9e 83       	std	Y+6, r25	; 0x06
    8e36:	8d 83       	std	Y+5, r24	; 0x05
    8e38:	ae 01       	movw	r20, r28
    8e3a:	47 5e       	subi	r20, 0xE7	; 231
    8e3c:	5f 4f       	sbci	r21, 0xFF	; 255
    8e3e:	6f 89       	ldd	r22, Y+23	; 0x17
    8e40:	78 8d       	ldd	r23, Y+24	; 0x18
    8e42:	ce 01       	movw	r24, r28
    8e44:	01 96       	adiw	r24, 0x01	; 1
    8e46:	31 d0       	rcall	.+98     	; 0x8eaa <vfprintf>
    8e48:	ef 81       	ldd	r30, Y+7	; 0x07
    8e4a:	f8 85       	ldd	r31, Y+8	; 0x08
    8e4c:	e0 0f       	add	r30, r16
    8e4e:	f1 1f       	adc	r31, r17
    8e50:	10 82       	st	Z, r1
    8e52:	2e 96       	adiw	r28, 0x0e	; 14
    8e54:	0f b6       	in	r0, 0x3f	; 63
    8e56:	f8 94       	cli
    8e58:	de bf       	out	0x3e, r29	; 62
    8e5a:	0f be       	out	0x3f, r0	; 63
    8e5c:	cd bf       	out	0x3d, r28	; 61
    8e5e:	df 91       	pop	r29
    8e60:	cf 91       	pop	r28
    8e62:	1f 91       	pop	r17
    8e64:	0f 91       	pop	r16
    8e66:	08 95       	ret

00008e68 <sscanf>:
    8e68:	cf 93       	push	r28
    8e6a:	df 93       	push	r29
    8e6c:	cd b7       	in	r28, 0x3d	; 61
    8e6e:	de b7       	in	r29, 0x3e	; 62
    8e70:	2e 97       	sbiw	r28, 0x0e	; 14
    8e72:	0f b6       	in	r0, 0x3f	; 63
    8e74:	f8 94       	cli
    8e76:	de bf       	out	0x3e, r29	; 62
    8e78:	0f be       	out	0x3f, r0	; 63
    8e7a:	cd bf       	out	0x3d, r28	; 61
    8e7c:	85 e0       	ldi	r24, 0x05	; 5
    8e7e:	8c 83       	std	Y+4, r24	; 0x04
    8e80:	8b 89       	ldd	r24, Y+19	; 0x13
    8e82:	9c 89       	ldd	r25, Y+20	; 0x14
    8e84:	9a 83       	std	Y+2, r25	; 0x02
    8e86:	89 83       	std	Y+1, r24	; 0x01
    8e88:	ae 01       	movw	r20, r28
    8e8a:	49 5e       	subi	r20, 0xE9	; 233
    8e8c:	5f 4f       	sbci	r21, 0xFF	; 255
    8e8e:	6d 89       	ldd	r22, Y+21	; 0x15
    8e90:	7e 89       	ldd	r23, Y+22	; 0x16
    8e92:	ce 01       	movw	r24, r28
    8e94:	01 96       	adiw	r24, 0x01	; 1
    8e96:	b8 d3       	rcall	.+1904   	; 0x9608 <vfscanf>
    8e98:	2e 96       	adiw	r28, 0x0e	; 14
    8e9a:	0f b6       	in	r0, 0x3f	; 63
    8e9c:	f8 94       	cli
    8e9e:	de bf       	out	0x3e, r29	; 62
    8ea0:	0f be       	out	0x3f, r0	; 63
    8ea2:	cd bf       	out	0x3d, r28	; 61
    8ea4:	df 91       	pop	r29
    8ea6:	cf 91       	pop	r28
    8ea8:	08 95       	ret

00008eaa <vfprintf>:
    8eaa:	2f 92       	push	r2
    8eac:	3f 92       	push	r3
    8eae:	4f 92       	push	r4
    8eb0:	5f 92       	push	r5
    8eb2:	6f 92       	push	r6
    8eb4:	7f 92       	push	r7
    8eb6:	8f 92       	push	r8
    8eb8:	9f 92       	push	r9
    8eba:	af 92       	push	r10
    8ebc:	bf 92       	push	r11
    8ebe:	cf 92       	push	r12
    8ec0:	df 92       	push	r13
    8ec2:	ef 92       	push	r14
    8ec4:	ff 92       	push	r15
    8ec6:	0f 93       	push	r16
    8ec8:	1f 93       	push	r17
    8eca:	cf 93       	push	r28
    8ecc:	df 93       	push	r29
    8ece:	cd b7       	in	r28, 0x3d	; 61
    8ed0:	de b7       	in	r29, 0x3e	; 62
    8ed2:	2b 97       	sbiw	r28, 0x0b	; 11
    8ed4:	0f b6       	in	r0, 0x3f	; 63
    8ed6:	f8 94       	cli
    8ed8:	de bf       	out	0x3e, r29	; 62
    8eda:	0f be       	out	0x3f, r0	; 63
    8edc:	cd bf       	out	0x3d, r28	; 61
    8ede:	6c 01       	movw	r12, r24
    8ee0:	7b 01       	movw	r14, r22
    8ee2:	8a 01       	movw	r16, r20
    8ee4:	fc 01       	movw	r30, r24
    8ee6:	17 82       	std	Z+7, r1	; 0x07
    8ee8:	16 82       	std	Z+6, r1	; 0x06
    8eea:	83 81       	ldd	r24, Z+3	; 0x03
    8eec:	81 ff       	sbrs	r24, 1
    8eee:	bf c1       	rjmp	.+894    	; 0x926e <vfprintf+0x3c4>
    8ef0:	ce 01       	movw	r24, r28
    8ef2:	01 96       	adiw	r24, 0x01	; 1
    8ef4:	3c 01       	movw	r6, r24
    8ef6:	f6 01       	movw	r30, r12
    8ef8:	93 81       	ldd	r25, Z+3	; 0x03
    8efa:	f7 01       	movw	r30, r14
    8efc:	93 fd       	sbrc	r25, 3
    8efe:	85 91       	lpm	r24, Z+
    8f00:	93 ff       	sbrs	r25, 3
    8f02:	81 91       	ld	r24, Z+
    8f04:	7f 01       	movw	r14, r30
    8f06:	88 23       	and	r24, r24
    8f08:	09 f4       	brne	.+2      	; 0x8f0c <vfprintf+0x62>
    8f0a:	ad c1       	rjmp	.+858    	; 0x9266 <vfprintf+0x3bc>
    8f0c:	85 32       	cpi	r24, 0x25	; 37
    8f0e:	39 f4       	brne	.+14     	; 0x8f1e <vfprintf+0x74>
    8f10:	93 fd       	sbrc	r25, 3
    8f12:	85 91       	lpm	r24, Z+
    8f14:	93 ff       	sbrs	r25, 3
    8f16:	81 91       	ld	r24, Z+
    8f18:	7f 01       	movw	r14, r30
    8f1a:	85 32       	cpi	r24, 0x25	; 37
    8f1c:	21 f4       	brne	.+8      	; 0x8f26 <vfprintf+0x7c>
    8f1e:	b6 01       	movw	r22, r12
    8f20:	90 e0       	ldi	r25, 0x00	; 0
    8f22:	08 d7       	rcall	.+3600   	; 0x9d34 <fputc>
    8f24:	e8 cf       	rjmp	.-48     	; 0x8ef6 <vfprintf+0x4c>
    8f26:	91 2c       	mov	r9, r1
    8f28:	21 2c       	mov	r2, r1
    8f2a:	31 2c       	mov	r3, r1
    8f2c:	ff e1       	ldi	r31, 0x1F	; 31
    8f2e:	f3 15       	cp	r31, r3
    8f30:	d8 f0       	brcs	.+54     	; 0x8f68 <vfprintf+0xbe>
    8f32:	8b 32       	cpi	r24, 0x2B	; 43
    8f34:	79 f0       	breq	.+30     	; 0x8f54 <vfprintf+0xaa>
    8f36:	38 f4       	brcc	.+14     	; 0x8f46 <vfprintf+0x9c>
    8f38:	80 32       	cpi	r24, 0x20	; 32
    8f3a:	79 f0       	breq	.+30     	; 0x8f5a <vfprintf+0xb0>
    8f3c:	83 32       	cpi	r24, 0x23	; 35
    8f3e:	a1 f4       	brne	.+40     	; 0x8f68 <vfprintf+0xbe>
    8f40:	23 2d       	mov	r18, r3
    8f42:	20 61       	ori	r18, 0x10	; 16
    8f44:	1d c0       	rjmp	.+58     	; 0x8f80 <vfprintf+0xd6>
    8f46:	8d 32       	cpi	r24, 0x2D	; 45
    8f48:	61 f0       	breq	.+24     	; 0x8f62 <vfprintf+0xb8>
    8f4a:	80 33       	cpi	r24, 0x30	; 48
    8f4c:	69 f4       	brne	.+26     	; 0x8f68 <vfprintf+0xbe>
    8f4e:	23 2d       	mov	r18, r3
    8f50:	21 60       	ori	r18, 0x01	; 1
    8f52:	16 c0       	rjmp	.+44     	; 0x8f80 <vfprintf+0xd6>
    8f54:	83 2d       	mov	r24, r3
    8f56:	82 60       	ori	r24, 0x02	; 2
    8f58:	38 2e       	mov	r3, r24
    8f5a:	e3 2d       	mov	r30, r3
    8f5c:	e4 60       	ori	r30, 0x04	; 4
    8f5e:	3e 2e       	mov	r3, r30
    8f60:	2a c0       	rjmp	.+84     	; 0x8fb6 <vfprintf+0x10c>
    8f62:	f3 2d       	mov	r31, r3
    8f64:	f8 60       	ori	r31, 0x08	; 8
    8f66:	1d c0       	rjmp	.+58     	; 0x8fa2 <vfprintf+0xf8>
    8f68:	37 fc       	sbrc	r3, 7
    8f6a:	2d c0       	rjmp	.+90     	; 0x8fc6 <vfprintf+0x11c>
    8f6c:	20 ed       	ldi	r18, 0xD0	; 208
    8f6e:	28 0f       	add	r18, r24
    8f70:	2a 30       	cpi	r18, 0x0A	; 10
    8f72:	40 f0       	brcs	.+16     	; 0x8f84 <vfprintf+0xda>
    8f74:	8e 32       	cpi	r24, 0x2E	; 46
    8f76:	b9 f4       	brne	.+46     	; 0x8fa6 <vfprintf+0xfc>
    8f78:	36 fc       	sbrc	r3, 6
    8f7a:	75 c1       	rjmp	.+746    	; 0x9266 <vfprintf+0x3bc>
    8f7c:	23 2d       	mov	r18, r3
    8f7e:	20 64       	ori	r18, 0x40	; 64
    8f80:	32 2e       	mov	r3, r18
    8f82:	19 c0       	rjmp	.+50     	; 0x8fb6 <vfprintf+0x10c>
    8f84:	36 fe       	sbrs	r3, 6
    8f86:	06 c0       	rjmp	.+12     	; 0x8f94 <vfprintf+0xea>
    8f88:	8a e0       	ldi	r24, 0x0A	; 10
    8f8a:	98 9e       	mul	r9, r24
    8f8c:	20 0d       	add	r18, r0
    8f8e:	11 24       	eor	r1, r1
    8f90:	92 2e       	mov	r9, r18
    8f92:	11 c0       	rjmp	.+34     	; 0x8fb6 <vfprintf+0x10c>
    8f94:	ea e0       	ldi	r30, 0x0A	; 10
    8f96:	2e 9e       	mul	r2, r30
    8f98:	20 0d       	add	r18, r0
    8f9a:	11 24       	eor	r1, r1
    8f9c:	22 2e       	mov	r2, r18
    8f9e:	f3 2d       	mov	r31, r3
    8fa0:	f0 62       	ori	r31, 0x20	; 32
    8fa2:	3f 2e       	mov	r3, r31
    8fa4:	08 c0       	rjmp	.+16     	; 0x8fb6 <vfprintf+0x10c>
    8fa6:	8c 36       	cpi	r24, 0x6C	; 108
    8fa8:	21 f4       	brne	.+8      	; 0x8fb2 <vfprintf+0x108>
    8faa:	83 2d       	mov	r24, r3
    8fac:	80 68       	ori	r24, 0x80	; 128
    8fae:	38 2e       	mov	r3, r24
    8fb0:	02 c0       	rjmp	.+4      	; 0x8fb6 <vfprintf+0x10c>
    8fb2:	88 36       	cpi	r24, 0x68	; 104
    8fb4:	41 f4       	brne	.+16     	; 0x8fc6 <vfprintf+0x11c>
    8fb6:	f7 01       	movw	r30, r14
    8fb8:	93 fd       	sbrc	r25, 3
    8fba:	85 91       	lpm	r24, Z+
    8fbc:	93 ff       	sbrs	r25, 3
    8fbe:	81 91       	ld	r24, Z+
    8fc0:	7f 01       	movw	r14, r30
    8fc2:	81 11       	cpse	r24, r1
    8fc4:	b3 cf       	rjmp	.-154    	; 0x8f2c <vfprintf+0x82>
    8fc6:	98 2f       	mov	r25, r24
    8fc8:	9f 7d       	andi	r25, 0xDF	; 223
    8fca:	95 54       	subi	r25, 0x45	; 69
    8fcc:	93 30       	cpi	r25, 0x03	; 3
    8fce:	28 f4       	brcc	.+10     	; 0x8fda <vfprintf+0x130>
    8fd0:	0c 5f       	subi	r16, 0xFC	; 252
    8fd2:	1f 4f       	sbci	r17, 0xFF	; 255
    8fd4:	9f e3       	ldi	r25, 0x3F	; 63
    8fd6:	99 83       	std	Y+1, r25	; 0x01
    8fd8:	0d c0       	rjmp	.+26     	; 0x8ff4 <vfprintf+0x14a>
    8fda:	83 36       	cpi	r24, 0x63	; 99
    8fdc:	31 f0       	breq	.+12     	; 0x8fea <vfprintf+0x140>
    8fde:	83 37       	cpi	r24, 0x73	; 115
    8fe0:	71 f0       	breq	.+28     	; 0x8ffe <vfprintf+0x154>
    8fe2:	83 35       	cpi	r24, 0x53	; 83
    8fe4:	09 f0       	breq	.+2      	; 0x8fe8 <vfprintf+0x13e>
    8fe6:	55 c0       	rjmp	.+170    	; 0x9092 <vfprintf+0x1e8>
    8fe8:	20 c0       	rjmp	.+64     	; 0x902a <vfprintf+0x180>
    8fea:	f8 01       	movw	r30, r16
    8fec:	80 81       	ld	r24, Z
    8fee:	89 83       	std	Y+1, r24	; 0x01
    8ff0:	0e 5f       	subi	r16, 0xFE	; 254
    8ff2:	1f 4f       	sbci	r17, 0xFF	; 255
    8ff4:	88 24       	eor	r8, r8
    8ff6:	83 94       	inc	r8
    8ff8:	91 2c       	mov	r9, r1
    8ffa:	53 01       	movw	r10, r6
    8ffc:	12 c0       	rjmp	.+36     	; 0x9022 <vfprintf+0x178>
    8ffe:	28 01       	movw	r4, r16
    9000:	f2 e0       	ldi	r31, 0x02	; 2
    9002:	4f 0e       	add	r4, r31
    9004:	51 1c       	adc	r5, r1
    9006:	f8 01       	movw	r30, r16
    9008:	a0 80       	ld	r10, Z
    900a:	b1 80       	ldd	r11, Z+1	; 0x01
    900c:	36 fe       	sbrs	r3, 6
    900e:	03 c0       	rjmp	.+6      	; 0x9016 <vfprintf+0x16c>
    9010:	69 2d       	mov	r22, r9
    9012:	70 e0       	ldi	r23, 0x00	; 0
    9014:	02 c0       	rjmp	.+4      	; 0x901a <vfprintf+0x170>
    9016:	6f ef       	ldi	r22, 0xFF	; 255
    9018:	7f ef       	ldi	r23, 0xFF	; 255
    901a:	c5 01       	movw	r24, r10
    901c:	70 d6       	rcall	.+3296   	; 0x9cfe <strnlen>
    901e:	4c 01       	movw	r8, r24
    9020:	82 01       	movw	r16, r4
    9022:	f3 2d       	mov	r31, r3
    9024:	ff 77       	andi	r31, 0x7F	; 127
    9026:	3f 2e       	mov	r3, r31
    9028:	15 c0       	rjmp	.+42     	; 0x9054 <vfprintf+0x1aa>
    902a:	28 01       	movw	r4, r16
    902c:	22 e0       	ldi	r18, 0x02	; 2
    902e:	42 0e       	add	r4, r18
    9030:	51 1c       	adc	r5, r1
    9032:	f8 01       	movw	r30, r16
    9034:	a0 80       	ld	r10, Z
    9036:	b1 80       	ldd	r11, Z+1	; 0x01
    9038:	36 fe       	sbrs	r3, 6
    903a:	03 c0       	rjmp	.+6      	; 0x9042 <vfprintf+0x198>
    903c:	69 2d       	mov	r22, r9
    903e:	70 e0       	ldi	r23, 0x00	; 0
    9040:	02 c0       	rjmp	.+4      	; 0x9046 <vfprintf+0x19c>
    9042:	6f ef       	ldi	r22, 0xFF	; 255
    9044:	7f ef       	ldi	r23, 0xFF	; 255
    9046:	c5 01       	movw	r24, r10
    9048:	4f d6       	rcall	.+3230   	; 0x9ce8 <strnlen_P>
    904a:	4c 01       	movw	r8, r24
    904c:	f3 2d       	mov	r31, r3
    904e:	f0 68       	ori	r31, 0x80	; 128
    9050:	3f 2e       	mov	r3, r31
    9052:	82 01       	movw	r16, r4
    9054:	33 fc       	sbrc	r3, 3
    9056:	19 c0       	rjmp	.+50     	; 0x908a <vfprintf+0x1e0>
    9058:	82 2d       	mov	r24, r2
    905a:	90 e0       	ldi	r25, 0x00	; 0
    905c:	88 16       	cp	r8, r24
    905e:	99 06       	cpc	r9, r25
    9060:	a0 f4       	brcc	.+40     	; 0x908a <vfprintf+0x1e0>
    9062:	b6 01       	movw	r22, r12
    9064:	80 e2       	ldi	r24, 0x20	; 32
    9066:	90 e0       	ldi	r25, 0x00	; 0
    9068:	65 d6       	rcall	.+3274   	; 0x9d34 <fputc>
    906a:	2a 94       	dec	r2
    906c:	f5 cf       	rjmp	.-22     	; 0x9058 <vfprintf+0x1ae>
    906e:	f5 01       	movw	r30, r10
    9070:	37 fc       	sbrc	r3, 7
    9072:	85 91       	lpm	r24, Z+
    9074:	37 fe       	sbrs	r3, 7
    9076:	81 91       	ld	r24, Z+
    9078:	5f 01       	movw	r10, r30
    907a:	b6 01       	movw	r22, r12
    907c:	90 e0       	ldi	r25, 0x00	; 0
    907e:	5a d6       	rcall	.+3252   	; 0x9d34 <fputc>
    9080:	21 10       	cpse	r2, r1
    9082:	2a 94       	dec	r2
    9084:	21 e0       	ldi	r18, 0x01	; 1
    9086:	82 1a       	sub	r8, r18
    9088:	91 08       	sbc	r9, r1
    908a:	81 14       	cp	r8, r1
    908c:	91 04       	cpc	r9, r1
    908e:	79 f7       	brne	.-34     	; 0x906e <vfprintf+0x1c4>
    9090:	e1 c0       	rjmp	.+450    	; 0x9254 <vfprintf+0x3aa>
    9092:	84 36       	cpi	r24, 0x64	; 100
    9094:	11 f0       	breq	.+4      	; 0x909a <vfprintf+0x1f0>
    9096:	89 36       	cpi	r24, 0x69	; 105
    9098:	39 f5       	brne	.+78     	; 0x90e8 <vfprintf+0x23e>
    909a:	f8 01       	movw	r30, r16
    909c:	37 fe       	sbrs	r3, 7
    909e:	07 c0       	rjmp	.+14     	; 0x90ae <vfprintf+0x204>
    90a0:	60 81       	ld	r22, Z
    90a2:	71 81       	ldd	r23, Z+1	; 0x01
    90a4:	82 81       	ldd	r24, Z+2	; 0x02
    90a6:	93 81       	ldd	r25, Z+3	; 0x03
    90a8:	0c 5f       	subi	r16, 0xFC	; 252
    90aa:	1f 4f       	sbci	r17, 0xFF	; 255
    90ac:	08 c0       	rjmp	.+16     	; 0x90be <vfprintf+0x214>
    90ae:	60 81       	ld	r22, Z
    90b0:	71 81       	ldd	r23, Z+1	; 0x01
    90b2:	07 2e       	mov	r0, r23
    90b4:	00 0c       	add	r0, r0
    90b6:	88 0b       	sbc	r24, r24
    90b8:	99 0b       	sbc	r25, r25
    90ba:	0e 5f       	subi	r16, 0xFE	; 254
    90bc:	1f 4f       	sbci	r17, 0xFF	; 255
    90be:	f3 2d       	mov	r31, r3
    90c0:	ff 76       	andi	r31, 0x6F	; 111
    90c2:	3f 2e       	mov	r3, r31
    90c4:	97 ff       	sbrs	r25, 7
    90c6:	09 c0       	rjmp	.+18     	; 0x90da <vfprintf+0x230>
    90c8:	90 95       	com	r25
    90ca:	80 95       	com	r24
    90cc:	70 95       	com	r23
    90ce:	61 95       	neg	r22
    90d0:	7f 4f       	sbci	r23, 0xFF	; 255
    90d2:	8f 4f       	sbci	r24, 0xFF	; 255
    90d4:	9f 4f       	sbci	r25, 0xFF	; 255
    90d6:	f0 68       	ori	r31, 0x80	; 128
    90d8:	3f 2e       	mov	r3, r31
    90da:	2a e0       	ldi	r18, 0x0A	; 10
    90dc:	30 e0       	ldi	r19, 0x00	; 0
    90de:	a3 01       	movw	r20, r6
    90e0:	7e d6       	rcall	.+3324   	; 0x9dde <__ultoa_invert>
    90e2:	88 2e       	mov	r8, r24
    90e4:	86 18       	sub	r8, r6
    90e6:	44 c0       	rjmp	.+136    	; 0x9170 <vfprintf+0x2c6>
    90e8:	85 37       	cpi	r24, 0x75	; 117
    90ea:	31 f4       	brne	.+12     	; 0x90f8 <vfprintf+0x24e>
    90ec:	23 2d       	mov	r18, r3
    90ee:	2f 7e       	andi	r18, 0xEF	; 239
    90f0:	b2 2e       	mov	r11, r18
    90f2:	2a e0       	ldi	r18, 0x0A	; 10
    90f4:	30 e0       	ldi	r19, 0x00	; 0
    90f6:	25 c0       	rjmp	.+74     	; 0x9142 <vfprintf+0x298>
    90f8:	93 2d       	mov	r25, r3
    90fa:	99 7f       	andi	r25, 0xF9	; 249
    90fc:	b9 2e       	mov	r11, r25
    90fe:	8f 36       	cpi	r24, 0x6F	; 111
    9100:	c1 f0       	breq	.+48     	; 0x9132 <vfprintf+0x288>
    9102:	18 f4       	brcc	.+6      	; 0x910a <vfprintf+0x260>
    9104:	88 35       	cpi	r24, 0x58	; 88
    9106:	79 f0       	breq	.+30     	; 0x9126 <vfprintf+0x27c>
    9108:	ae c0       	rjmp	.+348    	; 0x9266 <vfprintf+0x3bc>
    910a:	80 37       	cpi	r24, 0x70	; 112
    910c:	19 f0       	breq	.+6      	; 0x9114 <vfprintf+0x26a>
    910e:	88 37       	cpi	r24, 0x78	; 120
    9110:	21 f0       	breq	.+8      	; 0x911a <vfprintf+0x270>
    9112:	a9 c0       	rjmp	.+338    	; 0x9266 <vfprintf+0x3bc>
    9114:	e9 2f       	mov	r30, r25
    9116:	e0 61       	ori	r30, 0x10	; 16
    9118:	be 2e       	mov	r11, r30
    911a:	b4 fe       	sbrs	r11, 4
    911c:	0d c0       	rjmp	.+26     	; 0x9138 <vfprintf+0x28e>
    911e:	fb 2d       	mov	r31, r11
    9120:	f4 60       	ori	r31, 0x04	; 4
    9122:	bf 2e       	mov	r11, r31
    9124:	09 c0       	rjmp	.+18     	; 0x9138 <vfprintf+0x28e>
    9126:	34 fe       	sbrs	r3, 4
    9128:	0a c0       	rjmp	.+20     	; 0x913e <vfprintf+0x294>
    912a:	29 2f       	mov	r18, r25
    912c:	26 60       	ori	r18, 0x06	; 6
    912e:	b2 2e       	mov	r11, r18
    9130:	06 c0       	rjmp	.+12     	; 0x913e <vfprintf+0x294>
    9132:	28 e0       	ldi	r18, 0x08	; 8
    9134:	30 e0       	ldi	r19, 0x00	; 0
    9136:	05 c0       	rjmp	.+10     	; 0x9142 <vfprintf+0x298>
    9138:	20 e1       	ldi	r18, 0x10	; 16
    913a:	30 e0       	ldi	r19, 0x00	; 0
    913c:	02 c0       	rjmp	.+4      	; 0x9142 <vfprintf+0x298>
    913e:	20 e1       	ldi	r18, 0x10	; 16
    9140:	32 e0       	ldi	r19, 0x02	; 2
    9142:	f8 01       	movw	r30, r16
    9144:	b7 fe       	sbrs	r11, 7
    9146:	07 c0       	rjmp	.+14     	; 0x9156 <vfprintf+0x2ac>
    9148:	60 81       	ld	r22, Z
    914a:	71 81       	ldd	r23, Z+1	; 0x01
    914c:	82 81       	ldd	r24, Z+2	; 0x02
    914e:	93 81       	ldd	r25, Z+3	; 0x03
    9150:	0c 5f       	subi	r16, 0xFC	; 252
    9152:	1f 4f       	sbci	r17, 0xFF	; 255
    9154:	06 c0       	rjmp	.+12     	; 0x9162 <vfprintf+0x2b8>
    9156:	60 81       	ld	r22, Z
    9158:	71 81       	ldd	r23, Z+1	; 0x01
    915a:	80 e0       	ldi	r24, 0x00	; 0
    915c:	90 e0       	ldi	r25, 0x00	; 0
    915e:	0e 5f       	subi	r16, 0xFE	; 254
    9160:	1f 4f       	sbci	r17, 0xFF	; 255
    9162:	a3 01       	movw	r20, r6
    9164:	3c d6       	rcall	.+3192   	; 0x9dde <__ultoa_invert>
    9166:	88 2e       	mov	r8, r24
    9168:	86 18       	sub	r8, r6
    916a:	fb 2d       	mov	r31, r11
    916c:	ff 77       	andi	r31, 0x7F	; 127
    916e:	3f 2e       	mov	r3, r31
    9170:	36 fe       	sbrs	r3, 6
    9172:	0d c0       	rjmp	.+26     	; 0x918e <vfprintf+0x2e4>
    9174:	23 2d       	mov	r18, r3
    9176:	2e 7f       	andi	r18, 0xFE	; 254
    9178:	a2 2e       	mov	r10, r18
    917a:	89 14       	cp	r8, r9
    917c:	58 f4       	brcc	.+22     	; 0x9194 <vfprintf+0x2ea>
    917e:	34 fe       	sbrs	r3, 4
    9180:	0b c0       	rjmp	.+22     	; 0x9198 <vfprintf+0x2ee>
    9182:	32 fc       	sbrc	r3, 2
    9184:	09 c0       	rjmp	.+18     	; 0x9198 <vfprintf+0x2ee>
    9186:	83 2d       	mov	r24, r3
    9188:	8e 7e       	andi	r24, 0xEE	; 238
    918a:	a8 2e       	mov	r10, r24
    918c:	05 c0       	rjmp	.+10     	; 0x9198 <vfprintf+0x2ee>
    918e:	b8 2c       	mov	r11, r8
    9190:	a3 2c       	mov	r10, r3
    9192:	03 c0       	rjmp	.+6      	; 0x919a <vfprintf+0x2f0>
    9194:	b8 2c       	mov	r11, r8
    9196:	01 c0       	rjmp	.+2      	; 0x919a <vfprintf+0x2f0>
    9198:	b9 2c       	mov	r11, r9
    919a:	a4 fe       	sbrs	r10, 4
    919c:	0f c0       	rjmp	.+30     	; 0x91bc <vfprintf+0x312>
    919e:	fe 01       	movw	r30, r28
    91a0:	e8 0d       	add	r30, r8
    91a2:	f1 1d       	adc	r31, r1
    91a4:	80 81       	ld	r24, Z
    91a6:	80 33       	cpi	r24, 0x30	; 48
    91a8:	21 f4       	brne	.+8      	; 0x91b2 <vfprintf+0x308>
    91aa:	9a 2d       	mov	r25, r10
    91ac:	99 7e       	andi	r25, 0xE9	; 233
    91ae:	a9 2e       	mov	r10, r25
    91b0:	09 c0       	rjmp	.+18     	; 0x91c4 <vfprintf+0x31a>
    91b2:	a2 fe       	sbrs	r10, 2
    91b4:	06 c0       	rjmp	.+12     	; 0x91c2 <vfprintf+0x318>
    91b6:	b3 94       	inc	r11
    91b8:	b3 94       	inc	r11
    91ba:	04 c0       	rjmp	.+8      	; 0x91c4 <vfprintf+0x31a>
    91bc:	8a 2d       	mov	r24, r10
    91be:	86 78       	andi	r24, 0x86	; 134
    91c0:	09 f0       	breq	.+2      	; 0x91c4 <vfprintf+0x31a>
    91c2:	b3 94       	inc	r11
    91c4:	a3 fc       	sbrc	r10, 3
    91c6:	10 c0       	rjmp	.+32     	; 0x91e8 <vfprintf+0x33e>
    91c8:	a0 fe       	sbrs	r10, 0
    91ca:	06 c0       	rjmp	.+12     	; 0x91d8 <vfprintf+0x32e>
    91cc:	b2 14       	cp	r11, r2
    91ce:	80 f4       	brcc	.+32     	; 0x91f0 <vfprintf+0x346>
    91d0:	28 0c       	add	r2, r8
    91d2:	92 2c       	mov	r9, r2
    91d4:	9b 18       	sub	r9, r11
    91d6:	0d c0       	rjmp	.+26     	; 0x91f2 <vfprintf+0x348>
    91d8:	b2 14       	cp	r11, r2
    91da:	58 f4       	brcc	.+22     	; 0x91f2 <vfprintf+0x348>
    91dc:	b6 01       	movw	r22, r12
    91de:	80 e2       	ldi	r24, 0x20	; 32
    91e0:	90 e0       	ldi	r25, 0x00	; 0
    91e2:	a8 d5       	rcall	.+2896   	; 0x9d34 <fputc>
    91e4:	b3 94       	inc	r11
    91e6:	f8 cf       	rjmp	.-16     	; 0x91d8 <vfprintf+0x32e>
    91e8:	b2 14       	cp	r11, r2
    91ea:	18 f4       	brcc	.+6      	; 0x91f2 <vfprintf+0x348>
    91ec:	2b 18       	sub	r2, r11
    91ee:	02 c0       	rjmp	.+4      	; 0x91f4 <vfprintf+0x34a>
    91f0:	98 2c       	mov	r9, r8
    91f2:	21 2c       	mov	r2, r1
    91f4:	a4 fe       	sbrs	r10, 4
    91f6:	0f c0       	rjmp	.+30     	; 0x9216 <vfprintf+0x36c>
    91f8:	b6 01       	movw	r22, r12
    91fa:	80 e3       	ldi	r24, 0x30	; 48
    91fc:	90 e0       	ldi	r25, 0x00	; 0
    91fe:	9a d5       	rcall	.+2868   	; 0x9d34 <fputc>
    9200:	a2 fe       	sbrs	r10, 2
    9202:	16 c0       	rjmp	.+44     	; 0x9230 <vfprintf+0x386>
    9204:	a1 fc       	sbrc	r10, 1
    9206:	03 c0       	rjmp	.+6      	; 0x920e <vfprintf+0x364>
    9208:	88 e7       	ldi	r24, 0x78	; 120
    920a:	90 e0       	ldi	r25, 0x00	; 0
    920c:	02 c0       	rjmp	.+4      	; 0x9212 <vfprintf+0x368>
    920e:	88 e5       	ldi	r24, 0x58	; 88
    9210:	90 e0       	ldi	r25, 0x00	; 0
    9212:	b6 01       	movw	r22, r12
    9214:	0c c0       	rjmp	.+24     	; 0x922e <vfprintf+0x384>
    9216:	8a 2d       	mov	r24, r10
    9218:	86 78       	andi	r24, 0x86	; 134
    921a:	51 f0       	breq	.+20     	; 0x9230 <vfprintf+0x386>
    921c:	a1 fe       	sbrs	r10, 1
    921e:	02 c0       	rjmp	.+4      	; 0x9224 <vfprintf+0x37a>
    9220:	8b e2       	ldi	r24, 0x2B	; 43
    9222:	01 c0       	rjmp	.+2      	; 0x9226 <vfprintf+0x37c>
    9224:	80 e2       	ldi	r24, 0x20	; 32
    9226:	a7 fc       	sbrc	r10, 7
    9228:	8d e2       	ldi	r24, 0x2D	; 45
    922a:	b6 01       	movw	r22, r12
    922c:	90 e0       	ldi	r25, 0x00	; 0
    922e:	82 d5       	rcall	.+2820   	; 0x9d34 <fputc>
    9230:	89 14       	cp	r8, r9
    9232:	30 f4       	brcc	.+12     	; 0x9240 <vfprintf+0x396>
    9234:	b6 01       	movw	r22, r12
    9236:	80 e3       	ldi	r24, 0x30	; 48
    9238:	90 e0       	ldi	r25, 0x00	; 0
    923a:	7c d5       	rcall	.+2808   	; 0x9d34 <fputc>
    923c:	9a 94       	dec	r9
    923e:	f8 cf       	rjmp	.-16     	; 0x9230 <vfprintf+0x386>
    9240:	8a 94       	dec	r8
    9242:	f3 01       	movw	r30, r6
    9244:	e8 0d       	add	r30, r8
    9246:	f1 1d       	adc	r31, r1
    9248:	80 81       	ld	r24, Z
    924a:	b6 01       	movw	r22, r12
    924c:	90 e0       	ldi	r25, 0x00	; 0
    924e:	72 d5       	rcall	.+2788   	; 0x9d34 <fputc>
    9250:	81 10       	cpse	r8, r1
    9252:	f6 cf       	rjmp	.-20     	; 0x9240 <vfprintf+0x396>
    9254:	22 20       	and	r2, r2
    9256:	09 f4       	brne	.+2      	; 0x925a <vfprintf+0x3b0>
    9258:	4e ce       	rjmp	.-868    	; 0x8ef6 <vfprintf+0x4c>
    925a:	b6 01       	movw	r22, r12
    925c:	80 e2       	ldi	r24, 0x20	; 32
    925e:	90 e0       	ldi	r25, 0x00	; 0
    9260:	69 d5       	rcall	.+2770   	; 0x9d34 <fputc>
    9262:	2a 94       	dec	r2
    9264:	f7 cf       	rjmp	.-18     	; 0x9254 <vfprintf+0x3aa>
    9266:	f6 01       	movw	r30, r12
    9268:	86 81       	ldd	r24, Z+6	; 0x06
    926a:	97 81       	ldd	r25, Z+7	; 0x07
    926c:	02 c0       	rjmp	.+4      	; 0x9272 <vfprintf+0x3c8>
    926e:	8f ef       	ldi	r24, 0xFF	; 255
    9270:	9f ef       	ldi	r25, 0xFF	; 255
    9272:	2b 96       	adiw	r28, 0x0b	; 11
    9274:	0f b6       	in	r0, 0x3f	; 63
    9276:	f8 94       	cli
    9278:	de bf       	out	0x3e, r29	; 62
    927a:	0f be       	out	0x3f, r0	; 63
    927c:	cd bf       	out	0x3d, r28	; 61
    927e:	df 91       	pop	r29
    9280:	cf 91       	pop	r28
    9282:	1f 91       	pop	r17
    9284:	0f 91       	pop	r16
    9286:	ff 90       	pop	r15
    9288:	ef 90       	pop	r14
    928a:	df 90       	pop	r13
    928c:	cf 90       	pop	r12
    928e:	bf 90       	pop	r11
    9290:	af 90       	pop	r10
    9292:	9f 90       	pop	r9
    9294:	8f 90       	pop	r8
    9296:	7f 90       	pop	r7
    9298:	6f 90       	pop	r6
    929a:	5f 90       	pop	r5
    929c:	4f 90       	pop	r4
    929e:	3f 90       	pop	r3
    92a0:	2f 90       	pop	r2
    92a2:	08 95       	ret

000092a4 <putval>:
    92a4:	20 fd       	sbrc	r18, 0
    92a6:	09 c0       	rjmp	.+18     	; 0x92ba <putval+0x16>
    92a8:	fc 01       	movw	r30, r24
    92aa:	23 fd       	sbrc	r18, 3
    92ac:	05 c0       	rjmp	.+10     	; 0x92b8 <putval+0x14>
    92ae:	22 ff       	sbrs	r18, 2
    92b0:	02 c0       	rjmp	.+4      	; 0x92b6 <putval+0x12>
    92b2:	73 83       	std	Z+3, r23	; 0x03
    92b4:	62 83       	std	Z+2, r22	; 0x02
    92b6:	51 83       	std	Z+1, r21	; 0x01
    92b8:	40 83       	st	Z, r20
    92ba:	08 95       	ret

000092bc <mulacc>:
    92bc:	44 fd       	sbrc	r20, 4
    92be:	17 c0       	rjmp	.+46     	; 0x92ee <mulacc+0x32>
    92c0:	46 fd       	sbrc	r20, 6
    92c2:	17 c0       	rjmp	.+46     	; 0x92f2 <mulacc+0x36>
    92c4:	ab 01       	movw	r20, r22
    92c6:	bc 01       	movw	r22, r24
    92c8:	da 01       	movw	r26, r20
    92ca:	fb 01       	movw	r30, r22
    92cc:	aa 0f       	add	r26, r26
    92ce:	bb 1f       	adc	r27, r27
    92d0:	ee 1f       	adc	r30, r30
    92d2:	ff 1f       	adc	r31, r31
    92d4:	10 94       	com	r1
    92d6:	d1 f7       	brne	.-12     	; 0x92cc <mulacc+0x10>
    92d8:	4a 0f       	add	r20, r26
    92da:	5b 1f       	adc	r21, r27
    92dc:	6e 1f       	adc	r22, r30
    92de:	7f 1f       	adc	r23, r31
    92e0:	cb 01       	movw	r24, r22
    92e2:	ba 01       	movw	r22, r20
    92e4:	66 0f       	add	r22, r22
    92e6:	77 1f       	adc	r23, r23
    92e8:	88 1f       	adc	r24, r24
    92ea:	99 1f       	adc	r25, r25
    92ec:	09 c0       	rjmp	.+18     	; 0x9300 <mulacc+0x44>
    92ee:	33 e0       	ldi	r19, 0x03	; 3
    92f0:	01 c0       	rjmp	.+2      	; 0x92f4 <mulacc+0x38>
    92f2:	34 e0       	ldi	r19, 0x04	; 4
    92f4:	66 0f       	add	r22, r22
    92f6:	77 1f       	adc	r23, r23
    92f8:	88 1f       	adc	r24, r24
    92fa:	99 1f       	adc	r25, r25
    92fc:	31 50       	subi	r19, 0x01	; 1
    92fe:	d1 f7       	brne	.-12     	; 0x92f4 <mulacc+0x38>
    9300:	62 0f       	add	r22, r18
    9302:	71 1d       	adc	r23, r1
    9304:	81 1d       	adc	r24, r1
    9306:	91 1d       	adc	r25, r1
    9308:	08 95       	ret

0000930a <skip_spaces>:
    930a:	0f 93       	push	r16
    930c:	1f 93       	push	r17
    930e:	cf 93       	push	r28
    9310:	df 93       	push	r29
    9312:	8c 01       	movw	r16, r24
    9314:	c8 01       	movw	r24, r16
    9316:	65 dc       	rcall	.-1846   	; 0x8be2 <fgetc>
    9318:	ec 01       	movw	r28, r24
    931a:	97 fd       	sbrc	r25, 7
    931c:	06 c0       	rjmp	.+12     	; 0x932a <skip_spaces+0x20>
    931e:	04 dc       	rcall	.-2040   	; 0x8b28 <isspace>
    9320:	89 2b       	or	r24, r25
    9322:	c1 f7       	brne	.-16     	; 0x9314 <skip_spaces+0xa>
    9324:	b8 01       	movw	r22, r16
    9326:	ce 01       	movw	r24, r28
    9328:	41 d5       	rcall	.+2690   	; 0x9dac <ungetc>
    932a:	ce 01       	movw	r24, r28
    932c:	df 91       	pop	r29
    932e:	cf 91       	pop	r28
    9330:	1f 91       	pop	r17
    9332:	0f 91       	pop	r16
    9334:	08 95       	ret

00009336 <conv_int>:
    9336:	8f 92       	push	r8
    9338:	9f 92       	push	r9
    933a:	af 92       	push	r10
    933c:	bf 92       	push	r11
    933e:	ef 92       	push	r14
    9340:	ff 92       	push	r15
    9342:	0f 93       	push	r16
    9344:	1f 93       	push	r17
    9346:	cf 93       	push	r28
    9348:	df 93       	push	r29
    934a:	8c 01       	movw	r16, r24
    934c:	d6 2f       	mov	r29, r22
    934e:	7a 01       	movw	r14, r20
    9350:	b2 2e       	mov	r11, r18
    9352:	47 dc       	rcall	.-1906   	; 0x8be2 <fgetc>
    9354:	9c 01       	movw	r18, r24
    9356:	33 27       	eor	r19, r19
    9358:	2b 32       	cpi	r18, 0x2B	; 43
    935a:	31 05       	cpc	r19, r1
    935c:	31 f0       	breq	.+12     	; 0x936a <conv_int+0x34>
    935e:	2d 32       	cpi	r18, 0x2D	; 45
    9360:	31 05       	cpc	r19, r1
    9362:	59 f4       	brne	.+22     	; 0x937a <conv_int+0x44>
    9364:	8b 2d       	mov	r24, r11
    9366:	80 68       	ori	r24, 0x80	; 128
    9368:	b8 2e       	mov	r11, r24
    936a:	d1 50       	subi	r29, 0x01	; 1
    936c:	11 f4       	brne	.+4      	; 0x9372 <conv_int+0x3c>
    936e:	80 e0       	ldi	r24, 0x00	; 0
    9370:	61 c0       	rjmp	.+194    	; 0x9434 <conv_int+0xfe>
    9372:	c8 01       	movw	r24, r16
    9374:	36 dc       	rcall	.-1940   	; 0x8be2 <fgetc>
    9376:	97 fd       	sbrc	r25, 7
    9378:	fa cf       	rjmp	.-12     	; 0x936e <conv_int+0x38>
    937a:	cb 2d       	mov	r28, r11
    937c:	cd 7f       	andi	r28, 0xFD	; 253
    937e:	2b 2d       	mov	r18, r11
    9380:	20 73       	andi	r18, 0x30	; 48
    9382:	f9 f4       	brne	.+62     	; 0x93c2 <conv_int+0x8c>
    9384:	80 33       	cpi	r24, 0x30	; 48
    9386:	e9 f4       	brne	.+58     	; 0x93c2 <conv_int+0x8c>
    9388:	aa 24       	eor	r10, r10
    938a:	aa 94       	dec	r10
    938c:	ad 0e       	add	r10, r29
    938e:	09 f4       	brne	.+2      	; 0x9392 <conv_int+0x5c>
    9390:	3e c0       	rjmp	.+124    	; 0x940e <conv_int+0xd8>
    9392:	c8 01       	movw	r24, r16
    9394:	26 dc       	rcall	.-1972   	; 0x8be2 <fgetc>
    9396:	97 fd       	sbrc	r25, 7
    9398:	3a c0       	rjmp	.+116    	; 0x940e <conv_int+0xd8>
    939a:	9c 01       	movw	r18, r24
    939c:	2f 7d       	andi	r18, 0xDF	; 223
    939e:	33 27       	eor	r19, r19
    93a0:	28 35       	cpi	r18, 0x58	; 88
    93a2:	31 05       	cpc	r19, r1
    93a4:	41 f4       	brne	.+16     	; 0x93b6 <conv_int+0x80>
    93a6:	c2 64       	ori	r28, 0x42	; 66
    93a8:	d2 50       	subi	r29, 0x02	; 2
    93aa:	89 f1       	breq	.+98     	; 0x940e <conv_int+0xd8>
    93ac:	c8 01       	movw	r24, r16
    93ae:	19 dc       	rcall	.-1998   	; 0x8be2 <fgetc>
    93b0:	97 ff       	sbrs	r25, 7
    93b2:	07 c0       	rjmp	.+14     	; 0x93c2 <conv_int+0x8c>
    93b4:	2c c0       	rjmp	.+88     	; 0x940e <conv_int+0xd8>
    93b6:	b6 fe       	sbrs	r11, 6
    93b8:	02 c0       	rjmp	.+4      	; 0x93be <conv_int+0x88>
    93ba:	c2 60       	ori	r28, 0x02	; 2
    93bc:	01 c0       	rjmp	.+2      	; 0x93c0 <conv_int+0x8a>
    93be:	c2 61       	ori	r28, 0x12	; 18
    93c0:	da 2d       	mov	r29, r10
    93c2:	81 2c       	mov	r8, r1
    93c4:	91 2c       	mov	r9, r1
    93c6:	54 01       	movw	r10, r8
    93c8:	20 ed       	ldi	r18, 0xD0	; 208
    93ca:	28 0f       	add	r18, r24
    93cc:	28 30       	cpi	r18, 0x08	; 8
    93ce:	78 f0       	brcs	.+30     	; 0x93ee <conv_int+0xb8>
    93d0:	c4 ff       	sbrs	r28, 4
    93d2:	03 c0       	rjmp	.+6      	; 0x93da <conv_int+0xa4>
    93d4:	b8 01       	movw	r22, r16
    93d6:	ea d4       	rcall	.+2516   	; 0x9dac <ungetc>
    93d8:	17 c0       	rjmp	.+46     	; 0x9408 <conv_int+0xd2>
    93da:	2a 30       	cpi	r18, 0x0A	; 10
    93dc:	40 f0       	brcs	.+16     	; 0x93ee <conv_int+0xb8>
    93de:	c6 ff       	sbrs	r28, 6
    93e0:	f9 cf       	rjmp	.-14     	; 0x93d4 <conv_int+0x9e>
    93e2:	2f 7d       	andi	r18, 0xDF	; 223
    93e4:	3f ee       	ldi	r19, 0xEF	; 239
    93e6:	32 0f       	add	r19, r18
    93e8:	36 30       	cpi	r19, 0x06	; 6
    93ea:	a0 f7       	brcc	.-24     	; 0x93d4 <conv_int+0x9e>
    93ec:	27 50       	subi	r18, 0x07	; 7
    93ee:	4c 2f       	mov	r20, r28
    93f0:	c5 01       	movw	r24, r10
    93f2:	b4 01       	movw	r22, r8
    93f4:	63 df       	rcall	.-314    	; 0x92bc <mulacc>
    93f6:	4b 01       	movw	r8, r22
    93f8:	5c 01       	movw	r10, r24
    93fa:	c2 60       	ori	r28, 0x02	; 2
    93fc:	d1 50       	subi	r29, 0x01	; 1
    93fe:	51 f0       	breq	.+20     	; 0x9414 <conv_int+0xde>
    9400:	c8 01       	movw	r24, r16
    9402:	ef db       	rcall	.-2082   	; 0x8be2 <fgetc>
    9404:	97 ff       	sbrs	r25, 7
    9406:	e0 cf       	rjmp	.-64     	; 0x93c8 <conv_int+0x92>
    9408:	c1 fd       	sbrc	r28, 1
    940a:	04 c0       	rjmp	.+8      	; 0x9414 <conv_int+0xde>
    940c:	b0 cf       	rjmp	.-160    	; 0x936e <conv_int+0x38>
    940e:	81 2c       	mov	r8, r1
    9410:	91 2c       	mov	r9, r1
    9412:	54 01       	movw	r10, r8
    9414:	c7 ff       	sbrs	r28, 7
    9416:	08 c0       	rjmp	.+16     	; 0x9428 <conv_int+0xf2>
    9418:	b0 94       	com	r11
    941a:	a0 94       	com	r10
    941c:	90 94       	com	r9
    941e:	80 94       	com	r8
    9420:	81 1c       	adc	r8, r1
    9422:	91 1c       	adc	r9, r1
    9424:	a1 1c       	adc	r10, r1
    9426:	b1 1c       	adc	r11, r1
    9428:	2c 2f       	mov	r18, r28
    942a:	b5 01       	movw	r22, r10
    942c:	a4 01       	movw	r20, r8
    942e:	c7 01       	movw	r24, r14
    9430:	39 df       	rcall	.-398    	; 0x92a4 <putval>
    9432:	81 e0       	ldi	r24, 0x01	; 1
    9434:	df 91       	pop	r29
    9436:	cf 91       	pop	r28
    9438:	1f 91       	pop	r17
    943a:	0f 91       	pop	r16
    943c:	ff 90       	pop	r15
    943e:	ef 90       	pop	r14
    9440:	bf 90       	pop	r11
    9442:	af 90       	pop	r10
    9444:	9f 90       	pop	r9
    9446:	8f 90       	pop	r8
    9448:	08 95       	ret

0000944a <conv_brk>:
    944a:	5f 92       	push	r5
    944c:	6f 92       	push	r6
    944e:	7f 92       	push	r7
    9450:	8f 92       	push	r8
    9452:	9f 92       	push	r9
    9454:	af 92       	push	r10
    9456:	bf 92       	push	r11
    9458:	cf 92       	push	r12
    945a:	df 92       	push	r13
    945c:	ef 92       	push	r14
    945e:	ff 92       	push	r15
    9460:	0f 93       	push	r16
    9462:	1f 93       	push	r17
    9464:	cf 93       	push	r28
    9466:	df 93       	push	r29
    9468:	cd b7       	in	r28, 0x3d	; 61
    946a:	de b7       	in	r29, 0x3e	; 62
    946c:	a0 97       	sbiw	r28, 0x20	; 32
    946e:	0f b6       	in	r0, 0x3f	; 63
    9470:	f8 94       	cli
    9472:	de bf       	out	0x3e, r29	; 62
    9474:	0f be       	out	0x3f, r0	; 63
    9476:	cd bf       	out	0x3d, r28	; 61
    9478:	5c 01       	movw	r10, r24
    947a:	96 2e       	mov	r9, r22
    947c:	7a 01       	movw	r14, r20
    947e:	f9 01       	movw	r30, r18
    9480:	8e 01       	movw	r16, r28
    9482:	0f 5f       	subi	r16, 0xFF	; 255
    9484:	1f 4f       	sbci	r17, 0xFF	; 255
    9486:	68 01       	movw	r12, r16
    9488:	80 e2       	ldi	r24, 0x20	; 32
    948a:	d8 01       	movw	r26, r16
    948c:	1d 92       	st	X+, r1
    948e:	8a 95       	dec	r24
    9490:	e9 f7       	brne	.-6      	; 0x948c <conv_brk+0x42>
    9492:	d5 01       	movw	r26, r10
    9494:	13 96       	adiw	r26, 0x03	; 3
    9496:	8c 90       	ld	r8, X
    9498:	80 e0       	ldi	r24, 0x00	; 0
    949a:	90 e0       	ldi	r25, 0x00	; 0
    949c:	61 2c       	mov	r6, r1
    949e:	71 2c       	mov	r7, r1
    94a0:	30 e0       	ldi	r19, 0x00	; 0
    94a2:	61 e0       	ldi	r22, 0x01	; 1
    94a4:	70 e0       	ldi	r23, 0x00	; 0
    94a6:	83 fc       	sbrc	r8, 3
    94a8:	25 91       	lpm	r18, Z+
    94aa:	83 fe       	sbrs	r8, 3
    94ac:	21 91       	ld	r18, Z+
    94ae:	8f 01       	movw	r16, r30
    94b0:	52 2e       	mov	r5, r18
    94b2:	21 11       	cpse	r18, r1
    94b4:	03 c0       	rjmp	.+6      	; 0x94bc <conv_brk+0x72>
    94b6:	80 e0       	ldi	r24, 0x00	; 0
    94b8:	90 e0       	ldi	r25, 0x00	; 0
    94ba:	90 c0       	rjmp	.+288    	; 0x95dc <conv_brk+0x192>
    94bc:	2e 35       	cpi	r18, 0x5E	; 94
    94be:	11 f4       	brne	.+4      	; 0x94c4 <conv_brk+0x7a>
    94c0:	00 97       	sbiw	r24, 0x00	; 0
    94c2:	51 f1       	breq	.+84     	; 0x9518 <conv_brk+0xce>
    94c4:	43 2f       	mov	r20, r19
    94c6:	50 e0       	ldi	r21, 0x00	; 0
    94c8:	48 17       	cp	r20, r24
    94ca:	59 07       	cpc	r21, r25
    94cc:	3c f4       	brge	.+14     	; 0x94dc <conv_brk+0x92>
    94ce:	2d 35       	cpi	r18, 0x5D	; 93
    94d0:	59 f1       	breq	.+86     	; 0x9528 <conv_brk+0xde>
    94d2:	2d 32       	cpi	r18, 0x2D	; 45
    94d4:	19 f4       	brne	.+6      	; 0x94dc <conv_brk+0x92>
    94d6:	77 20       	and	r7, r7
    94d8:	09 f1       	breq	.+66     	; 0x951c <conv_brk+0xd2>
    94da:	03 c0       	rjmp	.+6      	; 0x94e2 <conv_brk+0x98>
    94dc:	77 20       	and	r7, r7
    94de:	09 f4       	brne	.+2      	; 0x94e2 <conv_brk+0x98>
    94e0:	68 c0       	rjmp	.+208    	; 0x95b2 <conv_brk+0x168>
    94e2:	45 2d       	mov	r20, r5
    94e4:	46 95       	lsr	r20
    94e6:	46 95       	lsr	r20
    94e8:	46 95       	lsr	r20
    94ea:	d6 01       	movw	r26, r12
    94ec:	a4 0f       	add	r26, r20
    94ee:	b1 1d       	adc	r27, r1
    94f0:	45 2d       	mov	r20, r5
    94f2:	47 70       	andi	r20, 0x07	; 7
    94f4:	8b 01       	movw	r16, r22
    94f6:	02 c0       	rjmp	.+4      	; 0x94fc <conv_brk+0xb2>
    94f8:	00 0f       	add	r16, r16
    94fa:	11 1f       	adc	r17, r17
    94fc:	4a 95       	dec	r20
    94fe:	e2 f7       	brpl	.-8      	; 0x94f8 <conv_brk+0xae>
    9500:	a8 01       	movw	r20, r16
    9502:	5c 91       	ld	r21, X
    9504:	45 2b       	or	r20, r21
    9506:	4c 93       	st	X, r20
    9508:	65 14       	cp	r6, r5
    950a:	59 f0       	breq	.+22     	; 0x9522 <conv_brk+0xd8>
    950c:	56 14       	cp	r5, r6
    950e:	10 f4       	brcc	.+4      	; 0x9514 <conv_brk+0xca>
    9510:	53 94       	inc	r5
    9512:	e7 cf       	rjmp	.-50     	; 0x94e2 <conv_brk+0x98>
    9514:	5a 94       	dec	r5
    9516:	e5 cf       	rjmp	.-54     	; 0x94e2 <conv_brk+0x98>
    9518:	31 e0       	ldi	r19, 0x01	; 1
    951a:	04 c0       	rjmp	.+8      	; 0x9524 <conv_brk+0xda>
    951c:	77 24       	eor	r7, r7
    951e:	73 94       	inc	r7
    9520:	01 c0       	rjmp	.+2      	; 0x9524 <conv_brk+0xda>
    9522:	71 2c       	mov	r7, r1
    9524:	01 96       	adiw	r24, 0x01	; 1
    9526:	bf cf       	rjmp	.-130    	; 0x94a6 <conv_brk+0x5c>
    9528:	77 20       	and	r7, r7
    952a:	19 f0       	breq	.+6      	; 0x9532 <conv_brk+0xe8>
    952c:	8e 81       	ldd	r24, Y+6	; 0x06
    952e:	80 62       	ori	r24, 0x20	; 32
    9530:	8e 83       	std	Y+6, r24	; 0x06
    9532:	31 11       	cpse	r19, r1
    9534:	03 c0       	rjmp	.+6      	; 0x953c <conv_brk+0xf2>
    9536:	88 24       	eor	r8, r8
    9538:	83 94       	inc	r8
    953a:	17 c0       	rjmp	.+46     	; 0x956a <conv_brk+0x120>
    953c:	f6 01       	movw	r30, r12
    953e:	9e 01       	movw	r18, r28
    9540:	2f 5d       	subi	r18, 0xDF	; 223
    9542:	3f 4f       	sbci	r19, 0xFF	; 255
    9544:	80 81       	ld	r24, Z
    9546:	80 95       	com	r24
    9548:	81 93       	st	Z+, r24
    954a:	2e 17       	cp	r18, r30
    954c:	3f 07       	cpc	r19, r31
    954e:	d1 f7       	brne	.-12     	; 0x9544 <conv_brk+0xfa>
    9550:	f2 cf       	rjmp	.-28     	; 0x9536 <conv_brk+0xec>
    9552:	e1 14       	cp	r14, r1
    9554:	f1 04       	cpc	r15, r1
    9556:	29 f0       	breq	.+10     	; 0x9562 <conv_brk+0x118>
    9558:	d7 01       	movw	r26, r14
    955a:	8c 93       	st	X, r24
    955c:	f7 01       	movw	r30, r14
    955e:	31 96       	adiw	r30, 0x01	; 1
    9560:	7f 01       	movw	r14, r30
    9562:	9a 94       	dec	r9
    9564:	81 2c       	mov	r8, r1
    9566:	99 20       	and	r9, r9
    9568:	e9 f0       	breq	.+58     	; 0x95a4 <conv_brk+0x15a>
    956a:	c5 01       	movw	r24, r10
    956c:	3a db       	rcall	.-2444   	; 0x8be2 <fgetc>
    956e:	97 fd       	sbrc	r25, 7
    9570:	17 c0       	rjmp	.+46     	; 0x95a0 <conv_brk+0x156>
    9572:	fc 01       	movw	r30, r24
    9574:	ff 27       	eor	r31, r31
    9576:	23 e0       	ldi	r18, 0x03	; 3
    9578:	f5 95       	asr	r31
    957a:	e7 95       	ror	r30
    957c:	2a 95       	dec	r18
    957e:	e1 f7       	brne	.-8      	; 0x9578 <conv_brk+0x12e>
    9580:	ec 0d       	add	r30, r12
    9582:	fd 1d       	adc	r31, r13
    9584:	20 81       	ld	r18, Z
    9586:	30 e0       	ldi	r19, 0x00	; 0
    9588:	ac 01       	movw	r20, r24
    958a:	47 70       	andi	r20, 0x07	; 7
    958c:	55 27       	eor	r21, r21
    958e:	02 c0       	rjmp	.+4      	; 0x9594 <conv_brk+0x14a>
    9590:	35 95       	asr	r19
    9592:	27 95       	ror	r18
    9594:	4a 95       	dec	r20
    9596:	e2 f7       	brpl	.-8      	; 0x9590 <conv_brk+0x146>
    9598:	20 fd       	sbrc	r18, 0
    959a:	db cf       	rjmp	.-74     	; 0x9552 <conv_brk+0x108>
    959c:	b5 01       	movw	r22, r10
    959e:	06 d4       	rcall	.+2060   	; 0x9dac <ungetc>
    95a0:	81 10       	cpse	r8, r1
    95a2:	89 cf       	rjmp	.-238    	; 0x94b6 <conv_brk+0x6c>
    95a4:	e1 14       	cp	r14, r1
    95a6:	f1 04       	cpc	r15, r1
    95a8:	11 f0       	breq	.+4      	; 0x95ae <conv_brk+0x164>
    95aa:	d7 01       	movw	r26, r14
    95ac:	1c 92       	st	X, r1
    95ae:	c8 01       	movw	r24, r16
    95b0:	15 c0       	rjmp	.+42     	; 0x95dc <conv_brk+0x192>
    95b2:	42 2f       	mov	r20, r18
    95b4:	46 95       	lsr	r20
    95b6:	46 95       	lsr	r20
    95b8:	46 95       	lsr	r20
    95ba:	d6 01       	movw	r26, r12
    95bc:	a4 0f       	add	r26, r20
    95be:	b1 1d       	adc	r27, r1
    95c0:	42 2f       	mov	r20, r18
    95c2:	47 70       	andi	r20, 0x07	; 7
    95c4:	8b 01       	movw	r16, r22
    95c6:	02 c0       	rjmp	.+4      	; 0x95cc <conv_brk+0x182>
    95c8:	00 0f       	add	r16, r16
    95ca:	11 1f       	adc	r17, r17
    95cc:	4a 95       	dec	r20
    95ce:	e2 f7       	brpl	.-8      	; 0x95c8 <conv_brk+0x17e>
    95d0:	a8 01       	movw	r20, r16
    95d2:	5c 91       	ld	r21, X
    95d4:	45 2b       	or	r20, r21
    95d6:	4c 93       	st	X, r20
    95d8:	62 2e       	mov	r6, r18
    95da:	a4 cf       	rjmp	.-184    	; 0x9524 <conv_brk+0xda>
    95dc:	a0 96       	adiw	r28, 0x20	; 32
    95de:	0f b6       	in	r0, 0x3f	; 63
    95e0:	f8 94       	cli
    95e2:	de bf       	out	0x3e, r29	; 62
    95e4:	0f be       	out	0x3f, r0	; 63
    95e6:	cd bf       	out	0x3d, r28	; 61
    95e8:	df 91       	pop	r29
    95ea:	cf 91       	pop	r28
    95ec:	1f 91       	pop	r17
    95ee:	0f 91       	pop	r16
    95f0:	ff 90       	pop	r15
    95f2:	ef 90       	pop	r14
    95f4:	df 90       	pop	r13
    95f6:	cf 90       	pop	r12
    95f8:	bf 90       	pop	r11
    95fa:	af 90       	pop	r10
    95fc:	9f 90       	pop	r9
    95fe:	8f 90       	pop	r8
    9600:	7f 90       	pop	r7
    9602:	6f 90       	pop	r6
    9604:	5f 90       	pop	r5
    9606:	08 95       	ret

00009608 <vfscanf>:
    9608:	5f 92       	push	r5
    960a:	6f 92       	push	r6
    960c:	7f 92       	push	r7
    960e:	8f 92       	push	r8
    9610:	9f 92       	push	r9
    9612:	af 92       	push	r10
    9614:	bf 92       	push	r11
    9616:	cf 92       	push	r12
    9618:	df 92       	push	r13
    961a:	ef 92       	push	r14
    961c:	ff 92       	push	r15
    961e:	0f 93       	push	r16
    9620:	1f 93       	push	r17
    9622:	cf 93       	push	r28
    9624:	df 93       	push	r29
    9626:	6c 01       	movw	r12, r24
    9628:	eb 01       	movw	r28, r22
    962a:	5a 01       	movw	r10, r20
    962c:	fc 01       	movw	r30, r24
    962e:	17 82       	std	Z+7, r1	; 0x07
    9630:	16 82       	std	Z+6, r1	; 0x06
    9632:	51 2c       	mov	r5, r1
    9634:	f6 01       	movw	r30, r12
    9636:	e3 80       	ldd	r14, Z+3	; 0x03
    9638:	fe 01       	movw	r30, r28
    963a:	e3 fc       	sbrc	r14, 3
    963c:	85 91       	lpm	r24, Z+
    963e:	e3 fe       	sbrs	r14, 3
    9640:	81 91       	ld	r24, Z+
    9642:	18 2f       	mov	r17, r24
    9644:	ef 01       	movw	r28, r30
    9646:	88 23       	and	r24, r24
    9648:	09 f4       	brne	.+2      	; 0x964c <vfscanf+0x44>
    964a:	e0 c0       	rjmp	.+448    	; 0x980c <vfscanf+0x204>
    964c:	90 e0       	ldi	r25, 0x00	; 0
    964e:	6c da       	rcall	.-2856   	; 0x8b28 <isspace>
    9650:	89 2b       	or	r24, r25
    9652:	19 f0       	breq	.+6      	; 0x965a <vfscanf+0x52>
    9654:	c6 01       	movw	r24, r12
    9656:	59 de       	rcall	.-846    	; 0x930a <skip_spaces>
    9658:	ed cf       	rjmp	.-38     	; 0x9634 <vfscanf+0x2c>
    965a:	15 32       	cpi	r17, 0x25	; 37
    965c:	41 f4       	brne	.+16     	; 0x966e <vfscanf+0x66>
    965e:	fe 01       	movw	r30, r28
    9660:	e3 fc       	sbrc	r14, 3
    9662:	15 91       	lpm	r17, Z+
    9664:	e3 fe       	sbrs	r14, 3
    9666:	11 91       	ld	r17, Z+
    9668:	ef 01       	movw	r28, r30
    966a:	15 32       	cpi	r17, 0x25	; 37
    966c:	71 f4       	brne	.+28     	; 0x968a <vfscanf+0x82>
    966e:	c6 01       	movw	r24, r12
    9670:	b8 da       	rcall	.-2704   	; 0x8be2 <fgetc>
    9672:	97 fd       	sbrc	r25, 7
    9674:	c9 c0       	rjmp	.+402    	; 0x9808 <vfscanf+0x200>
    9676:	41 2f       	mov	r20, r17
    9678:	50 e0       	ldi	r21, 0x00	; 0
    967a:	9c 01       	movw	r18, r24
    967c:	33 27       	eor	r19, r19
    967e:	24 17       	cp	r18, r20
    9680:	35 07       	cpc	r19, r21
    9682:	c1 f2       	breq	.-80     	; 0x9634 <vfscanf+0x2c>
    9684:	b6 01       	movw	r22, r12
    9686:	92 d3       	rcall	.+1828   	; 0x9dac <ungetc>
    9688:	c1 c0       	rjmp	.+386    	; 0x980c <vfscanf+0x204>
    968a:	1a 32       	cpi	r17, 0x2A	; 42
    968c:	39 f4       	brne	.+14     	; 0x969c <vfscanf+0x94>
    968e:	e3 fc       	sbrc	r14, 3
    9690:	15 91       	lpm	r17, Z+
    9692:	e3 fe       	sbrs	r14, 3
    9694:	11 91       	ld	r17, Z+
    9696:	ef 01       	movw	r28, r30
    9698:	01 e0       	ldi	r16, 0x01	; 1
    969a:	01 c0       	rjmp	.+2      	; 0x969e <vfscanf+0x96>
    969c:	00 e0       	ldi	r16, 0x00	; 0
    969e:	f1 2c       	mov	r15, r1
    96a0:	20 ed       	ldi	r18, 0xD0	; 208
    96a2:	21 0f       	add	r18, r17
    96a4:	2a 30       	cpi	r18, 0x0A	; 10
    96a6:	78 f4       	brcc	.+30     	; 0x96c6 <vfscanf+0xbe>
    96a8:	02 60       	ori	r16, 0x02	; 2
    96aa:	6f 2d       	mov	r22, r15
    96ac:	70 e0       	ldi	r23, 0x00	; 0
    96ae:	80 e0       	ldi	r24, 0x00	; 0
    96b0:	90 e0       	ldi	r25, 0x00	; 0
    96b2:	40 e2       	ldi	r20, 0x20	; 32
    96b4:	03 de       	rcall	.-1018   	; 0x92bc <mulacc>
    96b6:	f6 2e       	mov	r15, r22
    96b8:	fe 01       	movw	r30, r28
    96ba:	e3 fc       	sbrc	r14, 3
    96bc:	15 91       	lpm	r17, Z+
    96be:	e3 fe       	sbrs	r14, 3
    96c0:	11 91       	ld	r17, Z+
    96c2:	ef 01       	movw	r28, r30
    96c4:	ed cf       	rjmp	.-38     	; 0x96a0 <vfscanf+0x98>
    96c6:	01 ff       	sbrs	r16, 1
    96c8:	03 c0       	rjmp	.+6      	; 0x96d0 <vfscanf+0xc8>
    96ca:	f1 10       	cpse	r15, r1
    96cc:	03 c0       	rjmp	.+6      	; 0x96d4 <vfscanf+0xcc>
    96ce:	9e c0       	rjmp	.+316    	; 0x980c <vfscanf+0x204>
    96d0:	ff 24       	eor	r15, r15
    96d2:	fa 94       	dec	r15
    96d4:	18 36       	cpi	r17, 0x68	; 104
    96d6:	19 f0       	breq	.+6      	; 0x96de <vfscanf+0xd6>
    96d8:	1c 36       	cpi	r17, 0x6C	; 108
    96da:	51 f0       	breq	.+20     	; 0x96f0 <vfscanf+0xe8>
    96dc:	10 c0       	rjmp	.+32     	; 0x96fe <vfscanf+0xf6>
    96de:	fe 01       	movw	r30, r28
    96e0:	e3 fc       	sbrc	r14, 3
    96e2:	15 91       	lpm	r17, Z+
    96e4:	e3 fe       	sbrs	r14, 3
    96e6:	11 91       	ld	r17, Z+
    96e8:	ef 01       	movw	r28, r30
    96ea:	18 36       	cpi	r17, 0x68	; 104
    96ec:	41 f4       	brne	.+16     	; 0x96fe <vfscanf+0xf6>
    96ee:	08 60       	ori	r16, 0x08	; 8
    96f0:	04 60       	ori	r16, 0x04	; 4
    96f2:	fe 01       	movw	r30, r28
    96f4:	e3 fc       	sbrc	r14, 3
    96f6:	15 91       	lpm	r17, Z+
    96f8:	e3 fe       	sbrs	r14, 3
    96fa:	11 91       	ld	r17, Z+
    96fc:	ef 01       	movw	r28, r30
    96fe:	11 23       	and	r17, r17
    9700:	09 f4       	brne	.+2      	; 0x9704 <vfscanf+0xfc>
    9702:	84 c0       	rjmp	.+264    	; 0x980c <vfscanf+0x204>
    9704:	61 2f       	mov	r22, r17
    9706:	70 e0       	ldi	r23, 0x00	; 0
    9708:	8a ef       	ldi	r24, 0xFA	; 250
    970a:	90 e0       	ldi	r25, 0x00	; 0
    970c:	e2 d2       	rcall	.+1476   	; 0x9cd2 <strchr_P>
    970e:	89 2b       	or	r24, r25
    9710:	09 f4       	brne	.+2      	; 0x9714 <vfscanf+0x10c>
    9712:	7c c0       	rjmp	.+248    	; 0x980c <vfscanf+0x204>
    9714:	00 fd       	sbrc	r16, 0
    9716:	07 c0       	rjmp	.+14     	; 0x9726 <vfscanf+0x11e>
    9718:	f5 01       	movw	r30, r10
    971a:	80 80       	ld	r8, Z
    971c:	91 80       	ldd	r9, Z+1	; 0x01
    971e:	c5 01       	movw	r24, r10
    9720:	02 96       	adiw	r24, 0x02	; 2
    9722:	5c 01       	movw	r10, r24
    9724:	02 c0       	rjmp	.+4      	; 0x972a <vfscanf+0x122>
    9726:	81 2c       	mov	r8, r1
    9728:	91 2c       	mov	r9, r1
    972a:	1e 36       	cpi	r17, 0x6E	; 110
    972c:	49 f4       	brne	.+18     	; 0x9740 <vfscanf+0x138>
    972e:	f6 01       	movw	r30, r12
    9730:	46 81       	ldd	r20, Z+6	; 0x06
    9732:	57 81       	ldd	r21, Z+7	; 0x07
    9734:	60 e0       	ldi	r22, 0x00	; 0
    9736:	70 e0       	ldi	r23, 0x00	; 0
    9738:	20 2f       	mov	r18, r16
    973a:	c4 01       	movw	r24, r8
    973c:	b3 dd       	rcall	.-1178   	; 0x92a4 <putval>
    973e:	7a cf       	rjmp	.-268    	; 0x9634 <vfscanf+0x2c>
    9740:	13 36       	cpi	r17, 0x63	; 99
    9742:	a1 f4       	brne	.+40     	; 0x976c <vfscanf+0x164>
    9744:	01 fd       	sbrc	r16, 1
    9746:	02 c0       	rjmp	.+4      	; 0x974c <vfscanf+0x144>
    9748:	ff 24       	eor	r15, r15
    974a:	f3 94       	inc	r15
    974c:	c6 01       	movw	r24, r12
    974e:	49 da       	rcall	.-2926   	; 0x8be2 <fgetc>
    9750:	97 fd       	sbrc	r25, 7
    9752:	5a c0       	rjmp	.+180    	; 0x9808 <vfscanf+0x200>
    9754:	81 14       	cp	r8, r1
    9756:	91 04       	cpc	r9, r1
    9758:	29 f0       	breq	.+10     	; 0x9764 <vfscanf+0x15c>
    975a:	f4 01       	movw	r30, r8
    975c:	80 83       	st	Z, r24
    975e:	c4 01       	movw	r24, r8
    9760:	01 96       	adiw	r24, 0x01	; 1
    9762:	4c 01       	movw	r8, r24
    9764:	fa 94       	dec	r15
    9766:	f1 10       	cpse	r15, r1
    9768:	f1 cf       	rjmp	.-30     	; 0x974c <vfscanf+0x144>
    976a:	4a c0       	rjmp	.+148    	; 0x9800 <vfscanf+0x1f8>
    976c:	1b 35       	cpi	r17, 0x5B	; 91
    976e:	51 f4       	brne	.+20     	; 0x9784 <vfscanf+0x17c>
    9770:	9e 01       	movw	r18, r28
    9772:	a4 01       	movw	r20, r8
    9774:	6f 2d       	mov	r22, r15
    9776:	c6 01       	movw	r24, r12
    9778:	68 de       	rcall	.-816    	; 0x944a <conv_brk>
    977a:	ec 01       	movw	r28, r24
    977c:	89 2b       	or	r24, r25
    977e:	09 f0       	breq	.+2      	; 0x9782 <vfscanf+0x17a>
    9780:	3f c0       	rjmp	.+126    	; 0x9800 <vfscanf+0x1f8>
    9782:	39 c0       	rjmp	.+114    	; 0x97f6 <vfscanf+0x1ee>
    9784:	c6 01       	movw	r24, r12
    9786:	c1 dd       	rcall	.-1150   	; 0x930a <skip_spaces>
    9788:	97 fd       	sbrc	r25, 7
    978a:	3e c0       	rjmp	.+124    	; 0x9808 <vfscanf+0x200>
    978c:	1f 36       	cpi	r17, 0x6F	; 111
    978e:	49 f1       	breq	.+82     	; 0x97e2 <vfscanf+0x1da>
    9790:	28 f4       	brcc	.+10     	; 0x979c <vfscanf+0x194>
    9792:	14 36       	cpi	r17, 0x64	; 100
    9794:	21 f1       	breq	.+72     	; 0x97de <vfscanf+0x1d6>
    9796:	19 36       	cpi	r17, 0x69	; 105
    9798:	39 f1       	breq	.+78     	; 0x97e8 <vfscanf+0x1e0>
    979a:	25 c0       	rjmp	.+74     	; 0x97e6 <vfscanf+0x1de>
    979c:	13 37       	cpi	r17, 0x73	; 115
    979e:	71 f0       	breq	.+28     	; 0x97bc <vfscanf+0x1b4>
    97a0:	15 37       	cpi	r17, 0x75	; 117
    97a2:	e9 f0       	breq	.+58     	; 0x97de <vfscanf+0x1d6>
    97a4:	20 c0       	rjmp	.+64     	; 0x97e6 <vfscanf+0x1de>
    97a6:	81 14       	cp	r8, r1
    97a8:	91 04       	cpc	r9, r1
    97aa:	29 f0       	breq	.+10     	; 0x97b6 <vfscanf+0x1ae>
    97ac:	f4 01       	movw	r30, r8
    97ae:	60 82       	st	Z, r6
    97b0:	c4 01       	movw	r24, r8
    97b2:	01 96       	adiw	r24, 0x01	; 1
    97b4:	4c 01       	movw	r8, r24
    97b6:	fa 94       	dec	r15
    97b8:	ff 20       	and	r15, r15
    97ba:	59 f0       	breq	.+22     	; 0x97d2 <vfscanf+0x1ca>
    97bc:	c6 01       	movw	r24, r12
    97be:	11 da       	rcall	.-3038   	; 0x8be2 <fgetc>
    97c0:	3c 01       	movw	r6, r24
    97c2:	97 fd       	sbrc	r25, 7
    97c4:	06 c0       	rjmp	.+12     	; 0x97d2 <vfscanf+0x1ca>
    97c6:	b0 d9       	rcall	.-3232   	; 0x8b28 <isspace>
    97c8:	89 2b       	or	r24, r25
    97ca:	69 f3       	breq	.-38     	; 0x97a6 <vfscanf+0x19e>
    97cc:	b6 01       	movw	r22, r12
    97ce:	c3 01       	movw	r24, r6
    97d0:	ed d2       	rcall	.+1498   	; 0x9dac <ungetc>
    97d2:	81 14       	cp	r8, r1
    97d4:	91 04       	cpc	r9, r1
    97d6:	a1 f0       	breq	.+40     	; 0x9800 <vfscanf+0x1f8>
    97d8:	f4 01       	movw	r30, r8
    97da:	10 82       	st	Z, r1
    97dc:	11 c0       	rjmp	.+34     	; 0x9800 <vfscanf+0x1f8>
    97de:	00 62       	ori	r16, 0x20	; 32
    97e0:	03 c0       	rjmp	.+6      	; 0x97e8 <vfscanf+0x1e0>
    97e2:	00 61       	ori	r16, 0x10	; 16
    97e4:	01 c0       	rjmp	.+2      	; 0x97e8 <vfscanf+0x1e0>
    97e6:	00 64       	ori	r16, 0x40	; 64
    97e8:	20 2f       	mov	r18, r16
    97ea:	a4 01       	movw	r20, r8
    97ec:	6f 2d       	mov	r22, r15
    97ee:	c6 01       	movw	r24, r12
    97f0:	a2 dd       	rcall	.-1212   	; 0x9336 <conv_int>
    97f2:	81 11       	cpse	r24, r1
    97f4:	05 c0       	rjmp	.+10     	; 0x9800 <vfscanf+0x1f8>
    97f6:	f6 01       	movw	r30, r12
    97f8:	83 81       	ldd	r24, Z+3	; 0x03
    97fa:	80 73       	andi	r24, 0x30	; 48
    97fc:	29 f4       	brne	.+10     	; 0x9808 <vfscanf+0x200>
    97fe:	06 c0       	rjmp	.+12     	; 0x980c <vfscanf+0x204>
    9800:	00 fd       	sbrc	r16, 0
    9802:	18 cf       	rjmp	.-464    	; 0x9634 <vfscanf+0x2c>
    9804:	53 94       	inc	r5
    9806:	16 cf       	rjmp	.-468    	; 0x9634 <vfscanf+0x2c>
    9808:	55 20       	and	r5, r5
    980a:	19 f0       	breq	.+6      	; 0x9812 <vfscanf+0x20a>
    980c:	85 2d       	mov	r24, r5
    980e:	90 e0       	ldi	r25, 0x00	; 0
    9810:	02 c0       	rjmp	.+4      	; 0x9816 <vfscanf+0x20e>
    9812:	8f ef       	ldi	r24, 0xFF	; 255
    9814:	9f ef       	ldi	r25, 0xFF	; 255
    9816:	df 91       	pop	r29
    9818:	cf 91       	pop	r28
    981a:	1f 91       	pop	r17
    981c:	0f 91       	pop	r16
    981e:	ff 90       	pop	r15
    9820:	ef 90       	pop	r14
    9822:	df 90       	pop	r13
    9824:	cf 90       	pop	r12
    9826:	bf 90       	pop	r11
    9828:	af 90       	pop	r10
    982a:	9f 90       	pop	r9
    982c:	8f 90       	pop	r8
    982e:	7f 90       	pop	r7
    9830:	6f 90       	pop	r6
    9832:	5f 90       	pop	r5
    9834:	08 95       	ret

00009836 <dtoa_prf>:
    9836:	8f 92       	push	r8
    9838:	9f 92       	push	r9
    983a:	af 92       	push	r10
    983c:	bf 92       	push	r11
    983e:	cf 92       	push	r12
    9840:	df 92       	push	r13
    9842:	ef 92       	push	r14
    9844:	ff 92       	push	r15
    9846:	0f 93       	push	r16
    9848:	1f 93       	push	r17
    984a:	cf 93       	push	r28
    984c:	df 93       	push	r29
    984e:	cd b7       	in	r28, 0x3d	; 61
    9850:	de b7       	in	r29, 0x3e	; 62
    9852:	29 97       	sbiw	r28, 0x09	; 9
    9854:	0f b6       	in	r0, 0x3f	; 63
    9856:	f8 94       	cli
    9858:	de bf       	out	0x3e, r29	; 62
    985a:	0f be       	out	0x3f, r0	; 63
    985c:	cd bf       	out	0x3d, r28	; 61
    985e:	6a 01       	movw	r12, r20
    9860:	12 2f       	mov	r17, r18
    9862:	b0 2e       	mov	r11, r16
    9864:	2b e3       	ldi	r18, 0x3B	; 59
    9866:	20 17       	cp	r18, r16
    9868:	20 f0       	brcs	.+8      	; 0x9872 <dtoa_prf+0x3c>
    986a:	ff 24       	eor	r15, r15
    986c:	f3 94       	inc	r15
    986e:	f0 0e       	add	r15, r16
    9870:	02 c0       	rjmp	.+4      	; 0x9876 <dtoa_prf+0x40>
    9872:	2c e3       	ldi	r18, 0x3C	; 60
    9874:	f2 2e       	mov	r15, r18
    9876:	0f 2d       	mov	r16, r15
    9878:	27 e0       	ldi	r18, 0x07	; 7
    987a:	ae 01       	movw	r20, r28
    987c:	4f 5f       	subi	r20, 0xFF	; 255
    987e:	5f 4f       	sbci	r21, 0xFF	; 255
    9880:	50 d1       	rcall	.+672    	; 0x9b22 <__ftoa_engine>
    9882:	bc 01       	movw	r22, r24
    9884:	49 81       	ldd	r20, Y+1	; 0x01
    9886:	84 2f       	mov	r24, r20
    9888:	89 70       	andi	r24, 0x09	; 9
    988a:	81 30       	cpi	r24, 0x01	; 1
    988c:	31 f0       	breq	.+12     	; 0x989a <dtoa_prf+0x64>
    988e:	e1 fc       	sbrc	r14, 1
    9890:	06 c0       	rjmp	.+12     	; 0x989e <dtoa_prf+0x68>
    9892:	e0 fe       	sbrs	r14, 0
    9894:	06 c0       	rjmp	.+12     	; 0x98a2 <dtoa_prf+0x6c>
    9896:	90 e2       	ldi	r25, 0x20	; 32
    9898:	05 c0       	rjmp	.+10     	; 0x98a4 <dtoa_prf+0x6e>
    989a:	9d e2       	ldi	r25, 0x2D	; 45
    989c:	03 c0       	rjmp	.+6      	; 0x98a4 <dtoa_prf+0x6e>
    989e:	9b e2       	ldi	r25, 0x2B	; 43
    98a0:	01 c0       	rjmp	.+2      	; 0x98a4 <dtoa_prf+0x6e>
    98a2:	90 e0       	ldi	r25, 0x00	; 0
    98a4:	5e 2d       	mov	r21, r14
    98a6:	50 71       	andi	r21, 0x10	; 16
    98a8:	43 ff       	sbrs	r20, 3
    98aa:	3c c0       	rjmp	.+120    	; 0x9924 <dtoa_prf+0xee>
    98ac:	91 11       	cpse	r25, r1
    98ae:	02 c0       	rjmp	.+4      	; 0x98b4 <dtoa_prf+0x7e>
    98b0:	83 e0       	ldi	r24, 0x03	; 3
    98b2:	01 c0       	rjmp	.+2      	; 0x98b6 <dtoa_prf+0x80>
    98b4:	84 e0       	ldi	r24, 0x04	; 4
    98b6:	81 17       	cp	r24, r17
    98b8:	18 f4       	brcc	.+6      	; 0x98c0 <dtoa_prf+0x8a>
    98ba:	21 2f       	mov	r18, r17
    98bc:	28 1b       	sub	r18, r24
    98be:	01 c0       	rjmp	.+2      	; 0x98c2 <dtoa_prf+0x8c>
    98c0:	20 e0       	ldi	r18, 0x00	; 0
    98c2:	51 11       	cpse	r21, r1
    98c4:	0b c0       	rjmp	.+22     	; 0x98dc <dtoa_prf+0xa6>
    98c6:	f6 01       	movw	r30, r12
    98c8:	82 2f       	mov	r24, r18
    98ca:	30 e2       	ldi	r19, 0x20	; 32
    98cc:	88 23       	and	r24, r24
    98ce:	19 f0       	breq	.+6      	; 0x98d6 <dtoa_prf+0xa0>
    98d0:	31 93       	st	Z+, r19
    98d2:	81 50       	subi	r24, 0x01	; 1
    98d4:	fb cf       	rjmp	.-10     	; 0x98cc <dtoa_prf+0x96>
    98d6:	c2 0e       	add	r12, r18
    98d8:	d1 1c       	adc	r13, r1
    98da:	20 e0       	ldi	r18, 0x00	; 0
    98dc:	99 23       	and	r25, r25
    98de:	29 f0       	breq	.+10     	; 0x98ea <dtoa_prf+0xb4>
    98e0:	d6 01       	movw	r26, r12
    98e2:	9c 93       	st	X, r25
    98e4:	f6 01       	movw	r30, r12
    98e6:	31 96       	adiw	r30, 0x01	; 1
    98e8:	6f 01       	movw	r12, r30
    98ea:	c6 01       	movw	r24, r12
    98ec:	03 96       	adiw	r24, 0x03	; 3
    98ee:	e2 fe       	sbrs	r14, 2
    98f0:	0a c0       	rjmp	.+20     	; 0x9906 <dtoa_prf+0xd0>
    98f2:	3e e4       	ldi	r19, 0x4E	; 78
    98f4:	d6 01       	movw	r26, r12
    98f6:	3c 93       	st	X, r19
    98f8:	41 e4       	ldi	r20, 0x41	; 65
    98fa:	11 96       	adiw	r26, 0x01	; 1
    98fc:	4c 93       	st	X, r20
    98fe:	11 97       	sbiw	r26, 0x01	; 1
    9900:	12 96       	adiw	r26, 0x02	; 2
    9902:	3c 93       	st	X, r19
    9904:	06 c0       	rjmp	.+12     	; 0x9912 <dtoa_prf+0xdc>
    9906:	3e e6       	ldi	r19, 0x6E	; 110
    9908:	f6 01       	movw	r30, r12
    990a:	30 83       	st	Z, r19
    990c:	41 e6       	ldi	r20, 0x61	; 97
    990e:	41 83       	std	Z+1, r20	; 0x01
    9910:	32 83       	std	Z+2, r19	; 0x02
    9912:	fc 01       	movw	r30, r24
    9914:	32 2f       	mov	r19, r18
    9916:	40 e2       	ldi	r20, 0x20	; 32
    9918:	33 23       	and	r19, r19
    991a:	09 f4       	brne	.+2      	; 0x991e <dtoa_prf+0xe8>
    991c:	42 c0       	rjmp	.+132    	; 0x99a2 <dtoa_prf+0x16c>
    991e:	41 93       	st	Z+, r20
    9920:	31 50       	subi	r19, 0x01	; 1
    9922:	fa cf       	rjmp	.-12     	; 0x9918 <dtoa_prf+0xe2>
    9924:	42 ff       	sbrs	r20, 2
    9926:	44 c0       	rjmp	.+136    	; 0x99b0 <dtoa_prf+0x17a>
    9928:	91 11       	cpse	r25, r1
    992a:	02 c0       	rjmp	.+4      	; 0x9930 <dtoa_prf+0xfa>
    992c:	83 e0       	ldi	r24, 0x03	; 3
    992e:	01 c0       	rjmp	.+2      	; 0x9932 <dtoa_prf+0xfc>
    9930:	84 e0       	ldi	r24, 0x04	; 4
    9932:	81 17       	cp	r24, r17
    9934:	18 f4       	brcc	.+6      	; 0x993c <dtoa_prf+0x106>
    9936:	21 2f       	mov	r18, r17
    9938:	28 1b       	sub	r18, r24
    993a:	01 c0       	rjmp	.+2      	; 0x993e <dtoa_prf+0x108>
    993c:	20 e0       	ldi	r18, 0x00	; 0
    993e:	51 11       	cpse	r21, r1
    9940:	0b c0       	rjmp	.+22     	; 0x9958 <dtoa_prf+0x122>
    9942:	f6 01       	movw	r30, r12
    9944:	82 2f       	mov	r24, r18
    9946:	30 e2       	ldi	r19, 0x20	; 32
    9948:	88 23       	and	r24, r24
    994a:	19 f0       	breq	.+6      	; 0x9952 <dtoa_prf+0x11c>
    994c:	31 93       	st	Z+, r19
    994e:	81 50       	subi	r24, 0x01	; 1
    9950:	fb cf       	rjmp	.-10     	; 0x9948 <dtoa_prf+0x112>
    9952:	c2 0e       	add	r12, r18
    9954:	d1 1c       	adc	r13, r1
    9956:	20 e0       	ldi	r18, 0x00	; 0
    9958:	99 23       	and	r25, r25
    995a:	29 f0       	breq	.+10     	; 0x9966 <dtoa_prf+0x130>
    995c:	d6 01       	movw	r26, r12
    995e:	9c 93       	st	X, r25
    9960:	f6 01       	movw	r30, r12
    9962:	31 96       	adiw	r30, 0x01	; 1
    9964:	6f 01       	movw	r12, r30
    9966:	c6 01       	movw	r24, r12
    9968:	03 96       	adiw	r24, 0x03	; 3
    996a:	e2 fe       	sbrs	r14, 2
    996c:	0b c0       	rjmp	.+22     	; 0x9984 <dtoa_prf+0x14e>
    996e:	39 e4       	ldi	r19, 0x49	; 73
    9970:	d6 01       	movw	r26, r12
    9972:	3c 93       	st	X, r19
    9974:	3e e4       	ldi	r19, 0x4E	; 78
    9976:	11 96       	adiw	r26, 0x01	; 1
    9978:	3c 93       	st	X, r19
    997a:	11 97       	sbiw	r26, 0x01	; 1
    997c:	36 e4       	ldi	r19, 0x46	; 70
    997e:	12 96       	adiw	r26, 0x02	; 2
    9980:	3c 93       	st	X, r19
    9982:	07 c0       	rjmp	.+14     	; 0x9992 <dtoa_prf+0x15c>
    9984:	39 e6       	ldi	r19, 0x69	; 105
    9986:	f6 01       	movw	r30, r12
    9988:	30 83       	st	Z, r19
    998a:	3e e6       	ldi	r19, 0x6E	; 110
    998c:	31 83       	std	Z+1, r19	; 0x01
    998e:	36 e6       	ldi	r19, 0x66	; 102
    9990:	32 83       	std	Z+2, r19	; 0x02
    9992:	fc 01       	movw	r30, r24
    9994:	32 2f       	mov	r19, r18
    9996:	40 e2       	ldi	r20, 0x20	; 32
    9998:	33 23       	and	r19, r19
    999a:	19 f0       	breq	.+6      	; 0x99a2 <dtoa_prf+0x16c>
    999c:	41 93       	st	Z+, r20
    999e:	31 50       	subi	r19, 0x01	; 1
    99a0:	fb cf       	rjmp	.-10     	; 0x9998 <dtoa_prf+0x162>
    99a2:	fc 01       	movw	r30, r24
    99a4:	e2 0f       	add	r30, r18
    99a6:	f1 1d       	adc	r31, r1
    99a8:	10 82       	st	Z, r1
    99aa:	8e ef       	ldi	r24, 0xFE	; 254
    99ac:	9f ef       	ldi	r25, 0xFF	; 255
    99ae:	a6 c0       	rjmp	.+332    	; 0x9afc <dtoa_prf+0x2c6>
    99b0:	21 e0       	ldi	r18, 0x01	; 1
    99b2:	30 e0       	ldi	r19, 0x00	; 0
    99b4:	91 11       	cpse	r25, r1
    99b6:	02 c0       	rjmp	.+4      	; 0x99bc <dtoa_prf+0x186>
    99b8:	20 e0       	ldi	r18, 0x00	; 0
    99ba:	30 e0       	ldi	r19, 0x00	; 0
    99bc:	16 16       	cp	r1, r22
    99be:	17 06       	cpc	r1, r23
    99c0:	1c f4       	brge	.+6      	; 0x99c8 <dtoa_prf+0x192>
    99c2:	fb 01       	movw	r30, r22
    99c4:	31 96       	adiw	r30, 0x01	; 1
    99c6:	02 c0       	rjmp	.+4      	; 0x99cc <dtoa_prf+0x196>
    99c8:	e1 e0       	ldi	r30, 0x01	; 1
    99ca:	f0 e0       	ldi	r31, 0x00	; 0
    99cc:	2e 0f       	add	r18, r30
    99ce:	3f 1f       	adc	r19, r31
    99d0:	bb 20       	and	r11, r11
    99d2:	21 f0       	breq	.+8      	; 0x99dc <dtoa_prf+0x1a6>
    99d4:	eb 2d       	mov	r30, r11
    99d6:	f0 e0       	ldi	r31, 0x00	; 0
    99d8:	31 96       	adiw	r30, 0x01	; 1
    99da:	02 c0       	rjmp	.+4      	; 0x99e0 <dtoa_prf+0x1aa>
    99dc:	e0 e0       	ldi	r30, 0x00	; 0
    99de:	f0 e0       	ldi	r31, 0x00	; 0
    99e0:	2e 0f       	add	r18, r30
    99e2:	3f 1f       	adc	r19, r31
    99e4:	e1 2f       	mov	r30, r17
    99e6:	f0 e0       	ldi	r31, 0x00	; 0
    99e8:	2e 17       	cp	r18, r30
    99ea:	3f 07       	cpc	r19, r31
    99ec:	1c f4       	brge	.+6      	; 0x99f4 <dtoa_prf+0x1be>
    99ee:	12 1b       	sub	r17, r18
    99f0:	21 2f       	mov	r18, r17
    99f2:	01 c0       	rjmp	.+2      	; 0x99f6 <dtoa_prf+0x1c0>
    99f4:	20 e0       	ldi	r18, 0x00	; 0
    99f6:	8e 2d       	mov	r24, r14
    99f8:	88 71       	andi	r24, 0x18	; 24
    99fa:	59 f4       	brne	.+22     	; 0x9a12 <dtoa_prf+0x1dc>
    99fc:	f6 01       	movw	r30, r12
    99fe:	82 2f       	mov	r24, r18
    9a00:	30 e2       	ldi	r19, 0x20	; 32
    9a02:	88 23       	and	r24, r24
    9a04:	19 f0       	breq	.+6      	; 0x9a0c <dtoa_prf+0x1d6>
    9a06:	31 93       	st	Z+, r19
    9a08:	81 50       	subi	r24, 0x01	; 1
    9a0a:	fb cf       	rjmp	.-10     	; 0x9a02 <dtoa_prf+0x1cc>
    9a0c:	c2 0e       	add	r12, r18
    9a0e:	d1 1c       	adc	r13, r1
    9a10:	20 e0       	ldi	r18, 0x00	; 0
    9a12:	99 23       	and	r25, r25
    9a14:	29 f0       	breq	.+10     	; 0x9a20 <dtoa_prf+0x1ea>
    9a16:	d6 01       	movw	r26, r12
    9a18:	9c 93       	st	X, r25
    9a1a:	f6 01       	movw	r30, r12
    9a1c:	31 96       	adiw	r30, 0x01	; 1
    9a1e:	6f 01       	movw	r12, r30
    9a20:	51 11       	cpse	r21, r1
    9a22:	0b c0       	rjmp	.+22     	; 0x9a3a <dtoa_prf+0x204>
    9a24:	f6 01       	movw	r30, r12
    9a26:	82 2f       	mov	r24, r18
    9a28:	90 e3       	ldi	r25, 0x30	; 48
    9a2a:	88 23       	and	r24, r24
    9a2c:	19 f0       	breq	.+6      	; 0x9a34 <dtoa_prf+0x1fe>
    9a2e:	91 93       	st	Z+, r25
    9a30:	81 50       	subi	r24, 0x01	; 1
    9a32:	fb cf       	rjmp	.-10     	; 0x9a2a <dtoa_prf+0x1f4>
    9a34:	c2 0e       	add	r12, r18
    9a36:	d1 1c       	adc	r13, r1
    9a38:	20 e0       	ldi	r18, 0x00	; 0
    9a3a:	0f 2d       	mov	r16, r15
    9a3c:	06 0f       	add	r16, r22
    9a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    9a40:	34 2f       	mov	r19, r20
    9a42:	30 71       	andi	r19, 0x10	; 16
    9a44:	44 ff       	sbrs	r20, 4
    9a46:	03 c0       	rjmp	.+6      	; 0x9a4e <dtoa_prf+0x218>
    9a48:	91 33       	cpi	r25, 0x31	; 49
    9a4a:	09 f4       	brne	.+2      	; 0x9a4e <dtoa_prf+0x218>
    9a4c:	01 50       	subi	r16, 0x01	; 1
    9a4e:	10 16       	cp	r1, r16
    9a50:	24 f4       	brge	.+8      	; 0x9a5a <dtoa_prf+0x224>
    9a52:	09 30       	cpi	r16, 0x09	; 9
    9a54:	18 f0       	brcs	.+6      	; 0x9a5c <dtoa_prf+0x226>
    9a56:	08 e0       	ldi	r16, 0x08	; 8
    9a58:	01 c0       	rjmp	.+2      	; 0x9a5c <dtoa_prf+0x226>
    9a5a:	01 e0       	ldi	r16, 0x01	; 1
    9a5c:	ab 01       	movw	r20, r22
    9a5e:	77 ff       	sbrs	r23, 7
    9a60:	02 c0       	rjmp	.+4      	; 0x9a66 <dtoa_prf+0x230>
    9a62:	40 e0       	ldi	r20, 0x00	; 0
    9a64:	50 e0       	ldi	r21, 0x00	; 0
    9a66:	fb 01       	movw	r30, r22
    9a68:	e4 1b       	sub	r30, r20
    9a6a:	f5 0b       	sbc	r31, r21
    9a6c:	a1 e0       	ldi	r26, 0x01	; 1
    9a6e:	b0 e0       	ldi	r27, 0x00	; 0
    9a70:	ac 0f       	add	r26, r28
    9a72:	bd 1f       	adc	r27, r29
    9a74:	ea 0f       	add	r30, r26
    9a76:	fb 1f       	adc	r31, r27
    9a78:	8e e2       	ldi	r24, 0x2E	; 46
    9a7a:	a8 2e       	mov	r10, r24
    9a7c:	4b 01       	movw	r8, r22
    9a7e:	80 1a       	sub	r8, r16
    9a80:	91 08       	sbc	r9, r1
    9a82:	0b 2d       	mov	r16, r11
    9a84:	10 e0       	ldi	r17, 0x00	; 0
    9a86:	11 95       	neg	r17
    9a88:	01 95       	neg	r16
    9a8a:	11 09       	sbc	r17, r1
    9a8c:	4f 3f       	cpi	r20, 0xFF	; 255
    9a8e:	bf ef       	ldi	r27, 0xFF	; 255
    9a90:	5b 07       	cpc	r21, r27
    9a92:	21 f4       	brne	.+8      	; 0x9a9c <dtoa_prf+0x266>
    9a94:	d6 01       	movw	r26, r12
    9a96:	ac 92       	st	X, r10
    9a98:	11 96       	adiw	r26, 0x01	; 1
    9a9a:	6d 01       	movw	r12, r26
    9a9c:	64 17       	cp	r22, r20
    9a9e:	75 07       	cpc	r23, r21
    9aa0:	2c f0       	brlt	.+10     	; 0x9aac <dtoa_prf+0x276>
    9aa2:	84 16       	cp	r8, r20
    9aa4:	95 06       	cpc	r9, r21
    9aa6:	14 f4       	brge	.+4      	; 0x9aac <dtoa_prf+0x276>
    9aa8:	81 81       	ldd	r24, Z+1	; 0x01
    9aaa:	01 c0       	rjmp	.+2      	; 0x9aae <dtoa_prf+0x278>
    9aac:	80 e3       	ldi	r24, 0x30	; 48
    9aae:	41 50       	subi	r20, 0x01	; 1
    9ab0:	51 09       	sbc	r21, r1
    9ab2:	31 96       	adiw	r30, 0x01	; 1
    9ab4:	d6 01       	movw	r26, r12
    9ab6:	11 96       	adiw	r26, 0x01	; 1
    9ab8:	7d 01       	movw	r14, r26
    9aba:	40 17       	cp	r20, r16
    9abc:	51 07       	cpc	r21, r17
    9abe:	24 f0       	brlt	.+8      	; 0x9ac8 <dtoa_prf+0x292>
    9ac0:	d6 01       	movw	r26, r12
    9ac2:	8c 93       	st	X, r24
    9ac4:	67 01       	movw	r12, r14
    9ac6:	e2 cf       	rjmp	.-60     	; 0x9a8c <dtoa_prf+0x256>
    9ac8:	64 17       	cp	r22, r20
    9aca:	75 07       	cpc	r23, r21
    9acc:	39 f4       	brne	.+14     	; 0x9adc <dtoa_prf+0x2a6>
    9ace:	96 33       	cpi	r25, 0x36	; 54
    9ad0:	20 f4       	brcc	.+8      	; 0x9ada <dtoa_prf+0x2a4>
    9ad2:	95 33       	cpi	r25, 0x35	; 53
    9ad4:	19 f4       	brne	.+6      	; 0x9adc <dtoa_prf+0x2a6>
    9ad6:	31 11       	cpse	r19, r1
    9ad8:	01 c0       	rjmp	.+2      	; 0x9adc <dtoa_prf+0x2a6>
    9ada:	81 e3       	ldi	r24, 0x31	; 49
    9adc:	f6 01       	movw	r30, r12
    9ade:	80 83       	st	Z, r24
    9ae0:	f7 01       	movw	r30, r14
    9ae2:	82 2f       	mov	r24, r18
    9ae4:	90 e2       	ldi	r25, 0x20	; 32
    9ae6:	88 23       	and	r24, r24
    9ae8:	19 f0       	breq	.+6      	; 0x9af0 <dtoa_prf+0x2ba>
    9aea:	91 93       	st	Z+, r25
    9aec:	81 50       	subi	r24, 0x01	; 1
    9aee:	fb cf       	rjmp	.-10     	; 0x9ae6 <dtoa_prf+0x2b0>
    9af0:	f7 01       	movw	r30, r14
    9af2:	e2 0f       	add	r30, r18
    9af4:	f1 1d       	adc	r31, r1
    9af6:	10 82       	st	Z, r1
    9af8:	80 e0       	ldi	r24, 0x00	; 0
    9afa:	90 e0       	ldi	r25, 0x00	; 0
    9afc:	29 96       	adiw	r28, 0x09	; 9
    9afe:	0f b6       	in	r0, 0x3f	; 63
    9b00:	f8 94       	cli
    9b02:	de bf       	out	0x3e, r29	; 62
    9b04:	0f be       	out	0x3f, r0	; 63
    9b06:	cd bf       	out	0x3d, r28	; 61
    9b08:	df 91       	pop	r29
    9b0a:	cf 91       	pop	r28
    9b0c:	1f 91       	pop	r17
    9b0e:	0f 91       	pop	r16
    9b10:	ff 90       	pop	r15
    9b12:	ef 90       	pop	r14
    9b14:	df 90       	pop	r13
    9b16:	cf 90       	pop	r12
    9b18:	bf 90       	pop	r11
    9b1a:	af 90       	pop	r10
    9b1c:	9f 90       	pop	r9
    9b1e:	8f 90       	pop	r8
    9b20:	08 95       	ret

00009b22 <__ftoa_engine>:
    9b22:	28 30       	cpi	r18, 0x08	; 8
    9b24:	08 f0       	brcs	.+2      	; 0x9b28 <__ftoa_engine+0x6>
    9b26:	27 e0       	ldi	r18, 0x07	; 7
    9b28:	33 27       	eor	r19, r19
    9b2a:	da 01       	movw	r26, r20
    9b2c:	99 0f       	add	r25, r25
    9b2e:	31 1d       	adc	r19, r1
    9b30:	87 fd       	sbrc	r24, 7
    9b32:	91 60       	ori	r25, 0x01	; 1
    9b34:	00 96       	adiw	r24, 0x00	; 0
    9b36:	61 05       	cpc	r22, r1
    9b38:	71 05       	cpc	r23, r1
    9b3a:	39 f4       	brne	.+14     	; 0x9b4a <__ftoa_engine+0x28>
    9b3c:	32 60       	ori	r19, 0x02	; 2
    9b3e:	2e 5f       	subi	r18, 0xFE	; 254
    9b40:	3d 93       	st	X+, r19
    9b42:	30 e3       	ldi	r19, 0x30	; 48
    9b44:	2a 95       	dec	r18
    9b46:	e1 f7       	brne	.-8      	; 0x9b40 <__ftoa_engine+0x1e>
    9b48:	08 95       	ret
    9b4a:	9f 3f       	cpi	r25, 0xFF	; 255
    9b4c:	30 f0       	brcs	.+12     	; 0x9b5a <__ftoa_engine+0x38>
    9b4e:	80 38       	cpi	r24, 0x80	; 128
    9b50:	71 05       	cpc	r23, r1
    9b52:	61 05       	cpc	r22, r1
    9b54:	09 f0       	breq	.+2      	; 0x9b58 <__ftoa_engine+0x36>
    9b56:	3c 5f       	subi	r19, 0xFC	; 252
    9b58:	3c 5f       	subi	r19, 0xFC	; 252
    9b5a:	3d 93       	st	X+, r19
    9b5c:	91 30       	cpi	r25, 0x01	; 1
    9b5e:	08 f0       	brcs	.+2      	; 0x9b62 <__ftoa_engine+0x40>
    9b60:	80 68       	ori	r24, 0x80	; 128
    9b62:	91 1d       	adc	r25, r1
    9b64:	df 93       	push	r29
    9b66:	cf 93       	push	r28
    9b68:	1f 93       	push	r17
    9b6a:	0f 93       	push	r16
    9b6c:	ff 92       	push	r15
    9b6e:	ef 92       	push	r14
    9b70:	19 2f       	mov	r17, r25
    9b72:	98 7f       	andi	r25, 0xF8	; 248
    9b74:	96 95       	lsr	r25
    9b76:	e9 2f       	mov	r30, r25
    9b78:	96 95       	lsr	r25
    9b7a:	96 95       	lsr	r25
    9b7c:	e9 0f       	add	r30, r25
    9b7e:	ff 27       	eor	r31, r31
    9b80:	e0 5a       	subi	r30, 0xA0	; 160
    9b82:	fe 4f       	sbci	r31, 0xFE	; 254
    9b84:	99 27       	eor	r25, r25
    9b86:	33 27       	eor	r19, r19
    9b88:	ee 24       	eor	r14, r14
    9b8a:	ff 24       	eor	r15, r15
    9b8c:	a7 01       	movw	r20, r14
    9b8e:	e7 01       	movw	r28, r14
    9b90:	05 90       	lpm	r0, Z+
    9b92:	08 94       	sec
    9b94:	07 94       	ror	r0
    9b96:	28 f4       	brcc	.+10     	; 0x9ba2 <__ftoa_engine+0x80>
    9b98:	36 0f       	add	r19, r22
    9b9a:	e7 1e       	adc	r14, r23
    9b9c:	f8 1e       	adc	r15, r24
    9b9e:	49 1f       	adc	r20, r25
    9ba0:	51 1d       	adc	r21, r1
    9ba2:	66 0f       	add	r22, r22
    9ba4:	77 1f       	adc	r23, r23
    9ba6:	88 1f       	adc	r24, r24
    9ba8:	99 1f       	adc	r25, r25
    9baa:	06 94       	lsr	r0
    9bac:	a1 f7       	brne	.-24     	; 0x9b96 <__ftoa_engine+0x74>
    9bae:	05 90       	lpm	r0, Z+
    9bb0:	07 94       	ror	r0
    9bb2:	28 f4       	brcc	.+10     	; 0x9bbe <__ftoa_engine+0x9c>
    9bb4:	e7 0e       	add	r14, r23
    9bb6:	f8 1e       	adc	r15, r24
    9bb8:	49 1f       	adc	r20, r25
    9bba:	56 1f       	adc	r21, r22
    9bbc:	c1 1d       	adc	r28, r1
    9bbe:	77 0f       	add	r23, r23
    9bc0:	88 1f       	adc	r24, r24
    9bc2:	99 1f       	adc	r25, r25
    9bc4:	66 1f       	adc	r22, r22
    9bc6:	06 94       	lsr	r0
    9bc8:	a1 f7       	brne	.-24     	; 0x9bb2 <__ftoa_engine+0x90>
    9bca:	05 90       	lpm	r0, Z+
    9bcc:	07 94       	ror	r0
    9bce:	28 f4       	brcc	.+10     	; 0x9bda <__ftoa_engine+0xb8>
    9bd0:	f8 0e       	add	r15, r24
    9bd2:	49 1f       	adc	r20, r25
    9bd4:	56 1f       	adc	r21, r22
    9bd6:	c7 1f       	adc	r28, r23
    9bd8:	d1 1d       	adc	r29, r1
    9bda:	88 0f       	add	r24, r24
    9bdc:	99 1f       	adc	r25, r25
    9bde:	66 1f       	adc	r22, r22
    9be0:	77 1f       	adc	r23, r23
    9be2:	06 94       	lsr	r0
    9be4:	a1 f7       	brne	.-24     	; 0x9bce <__ftoa_engine+0xac>
    9be6:	05 90       	lpm	r0, Z+
    9be8:	07 94       	ror	r0
    9bea:	20 f4       	brcc	.+8      	; 0x9bf4 <__ftoa_engine+0xd2>
    9bec:	49 0f       	add	r20, r25
    9bee:	56 1f       	adc	r21, r22
    9bf0:	c7 1f       	adc	r28, r23
    9bf2:	d8 1f       	adc	r29, r24
    9bf4:	99 0f       	add	r25, r25
    9bf6:	66 1f       	adc	r22, r22
    9bf8:	77 1f       	adc	r23, r23
    9bfa:	88 1f       	adc	r24, r24
    9bfc:	06 94       	lsr	r0
    9bfe:	a9 f7       	brne	.-22     	; 0x9bea <__ftoa_engine+0xc8>
    9c00:	84 91       	lpm	r24, Z
    9c02:	10 95       	com	r17
    9c04:	17 70       	andi	r17, 0x07	; 7
    9c06:	41 f0       	breq	.+16     	; 0x9c18 <__ftoa_engine+0xf6>
    9c08:	d6 95       	lsr	r29
    9c0a:	c7 95       	ror	r28
    9c0c:	57 95       	ror	r21
    9c0e:	47 95       	ror	r20
    9c10:	f7 94       	ror	r15
    9c12:	e7 94       	ror	r14
    9c14:	1a 95       	dec	r17
    9c16:	c1 f7       	brne	.-16     	; 0x9c08 <__ftoa_engine+0xe6>
    9c18:	e6 e0       	ldi	r30, 0x06	; 6
    9c1a:	f1 e0       	ldi	r31, 0x01	; 1
    9c1c:	68 94       	set
    9c1e:	15 90       	lpm	r1, Z+
    9c20:	15 91       	lpm	r17, Z+
    9c22:	35 91       	lpm	r19, Z+
    9c24:	65 91       	lpm	r22, Z+
    9c26:	95 91       	lpm	r25, Z+
    9c28:	05 90       	lpm	r0, Z+
    9c2a:	7f e2       	ldi	r23, 0x2F	; 47
    9c2c:	73 95       	inc	r23
    9c2e:	e1 18       	sub	r14, r1
    9c30:	f1 0a       	sbc	r15, r17
    9c32:	43 0b       	sbc	r20, r19
    9c34:	56 0b       	sbc	r21, r22
    9c36:	c9 0b       	sbc	r28, r25
    9c38:	d0 09       	sbc	r29, r0
    9c3a:	c0 f7       	brcc	.-16     	; 0x9c2c <__ftoa_engine+0x10a>
    9c3c:	e1 0c       	add	r14, r1
    9c3e:	f1 1e       	adc	r15, r17
    9c40:	43 1f       	adc	r20, r19
    9c42:	56 1f       	adc	r21, r22
    9c44:	c9 1f       	adc	r28, r25
    9c46:	d0 1d       	adc	r29, r0
    9c48:	7e f4       	brtc	.+30     	; 0x9c68 <__ftoa_engine+0x146>
    9c4a:	70 33       	cpi	r23, 0x30	; 48
    9c4c:	11 f4       	brne	.+4      	; 0x9c52 <__ftoa_engine+0x130>
    9c4e:	8a 95       	dec	r24
    9c50:	e6 cf       	rjmp	.-52     	; 0x9c1e <__ftoa_engine+0xfc>
    9c52:	e8 94       	clt
    9c54:	01 50       	subi	r16, 0x01	; 1
    9c56:	30 f0       	brcs	.+12     	; 0x9c64 <__ftoa_engine+0x142>
    9c58:	08 0f       	add	r16, r24
    9c5a:	0a f4       	brpl	.+2      	; 0x9c5e <__ftoa_engine+0x13c>
    9c5c:	00 27       	eor	r16, r16
    9c5e:	02 17       	cp	r16, r18
    9c60:	08 f4       	brcc	.+2      	; 0x9c64 <__ftoa_engine+0x142>
    9c62:	20 2f       	mov	r18, r16
    9c64:	23 95       	inc	r18
    9c66:	02 2f       	mov	r16, r18
    9c68:	7a 33       	cpi	r23, 0x3A	; 58
    9c6a:	28 f0       	brcs	.+10     	; 0x9c76 <__ftoa_engine+0x154>
    9c6c:	79 e3       	ldi	r23, 0x39	; 57
    9c6e:	7d 93       	st	X+, r23
    9c70:	2a 95       	dec	r18
    9c72:	e9 f7       	brne	.-6      	; 0x9c6e <__ftoa_engine+0x14c>
    9c74:	10 c0       	rjmp	.+32     	; 0x9c96 <__ftoa_engine+0x174>
    9c76:	7d 93       	st	X+, r23
    9c78:	2a 95       	dec	r18
    9c7a:	89 f6       	brne	.-94     	; 0x9c1e <__ftoa_engine+0xfc>
    9c7c:	06 94       	lsr	r0
    9c7e:	97 95       	ror	r25
    9c80:	67 95       	ror	r22
    9c82:	37 95       	ror	r19
    9c84:	17 95       	ror	r17
    9c86:	17 94       	ror	r1
    9c88:	e1 18       	sub	r14, r1
    9c8a:	f1 0a       	sbc	r15, r17
    9c8c:	43 0b       	sbc	r20, r19
    9c8e:	56 0b       	sbc	r21, r22
    9c90:	c9 0b       	sbc	r28, r25
    9c92:	d0 09       	sbc	r29, r0
    9c94:	98 f0       	brcs	.+38     	; 0x9cbc <__ftoa_engine+0x19a>
    9c96:	23 95       	inc	r18
    9c98:	7e 91       	ld	r23, -X
    9c9a:	73 95       	inc	r23
    9c9c:	7a 33       	cpi	r23, 0x3A	; 58
    9c9e:	08 f0       	brcs	.+2      	; 0x9ca2 <__ftoa_engine+0x180>
    9ca0:	70 e3       	ldi	r23, 0x30	; 48
    9ca2:	7c 93       	st	X, r23
    9ca4:	20 13       	cpse	r18, r16
    9ca6:	b8 f7       	brcc	.-18     	; 0x9c96 <__ftoa_engine+0x174>
    9ca8:	7e 91       	ld	r23, -X
    9caa:	70 61       	ori	r23, 0x10	; 16
    9cac:	7d 93       	st	X+, r23
    9cae:	30 f0       	brcs	.+12     	; 0x9cbc <__ftoa_engine+0x19a>
    9cb0:	83 95       	inc	r24
    9cb2:	71 e3       	ldi	r23, 0x31	; 49
    9cb4:	7d 93       	st	X+, r23
    9cb6:	70 e3       	ldi	r23, 0x30	; 48
    9cb8:	2a 95       	dec	r18
    9cba:	e1 f7       	brne	.-8      	; 0x9cb4 <__ftoa_engine+0x192>
    9cbc:	11 24       	eor	r1, r1
    9cbe:	ef 90       	pop	r14
    9cc0:	ff 90       	pop	r15
    9cc2:	0f 91       	pop	r16
    9cc4:	1f 91       	pop	r17
    9cc6:	cf 91       	pop	r28
    9cc8:	df 91       	pop	r29
    9cca:	99 27       	eor	r25, r25
    9ccc:	87 fd       	sbrc	r24, 7
    9cce:	90 95       	com	r25
    9cd0:	08 95       	ret

00009cd2 <strchr_P>:
    9cd2:	fc 01       	movw	r30, r24
    9cd4:	05 90       	lpm	r0, Z+
    9cd6:	06 16       	cp	r0, r22
    9cd8:	21 f0       	breq	.+8      	; 0x9ce2 <strchr_P+0x10>
    9cda:	00 20       	and	r0, r0
    9cdc:	d9 f7       	brne	.-10     	; 0x9cd4 <strchr_P+0x2>
    9cde:	c0 01       	movw	r24, r0
    9ce0:	08 95       	ret
    9ce2:	31 97       	sbiw	r30, 0x01	; 1
    9ce4:	cf 01       	movw	r24, r30
    9ce6:	08 95       	ret

00009ce8 <strnlen_P>:
    9ce8:	fc 01       	movw	r30, r24
    9cea:	05 90       	lpm	r0, Z+
    9cec:	61 50       	subi	r22, 0x01	; 1
    9cee:	70 40       	sbci	r23, 0x00	; 0
    9cf0:	01 10       	cpse	r0, r1
    9cf2:	d8 f7       	brcc	.-10     	; 0x9cea <strnlen_P+0x2>
    9cf4:	80 95       	com	r24
    9cf6:	90 95       	com	r25
    9cf8:	8e 0f       	add	r24, r30
    9cfa:	9f 1f       	adc	r25, r31
    9cfc:	08 95       	ret

00009cfe <strnlen>:
    9cfe:	fc 01       	movw	r30, r24
    9d00:	61 50       	subi	r22, 0x01	; 1
    9d02:	70 40       	sbci	r23, 0x00	; 0
    9d04:	01 90       	ld	r0, Z+
    9d06:	01 10       	cpse	r0, r1
    9d08:	d8 f7       	brcc	.-10     	; 0x9d00 <strnlen+0x2>
    9d0a:	80 95       	com	r24
    9d0c:	90 95       	com	r25
    9d0e:	8e 0f       	add	r24, r30
    9d10:	9f 1f       	adc	r25, r31
    9d12:	08 95       	ret

00009d14 <strrev>:
    9d14:	dc 01       	movw	r26, r24
    9d16:	fc 01       	movw	r30, r24
    9d18:	67 2f       	mov	r22, r23
    9d1a:	71 91       	ld	r23, Z+
    9d1c:	77 23       	and	r23, r23
    9d1e:	e1 f7       	brne	.-8      	; 0x9d18 <strrev+0x4>
    9d20:	32 97       	sbiw	r30, 0x02	; 2
    9d22:	04 c0       	rjmp	.+8      	; 0x9d2c <strrev+0x18>
    9d24:	7c 91       	ld	r23, X
    9d26:	6d 93       	st	X+, r22
    9d28:	70 83       	st	Z, r23
    9d2a:	62 91       	ld	r22, -Z
    9d2c:	ae 17       	cp	r26, r30
    9d2e:	bf 07       	cpc	r27, r31
    9d30:	c8 f3       	brcs	.-14     	; 0x9d24 <strrev+0x10>
    9d32:	08 95       	ret

00009d34 <fputc>:
    9d34:	0f 93       	push	r16
    9d36:	1f 93       	push	r17
    9d38:	cf 93       	push	r28
    9d3a:	df 93       	push	r29
    9d3c:	fb 01       	movw	r30, r22
    9d3e:	23 81       	ldd	r18, Z+3	; 0x03
    9d40:	21 fd       	sbrc	r18, 1
    9d42:	03 c0       	rjmp	.+6      	; 0x9d4a <fputc+0x16>
    9d44:	8f ef       	ldi	r24, 0xFF	; 255
    9d46:	9f ef       	ldi	r25, 0xFF	; 255
    9d48:	2c c0       	rjmp	.+88     	; 0x9da2 <fputc+0x6e>
    9d4a:	22 ff       	sbrs	r18, 2
    9d4c:	16 c0       	rjmp	.+44     	; 0x9d7a <fputc+0x46>
    9d4e:	46 81       	ldd	r20, Z+6	; 0x06
    9d50:	57 81       	ldd	r21, Z+7	; 0x07
    9d52:	24 81       	ldd	r18, Z+4	; 0x04
    9d54:	35 81       	ldd	r19, Z+5	; 0x05
    9d56:	42 17       	cp	r20, r18
    9d58:	53 07       	cpc	r21, r19
    9d5a:	44 f4       	brge	.+16     	; 0x9d6c <fputc+0x38>
    9d5c:	a0 81       	ld	r26, Z
    9d5e:	b1 81       	ldd	r27, Z+1	; 0x01
    9d60:	9d 01       	movw	r18, r26
    9d62:	2f 5f       	subi	r18, 0xFF	; 255
    9d64:	3f 4f       	sbci	r19, 0xFF	; 255
    9d66:	31 83       	std	Z+1, r19	; 0x01
    9d68:	20 83       	st	Z, r18
    9d6a:	8c 93       	st	X, r24
    9d6c:	26 81       	ldd	r18, Z+6	; 0x06
    9d6e:	37 81       	ldd	r19, Z+7	; 0x07
    9d70:	2f 5f       	subi	r18, 0xFF	; 255
    9d72:	3f 4f       	sbci	r19, 0xFF	; 255
    9d74:	37 83       	std	Z+7, r19	; 0x07
    9d76:	26 83       	std	Z+6, r18	; 0x06
    9d78:	14 c0       	rjmp	.+40     	; 0x9da2 <fputc+0x6e>
    9d7a:	8b 01       	movw	r16, r22
    9d7c:	ec 01       	movw	r28, r24
    9d7e:	fb 01       	movw	r30, r22
    9d80:	00 84       	ldd	r0, Z+8	; 0x08
    9d82:	f1 85       	ldd	r31, Z+9	; 0x09
    9d84:	e0 2d       	mov	r30, r0
    9d86:	09 95       	icall
    9d88:	89 2b       	or	r24, r25
    9d8a:	e1 f6       	brne	.-72     	; 0x9d44 <fputc+0x10>
    9d8c:	d8 01       	movw	r26, r16
    9d8e:	16 96       	adiw	r26, 0x06	; 6
    9d90:	8d 91       	ld	r24, X+
    9d92:	9c 91       	ld	r25, X
    9d94:	17 97       	sbiw	r26, 0x07	; 7
    9d96:	01 96       	adiw	r24, 0x01	; 1
    9d98:	17 96       	adiw	r26, 0x07	; 7
    9d9a:	9c 93       	st	X, r25
    9d9c:	8e 93       	st	-X, r24
    9d9e:	16 97       	sbiw	r26, 0x06	; 6
    9da0:	ce 01       	movw	r24, r28
    9da2:	df 91       	pop	r29
    9da4:	cf 91       	pop	r28
    9da6:	1f 91       	pop	r17
    9da8:	0f 91       	pop	r16
    9daa:	08 95       	ret

00009dac <ungetc>:
    9dac:	fb 01       	movw	r30, r22
    9dae:	23 81       	ldd	r18, Z+3	; 0x03
    9db0:	20 ff       	sbrs	r18, 0
    9db2:	12 c0       	rjmp	.+36     	; 0x9dd8 <ungetc+0x2c>
    9db4:	26 fd       	sbrc	r18, 6
    9db6:	10 c0       	rjmp	.+32     	; 0x9dd8 <ungetc+0x2c>
    9db8:	8f 3f       	cpi	r24, 0xFF	; 255
    9dba:	3f ef       	ldi	r19, 0xFF	; 255
    9dbc:	93 07       	cpc	r25, r19
    9dbe:	61 f0       	breq	.+24     	; 0x9dd8 <ungetc+0x2c>
    9dc0:	82 83       	std	Z+2, r24	; 0x02
    9dc2:	2f 7d       	andi	r18, 0xDF	; 223
    9dc4:	20 64       	ori	r18, 0x40	; 64
    9dc6:	23 83       	std	Z+3, r18	; 0x03
    9dc8:	26 81       	ldd	r18, Z+6	; 0x06
    9dca:	37 81       	ldd	r19, Z+7	; 0x07
    9dcc:	21 50       	subi	r18, 0x01	; 1
    9dce:	31 09       	sbc	r19, r1
    9dd0:	37 83       	std	Z+7, r19	; 0x07
    9dd2:	26 83       	std	Z+6, r18	; 0x06
    9dd4:	99 27       	eor	r25, r25
    9dd6:	08 95       	ret
    9dd8:	8f ef       	ldi	r24, 0xFF	; 255
    9dda:	9f ef       	ldi	r25, 0xFF	; 255
    9ddc:	08 95       	ret

00009dde <__ultoa_invert>:
    9dde:	fa 01       	movw	r30, r20
    9de0:	aa 27       	eor	r26, r26
    9de2:	28 30       	cpi	r18, 0x08	; 8
    9de4:	51 f1       	breq	.+84     	; 0x9e3a <__ultoa_invert+0x5c>
    9de6:	20 31       	cpi	r18, 0x10	; 16
    9de8:	81 f1       	breq	.+96     	; 0x9e4a <__ultoa_invert+0x6c>
    9dea:	e8 94       	clt
    9dec:	6f 93       	push	r22
    9dee:	6e 7f       	andi	r22, 0xFE	; 254
    9df0:	6e 5f       	subi	r22, 0xFE	; 254
    9df2:	7f 4f       	sbci	r23, 0xFF	; 255
    9df4:	8f 4f       	sbci	r24, 0xFF	; 255
    9df6:	9f 4f       	sbci	r25, 0xFF	; 255
    9df8:	af 4f       	sbci	r26, 0xFF	; 255
    9dfa:	b1 e0       	ldi	r27, 0x01	; 1
    9dfc:	3e d0       	rcall	.+124    	; 0x9e7a <__ultoa_invert+0x9c>
    9dfe:	b4 e0       	ldi	r27, 0x04	; 4
    9e00:	3c d0       	rcall	.+120    	; 0x9e7a <__ultoa_invert+0x9c>
    9e02:	67 0f       	add	r22, r23
    9e04:	78 1f       	adc	r23, r24
    9e06:	89 1f       	adc	r24, r25
    9e08:	9a 1f       	adc	r25, r26
    9e0a:	a1 1d       	adc	r26, r1
    9e0c:	68 0f       	add	r22, r24
    9e0e:	79 1f       	adc	r23, r25
    9e10:	8a 1f       	adc	r24, r26
    9e12:	91 1d       	adc	r25, r1
    9e14:	a1 1d       	adc	r26, r1
    9e16:	6a 0f       	add	r22, r26
    9e18:	71 1d       	adc	r23, r1
    9e1a:	81 1d       	adc	r24, r1
    9e1c:	91 1d       	adc	r25, r1
    9e1e:	a1 1d       	adc	r26, r1
    9e20:	20 d0       	rcall	.+64     	; 0x9e62 <__ultoa_invert+0x84>
    9e22:	09 f4       	brne	.+2      	; 0x9e26 <__ultoa_invert+0x48>
    9e24:	68 94       	set
    9e26:	3f 91       	pop	r19
    9e28:	2a e0       	ldi	r18, 0x0A	; 10
    9e2a:	26 9f       	mul	r18, r22
    9e2c:	11 24       	eor	r1, r1
    9e2e:	30 19       	sub	r19, r0
    9e30:	30 5d       	subi	r19, 0xD0	; 208
    9e32:	31 93       	st	Z+, r19
    9e34:	de f6       	brtc	.-74     	; 0x9dec <__ultoa_invert+0xe>
    9e36:	cf 01       	movw	r24, r30
    9e38:	08 95       	ret
    9e3a:	46 2f       	mov	r20, r22
    9e3c:	47 70       	andi	r20, 0x07	; 7
    9e3e:	40 5d       	subi	r20, 0xD0	; 208
    9e40:	41 93       	st	Z+, r20
    9e42:	b3 e0       	ldi	r27, 0x03	; 3
    9e44:	0f d0       	rcall	.+30     	; 0x9e64 <__ultoa_invert+0x86>
    9e46:	c9 f7       	brne	.-14     	; 0x9e3a <__ultoa_invert+0x5c>
    9e48:	f6 cf       	rjmp	.-20     	; 0x9e36 <__ultoa_invert+0x58>
    9e4a:	46 2f       	mov	r20, r22
    9e4c:	4f 70       	andi	r20, 0x0F	; 15
    9e4e:	40 5d       	subi	r20, 0xD0	; 208
    9e50:	4a 33       	cpi	r20, 0x3A	; 58
    9e52:	18 f0       	brcs	.+6      	; 0x9e5a <__ultoa_invert+0x7c>
    9e54:	49 5d       	subi	r20, 0xD9	; 217
    9e56:	31 fd       	sbrc	r19, 1
    9e58:	40 52       	subi	r20, 0x20	; 32
    9e5a:	41 93       	st	Z+, r20
    9e5c:	02 d0       	rcall	.+4      	; 0x9e62 <__ultoa_invert+0x84>
    9e5e:	a9 f7       	brne	.-22     	; 0x9e4a <__ultoa_invert+0x6c>
    9e60:	ea cf       	rjmp	.-44     	; 0x9e36 <__ultoa_invert+0x58>
    9e62:	b4 e0       	ldi	r27, 0x04	; 4
    9e64:	a6 95       	lsr	r26
    9e66:	97 95       	ror	r25
    9e68:	87 95       	ror	r24
    9e6a:	77 95       	ror	r23
    9e6c:	67 95       	ror	r22
    9e6e:	ba 95       	dec	r27
    9e70:	c9 f7       	brne	.-14     	; 0x9e64 <__ultoa_invert+0x86>
    9e72:	00 97       	sbiw	r24, 0x00	; 0
    9e74:	61 05       	cpc	r22, r1
    9e76:	71 05       	cpc	r23, r1
    9e78:	08 95       	ret
    9e7a:	9b 01       	movw	r18, r22
    9e7c:	ac 01       	movw	r20, r24
    9e7e:	0a 2e       	mov	r0, r26
    9e80:	06 94       	lsr	r0
    9e82:	57 95       	ror	r21
    9e84:	47 95       	ror	r20
    9e86:	37 95       	ror	r19
    9e88:	27 95       	ror	r18
    9e8a:	ba 95       	dec	r27
    9e8c:	c9 f7       	brne	.-14     	; 0x9e80 <__ultoa_invert+0xa2>
    9e8e:	62 0f       	add	r22, r18
    9e90:	73 1f       	adc	r23, r19
    9e92:	84 1f       	adc	r24, r20
    9e94:	95 1f       	adc	r25, r21
    9e96:	a0 1d       	adc	r26, r0
    9e98:	08 95       	ret

00009e9a <eeprom_read_block>:
    9e9a:	dc 01       	movw	r26, r24
    9e9c:	cb 01       	movw	r24, r22

00009e9e <eeprom_read_blraw>:
    9e9e:	fc 01       	movw	r30, r24
    9ea0:	f9 99       	sbic	0x1f, 1	; 31
    9ea2:	fe cf       	rjmp	.-4      	; 0x9ea0 <eeprom_read_blraw+0x2>
    9ea4:	06 c0       	rjmp	.+12     	; 0x9eb2 <eeprom_read_blraw+0x14>
    9ea6:	f2 bd       	out	0x22, r31	; 34
    9ea8:	e1 bd       	out	0x21, r30	; 33
    9eaa:	f8 9a       	sbi	0x1f, 0	; 31
    9eac:	31 96       	adiw	r30, 0x01	; 1
    9eae:	00 b4       	in	r0, 0x20	; 32
    9eb0:	0d 92       	st	X+, r0
    9eb2:	41 50       	subi	r20, 0x01	; 1
    9eb4:	50 40       	sbci	r21, 0x00	; 0
    9eb6:	b8 f7       	brcc	.-18     	; 0x9ea6 <eeprom_read_blraw+0x8>
    9eb8:	08 95       	ret

00009eba <eeprom_read_byte>:
    9eba:	f9 99       	sbic	0x1f, 1	; 31
    9ebc:	fe cf       	rjmp	.-4      	; 0x9eba <eeprom_read_byte>
    9ebe:	92 bd       	out	0x22, r25	; 34
    9ec0:	81 bd       	out	0x21, r24	; 33
    9ec2:	f8 9a       	sbi	0x1f, 0	; 31
    9ec4:	99 27       	eor	r25, r25
    9ec6:	80 b5       	in	r24, 0x20	; 32
    9ec8:	08 95       	ret

00009eca <eeprom_read_dword>:
    9eca:	a6 e1       	ldi	r26, 0x16	; 22
    9ecc:	b0 e0       	ldi	r27, 0x00	; 0
    9ece:	44 e0       	ldi	r20, 0x04	; 4
    9ed0:	50 e0       	ldi	r21, 0x00	; 0
    9ed2:	e5 cf       	rjmp	.-54     	; 0x9e9e <eeprom_read_blraw>

00009ed4 <eeprom_read_word>:
    9ed4:	a8 e1       	ldi	r26, 0x18	; 24
    9ed6:	b0 e0       	ldi	r27, 0x00	; 0
    9ed8:	42 e0       	ldi	r20, 0x02	; 2
    9eda:	50 e0       	ldi	r21, 0x00	; 0
    9edc:	e0 cf       	rjmp	.-64     	; 0x9e9e <eeprom_read_blraw>

00009ede <eeprom_write_block>:
    9ede:	dc 01       	movw	r26, r24
    9ee0:	cb 01       	movw	r24, r22
    9ee2:	02 c0       	rjmp	.+4      	; 0x9ee8 <eeprom_write_block+0xa>
    9ee4:	2d 91       	ld	r18, X+
    9ee6:	05 d0       	rcall	.+10     	; 0x9ef2 <eeprom_write_r18>
    9ee8:	41 50       	subi	r20, 0x01	; 1
    9eea:	50 40       	sbci	r21, 0x00	; 0
    9eec:	d8 f7       	brcc	.-10     	; 0x9ee4 <eeprom_write_block+0x6>
    9eee:	08 95       	ret

00009ef0 <eeprom_write_byte>:
    9ef0:	26 2f       	mov	r18, r22

00009ef2 <eeprom_write_r18>:
    9ef2:	f9 99       	sbic	0x1f, 1	; 31
    9ef4:	fe cf       	rjmp	.-4      	; 0x9ef2 <eeprom_write_r18>
    9ef6:	1f ba       	out	0x1f, r1	; 31
    9ef8:	92 bd       	out	0x22, r25	; 34
    9efa:	81 bd       	out	0x21, r24	; 33
    9efc:	20 bd       	out	0x20, r18	; 32
    9efe:	0f b6       	in	r0, 0x3f	; 63
    9f00:	f8 94       	cli
    9f02:	fa 9a       	sbi	0x1f, 2	; 31
    9f04:	f9 9a       	sbi	0x1f, 1	; 31
    9f06:	0f be       	out	0x3f, r0	; 63
    9f08:	01 96       	adiw	r24, 0x01	; 1
    9f0a:	08 95       	ret

00009f0c <eeprom_write_dword>:
    9f0c:	24 2f       	mov	r18, r20
    9f0e:	f1 df       	rcall	.-30     	; 0x9ef2 <eeprom_write_r18>
    9f10:	25 2f       	mov	r18, r21
    9f12:	ef df       	rcall	.-34     	; 0x9ef2 <eeprom_write_r18>
    9f14:	00 c0       	rjmp	.+0      	; 0x9f16 <eeprom_write_word>

00009f16 <eeprom_write_word>:
    9f16:	ec df       	rcall	.-40     	; 0x9ef0 <eeprom_write_byte>
    9f18:	27 2f       	mov	r18, r23
    9f1a:	eb cf       	rjmp	.-42     	; 0x9ef2 <eeprom_write_r18>

00009f1c <_exit>:
    9f1c:	f8 94       	cli

00009f1e <__stop_program>:
    9f1e:	ff cf       	rjmp	.-2      	; 0x9f1e <__stop_program>
