
Meteorological Station.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000198  00800100  000072c4  00007358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000072c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004e5  00800298  00800298  000074f0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000074f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000754c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000670  00000000  00000000  00007588  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008fba  00000000  00000000  00007bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000214b  00000000  00000000  00010bb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005245  00000000  00000000  00012cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001430  00000000  00000000  00017f44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001907  00000000  00000000  00019374  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009f4a  00000000  00000000  0001ac7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005d0  00000000  00000000  00024bc5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__ctors_end>
       4:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
       8:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
       c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      10:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      14:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      18:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      1c:	0c 94 6d 0f 	jmp	0x1eda	; 0x1eda <__vector_7>
      20:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      24:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      28:	0c 94 91 28 	jmp	0x5122	; 0x5122 <__vector_10>
      2c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      30:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      34:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      38:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      3c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      40:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      44:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      48:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      4c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      50:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      54:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      58:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      5c:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      60:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      64:	0c 94 92 01 	jmp	0x324	; 0x324 <__bad_interrupt>
      68:	de 24       	eor	r13, r14
      6a:	e6 24       	eor	r14, r6
      6c:	47 26       	eor	r4, r23
      6e:	58 25       	eor	r21, r8
      70:	47 26       	eor	r4, r23
      72:	47 26       	eor	r4, r23
      74:	47 26       	eor	r4, r23
      76:	40 26       	eor	r4, r16
      78:	47 26       	eor	r4, r23
      7a:	47 26       	eor	r4, r23
      7c:	47 26       	eor	r4, r23
      7e:	47 26       	eor	r4, r23
      80:	47 26       	eor	r4, r23
      82:	47 26       	eor	r4, r23
      84:	47 26       	eor	r4, r23
      86:	47 26       	eor	r4, r23
      88:	47 26       	eor	r4, r23
      8a:	47 26       	eor	r4, r23
      8c:	47 26       	eor	r4, r23
      8e:	47 26       	eor	r4, r23
      90:	47 26       	eor	r4, r23
      92:	47 26       	eor	r4, r23
      94:	47 26       	eor	r4, r23
      96:	47 26       	eor	r4, r23
      98:	47 26       	eor	r4, r23
      9a:	47 26       	eor	r4, r23
      9c:	47 26       	eor	r4, r23
      9e:	47 26       	eor	r4, r23
      a0:	47 26       	eor	r4, r23
      a2:	47 26       	eor	r4, r23
      a4:	47 26       	eor	r4, r23
      a6:	47 26       	eor	r4, r23
      a8:	47 26       	eor	r4, r23
      aa:	47 26       	eor	r4, r23
      ac:	47 26       	eor	r4, r23
      ae:	47 26       	eor	r4, r23
      b0:	47 26       	eor	r4, r23
      b2:	47 26       	eor	r4, r23
      b4:	47 26       	eor	r4, r23
      b6:	47 26       	eor	r4, r23
      b8:	47 26       	eor	r4, r23
      ba:	47 26       	eor	r4, r23
      bc:	47 26       	eor	r4, r23
      be:	47 26       	eor	r4, r23
      c0:	47 26       	eor	r4, r23
      c2:	47 26       	eor	r4, r23
      c4:	47 26       	eor	r4, r23
      c6:	47 26       	eor	r4, r23
      c8:	47 26       	eor	r4, r23
      ca:	47 26       	eor	r4, r23
      cc:	e9 25       	eor	r30, r9
      ce:	ef 25       	eor	r30, r15
      d0:	02 26       	eor	r0, r18
      d2:	15 26       	eor	r1, r21
      d4:	2b 26       	eor	r2, r27

000000d6 <__trampolines_end>:
      d6:	63 64       	ori	r22, 0x43	; 67
      d8:	69 6e       	ori	r22, 0xE9	; 233
      da:	6f 70       	andi	r22, 0x0F	; 15
      dc:	73 75       	andi	r23, 0x53	; 83
      de:	78 58       	subi	r23, 0x88	; 136
      e0:	5b 00       	.word	0x005b	; ????
      e2:	00 40       	sbci	r16, 0x00	; 0
      e4:	7a 10       	cpse	r7, r10
      e6:	f3 5a       	subi	r31, 0xA3	; 163
      e8:	00 a0       	ldd	r0, Z+32	; 0x20
      ea:	72 4e       	sbci	r23, 0xE2	; 226
      ec:	18 09       	sbc	r17, r8
      ee:	00 10       	cpse	r0, r0
      f0:	a5 d4       	rcall	.+2378   	; 0xa3c <udp_client_check_for_dns_answer+0xac>
      f2:	e8 00       	.word	0x00e8	; ????
      f4:	00 e8       	ldi	r16, 0x80	; 128
      f6:	76 48       	sbci	r23, 0x86	; 134
      f8:	17 00       	.word	0x0017	; ????
      fa:	00 e4       	ldi	r16, 0x40	; 64
      fc:	0b 54       	subi	r16, 0x4B	; 75
      fe:	02 00       	.word	0x0002	; ????
     100:	00 ca       	rjmp	.-3072   	; 0xfffff502 <__eeprom_end+0xff7ef502>
     102:	9a 3b       	cpi	r25, 0xBA	; 186
     104:	00 00       	nop
     106:	00 e1       	ldi	r16, 0x10	; 16
     108:	f5 05       	cpc	r31, r5
     10a:	00 00       	nop
     10c:	80 96       	adiw	r24, 0x20	; 32
     10e:	98 00       	.word	0x0098	; ????
     110:	00 00       	nop
     112:	40 42       	sbci	r20, 0x20	; 32
     114:	0f 00       	.word	0x000f	; ????
     116:	00 00       	nop
     118:	a0 86       	std	Z+8, r10	; 0x08
     11a:	01 00       	.word	0x0001	; ????
     11c:	00 00       	nop
     11e:	10 27       	eor	r17, r16
     120:	00 00       	nop
     122:	00 00       	nop
     124:	e8 03       	fmulsu	r22, r16
     126:	00 00       	nop
     128:	00 00       	nop
     12a:	64 00       	.word	0x0064	; ????
     12c:	00 00       	nop
     12e:	00 00       	nop
     130:	0a 00       	.word	0x000a	; ????
     132:	00 00       	nop
     134:	00 00       	nop
     136:	01 00       	.word	0x0001	; ????
     138:	00 00       	nop
     13a:	00 00       	nop
     13c:	2c 76       	andi	r18, 0x6C	; 108
     13e:	d8 88       	ldd	r13, Y+16	; 0x10
     140:	dc 67       	ori	r29, 0x7C	; 124
     142:	4f 08       	sbc	r4, r15
     144:	23 df       	rcall	.-442    	; 0xffffff8c <__eeprom_end+0xff7eff8c>
     146:	c1 df       	rcall	.-126    	; 0xca <__SREG__+0x8b>
     148:	ae 59       	subi	r26, 0x9E	; 158
     14a:	e1 b1       	in	r30, 0x01	; 1
     14c:	b7 96       	adiw	r30, 0x27	; 39
     14e:	e5 e3       	ldi	r30, 0x35	; 53
     150:	e4 53       	subi	r30, 0x34	; 52
     152:	c6 3a       	cpi	r28, 0xA6	; 166
     154:	e6 51       	subi	r30, 0x16	; 22
     156:	99 76       	andi	r25, 0x69	; 105
     158:	96 e8       	ldi	r25, 0x86	; 134
     15a:	e6 c2       	rjmp	.+1484   	; 0x728 <__LOCK_REGION_LENGTH__+0x328>
     15c:	84 26       	eor	r8, r20
     15e:	eb 89       	ldd	r30, Y+19	; 0x13
     160:	8c 9b       	sbis	0x11, 4	; 17
     162:	62 ed       	ldi	r22, 0xD2	; 210
     164:	40 7c       	andi	r20, 0xC0	; 192
     166:	6f fc       	.word	0xfc6f	; ????
     168:	ef bc       	out	0x2f, r14	; 47
     16a:	9c 9f       	mul	r25, r28
     16c:	40 f2       	brcs	.-112    	; 0xfe <__trampolines_end+0x28>
     16e:	ba a5       	ldd	r27, Y+42	; 0x2a
     170:	6f a5       	ldd	r22, Y+47	; 0x2f
     172:	f4 90       	lpm	r15, Z
     174:	05 5a       	subi	r16, 0xA5	; 165
     176:	2a f7       	brpl	.-54     	; 0x142 <__trampolines_end+0x6c>
     178:	5c 93       	st	X, r21
     17a:	6b 6c       	ori	r22, 0xCB	; 203
     17c:	f9 67       	ori	r31, 0x79	; 121
     17e:	6d c1       	rjmp	.+730    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     180:	1b fc       	.word	0xfc1b	; ????
     182:	e0 e4       	ldi	r30, 0x40	; 64
     184:	0d 47       	sbci	r16, 0x7D	; 125
     186:	fe f5       	brtc	.+126    	; 0x206 <__c.2463+0x2a>
     188:	20 e6       	ldi	r18, 0x60	; 96
     18a:	b5 00       	.word	0x00b5	; ????
     18c:	d0 ed       	ldi	r29, 0xD0	; 208
     18e:	90 2e       	mov	r9, r16
     190:	03 00       	.word	0x0003	; ????
     192:	94 35       	cpi	r25, 0x54	; 84
     194:	77 05       	cpc	r23, r7
     196:	00 80       	ld	r0, Z
     198:	84 1e       	adc	r8, r20
     19a:	08 00       	.word	0x0008	; ????
     19c:	00 20       	and	r0, r0
     19e:	4e 0a       	sbc	r4, r30
     1a0:	00 00       	nop
     1a2:	00 c8       	rjmp	.-4096   	; 0xfffff1a4 <__eeprom_end+0xff7ef1a4>
     1a4:	0c 33       	cpi	r16, 0x3C	; 60
     1a6:	33 33       	cpi	r19, 0x33	; 51
     1a8:	33 0f       	add	r19, r19
     1aa:	98 6e       	ori	r25, 0xE8	; 232
     1ac:	12 83       	std	Z+2, r17	; 0x02
     1ae:	11 41       	sbci	r17, 0x11	; 17
     1b0:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1b2:	21 14       	cp	r2, r1
     1b4:	89 3b       	cpi	r24, 0xB9	; 185
     1b6:	e6 55       	subi	r30, 0x56	; 86
     1b8:	16 cf       	rjmp	.-468    	; 0xffffffe6 <__eeprom_end+0xff7effe6>
     1ba:	fe e6       	ldi	r31, 0x6E	; 110
     1bc:	db 18       	sub	r13, r11
     1be:	d1 84       	ldd	r13, Z+9	; 0x09
     1c0:	4b 38       	cpi	r20, 0x8B	; 139
     1c2:	1b f7       	brvc	.-58     	; 0x18a <__trampolines_end+0xb4>
     1c4:	7c 1d       	adc	r23, r12
     1c6:	90 1d       	adc	r25, r0
     1c8:	a4 bb       	out	0x14, r26	; 20
     1ca:	e4 24       	eor	r14, r4
     1cc:	20 32       	cpi	r18, 0x20	; 32
     1ce:	84 72       	andi	r24, 0x24	; 36
     1d0:	5e 22       	and	r5, r30
     1d2:	81 00       	.word	0x0081	; ????
     1d4:	c9 f1       	breq	.+114    	; 0x248 <__c.2457>
     1d6:	24 ec       	ldi	r18, 0xC4	; 196
     1d8:	a1 e5       	ldi	r26, 0x51	; 81
     1da:	3d 27       	eor	r19, r29

000001dc <__c.2463>:
     1dc:	0d 0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20     ..Content-Type: 
     1ec:	61 70 70 6c 69 63 61 74 69 6f 6e 2f 78 2d 77 77     application/x-ww
     1fc:	77 2d 66 6f 72 6d 2d 75 72 6c 65 6e 63 6f 64 65     w-form-urlencode
     20c:	64 0d 0a 0d 0a 00                                   d.....

00000212 <__c.2461>:
     212:	43 6f 6e 74 65 6e 74 2d 4c 65 6e 67 74 68 3a 20     Content-Length: 
	...

00000223 <__c.2459>:
     223:	0d 0a 55 73 65 72 2d 41 67 65 6e 74 3a 20 74 67     ..User-Agent: tg
     233:	72 2f 31 2e 31 0d 0a 41 63 63 65 70 74 3a 20 2a     r/1.1..Accept: *
     243:	2f 2a 0d 0a 00                                      /*...

00000248 <__c.2457>:
     248:	0d 0a 00                                            ...

0000024b <__c.2455>:
     24b:	20 48 54 54 50 2f 31 2e 31 0d 0a 48 6f 73 74 3a      HTTP/1.1..Host:
     25b:	20 00                                                .

0000025d <__c.2453>:
     25d:	50 4f 53 54 20 00                                   POST .

00000263 <__c.2451>:
     263:	0d 0a 55 73 65 72 2d 41 67 65 6e 74 3a 20 74 67     ..User-Agent: tg
     273:	72 2f 31 2e 31 0d 0a 41 63 63 65 70 74 3a 20 74     r/1.1..Accept: t
     283:	65 78 74 2f 68 74 6d 6c 0d 0a 0d 0a 00              ext/html.....

00000290 <__c.2449>:
     290:	20 48 54 54 50 2f 31 2e 31 0d 0a 48 6f 73 74 3a      HTTP/1.1..Host:
     2a0:	20 00                                                .

000002a2 <__c.2447>:
     2a2:	47 45 54 20 00                                      GET .

000002a7 <arpreqhdr>:
     2a7:	00 01 08 00 06 04 00 01                             ........

000002af <iphdr>:
     2af:	45 00 00 82 00 00 40 00 20                          E.....@. 

000002b8 <__c.2778>:
     2b8:	43 61 6c 69 62 72 61 74 69 6f 6e 20 63 6f 6d 70     Calibration comp
     2c8:	6c 65 74 65 21 00                                   lete!.

000002ce <__c.2773>:
     2ce:	43 61 6c 69 62 72 61 74 69 6f 6e 20 73 74 61 72     Calibration star
     2de:	74 65 64 21 00                                      ted!.

000002e3 <__c.2786>:
     2e3:	48 65 6c 6c 6f 00 00                                Hello..

000002ea <__ctors_end>:
     2ea:	11 24       	eor	r1, r1
     2ec:	1f be       	out	0x3f, r1	; 63
     2ee:	cf ef       	ldi	r28, 0xFF	; 255
     2f0:	d8 e0       	ldi	r29, 0x08	; 8
     2f2:	de bf       	out	0x3e, r29	; 62
     2f4:	cd bf       	out	0x3d, r28	; 61

000002f6 <__do_copy_data>:
     2f6:	12 e0       	ldi	r17, 0x02	; 2
     2f8:	a0 e0       	ldi	r26, 0x00	; 0
     2fa:	b1 e0       	ldi	r27, 0x01	; 1
     2fc:	e4 ec       	ldi	r30, 0xC4	; 196
     2fe:	f2 e7       	ldi	r31, 0x72	; 114
     300:	02 c0       	rjmp	.+4      	; 0x306 <__do_copy_data+0x10>
     302:	05 90       	lpm	r0, Z+
     304:	0d 92       	st	X+, r0
     306:	a8 39       	cpi	r26, 0x98	; 152
     308:	b1 07       	cpc	r27, r17
     30a:	d9 f7       	brne	.-10     	; 0x302 <__do_copy_data+0xc>

0000030c <__do_clear_bss>:
     30c:	27 e0       	ldi	r18, 0x07	; 7
     30e:	a8 e9       	ldi	r26, 0x98	; 152
     310:	b2 e0       	ldi	r27, 0x02	; 2
     312:	01 c0       	rjmp	.+2      	; 0x316 <.do_clear_bss_start>

00000314 <.do_clear_bss_loop>:
     314:	1d 92       	st	X+, r1

00000316 <.do_clear_bss_start>:
     316:	ad 37       	cpi	r26, 0x7D	; 125
     318:	b2 07       	cpc	r27, r18
     31a:	e1 f7       	brne	.-8      	; 0x314 <.do_clear_bss_loop>
     31c:	0e 94 ce 28 	call	0x519c	; 0x519c <main>
     320:	0c 94 60 39 	jmp	0x72c0	; 0x72c0 <_exit>

00000324 <__bad_interrupt>:
     324:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000328 <bmp280_init>:

	p = ((p + var1 + var2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
	return (float)p / 256;
}

void bmp280_init() {
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29
	DDRD |= (1 << BMP_CS);
     32c:	52 9a       	sbi	0x0a, 2	; 10
	PORT_CS &= ~(1<<BMP_CS); // Power On the module
     32e:	5a 98       	cbi	0x0b, 2	; 11
	spi_rwSPI(0b01110100);
     330:	84 e7       	ldi	r24, 0x74	; 116
     332:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <spi_rwSPI>
	spi_rwSPI(0xFF);
     336:	8f ef       	ldi	r24, 0xFF	; 255
     338:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <spi_rwSPI>
	
	spi_rwSPI(0xF4);
     33c:	84 ef       	ldi	r24, 0xF4	; 244
     33e:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <spi_rwSPI>
	spi_rwSPI(0b01010111);
     342:	87 e5       	ldi	r24, 0x57	; 87
     344:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <spi_rwSPI>
	PORT_CS |= (1<<BMP_CS);
     348:	5a 9a       	sbi	0x0b, 2	; 11
#include "BMP280_SPI.h"
#include "../SPI/SPI.h"
#include "../../Options.h"

static void readCalibration() {
	_bmp280_calib.dig_T1 = spi_read16(0x88, BMP_CS);
     34a:	62 e0       	ldi	r22, 0x02	; 2
     34c:	70 e0       	ldi	r23, 0x00	; 0
     34e:	88 e8       	ldi	r24, 0x88	; 136
     350:	0e 94 07 28 	call	0x500e	; 0x500e <spi_read16>
     354:	c7 ef       	ldi	r28, 0xF7	; 247
     356:	d3 e0       	ldi	r29, 0x03	; 3
     358:	99 83       	std	Y+1, r25	; 0x01
     35a:	88 83       	st	Y, r24
	_bmp280_calib.dig_T2 = spi_readS16(0x8A, BMP_CS);
     35c:	62 e0       	ldi	r22, 0x02	; 2
     35e:	70 e0       	ldi	r23, 0x00	; 0
     360:	8a e8       	ldi	r24, 0x8A	; 138
     362:	0e 94 29 28 	call	0x5052	; 0x5052 <spi_readS16>
     366:	9b 83       	std	Y+3, r25	; 0x03
     368:	8a 83       	std	Y+2, r24	; 0x02
	_bmp280_calib.dig_T3 = spi_readS16(0x8C, BMP_CS);
     36a:	62 e0       	ldi	r22, 0x02	; 2
     36c:	70 e0       	ldi	r23, 0x00	; 0
     36e:	8c e8       	ldi	r24, 0x8C	; 140
     370:	0e 94 29 28 	call	0x5052	; 0x5052 <spi_readS16>
     374:	9d 83       	std	Y+5, r25	; 0x05
     376:	8c 83       	std	Y+4, r24	; 0x04

	_bmp280_calib.dig_P1 = spi_read16(0x8E, BMP_CS);
     378:	62 e0       	ldi	r22, 0x02	; 2
     37a:	70 e0       	ldi	r23, 0x00	; 0
     37c:	8e e8       	ldi	r24, 0x8E	; 142
     37e:	0e 94 07 28 	call	0x500e	; 0x500e <spi_read16>
     382:	9f 83       	std	Y+7, r25	; 0x07
     384:	8e 83       	std	Y+6, r24	; 0x06
	_bmp280_calib.dig_P2 = spi_readS16(0x90, BMP_CS);
     386:	62 e0       	ldi	r22, 0x02	; 2
     388:	70 e0       	ldi	r23, 0x00	; 0
     38a:	80 e9       	ldi	r24, 0x90	; 144
     38c:	0e 94 29 28 	call	0x5052	; 0x5052 <spi_readS16>
     390:	99 87       	std	Y+9, r25	; 0x09
     392:	88 87       	std	Y+8, r24	; 0x08
	_bmp280_calib.dig_P3 = spi_readS16(0x92, BMP_CS);
     394:	62 e0       	ldi	r22, 0x02	; 2
     396:	70 e0       	ldi	r23, 0x00	; 0
     398:	82 e9       	ldi	r24, 0x92	; 146
     39a:	0e 94 29 28 	call	0x5052	; 0x5052 <spi_readS16>
     39e:	9b 87       	std	Y+11, r25	; 0x0b
     3a0:	8a 87       	std	Y+10, r24	; 0x0a
	_bmp280_calib.dig_P4 = spi_readS16(0x94, BMP_CS);
     3a2:	62 e0       	ldi	r22, 0x02	; 2
     3a4:	70 e0       	ldi	r23, 0x00	; 0
     3a6:	84 e9       	ldi	r24, 0x94	; 148
     3a8:	0e 94 29 28 	call	0x5052	; 0x5052 <spi_readS16>
     3ac:	9d 87       	std	Y+13, r25	; 0x0d
     3ae:	8c 87       	std	Y+12, r24	; 0x0c
	_bmp280_calib.dig_P5 = spi_readS16(0x96, BMP_CS);
     3b0:	62 e0       	ldi	r22, 0x02	; 2
     3b2:	70 e0       	ldi	r23, 0x00	; 0
     3b4:	86 e9       	ldi	r24, 0x96	; 150
     3b6:	0e 94 29 28 	call	0x5052	; 0x5052 <spi_readS16>
     3ba:	9f 87       	std	Y+15, r25	; 0x0f
     3bc:	8e 87       	std	Y+14, r24	; 0x0e
	_bmp280_calib.dig_P6 = spi_readS16(0x98, BMP_CS);
     3be:	62 e0       	ldi	r22, 0x02	; 2
     3c0:	70 e0       	ldi	r23, 0x00	; 0
     3c2:	88 e9       	ldi	r24, 0x98	; 152
     3c4:	0e 94 29 28 	call	0x5052	; 0x5052 <spi_readS16>
     3c8:	99 8b       	std	Y+17, r25	; 0x11
     3ca:	88 8b       	std	Y+16, r24	; 0x10
	_bmp280_calib.dig_P7 = spi_readS16(0x9A, BMP_CS);
     3cc:	62 e0       	ldi	r22, 0x02	; 2
     3ce:	70 e0       	ldi	r23, 0x00	; 0
     3d0:	8a e9       	ldi	r24, 0x9A	; 154
     3d2:	0e 94 29 28 	call	0x5052	; 0x5052 <spi_readS16>
     3d6:	9b 8b       	std	Y+19, r25	; 0x13
     3d8:	8a 8b       	std	Y+18, r24	; 0x12
	_bmp280_calib.dig_P8 = spi_readS16(0x9C, BMP_CS);
     3da:	62 e0       	ldi	r22, 0x02	; 2
     3dc:	70 e0       	ldi	r23, 0x00	; 0
     3de:	8c e9       	ldi	r24, 0x9C	; 156
     3e0:	0e 94 29 28 	call	0x5052	; 0x5052 <spi_readS16>
     3e4:	9d 8b       	std	Y+21, r25	; 0x15
     3e6:	8c 8b       	std	Y+20, r24	; 0x14
	_bmp280_calib.dig_P9 = spi_readS16(0x9E, BMP_CS);
     3e8:	62 e0       	ldi	r22, 0x02	; 2
     3ea:	70 e0       	ldi	r23, 0x00	; 0
     3ec:	8e e9       	ldi	r24, 0x9E	; 158
     3ee:	0e 94 29 28 	call	0x5052	; 0x5052 <spi_readS16>
     3f2:	9f 8b       	std	Y+23, r25	; 0x17
     3f4:	8e 8b       	std	Y+22, r24	; 0x16
	spi_rwSPI(0xF4);
	spi_rwSPI(0b01010111);
	PORT_CS |= (1<<BMP_CS);
	
	readCalibration();
}
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	08 95       	ret

000003fc <bmp280_readPressure>:

float bmp280_readPressure()
{
     3fc:	2f 92       	push	r2
     3fe:	3f 92       	push	r3
     400:	4f 92       	push	r4
     402:	5f 92       	push	r5
     404:	6f 92       	push	r6
     406:	7f 92       	push	r7
     408:	8f 92       	push	r8
     40a:	9f 92       	push	r9
     40c:	af 92       	push	r10
     40e:	bf 92       	push	r11
     410:	cf 92       	push	r12
     412:	df 92       	push	r13
     414:	ef 92       	push	r14
     416:	ff 92       	push	r15
     418:	0f 93       	push	r16
     41a:	1f 93       	push	r17
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29
     420:	cd b7       	in	r28, 0x3d	; 61
     422:	de b7       	in	r29, 0x3e	; 62
     424:	6f 97       	sbiw	r28, 0x1f	; 31
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	f8 94       	cli
     42a:	de bf       	out	0x3e, r29	; 62
     42c:	0f be       	out	0x3f, r0	; 63
     42e:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[6]; // Array to hold temp/pressure values (pressure in indices 0:2, and temp in indices 3:5)
	uint32_t pressureUncomp, tempUncomp;
	
	spi_BurstRead(0xF7, data, 6, BMP_CS);
     430:	22 e0       	ldi	r18, 0x02	; 2
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	46 e0       	ldi	r20, 0x06	; 6
     436:	be 01       	movw	r22, r28
     438:	6f 5f       	subi	r22, 0xFF	; 255
     43a:	7f 4f       	sbci	r23, 0xFF	; 255
     43c:	87 ef       	ldi	r24, 0xF7	; 247
     43e:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <spi_BurstRead>
	tempUncomp = ((uint32_t)data[3]<<12) | ((uint32_t)data[4] << 4) | data[5]; // 20 bit temp val
	pressureUncomp = ((uint32_t)data[0]<<12) | ((uint32_t)data[1] << 4) | data[2]; // 20 bit pressure value
     442:	89 80       	ldd	r8, Y+1	; 0x01
     444:	8d 8e       	std	Y+29, r8	; 0x1d
     446:	9a 80       	ldd	r9, Y+2	; 0x02
     448:	9e 8e       	std	Y+30, r9	; 0x1e
     44a:	8b 80       	ldd	r8, Y+3	; 0x03
     44c:	8f 8e       	std	Y+31, r8	; 0x1f
	bmp280_compensate_T_int32(tempUncomp);
     44e:	8c 81       	ldd	r24, Y+4	; 0x04
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	a0 e0       	ldi	r26, 0x00	; 0
     454:	b0 e0       	ldi	r27, 0x00	; 0
     456:	ac 01       	movw	r20, r24
     458:	bd 01       	movw	r22, r26
     45a:	03 2e       	mov	r0, r19
     45c:	3c e0       	ldi	r19, 0x0C	; 12
     45e:	44 0f       	add	r20, r20
     460:	55 1f       	adc	r21, r21
     462:	66 1f       	adc	r22, r22
     464:	77 1f       	adc	r23, r23
     466:	3a 95       	dec	r19
     468:	d1 f7       	brne	.-12     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     46a:	30 2d       	mov	r19, r0
     46c:	9d 81       	ldd	r25, Y+5	; 0x05
     46e:	89 2f       	mov	r24, r25
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	a0 e0       	ldi	r26, 0x00	; 0
     474:	b0 e0       	ldi	r27, 0x00	; 0
     476:	88 0f       	add	r24, r24
     478:	99 1f       	adc	r25, r25
     47a:	aa 1f       	adc	r26, r26
     47c:	bb 1f       	adc	r27, r27
     47e:	88 0f       	add	r24, r24
     480:	99 1f       	adc	r25, r25
     482:	aa 1f       	adc	r26, r26
     484:	bb 1f       	adc	r27, r27
     486:	88 0f       	add	r24, r24
     488:	99 1f       	adc	r25, r25
     48a:	aa 1f       	adc	r26, r26
     48c:	bb 1f       	adc	r27, r27
     48e:	88 0f       	add	r24, r24
     490:	99 1f       	adc	r25, r25
     492:	aa 1f       	adc	r26, r26
     494:	bb 1f       	adc	r27, r27
     496:	84 2b       	or	r24, r20
     498:	95 2b       	or	r25, r21
     49a:	a6 2b       	or	r26, r22
     49c:	b7 2b       	or	r27, r23
     49e:	2e 81       	ldd	r18, Y+6	; 0x06
     4a0:	82 2b       	or	r24, r18
}

static float bmp280_compensate_T_int32(int32_t adc_T)
{
	int32_t var1, var2;
	var1 = ((((adc_T>>3) - ((int32_t)_bmp280_calib.dig_T1<<1))) * ((int32_t)_bmp280_calib.dig_T2)) >> 11;
     4a2:	0f 2e       	mov	r0, r31
     4a4:	f7 ef       	ldi	r31, 0xF7	; 247
     4a6:	6f 2e       	mov	r6, r31
     4a8:	f3 e0       	ldi	r31, 0x03	; 3
     4aa:	7f 2e       	mov	r7, r31
     4ac:	f0 2d       	mov	r31, r0
     4ae:	f3 01       	movw	r30, r6
     4b0:	40 81       	ld	r20, Z
     4b2:	51 81       	ldd	r21, Z+1	; 0x01
     4b4:	60 e0       	ldi	r22, 0x00	; 0
     4b6:	70 e0       	ldi	r23, 0x00	; 0
	var2 = (((((adc_T>>4) - ((int32_t)_bmp280_calib.dig_T1)) * ((adc_T>>4) - ((int32_t)_bmp280_calib.dig_T1))) >> 12) * ((int32_t)_bmp280_calib.dig_T3)) >> 14;
     4b8:	6c 01       	movw	r12, r24
     4ba:	7d 01       	movw	r14, r26
     4bc:	68 94       	set
     4be:	13 f8       	bld	r1, 3
     4c0:	f5 94       	asr	r15
     4c2:	e7 94       	ror	r14
     4c4:	d7 94       	ror	r13
     4c6:	c7 94       	ror	r12
     4c8:	16 94       	lsr	r1
     4ca:	d1 f7       	brne	.-12     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     4cc:	c4 1a       	sub	r12, r20
     4ce:	d5 0a       	sbc	r13, r21
     4d0:	e6 0a       	sbc	r14, r22
     4d2:	f7 0a       	sbc	r15, r23
	t_fine = var1 + var2;
     4d4:	68 94       	set
     4d6:	12 f8       	bld	r1, 2
     4d8:	b5 95       	asr	r27
     4da:	a7 95       	ror	r26
     4dc:	97 95       	ror	r25
     4de:	87 95       	ror	r24
     4e0:	16 94       	lsr	r1
     4e2:	d1 f7       	brne	.-12     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
     4e4:	44 0f       	add	r20, r20
     4e6:	55 1f       	adc	r21, r21
     4e8:	66 1f       	adc	r22, r22
     4ea:	77 1f       	adc	r23, r23
     4ec:	4c 01       	movw	r8, r24
     4ee:	5d 01       	movw	r10, r26
     4f0:	84 1a       	sub	r8, r20
     4f2:	95 0a       	sbc	r9, r21
     4f4:	a6 0a       	sbc	r10, r22
     4f6:	b7 0a       	sbc	r11, r23
     4f8:	a5 01       	movw	r20, r10
     4fa:	94 01       	movw	r18, r8
     4fc:	a2 81       	ldd	r26, Z+2	; 0x02
     4fe:	b3 81       	ldd	r27, Z+3	; 0x03
     500:	0e 94 09 2e 	call	0x5c12	; 0x5c12 <__mulshisi3>
     504:	4b 01       	movw	r8, r22
     506:	5c 01       	movw	r10, r24
     508:	07 2e       	mov	r0, r23
     50a:	7b e0       	ldi	r23, 0x0B	; 11
     50c:	b5 94       	asr	r11
     50e:	a7 94       	ror	r10
     510:	97 94       	ror	r9
     512:	87 94       	ror	r8
     514:	7a 95       	dec	r23
     516:	d1 f7       	brne	.-12     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     518:	70 2d       	mov	r23, r0
     51a:	a7 01       	movw	r20, r14
     51c:	96 01       	movw	r18, r12
     51e:	c7 01       	movw	r24, r14
     520:	b6 01       	movw	r22, r12
     522:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <__mulsi3>
     526:	9b 01       	movw	r18, r22
     528:	ac 01       	movw	r20, r24
     52a:	01 2e       	mov	r0, r17
     52c:	1c e0       	ldi	r17, 0x0C	; 12
     52e:	55 95       	asr	r21
     530:	47 95       	ror	r20
     532:	37 95       	ror	r19
     534:	27 95       	ror	r18
     536:	1a 95       	dec	r17
     538:	d1 f7       	brne	.-12     	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
     53a:	10 2d       	mov	r17, r0
     53c:	a4 81       	ldd	r26, Z+4	; 0x04
     53e:	b5 81       	ldd	r27, Z+5	; 0x05
     540:	0e 94 09 2e 	call	0x5c12	; 0x5c12 <__mulshisi3>
     544:	dc 01       	movw	r26, r24
     546:	cb 01       	movw	r24, r22
     548:	07 2e       	mov	r0, r23
     54a:	7e e0       	ldi	r23, 0x0E	; 14
     54c:	b5 95       	asr	r27
     54e:	a7 95       	ror	r26
     550:	97 95       	ror	r25
     552:	87 95       	ror	r24
     554:	7a 95       	dec	r23
     556:	d1 f7       	brne	.-12     	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
     558:	70 2d       	mov	r23, r0
     55a:	88 0d       	add	r24, r8
     55c:	99 1d       	adc	r25, r9
     55e:	aa 1d       	adc	r26, r10
     560:	bb 1d       	adc	r27, r11
     562:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <t_fine>
     566:	90 93 19 04 	sts	0x0419, r25	; 0x800419 <t_fine+0x1>
     56a:	a0 93 1a 04 	sts	0x041A, r26	; 0x80041a <t_fine+0x2>
     56e:	b0 93 1b 04 	sts	0x041B, r27	; 0x80041b <t_fine+0x3>

static float bmp280_compensate_pressure(int32_t adc_P)
{
	int64_t var1, var2, p;

	var1 = ((int64_t)t_fine) - 128000;
     572:	6c 01       	movw	r12, r24
     574:	7d 01       	movw	r14, r26
     576:	ff 0c       	add	r15, r15
     578:	cc 08       	sbc	r12, r12
     57a:	dc 2c       	mov	r13, r12
     57c:	76 01       	movw	r14, r12
     57e:	28 2f       	mov	r18, r24
     580:	39 2f       	mov	r19, r25
     582:	4a 2f       	mov	r20, r26
     584:	5b 2f       	mov	r21, r27
     586:	6c 2d       	mov	r22, r12
     588:	7c 2d       	mov	r23, r12
     58a:	8c 2d       	mov	r24, r12
     58c:	9c 2d       	mov	r25, r12
     58e:	34 5f       	subi	r19, 0xF4	; 244
     590:	41 40       	sbci	r20, 0x01	; 1
     592:	51 09       	sbc	r21, r1
     594:	61 09       	sbc	r22, r1
     596:	71 09       	sbc	r23, r1
     598:	81 09       	sbc	r24, r1
     59a:	91 09       	sbc	r25, r1
     59c:	2f 83       	std	Y+7, r18	; 0x07
     59e:	3a 87       	std	Y+10, r19	; 0x0a
     5a0:	4b 87       	std	Y+11, r20	; 0x0b
     5a2:	5c 87       	std	Y+12, r21	; 0x0c
     5a4:	6d 87       	std	Y+13, r22	; 0x0d
     5a6:	7e 87       	std	Y+14, r23	; 0x0e
     5a8:	8f 87       	std	Y+15, r24	; 0x0f
     5aa:	98 8b       	std	Y+16, r25	; 0x10
	var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
     5ac:	a2 2e       	mov	r10, r18
     5ae:	b3 2e       	mov	r11, r19
     5b0:	c4 2e       	mov	r12, r20
     5b2:	d5 2e       	mov	r13, r21
     5b4:	e6 2e       	mov	r14, r22
     5b6:	f7 2e       	mov	r15, r23
     5b8:	08 2f       	mov	r16, r24
     5ba:	19 2f       	mov	r17, r25
     5bc:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__muldi3>
     5c0:	29 8b       	std	Y+17, r18	; 0x11
     5c2:	3a 8b       	std	Y+18, r19	; 0x12
     5c4:	4b 8b       	std	Y+19, r20	; 0x13
     5c6:	5c 8b       	std	Y+20, r21	; 0x14
     5c8:	69 8f       	std	Y+25, r22	; 0x19
     5ca:	7a 8f       	std	Y+26, r23	; 0x1a
     5cc:	8b 8f       	std	Y+27, r24	; 0x1b
     5ce:	9c 8f       	std	Y+28, r25	; 0x1c
	var2 = var2 + ((var1 * (int64_t)_bmp280_calib.dig_P5) << 17);
	var2 = var2 + (((int64_t)_bmp280_calib.dig_P4) << 35);
	var1 = ((var1 * var1 * (int64_t)_bmp280_calib.dig_P3) >> 8) +
	((var1 * (int64_t)_bmp280_calib.dig_P2) << 12);
     5d0:	d3 01       	movw	r26, r6
     5d2:	19 96       	adiw	r26, 0x09	; 9
     5d4:	3c 91       	ld	r19, X
     5d6:	19 97       	sbiw	r26, 0x09	; 9
     5d8:	18 96       	adiw	r26, 0x08	; 8
     5da:	2c 91       	ld	r18, X
     5dc:	93 2f       	mov	r25, r19
     5de:	99 0f       	add	r25, r25
     5e0:	99 0b       	sbc	r25, r25
     5e2:	49 2f       	mov	r20, r25
     5e4:	59 2f       	mov	r21, r25
     5e6:	69 2f       	mov	r22, r25
     5e8:	79 2f       	mov	r23, r25
     5ea:	89 2f       	mov	r24, r25
     5ec:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__muldi3>
     5f0:	0c e0       	ldi	r16, 0x0C	; 12
     5f2:	0e 94 41 2f 	call	0x5e82	; 0x5e82 <__ashldi3>
     5f6:	22 2e       	mov	r2, r18
     5f8:	33 2e       	mov	r3, r19
     5fa:	44 2e       	mov	r4, r20
     5fc:	55 2e       	mov	r5, r21
     5fe:	68 87       	std	Y+8, r22	; 0x08
     600:	79 87       	std	Y+9, r23	; 0x09
     602:	88 2e       	mov	r8, r24
     604:	99 2e       	mov	r9, r25
	var1 =
	(((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;
     606:	f3 01       	movw	r30, r6
     608:	33 85       	ldd	r19, Z+11	; 0x0b
     60a:	22 85       	ldd	r18, Z+10	; 0x0a
     60c:	93 2f       	mov	r25, r19
     60e:	99 0f       	add	r25, r25
     610:	99 0b       	sbc	r25, r25
     612:	a9 88       	ldd	r10, Y+17	; 0x11
     614:	ba 88       	ldd	r11, Y+18	; 0x12
     616:	cb 88       	ldd	r12, Y+19	; 0x13
     618:	dc 88       	ldd	r13, Y+20	; 0x14
     61a:	e9 8c       	ldd	r14, Y+25	; 0x19
     61c:	fa 8c       	ldd	r15, Y+26	; 0x1a
     61e:	0b 8d       	ldd	r16, Y+27	; 0x1b
     620:	1c 8d       	ldd	r17, Y+28	; 0x1c
     622:	49 2f       	mov	r20, r25
     624:	59 2f       	mov	r21, r25
     626:	69 2f       	mov	r22, r25
     628:	79 2f       	mov	r23, r25
     62a:	89 2f       	mov	r24, r25
     62c:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__muldi3>
     630:	08 e0       	ldi	r16, 0x08	; 8
     632:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__ashrdi3>
     636:	a2 2c       	mov	r10, r2
     638:	b3 2c       	mov	r11, r3
     63a:	c4 2c       	mov	r12, r4
     63c:	d5 2c       	mov	r13, r5
     63e:	e8 84       	ldd	r14, Y+8	; 0x08
     640:	f9 84       	ldd	r15, Y+9	; 0x09
     642:	08 2d       	mov	r16, r8
     644:	19 2d       	mov	r17, r9
     646:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <__adddi3>
     64a:	70 58       	subi	r23, 0x80	; 128
     64c:	8f 4f       	sbci	r24, 0xFF	; 255
     64e:	9f 4f       	sbci	r25, 0xFF	; 255
     650:	d3 01       	movw	r26, r6
     652:	16 96       	adiw	r26, 0x06	; 6
     654:	2d 90       	ld	r2, X+
     656:	3c 90       	ld	r3, X
     658:	17 97       	sbiw	r26, 0x07	; 7
     65a:	a2 2c       	mov	r10, r2
     65c:	b3 2c       	mov	r11, r3
     65e:	c1 2c       	mov	r12, r1
     660:	d1 2c       	mov	r13, r1
     662:	e1 2c       	mov	r14, r1
     664:	f1 2c       	mov	r15, r1
     666:	00 e0       	ldi	r16, 0x00	; 0
     668:	10 e0       	ldi	r17, 0x00	; 0
     66a:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__muldi3>
	var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
	var2 = var2 + ((var1 * (int64_t)_bmp280_calib.dig_P5) << 17);
	var2 = var2 + (((int64_t)_bmp280_calib.dig_P4) << 35);
	var1 = ((var1 * var1 * (int64_t)_bmp280_calib.dig_P3) >> 8) +
	((var1 * (int64_t)_bmp280_calib.dig_P2) << 12);
	var1 =
     66e:	01 e2       	ldi	r16, 0x21	; 33
     670:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__ashrdi3>
     674:	28 87       	std	Y+8, r18	; 0x08
     676:	39 87       	std	Y+9, r19	; 0x09
     678:	4d 8b       	std	Y+21, r20	; 0x15
     67a:	5e 8b       	std	Y+22, r21	; 0x16
     67c:	6f 8b       	std	Y+23, r22	; 0x17
     67e:	78 8f       	std	Y+24, r23	; 0x18
     680:	58 2e       	mov	r5, r24
     682:	49 2e       	mov	r4, r25
	(((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;

	if (var1 == 0) {
     684:	a0 e0       	ldi	r26, 0x00	; 0
     686:	0e 94 8a 2f 	call	0x5f14	; 0x5f14 <__cmpdi2_s8>
     68a:	09 f4       	brne	.+2      	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
     68c:	65 c1       	rjmp	.+714    	; 0x958 <__stack+0x59>
static float bmp280_compensate_pressure(int32_t adc_P)
{
	int64_t var1, var2, p;

	var1 = ((int64_t)t_fine) - 128000;
	var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
     68e:	0f 2e       	mov	r0, r31
     690:	f7 ef       	ldi	r31, 0xF7	; 247
     692:	2f 2e       	mov	r2, r31
     694:	f3 e0       	ldi	r31, 0x03	; 3
     696:	3f 2e       	mov	r3, r31
     698:	f0 2d       	mov	r31, r0
     69a:	f1 01       	movw	r30, r2
     69c:	31 89       	ldd	r19, Z+17	; 0x11
     69e:	20 89       	ldd	r18, Z+16	; 0x10
     6a0:	93 2f       	mov	r25, r19
     6a2:	99 0f       	add	r25, r25
     6a4:	99 0b       	sbc	r25, r25
     6a6:	a9 88       	ldd	r10, Y+17	; 0x11
     6a8:	ba 88       	ldd	r11, Y+18	; 0x12
     6aa:	cb 88       	ldd	r12, Y+19	; 0x13
     6ac:	dc 88       	ldd	r13, Y+20	; 0x14
     6ae:	e9 8c       	ldd	r14, Y+25	; 0x19
     6b0:	fa 8c       	ldd	r15, Y+26	; 0x1a
     6b2:	0b 8d       	ldd	r16, Y+27	; 0x1b
     6b4:	1c 8d       	ldd	r17, Y+28	; 0x1c
     6b6:	49 2f       	mov	r20, r25
     6b8:	59 2f       	mov	r21, r25
     6ba:	69 2f       	mov	r22, r25
     6bc:	79 2f       	mov	r23, r25
     6be:	89 2f       	mov	r24, r25
     6c0:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__muldi3>
     6c4:	29 8b       	std	Y+17, r18	; 0x11
     6c6:	3a 8b       	std	Y+18, r19	; 0x12
     6c8:	4b 8b       	std	Y+19, r20	; 0x13
     6ca:	5c 8b       	std	Y+20, r21	; 0x14
     6cc:	66 2e       	mov	r6, r22
     6ce:	77 2e       	mov	r7, r23
     6d0:	88 2e       	mov	r8, r24
     6d2:	99 2e       	mov	r9, r25
	var2 = var2 + ((var1 * (int64_t)_bmp280_calib.dig_P5) << 17);
     6d4:	d1 01       	movw	r26, r2
     6d6:	1f 96       	adiw	r26, 0x0f	; 15
     6d8:	3c 91       	ld	r19, X
     6da:	1f 97       	sbiw	r26, 0x0f	; 15
     6dc:	1e 96       	adiw	r26, 0x0e	; 14
     6de:	2c 91       	ld	r18, X
     6e0:	93 2f       	mov	r25, r19
     6e2:	99 0f       	add	r25, r25
     6e4:	99 0b       	sbc	r25, r25
     6e6:	af 80       	ldd	r10, Y+7	; 0x07
     6e8:	ba 84       	ldd	r11, Y+10	; 0x0a
     6ea:	cb 84       	ldd	r12, Y+11	; 0x0b
     6ec:	dc 84       	ldd	r13, Y+12	; 0x0c
     6ee:	ed 84       	ldd	r14, Y+13	; 0x0d
     6f0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6f2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6f4:	18 89       	ldd	r17, Y+16	; 0x10
     6f6:	49 2f       	mov	r20, r25
     6f8:	59 2f       	mov	r21, r25
     6fa:	69 2f       	mov	r22, r25
     6fc:	79 2f       	mov	r23, r25
     6fe:	89 2f       	mov	r24, r25
     700:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__muldi3>
     704:	01 e1       	ldi	r16, 0x11	; 17
     706:	0e 94 41 2f 	call	0x5e82	; 0x5e82 <__ashldi3>
     70a:	a9 88       	ldd	r10, Y+17	; 0x11
     70c:	ba 88       	ldd	r11, Y+18	; 0x12
     70e:	cb 88       	ldd	r12, Y+19	; 0x13
     710:	dc 88       	ldd	r13, Y+20	; 0x14
     712:	e6 2c       	mov	r14, r6
     714:	f7 2c       	mov	r15, r7
     716:	08 2d       	mov	r16, r8
     718:	19 2d       	mov	r17, r9
     71a:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <__adddi3>
     71e:	a2 2e       	mov	r10, r18
     720:	b3 2e       	mov	r11, r19
     722:	c4 2e       	mov	r12, r20
     724:	d5 2e       	mov	r13, r21
     726:	e6 2e       	mov	r14, r22
     728:	f7 2e       	mov	r15, r23
     72a:	8f 83       	std	Y+7, r24	; 0x07
     72c:	19 2f       	mov	r17, r25

	if (var1 == 0) {
		return 0; // avoid exception caused by division by zero
	}
	p = 1048576 - adc_P;
	p = (((p << 31) - var2) * 3125) / var1;
     72e:	8d 8c       	ldd	r8, Y+29	; 0x1d
     730:	48 2d       	mov	r20, r8
     732:	50 e0       	ldi	r21, 0x00	; 0
     734:	60 e0       	ldi	r22, 0x00	; 0
     736:	70 e0       	ldi	r23, 0x00	; 0
     738:	db 01       	movw	r26, r22
     73a:	ca 01       	movw	r24, r20
     73c:	07 2e       	mov	r0, r23
     73e:	7c e0       	ldi	r23, 0x0C	; 12
     740:	88 0f       	add	r24, r24
     742:	99 1f       	adc	r25, r25
     744:	aa 1f       	adc	r26, r26
     746:	bb 1f       	adc	r27, r27
     748:	7a 95       	dec	r23
     74a:	d1 f7       	brne	.-12     	; 0x740 <__LOCK_REGION_LENGTH__+0x340>
     74c:	70 2d       	mov	r23, r0
     74e:	9e 8c       	ldd	r9, Y+30	; 0x1e
     750:	49 2d       	mov	r20, r9
     752:	50 e0       	ldi	r21, 0x00	; 0
     754:	60 e0       	ldi	r22, 0x00	; 0
     756:	70 e0       	ldi	r23, 0x00	; 0
     758:	44 0f       	add	r20, r20
     75a:	55 1f       	adc	r21, r21
     75c:	66 1f       	adc	r22, r22
     75e:	77 1f       	adc	r23, r23
     760:	44 0f       	add	r20, r20
     762:	55 1f       	adc	r21, r21
     764:	66 1f       	adc	r22, r22
     766:	77 1f       	adc	r23, r23
     768:	44 0f       	add	r20, r20
     76a:	55 1f       	adc	r21, r21
     76c:	66 1f       	adc	r22, r22
     76e:	77 1f       	adc	r23, r23
     770:	44 0f       	add	r20, r20
     772:	55 1f       	adc	r21, r21
     774:	66 1f       	adc	r22, r22
     776:	77 1f       	adc	r23, r23
     778:	48 2b       	or	r20, r24
     77a:	59 2b       	or	r21, r25
     77c:	6a 2b       	or	r22, r26
     77e:	7b 2b       	or	r23, r27
     780:	8f 8c       	ldd	r8, Y+31	; 0x1f
     782:	48 29       	or	r20, r8
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	a0 e1       	ldi	r26, 0x10	; 16
     78a:	b0 e0       	ldi	r27, 0x00	; 0
     78c:	84 1b       	sub	r24, r20
     78e:	95 0b       	sbc	r25, r21
     790:	a6 0b       	sbc	r26, r22
     792:	b7 0b       	sbc	r27, r23
     794:	3c 01       	movw	r6, r24
     796:	4d 01       	movw	r8, r26
     798:	99 0c       	add	r9, r9
     79a:	66 08       	sbc	r6, r6
     79c:	76 2c       	mov	r7, r6
     79e:	43 01       	movw	r8, r6
     7a0:	28 2f       	mov	r18, r24
     7a2:	39 2f       	mov	r19, r25
     7a4:	4a 2f       	mov	r20, r26
     7a6:	5b 2f       	mov	r21, r27
     7a8:	66 2d       	mov	r22, r6
     7aa:	76 2d       	mov	r23, r6
     7ac:	86 2d       	mov	r24, r6
     7ae:	96 2d       	mov	r25, r6
     7b0:	0f e1       	ldi	r16, 0x1F	; 31
     7b2:	0e 94 41 2f 	call	0x5e82	; 0x5e82 <__ashldi3>
     7b6:	62 2e       	mov	r6, r18
     7b8:	73 2e       	mov	r7, r19
     7ba:	84 2e       	mov	r8, r20
     7bc:	95 2e       	mov	r9, r21
     7be:	b6 2f       	mov	r27, r22
     7c0:	a7 2f       	mov	r26, r23
     7c2:	8a 87       	std	Y+10, r24	; 0x0a
     7c4:	9b 87       	std	Y+11, r25	; 0x0b
     7c6:	f1 01       	movw	r30, r2
     7c8:	35 85       	ldd	r19, Z+13	; 0x0d
     7ca:	24 85       	ldd	r18, Z+12	; 0x0c
     7cc:	93 2f       	mov	r25, r19
     7ce:	99 0f       	add	r25, r25
     7d0:	99 0b       	sbc	r25, r25
     7d2:	49 2f       	mov	r20, r25
     7d4:	59 2f       	mov	r21, r25
     7d6:	69 2f       	mov	r22, r25
     7d8:	79 2f       	mov	r23, r25
     7da:	89 2f       	mov	r24, r25
     7dc:	03 e2       	ldi	r16, 0x23	; 35
     7de:	0e 94 41 2f 	call	0x5e82	; 0x5e82 <__ashldi3>
     7e2:	0f 81       	ldd	r16, Y+7	; 0x07
     7e4:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <__adddi3>
     7e8:	a2 2e       	mov	r10, r18
     7ea:	b3 2e       	mov	r11, r19
     7ec:	c4 2e       	mov	r12, r20
     7ee:	d5 2e       	mov	r13, r21
     7f0:	e6 2e       	mov	r14, r22
     7f2:	f7 2e       	mov	r15, r23
     7f4:	08 2f       	mov	r16, r24
     7f6:	19 2f       	mov	r17, r25
     7f8:	26 2d       	mov	r18, r6
     7fa:	37 2d       	mov	r19, r7
     7fc:	48 2d       	mov	r20, r8
     7fe:	59 2d       	mov	r21, r9
     800:	6b 2f       	mov	r22, r27
     802:	7a 2f       	mov	r23, r26
     804:	8a 85       	ldd	r24, Y+10	; 0x0a
     806:	9b 85       	ldd	r25, Y+11	; 0x0b
     808:	0e 94 81 2f 	call	0x5f02	; 0x5f02 <__subdi3>
     80c:	0f 2e       	mov	r0, r31
     80e:	f5 e3       	ldi	r31, 0x35	; 53
     810:	af 2e       	mov	r10, r31
     812:	f0 2d       	mov	r31, r0
     814:	0f 2e       	mov	r0, r31
     816:	fc e0       	ldi	r31, 0x0C	; 12
     818:	bf 2e       	mov	r11, r31
     81a:	f0 2d       	mov	r31, r0
     81c:	c1 2c       	mov	r12, r1
     81e:	d1 2c       	mov	r13, r1
     820:	e1 2c       	mov	r14, r1
     822:	f1 2c       	mov	r15, r1
     824:	00 e0       	ldi	r16, 0x00	; 0
     826:	10 e0       	ldi	r17, 0x00	; 0
     828:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__muldi3>
     82c:	a8 84       	ldd	r10, Y+8	; 0x08
     82e:	b9 84       	ldd	r11, Y+9	; 0x09
     830:	cd 88       	ldd	r12, Y+21	; 0x15
     832:	de 88       	ldd	r13, Y+22	; 0x16
     834:	ef 88       	ldd	r14, Y+23	; 0x17
     836:	f8 8c       	ldd	r15, Y+24	; 0x18
     838:	05 2d       	mov	r16, r5
     83a:	14 2d       	mov	r17, r4
     83c:	0e 94 6c 2e 	call	0x5cd8	; 0x5cd8 <__divdi3>
     840:	2f 83       	std	Y+7, r18	; 0x07
     842:	3a 87       	std	Y+10, r19	; 0x0a
     844:	4b 87       	std	Y+11, r20	; 0x0b
     846:	5c 87       	std	Y+12, r21	; 0x0c
     848:	6d 87       	std	Y+13, r22	; 0x0d
     84a:	7e 87       	std	Y+14, r23	; 0x0e
     84c:	8f 87       	std	Y+15, r24	; 0x0f
     84e:	98 8b       	std	Y+16, r25	; 0x10
	var1 = (((int64_t)_bmp280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
     850:	0d e0       	ldi	r16, 0x0D	; 13
     852:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__ashrdi3>
     856:	92 2e       	mov	r9, r18
     858:	83 2e       	mov	r8, r19
     85a:	74 2e       	mov	r7, r20
     85c:	65 2e       	mov	r6, r21
     85e:	56 2e       	mov	r5, r22
     860:	47 2e       	mov	r4, r23
     862:	88 87       	std	Y+8, r24	; 0x08
     864:	99 87       	std	Y+9, r25	; 0x09
	var2 = (((int64_t)_bmp280_calib.dig_P8) * p) >> 19;

	p = ((p + var1 + var2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
     866:	d1 01       	movw	r26, r2
     868:	57 96       	adiw	r26, 0x17	; 23
     86a:	3c 91       	ld	r19, X
     86c:	57 97       	sbiw	r26, 0x17	; 23
     86e:	56 96       	adiw	r26, 0x16	; 22
     870:	2c 91       	ld	r18, X
     872:	93 2f       	mov	r25, r19
     874:	99 0f       	add	r25, r25
     876:	99 0b       	sbc	r25, r25
     878:	a9 2c       	mov	r10, r9
     87a:	b8 2c       	mov	r11, r8
     87c:	c7 2c       	mov	r12, r7
     87e:	d6 2c       	mov	r13, r6
     880:	e5 2c       	mov	r14, r5
     882:	f4 2c       	mov	r15, r4
     884:	08 2f       	mov	r16, r24
     886:	19 85       	ldd	r17, Y+9	; 0x09
     888:	49 2f       	mov	r20, r25
     88a:	59 2f       	mov	r21, r25
     88c:	69 2f       	mov	r22, r25
     88e:	79 2f       	mov	r23, r25
     890:	89 2f       	mov	r24, r25
     892:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__muldi3>
     896:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__muldi3>
     89a:	09 e1       	ldi	r16, 0x19	; 25
     89c:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__ashrdi3>
     8a0:	af 80       	ldd	r10, Y+7	; 0x07
     8a2:	ba 84       	ldd	r11, Y+10	; 0x0a
     8a4:	cb 84       	ldd	r12, Y+11	; 0x0b
     8a6:	dc 84       	ldd	r13, Y+12	; 0x0c
     8a8:	ed 84       	ldd	r14, Y+13	; 0x0d
     8aa:	fe 84       	ldd	r15, Y+14	; 0x0e
     8ac:	0f 85       	ldd	r16, Y+15	; 0x0f
     8ae:	18 89       	ldd	r17, Y+16	; 0x10
     8b0:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <__adddi3>
     8b4:	28 87       	std	Y+8, r18	; 0x08
     8b6:	39 87       	std	Y+9, r19	; 0x09
     8b8:	44 2e       	mov	r4, r20
     8ba:	55 2e       	mov	r5, r21
     8bc:	66 2e       	mov	r6, r22
     8be:	77 2e       	mov	r7, r23
     8c0:	88 2e       	mov	r8, r24
     8c2:	99 2e       	mov	r9, r25
     8c4:	f1 01       	movw	r30, r2
     8c6:	35 89       	ldd	r19, Z+21	; 0x15
     8c8:	24 89       	ldd	r18, Z+20	; 0x14
     8ca:	93 2f       	mov	r25, r19
     8cc:	99 0f       	add	r25, r25
     8ce:	99 0b       	sbc	r25, r25
     8d0:	49 2f       	mov	r20, r25
     8d2:	59 2f       	mov	r21, r25
     8d4:	69 2f       	mov	r22, r25
     8d6:	79 2f       	mov	r23, r25
     8d8:	89 2f       	mov	r24, r25
     8da:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <__muldi3>
     8de:	03 e1       	ldi	r16, 0x13	; 19
     8e0:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__ashrdi3>
     8e4:	a2 2e       	mov	r10, r18
     8e6:	b3 2e       	mov	r11, r19
     8e8:	c4 2e       	mov	r12, r20
     8ea:	d5 2e       	mov	r13, r21
     8ec:	e6 2e       	mov	r14, r22
     8ee:	f7 2e       	mov	r15, r23
     8f0:	08 2f       	mov	r16, r24
     8f2:	19 2f       	mov	r17, r25
     8f4:	28 85       	ldd	r18, Y+8	; 0x08
     8f6:	39 85       	ldd	r19, Y+9	; 0x09
     8f8:	44 2d       	mov	r20, r4
     8fa:	55 2d       	mov	r21, r5
     8fc:	66 2d       	mov	r22, r6
     8fe:	77 2d       	mov	r23, r7
     900:	88 2d       	mov	r24, r8
     902:	99 2d       	mov	r25, r9
     904:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <__adddi3>
     908:	08 e0       	ldi	r16, 0x08	; 8
     90a:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__ashrdi3>
     90e:	a2 2e       	mov	r10, r18
     910:	b3 2e       	mov	r11, r19
     912:	c4 2e       	mov	r12, r20
     914:	d5 2e       	mov	r13, r21
     916:	e6 2e       	mov	r14, r22
     918:	f7 2e       	mov	r15, r23
     91a:	e8 2f       	mov	r30, r24
     91c:	19 2f       	mov	r17, r25
	return (float)p / 256;
     91e:	d1 01       	movw	r26, r2
     920:	53 96       	adiw	r26, 0x13	; 19
     922:	3c 91       	ld	r19, X
     924:	53 97       	sbiw	r26, 0x13	; 19
     926:	52 96       	adiw	r26, 0x12	; 18
     928:	2c 91       	ld	r18, X
     92a:	93 2f       	mov	r25, r19
     92c:	99 0f       	add	r25, r25
     92e:	99 0b       	sbc	r25, r25
     930:	49 2f       	mov	r20, r25
     932:	59 2f       	mov	r21, r25
     934:	69 2f       	mov	r22, r25
     936:	79 2f       	mov	r23, r25
     938:	89 2f       	mov	r24, r25
     93a:	04 e0       	ldi	r16, 0x04	; 4
     93c:	0e 94 41 2f 	call	0x5e82	; 0x5e82 <__ashldi3>
     940:	0e 2f       	mov	r16, r30
     942:	0e 94 78 2f 	call	0x5ef0	; 0x5ef0 <__adddi3>
     946:	0e 94 4e 2c 	call	0x589c	; 0x589c <__floatdisf>
     94a:	20 e0       	ldi	r18, 0x00	; 0
     94c:	30 e0       	ldi	r19, 0x00	; 0
     94e:	40 e8       	ldi	r20, 0x80	; 128
     950:	5b e3       	ldi	r21, 0x3B	; 59
     952:	0e 94 59 2d 	call	0x5ab2	; 0x5ab2 <__mulsf3>
     956:	03 c0       	rjmp	.+6      	; 0x95e <__stack+0x5f>
	((var1 * (int64_t)_bmp280_calib.dig_P2) << 12);
	var1 =
	(((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;

	if (var1 == 0) {
		return 0; // avoid exception caused by division by zero
     958:	60 e0       	ldi	r22, 0x00	; 0
     95a:	70 e0       	ldi	r23, 0x00	; 0
     95c:	cb 01       	movw	r24, r22
	spi_BurstRead(0xF7, data, 6, BMP_CS);
	tempUncomp = ((uint32_t)data[3]<<12) | ((uint32_t)data[4] << 4) | data[5]; // 20 bit temp val
	pressureUncomp = ((uint32_t)data[0]<<12) | ((uint32_t)data[1] << 4) | data[2]; // 20 bit pressure value
	bmp280_compensate_T_int32(tempUncomp);
	return bmp280_compensate_pressure(pressureUncomp);
}
     95e:	6f 96       	adiw	r28, 0x1f	; 31
     960:	0f b6       	in	r0, 0x3f	; 63
     962:	f8 94       	cli
     964:	de bf       	out	0x3e, r29	; 62
     966:	0f be       	out	0x3f, r0	; 63
     968:	cd bf       	out	0x3d, r28	; 61
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	1f 91       	pop	r17
     970:	0f 91       	pop	r16
     972:	ff 90       	pop	r15
     974:	ef 90       	pop	r14
     976:	df 90       	pop	r13
     978:	cf 90       	pop	r12
     97a:	bf 90       	pop	r11
     97c:	af 90       	pop	r10
     97e:	9f 90       	pop	r9
     980:	8f 90       	pop	r8
     982:	7f 90       	pop	r7
     984:	6f 90       	pop	r6
     986:	5f 90       	pop	r5
     988:	4f 90       	pop	r4
     98a:	3f 90       	pop	r3
     98c:	2f 90       	pop	r2
     98e:	08 95       	ret

00000990 <udp_client_check_for_dns_answer>:
}

// process the answer from the dns server:
// return 1 on sucessful processing of answer.
// We set also the variable haveDNSanswer
uint8_t udp_client_check_for_dns_answer(uint8_t *buf,uint16_t plen){
     990:	fc 01       	movw	r30, r24
        uint8_t j,i;
        if (plen<70){
     992:	66 34       	cpi	r22, 0x46	; 70
     994:	71 05       	cpc	r23, r1
     996:	08 f4       	brcc	.+2      	; 0x99a <udp_client_check_for_dns_answer+0xa>
     998:	73 c0       	rjmp	.+230    	; 0xa80 <udp_client_check_for_dns_answer+0xf0>
                return(0);
        }
        if (buf[UDP_SRC_PORT_L_P]!=53){
     99a:	83 a1       	ldd	r24, Z+35	; 0x23
     99c:	85 33       	cpi	r24, 0x35	; 53
     99e:	09 f0       	breq	.+2      	; 0x9a2 <udp_client_check_for_dns_answer+0x12>
     9a0:	71 c0       	rjmp	.+226    	; 0xa84 <udp_client_check_for_dns_answer+0xf4>
                // not from a DNS
                return(0);
        }
        if (buf[UDP_DST_PORT_H_P]!=DNSCLIENT_SRC_PORT_H){ 
     9a2:	84 a1       	ldd	r24, Z+36	; 0x24
     9a4:	80 3e       	cpi	r24, 0xE0	; 224
     9a6:	09 f0       	breq	.+2      	; 0x9aa <udp_client_check_for_dns_answer+0x1a>
     9a8:	6f c0       	rjmp	.+222    	; 0xa88 <udp_client_check_for_dns_answer+0xf8>
                return(0);
        }
        // we use the TID also as port:
        if (buf[UDP_DST_PORT_L_P]!=dnstid_l){ 
     9aa:	85 a1       	ldd	r24, Z+37	; 0x25
     9ac:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <dnstid_l>
     9b0:	89 13       	cpse	r24, r25
     9b2:	6c c0       	rjmp	.+216    	; 0xa8c <udp_client_check_for_dns_answer+0xfc>
        // is the packet for my IP:
        if(eth_type_is_ip_and_my_ip(buf,plen)==0){
                return(0);
        }
        */
        if (buf[UDP_DATA_P+1]!=dnstid_l){ 
     9b4:	93 a5       	ldd	r25, Z+43	; 0x2b
     9b6:	89 13       	cpse	r24, r25
     9b8:	6b c0       	rjmp	.+214    	; 0xa90 <udp_client_check_for_dns_answer+0x100>
                return(0);
        }
        // check flags lower byte:
        if ((buf[UDP_DATA_P+3]&0x8F)!=0x80){ 
     9ba:	85 a5       	ldd	r24, Z+45	; 0x2d
     9bc:	8f 78       	andi	r24, 0x8F	; 143
     9be:	80 38       	cpi	r24, 0x80	; 128
     9c0:	29 f0       	breq	.+10     	; 0x9cc <udp_client_check_for_dns_answer+0x3c>
                // there is an error or server does not support recursive
                // queries. We can only work with servers that support recursive
                // queries.
                dns_ansError=1;
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <__data_end>
                return(0);
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	08 95       	ret
        //
        // UDP_DATA_P+12+querylen is first byte of first answer.
        // The answer contains again the domain name and we need to
        // jump over it to find the IP. This part can be abbreviated by
        // the use of 2 byte pointers. See RFC 1035.
        i=12+buf[UDP_DATA_P]; // we encoded the query len into tid
     9cc:	92 a5       	ldd	r25, Z+42	; 0x2a
     9ce:	94 5f       	subi	r25, 0xF4	; 244
                // pointer
                i+=2;
        }else{
                // we just search for the first, zero=root domain
                // all other octets must be non zero
                while(i<plen-UDP_DATA_P-7){
     9d0:	61 53       	subi	r22, 0x31	; 49
     9d2:	71 09       	sbc	r23, r1
        // The answer contains again the domain name and we need to
        // jump over it to find the IP. This part can be abbreviated by
        // the use of 2 byte pointers. See RFC 1035.
        i=12+buf[UDP_DATA_P]; // we encoded the query len into tid
ChecNextResp:
        if (buf[UDP_DATA_P+i] & 0xc0){
     9d4:	df 01       	movw	r26, r30
     9d6:	a9 0f       	add	r26, r25
     9d8:	b1 1d       	adc	r27, r1
     9da:	9a 96       	adiw	r26, 0x2a	; 42
     9dc:	8c 91       	ld	r24, X
     9de:	80 7c       	andi	r24, 0xC0	; 192
     9e0:	71 f0       	breq	.+28     	; 0x9fe <udp_client_check_for_dns_answer+0x6e>
                // pointer
                i+=2;
     9e2:	9e 5f       	subi	r25, 0xFE	; 254
     9e4:	11 c0       	rjmp	.+34     	; 0xa08 <udp_client_check_for_dns_answer+0x78>
        }else{
                // we just search for the first, zero=root domain
                // all other octets must be non zero
                while(i<plen-UDP_DATA_P-7){
                        i++;
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	89 0f       	add	r24, r25
                        if (buf[UDP_DATA_P+i]==0){
     9ea:	df 01       	movw	r26, r30
     9ec:	a8 0f       	add	r26, r24
     9ee:	b1 1d       	adc	r27, r1
     9f0:	9a 96       	adiw	r26, 0x2a	; 42
     9f2:	2c 91       	ld	r18, X
     9f4:	21 11       	cpse	r18, r1
     9f6:	02 c0       	rjmp	.+4      	; 0x9fc <udp_client_check_for_dns_answer+0x6c>
                                i++;
     9f8:	9e 5f       	subi	r25, 0xFE	; 254
                                break;
     9fa:	06 c0       	rjmp	.+12     	; 0xa08 <udp_client_check_for_dns_answer+0x78>
                i+=2;
        }else{
                // we just search for the first, zero=root domain
                // all other octets must be non zero
                while(i<plen-UDP_DATA_P-7){
                        i++;
     9fc:	98 2f       	mov	r25, r24
                // pointer
                i+=2;
        }else{
                // we just search for the first, zero=root domain
                // all other octets must be non zero
                while(i<plen-UDP_DATA_P-7){
     9fe:	29 2f       	mov	r18, r25
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	26 17       	cp	r18, r22
     a04:	37 07       	cpc	r19, r23
     a06:	78 f3       	brcs	.-34     	; 0x9e6 <udp_client_check_for_dns_answer+0x56>
                }
        }
        // There might be multipe records in the answer. 
        // We are searching for an A record (contains IP).
        // Contributed by Andras Tucsni
        if (buf[UDP_DATA_P+i+1] != 1){    // check type == 1 for "A"
     a08:	29 2f       	mov	r18, r25
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	df 01       	movw	r26, r30
     a0e:	a2 0f       	add	r26, r18
     a10:	b3 1f       	adc	r27, r19
     a12:	9b 96       	adiw	r26, 0x2b	; 43
     a14:	8c 91       	ld	r24, X
     a16:	81 30       	cpi	r24, 0x01	; 1
     a18:	99 f0       	breq	.+38     	; 0xa40 <udp_client_check_for_dns_answer+0xb0>
                i += 2 + 2 + 4;    // skip type & class & TTL
                i += buf[UDP_DATA_P+i+1] + 2;    // skip datalength bytes
     a1a:	88 e0       	ldi	r24, 0x08	; 8
     a1c:	89 0f       	add	r24, r25
     a1e:	df 01       	movw	r26, r30
     a20:	a8 0f       	add	r26, r24
     a22:	b1 1d       	adc	r27, r1
     a24:	9b 96       	adiw	r26, 0x2b	; 43
     a26:	8c 91       	ld	r24, X
     a28:	96 5f       	subi	r25, 0xF6	; 246
     a2a:	98 0f       	add	r25, r24
                if (i < plen-UDP_DATA_P-7){
     a2c:	29 2f       	mov	r18, r25
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	26 17       	cp	r18, r22
     a32:	37 07       	cpc	r19, r23
     a34:	78 f2       	brcs	.-98     	; 0x9d4 <udp_client_check_for_dns_answer+0x44>
                        goto ChecNextResp;
                }
                dns_ansError=3; // no A record found but packet ends 
     a36:	83 e0       	ldi	r24, 0x03	; 3
     a38:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <__data_end>
                return(0);
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	08 95       	ret
        } 
        // We have an A record
        // i is now pointing to the high octet of the type field
        if (buf[UDP_DATA_P+i+9] !=4 ){
     a40:	df 01       	movw	r26, r30
     a42:	a2 0f       	add	r26, r18
     a44:	b3 1f       	adc	r27, r19
     a46:	d3 96       	adiw	r26, 0x33	; 51
     a48:	2c 91       	ld	r18, X
     a4a:	24 30       	cpi	r18, 0x04	; 4
     a4c:	29 f0       	breq	.+10     	; 0xa58 <udp_client_check_for_dns_answer+0xc8>
                dns_ansError=2; // not IPv4
     a4e:	82 e0       	ldi	r24, 0x02	; 2
     a50:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <__data_end>
                return(0);
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	08 95       	ret
     a58:	2a e0       	ldi	r18, 0x0A	; 10
     a5a:	29 0f       	add	r18, r25
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	26 5d       	subi	r18, 0xD6	; 214
     a60:	3f 4f       	sbci	r19, 0xFF	; 255
     a62:	e2 0f       	add	r30, r18
     a64:	f3 1f       	adc	r31, r19
     a66:	a9 e9       	ldi	r26, 0x99	; 153
     a68:	b2 e0       	ldi	r27, 0x02	; 2
     a6a:	2d e9       	ldi	r18, 0x9D	; 157
     a6c:	32 e0       	ldi	r19, 0x02	; 2
        }
        i+=10;
        j=0;
        while(j<4){
                dns_answerip[j]=buf[UDP_DATA_P+i+j];
     a6e:	91 91       	ld	r25, Z+
     a70:	9d 93       	st	X+, r25
                dns_ansError=2; // not IPv4
                return(0);
        }
        i+=10;
        j=0;
        while(j<4){
     a72:	a2 17       	cp	r26, r18
     a74:	b3 07       	cpc	r27, r19
     a76:	d9 f7       	brne	.-10     	; 0xa6e <udp_client_check_for_dns_answer+0xde>
                dns_answerip[j]=buf[UDP_DATA_P+i+j];
                j++;
        }
        haveDNSanswer=1;
     a78:	91 e0       	ldi	r25, 0x01	; 1
     a7a:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <haveDNSanswer>
        return(1);
     a7e:	08 95       	ret
// return 1 on sucessful processing of answer.
// We set also the variable haveDNSanswer
uint8_t udp_client_check_for_dns_answer(uint8_t *buf,uint16_t plen){
        uint8_t j,i;
        if (plen<70){
                return(0);
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	08 95       	ret
        }
        if (buf[UDP_SRC_PORT_L_P]!=53){
                // not from a DNS
                return(0);
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	08 95       	ret
        }
        if (buf[UDP_DST_PORT_H_P]!=DNSCLIENT_SRC_PORT_H){ 
                return(0);
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	08 95       	ret
        }
        // we use the TID also as port:
        if (buf[UDP_DST_PORT_L_P]!=dnstid_l){ 
                return(0);
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 95       	ret
        if(eth_type_is_ip_and_my_ip(buf,plen)==0){
                return(0);
        }
        */
        if (buf[UDP_DATA_P+1]!=dnstid_l){ 
                return(0);
     a90:	80 e0       	ldi	r24, 0x00	; 0
                dns_answerip[j]=buf[UDP_DATA_P+i+j];
                j++;
        }
        haveDNSanswer=1;
        return(1);
}
     a92:	08 95       	ret

00000a94 <enc28j60ReadOp>:
{
	if( enc28j60Read(EPKTCNT) ==0 ){
		return(0);
        }
        return(1);
}
     a94:	2a 98       	cbi	0x05, 2	; 5
     a96:	96 2f       	mov	r25, r22
     a98:	6f 71       	andi	r22, 0x1F	; 31
     a9a:	86 2b       	or	r24, r22
     a9c:	8e bd       	out	0x2e, r24	; 46
     a9e:	0d b4       	in	r0, 0x2d	; 45
     aa0:	07 fe       	sbrs	r0, 7
     aa2:	fd cf       	rjmp	.-6      	; 0xa9e <enc28j60ReadOp+0xa>
     aa4:	1e bc       	out	0x2e, r1	; 46
     aa6:	0d b4       	in	r0, 0x2d	; 45
     aa8:	07 fe       	sbrs	r0, 7
     aaa:	fd cf       	rjmp	.-6      	; 0xaa6 <enc28j60ReadOp+0x12>
     aac:	99 23       	and	r25, r25
     aae:	24 f4       	brge	.+8      	; 0xab8 <enc28j60ReadOp+0x24>
     ab0:	1e bc       	out	0x2e, r1	; 46
     ab2:	0d b4       	in	r0, 0x2d	; 45
     ab4:	07 fe       	sbrs	r0, 7
     ab6:	fd cf       	rjmp	.-6      	; 0xab2 <enc28j60ReadOp+0x1e>
     ab8:	2a 9a       	sbi	0x05, 2	; 5
     aba:	8e b5       	in	r24, 0x2e	; 46
     abc:	08 95       	ret

00000abe <enc28j60WriteOp>:
     abe:	2a 98       	cbi	0x05, 2	; 5
     ac0:	6f 71       	andi	r22, 0x1F	; 31
     ac2:	86 2b       	or	r24, r22
     ac4:	8e bd       	out	0x2e, r24	; 46
     ac6:	0d b4       	in	r0, 0x2d	; 45
     ac8:	07 fe       	sbrs	r0, 7
     aca:	fd cf       	rjmp	.-6      	; 0xac6 <enc28j60WriteOp+0x8>
     acc:	4e bd       	out	0x2e, r20	; 46
     ace:	0d b4       	in	r0, 0x2d	; 45
     ad0:	07 fe       	sbrs	r0, 7
     ad2:	fd cf       	rjmp	.-6      	; 0xace <enc28j60WriteOp+0x10>
     ad4:	2a 9a       	sbi	0x05, 2	; 5
     ad6:	08 95       	ret

00000ad8 <enc28j60ReadBuffer>:
     ad8:	fb 01       	movw	r30, r22
     ada:	2a 98       	cbi	0x05, 2	; 5
     adc:	2a e3       	ldi	r18, 0x3A	; 58
     ade:	2e bd       	out	0x2e, r18	; 46
     ae0:	0d b4       	in	r0, 0x2d	; 45
     ae2:	07 fe       	sbrs	r0, 7
     ae4:	fd cf       	rjmp	.-6      	; 0xae0 <enc28j60ReadBuffer+0x8>
     ae6:	00 97       	sbiw	r24, 0x00	; 0
     ae8:	69 f0       	breq	.+26     	; 0xb04 <enc28j60ReadBuffer+0x2c>
     aea:	df 01       	movw	r26, r30
     aec:	a8 0f       	add	r26, r24
     aee:	b9 1f       	adc	r27, r25
     af0:	1e bc       	out	0x2e, r1	; 46
     af2:	0d b4       	in	r0, 0x2d	; 45
     af4:	07 fe       	sbrs	r0, 7
     af6:	fd cf       	rjmp	.-6      	; 0xaf2 <enc28j60ReadBuffer+0x1a>
     af8:	9e b5       	in	r25, 0x2e	; 46
     afa:	91 93       	st	Z+, r25
     afc:	ea 17       	cp	r30, r26
     afe:	fb 07       	cpc	r31, r27
     b00:	b9 f7       	brne	.-18     	; 0xaf0 <enc28j60ReadBuffer+0x18>
     b02:	01 c0       	rjmp	.+2      	; 0xb06 <enc28j60ReadBuffer+0x2e>
     b04:	df 01       	movw	r26, r30
     b06:	1c 92       	st	X, r1
     b08:	2a 9a       	sbi	0x05, 2	; 5
     b0a:	08 95       	ret

00000b0c <enc28j60WriteBuffer>:
     b0c:	fb 01       	movw	r30, r22
     b0e:	2a 98       	cbi	0x05, 2	; 5
     b10:	2a e7       	ldi	r18, 0x7A	; 122
     b12:	2e bd       	out	0x2e, r18	; 46
     b14:	0d b4       	in	r0, 0x2d	; 45
     b16:	07 fe       	sbrs	r0, 7
     b18:	fd cf       	rjmp	.-6      	; 0xb14 <enc28j60WriteBuffer+0x8>
     b1a:	09 c0       	rjmp	.+18     	; 0xb2e <enc28j60WriteBuffer+0x22>
     b1c:	9f 01       	movw	r18, r30
     b1e:	28 0f       	add	r18, r24
     b20:	39 1f       	adc	r19, r25
     b22:	91 91       	ld	r25, Z+
     b24:	9e bd       	out	0x2e, r25	; 46
     b26:	0d b4       	in	r0, 0x2d	; 45
     b28:	07 fe       	sbrs	r0, 7
     b2a:	fd cf       	rjmp	.-6      	; 0xb26 <enc28j60WriteBuffer+0x1a>
     b2c:	03 c0       	rjmp	.+6      	; 0xb34 <enc28j60WriteBuffer+0x28>
     b2e:	00 97       	sbiw	r24, 0x00	; 0
     b30:	a9 f7       	brne	.-22     	; 0xb1c <enc28j60WriteBuffer+0x10>
     b32:	03 c0       	rjmp	.+6      	; 0xb3a <enc28j60WriteBuffer+0x2e>
     b34:	2e 17       	cp	r18, r30
     b36:	3f 07       	cpc	r19, r31
     b38:	a1 f7       	brne	.-24     	; 0xb22 <enc28j60WriteBuffer+0x16>
     b3a:	2a 9a       	sbi	0x05, 2	; 5
     b3c:	08 95       	ret

00000b3e <enc28j60SetBank>:
     b3e:	1f 93       	push	r17
     b40:	cf 93       	push	r28
     b42:	df 93       	push	r29
     b44:	18 2f       	mov	r17, r24
     b46:	10 76       	andi	r17, 0x60	; 96
     b48:	c1 2f       	mov	r28, r17
     b4a:	d0 e0       	ldi	r29, 0x00	; 0
     b4c:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <Enc28j60Bank>
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	c8 17       	cp	r28, r24
     b54:	d9 07       	cpc	r29, r25
     b56:	b1 f0       	breq	.+44     	; 0xb84 <enc28j60SetBank+0x46>
     b58:	43 e0       	ldi	r20, 0x03	; 3
     b5a:	6f e1       	ldi	r22, 0x1F	; 31
     b5c:	80 ea       	ldi	r24, 0xA0	; 160
     b5e:	0e 94 5f 05 	call	0xabe	; 0xabe <enc28j60WriteOp>
     b62:	ae 01       	movw	r20, r28
     b64:	55 95       	asr	r21
     b66:	47 95       	ror	r20
     b68:	55 95       	asr	r21
     b6a:	47 95       	ror	r20
     b6c:	55 95       	asr	r21
     b6e:	47 95       	ror	r20
     b70:	55 95       	asr	r21
     b72:	47 95       	ror	r20
     b74:	55 95       	asr	r21
     b76:	47 95       	ror	r20
     b78:	6f e1       	ldi	r22, 0x1F	; 31
     b7a:	80 e8       	ldi	r24, 0x80	; 128
     b7c:	0e 94 5f 05 	call	0xabe	; 0xabe <enc28j60WriteOp>
     b80:	10 93 a1 02 	sts	0x02A1, r17	; 0x8002a1 <Enc28j60Bank>
     b84:	df 91       	pop	r29
     b86:	cf 91       	pop	r28
     b88:	1f 91       	pop	r17
     b8a:	08 95       	ret

00000b8c <enc28j60Read>:
     b8c:	cf 93       	push	r28
     b8e:	c8 2f       	mov	r28, r24
     b90:	0e 94 9f 05 	call	0xb3e	; 0xb3e <enc28j60SetBank>
     b94:	6c 2f       	mov	r22, r28
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	0e 94 4a 05 	call	0xa94	; 0xa94 <enc28j60ReadOp>
     b9c:	cf 91       	pop	r28
     b9e:	08 95       	ret

00000ba0 <enc28j60Write>:
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	c8 2f       	mov	r28, r24
     ba6:	d6 2f       	mov	r29, r22
     ba8:	0e 94 9f 05 	call	0xb3e	; 0xb3e <enc28j60SetBank>
     bac:	4d 2f       	mov	r20, r29
     bae:	6c 2f       	mov	r22, r28
     bb0:	80 e4       	ldi	r24, 0x40	; 64
     bb2:	0e 94 5f 05 	call	0xabe	; 0xabe <enc28j60WriteOp>
     bb6:	df 91       	pop	r29
     bb8:	cf 91       	pop	r28
     bba:	08 95       	ret

00000bbc <enc28j60PhyRead>:
     bbc:	cf 93       	push	r28
     bbe:	68 2f       	mov	r22, r24
     bc0:	84 ed       	ldi	r24, 0xD4	; 212
     bc2:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     bc6:	61 e0       	ldi	r22, 0x01	; 1
     bc8:	82 ed       	ldi	r24, 0xD2	; 210
     bca:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     bce:	8a ee       	ldi	r24, 0xEA	; 234
     bd0:	0e 94 c6 05 	call	0xb8c	; 0xb8c <enc28j60Read>
     bd4:	80 fd       	sbrc	r24, 0
     bd6:	fb cf       	rjmp	.-10     	; 0xbce <enc28j60PhyRead+0x12>
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	82 ed       	ldi	r24, 0xD2	; 210
     bdc:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     be0:	89 ed       	ldi	r24, 0xD9	; 217
     be2:	0e 94 c6 05 	call	0xb8c	; 0xb8c <enc28j60Read>
     be6:	c8 2f       	mov	r28, r24
     be8:	88 ed       	ldi	r24, 0xD8	; 216
     bea:	0e 94 c6 05 	call	0xb8c	; 0xb8c <enc28j60Read>
     bee:	2c 2f       	mov	r18, r28
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	32 2f       	mov	r19, r18
     bf4:	22 27       	eor	r18, r18
     bf6:	a9 01       	movw	r20, r18
     bf8:	48 2b       	or	r20, r24
     bfa:	ca 01       	movw	r24, r20
     bfc:	cf 91       	pop	r28
     bfe:	08 95       	ret

00000c00 <enc28j60PhyWrite>:
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	d6 2f       	mov	r29, r22
     c06:	c7 2f       	mov	r28, r23
     c08:	68 2f       	mov	r22, r24
     c0a:	84 ed       	ldi	r24, 0xD4	; 212
     c0c:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     c10:	6d 2f       	mov	r22, r29
     c12:	86 ed       	ldi	r24, 0xD6	; 214
     c14:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     c18:	6c 2f       	mov	r22, r28
     c1a:	87 ed       	ldi	r24, 0xD7	; 215
     c1c:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     c20:	c8 e2       	ldi	r28, 0x28	; 40
     c22:	03 c0       	rjmp	.+6      	; 0xc2a <enc28j60PhyWrite+0x2a>
     c24:	8c 2f       	mov	r24, r28
     c26:	8a 95       	dec	r24
     c28:	f1 f7       	brne	.-4      	; 0xc26 <enc28j60PhyWrite+0x26>
     c2a:	8a ee       	ldi	r24, 0xEA	; 234
     c2c:	0e 94 c6 05 	call	0xb8c	; 0xb8c <enc28j60Read>
     c30:	80 fd       	sbrc	r24, 0
     c32:	f8 cf       	rjmp	.-16     	; 0xc24 <enc28j60PhyWrite+0x24>
     c34:	df 91       	pop	r29
     c36:	cf 91       	pop	r28
     c38:	08 95       	ret

00000c3a <enc28j60clkout>:
     c3a:	68 2f       	mov	r22, r24
     c3c:	67 70       	andi	r22, 0x07	; 7
     c3e:	85 e7       	ldi	r24, 0x75	; 117
     c40:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     c44:	08 95       	ret

00000c46 <enc28j60Init>:
     c46:	cf 93       	push	r28
     c48:	df 93       	push	r29
     c4a:	ec 01       	movw	r28, r24
     c4c:	22 9a       	sbi	0x04, 2	; 4
     c4e:	2a 9a       	sbi	0x05, 2	; 5
     c50:	84 b1       	in	r24, 0x04	; 4
     c52:	88 62       	ori	r24, 0x28	; 40
     c54:	84 b9       	out	0x04, r24	; 4
     c56:	24 98       	cbi	0x04, 4	; 4
     c58:	2b 98       	cbi	0x05, 3	; 5
     c5a:	2d 98       	cbi	0x05, 5	; 5
     c5c:	80 e5       	ldi	r24, 0x50	; 80
     c5e:	8c bd       	out	0x2c, r24	; 44
     c60:	8d b5       	in	r24, 0x2d	; 45
     c62:	81 60       	ori	r24, 0x01	; 1
     c64:	8d bd       	out	0x2d, r24	; 45
     c66:	4f ef       	ldi	r20, 0xFF	; 255
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	8f ef       	ldi	r24, 0xFF	; 255
     c6c:	0e 94 5f 05 	call	0xabe	; 0xabe <enc28j60WriteOp>
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	01 97       	sbiw	r24, 0x01	; 1
     c76:	f1 f7       	brne	.-4      	; 0xc74 <enc28j60Init+0x2e>
     c78:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <gNextPacketPtr+0x1>
     c7c:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <gNextPacketPtr>
     c80:	60 e0       	ldi	r22, 0x00	; 0
     c82:	88 e0       	ldi	r24, 0x08	; 8
     c84:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     c88:	60 e0       	ldi	r22, 0x00	; 0
     c8a:	89 e0       	ldi	r24, 0x09	; 9
     c8c:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     c90:	60 e0       	ldi	r22, 0x00	; 0
     c92:	8c e0       	ldi	r24, 0x0C	; 12
     c94:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     c98:	60 e0       	ldi	r22, 0x00	; 0
     c9a:	8d e0       	ldi	r24, 0x0D	; 13
     c9c:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     ca0:	6f ef       	ldi	r22, 0xFF	; 255
     ca2:	8a e0       	ldi	r24, 0x0A	; 10
     ca4:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     ca8:	69 e1       	ldi	r22, 0x19	; 25
     caa:	8b e0       	ldi	r24, 0x0B	; 11
     cac:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     cb0:	60 e0       	ldi	r22, 0x00	; 0
     cb2:	84 e0       	ldi	r24, 0x04	; 4
     cb4:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     cb8:	6a e1       	ldi	r22, 0x1A	; 26
     cba:	85 e0       	ldi	r24, 0x05	; 5
     cbc:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     cc0:	6f ef       	ldi	r22, 0xFF	; 255
     cc2:	86 e0       	ldi	r24, 0x06	; 6
     cc4:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     cc8:	6f e1       	ldi	r22, 0x1F	; 31
     cca:	87 e0       	ldi	r24, 0x07	; 7
     ccc:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     cd0:	60 eb       	ldi	r22, 0xB0	; 176
     cd2:	88 e3       	ldi	r24, 0x38	; 56
     cd4:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     cd8:	6f e3       	ldi	r22, 0x3F	; 63
     cda:	88 e2       	ldi	r24, 0x28	; 40
     cdc:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     ce0:	60 e3       	ldi	r22, 0x30	; 48
     ce2:	89 e2       	ldi	r24, 0x29	; 41
     ce4:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     ce8:	69 ef       	ldi	r22, 0xF9	; 249
     cea:	80 e3       	ldi	r24, 0x30	; 48
     cec:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     cf0:	67 ef       	ldi	r22, 0xF7	; 247
     cf2:	81 e3       	ldi	r24, 0x31	; 49
     cf4:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     cf8:	6d e0       	ldi	r22, 0x0D	; 13
     cfa:	80 ec       	ldi	r24, 0xC0	; 192
     cfc:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     d00:	60 e0       	ldi	r22, 0x00	; 0
     d02:	81 ec       	ldi	r24, 0xC1	; 193
     d04:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     d08:	42 e3       	ldi	r20, 0x32	; 50
     d0a:	62 ec       	ldi	r22, 0xC2	; 194
     d0c:	80 e8       	ldi	r24, 0x80	; 128
     d0e:	0e 94 5f 05 	call	0xabe	; 0xabe <enc28j60WriteOp>
     d12:	62 e1       	ldi	r22, 0x12	; 18
     d14:	86 ec       	ldi	r24, 0xC6	; 198
     d16:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     d1a:	6c e0       	ldi	r22, 0x0C	; 12
     d1c:	87 ec       	ldi	r24, 0xC7	; 199
     d1e:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     d22:	62 e1       	ldi	r22, 0x12	; 18
     d24:	84 ec       	ldi	r24, 0xC4	; 196
     d26:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     d2a:	6c ed       	ldi	r22, 0xDC	; 220
     d2c:	8a ec       	ldi	r24, 0xCA	; 202
     d2e:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     d32:	65 e0       	ldi	r22, 0x05	; 5
     d34:	8b ec       	ldi	r24, 0xCB	; 203
     d36:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     d3a:	68 81       	ld	r22, Y
     d3c:	84 ee       	ldi	r24, 0xE4	; 228
     d3e:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     d42:	69 81       	ldd	r22, Y+1	; 0x01
     d44:	85 ee       	ldi	r24, 0xE5	; 229
     d46:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     d4a:	6a 81       	ldd	r22, Y+2	; 0x02
     d4c:	82 ee       	ldi	r24, 0xE2	; 226
     d4e:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     d52:	6b 81       	ldd	r22, Y+3	; 0x03
     d54:	83 ee       	ldi	r24, 0xE3	; 227
     d56:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     d5a:	6c 81       	ldd	r22, Y+4	; 0x04
     d5c:	80 ee       	ldi	r24, 0xE0	; 224
     d5e:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     d62:	6d 81       	ldd	r22, Y+5	; 0x05
     d64:	81 ee       	ldi	r24, 0xE1	; 225
     d66:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     d6a:	60 e0       	ldi	r22, 0x00	; 0
     d6c:	71 e0       	ldi	r23, 0x01	; 1
     d6e:	80 e1       	ldi	r24, 0x10	; 16
     d70:	0e 94 00 06 	call	0xc00	; 0xc00 <enc28j60PhyWrite>
     d74:	8f e1       	ldi	r24, 0x1F	; 31
     d76:	0e 94 9f 05 	call	0xb3e	; 0xb3e <enc28j60SetBank>
     d7a:	40 ec       	ldi	r20, 0xC0	; 192
     d7c:	6b e1       	ldi	r22, 0x1B	; 27
     d7e:	80 e8       	ldi	r24, 0x80	; 128
     d80:	0e 94 5f 05 	call	0xabe	; 0xabe <enc28j60WriteOp>
     d84:	44 e0       	ldi	r20, 0x04	; 4
     d86:	6f e1       	ldi	r22, 0x1F	; 31
     d88:	80 e8       	ldi	r24, 0x80	; 128
     d8a:	0e 94 5f 05 	call	0xabe	; 0xabe <enc28j60WriteOp>
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	08 95       	ret

00000d94 <enc28j60linkup>:
     d94:	81 e1       	ldi	r24, 0x11	; 17
     d96:	0e 94 de 05 	call	0xbbc	; 0xbbc <enc28j60PhyRead>
     d9a:	92 fb       	bst	r25, 2
     d9c:	88 27       	eor	r24, r24
     d9e:	80 f9       	bld	r24, 0
     da0:	08 95       	ret

00000da2 <enc28j60PacketSend>:
     da2:	0f 93       	push	r16
     da4:	1f 93       	push	r17
     da6:	cf 93       	push	r28
     da8:	df 93       	push	r29
     daa:	ec 01       	movw	r28, r24
     dac:	8b 01       	movw	r16, r22
     dae:	6f e1       	ldi	r22, 0x1F	; 31
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	0e 94 4a 05 	call	0xa94	; 0xa94 <enc28j60ReadOp>
     db6:	83 fd       	sbrc	r24, 3
     db8:	fa cf       	rjmp	.-12     	; 0xdae <enc28j60PacketSend+0xc>
     dba:	8c e1       	ldi	r24, 0x1C	; 28
     dbc:	0e 94 c6 05 	call	0xb8c	; 0xb8c <enc28j60Read>
     dc0:	81 ff       	sbrs	r24, 1
     dc2:	13 c0       	rjmp	.+38     	; 0xdea <enc28j60PacketSend+0x48>
     dc4:	40 e8       	ldi	r20, 0x80	; 128
     dc6:	6f e1       	ldi	r22, 0x1F	; 31
     dc8:	80 e8       	ldi	r24, 0x80	; 128
     dca:	0e 94 5f 05 	call	0xabe	; 0xabe <enc28j60WriteOp>
     dce:	40 e8       	ldi	r20, 0x80	; 128
     dd0:	6f e1       	ldi	r22, 0x1F	; 31
     dd2:	80 ea       	ldi	r24, 0xA0	; 160
     dd4:	0e 94 5f 05 	call	0xabe	; 0xabe <enc28j60WriteOp>
     dd8:	42 e0       	ldi	r20, 0x02	; 2
     dda:	6c e1       	ldi	r22, 0x1C	; 28
     ddc:	80 ea       	ldi	r24, 0xA0	; 160
     dde:	0e 94 5f 05 	call	0xabe	; 0xabe <enc28j60WriteOp>
     de2:	80 e3       	ldi	r24, 0x30	; 48
     de4:	95 e7       	ldi	r25, 0x75	; 117
     de6:	01 97       	sbiw	r24, 0x01	; 1
     de8:	f1 f7       	brne	.-4      	; 0xde6 <enc28j60PacketSend+0x44>
     dea:	60 e0       	ldi	r22, 0x00	; 0
     dec:	82 e0       	ldi	r24, 0x02	; 2
     dee:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     df2:	6a e1       	ldi	r22, 0x1A	; 26
     df4:	83 e0       	ldi	r24, 0x03	; 3
     df6:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     dfa:	6c 2f       	mov	r22, r28
     dfc:	86 e0       	ldi	r24, 0x06	; 6
     dfe:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     e02:	ce 01       	movw	r24, r28
     e04:	96 5e       	subi	r25, 0xE6	; 230
     e06:	69 2f       	mov	r22, r25
     e08:	87 e0       	ldi	r24, 0x07	; 7
     e0a:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     e0e:	40 e0       	ldi	r20, 0x00	; 0
     e10:	60 e0       	ldi	r22, 0x00	; 0
     e12:	8a e7       	ldi	r24, 0x7A	; 122
     e14:	0e 94 5f 05 	call	0xabe	; 0xabe <enc28j60WriteOp>
     e18:	b8 01       	movw	r22, r16
     e1a:	ce 01       	movw	r24, r28
     e1c:	0e 94 86 05 	call	0xb0c	; 0xb0c <enc28j60WriteBuffer>
     e20:	48 e0       	ldi	r20, 0x08	; 8
     e22:	6f e1       	ldi	r22, 0x1F	; 31
     e24:	80 e8       	ldi	r24, 0x80	; 128
     e26:	0e 94 5f 05 	call	0xabe	; 0xabe <enc28j60WriteOp>
     e2a:	df 91       	pop	r29
     e2c:	cf 91       	pop	r28
     e2e:	1f 91       	pop	r17
     e30:	0f 91       	pop	r16
     e32:	08 95       	ret

00000e34 <enc28j60PacketReceive>:
// The packet will by headed by an ethernet header.
//      maxlen  The maximum acceptable length of a retrieved packet.
//      packet  Pointer where packet data should be stored.
// Returns: Packet length in bytes if a packet was retrieved, zero otherwise.
uint16_t enc28j60PacketReceive(uint16_t maxlen, uint8_t* packet)
{
     e34:	af 92       	push	r10
     e36:	bf 92       	push	r11
     e38:	cf 92       	push	r12
     e3a:	df 92       	push	r13
     e3c:	ef 92       	push	r14
     e3e:	ff 92       	push	r15
     e40:	0f 93       	push	r16
     e42:	1f 93       	push	r17
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
     e48:	6c 01       	movw	r12, r24
     e4a:	7b 01       	movw	r14, r22
	uint16_t rxstat;
	uint16_t len;
	// check if a packet has been received and buffered
	//if( !(enc28j60Read(EIR) & EIR_PKTIF) )
        // The above does not work. See Rev. B4 Silicon Errata point 6.
	if( enc28j60Read(EPKTCNT) ==0 ){
     e4c:	89 e3       	ldi	r24, 0x39	; 57
     e4e:	0e 94 c6 05 	call	0xb8c	; 0xb8c <enc28j60Read>
     e52:	88 23       	and	r24, r24
     e54:	09 f4       	brne	.+2      	; 0xe58 <enc28j60PacketReceive+0x24>
     e56:	64 c0       	rjmp	.+200    	; 0xf20 <enc28j60PacketReceive+0xec>
		return(0);
        }

	// Set the read pointer to the start of the received packet
	enc28j60Write(ERDPTL, (gNextPacketPtr &0xFF));
     e58:	60 91 9f 02 	lds	r22, 0x029F	; 0x80029f <gNextPacketPtr>
     e5c:	c0 91 a0 02 	lds	r28, 0x02A0	; 0x8002a0 <gNextPacketPtr+0x1>
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
	enc28j60Write(ERDPTH, (gNextPacketPtr)>>8);
     e66:	6c 2f       	mov	r22, r28
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
	// read the next packet pointer
	gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     e6e:	60 e0       	ldi	r22, 0x00	; 0
     e70:	8a e3       	ldi	r24, 0x3A	; 58
     e72:	0e 94 4a 05 	call	0xa94	; 0xa94 <enc28j60ReadOp>
     e76:	c8 2f       	mov	r28, r24
	gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     e78:	60 e0       	ldi	r22, 0x00	; 0
     e7a:	8a e3       	ldi	r24, 0x3A	; 58
     e7c:	0e 94 4a 05 	call	0xa94	; 0xa94 <enc28j60ReadOp>
     e80:	d0 e0       	ldi	r29, 0x00	; 0
     e82:	d8 2b       	or	r29, r24
     e84:	d0 93 a0 02 	sts	0x02A0, r29	; 0x8002a0 <gNextPacketPtr+0x1>
     e88:	c0 93 9f 02 	sts	0x029F, r28	; 0x80029f <gNextPacketPtr>
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     e8c:	60 e0       	ldi	r22, 0x00	; 0
     e8e:	8a e3       	ldi	r24, 0x3A	; 58
     e90:	0e 94 4a 05 	call	0xa94	; 0xa94 <enc28j60ReadOp>
     e94:	b8 2e       	mov	r11, r24
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     e96:	60 e0       	ldi	r22, 0x00	; 0
     e98:	8a e3       	ldi	r24, 0x3A	; 58
     e9a:	0e 94 4a 05 	call	0xa94	; 0xa94 <enc28j60ReadOp>
     e9e:	a8 2e       	mov	r10, r24
        len-=4; //remove the CRC count
	// read the receive status (see datasheet page 43)
	rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     ea0:	60 e0       	ldi	r22, 0x00	; 0
     ea2:	8a e3       	ldi	r24, 0x3A	; 58
     ea4:	0e 94 4a 05 	call	0xa94	; 0xa94 <enc28j60ReadOp>
     ea8:	08 2f       	mov	r16, r24
	rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
     eaa:	60 e0       	ldi	r22, 0x00	; 0
     eac:	8a e3       	ldi	r24, 0x3A	; 58
     eae:	0e 94 4a 05 	call	0xa94	; 0xa94 <enc28j60ReadOp>
                len=maxlen-1;
        }
        // check CRC and symbol errors (see datasheet page 44, table 7-3):
        // The ERXFCON.CRCEN is set by default. Normally we should not
        // need to check this.
        if ((rxstat & 0x80)==0){
     eb2:	07 ff       	sbrs	r16, 7
     eb4:	11 c0       	rjmp	.+34     	; 0xed8 <enc28j60PacketReceive+0xa4>
        len-=4; //remove the CRC count
	// read the receive status (see datasheet page 43)
	rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
	// limit retrieve length
        if (len>maxlen-1){
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	c8 1a       	sub	r12, r24
     eba:	d1 08       	sbc	r13, r1
	// read the next packet pointer
	gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     ebc:	0b 2d       	mov	r16, r11
     ebe:	10 e0       	ldi	r17, 0x00	; 0
     ec0:	1a 29       	or	r17, r10
     ec2:	04 50       	subi	r16, 0x04	; 4
     ec4:	11 09       	sbc	r17, r1
     ec6:	c0 16       	cp	r12, r16
     ec8:	d1 06       	cpc	r13, r17
     eca:	08 f4       	brcc	.+2      	; 0xece <enc28j60PacketReceive+0x9a>
     ecc:	86 01       	movw	r16, r12
        if ((rxstat & 0x80)==0){
                // invalid
                len=0;
        }else{
                // copy the packet from the receive buffer
                enc28j60ReadBuffer(len, packet);
     ece:	b7 01       	movw	r22, r14
     ed0:	c8 01       	movw	r24, r16
     ed2:	0e 94 6c 05 	call	0xad8	; 0xad8 <enc28j60ReadBuffer>
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <enc28j60PacketReceive+0xa8>
        // check CRC and symbol errors (see datasheet page 44, table 7-3):
        // The ERXFCON.CRCEN is set by default. Normally we should not
        // need to check this.
        if ((rxstat & 0x80)==0){
                // invalid
                len=0;
     ed8:	00 e0       	ldi	r16, 0x00	; 0
     eda:	10 e0       	ldi	r17, 0x00	; 0
        //
        // Move the RX read pointer to the start of the next received packet
        // This frees the memory we just read out. 
        // However, compensate for the errata point 13, rev B4: never write an even address!
        // gNextPacketPtr is always an even address if RXSTOP_INIT is odd.
        if (gNextPacketPtr -1 > RXSTOP_INIT){ // RXSTART_INIT is zero, no test for gNextPacketPtr less than RXSTART_INIT.
     edc:	7e 01       	movw	r14, r28
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	e8 1a       	sub	r14, r24
     ee2:	f1 08       	sbc	r15, r1
     ee4:	e1 14       	cp	r14, r1
     ee6:	8a e1       	ldi	r24, 0x1A	; 26
     ee8:	f8 06       	cpc	r15, r24
     eea:	4c f0       	brlt	.+18     	; 0xefe <enc28j60PacketReceive+0xca>
                enc28j60Write(ERXRDPTL, (RXSTOP_INIT)&0xFF);
     eec:	6f ef       	ldi	r22, 0xFF	; 255
     eee:	8c e0       	ldi	r24, 0x0C	; 12
     ef0:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
                enc28j60Write(ERXRDPTH, (RXSTOP_INIT)>>8);
     ef4:	69 e1       	ldi	r22, 0x19	; 25
     ef6:	8d e0       	ldi	r24, 0x0D	; 13
     ef8:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
     efc:	09 c0       	rjmp	.+18     	; 0xf10 <enc28j60PacketReceive+0xdc>
        } else {
                enc28j60Write(ERXRDPTL, (gNextPacketPtr-1)&0xFF);
     efe:	6c 2f       	mov	r22, r28
     f00:	61 50       	subi	r22, 0x01	; 1
     f02:	8c e0       	ldi	r24, 0x0C	; 12
     f04:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
                enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
     f08:	6f 2d       	mov	r22, r15
     f0a:	8d e0       	ldi	r24, 0x0D	; 13
     f0c:	0e 94 d0 05 	call	0xba0	; 0xba0 <enc28j60Write>
        }
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
     f10:	40 e4       	ldi	r20, 0x40	; 64
     f12:	6e e1       	ldi	r22, 0x1E	; 30
     f14:	80 e8       	ldi	r24, 0x80	; 128
     f16:	0e 94 5f 05 	call	0xabe	; 0xabe <enc28j60WriteOp>
	return(len);
     f1a:	80 2f       	mov	r24, r16
     f1c:	91 2f       	mov	r25, r17
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <enc28j60PacketReceive+0xf0>
	uint16_t len;
	// check if a packet has been received and buffered
	//if( !(enc28j60Read(EIR) & EIR_PKTIF) )
        // The above does not work. See Rev. B4 Silicon Errata point 6.
	if( enc28j60Read(EPKTCNT) ==0 ){
		return(0);
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	90 e0       	ldi	r25, 0x00	; 0
                enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
        }
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
	return(len);
}
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	1f 91       	pop	r17
     f2a:	0f 91       	pop	r16
     f2c:	ff 90       	pop	r15
     f2e:	ef 90       	pop	r14
     f30:	df 90       	pop	r13
     f32:	cf 90       	pop	r12
     f34:	bf 90       	pop	r11
     f36:	af 90       	pop	r10
     f38:	08 95       	ret

00000f3a <www_client_internal_result_callback>:
        client_additionalheaderline_p=additionalheaderline_p;
        client_postval=postval;
        browsertype=1;
        client_browser_callback=callback;
        www_fd=client_tcp_req(&www_client_internal_result_callback,&www_client_internal_datafill_callback,80,dstip,dstmac);
}
     f3a:	cf 92       	push	r12
     f3c:	df 92       	push	r13
     f3e:	ef 92       	push	r14
     f40:	ff 92       	push	r15
     f42:	0f 93       	push	r16
     f44:	1f 93       	push	r17
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	ea 01       	movw	r28, r20
     f4c:	89 01       	movw	r16, r18
     f4e:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <www_fd>
     f52:	98 17       	cp	r25, r24
     f54:	61 f0       	breq	.+24     	; 0xf6e <www_client_internal_result_callback+0x34>
     f56:	e0 91 b7 02 	lds	r30, 0x02B7	; 0x8002b7 <client_browser_callback>
     f5a:	f0 91 b8 02 	lds	r31, 0x02B8	; 0x8002b8 <client_browser_callback+0x1>
     f5e:	40 e0       	ldi	r20, 0x00	; 0
     f60:	50 e0       	ldi	r21, 0x00	; 0
     f62:	60 e0       	ldi	r22, 0x00	; 0
     f64:	70 e0       	ldi	r23, 0x00	; 0
     f66:	84 ef       	ldi	r24, 0xF4	; 244
     f68:	91 e0       	ldi	r25, 0x01	; 1
     f6a:	09 95       	icall
     f6c:	5e c0       	rjmp	.+188    	; 0x102a <www_client_internal_result_callback+0xf0>
     f6e:	61 11       	cpse	r22, r1
     f70:	5c c0       	rjmp	.+184    	; 0x102a <www_client_internal_result_callback+0xf0>
     f72:	2d 30       	cpi	r18, 0x0D	; 13
     f74:	31 05       	cpc	r19, r1
     f76:	08 f4       	brcc	.+2      	; 0xf7a <www_client_internal_result_callback+0x40>
     f78:	58 c0       	rjmp	.+176    	; 0x102a <www_client_internal_result_callback+0xf0>
     f7a:	e0 90 b7 02 	lds	r14, 0x02B7	; 0x8002b7 <client_browser_callback>
     f7e:	f0 90 b8 02 	lds	r15, 0x02B8	; 0x8002b8 <client_browser_callback+0x1>
     f82:	e1 14       	cp	r14, r1
     f84:	f1 04       	cpc	r15, r1
     f86:	09 f4       	brne	.+2      	; 0xf8a <www_client_internal_result_callback+0x50>
     f88:	50 c0       	rjmp	.+160    	; 0x102a <www_client_internal_result_callback+0xf0>
     f8a:	c0 90 ab 02 	lds	r12, 0x02AB	; 0x8002ab <bufptr>
     f8e:	d0 90 ac 02 	lds	r13, 0x02AC	; 0x8002ac <bufptr+0x1>
     f92:	f6 01       	movw	r30, r12
     f94:	e4 0f       	add	r30, r20
     f96:	f5 1f       	adc	r31, r21
     f98:	80 85       	ldd	r24, Z+8	; 0x08
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <isblank>
     fa0:	89 2b       	or	r24, r25
     fa2:	b9 f1       	breq	.+110    	; 0x1012 <www_client_internal_result_callback+0xd8>
     fa4:	f6 01       	movw	r30, r12
     fa6:	ec 0f       	add	r30, r28
     fa8:	fd 1f       	adc	r31, r29
     faa:	21 85       	ldd	r18, Z+9	; 0x09
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	20 53       	subi	r18, 0x30	; 48
     fb0:	31 09       	sbc	r19, r1
     fb2:	2a 30       	cpi	r18, 0x0A	; 10
     fb4:	31 05       	cpc	r19, r1
     fb6:	80 f5       	brcc	.+96     	; 0x1018 <www_client_internal_result_callback+0xde>
     fb8:	f6 01       	movw	r30, r12
     fba:	ec 0f       	add	r30, r28
     fbc:	fd 1f       	adc	r31, r29
     fbe:	83 85       	ldd	r24, Z+11	; 0x0b
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	ac 01       	movw	r20, r24
     fc4:	40 53       	subi	r20, 0x30	; 48
     fc6:	51 09       	sbc	r21, r1
     fc8:	4a 30       	cpi	r20, 0x0A	; 10
     fca:	51 05       	cpc	r21, r1
     fcc:	40 f5       	brcc	.+80     	; 0x101e <www_client_internal_result_callback+0xe4>
     fce:	c9 01       	movw	r24, r18
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	22 0f       	add	r18, r18
     fd6:	33 1f       	adc	r19, r19
     fd8:	22 0f       	add	r18, r18
     fda:	33 1f       	adc	r19, r19
     fdc:	22 0f       	add	r18, r18
     fde:	33 1f       	adc	r19, r19
     fe0:	28 0f       	add	r18, r24
     fe2:	39 1f       	adc	r19, r25
     fe4:	f6 01       	movw	r30, r12
     fe6:	ec 0f       	add	r30, r28
     fe8:	fd 1f       	adc	r31, r29
     fea:	82 85       	ldd	r24, Z+10	; 0x0a
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	c0 97       	sbiw	r24, 0x30	; 48
     ff0:	28 0f       	add	r18, r24
     ff2:	39 1f       	adc	r19, r25
     ff4:	c9 01       	movw	r24, r18
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	22 0f       	add	r18, r18
     ffc:	33 1f       	adc	r19, r19
     ffe:	22 0f       	add	r18, r18
    1000:	33 1f       	adc	r19, r19
    1002:	22 0f       	add	r18, r18
    1004:	33 1f       	adc	r19, r19
    1006:	28 0f       	add	r18, r24
    1008:	39 1f       	adc	r19, r25
    100a:	ca 01       	movw	r24, r20
    100c:	82 0f       	add	r24, r18
    100e:	93 1f       	adc	r25, r19
    1010:	08 c0       	rjmp	.+16     	; 0x1022 <www_client_internal_result_callback+0xe8>
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	05 c0       	rjmp	.+10     	; 0x1022 <www_client_internal_result_callback+0xe8>
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <www_client_internal_result_callback+0xe8>
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	a8 01       	movw	r20, r16
    1024:	be 01       	movw	r22, r28
    1026:	f7 01       	movw	r30, r14
    1028:	09 95       	icall
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	1f 91       	pop	r17
    1032:	0f 91       	pop	r16
    1034:	ff 90       	pop	r15
    1036:	ef 90       	pop	r14
    1038:	df 90       	pop	r13
    103a:	cf 90       	pop	r12
    103c:	08 95       	ret

0000103e <checksum>:
    103e:	cf 92       	push	r12
    1040:	df 92       	push	r13
    1042:	ef 92       	push	r14
    1044:	ff 92       	push	r15
    1046:	cf 93       	push	r28
    1048:	df 93       	push	r29
    104a:	ec 01       	movw	r28, r24
    104c:	db 01       	movw	r26, r22
    104e:	41 30       	cpi	r20, 0x01	; 1
    1050:	61 f4       	brne	.+24     	; 0x106a <checksum+0x2c>
    1052:	6b 01       	movw	r12, r22
    1054:	88 e0       	ldi	r24, 0x08	; 8
    1056:	c8 1a       	sub	r12, r24
    1058:	d1 08       	sbc	r13, r1
    105a:	e1 2c       	mov	r14, r1
    105c:	f1 2c       	mov	r15, r1
    105e:	81 e1       	ldi	r24, 0x11	; 17
    1060:	c8 0e       	add	r12, r24
    1062:	d1 1c       	adc	r13, r1
    1064:	e1 1c       	adc	r14, r1
    1066:	f1 1c       	adc	r15, r1
    1068:	11 c0       	rjmp	.+34     	; 0x108c <checksum+0x4e>
    106a:	42 30       	cpi	r20, 0x02	; 2
    106c:	61 f4       	brne	.+24     	; 0x1086 <checksum+0x48>
    106e:	6b 01       	movw	r12, r22
    1070:	88 e0       	ldi	r24, 0x08	; 8
    1072:	c8 1a       	sub	r12, r24
    1074:	d1 08       	sbc	r13, r1
    1076:	e1 2c       	mov	r14, r1
    1078:	f1 2c       	mov	r15, r1
    107a:	86 e0       	ldi	r24, 0x06	; 6
    107c:	c8 0e       	add	r12, r24
    107e:	d1 1c       	adc	r13, r1
    1080:	e1 1c       	adc	r14, r1
    1082:	f1 1c       	adc	r15, r1
    1084:	03 c0       	rjmp	.+6      	; 0x108c <checksum+0x4e>
    1086:	c1 2c       	mov	r12, r1
    1088:	d1 2c       	mov	r13, r1
    108a:	76 01       	movw	r14, r12
    108c:	a2 30       	cpi	r26, 0x02	; 2
    108e:	b1 05       	cpc	r27, r1
    1090:	f0 f0       	brcs	.+60     	; 0x10ce <checksum+0x90>
    1092:	9d 01       	movw	r18, r26
    1094:	fe 01       	movw	r30, r28
    1096:	40 81       	ld	r20, Z
    1098:	50 e0       	ldi	r21, 0x00	; 0
    109a:	60 e0       	ldi	r22, 0x00	; 0
    109c:	70 e0       	ldi	r23, 0x00	; 0
    109e:	76 2f       	mov	r23, r22
    10a0:	65 2f       	mov	r22, r21
    10a2:	54 2f       	mov	r21, r20
    10a4:	44 27       	eor	r20, r20
    10a6:	81 81       	ldd	r24, Z+1	; 0x01
    10a8:	48 2b       	or	r20, r24
    10aa:	c4 0e       	add	r12, r20
    10ac:	d5 1e       	adc	r13, r21
    10ae:	e6 1e       	adc	r14, r22
    10b0:	f7 1e       	adc	r15, r23
    10b2:	32 96       	adiw	r30, 0x02	; 2
    10b4:	22 50       	subi	r18, 0x02	; 2
    10b6:	31 09       	sbc	r19, r1
    10b8:	22 30       	cpi	r18, 0x02	; 2
    10ba:	31 05       	cpc	r19, r1
    10bc:	60 f7       	brcc	.-40     	; 0x1096 <checksum+0x58>
    10be:	cd 01       	movw	r24, r26
    10c0:	02 97       	sbiw	r24, 0x02	; 2
    10c2:	8e 7f       	andi	r24, 0xFE	; 254
    10c4:	02 96       	adiw	r24, 0x02	; 2
    10c6:	c8 0f       	add	r28, r24
    10c8:	d9 1f       	adc	r29, r25
    10ca:	a1 70       	andi	r26, 0x01	; 1
    10cc:	bb 27       	eor	r27, r27
    10ce:	ab 2b       	or	r26, r27
    10d0:	61 f0       	breq	.+24     	; 0x10ea <checksum+0xac>
    10d2:	88 81       	ld	r24, Y
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	a0 e0       	ldi	r26, 0x00	; 0
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	ba 2f       	mov	r27, r26
    10dc:	a9 2f       	mov	r26, r25
    10de:	98 2f       	mov	r25, r24
    10e0:	88 27       	eor	r24, r24
    10e2:	c8 0e       	add	r12, r24
    10e4:	d9 1e       	adc	r13, r25
    10e6:	ea 1e       	adc	r14, r26
    10e8:	fb 1e       	adc	r15, r27
    10ea:	a7 01       	movw	r20, r14
    10ec:	66 27       	eor	r22, r22
    10ee:	77 27       	eor	r23, r23
    10f0:	41 15       	cp	r20, r1
    10f2:	51 05       	cpc	r21, r1
    10f4:	61 05       	cpc	r22, r1
    10f6:	71 05       	cpc	r23, r1
    10f8:	71 f0       	breq	.+28     	; 0x1116 <checksum+0xd8>
    10fa:	ee 24       	eor	r14, r14
    10fc:	ff 24       	eor	r15, r15
    10fe:	c4 0e       	add	r12, r20
    1100:	d5 1e       	adc	r13, r21
    1102:	e6 1e       	adc	r14, r22
    1104:	f7 1e       	adc	r15, r23
    1106:	a7 01       	movw	r20, r14
    1108:	66 27       	eor	r22, r22
    110a:	77 27       	eor	r23, r23
    110c:	41 15       	cp	r20, r1
    110e:	51 05       	cpc	r21, r1
    1110:	61 05       	cpc	r22, r1
    1112:	71 05       	cpc	r23, r1
    1114:	91 f7       	brne	.-28     	; 0x10fa <checksum+0xbc>
    1116:	c6 01       	movw	r24, r12
    1118:	80 95       	com	r24
    111a:	90 95       	com	r25
    111c:	df 91       	pop	r29
    111e:	cf 91       	pop	r28
    1120:	ff 90       	pop	r15
    1122:	ef 90       	pop	r14
    1124:	df 90       	pop	r13
    1126:	cf 90       	pop	r12
    1128:	08 95       	ret

0000112a <init_mac>:
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	41 f0       	breq	.+16     	; 0x113e <init_mac+0x14>
    112e:	26 e0       	ldi	r18, 0x06	; 6
    1130:	fc 01       	movw	r30, r24
    1132:	a3 ed       	ldi	r26, 0xD3	; 211
    1134:	b2 e0       	ldi	r27, 0x02	; 2
    1136:	01 90       	ld	r0, Z+
    1138:	0d 92       	st	X+, r0
    113a:	2a 95       	dec	r18
    113c:	e1 f7       	brne	.-8      	; 0x1136 <init_mac+0xc>
    113e:	08 95       	ret

00001140 <route_via_gw>:
    1140:	cf 93       	push	r28
    1142:	df 93       	push	r29
    1144:	fc 01       	movw	r30, r24
    1146:	30 81       	ld	r19, Z
    1148:	20 91 cf 02 	lds	r18, 0x02CF	; 0x8002cf <ipaddr>
    114c:	23 27       	eor	r18, r19
    114e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <ipnetmask>
    1152:	23 23       	and	r18, r19
    1154:	91 f4       	brne	.+36     	; 0x117a <route_via_gw+0x3a>
    1156:	31 96       	adiw	r30, 0x01	; 1
    1158:	c0 ed       	ldi	r28, 0xD0	; 208
    115a:	d2 e0       	ldi	r29, 0x02	; 2
    115c:	a2 e0       	ldi	r26, 0x02	; 2
    115e:	b1 e0       	ldi	r27, 0x01	; 1
    1160:	ac 01       	movw	r20, r24
    1162:	4c 5f       	subi	r20, 0xFC	; 252
    1164:	5f 4f       	sbci	r21, 0xFF	; 255
    1166:	81 91       	ld	r24, Z+
    1168:	29 91       	ld	r18, Y+
    116a:	9d 91       	ld	r25, X+
    116c:	82 27       	eor	r24, r18
    116e:	89 23       	and	r24, r25
    1170:	31 f4       	brne	.+12     	; 0x117e <route_via_gw+0x3e>
    1172:	e4 17       	cp	r30, r20
    1174:	f5 07       	cpc	r31, r21
    1176:	b9 f7       	brne	.-18     	; 0x1166 <route_via_gw+0x26>
    1178:	03 c0       	rjmp	.+6      	; 0x1180 <route_via_gw+0x40>
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	01 c0       	rjmp	.+2      	; 0x1180 <route_via_gw+0x40>
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	df 91       	pop	r29
    1182:	cf 91       	pop	r28
    1184:	08 95       	ret

00001186 <check_ip_message_is_from>:
    1186:	fc 01       	movw	r30, r24
    1188:	32 8d       	ldd	r19, Z+26	; 0x1a
    118a:	fb 01       	movw	r30, r22
    118c:	20 81       	ld	r18, Z
    118e:	32 13       	cpse	r19, r18
    1190:	0d c0       	rjmp	.+26     	; 0x11ac <check_ip_message_is_from+0x26>
    1192:	dc 01       	movw	r26, r24
    1194:	5b 96       	adiw	r26, 0x1b	; 27
    1196:	31 96       	adiw	r30, 0x01	; 1
    1198:	4e 96       	adiw	r24, 0x1e	; 30
    119a:	3d 91       	ld	r19, X+
    119c:	21 91       	ld	r18, Z+
    119e:	32 13       	cpse	r19, r18
    11a0:	07 c0       	rjmp	.+14     	; 0x11b0 <check_ip_message_is_from+0x2a>
    11a2:	a8 17       	cp	r26, r24
    11a4:	b9 07       	cpc	r27, r25
    11a6:	c9 f7       	brne	.-14     	; 0x119a <check_ip_message_is_from+0x14>
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	08 95       	ret
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	08 95       	ret
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	08 95       	ret

000011b4 <eth_type_is_arp_and_my_ip>:
    11b4:	69 32       	cpi	r22, 0x29	; 41
    11b6:	71 05       	cpc	r23, r1
    11b8:	c8 f0       	brcs	.+50     	; 0x11ec <eth_type_is_arp_and_my_ip+0x38>
    11ba:	fc 01       	movw	r30, r24
    11bc:	24 85       	ldd	r18, Z+12	; 0x0c
    11be:	28 30       	cpi	r18, 0x08	; 8
    11c0:	b9 f4       	brne	.+46     	; 0x11f0 <eth_type_is_arp_and_my_ip+0x3c>
    11c2:	25 85       	ldd	r18, Z+13	; 0x0d
    11c4:	26 30       	cpi	r18, 0x06	; 6
    11c6:	b1 f4       	brne	.+44     	; 0x11f4 <eth_type_is_arp_and_my_ip+0x40>
    11c8:	36 a1       	ldd	r19, Z+38	; 0x26
    11ca:	20 91 cf 02 	lds	r18, 0x02CF	; 0x8002cf <ipaddr>
    11ce:	32 13       	cpse	r19, r18
    11d0:	13 c0       	rjmp	.+38     	; 0x11f8 <eth_type_is_arp_and_my_ip+0x44>
    11d2:	b7 96       	adiw	r30, 0x27	; 39
    11d4:	a0 ed       	ldi	r26, 0xD0	; 208
    11d6:	b2 e0       	ldi	r27, 0x02	; 2
    11d8:	8a 96       	adiw	r24, 0x2a	; 42
    11da:	31 91       	ld	r19, Z+
    11dc:	2d 91       	ld	r18, X+
    11de:	32 13       	cpse	r19, r18
    11e0:	0d c0       	rjmp	.+26     	; 0x11fc <eth_type_is_arp_and_my_ip+0x48>
    11e2:	e8 17       	cp	r30, r24
    11e4:	f9 07       	cpc	r31, r25
    11e6:	c9 f7       	brne	.-14     	; 0x11da <eth_type_is_arp_and_my_ip+0x26>
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	08 95       	ret
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	08 95       	ret
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	08 95       	ret
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	08 95       	ret
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	08 95       	ret
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	08 95       	ret

00001200 <eth_type_is_ip_and_my_ip>:
    1200:	cf 93       	push	r28
    1202:	df 93       	push	r29
    1204:	fc 01       	movw	r30, r24
    1206:	6a 32       	cpi	r22, 0x2A	; 42
    1208:	71 05       	cpc	r23, r1
    120a:	e0 f0       	brcs	.+56     	; 0x1244 <eth_type_is_ip_and_my_ip+0x44>
    120c:	84 85       	ldd	r24, Z+12	; 0x0c
    120e:	88 30       	cpi	r24, 0x08	; 8
    1210:	d9 f4       	brne	.+54     	; 0x1248 <eth_type_is_ip_and_my_ip+0x48>
    1212:	85 85       	ldd	r24, Z+13	; 0x0d
    1214:	81 11       	cpse	r24, r1
    1216:	1a c0       	rjmp	.+52     	; 0x124c <eth_type_is_ip_and_my_ip+0x4c>
    1218:	96 85       	ldd	r25, Z+14	; 0x0e
    121a:	95 34       	cpi	r25, 0x45	; 69
    121c:	c1 f4       	brne	.+48     	; 0x124e <eth_type_is_ip_and_my_ip+0x4e>
    121e:	26 8d       	ldd	r18, Z+30	; 0x1e
    1220:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <ipaddr>
    1224:	29 13       	cpse	r18, r25
    1226:	13 c0       	rjmp	.+38     	; 0x124e <eth_type_is_ip_and_my_ip+0x4e>
    1228:	df 01       	movw	r26, r30
    122a:	5f 96       	adiw	r26, 0x1f	; 31
    122c:	c0 ed       	ldi	r28, 0xD0	; 208
    122e:	d2 e0       	ldi	r29, 0x02	; 2
    1230:	b2 96       	adiw	r30, 0x22	; 34
    1232:	2d 91       	ld	r18, X+
    1234:	99 91       	ld	r25, Y+
    1236:	29 13       	cpse	r18, r25
    1238:	0a c0       	rjmp	.+20     	; 0x124e <eth_type_is_ip_and_my_ip+0x4e>
    123a:	ae 17       	cp	r26, r30
    123c:	bf 07       	cpc	r27, r31
    123e:	c9 f7       	brne	.-14     	; 0x1232 <eth_type_is_ip_and_my_ip+0x32>
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	05 c0       	rjmp	.+10     	; 0x124e <eth_type_is_ip_and_my_ip+0x4e>
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	03 c0       	rjmp	.+6      	; 0x124e <eth_type_is_ip_and_my_ip+0x4e>
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	01 c0       	rjmp	.+2      	; 0x124e <eth_type_is_ip_and_my_ip+0x4e>
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	08 95       	ret

00001254 <make_eth>:
    1254:	fc 01       	movw	r30, r24
    1256:	a3 ed       	ldi	r26, 0xD3	; 211
    1258:	b2 e0       	ldi	r27, 0x02	; 2
    125a:	9c 01       	movw	r18, r24
    125c:	2a 5f       	subi	r18, 0xFA	; 250
    125e:	3f 4f       	sbci	r19, 0xFF	; 255
    1260:	86 81       	ldd	r24, Z+6	; 0x06
    1262:	81 93       	st	Z+, r24
    1264:	8d 91       	ld	r24, X+
    1266:	85 83       	std	Z+5, r24	; 0x05
    1268:	e2 17       	cp	r30, r18
    126a:	f3 07       	cpc	r31, r19
    126c:	c9 f7       	brne	.-14     	; 0x1260 <make_eth+0xc>
    126e:	08 95       	ret

00001270 <fill_ip_hdr_checksum>:
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	ec 01       	movw	r28, r24
    1276:	18 8e       	std	Y+24, r1	; 0x18
    1278:	19 8e       	std	Y+25, r1	; 0x19
    127a:	80 e4       	ldi	r24, 0x40	; 64
    127c:	8c 8b       	std	Y+20, r24	; 0x14
    127e:	1d 8a       	std	Y+21, r1	; 0x15
    1280:	8e 8b       	std	Y+22, r24	; 0x16
    1282:	40 e0       	ldi	r20, 0x00	; 0
    1284:	64 e1       	ldi	r22, 0x14	; 20
    1286:	70 e0       	ldi	r23, 0x00	; 0
    1288:	ce 01       	movw	r24, r28
    128a:	0e 96       	adiw	r24, 0x0e	; 14
    128c:	0e 94 1f 08 	call	0x103e	; 0x103e <checksum>
    1290:	98 8f       	std	Y+24, r25	; 0x18
    1292:	89 8f       	std	Y+25, r24	; 0x19
    1294:	df 91       	pop	r29
    1296:	cf 91       	pop	r28
    1298:	08 95       	ret

0000129a <make_ip>:
    129a:	ac 01       	movw	r20, r24
    129c:	af ec       	ldi	r26, 0xCF	; 207
    129e:	b2 e0       	ldi	r27, 0x02	; 2
    12a0:	fc 01       	movw	r30, r24
    12a2:	7a 96       	adiw	r30, 0x1a	; 26
    12a4:	23 ed       	ldi	r18, 0xD3	; 211
    12a6:	32 e0       	ldi	r19, 0x02	; 2
    12a8:	90 81       	ld	r25, Z
    12aa:	94 83       	std	Z+4, r25	; 0x04
    12ac:	9d 91       	ld	r25, X+
    12ae:	91 93       	st	Z+, r25
    12b0:	a2 17       	cp	r26, r18
    12b2:	b3 07       	cpc	r27, r19
    12b4:	c9 f7       	brne	.-14     	; 0x12a8 <make_ip+0xe>
    12b6:	ca 01       	movw	r24, r20
    12b8:	0e 94 38 09 	call	0x1270	; 0x1270 <fill_ip_hdr_checksum>
    12bc:	08 95       	ret

000012be <step_seq>:
    12be:	fc 01       	movw	r30, r24
    12c0:	ba 96       	adiw	r30, 0x2a	; 42
    12c2:	86 96       	adiw	r24, 0x26	; 38
    12c4:	22 91       	ld	r18, -Z
    12c6:	62 0f       	add	r22, r18
    12c8:	71 1d       	adc	r23, r1
    12ca:	24 81       	ldd	r18, Z+4	; 0x04
    12cc:	64 83       	std	Z+4, r22	; 0x04
    12ce:	44 23       	and	r20, r20
    12d0:	11 f0       	breq	.+4      	; 0x12d6 <step_seq+0x18>
    12d2:	20 83       	st	Z, r18
    12d4:	01 c0       	rjmp	.+2      	; 0x12d8 <step_seq+0x1a>
    12d6:	10 82       	st	Z, r1
    12d8:	67 2f       	mov	r22, r23
    12da:	77 27       	eor	r23, r23
    12dc:	e8 17       	cp	r30, r24
    12de:	f9 07       	cpc	r31, r25
    12e0:	89 f7       	brne	.-30     	; 0x12c4 <step_seq+0x6>
    12e2:	08 95       	ret

000012e4 <make_tcphead>:
    12e4:	cf 93       	push	r28
    12e6:	df 93       	push	r29
    12e8:	ec 01       	movw	r28, r24
    12ea:	8c a1       	ldd	r24, Y+36	; 0x24
    12ec:	9a a1       	ldd	r25, Y+34	; 0x22
    12ee:	9c a3       	std	Y+36, r25	; 0x24
    12f0:	8a a3       	std	Y+34, r24	; 0x22
    12f2:	8d a1       	ldd	r24, Y+37	; 0x25
    12f4:	9b a1       	ldd	r25, Y+35	; 0x23
    12f6:	9d a3       	std	Y+37, r25	; 0x25
    12f8:	8b a3       	std	Y+35, r24	; 0x23
    12fa:	ce 01       	movw	r24, r28
    12fc:	0e 94 5f 09 	call	0x12be	; 0x12be <step_seq>
    1300:	1a aa       	std	Y+50, r1	; 0x32
    1302:	1b aa       	std	Y+51, r1	; 0x33
    1304:	80 e5       	ldi	r24, 0x50	; 80
    1306:	8e a7       	std	Y+46, r24	; 0x2e
    1308:	df 91       	pop	r29
    130a:	cf 91       	pop	r28
    130c:	08 95       	ret

0000130e <make_arp_answer_from_request>:
    130e:	cf 93       	push	r28
    1310:	df 93       	push	r29
    1312:	ec 01       	movw	r28, r24
    1314:	0e 94 2a 09 	call	0x1254	; 0x1254 <make_eth>
    1318:	1c 8a       	std	Y+20, r1	; 0x14
    131a:	82 e0       	ldi	r24, 0x02	; 2
    131c:	8d 8b       	std	Y+21, r24	; 0x15
    131e:	a3 ed       	ldi	r26, 0xD3	; 211
    1320:	b2 e0       	ldi	r27, 0x02	; 2
    1322:	fe 01       	movw	r30, r28
    1324:	76 96       	adiw	r30, 0x16	; 22
    1326:	29 ed       	ldi	r18, 0xD9	; 217
    1328:	32 e0       	ldi	r19, 0x02	; 2
    132a:	80 81       	ld	r24, Z
    132c:	82 87       	std	Z+10, r24	; 0x0a
    132e:	8d 91       	ld	r24, X+
    1330:	81 93       	st	Z+, r24
    1332:	a2 17       	cp	r26, r18
    1334:	b3 07       	cpc	r27, r19
    1336:	c9 f7       	brne	.-14     	; 0x132a <make_arp_answer_from_request+0x1c>
    1338:	af ec       	ldi	r26, 0xCF	; 207
    133a:	b2 e0       	ldi	r27, 0x02	; 2
    133c:	fe 01       	movw	r30, r28
    133e:	7c 96       	adiw	r30, 0x1c	; 28
    1340:	23 ed       	ldi	r18, 0xD3	; 211
    1342:	32 e0       	ldi	r19, 0x02	; 2
    1344:	80 81       	ld	r24, Z
    1346:	82 87       	std	Z+10, r24	; 0x0a
    1348:	8d 91       	ld	r24, X+
    134a:	81 93       	st	Z+, r24
    134c:	a2 17       	cp	r26, r18
    134e:	b3 07       	cpc	r27, r19
    1350:	c9 f7       	brne	.-14     	; 0x1344 <make_arp_answer_from_request+0x36>
    1352:	be 01       	movw	r22, r28
    1354:	8a e2       	ldi	r24, 0x2A	; 42
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	0e 94 d1 06 	call	0xda2	; 0xda2 <enc28j60PacketSend>
    135c:	df 91       	pop	r29
    135e:	cf 91       	pop	r28
    1360:	08 95       	ret

00001362 <make_echo_reply_from_request>:
    1362:	0f 93       	push	r16
    1364:	1f 93       	push	r17
    1366:	cf 93       	push	r28
    1368:	df 93       	push	r29
    136a:	ec 01       	movw	r28, r24
    136c:	8b 01       	movw	r16, r22
    136e:	0e 94 2a 09 	call	0x1254	; 0x1254 <make_eth>
    1372:	ce 01       	movw	r24, r28
    1374:	0e 94 4d 09 	call	0x129a	; 0x129a <make_ip>
    1378:	1a a2       	std	Y+34, r1	; 0x22
    137a:	8c a1       	ldd	r24, Y+36	; 0x24
    137c:	88 3f       	cpi	r24, 0xF8	; 248
    137e:	18 f0       	brcs	.+6      	; 0x1386 <make_echo_reply_from_request+0x24>
    1380:	9d a1       	ldd	r25, Y+37	; 0x25
    1382:	9f 5f       	subi	r25, 0xFF	; 255
    1384:	9d a3       	std	Y+37, r25	; 0x25
    1386:	88 5f       	subi	r24, 0xF8	; 248
    1388:	8c a3       	std	Y+36, r24	; 0x24
    138a:	be 01       	movw	r22, r28
    138c:	c8 01       	movw	r24, r16
    138e:	0e 94 d1 06 	call	0xda2	; 0xda2 <enc28j60PacketSend>
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	1f 91       	pop	r17
    1398:	0f 91       	pop	r16
    139a:	08 95       	ret

0000139c <get_tcp_data_len>:
    139c:	fc 01       	movw	r30, r24
    139e:	20 89       	ldd	r18, Z+16	; 0x10
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	32 2f       	mov	r19, r18
    13a4:	22 27       	eor	r18, r18
    13a6:	81 89       	ldd	r24, Z+17	; 0x11
    13a8:	28 2b       	or	r18, r24
    13aa:	24 51       	subi	r18, 0x14	; 20
    13ac:	31 09       	sbc	r19, r1
    13ae:	86 a5       	ldd	r24, Z+46	; 0x2e
    13b0:	82 95       	swap	r24
    13b2:	8f 70       	andi	r24, 0x0F	; 15
    13b4:	a9 01       	movw	r20, r18
    13b6:	64 e0       	ldi	r22, 0x04	; 4
    13b8:	86 9f       	mul	r24, r22
    13ba:	40 19       	sub	r20, r0
    13bc:	51 09       	sbc	r21, r1
    13be:	11 24       	eor	r1, r1
    13c0:	ca 01       	movw	r24, r20
    13c2:	99 23       	and	r25, r25
    13c4:	14 f4       	brge	.+4      	; 0x13ca <get_tcp_data_len+0x2e>
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	08 95       	ret

000013cc <fill_tcp_data_p>:
    13cc:	9a 01       	movw	r18, r20
    13ce:	2f 5f       	subi	r18, 0xFF	; 255
    13d0:	3f 4f       	sbci	r19, 0xFF	; 255
    13d2:	fa 01       	movw	r30, r20
    13d4:	44 91       	lpm	r20, Z
    13d6:	44 23       	and	r20, r20
    13d8:	69 f0       	breq	.+26     	; 0x13f4 <fill_tcp_data_p+0x28>
    13da:	fb 01       	movw	r30, r22
    13dc:	f6 96       	adiw	r30, 0x36	; 54
    13de:	dc 01       	movw	r26, r24
    13e0:	ae 0f       	add	r26, r30
    13e2:	bf 1f       	adc	r27, r31
    13e4:	f9 01       	movw	r30, r18
    13e6:	4d 93       	st	X+, r20
    13e8:	6f 5f       	subi	r22, 0xFF	; 255
    13ea:	7f 4f       	sbci	r23, 0xFF	; 255
    13ec:	44 91       	lpm	r20, Z
    13ee:	31 96       	adiw	r30, 0x01	; 1
    13f0:	41 11       	cpse	r20, r1
    13f2:	f9 cf       	rjmp	.-14     	; 0x13e6 <fill_tcp_data_p+0x1a>
    13f4:	cb 01       	movw	r24, r22
    13f6:	08 95       	ret

000013f8 <fill_tcp_data_len>:
    13f8:	22 23       	and	r18, r18
    13fa:	91 f0       	breq	.+36     	; 0x1420 <fill_tcp_data_len+0x28>
    13fc:	a4 2f       	mov	r26, r20
    13fe:	b5 2f       	mov	r27, r21
    1400:	ab 01       	movw	r20, r22
    1402:	4a 5c       	subi	r20, 0xCA	; 202
    1404:	5f 4f       	sbci	r21, 0xFF	; 255
    1406:	fc 01       	movw	r30, r24
    1408:	e4 0f       	add	r30, r20
    140a:	f5 1f       	adc	r31, r21
    140c:	92 2f       	mov	r25, r18
    140e:	3d 91       	ld	r19, X+
    1410:	31 93       	st	Z+, r19
    1412:	91 50       	subi	r25, 0x01	; 1
    1414:	e1 f7       	brne	.-8      	; 0x140e <fill_tcp_data_len+0x16>
    1416:	21 50       	subi	r18, 0x01	; 1
    1418:	62 0f       	add	r22, r18
    141a:	71 1d       	adc	r23, r1
    141c:	6f 5f       	subi	r22, 0xFF	; 255
    141e:	7f 4f       	sbci	r23, 0xFF	; 255
    1420:	cb 01       	movw	r24, r22
    1422:	08 95       	ret

00001424 <fill_tcp_data>:
    1424:	fa 01       	movw	r30, r20
    1426:	01 90       	ld	r0, Z+
    1428:	00 20       	and	r0, r0
    142a:	e9 f7       	brne	.-6      	; 0x1426 <fill_tcp_data+0x2>
    142c:	31 97       	sbiw	r30, 0x01	; 1
    142e:	9f 01       	movw	r18, r30
    1430:	24 1b       	sub	r18, r20
    1432:	35 0b       	sbc	r19, r21
    1434:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <fill_tcp_data_len>
    1438:	08 95       	ret

0000143a <www_client_internal_datafill_callback>:
    143a:	ef 92       	push	r14
    143c:	ff 92       	push	r15
    143e:	0f 93       	push	r16
    1440:	1f 93       	push	r17
    1442:	cf 93       	push	r28
    1444:	df 93       	push	r29
    1446:	00 d0       	rcall	.+0      	; 0x1448 <www_client_internal_datafill_callback+0xe>
    1448:	00 d0       	rcall	.+0      	; 0x144a <www_client_internal_datafill_callback+0x10>
    144a:	1f 92       	push	r1
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
    1450:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <www_fd>
    1454:	98 13       	cpse	r25, r24
    1456:	b8 c0       	rjmp	.+368    	; 0x15c8 <www_client_internal_datafill_callback+0x18e>
    1458:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <browsertype>
    145c:	81 11       	cpse	r24, r1
    145e:	30 c0       	rjmp	.+96     	; 0x14c0 <www_client_internal_datafill_callback+0x86>
    1460:	00 91 ab 02 	lds	r16, 0x02AB	; 0x8002ab <bufptr>
    1464:	10 91 ac 02 	lds	r17, 0x02AC	; 0x8002ac <bufptr+0x1>
    1468:	42 ea       	ldi	r20, 0xA2	; 162
    146a:	52 e0       	ldi	r21, 0x02	; 2
    146c:	60 e0       	ldi	r22, 0x00	; 0
    146e:	70 e0       	ldi	r23, 0x00	; 0
    1470:	c8 01       	movw	r24, r16
    1472:	0e 94 e6 09 	call	0x13cc	; 0x13cc <fill_tcp_data_p>
    1476:	40 91 b1 02 	lds	r20, 0x02B1	; 0x8002b1 <client_urlbuf_p>
    147a:	50 91 b2 02 	lds	r21, 0x02B2	; 0x8002b2 <client_urlbuf_p+0x1>
    147e:	bc 01       	movw	r22, r24
    1480:	c8 01       	movw	r24, r16
    1482:	0e 94 e6 09 	call	0x13cc	; 0x13cc <fill_tcp_data_p>
    1486:	40 91 af 02 	lds	r20, 0x02AF	; 0x8002af <client_urlbuf_var>
    148a:	50 91 b0 02 	lds	r21, 0x02B0	; 0x8002b0 <client_urlbuf_var+0x1>
    148e:	bc 01       	movw	r22, r24
    1490:	c8 01       	movw	r24, r16
    1492:	0e 94 12 0a 	call	0x1424	; 0x1424 <fill_tcp_data>
    1496:	40 e9       	ldi	r20, 0x90	; 144
    1498:	52 e0       	ldi	r21, 0x02	; 2
    149a:	bc 01       	movw	r22, r24
    149c:	c8 01       	movw	r24, r16
    149e:	0e 94 e6 09 	call	0x13cc	; 0x13cc <fill_tcp_data_p>
    14a2:	40 91 ad 02 	lds	r20, 0x02AD	; 0x8002ad <client_hoststr>
    14a6:	50 91 ae 02 	lds	r21, 0x02AE	; 0x8002ae <client_hoststr+0x1>
    14aa:	bc 01       	movw	r22, r24
    14ac:	c8 01       	movw	r24, r16
    14ae:	0e 94 e6 09 	call	0x13cc	; 0x13cc <fill_tcp_data_p>
    14b2:	43 e6       	ldi	r20, 0x63	; 99
    14b4:	52 e0       	ldi	r21, 0x02	; 2
    14b6:	bc 01       	movw	r22, r24
    14b8:	c8 01       	movw	r24, r16
    14ba:	0e 94 e6 09 	call	0x13cc	; 0x13cc <fill_tcp_data_p>
    14be:	86 c0       	rjmp	.+268    	; 0x15cc <www_client_internal_datafill_callback+0x192>
    14c0:	81 30       	cpi	r24, 0x01	; 1
    14c2:	09 f0       	breq	.+2      	; 0x14c6 <www_client_internal_datafill_callback+0x8c>
    14c4:	74 c0       	rjmp	.+232    	; 0x15ae <www_client_internal_datafill_callback+0x174>
    14c6:	00 91 ab 02 	lds	r16, 0x02AB	; 0x8002ab <bufptr>
    14ca:	10 91 ac 02 	lds	r17, 0x02AC	; 0x8002ac <bufptr+0x1>
    14ce:	4d e5       	ldi	r20, 0x5D	; 93
    14d0:	52 e0       	ldi	r21, 0x02	; 2
    14d2:	60 e0       	ldi	r22, 0x00	; 0
    14d4:	70 e0       	ldi	r23, 0x00	; 0
    14d6:	c8 01       	movw	r24, r16
    14d8:	0e 94 e6 09 	call	0x13cc	; 0x13cc <fill_tcp_data_p>
    14dc:	40 91 b1 02 	lds	r20, 0x02B1	; 0x8002b1 <client_urlbuf_p>
    14e0:	50 91 b2 02 	lds	r21, 0x02B2	; 0x8002b2 <client_urlbuf_p+0x1>
    14e4:	bc 01       	movw	r22, r24
    14e6:	c8 01       	movw	r24, r16
    14e8:	0e 94 e6 09 	call	0x13cc	; 0x13cc <fill_tcp_data_p>
    14ec:	40 91 af 02 	lds	r20, 0x02AF	; 0x8002af <client_urlbuf_var>
    14f0:	50 91 b0 02 	lds	r21, 0x02B0	; 0x8002b0 <client_urlbuf_var+0x1>
    14f4:	bc 01       	movw	r22, r24
    14f6:	c8 01       	movw	r24, r16
    14f8:	0e 94 12 0a 	call	0x1424	; 0x1424 <fill_tcp_data>
    14fc:	4b e4       	ldi	r20, 0x4B	; 75
    14fe:	52 e0       	ldi	r21, 0x02	; 2
    1500:	bc 01       	movw	r22, r24
    1502:	c8 01       	movw	r24, r16
    1504:	0e 94 e6 09 	call	0x13cc	; 0x13cc <fill_tcp_data_p>
    1508:	40 91 ad 02 	lds	r20, 0x02AD	; 0x8002ad <client_hoststr>
    150c:	50 91 ae 02 	lds	r21, 0x02AE	; 0x8002ae <client_hoststr+0x1>
    1510:	bc 01       	movw	r22, r24
    1512:	c8 01       	movw	r24, r16
    1514:	0e 94 e6 09 	call	0x13cc	; 0x13cc <fill_tcp_data_p>
    1518:	e0 90 b5 02 	lds	r14, 0x02B5	; 0x8002b5 <client_additionalheaderline_p>
    151c:	f0 90 b6 02 	lds	r15, 0x02B6	; 0x8002b6 <client_additionalheaderline_p+0x1>
    1520:	e1 14       	cp	r14, r1
    1522:	f1 04       	cpc	r15, r1
    1524:	59 f0       	breq	.+22     	; 0x153c <www_client_internal_datafill_callback+0x102>
    1526:	48 e4       	ldi	r20, 0x48	; 72
    1528:	52 e0       	ldi	r21, 0x02	; 2
    152a:	bc 01       	movw	r22, r24
    152c:	c8 01       	movw	r24, r16
    152e:	0e 94 e6 09 	call	0x13cc	; 0x13cc <fill_tcp_data_p>
    1532:	a7 01       	movw	r20, r14
    1534:	bc 01       	movw	r22, r24
    1536:	c8 01       	movw	r24, r16
    1538:	0e 94 e6 09 	call	0x13cc	; 0x13cc <fill_tcp_data_p>
    153c:	43 e2       	ldi	r20, 0x23	; 35
    153e:	52 e0       	ldi	r21, 0x02	; 2
    1540:	bc 01       	movw	r22, r24
    1542:	c8 01       	movw	r24, r16
    1544:	0e 94 e6 09 	call	0x13cc	; 0x13cc <fill_tcp_data_p>
    1548:	42 e1       	ldi	r20, 0x12	; 18
    154a:	52 e0       	ldi	r21, 0x02	; 2
    154c:	bc 01       	movw	r22, r24
    154e:	c8 01       	movw	r24, r16
    1550:	0e 94 e6 09 	call	0x13cc	; 0x13cc <fill_tcp_data_p>
    1554:	7c 01       	movw	r14, r24
    1556:	e0 91 b3 02 	lds	r30, 0x02B3	; 0x8002b3 <client_postval>
    155a:	f0 91 b4 02 	lds	r31, 0x02B4	; 0x8002b4 <client_postval+0x1>
    155e:	df 01       	movw	r26, r30
    1560:	0d 90       	ld	r0, X+
    1562:	00 20       	and	r0, r0
    1564:	e9 f7       	brne	.-6      	; 0x1560 <www_client_internal_datafill_callback+0x126>
    1566:	cd 01       	movw	r24, r26
    1568:	01 97       	sbiw	r24, 0x01	; 1
    156a:	4a e0       	ldi	r20, 0x0A	; 10
    156c:	be 01       	movw	r22, r28
    156e:	6f 5f       	subi	r22, 0xFF	; 255
    1570:	7f 4f       	sbci	r23, 0xFF	; 255
    1572:	8e 1b       	sub	r24, r30
    1574:	9f 0b       	sbc	r25, r31
    1576:	0e 94 09 30 	call	0x6012	; 0x6012 <__itoa_ncheck>
    157a:	00 91 ab 02 	lds	r16, 0x02AB	; 0x8002ab <bufptr>
    157e:	10 91 ac 02 	lds	r17, 0x02AC	; 0x8002ac <bufptr+0x1>
    1582:	ae 01       	movw	r20, r28
    1584:	4f 5f       	subi	r20, 0xFF	; 255
    1586:	5f 4f       	sbci	r21, 0xFF	; 255
    1588:	b7 01       	movw	r22, r14
    158a:	c8 01       	movw	r24, r16
    158c:	0e 94 12 0a 	call	0x1424	; 0x1424 <fill_tcp_data>
    1590:	4c ed       	ldi	r20, 0xDC	; 220
    1592:	51 e0       	ldi	r21, 0x01	; 1
    1594:	bc 01       	movw	r22, r24
    1596:	c8 01       	movw	r24, r16
    1598:	0e 94 e6 09 	call	0x13cc	; 0x13cc <fill_tcp_data_p>
    159c:	40 91 b3 02 	lds	r20, 0x02B3	; 0x8002b3 <client_postval>
    15a0:	50 91 b4 02 	lds	r21, 0x02B4	; 0x8002b4 <client_postval+0x1>
    15a4:	bc 01       	movw	r22, r24
    15a6:	c8 01       	movw	r24, r16
    15a8:	0e 94 12 0a 	call	0x1424	; 0x1424 <fill_tcp_data>
    15ac:	0f c0       	rjmp	.+30     	; 0x15cc <www_client_internal_datafill_callback+0x192>
    15ae:	40 91 af 02 	lds	r20, 0x02AF	; 0x8002af <client_urlbuf_var>
    15b2:	50 91 b0 02 	lds	r21, 0x02B0	; 0x8002b0 <client_urlbuf_var+0x1>
    15b6:	60 e0       	ldi	r22, 0x00	; 0
    15b8:	70 e0       	ldi	r23, 0x00	; 0
    15ba:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <bufptr>
    15be:	90 91 ac 02 	lds	r25, 0x02AC	; 0x8002ac <bufptr+0x1>
    15c2:	0e 94 12 0a 	call	0x1424	; 0x1424 <fill_tcp_data>
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <www_client_internal_datafill_callback+0x192>
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	0f 90       	pop	r0
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	df 91       	pop	r29
    15d8:	cf 91       	pop	r28
    15da:	1f 91       	pop	r17
    15dc:	0f 91       	pop	r16
    15de:	ff 90       	pop	r15
    15e0:	ef 90       	pop	r14
    15e2:	08 95       	ret

000015e4 <make_tcp_ack_from_any>:
    15e4:	ff 92       	push	r15
    15e6:	0f 93       	push	r16
    15e8:	1f 93       	push	r17
    15ea:	cf 93       	push	r28
    15ec:	df 93       	push	r29
    15ee:	ec 01       	movw	r28, r24
    15f0:	8b 01       	movw	r16, r22
    15f2:	f4 2e       	mov	r15, r20
    15f4:	0e 94 2a 09 	call	0x1254	; 0x1254 <make_eth>
    15f8:	8f 2d       	mov	r24, r15
    15fa:	80 61       	ori	r24, 0x10	; 16
    15fc:	8f a7       	std	Y+47, r24	; 0x2f
    15fe:	84 e0       	ldi	r24, 0x04	; 4
    1600:	f8 12       	cpse	r15, r24
    1602:	06 c0       	rjmp	.+12     	; 0x1610 <make_tcp_ack_from_any+0x2c>
    1604:	41 e0       	ldi	r20, 0x01	; 1
    1606:	b8 01       	movw	r22, r16
    1608:	ce 01       	movw	r24, r28
    160a:	0e 94 72 09 	call	0x12e4	; 0x12e4 <make_tcphead>
    160e:	0a c0       	rjmp	.+20     	; 0x1624 <make_tcp_ack_from_any+0x40>
    1610:	01 15       	cp	r16, r1
    1612:	11 05       	cpc	r17, r1
    1614:	11 f4       	brne	.+4      	; 0x161a <make_tcp_ack_from_any+0x36>
    1616:	01 e0       	ldi	r16, 0x01	; 1
    1618:	10 e0       	ldi	r17, 0x00	; 0
    161a:	41 e0       	ldi	r20, 0x01	; 1
    161c:	b8 01       	movw	r22, r16
    161e:	ce 01       	movw	r24, r28
    1620:	0e 94 72 09 	call	0x12e4	; 0x12e4 <make_tcphead>
    1624:	18 8a       	std	Y+16, r1	; 0x10
    1626:	88 e2       	ldi	r24, 0x28	; 40
    1628:	89 8b       	std	Y+17, r24	; 0x11
    162a:	ce 01       	movw	r24, r28
    162c:	0e 94 4d 09 	call	0x129a	; 0x129a <make_ip>
    1630:	84 e0       	ldi	r24, 0x04	; 4
    1632:	88 ab       	std	Y+48, r24	; 0x30
    1634:	19 aa       	std	Y+49, r1	; 0x31
    1636:	42 e0       	ldi	r20, 0x02	; 2
    1638:	6c e1       	ldi	r22, 0x1C	; 28
    163a:	70 e0       	ldi	r23, 0x00	; 0
    163c:	ce 01       	movw	r24, r28
    163e:	4a 96       	adiw	r24, 0x1a	; 26
    1640:	0e 94 1f 08 	call	0x103e	; 0x103e <checksum>
    1644:	9a ab       	std	Y+50, r25	; 0x32
    1646:	8b ab       	std	Y+51, r24	; 0x33
    1648:	be 01       	movw	r22, r28
    164a:	86 e3       	ldi	r24, 0x36	; 54
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	0e 94 d1 06 	call	0xda2	; 0xda2 <enc28j60PacketSend>
    1652:	df 91       	pop	r29
    1654:	cf 91       	pop	r28
    1656:	1f 91       	pop	r17
    1658:	0f 91       	pop	r16
    165a:	ff 90       	pop	r15
    165c:	08 95       	ret

0000165e <make_tcp_ack_with_data_noflags>:
    165e:	0f 93       	push	r16
    1660:	1f 93       	push	r17
    1662:	cf 93       	push	r28
    1664:	df 93       	push	r29
    1666:	ec 01       	movw	r28, r24
    1668:	8b 01       	movw	r16, r22
    166a:	cb 01       	movw	r24, r22
    166c:	88 96       	adiw	r24, 0x28	; 40
    166e:	98 8b       	std	Y+16, r25	; 0x10
    1670:	89 8b       	std	Y+17, r24	; 0x11
    1672:	ce 01       	movw	r24, r28
    1674:	0e 94 38 09 	call	0x1270	; 0x1270 <fill_ip_hdr_checksum>
    1678:	1a aa       	std	Y+50, r1	; 0x32
    167a:	1b aa       	std	Y+51, r1	; 0x33
    167c:	b8 01       	movw	r22, r16
    167e:	64 5e       	subi	r22, 0xE4	; 228
    1680:	7f 4f       	sbci	r23, 0xFF	; 255
    1682:	42 e0       	ldi	r20, 0x02	; 2
    1684:	ce 01       	movw	r24, r28
    1686:	4a 96       	adiw	r24, 0x1a	; 26
    1688:	0e 94 1f 08 	call	0x103e	; 0x103e <checksum>
    168c:	9a ab       	std	Y+50, r25	; 0x32
    168e:	8b ab       	std	Y+51, r24	; 0x33
    1690:	be 01       	movw	r22, r28
    1692:	c8 01       	movw	r24, r16
    1694:	c6 96       	adiw	r24, 0x36	; 54
    1696:	0e 94 d1 06 	call	0xda2	; 0xda2 <enc28j60PacketSend>
    169a:	df 91       	pop	r29
    169c:	cf 91       	pop	r28
    169e:	1f 91       	pop	r17
    16a0:	0f 91       	pop	r16
    16a2:	08 95       	ret

000016a4 <init_udp_or_www_server>:
    16a4:	9c 01       	movw	r18, r24
    16a6:	61 15       	cp	r22, r1
    16a8:	71 05       	cpc	r23, r1
    16aa:	51 f0       	breq	.+20     	; 0x16c0 <init_udp_or_www_server+0x1c>
    16ac:	db 01       	movw	r26, r22
    16ae:	ef ec       	ldi	r30, 0xCF	; 207
    16b0:	f2 e0       	ldi	r31, 0x02	; 2
    16b2:	43 ed       	ldi	r20, 0xD3	; 211
    16b4:	52 e0       	ldi	r21, 0x02	; 2
    16b6:	9d 91       	ld	r25, X+
    16b8:	91 93       	st	Z+, r25
    16ba:	e4 17       	cp	r30, r20
    16bc:	f5 07       	cpc	r31, r21
    16be:	d9 f7       	brne	.-10     	; 0x16b6 <init_udp_or_www_server+0x12>
    16c0:	21 15       	cp	r18, r1
    16c2:	31 05       	cpc	r19, r1
    16c4:	19 f0       	breq	.+6      	; 0x16cc <init_udp_or_www_server+0x28>
    16c6:	c9 01       	movw	r24, r18
    16c8:	0e 94 95 08 	call	0x112a	; 0x112a <init_mac>
    16cc:	08 95       	ret

000016ce <www_server_port>:
    16ce:	90 93 a4 02 	sts	0x02A4, r25	; 0x8002a4 <wwwport_h>
    16d2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <wwwport_l>
    16d6:	08 95       	ret

000016d8 <make_tcp_synack_from_syn>:
    16d8:	cf 93       	push	r28
    16da:	df 93       	push	r29
    16dc:	ec 01       	movw	r28, r24
    16de:	0e 94 2a 09 	call	0x1254	; 0x1254 <make_eth>
    16e2:	18 8a       	std	Y+16, r1	; 0x10
    16e4:	8c e2       	ldi	r24, 0x2C	; 44
    16e6:	89 8b       	std	Y+17, r24	; 0x11
    16e8:	ce 01       	movw	r24, r28
    16ea:	0e 94 4d 09 	call	0x129a	; 0x129a <make_ip>
    16ee:	82 e1       	ldi	r24, 0x12	; 18
    16f0:	8f a7       	std	Y+47, r24	; 0x2f
    16f2:	40 e0       	ldi	r20, 0x00	; 0
    16f4:	61 e0       	ldi	r22, 0x01	; 1
    16f6:	70 e0       	ldi	r23, 0x00	; 0
    16f8:	ce 01       	movw	r24, r28
    16fa:	0e 94 72 09 	call	0x12e4	; 0x12e4 <make_tcphead>
    16fe:	1e a2       	std	Y+38, r1	; 0x26
    1700:	1f a2       	std	Y+39, r1	; 0x27
    1702:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <seqnum>
    1706:	88 a7       	std	Y+40, r24	; 0x28
    1708:	19 a6       	std	Y+41, r1	; 0x29
    170a:	8d 5f       	subi	r24, 0xFD	; 253
    170c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <seqnum>
    1710:	82 e0       	ldi	r24, 0x02	; 2
    1712:	8e ab       	std	Y+54, r24	; 0x36
    1714:	84 e0       	ldi	r24, 0x04	; 4
    1716:	8f ab       	std	Y+55, r24	; 0x37
    1718:	85 e0       	ldi	r24, 0x05	; 5
    171a:	88 af       	std	Y+56, r24	; 0x38
    171c:	19 ae       	std	Y+57, r1	; 0x39
    171e:	80 e6       	ldi	r24, 0x60	; 96
    1720:	8e a7       	std	Y+46, r24	; 0x2e
    1722:	8a e0       	ldi	r24, 0x0A	; 10
    1724:	88 ab       	std	Y+48, r24	; 0x30
    1726:	19 aa       	std	Y+49, r1	; 0x31
    1728:	42 e0       	ldi	r20, 0x02	; 2
    172a:	60 e2       	ldi	r22, 0x20	; 32
    172c:	70 e0       	ldi	r23, 0x00	; 0
    172e:	ce 01       	movw	r24, r28
    1730:	4a 96       	adiw	r24, 0x1a	; 26
    1732:	0e 94 1f 08 	call	0x103e	; 0x103e <checksum>
    1736:	9a ab       	std	Y+50, r25	; 0x32
    1738:	8b ab       	std	Y+51, r24	; 0x33
    173a:	be 01       	movw	r22, r28
    173c:	8a e3       	ldi	r24, 0x3A	; 58
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	0e 94 d1 06 	call	0xda2	; 0xda2 <enc28j60PacketSend>
    1744:	df 91       	pop	r29
    1746:	cf 91       	pop	r28
    1748:	08 95       	ret

0000174a <fill_buf_p>:
    174a:	dc 01       	movw	r26, r24
    174c:	fa 01       	movw	r30, r20
    174e:	61 15       	cp	r22, r1
    1750:	71 05       	cpc	r23, r1
    1752:	41 f0       	breq	.+16     	; 0x1764 <fill_buf_p+0x1a>
    1754:	68 0f       	add	r22, r24
    1756:	79 1f       	adc	r23, r25
    1758:	84 91       	lpm	r24, Z
    175a:	8d 93       	st	X+, r24
    175c:	31 96       	adiw	r30, 0x01	; 1
    175e:	6a 17       	cp	r22, r26
    1760:	7b 07       	cpc	r23, r27
    1762:	d1 f7       	brne	.-12     	; 0x1758 <fill_buf_p+0xe>
    1764:	08 95       	ret

00001766 <client_arp_whohas>:
    1766:	cf 92       	push	r12
    1768:	df 92       	push	r13
    176a:	ef 92       	push	r14
    176c:	ff 92       	push	r15
    176e:	0f 93       	push	r16
    1770:	1f 93       	push	r17
    1772:	cf 93       	push	r28
    1774:	df 93       	push	r29
    1776:	7c 01       	movw	r14, r24
    1778:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <ipaddr>
    177c:	88 23       	and	r24, r24
    177e:	d1 f1       	breq	.+116    	; 0x17f4 <client_arp_whohas+0x8e>
    1780:	d7 01       	movw	r26, r14
    1782:	c3 ed       	ldi	r28, 0xD3	; 211
    1784:	d2 e0       	ldi	r29, 0x02	; 2
    1786:	09 ed       	ldi	r16, 0xD9	; 217
    1788:	12 e0       	ldi	r17, 0x02	; 2
    178a:	fe 01       	movw	r30, r28
    178c:	2f ef       	ldi	r18, 0xFF	; 255
    178e:	2d 93       	st	X+, r18
    1790:	91 91       	ld	r25, Z+
    1792:	15 96       	adiw	r26, 0x05	; 5
    1794:	9c 93       	st	X, r25
    1796:	15 97       	sbiw	r26, 0x05	; 5
    1798:	0e 17       	cp	r16, r30
    179a:	1f 07       	cpc	r17, r31
    179c:	c1 f7       	brne	.-16     	; 0x178e <client_arp_whohas+0x28>
    179e:	d7 2e       	mov	r13, r23
    17a0:	c6 2e       	mov	r12, r22
    17a2:	88 e0       	ldi	r24, 0x08	; 8
    17a4:	f7 01       	movw	r30, r14
    17a6:	84 87       	std	Z+12, r24	; 0x0c
    17a8:	86 e0       	ldi	r24, 0x06	; 6
    17aa:	85 87       	std	Z+13, r24	; 0x0d
    17ac:	47 ea       	ldi	r20, 0xA7	; 167
    17ae:	52 e0       	ldi	r21, 0x02	; 2
    17b0:	68 e0       	ldi	r22, 0x08	; 8
    17b2:	70 e0       	ldi	r23, 0x00	; 0
    17b4:	c7 01       	movw	r24, r14
    17b6:	0e 96       	adiw	r24, 0x0e	; 14
    17b8:	0e 94 a5 0b 	call	0x174a	; 0x174a <fill_buf_p>
    17bc:	f7 01       	movw	r30, r14
    17be:	76 96       	adiw	r30, 0x16	; 22
    17c0:	89 91       	ld	r24, Y+
    17c2:	81 93       	st	Z+, r24
    17c4:	11 86       	std	Z+9, r1	; 0x09
    17c6:	0c 17       	cp	r16, r28
    17c8:	1d 07       	cpc	r17, r29
    17ca:	d1 f7       	brne	.-12     	; 0x17c0 <client_arp_whohas+0x5a>
    17cc:	cc 2d       	mov	r28, r12
    17ce:	dd 2d       	mov	r29, r13
    17d0:	af ec       	ldi	r26, 0xCF	; 207
    17d2:	b2 e0       	ldi	r27, 0x02	; 2
    17d4:	f7 01       	movw	r30, r14
    17d6:	7c 96       	adiw	r30, 0x1c	; 28
    17d8:	23 ed       	ldi	r18, 0xD3	; 211
    17da:	32 e0       	ldi	r19, 0x02	; 2
    17dc:	89 91       	ld	r24, Y+
    17de:	82 87       	std	Z+10, r24	; 0x0a
    17e0:	8d 91       	ld	r24, X+
    17e2:	81 93       	st	Z+, r24
    17e4:	a2 17       	cp	r26, r18
    17e6:	b3 07       	cpc	r27, r19
    17e8:	c9 f7       	brne	.-14     	; 0x17dc <client_arp_whohas+0x76>
    17ea:	b7 01       	movw	r22, r14
    17ec:	8a e2       	ldi	r24, 0x2A	; 42
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	0e 94 d1 06 	call	0xda2	; 0xda2 <enc28j60PacketSend>
    17f4:	df 91       	pop	r29
    17f6:	cf 91       	pop	r28
    17f8:	1f 91       	pop	r17
    17fa:	0f 91       	pop	r16
    17fc:	ff 90       	pop	r15
    17fe:	ef 90       	pop	r14
    1800:	df 90       	pop	r13
    1802:	cf 90       	pop	r12
    1804:	08 95       	ret

00001806 <get_mac_with_arp_wait>:
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <arpip_state>
    180c:	92 30       	cpi	r25, 0x02	; 2
    180e:	09 f4       	brne	.+2      	; 0x1812 <get_mac_with_arp_wait+0xc>
    1810:	80 e0       	ldi	r24, 0x00	; 0
    1812:	08 95       	ret

00001814 <get_mac_with_arp>:
    1814:	50 93 1d 04 	sts	0x041D, r21	; 0x80041d <client_arp_result_callback+0x1>
    1818:	40 93 1c 04 	sts	0x041C, r20	; 0x80041c <client_arp_result_callback>
    181c:	21 e0       	ldi	r18, 0x01	; 1
    181e:	20 93 a6 02 	sts	0x02A6, r18	; 0x8002a6 <arpip_state>
    1822:	60 93 a5 02 	sts	0x02A5, r22	; 0x8002a5 <arp_reference_number>
    1826:	dc 01       	movw	r26, r24
    1828:	e7 ea       	ldi	r30, 0xA7	; 167
    182a:	f2 e0       	ldi	r31, 0x02	; 2
    182c:	2b ea       	ldi	r18, 0xAB	; 171
    182e:	32 e0       	ldi	r19, 0x02	; 2
    1830:	8d 91       	ld	r24, X+
    1832:	81 93       	st	Z+, r24
    1834:	e2 17       	cp	r30, r18
    1836:	f3 07       	cpc	r31, r19
    1838:	d9 f7       	brne	.-10     	; 0x1830 <get_mac_with_arp+0x1c>
    183a:	08 95       	ret

0000183c <tcp_client_syn>:
    183c:	df 92       	push	r13
    183e:	ef 92       	push	r14
    1840:	ff 92       	push	r15
    1842:	0f 93       	push	r16
    1844:	1f 93       	push	r17
    1846:	cf 93       	push	r28
    1848:	df 93       	push	r29
    184a:	ec 01       	movw	r28, r24
    184c:	f6 2e       	mov	r15, r22
    184e:	e4 2e       	mov	r14, r20
    1850:	d5 2e       	mov	r13, r21
    1852:	a2 ec       	ldi	r26, 0xC2	; 194
    1854:	b2 e0       	ldi	r27, 0x02	; 2
    1856:	bc 01       	movw	r22, r24
    1858:	83 ed       	ldi	r24, 0xD3	; 211
    185a:	92 e0       	ldi	r25, 0x02	; 2
    185c:	48 ec       	ldi	r20, 0xC8	; 200
    185e:	52 e0       	ldi	r21, 0x02	; 2
    1860:	2d 91       	ld	r18, X+
    1862:	fb 01       	movw	r30, r22
    1864:	21 93       	st	Z+, r18
    1866:	bf 01       	movw	r22, r30
    1868:	fc 01       	movw	r30, r24
    186a:	21 91       	ld	r18, Z+
    186c:	cf 01       	movw	r24, r30
    186e:	fb 01       	movw	r30, r22
    1870:	25 83       	std	Z+5, r18	; 0x05
    1872:	a4 17       	cp	r26, r20
    1874:	b5 07       	cpc	r27, r21
    1876:	a1 f7       	brne	.-24     	; 0x1860 <tcp_client_syn+0x24>
    1878:	88 e0       	ldi	r24, 0x08	; 8
    187a:	8c 87       	std	Y+12, r24	; 0x0c
    187c:	1d 86       	std	Y+13, r1	; 0x0d
    187e:	4f ea       	ldi	r20, 0xAF	; 175
    1880:	52 e0       	ldi	r21, 0x02	; 2
    1882:	69 e0       	ldi	r22, 0x09	; 9
    1884:	70 e0       	ldi	r23, 0x00	; 0
    1886:	ce 01       	movw	r24, r28
    1888:	0e 96       	adiw	r24, 0x0e	; 14
    188a:	0e 94 a5 0b 	call	0x174a	; 0x174a <fill_buf_p>
    188e:	8c e2       	ldi	r24, 0x2C	; 44
    1890:	89 8b       	std	Y+17, r24	; 0x11
    1892:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1896:	8b 8b       	std	Y+19, r24	; 0x13
    1898:	8f 5f       	subi	r24, 0xFF	; 255
    189a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    189e:	86 e0       	ldi	r24, 0x06	; 6
    18a0:	8f 8b       	std	Y+23, r24	; 0x17
    18a2:	a8 ec       	ldi	r26, 0xC8	; 200
    18a4:	b2 e0       	ldi	r27, 0x02	; 2
    18a6:	8f ec       	ldi	r24, 0xCF	; 207
    18a8:	92 e0       	ldi	r25, 0x02	; 2
    18aa:	8e 01       	movw	r16, r28
    18ac:	06 5e       	subi	r16, 0xE6	; 230
    18ae:	1f 4f       	sbci	r17, 0xFF	; 255
    18b0:	b8 01       	movw	r22, r16
    18b2:	4c ec       	ldi	r20, 0xCC	; 204
    18b4:	52 e0       	ldi	r21, 0x02	; 2
    18b6:	2d 91       	ld	r18, X+
    18b8:	fb 01       	movw	r30, r22
    18ba:	24 83       	std	Z+4, r18	; 0x04
    18bc:	fc 01       	movw	r30, r24
    18be:	21 91       	ld	r18, Z+
    18c0:	cf 01       	movw	r24, r30
    18c2:	fb 01       	movw	r30, r22
    18c4:	21 93       	st	Z+, r18
    18c6:	bf 01       	movw	r22, r30
    18c8:	a4 17       	cp	r26, r20
    18ca:	b5 07       	cpc	r27, r21
    18cc:	a1 f7       	brne	.-24     	; 0x18b6 <tcp_client_syn+0x7a>
    18ce:	ce 01       	movw	r24, r28
    18d0:	0e 94 38 09 	call	0x1270	; 0x1270 <fill_ip_hdr_checksum>
    18d4:	dc a2       	std	Y+36, r13	; 0x24
    18d6:	ed a2       	std	Y+37, r14	; 0x25
    18d8:	8b e0       	ldi	r24, 0x0B	; 11
    18da:	8a a3       	std	Y+34, r24	; 0x22
    18dc:	fb a2       	std	Y+35, r15	; 0x23
    18de:	fe 01       	movw	r30, r28
    18e0:	b6 96       	adiw	r30, 0x26	; 38
    18e2:	ce 01       	movw	r24, r28
    18e4:	8e 96       	adiw	r24, 0x2e	; 46
    18e6:	11 92       	st	Z+, r1
    18e8:	8e 17       	cp	r24, r30
    18ea:	9f 07       	cpc	r25, r31
    18ec:	e1 f7       	brne	.-8      	; 0x18e6 <tcp_client_syn+0xaa>
    18ee:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <seqnum>
    18f2:	88 a7       	std	Y+40, r24	; 0x28
    18f4:	8d 5f       	subi	r24, 0xFD	; 253
    18f6:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <seqnum>
    18fa:	80 e6       	ldi	r24, 0x60	; 96
    18fc:	8e a7       	std	Y+46, r24	; 0x2e
    18fe:	82 e0       	ldi	r24, 0x02	; 2
    1900:	8f a7       	std	Y+47, r24	; 0x2f
    1902:	93 e0       	ldi	r25, 0x03	; 3
    1904:	98 ab       	std	Y+48, r25	; 0x30
    1906:	19 aa       	std	Y+49, r1	; 0x31
    1908:	1a aa       	std	Y+50, r1	; 0x32
    190a:	1b aa       	std	Y+51, r1	; 0x33
    190c:	1c aa       	std	Y+52, r1	; 0x34
    190e:	1d aa       	std	Y+53, r1	; 0x35
    1910:	8e ab       	std	Y+54, r24	; 0x36
    1912:	94 e0       	ldi	r25, 0x04	; 4
    1914:	9f ab       	std	Y+55, r25	; 0x37
    1916:	88 af       	std	Y+56, r24	; 0x38
    1918:	8e ee       	ldi	r24, 0xEE	; 238
    191a:	89 af       	std	Y+57, r24	; 0x39
    191c:	42 e0       	ldi	r20, 0x02	; 2
    191e:	60 e2       	ldi	r22, 0x20	; 32
    1920:	70 e0       	ldi	r23, 0x00	; 0
    1922:	c8 01       	movw	r24, r16
    1924:	0e 94 1f 08 	call	0x103e	; 0x103e <checksum>
    1928:	9a ab       	std	Y+50, r25	; 0x32
    192a:	8b ab       	std	Y+51, r24	; 0x33
    192c:	be 01       	movw	r22, r28
    192e:	8a e3       	ldi	r24, 0x3A	; 58
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	0e 94 d1 06 	call	0xda2	; 0xda2 <enc28j60PacketSend>
    1936:	df 91       	pop	r29
    1938:	cf 91       	pop	r28
    193a:	1f 91       	pop	r17
    193c:	0f 91       	pop	r16
    193e:	ff 90       	pop	r15
    1940:	ef 90       	pop	r14
    1942:	df 90       	pop	r13
    1944:	08 95       	ret

00001946 <client_tcp_req>:
    1946:	0f 93       	push	r16
    1948:	1f 93       	push	r17
    194a:	90 93 be 02 	sts	0x02BE, r25	; 0x8002be <client_tcp_result_callback+0x1>
    194e:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <client_tcp_result_callback>
    1952:	70 93 bc 02 	sts	0x02BC, r23	; 0x8002bc <client_tcp_datafill_callback+0x1>
    1956:	60 93 bb 02 	sts	0x02BB, r22	; 0x8002bb <client_tcp_datafill_callback>
    195a:	a2 2f       	mov	r26, r18
    195c:	b3 2f       	mov	r27, r19
    195e:	e8 ec       	ldi	r30, 0xC8	; 200
    1960:	f2 e0       	ldi	r31, 0x02	; 2
    1962:	2c ec       	ldi	r18, 0xCC	; 204
    1964:	32 e0       	ldi	r19, 0x02	; 2
    1966:	8d 91       	ld	r24, X+
    1968:	81 93       	st	Z+, r24
    196a:	e2 17       	cp	r30, r18
    196c:	f3 07       	cpc	r31, r19
    196e:	d9 f7       	brne	.-10     	; 0x1966 <client_tcp_req+0x20>
    1970:	a0 2f       	mov	r26, r16
    1972:	b1 2f       	mov	r27, r17
    1974:	e2 ec       	ldi	r30, 0xC2	; 194
    1976:	f2 e0       	ldi	r31, 0x02	; 2
    1978:	28 ec       	ldi	r18, 0xC8	; 200
    197a:	32 e0       	ldi	r19, 0x02	; 2
    197c:	8d 91       	ld	r24, X+
    197e:	81 93       	st	Z+, r24
    1980:	e2 17       	cp	r30, r18
    1982:	f3 07       	cpc	r31, r19
    1984:	d9 f7       	brne	.-10     	; 0x197c <client_tcp_req+0x36>
    1986:	50 93 c0 02 	sts	0x02C0, r21	; 0x8002c0 <tcp_client_port+0x1>
    198a:	40 93 bf 02 	sts	0x02BF, r20	; 0x8002bf <tcp_client_port>
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <tcp_client_state>
    1994:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <tcp_fd>
    1998:	8f 5f       	subi	r24, 0xFF	; 255
    199a:	88 30       	cpi	r24, 0x08	; 8
    199c:	18 f4       	brcc	.+6      	; 0x19a4 <client_tcp_req+0x5e>
    199e:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <tcp_fd>
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <client_tcp_req+0x62>
    19a4:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <tcp_fd>
    19a8:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <tcp_fd>
    19ac:	1f 91       	pop	r17
    19ae:	0f 91       	pop	r16
    19b0:	08 95       	ret

000019b2 <client_tcpSend>:
#define F_CPU 16000000UL
#include <util/delay.h>
void client_tcpSend(char *urlbuf_varpart,void (*callback)(uint16_t,uint16_t,uint16_t),uint8_t *dstip,uint8_t *dstmac, uint8_t *dstport)
{
    19b2:	8f 92       	push	r8
    19b4:	9f 92       	push	r9
    19b6:	af 92       	push	r10
    19b8:	bf 92       	push	r11
    19ba:	cf 92       	push	r12
    19bc:	df 92       	push	r13
    19be:	ef 92       	push	r14
    19c0:	ff 92       	push	r15
    19c2:	0f 93       	push	r16
    19c4:	1f 93       	push	r17
    19c6:	cf 93       	push	r28
    19c8:	df 93       	push	r29
    19ca:	4c 01       	movw	r8, r24
    19cc:	5b 01       	movw	r10, r22
    19ce:	7a 01       	movw	r14, r20
    19d0:	69 01       	movw	r12, r18
    19d2:	e8 01       	movw	r28, r16
	if (!enc28j60linkup())return;
    19d4:	0e 94 ca 06 	call	0xd94	; 0xd94 <enc28j60linkup>
    19d8:	88 23       	and	r24, r24
    19da:	b1 f0       	breq	.+44     	; 0x1a08 <client_tcpSend+0x56>
	client_urlbuf_var=urlbuf_varpart;
    19dc:	90 92 b0 02 	sts	0x02B0, r9	; 0x8002b0 <client_urlbuf_var+0x1>
    19e0:	80 92 af 02 	sts	0x02AF, r8	; 0x8002af <client_urlbuf_var>
	browsertype=2;
    19e4:	82 e0       	ldi	r24, 0x02	; 2
    19e6:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <browsertype>
	client_browser_callback=callback;
    19ea:	b0 92 b8 02 	sts	0x02B8, r11	; 0x8002b8 <client_browser_callback+0x1>
    19ee:	a0 92 b7 02 	sts	0x02B7, r10	; 0x8002b7 <client_browser_callback>
	www_fd=client_tcp_req(&www_client_internal_result_callback,&www_client_internal_datafill_callback,dstport,dstip,dstmac);
    19f2:	86 01       	movw	r16, r12
    19f4:	97 01       	movw	r18, r14
    19f6:	ae 01       	movw	r20, r28
    19f8:	6d e1       	ldi	r22, 0x1D	; 29
    19fa:	7a e0       	ldi	r23, 0x0A	; 10
    19fc:	8d e9       	ldi	r24, 0x9D	; 157
    19fe:	97 e0       	ldi	r25, 0x07	; 7
    1a00:	0e 94 a3 0c 	call	0x1946	; 0x1946 <client_tcp_req>
    1a04:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <www_fd>
}
    1a08:	df 91       	pop	r29
    1a0a:	cf 91       	pop	r28
    1a0c:	1f 91       	pop	r17
    1a0e:	0f 91       	pop	r16
    1a10:	ff 90       	pop	r15
    1a12:	ef 90       	pop	r14
    1a14:	df 90       	pop	r13
    1a16:	cf 90       	pop	r12
    1a18:	bf 90       	pop	r11
    1a1a:	af 90       	pop	r10
    1a1c:	9f 90       	pop	r9
    1a1e:	8f 90       	pop	r8
    1a20:	08 95       	ret

00001a22 <register_ping_rec_callback>:
#endif // WWW_client

void register_ping_rec_callback(void (*callback)(uint8_t *srcip))
{
        icmp_callback=callback;
    1a22:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <icmp_callback+0x1>
    1a26:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <icmp_callback>
    1a2a:	08 95       	ret

00001a2c <packetloop_arp_icmp_tcp>:


// return 0 to just continue in the packet loop and return the position 
// of the tcp data if there is tcp data part
uint16_t packetloop_arp_icmp_tcp(uint8_t *buf,uint16_t plen)
{
    1a2c:	df 92       	push	r13
    1a2e:	ef 92       	push	r14
    1a30:	ff 92       	push	r15
    1a32:	0f 93       	push	r16
    1a34:	1f 93       	push	r17
    1a36:	cf 93       	push	r28
    1a38:	df 93       	push	r29
    1a3a:	8c 01       	movw	r16, r24
    1a3c:	eb 01       	movw	r28, r22
        uint16_t save_len;
#endif
#ifdef ARP_MAC_resolver_client
        //plen will be unequal to zero if there is a valid 
        // packet (without crc error):
        if(plen==0){
    1a3e:	20 97       	sbiw	r28, 0x00	; 0
    1a40:	09 f0       	breq	.+2      	; 0x1a44 <packetloop_arp_icmp_tcp+0x18>
    1a42:	56 c0       	rjmp	.+172    	; 0x1af0 <packetloop_arp_icmp_tcp+0xc4>
                if (arpip_state == (WGW_ACCEPT_ARP_REPLY|WGW_INITIAL_ARP) && arp_delaycnt==0 ){
    1a44:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <arpip_state>
    1a48:	89 30       	cpi	r24, 0x09	; 9
    1a4a:	79 f4       	brne	.+30     	; 0x1a6a <packetloop_arp_icmp_tcp+0x3e>
    1a4c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <arp_delaycnt>
    1a50:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <arp_delaycnt+0x1>
    1a54:	89 2b       	or	r24, r25
    1a56:	f9 f4       	brne	.+62     	; 0x1a96 <packetloop_arp_icmp_tcp+0x6a>
                        // arp_delaycnt has wrapped no arp reply yet
                        if (enc28j60linkup()) client_arp_whohas(buf,arpip);
    1a58:	0e 94 ca 06 	call	0xd94	; 0xd94 <enc28j60linkup>
    1a5c:	88 23       	and	r24, r24
    1a5e:	29 f0       	breq	.+10     	; 0x1a6a <packetloop_arp_icmp_tcp+0x3e>
    1a60:	67 ea       	ldi	r22, 0xA7	; 167
    1a62:	72 e0       	ldi	r23, 0x02	; 2
    1a64:	c8 01       	movw	r24, r16
    1a66:	0e 94 b3 0b 	call	0x1766	; 0x1766 <client_arp_whohas>
                }
                if (arpip_state == WGW_INITIAL_ARP && enc28j60linkup()){
    1a6a:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <arpip_state>
    1a6e:	81 30       	cpi	r24, 0x01	; 1
    1a70:	91 f4       	brne	.+36     	; 0x1a96 <packetloop_arp_icmp_tcp+0x6a>
    1a72:	0e 94 ca 06 	call	0xd94	; 0xd94 <enc28j60linkup>
    1a76:	88 23       	and	r24, r24
    1a78:	71 f0       	breq	.+28     	; 0x1a96 <packetloop_arp_icmp_tcp+0x6a>
                        client_arp_whohas(buf,arpip);
    1a7a:	67 ea       	ldi	r22, 0xA7	; 167
    1a7c:	72 e0       	ldi	r23, 0x02	; 2
    1a7e:	c8 01       	movw	r24, r16
    1a80:	0e 94 b3 0b 	call	0x1766	; 0x1766 <client_arp_whohas>
                        arpip_state|=WGW_ACCEPT_ARP_REPLY; // WGW_INITIAL_ARP and WGW_ACCEPT_ARP_REPLY set
    1a84:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <arpip_state>
    1a88:	88 60       	ori	r24, 0x08	; 8
    1a8a:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <arpip_state>
                        arp_delaycnt=0; // this is like a timer, not so precise but good enough, it wraps in about 2 sec
    1a8e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <arp_delaycnt+0x1>
    1a92:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <arp_delaycnt>
                }
                arp_delaycnt++;
    1a96:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <arp_delaycnt>
    1a9a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <arp_delaycnt+0x1>
    1a9e:	01 96       	adiw	r24, 0x01	; 1
    1aa0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <arp_delaycnt+0x1>
    1aa4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <arp_delaycnt>
#if defined (TCP_client)
                if (tcp_client_state==1 && enc28j60linkup()){ // send a syn
    1aa8:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <tcp_client_state>
    1aac:	81 30       	cpi	r24, 0x01	; 1
    1aae:	09 f0       	breq	.+2      	; 0x1ab2 <packetloop_arp_icmp_tcp+0x86>
    1ab0:	a8 c1       	rjmp	.+848    	; 0x1e02 <packetloop_arp_icmp_tcp+0x3d6>
    1ab2:	0e 94 ca 06 	call	0xd94	; 0xd94 <enc28j60linkup>
    1ab6:	88 23       	and	r24, r24
    1ab8:	09 f4       	brne	.+2      	; 0x1abc <packetloop_arp_icmp_tcp+0x90>
    1aba:	a6 c1       	rjmp	.+844    	; 0x1e08 <packetloop_arp_icmp_tcp+0x3dc>
                        tcp_client_state=2;
    1abc:	82 e0       	ldi	r24, 0x02	; 2
    1abe:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <tcp_client_state>
                        tcpclient_src_port_l++; // allocate a new port
    1ac2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <tcpclient_src_port_l>
    1ac6:	8f 5f       	subi	r24, 0xFF	; 255
    1ac8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <tcpclient_src_port_l>
                        // we encode our 3 bit fd into the src port this
                        // way we get it back in every message that comes
                        // from the server:
                        tcp_client_syn(buf,((tcp_fd<<5) | (0x1f & tcpclient_src_port_l)),tcp_client_port);
    1acc:	40 91 bf 02 	lds	r20, 0x02BF	; 0x8002bf <tcp_client_port>
    1ad0:	50 91 c0 02 	lds	r21, 0x02C0	; 0x8002c0 <tcp_client_port+0x1>
    1ad4:	60 91 cc 02 	lds	r22, 0x02CC	; 0x8002cc <tcp_fd>
    1ad8:	90 e2       	ldi	r25, 0x20	; 32
    1ada:	69 9f       	mul	r22, r25
    1adc:	b0 01       	movw	r22, r0
    1ade:	11 24       	eor	r1, r1
    1ae0:	8f 71       	andi	r24, 0x1F	; 31
    1ae2:	68 2b       	or	r22, r24
    1ae4:	c8 01       	movw	r24, r16
    1ae6:	0e 94 1e 0c 	call	0x183c	; 0x183c <tcp_client_syn>
                }
#endif
                return(0);
    1aea:	e1 2c       	mov	r14, r1
    1aec:	f1 2c       	mov	r15, r1
    1aee:	c0 c1       	rjmp	.+896    	; 0x1e70 <packetloop_arp_icmp_tcp+0x444>
        }
#endif // ARP_MAC_resolver_client
        // arp is broadcast if unknown but a host may also
        // verify the mac address by sending it to 
        // a unicast address.
        if(eth_type_is_arp_and_my_ip(buf,plen)){
    1af0:	0e 94 da 08 	call	0x11b4	; 0x11b4 <eth_type_is_arp_and_my_ip>
    1af4:	88 23       	and	r24, r24
    1af6:	71 f1       	breq	.+92     	; 0x1b54 <packetloop_arp_icmp_tcp+0x128>
                if (buf[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V){
    1af8:	d8 01       	movw	r26, r16
    1afa:	55 96       	adiw	r26, 0x15	; 21
    1afc:	8c 91       	ld	r24, X
    1afe:	81 30       	cpi	r24, 0x01	; 1
    1b00:	19 f4       	brne	.+6      	; 0x1b08 <packetloop_arp_icmp_tcp+0xdc>
                        // is it an arp request 
                        make_arp_answer_from_request(buf);
    1b02:	c8 01       	movw	r24, r16
    1b04:	0e 94 87 09 	call	0x130e	; 0x130e <make_arp_answer_from_request>
                }
#ifdef ARP_MAC_resolver_client
                if ((arpip_state & WGW_ACCEPT_ARP_REPLY) && (buf[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V)){
    1b08:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <arpip_state>
    1b0c:	83 ff       	sbrs	r24, 3
    1b0e:	7f c1       	rjmp	.+766    	; 0x1e0e <packetloop_arp_icmp_tcp+0x3e2>
    1b10:	f8 01       	movw	r30, r16
    1b12:	85 89       	ldd	r24, Z+21	; 0x15
    1b14:	82 30       	cpi	r24, 0x02	; 2
    1b16:	09 f0       	breq	.+2      	; 0x1b1a <packetloop_arp_icmp_tcp+0xee>
    1b18:	7d c1       	rjmp	.+762    	; 0x1e14 <packetloop_arp_icmp_tcp+0x3e8>
                        // is it an arp reply 
                        if (memcmp(&buf[ETH_ARP_SRC_IP_P],arpip,4)!=0) return(0); // not an arp reply for the IP we were searching           
    1b1a:	44 e0       	ldi	r20, 0x04	; 4
    1b1c:	50 e0       	ldi	r21, 0x00	; 0
    1b1e:	67 ea       	ldi	r22, 0xA7	; 167
    1b20:	72 e0       	ldi	r23, 0x02	; 2
    1b22:	c8 01       	movw	r24, r16
    1b24:	4c 96       	adiw	r24, 0x1c	; 28
    1b26:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <memcmp>
    1b2a:	89 2b       	or	r24, r25
    1b2c:	09 f0       	breq	.+2      	; 0x1b30 <packetloop_arp_icmp_tcp+0x104>
    1b2e:	75 c1       	rjmp	.+746    	; 0x1e1a <packetloop_arp_icmp_tcp+0x3ee>
                        (*client_arp_result_callback)(arpip,arp_reference_number,buf+ETH_ARP_SRC_MAC_P);
    1b30:	a8 01       	movw	r20, r16
    1b32:	4a 5e       	subi	r20, 0xEA	; 234
    1b34:	5f 4f       	sbci	r21, 0xFF	; 255
    1b36:	e0 91 1c 04 	lds	r30, 0x041C	; 0x80041c <client_arp_result_callback>
    1b3a:	f0 91 1d 04 	lds	r31, 0x041D	; 0x80041d <client_arp_result_callback+0x1>
    1b3e:	60 91 a5 02 	lds	r22, 0x02A5	; 0x8002a5 <arp_reference_number>
    1b42:	87 ea       	ldi	r24, 0xA7	; 167
    1b44:	92 e0       	ldi	r25, 0x02	; 2
    1b46:	09 95       	icall
                        arpip_state=WGW_HAVE_MAC;
    1b48:	82 e0       	ldi	r24, 0x02	; 2
    1b4a:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <arpip_state>
                }
#endif // ARP_MAC_resolver_client
                return(0);
    1b4e:	e1 2c       	mov	r14, r1
    1b50:	f1 2c       	mov	r15, r1
    1b52:	8e c1       	rjmp	.+796    	; 0x1e70 <packetloop_arp_icmp_tcp+0x444>

        }
        // check if ip packets are for us:
        if(eth_type_is_ip_and_my_ip(buf,plen)==0){
    1b54:	be 01       	movw	r22, r28
    1b56:	c8 01       	movw	r24, r16
    1b58:	0e 94 00 09 	call	0x1200	; 0x1200 <eth_type_is_ip_and_my_ip>
    1b5c:	88 23       	and	r24, r24
    1b5e:	09 f4       	brne	.+2      	; 0x1b62 <packetloop_arp_icmp_tcp+0x136>
    1b60:	5f c1       	rjmp	.+702    	; 0x1e20 <packetloop_arp_icmp_tcp+0x3f4>
                return(0);
        }
        if(buf[IP_PROTO_P]==IP_PROTO_ICMP_V && buf[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V){
    1b62:	d8 01       	movw	r26, r16
    1b64:	57 96       	adiw	r26, 0x17	; 23
    1b66:	8c 91       	ld	r24, X
    1b68:	57 97       	sbiw	r26, 0x17	; 23
    1b6a:	81 30       	cpi	r24, 0x01	; 1
    1b6c:	a9 f4       	brne	.+42     	; 0x1b98 <packetloop_arp_icmp_tcp+0x16c>
    1b6e:	92 96       	adiw	r26, 0x22	; 34
    1b70:	8c 91       	ld	r24, X
    1b72:	88 30       	cpi	r24, 0x08	; 8
    1b74:	09 f0       	breq	.+2      	; 0x1b78 <packetloop_arp_icmp_tcp+0x14c>
    1b76:	57 c1       	rjmp	.+686    	; 0x1e26 <packetloop_arp_icmp_tcp+0x3fa>
                if (icmp_callback){
    1b78:	e0 91 cd 02 	lds	r30, 0x02CD	; 0x8002cd <icmp_callback>
    1b7c:	f0 91 ce 02 	lds	r31, 0x02CE	; 0x8002ce <icmp_callback+0x1>
    1b80:	30 97       	sbiw	r30, 0x00	; 0
    1b82:	19 f0       	breq	.+6      	; 0x1b8a <packetloop_arp_icmp_tcp+0x15e>
                        (*icmp_callback)(&(buf[IP_SRC_P]));
    1b84:	c8 01       	movw	r24, r16
    1b86:	4a 96       	adiw	r24, 0x1a	; 26
    1b88:	09 95       	icall
                }
                // a ping packet, let's send pong
                make_echo_reply_from_request(buf,plen);
    1b8a:	be 01       	movw	r22, r28
    1b8c:	c8 01       	movw	r24, r16
    1b8e:	0e 94 b1 09 	call	0x1362	; 0x1362 <make_echo_reply_from_request>
                return(0);
    1b92:	e1 2c       	mov	r14, r1
    1b94:	f1 2c       	mov	r15, r1
    1b96:	6c c1       	rjmp	.+728    	; 0x1e70 <packetloop_arp_icmp_tcp+0x444>
        }
        // this is an important check to avoid working on the wrong packets:
        if (plen<54 || buf[IP_PROTO_P]!=IP_PROTO_TCP_V ){
    1b98:	c6 33       	cpi	r28, 0x36	; 54
    1b9a:	d1 05       	cpc	r29, r1
    1b9c:	08 f4       	brcc	.+2      	; 0x1ba0 <packetloop_arp_icmp_tcp+0x174>
    1b9e:	46 c1       	rjmp	.+652    	; 0x1e2c <packetloop_arp_icmp_tcp+0x400>
    1ba0:	86 30       	cpi	r24, 0x06	; 6
    1ba2:	09 f0       	breq	.+2      	; 0x1ba6 <packetloop_arp_icmp_tcp+0x17a>
    1ba4:	46 c1       	rjmp	.+652    	; 0x1e32 <packetloop_arp_icmp_tcp+0x406>
                // smaller than the smallest TCP packet (TCP packet with no options section) or not tcp port
                return(0);
        }
#if defined (TCP_client)
        // a message for the tcp client, tcp_client_state is zero if client was never used
        if ( buf[TCP_DST_PORT_H_P]==TCPCLIENT_SRC_PORT_H){
    1ba6:	f8 01       	movw	r30, r16
    1ba8:	84 a1       	ldd	r24, Z+36	; 0x24
    1baa:	8b 30       	cpi	r24, 0x0B	; 11
    1bac:	09 f0       	breq	.+2      	; 0x1bb0 <packetloop_arp_icmp_tcp+0x184>
    1bae:	f0 c0       	rjmp	.+480    	; 0x1d90 <packetloop_arp_icmp_tcp+0x364>
#if defined (WWW_client)
                // workaround to pass pointer to www_client_internal..
                bufptr=buf; 
    1bb0:	10 93 ac 02 	sts	0x02AC, r17	; 0x8002ac <bufptr+0x1>
    1bb4:	00 93 ab 02 	sts	0x02AB, r16	; 0x8002ab <bufptr>
#endif // WWW_client
                if (check_ip_message_is_from(buf,tcp_otherside_ip)==0){
    1bb8:	68 ec       	ldi	r22, 0xC8	; 200
    1bba:	72 e0       	ldi	r23, 0x02	; 2
    1bbc:	c8 01       	movw	r24, r16
    1bbe:	0e 94 c3 08 	call	0x1186	; 0x1186 <check_ip_message_is_from>
    1bc2:	88 23       	and	r24, r24
    1bc4:	09 f4       	brne	.+2      	; 0x1bc8 <packetloop_arp_icmp_tcp+0x19c>
    1bc6:	38 c1       	rjmp	.+624    	; 0x1e38 <packetloop_arp_icmp_tcp+0x40c>
                        return(0);
                }
                // if we get a reset:
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_RST_V){
    1bc8:	d8 01       	movw	r26, r16
    1bca:	9f 96       	adiw	r26, 0x2f	; 47
    1bcc:	dc 90       	ld	r13, X
    1bce:	9f 97       	sbiw	r26, 0x2f	; 47
    1bd0:	d2 fe       	sbrs	r13, 2
    1bd2:	17 c0       	rjmp	.+46     	; 0x1c02 <packetloop_arp_icmp_tcp+0x1d6>
                        if (client_tcp_result_callback){
    1bd4:	e0 91 bd 02 	lds	r30, 0x02BD	; 0x8002bd <client_tcp_result_callback>
    1bd8:	f0 91 be 02 	lds	r31, 0x02BE	; 0x8002be <client_tcp_result_callback+0x1>
    1bdc:	30 97       	sbiw	r30, 0x00	; 0
    1bde:	59 f0       	breq	.+22     	; 0x1bf6 <packetloop_arp_icmp_tcp+0x1ca>
                                // parameters in client_tcp_result_callback: fd, status, buf_start, len
                                (*client_tcp_result_callback)((buf[TCP_DST_PORT_L_P]>>5)&0x7,3,0,0);
    1be0:	95 96       	adiw	r26, 0x25	; 37
    1be2:	8c 91       	ld	r24, X
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	40 e0       	ldi	r20, 0x00	; 0
    1bea:	50 e0       	ldi	r21, 0x00	; 0
    1bec:	63 e0       	ldi	r22, 0x03	; 3
    1bee:	82 95       	swap	r24
    1bf0:	86 95       	lsr	r24
    1bf2:	87 70       	andi	r24, 0x07	; 7
    1bf4:	09 95       	icall
                        }
                        tcp_client_state=6;
    1bf6:	86 e0       	ldi	r24, 0x06	; 6
    1bf8:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <tcp_client_state>
                        return(0);
    1bfc:	e1 2c       	mov	r14, r1
    1bfe:	f1 2c       	mov	r15, r1
    1c00:	37 c1       	rjmp	.+622    	; 0x1e70 <packetloop_arp_icmp_tcp+0x444>
                }
                len=get_tcp_data_len(buf);
    1c02:	c8 01       	movw	r24, r16
    1c04:	0e 94 ce 09 	call	0x139c	; 0x139c <get_tcp_data_len>
    1c08:	7c 01       	movw	r14, r24
                if (tcp_client_state==2){
    1c0a:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <tcp_client_state>
    1c0e:	82 30       	cpi	r24, 0x02	; 2
    1c10:	d9 f5       	brne	.+118    	; 0x1c88 <packetloop_arp_icmp_tcp+0x25c>
    1c12:	9d 2d       	mov	r25, r13
    1c14:	90 71       	andi	r25, 0x10	; 16
                        if ((buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V) && (buf[TCP_FLAGS_P] &TCP_FLAGS_ACK_V)){
    1c16:	8d 2d       	mov	r24, r13
    1c18:	82 71       	andi	r24, 0x12	; 18
    1c1a:	82 31       	cpi	r24, 0x12	; 18
    1c1c:	19 f5       	brne	.+70     	; 0x1c64 <packetloop_arp_icmp_tcp+0x238>
                                // synack, answer with ack
                                make_tcp_ack_from_any(buf,0,0);
    1c1e:	40 e0       	ldi	r20, 0x00	; 0
    1c20:	60 e0       	ldi	r22, 0x00	; 0
    1c22:	70 e0       	ldi	r23, 0x00	; 0
    1c24:	c8 01       	movw	r24, r16
    1c26:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <make_tcp_ack_from_any>
                                buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V;
    1c2a:	88 e1       	ldi	r24, 0x18	; 24
    1c2c:	f8 01       	movw	r30, r16
    1c2e:	87 a7       	std	Z+47, r24	; 0x2f

                                // Make a tcp message with data. When calling this function we must
                                // still have a valid tcp-ack in the buffer. In other words
                                // you have just called make_tcp_ack_from_any(buf,0).
                                if (client_tcp_datafill_callback){
    1c30:	e0 91 bb 02 	lds	r30, 0x02BB	; 0x8002bb <client_tcp_datafill_callback>
    1c34:	f0 91 bc 02 	lds	r31, 0x02BC	; 0x8002bc <client_tcp_datafill_callback+0x1>
    1c38:	30 97       	sbiw	r30, 0x00	; 0
    1c3a:	41 f0       	breq	.+16     	; 0x1c4c <packetloop_arp_icmp_tcp+0x220>
                                        // in this case it is src port because the above 
                                        // make_tcp_ack_from_any swaps the dst and src port:
                                        len=(*client_tcp_datafill_callback)((buf[TCP_SRC_PORT_L_P]>>5)&0x7);
    1c3c:	d8 01       	movw	r26, r16
    1c3e:	93 96       	adiw	r26, 0x23	; 35
    1c40:	8c 91       	ld	r24, X
    1c42:	82 95       	swap	r24
    1c44:	86 95       	lsr	r24
    1c46:	87 70       	andi	r24, 0x07	; 7
    1c48:	09 95       	icall
    1c4a:	02 c0       	rjmp	.+4      	; 0x1c50 <packetloop_arp_icmp_tcp+0x224>
                                }else{
                                        // this is just to prevent a crash
                                        len=0;
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
                                }
                                tcp_client_state=3;
    1c50:	23 e0       	ldi	r18, 0x03	; 3
    1c52:	20 93 c1 02 	sts	0x02C1, r18	; 0x8002c1 <tcp_client_state>
                                make_tcp_ack_with_data_noflags(buf,len);
    1c56:	bc 01       	movw	r22, r24
    1c58:	c8 01       	movw	r24, r16
    1c5a:	0e 94 2f 0b 	call	0x165e	; 0x165e <make_tcp_ack_with_data_noflags>
                                return(0);
    1c5e:	e1 2c       	mov	r14, r1
    1c60:	f1 2c       	mov	r15, r1
    1c62:	06 c1       	rjmp	.+524    	; 0x1e70 <packetloop_arp_icmp_tcp+0x444>
                        }else{
                                // reset only if we have sent a syn and don't get syn-ack back.
                                // If we connect to a non listen port then we get a RST
                                // which will be handeled above. In other words there is
                                // normally no danger for an endless loop.
                                tcp_client_state=1; // retry
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <tcp_client_state>
                                // do not inform application layer as we retry.
                                len++;
                                if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
    1c6a:	91 11       	cpse	r25, r1
    1c6c:	04 c0       	rjmp	.+8      	; 0x1c76 <packetloop_arp_icmp_tcp+0x24a>
                                // If we connect to a non listen port then we get a RST
                                // which will be handeled above. In other words there is
                                // normally no danger for an endless loop.
                                tcp_client_state=1; // retry
                                // do not inform application layer as we retry.
                                len++;
    1c6e:	b7 01       	movw	r22, r14
    1c70:	6f 5f       	subi	r22, 0xFF	; 255
    1c72:	7f 4f       	sbci	r23, 0xFF	; 255
    1c74:	02 c0       	rjmp	.+4      	; 0x1c7a <packetloop_arp_icmp_tcp+0x24e>
                                if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
                                        // if packet was an ack then do not step the ack number
                                        len=0;
    1c76:	60 e0       	ldi	r22, 0x00	; 0
    1c78:	70 e0       	ldi	r23, 0x00	; 0
                                }
                                // refuse and reset the connection
                                make_tcp_ack_from_any(buf,len,TCP_FLAGS_RST_V);
    1c7a:	44 e0       	ldi	r20, 0x04	; 4
    1c7c:	c8 01       	movw	r24, r16
    1c7e:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <make_tcp_ack_from_any>
                                return(0);
    1c82:	e1 2c       	mov	r14, r1
    1c84:	f1 2c       	mov	r15, r1
    1c86:	f4 c0       	rjmp	.+488    	; 0x1e70 <packetloop_arp_icmp_tcp+0x444>
                        }
                }
                // in tcp_client_state==3 we will normally first get an empty
                // ack-packet and then a ack-packet with data.
                if (tcp_client_state==3 && len>0){ 
    1c88:	83 30       	cpi	r24, 0x03	; 3
    1c8a:	09 f0       	breq	.+2      	; 0x1c8e <packetloop_arp_icmp_tcp+0x262>
    1c8c:	3f c0       	rjmp	.+126    	; 0x1d0c <packetloop_arp_icmp_tcp+0x2e0>
    1c8e:	e1 14       	cp	r14, r1
    1c90:	f1 04       	cpc	r15, r1
    1c92:	09 f4       	brne	.+2      	; 0x1c96 <packetloop_arp_icmp_tcp+0x26a>
    1c94:	e6 c0       	rjmp	.+460    	; 0x1e62 <packetloop_arp_icmp_tcp+0x436>
                        // our first real data packet
                        tcp_client_state=4;
    1c96:	84 e0       	ldi	r24, 0x04	; 4
    1c98:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <tcp_client_state>
                        // return the data we received
                        if (client_tcp_result_callback){
    1c9c:	e0 91 bd 02 	lds	r30, 0x02BD	; 0x8002bd <client_tcp_result_callback>
    1ca0:	f0 91 be 02 	lds	r31, 0x02BE	; 0x8002be <client_tcp_result_callback+0x1>
    1ca4:	30 97       	sbiw	r30, 0x00	; 0
    1ca6:	09 f4       	brne	.+2      	; 0x1caa <packetloop_arp_icmp_tcp+0x27e>
    1ca8:	56 c0       	rjmp	.+172    	; 0x1d56 <packetloop_arp_icmp_tcp+0x32a>
                                tcpstart=TCP_DATA_START; // TCP_DATA_START is a formula
    1caa:	d8 01       	movw	r26, r16
    1cac:	9e 96       	adiw	r26, 0x2e	; 46
    1cae:	4c 91       	ld	r20, X
    1cb0:	42 95       	swap	r20
    1cb2:	4f 70       	andi	r20, 0x0F	; 15
    1cb4:	b4 e0       	ldi	r27, 0x04	; 4
    1cb6:	4b 9f       	mul	r20, r27
    1cb8:	a0 01       	movw	r20, r0
    1cba:	11 24       	eor	r1, r1
                                // out of buffer bounds check, needed in case of fragmented IP packets
                                if (tcpstart>plen-8){
    1cbc:	ce 01       	movw	r24, r28
    1cbe:	08 97       	sbiw	r24, 0x08	; 8
    1cc0:	4e 5d       	subi	r20, 0xDE	; 222
    1cc2:	5f 4f       	sbci	r21, 0xFF	; 255
    1cc4:	84 17       	cp	r24, r20
    1cc6:	95 07       	cpc	r25, r21
    1cc8:	08 f4       	brcc	.+2      	; 0x1ccc <packetloop_arp_icmp_tcp+0x2a0>
    1cca:	ac 01       	movw	r20, r24
                                        tcpstart=plen-8; // dummy but save
                                }
                                save_len=len;
                                if (tcpstart+len>plen){
    1ccc:	c7 01       	movw	r24, r14
    1cce:	84 0f       	add	r24, r20
    1cd0:	95 1f       	adc	r25, r21
    1cd2:	c8 17       	cp	r28, r24
    1cd4:	d9 07       	cpc	r29, r25
    1cd6:	20 f4       	brcc	.+8      	; 0x1ce0 <packetloop_arp_icmp_tcp+0x2b4>
                                        save_len=plen-tcpstart;
    1cd8:	9e 01       	movw	r18, r28
    1cda:	24 1b       	sub	r18, r20
    1cdc:	35 0b       	sbc	r19, r21
    1cde:	01 c0       	rjmp	.+2      	; 0x1ce2 <packetloop_arp_icmp_tcp+0x2b6>
                                tcpstart=TCP_DATA_START; // TCP_DATA_START is a formula
                                // out of buffer bounds check, needed in case of fragmented IP packets
                                if (tcpstart>plen-8){
                                        tcpstart=plen-8; // dummy but save
                                }
                                save_len=len;
    1ce0:	97 01       	movw	r18, r14
                                if (tcpstart+len>plen){
                                        save_len=plen-tcpstart;
                                }
                                send_fin=(*client_tcp_result_callback)((buf[TCP_DST_PORT_L_P]>>5)&0x7,0,tcpstart,save_len);
    1ce2:	d8 01       	movw	r26, r16
    1ce4:	95 96       	adiw	r26, 0x25	; 37
    1ce6:	8c 91       	ld	r24, X
    1ce8:	60 e0       	ldi	r22, 0x00	; 0
    1cea:	82 95       	swap	r24
    1cec:	86 95       	lsr	r24
    1cee:	87 70       	andi	r24, 0x07	; 7
    1cf0:	09 95       	icall
                        }
                        if (send_fin){
    1cf2:	88 23       	and	r24, r24
    1cf4:	59 f0       	breq	.+22     	; 0x1d0c <packetloop_arp_icmp_tcp+0x2e0>
                                make_tcp_ack_from_any(buf,len,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
    1cf6:	49 e0       	ldi	r20, 0x09	; 9
    1cf8:	b7 01       	movw	r22, r14
    1cfa:	c8 01       	movw	r24, r16
    1cfc:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <make_tcp_ack_from_any>
                                tcp_client_state=5;
    1d00:	85 e0       	ldi	r24, 0x05	; 5
    1d02:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <tcp_client_state>
                                return(0);
    1d06:	e1 2c       	mov	r14, r1
    1d08:	f1 2c       	mov	r15, r1
    1d0a:	b2 c0       	rjmp	.+356    	; 0x1e70 <packetloop_arp_icmp_tcp+0x444>
                        }
                }
                if(tcp_client_state==5){
    1d0c:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <tcp_client_state>
    1d10:	85 30       	cpi	r24, 0x05	; 5
    1d12:	51 f4       	brne	.+20     	; 0x1d28 <packetloop_arp_icmp_tcp+0x2fc>
                        // we get one more final ack to our fin-ack:
                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
    1d14:	f8 01       	movw	r30, r16
    1d16:	87 a5       	ldd	r24, Z+47	; 0x2f
    1d18:	84 ff       	sbrs	r24, 4
    1d1a:	91 c0       	rjmp	.+290    	; 0x1e3e <packetloop_arp_icmp_tcp+0x412>
                                tcp_client_state=6; // in state 6 communication should be finished
    1d1c:	86 e0       	ldi	r24, 0x06	; 6
    1d1e:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <tcp_client_state>
                        }
                        return(0);
    1d22:	e1 2c       	mov	r14, r1
    1d24:	f1 2c       	mov	r15, r1
    1d26:	a4 c0       	rjmp	.+328    	; 0x1e70 <packetloop_arp_icmp_tcp+0x444>
                }
                if(tcp_client_state==6){
    1d28:	86 30       	cpi	r24, 0x06	; 6
    1d2a:	a9 f4       	brne	.+42     	; 0x1d56 <packetloop_arp_icmp_tcp+0x32a>
                        // something wrong, can't deal with this, reset the connection
                        len++;
                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V) len=0; // if packet was an ack then do not step the ack number
    1d2c:	d8 01       	movw	r26, r16
    1d2e:	9f 96       	adiw	r26, 0x2f	; 47
    1d30:	8c 91       	ld	r24, X
    1d32:	84 fd       	sbrc	r24, 4
    1d34:	04 c0       	rjmp	.+8      	; 0x1d3e <packetloop_arp_icmp_tcp+0x312>
                        }
                        return(0);
                }
                if(tcp_client_state==6){
                        // something wrong, can't deal with this, reset the connection
                        len++;
    1d36:	b7 01       	movw	r22, r14
    1d38:	6f 5f       	subi	r22, 0xFF	; 255
    1d3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d3c:	02 c0       	rjmp	.+4      	; 0x1d42 <packetloop_arp_icmp_tcp+0x316>
                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V) len=0; // if packet was an ack then do not step the ack number
    1d3e:	60 e0       	ldi	r22, 0x00	; 0
    1d40:	70 e0       	ldi	r23, 0x00	; 0
                        make_tcp_ack_from_any(buf,len,TCP_FLAGS_RST_V);
    1d42:	44 e0       	ldi	r20, 0x04	; 4
    1d44:	c8 01       	movw	r24, r16
    1d46:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <make_tcp_ack_from_any>
                        // just a single reset, do not repeat if more messages:
                        tcp_client_state=7;
    1d4a:	87 e0       	ldi	r24, 0x07	; 7
    1d4c:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <tcp_client_state>
                        return(0);
    1d50:	e1 2c       	mov	r14, r1
    1d52:	f1 2c       	mov	r15, r1
    1d54:	8d c0       	rjmp	.+282    	; 0x1e70 <packetloop_arp_icmp_tcp+0x444>
                }
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
    1d56:	f8 01       	movw	r30, r16
    1d58:	87 a5       	ldd	r24, Z+47	; 0x2f
    1d5a:	80 ff       	sbrs	r24, 0
    1d5c:	0d c0       	rjmp	.+26     	; 0x1d78 <packetloop_arp_icmp_tcp+0x34c>
                        // this normally a fin ack message but it could be
                        // any message with fin we answer with fin-ack:
                        make_tcp_ack_from_any(buf,len+1,TCP_FLAGS_FIN_V);
    1d5e:	b7 01       	movw	r22, r14
    1d60:	6f 5f       	subi	r22, 0xFF	; 255
    1d62:	7f 4f       	sbci	r23, 0xFF	; 255
    1d64:	41 e0       	ldi	r20, 0x01	; 1
    1d66:	c8 01       	movw	r24, r16
    1d68:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <make_tcp_ack_from_any>
                        tcp_client_state=5; // connection terminated
    1d6c:	85 e0       	ldi	r24, 0x05	; 5
    1d6e:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <tcp_client_state>
                        return(0);
    1d72:	e1 2c       	mov	r14, r1
    1d74:	f1 2c       	mov	r15, r1
    1d76:	7c c0       	rjmp	.+248    	; 0x1e70 <packetloop_arp_icmp_tcp+0x444>
                }
                // ack all data (the web page may be long):
                // if we just get a fragment then len will be zero
                // and we ack only once we have the full packet
                if (len>0){
    1d78:	e1 14       	cp	r14, r1
    1d7a:	f1 04       	cpc	r15, r1
    1d7c:	09 f4       	brne	.+2      	; 0x1d80 <packetloop_arp_icmp_tcp+0x354>
    1d7e:	62 c0       	rjmp	.+196    	; 0x1e44 <packetloop_arp_icmp_tcp+0x418>
                        make_tcp_ack_from_any(buf,len,0);
    1d80:	40 e0       	ldi	r20, 0x00	; 0
    1d82:	b7 01       	movw	r22, r14
    1d84:	c8 01       	movw	r24, r16
    1d86:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <make_tcp_ack_from_any>
                }
                return(0);
    1d8a:	e1 2c       	mov	r14, r1
    1d8c:	f1 2c       	mov	r15, r1
    1d8e:	70 c0       	rjmp	.+224    	; 0x1e70 <packetloop_arp_icmp_tcp+0x444>
        }
#endif // TCP_client
        //
#ifdef WWW_server
        // tcp port web server start
        if (buf[TCP_DST_PORT_H_P]==wwwport_h && buf[TCP_DST_PORT_L_P]==wwwport_l){
    1d90:	90 91 a4 02 	lds	r25, 0x02A4	; 0x8002a4 <wwwport_h>
    1d94:	89 13       	cpse	r24, r25
    1d96:	59 c0       	rjmp	.+178    	; 0x1e4a <packetloop_arp_icmp_tcp+0x41e>
    1d98:	95 a1       	ldd	r25, Z+37	; 0x25
    1d9a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <wwwport_l>
    1d9e:	98 13       	cpse	r25, r24
    1da0:	57 c0       	rjmp	.+174    	; 0x1e50 <packetloop_arp_icmp_tcp+0x424>
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V){
    1da2:	d7 a4       	ldd	r13, Z+47	; 0x2f
    1da4:	d1 fe       	sbrs	r13, 1
    1da6:	06 c0       	rjmp	.+12     	; 0x1db4 <packetloop_arp_icmp_tcp+0x388>
                        make_tcp_synack_from_syn(buf);
    1da8:	c8 01       	movw	r24, r16
    1daa:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <make_tcp_synack_from_syn>
                        // make_tcp_synack_from_syn does already send the syn,ack
                        return(0);
    1dae:	e1 2c       	mov	r14, r1
    1db0:	f1 2c       	mov	r15, r1
    1db2:	5e c0       	rjmp	.+188    	; 0x1e70 <packetloop_arp_icmp_tcp+0x444>
                }
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
    1db4:	d4 fe       	sbrs	r13, 4
    1db6:	4f c0       	rjmp	.+158    	; 0x1e56 <packetloop_arp_icmp_tcp+0x42a>
                        info_data_len=get_tcp_data_len(buf);
    1db8:	c8 01       	movw	r24, r16
    1dba:	0e 94 ce 09 	call	0x139c	; 0x139c <get_tcp_data_len>
    1dbe:	7c 01       	movw	r14, r24
    1dc0:	90 93 a3 02 	sts	0x02A3, r25	; 0x8002a3 <info_data_len+0x1>
    1dc4:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <info_data_len>
                        // we can possibly have no data, just ack:
                        // Here we misuse plen for something else to save a variable.
                        // plen is now the position of start of the tcp user data.
                        if (info_data_len==0){
    1dc8:	89 2b       	or	r24, r25
    1dca:	49 f4       	brne	.+18     	; 0x1dde <packetloop_arp_icmp_tcp+0x3b2>
                                if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
    1dcc:	d0 fe       	sbrs	r13, 0
    1dce:	50 c0       	rjmp	.+160    	; 0x1e70 <packetloop_arp_icmp_tcp+0x444>
                                        // finack, answer with ack
                                        make_tcp_ack_from_any(buf,0,0);
    1dd0:	40 e0       	ldi	r20, 0x00	; 0
    1dd2:	60 e0       	ldi	r22, 0x00	; 0
    1dd4:	70 e0       	ldi	r23, 0x00	; 0
    1dd6:	c8 01       	movw	r24, r16
    1dd8:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <make_tcp_ack_from_any>
    1ddc:	49 c0       	rjmp	.+146    	; 0x1e70 <packetloop_arp_icmp_tcp+0x444>
                                }
                                // just an ack with no data, wait for next packet
                                return(0);
                        }
                        // Here we misuse len for something else to save a variable
                        len=TCP_DATA_START; // TCP_DATA_START is a formula
    1dde:	f8 01       	movw	r30, r16
    1de0:	e6 a4       	ldd	r14, Z+46	; 0x2e
    1de2:	e6 94       	lsr	r14
    1de4:	e6 94       	lsr	r14
    1de6:	e6 94       	lsr	r14
    1de8:	e6 94       	lsr	r14
    1dea:	f4 e0       	ldi	r31, 0x04	; 4
    1dec:	ef 9e       	mul	r14, r31
    1dee:	70 01       	movw	r14, r0
    1df0:	11 24       	eor	r1, r1
    1df2:	82 e2       	ldi	r24, 0x22	; 34
    1df4:	e8 0e       	add	r14, r24
    1df6:	f1 1c       	adc	r15, r1
                        // check for data corruption
                        if (len>plen-8){
    1df8:	28 97       	sbiw	r28, 0x08	; 8
    1dfa:	ce 15       	cp	r28, r14
    1dfc:	df 05       	cpc	r29, r15
    1dfe:	70 f1       	brcs	.+92     	; 0x1e5c <packetloop_arp_icmp_tcp+0x430>
    1e00:	37 c0       	rjmp	.+110    	; 0x1e70 <packetloop_arp_icmp_tcp+0x444>
                        // way we get it back in every message that comes
                        // from the server:
                        tcp_client_syn(buf,((tcp_fd<<5) | (0x1f & tcpclient_src_port_l)),tcp_client_port);
                }
#endif
                return(0);
    1e02:	e1 2c       	mov	r14, r1
    1e04:	f1 2c       	mov	r15, r1
    1e06:	34 c0       	rjmp	.+104    	; 0x1e70 <packetloop_arp_icmp_tcp+0x444>
    1e08:	e1 2c       	mov	r14, r1
    1e0a:	f1 2c       	mov	r15, r1
    1e0c:	31 c0       	rjmp	.+98     	; 0x1e70 <packetloop_arp_icmp_tcp+0x444>
                        if (memcmp(&buf[ETH_ARP_SRC_IP_P],arpip,4)!=0) return(0); // not an arp reply for the IP we were searching           
                        (*client_arp_result_callback)(arpip,arp_reference_number,buf+ETH_ARP_SRC_MAC_P);
                        arpip_state=WGW_HAVE_MAC;
                }
#endif // ARP_MAC_resolver_client
                return(0);
    1e0e:	e1 2c       	mov	r14, r1
    1e10:	f1 2c       	mov	r15, r1
    1e12:	2e c0       	rjmp	.+92     	; 0x1e70 <packetloop_arp_icmp_tcp+0x444>
    1e14:	e1 2c       	mov	r14, r1
    1e16:	f1 2c       	mov	r15, r1
    1e18:	2b c0       	rjmp	.+86     	; 0x1e70 <packetloop_arp_icmp_tcp+0x444>
                        make_arp_answer_from_request(buf);
                }
#ifdef ARP_MAC_resolver_client
                if ((arpip_state & WGW_ACCEPT_ARP_REPLY) && (buf[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V)){
                        // is it an arp reply 
                        if (memcmp(&buf[ETH_ARP_SRC_IP_P],arpip,4)!=0) return(0); // not an arp reply for the IP we were searching           
    1e1a:	e1 2c       	mov	r14, r1
    1e1c:	f1 2c       	mov	r15, r1
    1e1e:	28 c0       	rjmp	.+80     	; 0x1e70 <packetloop_arp_icmp_tcp+0x444>
                return(0);

        }
        // check if ip packets are for us:
        if(eth_type_is_ip_and_my_ip(buf,plen)==0){
                return(0);
    1e20:	e1 2c       	mov	r14, r1
    1e22:	f1 2c       	mov	r15, r1
    1e24:	25 c0       	rjmp	.+74     	; 0x1e70 <packetloop_arp_icmp_tcp+0x444>
                return(0);
        }
        // this is an important check to avoid working on the wrong packets:
        if (plen<54 || buf[IP_PROTO_P]!=IP_PROTO_TCP_V ){
                // smaller than the smallest TCP packet (TCP packet with no options section) or not tcp port
                return(0);
    1e26:	e1 2c       	mov	r14, r1
    1e28:	f1 2c       	mov	r15, r1
    1e2a:	22 c0       	rjmp	.+68     	; 0x1e70 <packetloop_arp_icmp_tcp+0x444>
    1e2c:	e1 2c       	mov	r14, r1
    1e2e:	f1 2c       	mov	r15, r1
    1e30:	1f c0       	rjmp	.+62     	; 0x1e70 <packetloop_arp_icmp_tcp+0x444>
    1e32:	e1 2c       	mov	r14, r1
    1e34:	f1 2c       	mov	r15, r1
    1e36:	1c c0       	rjmp	.+56     	; 0x1e70 <packetloop_arp_icmp_tcp+0x444>
#if defined (WWW_client)
                // workaround to pass pointer to www_client_internal..
                bufptr=buf; 
#endif // WWW_client
                if (check_ip_message_is_from(buf,tcp_otherside_ip)==0){
                        return(0);
    1e38:	e1 2c       	mov	r14, r1
    1e3a:	f1 2c       	mov	r15, r1
    1e3c:	19 c0       	rjmp	.+50     	; 0x1e70 <packetloop_arp_icmp_tcp+0x444>
                if(tcp_client_state==5){
                        // we get one more final ack to our fin-ack:
                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
                                tcp_client_state=6; // in state 6 communication should be finished
                        }
                        return(0);
    1e3e:	e1 2c       	mov	r14, r1
    1e40:	f1 2c       	mov	r15, r1
    1e42:	16 c0       	rjmp	.+44     	; 0x1e70 <packetloop_arp_icmp_tcp+0x444>
                // if we just get a fragment then len will be zero
                // and we ack only once we have the full packet
                if (len>0){
                        make_tcp_ack_from_any(buf,len,0);
                }
                return(0);
    1e44:	e1 2c       	mov	r14, r1
    1e46:	f1 2c       	mov	r15, r1
    1e48:	13 c0       	rjmp	.+38     	; 0x1e70 <packetloop_arp_icmp_tcp+0x444>
                        }
                        return(len);
                }
        }
#endif // WWW_server
        return(0);
    1e4a:	e1 2c       	mov	r14, r1
    1e4c:	f1 2c       	mov	r15, r1
    1e4e:	10 c0       	rjmp	.+32     	; 0x1e70 <packetloop_arp_icmp_tcp+0x444>
    1e50:	e1 2c       	mov	r14, r1
    1e52:	f1 2c       	mov	r15, r1
    1e54:	0d c0       	rjmp	.+26     	; 0x1e70 <packetloop_arp_icmp_tcp+0x444>
    1e56:	e1 2c       	mov	r14, r1
    1e58:	f1 2c       	mov	r15, r1
    1e5a:	0a c0       	rjmp	.+20     	; 0x1e70 <packetloop_arp_icmp_tcp+0x444>
                        }
                        // Here we misuse len for something else to save a variable
                        len=TCP_DATA_START; // TCP_DATA_START is a formula
                        // check for data corruption
                        if (len>plen-8){
                                return(0);
    1e5c:	e1 2c       	mov	r14, r1
    1e5e:	f1 2c       	mov	r15, r1
    1e60:	07 c0       	rjmp	.+14     	; 0x1e70 <packetloop_arp_icmp_tcp+0x444>
                        make_tcp_ack_from_any(buf,len,TCP_FLAGS_RST_V);
                        // just a single reset, do not repeat if more messages:
                        tcp_client_state=7;
                        return(0);
                }
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
    1e62:	d8 01       	movw	r26, r16
    1e64:	9f 96       	adiw	r26, 0x2f	; 47
    1e66:	8c 91       	ld	r24, X
    1e68:	80 fd       	sbrc	r24, 0
    1e6a:	79 cf       	rjmp	.-270    	; 0x1d5e <packetloop_arp_icmp_tcp+0x332>
                // if we just get a fragment then len will be zero
                // and we ack only once we have the full packet
                if (len>0){
                        make_tcp_ack_from_any(buf,len,0);
                }
                return(0);
    1e6c:	e1 2c       	mov	r14, r1
    1e6e:	f1 2c       	mov	r15, r1
                        return(len);
                }
        }
#endif // WWW_server
        return(0);
}
    1e70:	c7 01       	movw	r24, r14
    1e72:	df 91       	pop	r29
    1e74:	cf 91       	pop	r28
    1e76:	1f 91       	pop	r17
    1e78:	0f 91       	pop	r16
    1e7a:	ff 90       	pop	r15
    1e7c:	ef 90       	pop	r14
    1e7e:	df 90       	pop	r13
    1e80:	08 95       	ret

00001e82 <browserresult_callback>:
                sec++; // stepped every second
	}
}

// the __attribute__((unused)) is a gcc compiler directive to avoid warnings about unsed variables.
void browserresult_callback(uint16_t webstatuscode,uint16_t datapos __attribute__((unused)), uint16_t len __attribute__((unused))){
    1e82:	08 95       	ret

00001e84 <arpresolver_result_callback>:
}

// the __attribute__((unused)) is a gcc compiler directive to avoid warnings about unsed variables.
void arpresolver_result_callback(uint8_t *ip __attribute__((unused)),uint8_t transaction_number,uint8_t *mac){
        uint8_t i=0;
        if (transaction_number==TRANS_NUM_GWMAC){
    1e84:	61 30       	cpi	r22, 0x01	; 1
    1e86:	59 f4       	brne	.+22     	; 0x1e9e <arpresolver_result_callback+0x1a>
    1e88:	a4 2f       	mov	r26, r20
    1e8a:	b5 2f       	mov	r27, r21
    1e8c:	e3 ee       	ldi	r30, 0xE3	; 227
    1e8e:	f3 e0       	ldi	r31, 0x03	; 3
    1e90:	29 ee       	ldi	r18, 0xE9	; 233
    1e92:	33 e0       	ldi	r19, 0x03	; 3
                // copy mac address over:
                while(i<6){gwmac[i]=mac[i];i++;}
    1e94:	8d 91       	ld	r24, X+
    1e96:	81 93       	st	Z+, r24
    1e98:	e2 17       	cp	r30, r18
    1e9a:	f3 07       	cpc	r31, r19
    1e9c:	d9 f7       	brne	.-10     	; 0x1e94 <arpresolver_result_callback+0x10>
    1e9e:	08 95       	ret

00001ea0 <ping_callback>:

static uint8_t pingsrcip[4];
void ping_callback(uint8_t *ip){
	uint8_t i=0;
	// trigger only first time in case we get many ping in a row:
	if (start_web_client==0){
    1ea0:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <start_web_client>
    1ea4:	81 11       	cpse	r24, r1
    1ea6:	03 c0       	rjmp	.+6      	; 0x1eae <ping_callback+0xe>
		start_web_client=1;
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <start_web_client>
    1eae:	08 95       	ret

00001eb0 <init_cnt2>:

/* setup timer T2 as an interrupt generating time base.
* You must call once sei() in the main program */
void init_cnt2(void)
{
	cnt2step=0;
    1eb0:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <cnt2step>
	PRR&=~(1<<PRTIM2); // write power reduction register to zero
    1eb4:	e4 e6       	ldi	r30, 0x64	; 100
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	8f 7b       	andi	r24, 0xBF	; 191
    1ebc:	80 83       	st	Z, r24
	TIMSK2=(1<<OCIE2A); // compare match on OCR2A
    1ebe:	82 e0       	ldi	r24, 0x02	; 2
    1ec0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	TCNT2=0;  // init counter
    1ec4:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	OCR2A=244; // value to compare against
    1ec8:	94 ef       	ldi	r25, 0xF4	; 244
    1eca:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	TCCR2A=(1<<WGM21); // do not change any output pin, clear at compare match
    1ece:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	// divide clock by 1024: 12.5MHz/128=12207 Hz
	TCCR2B=(1<<CS22)|(1<<CS21)|(1<<CS20); // clock divider, start counter
    1ed2:	87 e0       	ldi	r24, 0x07	; 7
    1ed4:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    1ed8:	08 95       	ret

00001eda <__vector_7>:
	// 12207/244=50Hz
}

// called when TCNT2==OCR2A
// that is in 50Hz intervals
ISR(TIMER2_COMPA_vect){
    1eda:	1f 92       	push	r1
    1edc:	0f 92       	push	r0
    1ede:	0f b6       	in	r0, 0x3f	; 63
    1ee0:	0f 92       	push	r0
    1ee2:	11 24       	eor	r1, r1
    1ee4:	8f 93       	push	r24
	cnt2step++;
    1ee6:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <cnt2step>
    1eea:	8f 5f       	subi	r24, 0xFF	; 255
    1eec:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <cnt2step>
	if (cnt2step>50){
    1ef0:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <cnt2step>
    1ef4:	83 33       	cpi	r24, 0x33	; 51
    1ef6:	38 f0       	brcs	.+14     	; 0x1f06 <__vector_7+0x2c>
                cnt2step=0;
    1ef8:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <cnt2step>
                sec++; // stepped every second
    1efc:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <sec>
    1f00:	8f 5f       	subi	r24, 0xFF	; 255
    1f02:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <sec>
	}
}
    1f06:	8f 91       	pop	r24
    1f08:	0f 90       	pop	r0
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	0f 90       	pop	r0
    1f0e:	1f 90       	pop	r1
    1f10:	18 95       	reti

00001f12 <Ether_SendPacket>:
		}
	}
}


void Ether_SendPacket(char* text){
    1f12:	cf 92       	push	r12
    1f14:	df 92       	push	r13
    1f16:	ef 92       	push	r14
    1f18:	ff 92       	push	r15
    1f1a:	0f 93       	push	r16
    1f1c:	1f 93       	push	r17
    1f1e:	cf 93       	push	r28
    1f20:	df 93       	push	r29
    1f22:	6c 01       	movw	r12, r24
	uint16_t dat_p,plen;
	
	sendingPacket = 1;
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <sendingPacket>
	plen=enc28j60PacketReceive(BUFFER_SIZE, buf);
    1f2a:	6e ed       	ldi	r22, 0xDE	; 222
    1f2c:	72 e0       	ldi	r23, 0x02	; 2
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	91 e0       	ldi	r25, 0x01	; 1
    1f32:	0e 94 1a 07 	call	0xe34	; 0xe34 <enc28j60PacketReceive>
    1f36:	7c 01       	movw	r14, r24
	buf[BUFFER_SIZE]='\0';
    1f38:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <buf+0x100>
	dat_p=packetloop_arp_icmp_tcp(buf,plen);
    1f3c:	bc 01       	movw	r22, r24
    1f3e:	8e ed       	ldi	r24, 0xDE	; 222
    1f40:	92 e0       	ldi	r25, 0x02	; 2
    1f42:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <packetloop_arp_icmp_tcp>
    1f46:	ec 01       	movw	r28, r24
	if(plen == 0){
    1f48:	e1 14       	cp	r14, r1
    1f4a:	f1 04       	cpc	r15, r1
    1f4c:	99 f4       	brne	.+38     	; 0x1f74 <Ether_SendPacket+0x62>
		if(start_web_client == 1)
    1f4e:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <start_web_client>
    1f52:	81 30       	cpi	r24, 0x01	; 1
    1f54:	79 f4       	brne	.+30     	; 0x1f74 <Ether_SendPacket+0x62>
		{
			sec = 0;
    1f56:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <sec>
			start_web_client = 0;
    1f5a:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <start_web_client>
			
			client_tcpSend(text,&browserresult_callback,otherside_www_ip,gwmac,(uint8_t*)80);
    1f5e:	00 e5       	ldi	r16, 0x50	; 80
    1f60:	10 e0       	ldi	r17, 0x00	; 0
    1f62:	23 ee       	ldi	r18, 0xE3	; 227
    1f64:	33 e0       	ldi	r19, 0x03	; 3
    1f66:	4f ed       	ldi	r20, 0xDF	; 223
    1f68:	53 e0       	ldi	r21, 0x03	; 3
    1f6a:	61 e4       	ldi	r22, 0x41	; 65
    1f6c:	7f e0       	ldi	r23, 0x0F	; 15
    1f6e:	c6 01       	movw	r24, r12
    1f70:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <client_tcpSend>
		}
	}
	if(sec > timeout)
    1f74:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <sec>
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	20 91 53 06 	lds	r18, 0x0653	; 0x800653 <timeout>
    1f7e:	30 91 54 06 	lds	r19, 0x0654	; 0x800654 <timeout+0x1>
    1f82:	28 17       	cp	r18, r24
    1f84:	39 07       	cpc	r19, r25
    1f86:	28 f4       	brcc	.+10     	; 0x1f92 <Ether_SendPacket+0x80>
	{
		sendingPacket = 0;
    1f88:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <sendingPacket>
		start_web_client = 1;
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <start_web_client>
	}
	
	if(dat_p==0){ // plen!=0
    1f92:	20 97       	sbiw	r28, 0x00	; 0
    1f94:	31 f4       	brne	.+12     	; 0x1fa2 <Ether_SendPacket+0x90>
		                         // check for incomming messages not processed
		                         // as part of packetloop_arp_icmp_tcp, e.g udp messages
		                         udp_client_check_for_dns_answer(buf,plen);
    1f96:	b7 01       	movw	r22, r14
    1f98:	8e ed       	ldi	r24, 0xDE	; 222
    1f9a:	92 e0       	ldi	r25, 0x02	; 2
    1f9c:	0e 94 c8 04 	call	0x990	; 0x990 <udp_client_check_for_dns_answer>
		                         return;
    1fa0:	25 c0       	rjmp	.+74     	; 0x1fec <Ether_SendPacket+0xda>
		                 }
		if (strncmp("POST / timeout",(char *)&(buf[dat_p]),14)==0){
    1fa2:	c2 52       	subi	r28, 0x22	; 34
    1fa4:	dd 4f       	sbci	r29, 0xFD	; 253
    1fa6:	4e e0       	ldi	r20, 0x0E	; 14
    1fa8:	50 e0       	ldi	r21, 0x00	; 0
    1faa:	be 01       	movw	r22, r28
    1fac:	8f e2       	ldi	r24, 0x2F	; 47
    1fae:	91 e0       	ldi	r25, 0x01	; 1
    1fb0:	0e 94 fb 2f 	call	0x5ff6	; 0x5ff6 <strncmp>
    1fb4:	89 2b       	or	r24, r25
    1fb6:	d1 f4       	brne	.+52     	; 0x1fec <Ether_SendPacket+0xda>
			sscanf((char *)&(buf[dat_p]), "POST / timeout %d", &timeout);
    1fb8:	83 e5       	ldi	r24, 0x53	; 83
    1fba:	96 e0       	ldi	r25, 0x06	; 6
    1fbc:	9f 93       	push	r25
    1fbe:	8f 93       	push	r24
    1fc0:	8e e3       	ldi	r24, 0x3E	; 62
    1fc2:	91 e0       	ldi	r25, 0x01	; 1
    1fc4:	9f 93       	push	r25
    1fc6:	8f 93       	push	r24
    1fc8:	df 93       	push	r29
    1fca:	cf 93       	push	r28
    1fcc:	0e 94 25 31 	call	0x624a	; 0x624a <sscanf>
			eeprom_write_word((uint16_t*)0x10, (uint16_t)timeout);
    1fd0:	60 91 53 06 	lds	r22, 0x0653	; 0x800653 <timeout>
    1fd4:	70 91 54 06 	lds	r23, 0x0654	; 0x800654 <timeout+0x1>
    1fd8:	80 e1       	ldi	r24, 0x10	; 16
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	0e 94 3d 39 	call	0x727a	; 0x727a <eeprom_write_word>
    1fe0:	0f 90       	pop	r0
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	0f 90       	pop	r0
		}
}
    1fec:	df 91       	pop	r29
    1fee:	cf 91       	pop	r28
    1ff0:	1f 91       	pop	r17
    1ff2:	0f 91       	pop	r16
    1ff4:	ff 90       	pop	r15
    1ff6:	ef 90       	pop	r14
    1ff8:	df 90       	pop	r13
    1ffa:	cf 90       	pop	r12
    1ffc:	08 95       	ret

00001ffe <Ether_init>:


void Ether_init()
{
    1ffe:	cf 93       	push	r28
    2000:	df 93       	push	r29
	 // full external speed)
	 // set the clock prescaler. First write CLKPCE to enable setting
	 // of clock the next four instructions.
	 // Note that the CKDIV8 Fuse determines the initial
	 // value of the CKKPS bits.
	 CLKPR=(1<<CLKPCE); // change enable
    2002:	e1 e6       	ldi	r30, 0x61	; 97
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 e8       	ldi	r24, 0x80	; 128
    2008:	80 83       	st	Z, r24
	 CLKPR=0; // "no pre-scaler"
    200a:	10 82       	st	Z, r1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    200c:	c0 e0       	ldi	r28, 0x00	; 0
    200e:	8c 2f       	mov	r24, r28
    2010:	8a 95       	dec	r24
    2012:	f1 f7       	brne	.-4      	; 0x2010 <Ether_init+0x12>
	 _delay_loop_1(0); // 60us

	 /*initialize enc28j60*/
	 enc28j60Init(mymac);
    2014:	82 e1       	ldi	r24, 0x12	; 18
    2016:	91 e0       	ldi	r25, 0x01	; 1
    2018:	0e 94 23 06 	call	0xc46	; 0xc46 <enc28j60Init>
	 enc28j60clkout(1); // change clkout from 6.25MHz to 12.5MHz
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	0e 94 1d 06 	call	0xc3a	; 0xc3a <enc28j60clkout>
    2022:	ca 95       	dec	r28
    2024:	f1 f7       	brne	.-4      	; 0x2022 <Ether_init+0x24>
	 _delay_loop_1(0); // 60us
	 
	 init_cnt2();
    2026:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <init_cnt2>
	 sei();
    202a:	78 94       	sei
	 /* Magjack leds configuration, see enc28j60 datasheet, page 11 */
	 // LEDB=yellow LEDA=green
	 //
	 // 0x476 is PHLCON LEDA=links status, LEDB=receive/transmit
	 // enc28j60PhyWrite(PHLCON,0b0000 0100 0111 01 10);
	 enc28j60PhyWrite(PHLCON,0x476);
    202c:	66 e7       	ldi	r22, 0x76	; 118
    202e:	74 e0       	ldi	r23, 0x04	; 4
    2030:	84 e1       	ldi	r24, 0x14	; 20
    2032:	0e 94 00 06 	call	0xc00	; 0xc00 <enc28j60PhyWrite>

	 
	 //init the web server ethernet/ip layer:
	 init_udp_or_www_server(mymac,myip);
    2036:	6e e0       	ldi	r22, 0x0E	; 14
    2038:	71 e0       	ldi	r23, 0x01	; 1
    203a:	82 e1       	ldi	r24, 0x12	; 18
    203c:	91 e0       	ldi	r25, 0x01	; 1
    203e:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <init_udp_or_www_server>
	 www_server_port(MYWWWPORT);
    2042:	80 e5       	ldi	r24, 0x50	; 80
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	0e 94 67 0b 	call	0x16ce	; 0x16ce <www_server_port>

	 get_mac_with_arp(gwip,TRANS_NUM_GWMAC,&arpresolver_result_callback);
    204a:	42 e4       	ldi	r20, 0x42	; 66
    204c:	5f e0       	ldi	r21, 0x0F	; 15
    204e:	61 e0       	ldi	r22, 0x01	; 1
    2050:	8a e0       	ldi	r24, 0x0A	; 10
    2052:	91 e0       	ldi	r25, 0x01	; 1
    2054:	0e 94 0a 0c 	call	0x1814	; 0x1814 <get_mac_with_arp>
	 while(get_mac_with_arp_wait()){
    2058:	0b c0       	rjmp	.+22     	; 0x2070 <Ether_init+0x72>
		 // to process the ARP reply we must call the packetloop
		 plen=enc28j60PacketReceive(BUFFER_SIZE, buf);
    205a:	6e ed       	ldi	r22, 0xDE	; 222
    205c:	72 e0       	ldi	r23, 0x02	; 2
    205e:	80 e0       	ldi	r24, 0x00	; 0
    2060:	91 e0       	ldi	r25, 0x01	; 1
    2062:	0e 94 1a 07 	call	0xe34	; 0xe34 <enc28j60PacketReceive>
		 packetloop_arp_icmp_tcp(buf,plen);
    2066:	bc 01       	movw	r22, r24
    2068:	8e ed       	ldi	r24, 0xDE	; 222
    206a:	92 e0       	ldi	r25, 0x02	; 2
    206c:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <packetloop_arp_icmp_tcp>
	 //init the web server ethernet/ip layer:
	 init_udp_or_www_server(mymac,myip);
	 www_server_port(MYWWWPORT);

	 get_mac_with_arp(gwip,TRANS_NUM_GWMAC,&arpresolver_result_callback);
	 while(get_mac_with_arp_wait()){
    2070:	0e 94 03 0c 	call	0x1806	; 0x1806 <get_mac_with_arp_wait>
    2074:	81 11       	cpse	r24, r1
    2076:	f1 cf       	rjmp	.-30     	; 0x205a <Ether_init+0x5c>
		 // to process the ARP reply we must call the packetloop
		 plen=enc28j60PacketReceive(BUFFER_SIZE, buf);
		 packetloop_arp_icmp_tcp(buf,plen);
	 }

	 parse_ip(otherside_www_ip,WEBSERVER_VHOST);
    2078:	60 e5       	ldi	r22, 0x50	; 80
    207a:	71 e0       	ldi	r23, 0x01	; 1
    207c:	8f ed       	ldi	r24, 0xDF	; 223
    207e:	93 e0       	ldi	r25, 0x03	; 3
    2080:	0e 94 71 10 	call	0x20e2	; 0x20e2 <parse_ip>
	 processing_state=2; // no need to do any dns look-up
    2084:	82 e0       	ldi	r24, 0x02	; 2
    2086:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <processing_state>
					 i++;
				 }
				 processing_state=4;
				 }else{
				 get_mac_with_arp(otherside_www_ip,TRANS_NUM_WEBMAC,&arpresolver_result_callback);
				 processing_state=3;
    208a:	d3 e0       	ldi	r29, 0x03	; 3
			 }
			 continue;
		 }
		 if (processing_state==3 && get_mac_with_arp_wait()==0){
			 processing_state=4;
    208c:	c4 e0       	ldi	r28, 0x04	; 4
    208e:	02 c0       	rjmp	.+4      	; 0x2094 <Ether_init+0x96>
	 parse_ip(otherside_www_ip,WEBSERVER_VHOST);
	 processing_state=2; // no need to do any dns look-up
	 
	 while(processing_state != 4)
	 {
		 if (processing_state==2){
    2090:	82 30       	cpi	r24, 0x02	; 2
    2092:	a1 f4       	brne	.+40     	; 0x20bc <Ether_init+0xbe>
			 if (route_via_gw(otherside_www_ip)){
    2094:	8f ed       	ldi	r24, 0xDF	; 223
    2096:	93 e0       	ldi	r25, 0x03	; 3
    2098:	0e 94 a0 08 	call	0x1140	; 0x1140 <route_via_gw>
    209c:	88 23       	and	r24, r24
    209e:	21 f0       	breq	.+8      	; 0x20a8 <Ether_init+0xaa>
				 i=0;
				 while(i<6){
					 otherside_www_gwmac[i]=gwmac[i];
					 i++;
				 }
				 processing_state=4;
    20a0:	84 e0       	ldi	r24, 0x04	; 4
    20a2:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <processing_state>
    20a6:	16 c0       	rjmp	.+44     	; 0x20d4 <Ether_init+0xd6>
				 }else{
				 get_mac_with_arp(otherside_www_ip,TRANS_NUM_WEBMAC,&arpresolver_result_callback);
    20a8:	42 e4       	ldi	r20, 0x42	; 66
    20aa:	5f e0       	ldi	r21, 0x0F	; 15
    20ac:	62 e0       	ldi	r22, 0x02	; 2
    20ae:	8f ed       	ldi	r24, 0xDF	; 223
    20b0:	93 e0       	ldi	r25, 0x03	; 3
    20b2:	0e 94 0a 0c 	call	0x1814	; 0x1814 <get_mac_with_arp>
				 processing_state=3;
    20b6:	d0 93 d9 02 	sts	0x02D9, r29	; 0x8002d9 <processing_state>
    20ba:	08 c0       	rjmp	.+16     	; 0x20cc <Ether_init+0xce>
			 }
			 continue;
		 }
		 if (processing_state==3 && get_mac_with_arp_wait()==0){
    20bc:	83 30       	cpi	r24, 0x03	; 3
    20be:	31 f4       	brne	.+12     	; 0x20cc <Ether_init+0xce>
    20c0:	0e 94 03 0c 	call	0x1806	; 0x1806 <get_mac_with_arp_wait>
    20c4:	81 11       	cpse	r24, r1
    20c6:	02 c0       	rjmp	.+4      	; 0x20cc <Ether_init+0xce>
			 processing_state=4;
    20c8:	c0 93 d9 02 	sts	0x02D9, r28	; 0x8002d9 <processing_state>
	 }

	 parse_ip(otherside_www_ip,WEBSERVER_VHOST);
	 processing_state=2; // no need to do any dns look-up
	 
	 while(processing_state != 4)
    20cc:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <processing_state>
    20d0:	84 30       	cpi	r24, 0x04	; 4
    20d2:	f1 f6       	brne	.-68     	; 0x2090 <Ether_init+0x92>
			 processing_state=4;
		 }
	 }

	 // register to be informed about incomming ping:
	 register_ping_rec_callback(&ping_callback);
    20d4:	80 e5       	ldi	r24, 0x50	; 80
    20d6:	9f e0       	ldi	r25, 0x0F	; 15
    20d8:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <register_ping_rec_callback>
}
    20dc:	df 91       	pop	r29
    20de:	cf 91       	pop	r28
    20e0:	08 95       	ret

000020e2 <parse_ip>:

#endif // URLENCODE_websrv_help

// parse a string that is an IP address and extract the IP to ip_byte_str
uint8_t parse_ip(uint8_t *ip_byte_str,const char *str)
{
    20e2:	af 92       	push	r10
    20e4:	bf 92       	push	r11
    20e6:	df 92       	push	r13
    20e8:	ef 92       	push	r14
    20ea:	ff 92       	push	r15
    20ec:	0f 93       	push	r16
    20ee:	1f 93       	push	r17
    20f0:	cf 93       	push	r28
    20f2:	df 93       	push	r29
    20f4:	00 d0       	rcall	.+0      	; 0x20f6 <parse_ip+0x14>
    20f6:	00 d0       	rcall	.+0      	; 0x20f8 <parse_ip+0x16>
    20f8:	cd b7       	in	r28, 0x3d	; 61
    20fa:	de b7       	in	r29, 0x3e	; 62
    20fc:	fc 01       	movw	r30, r24
        char strbuf[4];
        uint8_t bufpos=0;
        uint8_t i=0;
        while(i<4){
                ip_byte_str[i]=0;
    20fe:	10 82       	st	Z, r1
    2100:	11 82       	std	Z+1, r1	; 0x01
    2102:	12 82       	std	Z+2, r1	; 0x02
    2104:	13 82       	std	Z+3, r1	; 0x03
                i++;
        }
        i=0;
        while(*str && i<4){
    2106:	db 01       	movw	r26, r22
    2108:	9c 91       	ld	r25, X
    210a:	99 23       	and	r25, r25
    210c:	09 f4       	brne	.+2      	; 0x2110 <parse_ip+0x2e>
    210e:	48 c0       	rjmp	.+144    	; 0x21a0 <parse_ip+0xbe>
    2110:	7f 01       	movw	r14, r30
    2112:	8b 01       	movw	r16, r22
    2114:	0f 5f       	subi	r16, 0xFF	; 255
    2116:	1f 4f       	sbci	r17, 0xFF	; 255
    2118:	d1 2c       	mov	r13, r1
    211a:	20 e0       	ldi	r18, 0x00	; 0
                // if a number then start
                if (bufpos < 3 && isdigit(*str)){
    211c:	23 30       	cpi	r18, 0x03	; 3
    211e:	78 f4       	brcc	.+30     	; 0x213e <parse_ip+0x5c>
    2120:	49 2f       	mov	r20, r25
    2122:	50 e0       	ldi	r21, 0x00	; 0
    2124:	40 53       	subi	r20, 0x30	; 48
    2126:	51 09       	sbc	r21, r1
    2128:	4a 30       	cpi	r20, 0x0A	; 10
    212a:	51 05       	cpc	r21, r1
    212c:	40 f4       	brcc	.+16     	; 0x213e <parse_ip+0x5c>
                        strbuf[bufpos]=*str; // copy
    212e:	e1 e0       	ldi	r30, 0x01	; 1
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	ec 0f       	add	r30, r28
    2134:	fd 1f       	adc	r31, r29
    2136:	e2 0f       	add	r30, r18
    2138:	f1 1d       	adc	r31, r1
    213a:	90 83       	st	Z, r25
                        bufpos++;
    213c:	2f 5f       	subi	r18, 0xFF	; 255
                }
                if (bufpos && *str == '.'){
    213e:	22 23       	and	r18, r18
    2140:	a1 f0       	breq	.+40     	; 0x216a <parse_ip+0x88>
    2142:	9e 32       	cpi	r25, 0x2E	; 46
    2144:	91 f4       	brne	.+36     	; 0x216a <parse_ip+0x88>
                        strbuf[bufpos]='\0';
    2146:	e1 e0       	ldi	r30, 0x01	; 1
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	ec 0f       	add	r30, r28
    214c:	fd 1f       	adc	r31, r29
    214e:	e2 0f       	add	r30, r18
    2150:	f1 1d       	adc	r31, r1
    2152:	10 82       	st	Z, r1
                        ip_byte_str[i]=(atoi(strbuf)&0xff);
    2154:	57 01       	movw	r10, r14
    2156:	ad 0c       	add	r10, r13
    2158:	b1 1c       	adc	r11, r1
    215a:	ce 01       	movw	r24, r28
    215c:	01 96       	adiw	r24, 0x01	; 1
    215e:	0e 94 c5 2f 	call	0x5f8a	; 0x5f8a <atoi>
    2162:	f5 01       	movw	r30, r10
    2164:	80 83       	st	Z, r24
                        i++;
    2166:	d3 94       	inc	r13
                        bufpos=0;
    2168:	20 e0       	ldi	r18, 0x00	; 0
        while(i<4){
                ip_byte_str[i]=0;
                i++;
        }
        i=0;
        while(*str && i<4){
    216a:	d8 01       	movw	r26, r16
    216c:	9d 91       	ld	r25, X+
    216e:	8d 01       	movw	r16, r26
    2170:	99 23       	and	r25, r25
    2172:	19 f0       	breq	.+6      	; 0x217a <parse_ip+0x98>
    2174:	b3 e0       	ldi	r27, 0x03	; 3
    2176:	bd 15       	cp	r27, r13
    2178:	88 f6       	brcc	.-94     	; 0x211c <parse_ip+0x3a>
                        i++;
                        bufpos=0;
                }
                str++;
        }
        if (i==3){ // must have read the first componets of the IP
    217a:	e3 e0       	ldi	r30, 0x03	; 3
    217c:	de 12       	cpse	r13, r30
    217e:	12 c0       	rjmp	.+36     	; 0x21a4 <parse_ip+0xc2>
                strbuf[bufpos]='\0';
    2180:	e1 e0       	ldi	r30, 0x01	; 1
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	ec 0f       	add	r30, r28
    2186:	fd 1f       	adc	r31, r29
    2188:	e2 0f       	add	r30, r18
    218a:	f1 1d       	adc	r31, r1
    218c:	10 82       	st	Z, r1
                ip_byte_str[i]=(atoi(strbuf)&0xff);
    218e:	ce 01       	movw	r24, r28
    2190:	01 96       	adiw	r24, 0x01	; 1
    2192:	0e 94 c5 2f 	call	0x5f8a	; 0x5f8a <atoi>
    2196:	d7 01       	movw	r26, r14
    2198:	13 96       	adiw	r26, 0x03	; 3
    219a:	8c 93       	st	X, r24
                return(0);
    219c:	80 e0       	ldi	r24, 0x00	; 0
    219e:	03 c0       	rjmp	.+6      	; 0x21a6 <parse_ip+0xc4>
        }
        return(1);
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	01 c0       	rjmp	.+2      	; 0x21a6 <parse_ip+0xc4>
    21a4:	81 e0       	ldi	r24, 0x01	; 1
}
    21a6:	0f 90       	pop	r0
    21a8:	0f 90       	pop	r0
    21aa:	0f 90       	pop	r0
    21ac:	0f 90       	pop	r0
    21ae:	df 91       	pop	r29
    21b0:	cf 91       	pop	r28
    21b2:	1f 91       	pop	r17
    21b4:	0f 91       	pop	r16
    21b6:	ff 90       	pop	r15
    21b8:	ef 90       	pop	r14
    21ba:	df 90       	pop	r13
    21bc:	bf 90       	pop	r11
    21be:	af 90       	pop	r10
    21c0:	08 95       	ret

000021c2 <mem_cpy>:
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    21c2:	cf 93       	push	r28
    21c4:	df 93       	push	r29
    21c6:	42 30       	cpi	r20, 0x02	; 2
    21c8:	51 05       	cpc	r21, r1
    21ca:	c0 f0       	brcs	.+48     	; 0x21fc <mem_cpy+0x3a>
    21cc:	db 01       	movw	r26, r22
    21ce:	fc 01       	movw	r30, r24
    21d0:	9a 01       	movw	r18, r20
    21d2:	cd 91       	ld	r28, X+
    21d4:	dd 91       	ld	r29, X+
    21d6:	c1 93       	st	Z+, r28
    21d8:	d1 93       	st	Z+, r29
    21da:	22 50       	subi	r18, 0x02	; 2
    21dc:	31 09       	sbc	r19, r1
    21de:	22 30       	cpi	r18, 0x02	; 2
    21e0:	31 05       	cpc	r19, r1
    21e2:	b8 f7       	brcc	.-18     	; 0x21d2 <mem_cpy+0x10>
    21e4:	9a 01       	movw	r18, r20
    21e6:	22 50       	subi	r18, 0x02	; 2
    21e8:	31 09       	sbc	r19, r1
    21ea:	2e 7f       	andi	r18, 0xFE	; 254
    21ec:	2e 5f       	subi	r18, 0xFE	; 254
    21ee:	3f 4f       	sbci	r19, 0xFF	; 255
    21f0:	82 0f       	add	r24, r18
    21f2:	93 1f       	adc	r25, r19
    21f4:	62 0f       	add	r22, r18
    21f6:	73 1f       	adc	r23, r19
    21f8:	41 70       	andi	r20, 0x01	; 1
    21fa:	55 27       	eor	r21, r21
    21fc:	41 15       	cp	r20, r1
    21fe:	51 05       	cpc	r21, r1
    2200:	49 f0       	breq	.+18     	; 0x2214 <mem_cpy+0x52>
    2202:	db 01       	movw	r26, r22
    2204:	fc 01       	movw	r30, r24
    2206:	48 0f       	add	r20, r24
    2208:	59 1f       	adc	r21, r25
    220a:	9d 91       	ld	r25, X+
    220c:	91 93       	st	Z+, r25
    220e:	e4 17       	cp	r30, r20
    2210:	f5 07       	cpc	r31, r21
    2212:	d9 f7       	brne	.-10     	; 0x220a <mem_cpy+0x48>
    2214:	df 91       	pop	r29
    2216:	cf 91       	pop	r28
    2218:	08 95       	ret

0000221a <get_ldnumber>:
    221a:	cf 93       	push	r28
    221c:	df 93       	push	r29
    221e:	ec 01       	movw	r28, r24
    2220:	a8 81       	ld	r26, Y
    2222:	b9 81       	ldd	r27, Y+1	; 0x01
    2224:	10 97       	sbiw	r26, 0x00	; 0
    2226:	f9 f0       	breq	.+62     	; 0x2266 <get_ldnumber+0x4c>
    2228:	4c 91       	ld	r20, X
    222a:	41 32       	cpi	r20, 0x21	; 33
    222c:	58 f0       	brcs	.+22     	; 0x2244 <get_ldnumber+0x2a>
    222e:	4a 33       	cpi	r20, 0x3A	; 58
    2230:	31 f1       	breq	.+76     	; 0x227e <get_ldnumber+0x64>
    2232:	fd 01       	movw	r30, r26
    2234:	31 96       	adiw	r30, 0x01	; 1
    2236:	9f 01       	movw	r18, r30
    2238:	91 91       	ld	r25, Z+
    223a:	91 32       	cpi	r25, 0x21	; 33
    223c:	28 f0       	brcs	.+10     	; 0x2248 <get_ldnumber+0x2e>
    223e:	9a 33       	cpi	r25, 0x3A	; 58
    2240:	d1 f7       	brne	.-12     	; 0x2236 <get_ldnumber+0x1c>
    2242:	04 c0       	rjmp	.+8      	; 0x224c <get_ldnumber+0x32>
    2244:	94 2f       	mov	r25, r20
    2246:	9d 01       	movw	r18, r26
    2248:	9a 33       	cpi	r25, 0x3A	; 58
    224a:	81 f4       	brne	.+32     	; 0x226c <get_ldnumber+0x52>
    224c:	cd 01       	movw	r24, r26
    224e:	01 96       	adiw	r24, 0x01	; 1
    2250:	28 17       	cp	r18, r24
    2252:	39 07       	cpc	r19, r25
    2254:	71 f4       	brne	.+28     	; 0x2272 <get_ldnumber+0x58>
    2256:	40 33       	cpi	r20, 0x30	; 48
    2258:	79 f4       	brne	.+30     	; 0x2278 <get_ldnumber+0x5e>
    225a:	12 96       	adiw	r26, 0x02	; 2
    225c:	b9 83       	std	Y+1, r27	; 0x01
    225e:	a8 83       	st	Y, r26
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	0e c0       	rjmp	.+28     	; 0x2282 <get_ldnumber+0x68>
    2266:	8f ef       	ldi	r24, 0xFF	; 255
    2268:	9f ef       	ldi	r25, 0xFF	; 255
    226a:	0b c0       	rjmp	.+22     	; 0x2282 <get_ldnumber+0x68>
    226c:	80 e0       	ldi	r24, 0x00	; 0
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	08 c0       	rjmp	.+16     	; 0x2282 <get_ldnumber+0x68>
    2272:	8f ef       	ldi	r24, 0xFF	; 255
    2274:	9f ef       	ldi	r25, 0xFF	; 255
    2276:	05 c0       	rjmp	.+10     	; 0x2282 <get_ldnumber+0x68>
    2278:	8f ef       	ldi	r24, 0xFF	; 255
    227a:	9f ef       	ldi	r25, 0xFF	; 255
    227c:	02 c0       	rjmp	.+4      	; 0x2282 <get_ldnumber+0x68>
    227e:	9d 01       	movw	r18, r26
    2280:	e5 cf       	rjmp	.-54     	; 0x224c <get_ldnumber+0x32>
    2282:	df 91       	pop	r29
    2284:	cf 91       	pop	r28
    2286:	08 95       	ret

00002288 <sync_window>:
    2288:	8f 92       	push	r8
    228a:	9f 92       	push	r9
    228c:	af 92       	push	r10
    228e:	bf 92       	push	r11
    2290:	cf 92       	push	r12
    2292:	df 92       	push	r13
    2294:	ef 92       	push	r14
    2296:	ff 92       	push	r15
    2298:	0f 93       	push	r16
    229a:	1f 93       	push	r17
    229c:	cf 93       	push	r28
    229e:	df 93       	push	r29
    22a0:	fc 01       	movw	r30, r24
    22a2:	24 81       	ldd	r18, Z+4	; 0x04
    22a4:	22 23       	and	r18, r18
    22a6:	09 f4       	brne	.+2      	; 0x22aa <sync_window+0x22>
    22a8:	46 c0       	rjmp	.+140    	; 0x2336 <sync_window+0xae>
    22aa:	ec 01       	movw	r28, r24
    22ac:	c2 a4       	ldd	r12, Z+42	; 0x2a
    22ae:	d3 a4       	ldd	r13, Z+43	; 0x2b
    22b0:	e4 a4       	ldd	r14, Z+44	; 0x2c
    22b2:	f5 a4       	ldd	r15, Z+45	; 0x2d
    22b4:	5c 01       	movw	r10, r24
    22b6:	fe e2       	ldi	r31, 0x2E	; 46
    22b8:	af 0e       	add	r10, r31
    22ba:	b1 1c       	adc	r11, r1
    22bc:	01 e0       	ldi	r16, 0x01	; 1
    22be:	10 e0       	ldi	r17, 0x00	; 0
    22c0:	a7 01       	movw	r20, r14
    22c2:	96 01       	movw	r18, r12
    22c4:	b5 01       	movw	r22, r10
    22c6:	89 81       	ldd	r24, Y+1	; 0x01
    22c8:	0e 94 49 24 	call	0x4892	; 0x4892 <disk_write>
    22cc:	81 11       	cpse	r24, r1
    22ce:	35 c0       	rjmp	.+106    	; 0x233a <sync_window+0xb2>
    22d0:	1c 82       	std	Y+4, r1	; 0x04
    22d2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22d4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    22d6:	a8 a1       	ldd	r26, Y+32	; 0x20
    22d8:	b9 a1       	ldd	r27, Y+33	; 0x21
    22da:	b7 01       	movw	r22, r14
    22dc:	a6 01       	movw	r20, r12
    22de:	48 1b       	sub	r20, r24
    22e0:	59 0b       	sbc	r21, r25
    22e2:	6a 0b       	sbc	r22, r26
    22e4:	7b 0b       	sbc	r23, r27
    22e6:	8e 89       	ldd	r24, Y+22	; 0x16
    22e8:	9f 89       	ldd	r25, Y+23	; 0x17
    22ea:	a8 8d       	ldd	r26, Y+24	; 0x18
    22ec:	b9 8d       	ldd	r27, Y+25	; 0x19
    22ee:	48 17       	cp	r20, r24
    22f0:	59 07       	cpc	r21, r25
    22f2:	6a 07       	cpc	r22, r26
    22f4:	7b 07       	cpc	r23, r27
    22f6:	18 f5       	brcc	.+70     	; 0x233e <sync_window+0xb6>
    22f8:	8b 80       	ldd	r8, Y+3	; 0x03
    22fa:	91 2c       	mov	r9, r1
    22fc:	82 e0       	ldi	r24, 0x02	; 2
    22fe:	88 16       	cp	r8, r24
    2300:	91 04       	cpc	r9, r1
    2302:	f8 f0       	brcs	.+62     	; 0x2342 <sync_window+0xba>
    2304:	8e 89       	ldd	r24, Y+22	; 0x16
    2306:	9f 89       	ldd	r25, Y+23	; 0x17
    2308:	a8 8d       	ldd	r26, Y+24	; 0x18
    230a:	b9 8d       	ldd	r27, Y+25	; 0x19
    230c:	c8 0e       	add	r12, r24
    230e:	d9 1e       	adc	r13, r25
    2310:	ea 1e       	adc	r14, r26
    2312:	fb 1e       	adc	r15, r27
    2314:	01 e0       	ldi	r16, 0x01	; 1
    2316:	10 e0       	ldi	r17, 0x00	; 0
    2318:	a7 01       	movw	r20, r14
    231a:	96 01       	movw	r18, r12
    231c:	b5 01       	movw	r22, r10
    231e:	89 81       	ldd	r24, Y+1	; 0x01
    2320:	0e 94 49 24 	call	0x4892	; 0x4892 <disk_write>
    2324:	e1 e0       	ldi	r30, 0x01	; 1
    2326:	8e 1a       	sub	r8, r30
    2328:	91 08       	sbc	r9, r1
    232a:	f1 e0       	ldi	r31, 0x01	; 1
    232c:	8f 16       	cp	r8, r31
    232e:	91 04       	cpc	r9, r1
    2330:	49 f7       	brne	.-46     	; 0x2304 <sync_window+0x7c>
    2332:	80 e0       	ldi	r24, 0x00	; 0
    2334:	07 c0       	rjmp	.+14     	; 0x2344 <sync_window+0xbc>
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	05 c0       	rjmp	.+10     	; 0x2344 <sync_window+0xbc>
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	03 c0       	rjmp	.+6      	; 0x2344 <sync_window+0xbc>
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	01 c0       	rjmp	.+2      	; 0x2344 <sync_window+0xbc>
    2342:	80 e0       	ldi	r24, 0x00	; 0
    2344:	df 91       	pop	r29
    2346:	cf 91       	pop	r28
    2348:	1f 91       	pop	r17
    234a:	0f 91       	pop	r16
    234c:	ff 90       	pop	r15
    234e:	ef 90       	pop	r14
    2350:	df 90       	pop	r13
    2352:	cf 90       	pop	r12
    2354:	bf 90       	pop	r11
    2356:	af 90       	pop	r10
    2358:	9f 90       	pop	r9
    235a:	8f 90       	pop	r8
    235c:	08 95       	ret

0000235e <move_window>:
    235e:	8f 92       	push	r8
    2360:	9f 92       	push	r9
    2362:	af 92       	push	r10
    2364:	bf 92       	push	r11
    2366:	ff 92       	push	r15
    2368:	0f 93       	push	r16
    236a:	1f 93       	push	r17
    236c:	cf 93       	push	r28
    236e:	df 93       	push	r29
    2370:	ec 01       	movw	r28, r24
    2372:	4a 01       	movw	r8, r20
    2374:	5b 01       	movw	r10, r22
    2376:	8a a5       	ldd	r24, Y+42	; 0x2a
    2378:	9b a5       	ldd	r25, Y+43	; 0x2b
    237a:	ac a5       	ldd	r26, Y+44	; 0x2c
    237c:	bd a5       	ldd	r27, Y+45	; 0x2d
    237e:	84 17       	cp	r24, r20
    2380:	95 07       	cpc	r25, r21
    2382:	a6 07       	cpc	r26, r22
    2384:	b7 07       	cpc	r27, r23
    2386:	e9 f0       	breq	.+58     	; 0x23c2 <move_window+0x64>
    2388:	ce 01       	movw	r24, r28
    238a:	0e 94 44 11 	call	0x2288	; 0x2288 <sync_window>
    238e:	f8 2e       	mov	r15, r24
    2390:	81 11       	cpse	r24, r1
    2392:	18 c0       	rjmp	.+48     	; 0x23c4 <move_window+0x66>
    2394:	01 e0       	ldi	r16, 0x01	; 1
    2396:	10 e0       	ldi	r17, 0x00	; 0
    2398:	a5 01       	movw	r20, r10
    239a:	94 01       	movw	r18, r8
    239c:	be 01       	movw	r22, r28
    239e:	62 5d       	subi	r22, 0xD2	; 210
    23a0:	7f 4f       	sbci	r23, 0xFF	; 255
    23a2:	89 81       	ldd	r24, Y+1	; 0x01
    23a4:	0e 94 f3 23 	call	0x47e6	; 0x47e6 <disk_read>
    23a8:	88 23       	and	r24, r24
    23aa:	31 f0       	breq	.+12     	; 0x23b8 <move_window+0x5a>
    23ac:	ff 24       	eor	r15, r15
    23ae:	f3 94       	inc	r15
    23b0:	88 24       	eor	r8, r8
    23b2:	8a 94       	dec	r8
    23b4:	98 2c       	mov	r9, r8
    23b6:	54 01       	movw	r10, r8
    23b8:	8a a6       	std	Y+42, r8	; 0x2a
    23ba:	9b a6       	std	Y+43, r9	; 0x2b
    23bc:	ac a6       	std	Y+44, r10	; 0x2c
    23be:	bd a6       	std	Y+45, r11	; 0x2d
    23c0:	01 c0       	rjmp	.+2      	; 0x23c4 <move_window+0x66>
    23c2:	f1 2c       	mov	r15, r1
    23c4:	8f 2d       	mov	r24, r15
    23c6:	df 91       	pop	r29
    23c8:	cf 91       	pop	r28
    23ca:	1f 91       	pop	r17
    23cc:	0f 91       	pop	r16
    23ce:	ff 90       	pop	r15
    23d0:	bf 90       	pop	r11
    23d2:	af 90       	pop	r10
    23d4:	9f 90       	pop	r9
    23d6:	8f 90       	pop	r8
    23d8:	08 95       	ret

000023da <check_fs>:
    23da:	cf 93       	push	r28
    23dc:	df 93       	push	r29
    23de:	ec 01       	movw	r28, r24
    23e0:	1c 82       	std	Y+4, r1	; 0x04
    23e2:	8f ef       	ldi	r24, 0xFF	; 255
    23e4:	9f ef       	ldi	r25, 0xFF	; 255
    23e6:	dc 01       	movw	r26, r24
    23e8:	8a a7       	std	Y+42, r24	; 0x2a
    23ea:	9b a7       	std	Y+43, r25	; 0x2b
    23ec:	ac a7       	std	Y+44, r26	; 0x2c
    23ee:	bd a7       	std	Y+45, r27	; 0x2d
    23f0:	ce 01       	movw	r24, r28
    23f2:	0e 94 af 11 	call	0x235e	; 0x235e <move_window>
    23f6:	81 11       	cpse	r24, r1
    23f8:	23 c0       	rjmp	.+70     	; 0x2440 <check_fs+0x66>
    23fa:	fe 01       	movw	r30, r28
    23fc:	e4 5d       	subi	r30, 0xD4	; 212
    23fe:	fd 4f       	sbci	r31, 0xFD	; 253
    2400:	80 81       	ld	r24, Z
    2402:	91 81       	ldd	r25, Z+1	; 0x01
    2404:	85 35       	cpi	r24, 0x55	; 85
    2406:	9a 4a       	sbci	r25, 0xAA	; 170
    2408:	e9 f4       	brne	.+58     	; 0x2444 <check_fs+0x6a>
    240a:	e8 5c       	subi	r30, 0xC8	; 200
    240c:	f1 40       	sbci	r31, 0x01	; 1
    240e:	80 81       	ld	r24, Z
    2410:	91 81       	ldd	r25, Z+1	; 0x01
    2412:	a2 81       	ldd	r26, Z+2	; 0x02
    2414:	b3 81       	ldd	r27, Z+3	; 0x03
    2416:	bb 27       	eor	r27, r27
    2418:	86 34       	cpi	r24, 0x46	; 70
    241a:	91 44       	sbci	r25, 0x41	; 65
    241c:	a4 45       	sbci	r26, 0x54	; 84
    241e:	b1 05       	cpc	r27, r1
    2420:	99 f0       	breq	.+38     	; 0x2448 <check_fs+0x6e>
    2422:	c0 58       	subi	r28, 0x80	; 128
    2424:	df 4f       	sbci	r29, 0xFF	; 255
    2426:	48 81       	ld	r20, Y
    2428:	59 81       	ldd	r21, Y+1	; 0x01
    242a:	6a 81       	ldd	r22, Y+2	; 0x02
    242c:	7b 81       	ldd	r23, Y+3	; 0x03
    242e:	77 27       	eor	r23, r23
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	46 34       	cpi	r20, 0x46	; 70
    2434:	51 44       	sbci	r21, 0x41	; 65
    2436:	64 45       	sbci	r22, 0x54	; 84
    2438:	71 05       	cpc	r23, r1
    243a:	39 f4       	brne	.+14     	; 0x244a <check_fs+0x70>
    243c:	80 e0       	ldi	r24, 0x00	; 0
    243e:	05 c0       	rjmp	.+10     	; 0x244a <check_fs+0x70>
    2440:	83 e0       	ldi	r24, 0x03	; 3
    2442:	03 c0       	rjmp	.+6      	; 0x244a <check_fs+0x70>
    2444:	82 e0       	ldi	r24, 0x02	; 2
    2446:	01 c0       	rjmp	.+2      	; 0x244a <check_fs+0x70>
    2448:	80 e0       	ldi	r24, 0x00	; 0
    244a:	df 91       	pop	r29
    244c:	cf 91       	pop	r28
    244e:	08 95       	ret

00002450 <validate>:
    2450:	00 97       	sbiw	r24, 0x00	; 0
    2452:	c9 f0       	breq	.+50     	; 0x2486 <validate+0x36>
    2454:	dc 01       	movw	r26, r24
    2456:	ed 91       	ld	r30, X+
    2458:	fc 91       	ld	r31, X
    245a:	11 97       	sbiw	r26, 0x01	; 1
    245c:	30 97       	sbiw	r30, 0x00	; 0
    245e:	a9 f0       	breq	.+42     	; 0x248a <validate+0x3a>
    2460:	20 81       	ld	r18, Z
    2462:	22 23       	and	r18, r18
    2464:	a1 f0       	breq	.+40     	; 0x248e <validate+0x3e>
    2466:	26 81       	ldd	r18, Z+6	; 0x06
    2468:	37 81       	ldd	r19, Z+7	; 0x07
    246a:	12 96       	adiw	r26, 0x02	; 2
    246c:	8d 91       	ld	r24, X+
    246e:	9c 91       	ld	r25, X
    2470:	13 97       	sbiw	r26, 0x03	; 3
    2472:	28 17       	cp	r18, r24
    2474:	39 07       	cpc	r19, r25
    2476:	69 f4       	brne	.+26     	; 0x2492 <validate+0x42>
    2478:	81 81       	ldd	r24, Z+1	; 0x01
    247a:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <disk_status>
    247e:	80 fd       	sbrc	r24, 0
    2480:	0a c0       	rjmp	.+20     	; 0x2496 <validate+0x46>
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	08 95       	ret
    2486:	89 e0       	ldi	r24, 0x09	; 9
    2488:	08 95       	ret
    248a:	89 e0       	ldi	r24, 0x09	; 9
    248c:	08 95       	ret
    248e:	89 e0       	ldi	r24, 0x09	; 9
    2490:	08 95       	ret
    2492:	89 e0       	ldi	r24, 0x09	; 9
    2494:	08 95       	ret
    2496:	83 e0       	ldi	r24, 0x03	; 3
    2498:	08 95       	ret

0000249a <find_volume>:
    249a:	2f 92       	push	r2
    249c:	3f 92       	push	r3
    249e:	4f 92       	push	r4
    24a0:	5f 92       	push	r5
    24a2:	6f 92       	push	r6
    24a4:	7f 92       	push	r7
    24a6:	8f 92       	push	r8
    24a8:	9f 92       	push	r9
    24aa:	af 92       	push	r10
    24ac:	bf 92       	push	r11
    24ae:	cf 92       	push	r12
    24b0:	df 92       	push	r13
    24b2:	ef 92       	push	r14
    24b4:	ff 92       	push	r15
    24b6:	0f 93       	push	r16
    24b8:	1f 93       	push	r17
    24ba:	cf 93       	push	r28
    24bc:	df 93       	push	r29
    24be:	cd b7       	in	r28, 0x3d	; 61
    24c0:	de b7       	in	r29, 0x3e	; 62
    24c2:	6d 97       	sbiw	r28, 0x1d	; 29
    24c4:	0f b6       	in	r0, 0x3f	; 63
    24c6:	f8 94       	cli
    24c8:	de bf       	out	0x3e, r29	; 62
    24ca:	0f be       	out	0x3f, r0	; 63
    24cc:	cd bf       	out	0x3d, r28	; 61
    24ce:	6c 01       	movw	r12, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	b4 2e       	mov	r11, r20
    24d4:	d6 01       	movw	r26, r12
    24d6:	1d 92       	st	X+, r1
    24d8:	1c 92       	st	X, r1
    24da:	0e 94 0d 11 	call	0x221a	; 0x221a <get_ldnumber>
    24de:	7c 01       	movw	r14, r24
    24e0:	99 23       	and	r25, r25
    24e2:	0c f4       	brge	.+2      	; 0x24e6 <find_volume+0x4c>
    24e4:	04 c2       	rjmp	.+1032   	; 0x28ee <find_volume+0x454>
    24e6:	fc 01       	movw	r30, r24
    24e8:	ee 0f       	add	r30, r30
    24ea:	ff 1f       	adc	r31, r31
    24ec:	e5 51       	subi	r30, 0x15	; 21
    24ee:	fc 4f       	sbci	r31, 0xFC	; 252
    24f0:	00 81       	ld	r16, Z
    24f2:	11 81       	ldd	r17, Z+1	; 0x01
    24f4:	01 15       	cp	r16, r1
    24f6:	11 05       	cpc	r17, r1
    24f8:	09 f4       	brne	.+2      	; 0x24fc <find_volume+0x62>
    24fa:	fb c1       	rjmp	.+1014   	; 0x28f2 <find_volume+0x458>
    24fc:	f6 01       	movw	r30, r12
    24fe:	11 83       	std	Z+1, r17	; 0x01
    2500:	00 83       	st	Z, r16
    2502:	d8 01       	movw	r26, r16
    2504:	8c 91       	ld	r24, X
    2506:	88 23       	and	r24, r24
    2508:	69 f0       	breq	.+26     	; 0x2524 <find_volume+0x8a>
    250a:	11 96       	adiw	r26, 0x01	; 1
    250c:	8c 91       	ld	r24, X
    250e:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <disk_status>
    2512:	80 fd       	sbrc	r24, 0
    2514:	07 c0       	rjmp	.+14     	; 0x2524 <find_volume+0x8a>
    2516:	bb 20       	and	r11, r11
    2518:	09 f4       	brne	.+2      	; 0x251c <find_volume+0x82>
    251a:	ed c1       	rjmp	.+986    	; 0x28f6 <find_volume+0x45c>
    251c:	82 ff       	sbrs	r24, 2
    251e:	ed c1       	rjmp	.+986    	; 0x28fa <find_volume+0x460>
    2520:	8a e0       	ldi	r24, 0x0A	; 10
    2522:	8e c2       	rjmp	.+1308   	; 0x2a40 <find_volume+0x5a6>
    2524:	f8 01       	movw	r30, r16
    2526:	10 82       	st	Z, r1
    2528:	e1 82       	std	Z+1, r14	; 0x01
    252a:	8e 2d       	mov	r24, r14
    252c:	0e 94 28 23 	call	0x4650	; 0x4650 <disk_initialize>
    2530:	80 fd       	sbrc	r24, 0
    2532:	e5 c1       	rjmp	.+970    	; 0x28fe <find_volume+0x464>
    2534:	bb 20       	and	r11, r11
    2536:	09 f4       	brne	.+2      	; 0x253a <find_volume+0xa0>
    2538:	02 c2       	rjmp	.+1028   	; 0x293e <find_volume+0x4a4>
    253a:	82 fd       	sbrc	r24, 2
    253c:	e2 c1       	rjmp	.+964    	; 0x2902 <find_volume+0x468>
    253e:	ff c1       	rjmp	.+1022   	; 0x293e <find_volume+0x4a4>
    2540:	80 81       	ld	r24, Z
    2542:	88 23       	and	r24, r24
    2544:	29 f0       	breq	.+10     	; 0x2550 <find_volume+0xb6>
    2546:	44 80       	ldd	r4, Z+4	; 0x04
    2548:	55 80       	ldd	r5, Z+5	; 0x05
    254a:	66 80       	ldd	r6, Z+6	; 0x06
    254c:	77 80       	ldd	r7, Z+7	; 0x07
    254e:	04 c0       	rjmp	.+8      	; 0x2558 <find_volume+0xbe>
    2550:	4e 2c       	mov	r4, r14
    2552:	5f 2c       	mov	r5, r15
    2554:	67 2e       	mov	r6, r23
    2556:	76 2e       	mov	r7, r22
    2558:	d9 01       	movw	r26, r18
    255a:	4d 92       	st	X+, r4
    255c:	5d 92       	st	X+, r5
    255e:	6d 92       	st	X+, r6
    2560:	7d 92       	st	X+, r7
    2562:	9d 01       	movw	r18, r26
    2564:	70 96       	adiw	r30, 0x10	; 16
    2566:	4e 17       	cp	r20, r30
    2568:	5f 07       	cpc	r21, r31
    256a:	51 f7       	brne	.-44     	; 0x2540 <find_volume+0xa6>
    256c:	4e 01       	movw	r8, r28
    256e:	b1 e1       	ldi	r27, 0x11	; 17
    2570:	8b 0e       	add	r8, r27
    2572:	91 1c       	adc	r9, r1
    2574:	68 94       	set
    2576:	77 24       	eor	r7, r7
    2578:	71 f8       	bld	r7, 1
    257a:	f5 01       	movw	r30, r10
    257c:	c1 90       	ld	r12, Z+
    257e:	d1 90       	ld	r13, Z+
    2580:	e1 90       	ld	r14, Z+
    2582:	f1 90       	ld	r15, Z+
    2584:	5f 01       	movw	r10, r30
    2586:	c1 14       	cp	r12, r1
    2588:	d1 04       	cpc	r13, r1
    258a:	e1 04       	cpc	r14, r1
    258c:	f1 04       	cpc	r15, r1
    258e:	41 f0       	breq	.+16     	; 0x25a0 <find_volume+0x106>
    2590:	b7 01       	movw	r22, r14
    2592:	a6 01       	movw	r20, r12
    2594:	c8 01       	movw	r24, r16
    2596:	0e 94 ed 11 	call	0x23da	; 0x23da <check_fs>
    259a:	81 11       	cpse	r24, r1
    259c:	02 c0       	rjmp	.+4      	; 0x25a2 <find_volume+0x108>
    259e:	0d c0       	rjmp	.+26     	; 0x25ba <find_volume+0x120>
    25a0:	87 2d       	mov	r24, r7
    25a2:	a8 14       	cp	r10, r8
    25a4:	b9 04       	cpc	r11, r9
    25a6:	49 f7       	brne	.-46     	; 0x257a <find_volume+0xe0>
    25a8:	03 c0       	rjmp	.+6      	; 0x25b0 <find_volume+0x116>
    25aa:	c1 2c       	mov	r12, r1
    25ac:	d1 2c       	mov	r13, r1
    25ae:	76 01       	movw	r14, r12
    25b0:	83 30       	cpi	r24, 0x03	; 3
    25b2:	09 f4       	brne	.+2      	; 0x25b6 <find_volume+0x11c>
    25b4:	a8 c1       	rjmp	.+848    	; 0x2906 <find_volume+0x46c>
    25b6:	81 11       	cpse	r24, r1
    25b8:	a8 c1       	rjmp	.+848    	; 0x290a <find_volume+0x470>
    25ba:	d8 01       	movw	r26, r16
    25bc:	d9 96       	adiw	r26, 0x39	; 57
    25be:	8d 91       	ld	r24, X+
    25c0:	9c 91       	ld	r25, X
    25c2:	da 97       	sbiw	r26, 0x3a	; 58
    25c4:	81 15       	cp	r24, r1
    25c6:	92 40       	sbci	r25, 0x02	; 2
    25c8:	09 f0       	breq	.+2      	; 0x25cc <find_volume+0x132>
    25ca:	a1 c1       	rjmp	.+834    	; 0x290e <find_volume+0x474>
    25cc:	f8 01       	movw	r30, r16
    25ce:	ec 5b       	subi	r30, 0xBC	; 188
    25d0:	ff 4f       	sbci	r31, 0xFF	; 255
    25d2:	40 80       	ld	r4, Z
    25d4:	51 80       	ldd	r5, Z+1	; 0x01
    25d6:	61 2c       	mov	r6, r1
    25d8:	71 2c       	mov	r7, r1
    25da:	41 14       	cp	r4, r1
    25dc:	51 04       	cpc	r5, r1
    25de:	61 04       	cpc	r6, r1
    25e0:	71 04       	cpc	r7, r1
    25e2:	29 f4       	brne	.+10     	; 0x25ee <find_volume+0x154>
    25e4:	3e 96       	adiw	r30, 0x0e	; 14
    25e6:	40 80       	ld	r4, Z
    25e8:	51 80       	ldd	r5, Z+1	; 0x01
    25ea:	62 80       	ldd	r6, Z+2	; 0x02
    25ec:	73 80       	ldd	r7, Z+3	; 0x03
    25ee:	f8 01       	movw	r30, r16
    25f0:	46 8a       	std	Z+22, r4	; 0x16
    25f2:	57 8a       	std	Z+23, r5	; 0x17
    25f4:	60 8e       	std	Z+24, r6	; 0x18
    25f6:	71 8e       	std	Z+25, r7	; 0x19
    25f8:	a6 ad       	ldd	r26, Z+62	; 0x3e
    25fa:	a3 83       	std	Z+3, r26	; 0x03
    25fc:	8f ef       	ldi	r24, 0xFF	; 255
    25fe:	8a 0f       	add	r24, r26
    2600:	82 30       	cpi	r24, 0x02	; 2
    2602:	08 f0       	brcs	.+2      	; 0x2606 <find_volume+0x16c>
    2604:	86 c1       	rjmp	.+780    	; 0x2912 <find_volume+0x478>
    2606:	f3 ad       	ldd	r31, Z+59	; 0x3b
    2608:	f9 8b       	std	Y+17, r31	; 0x11
    260a:	2f 2f       	mov	r18, r31
    260c:	f8 01       	movw	r30, r16
    260e:	22 83       	std	Z+2, r18	; 0x02
    2610:	22 23       	and	r18, r18
    2612:	09 f4       	brne	.+2      	; 0x2616 <find_volume+0x17c>
    2614:	80 c1       	rjmp	.+768    	; 0x2916 <find_volume+0x47c>
    2616:	82 2f       	mov	r24, r18
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	9c 01       	movw	r18, r24
    261c:	21 50       	subi	r18, 0x01	; 1
    261e:	31 09       	sbc	r19, r1
    2620:	82 23       	and	r24, r18
    2622:	93 23       	and	r25, r19
    2624:	89 2b       	or	r24, r25
    2626:	09 f0       	breq	.+2      	; 0x262a <find_volume+0x190>
    2628:	78 c1       	rjmp	.+752    	; 0x291a <find_volume+0x480>
    262a:	ff 96       	adiw	r30, 0x3f	; 63
    262c:	20 80       	ld	r2, Z
    262e:	31 80       	ldd	r3, Z+1	; 0x01
    2630:	f8 01       	movw	r30, r16
    2632:	31 86       	std	Z+9, r3	; 0x09
    2634:	20 86       	std	Z+8, r2	; 0x08
    2636:	c1 01       	movw	r24, r2
    2638:	8f 70       	andi	r24, 0x0F	; 15
    263a:	99 27       	eor	r25, r25
    263c:	89 2b       	or	r24, r25
    263e:	09 f0       	breq	.+2      	; 0x2642 <find_volume+0x1a8>
    2640:	6e c1       	rjmp	.+732    	; 0x291e <find_volume+0x484>
    2642:	ef 5b       	subi	r30, 0xBF	; 191
    2644:	ff 4f       	sbci	r31, 0xFF	; 255
    2646:	80 80       	ld	r8, Z
    2648:	91 80       	ldd	r9, Z+1	; 0x01
    264a:	a1 2c       	mov	r10, r1
    264c:	b1 2c       	mov	r11, r1
    264e:	81 14       	cp	r8, r1
    2650:	91 04       	cpc	r9, r1
    2652:	a1 04       	cpc	r10, r1
    2654:	b1 04       	cpc	r11, r1
    2656:	29 f4       	brne	.+10     	; 0x2662 <find_volume+0x1c8>
    2658:	3d 96       	adiw	r30, 0x0d	; 13
    265a:	80 80       	ld	r8, Z
    265c:	91 80       	ldd	r9, Z+1	; 0x01
    265e:	a2 80       	ldd	r10, Z+2	; 0x02
    2660:	b3 80       	ldd	r11, Z+3	; 0x03
    2662:	f8 01       	movw	r30, r16
    2664:	04 ac       	ldd	r0, Z+60	; 0x3c
    2666:	f5 ad       	ldd	r31, Z+61	; 0x3d
    2668:	e0 2d       	mov	r30, r0
    266a:	30 97       	sbiw	r30, 0x00	; 0
    266c:	09 f4       	brne	.+2      	; 0x2670 <find_volume+0x1d6>
    266e:	59 c1       	rjmp	.+690    	; 0x2922 <find_volume+0x488>
    2670:	b0 e0       	ldi	r27, 0x00	; 0
    2672:	a3 01       	movw	r20, r6
    2674:	92 01       	movw	r18, r4
    2676:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <__muluhisi3>
    267a:	6a 8f       	std	Y+26, r22	; 0x1a
    267c:	7b 8f       	std	Y+27, r23	; 0x1b
    267e:	8c 8f       	std	Y+28, r24	; 0x1c
    2680:	9d 8f       	std	Y+29, r25	; 0x1d
    2682:	9f 01       	movw	r18, r30
    2684:	40 e0       	ldi	r20, 0x00	; 0
    2686:	50 e0       	ldi	r21, 0x00	; 0
    2688:	2e 8b       	std	Y+22, r18	; 0x16
    268a:	3f 8b       	std	Y+23, r19	; 0x17
    268c:	48 8f       	std	Y+24, r20	; 0x18
    268e:	59 8f       	std	Y+25, r21	; 0x19
    2690:	c1 01       	movw	r24, r2
    2692:	92 95       	swap	r25
    2694:	82 95       	swap	r24
    2696:	8f 70       	andi	r24, 0x0F	; 15
    2698:	89 27       	eor	r24, r25
    269a:	9f 70       	andi	r25, 0x0F	; 15
    269c:	89 27       	eor	r24, r25
    269e:	28 0f       	add	r18, r24
    26a0:	39 1f       	adc	r19, r25
    26a2:	41 1d       	adc	r20, r1
    26a4:	51 1d       	adc	r21, r1
    26a6:	da 01       	movw	r26, r20
    26a8:	c9 01       	movw	r24, r18
    26aa:	2a 8d       	ldd	r18, Y+26	; 0x1a
    26ac:	3b 8d       	ldd	r19, Y+27	; 0x1b
    26ae:	4c 8d       	ldd	r20, Y+28	; 0x1c
    26b0:	5d 8d       	ldd	r21, Y+29	; 0x1d
    26b2:	28 0f       	add	r18, r24
    26b4:	39 1f       	adc	r19, r25
    26b6:	4a 1f       	adc	r20, r26
    26b8:	5b 1f       	adc	r21, r27
    26ba:	2a 8b       	std	Y+18, r18	; 0x12
    26bc:	3b 8b       	std	Y+19, r19	; 0x13
    26be:	4c 8b       	std	Y+20, r20	; 0x14
    26c0:	5d 8b       	std	Y+21, r21	; 0x15
    26c2:	82 16       	cp	r8, r18
    26c4:	93 06       	cpc	r9, r19
    26c6:	a4 06       	cpc	r10, r20
    26c8:	b5 06       	cpc	r11, r21
    26ca:	08 f4       	brcc	.+2      	; 0x26ce <find_volume+0x234>
    26cc:	2c c1       	rjmp	.+600    	; 0x2926 <find_volume+0x48c>
    26ce:	c5 01       	movw	r24, r10
    26d0:	b4 01       	movw	r22, r8
    26d2:	62 1b       	sub	r22, r18
    26d4:	73 0b       	sbc	r23, r19
    26d6:	84 0b       	sbc	r24, r20
    26d8:	95 0b       	sbc	r25, r21
    26da:	e9 89       	ldd	r30, Y+17	; 0x11
    26dc:	2e 2f       	mov	r18, r30
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	40 e0       	ldi	r20, 0x00	; 0
    26e2:	50 e0       	ldi	r21, 0x00	; 0
    26e4:	0e 94 d6 2d 	call	0x5bac	; 0x5bac <__udivmodsi4>
    26e8:	da 01       	movw	r26, r20
    26ea:	c9 01       	movw	r24, r18
    26ec:	21 15       	cp	r18, r1
    26ee:	31 05       	cpc	r19, r1
    26f0:	41 05       	cpc	r20, r1
    26f2:	51 05       	cpc	r21, r1
    26f4:	09 f4       	brne	.+2      	; 0x26f8 <find_volume+0x25e>
    26f6:	19 c1       	rjmp	.+562    	; 0x292a <find_volume+0x490>
    26f8:	26 3f       	cpi	r18, 0xF6	; 246
    26fa:	ff e0       	ldi	r31, 0x0F	; 15
    26fc:	3f 07       	cpc	r19, r31
    26fe:	41 05       	cpc	r20, r1
    2700:	51 05       	cpc	r21, r1
    2702:	18 f0       	brcs	.+6      	; 0x270a <find_volume+0x270>
    2704:	e2 e0       	ldi	r30, 0x02	; 2
    2706:	e9 8b       	std	Y+17, r30	; 0x11
    2708:	02 c0       	rjmp	.+4      	; 0x270e <find_volume+0x274>
    270a:	f1 e0       	ldi	r31, 0x01	; 1
    270c:	f9 8b       	std	Y+17, r31	; 0x11
    270e:	86 3f       	cpi	r24, 0xF6	; 246
    2710:	9f 4f       	sbci	r25, 0xFF	; 255
    2712:	a1 05       	cpc	r26, r1
    2714:	b1 05       	cpc	r27, r1
    2716:	08 f0       	brcs	.+2      	; 0x271a <find_volume+0x280>
    2718:	2a c1       	rjmp	.+596    	; 0x296e <find_volume+0x4d4>
    271a:	49 01       	movw	r8, r18
    271c:	5a 01       	movw	r10, r20
    271e:	82 e0       	ldi	r24, 0x02	; 2
    2720:	88 0e       	add	r8, r24
    2722:	91 1c       	adc	r9, r1
    2724:	a1 1c       	adc	r10, r1
    2726:	b1 1c       	adc	r11, r1
    2728:	d8 01       	movw	r26, r16
    272a:	52 96       	adiw	r26, 0x12	; 18
    272c:	8d 92       	st	X+, r8
    272e:	9d 92       	st	X+, r9
    2730:	ad 92       	st	X+, r10
    2732:	bc 92       	st	X, r11
    2734:	55 97       	sbiw	r26, 0x15	; 21
    2736:	f8 01       	movw	r30, r16
    2738:	c2 8e       	std	Z+26, r12	; 0x1a
    273a:	d3 8e       	std	Z+27, r13	; 0x1b
    273c:	e4 8e       	std	Z+28, r14	; 0x1c
    273e:	f5 8e       	std	Z+29, r15	; 0x1d
    2740:	8e 89       	ldd	r24, Y+22	; 0x16
    2742:	9f 89       	ldd	r25, Y+23	; 0x17
    2744:	a8 8d       	ldd	r26, Y+24	; 0x18
    2746:	b9 8d       	ldd	r27, Y+25	; 0x19
    2748:	8c 0d       	add	r24, r12
    274a:	9d 1d       	adc	r25, r13
    274c:	ae 1d       	adc	r26, r14
    274e:	bf 1d       	adc	r27, r15
    2750:	86 8f       	std	Z+30, r24	; 0x1e
    2752:	97 8f       	std	Z+31, r25	; 0x1f
    2754:	a0 a3       	std	Z+32, r26	; 0x20
    2756:	b1 a3       	std	Z+33, r27	; 0x21
    2758:	4a 89       	ldd	r20, Y+18	; 0x12
    275a:	5b 89       	ldd	r21, Y+19	; 0x13
    275c:	6c 89       	ldd	r22, Y+20	; 0x14
    275e:	7d 89       	ldd	r23, Y+21	; 0x15
    2760:	4c 0d       	add	r20, r12
    2762:	5d 1d       	adc	r21, r13
    2764:	6e 1d       	adc	r22, r14
    2766:	7f 1d       	adc	r23, r15
    2768:	46 a3       	std	Z+38, r20	; 0x26
    276a:	57 a3       	std	Z+39, r21	; 0x27
    276c:	60 a7       	std	Z+40, r22	; 0x28
    276e:	71 a7       	std	Z+41, r23	; 0x29
    2770:	f9 89       	ldd	r31, Y+17	; 0x11
    2772:	f3 30       	cpi	r31, 0x03	; 3
    2774:	69 f5       	brne	.+90     	; 0x27d0 <find_volume+0x336>
    2776:	23 28       	or	r2, r3
    2778:	09 f0       	breq	.+2      	; 0x277c <find_volume+0x2e2>
    277a:	d9 c0       	rjmp	.+434    	; 0x292e <find_volume+0x494>
    277c:	f8 01       	movw	r30, r16
    277e:	e6 5a       	subi	r30, 0xA6	; 166
    2780:	ff 4f       	sbci	r31, 0xFF	; 255
    2782:	80 81       	ld	r24, Z
    2784:	91 81       	ldd	r25, Z+1	; 0x01
    2786:	a2 81       	ldd	r26, Z+2	; 0x02
    2788:	b3 81       	ldd	r27, Z+3	; 0x03
    278a:	f8 01       	movw	r30, r16
    278c:	82 a3       	std	Z+34, r24	; 0x22
    278e:	93 a3       	std	Z+35, r25	; 0x23
    2790:	a4 a3       	std	Z+36, r26	; 0x24
    2792:	b5 a3       	std	Z+37, r27	; 0x25
    2794:	88 0c       	add	r8, r8
    2796:	99 1c       	adc	r9, r9
    2798:	aa 1c       	adc	r10, r10
    279a:	bb 1c       	adc	r11, r11
    279c:	88 0c       	add	r8, r8
    279e:	99 1c       	adc	r9, r9
    27a0:	aa 1c       	adc	r10, r10
    27a2:	bb 1c       	adc	r11, r11
    27a4:	ff ef       	ldi	r31, 0xFF	; 255
    27a6:	8f 0e       	add	r8, r31
    27a8:	f1 e0       	ldi	r31, 0x01	; 1
    27aa:	9f 1e       	adc	r9, r31
    27ac:	a1 1c       	adc	r10, r1
    27ae:	b1 1c       	adc	r11, r1
    27b0:	07 2e       	mov	r0, r23
    27b2:	79 e0       	ldi	r23, 0x09	; 9
    27b4:	b6 94       	lsr	r11
    27b6:	a7 94       	ror	r10
    27b8:	97 94       	ror	r9
    27ba:	87 94       	ror	r8
    27bc:	7a 95       	dec	r23
    27be:	d1 f7       	brne	.-12     	; 0x27b4 <find_volume+0x31a>
    27c0:	70 2d       	mov	r23, r0
    27c2:	48 14       	cp	r4, r8
    27c4:	59 04       	cpc	r5, r9
    27c6:	6a 04       	cpc	r6, r10
    27c8:	7b 04       	cpc	r7, r11
    27ca:	08 f4       	brcc	.+2      	; 0x27ce <find_volume+0x334>
    27cc:	b2 c0       	rjmp	.+356    	; 0x2932 <find_volume+0x498>
    27ce:	fb c0       	rjmp	.+502    	; 0x29c6 <find_volume+0x52c>
    27d0:	23 28       	or	r2, r3
    27d2:	09 f4       	brne	.+2      	; 0x27d6 <find_volume+0x33c>
    27d4:	b0 c0       	rjmp	.+352    	; 0x2936 <find_volume+0x49c>
    27d6:	2a 8d       	ldd	r18, Y+26	; 0x1a
    27d8:	3b 8d       	ldd	r19, Y+27	; 0x1b
    27da:	4c 8d       	ldd	r20, Y+28	; 0x1c
    27dc:	5d 8d       	ldd	r21, Y+29	; 0x1d
    27de:	82 0f       	add	r24, r18
    27e0:	93 1f       	adc	r25, r19
    27e2:	a4 1f       	adc	r26, r20
    27e4:	b5 1f       	adc	r27, r21
    27e6:	f8 01       	movw	r30, r16
    27e8:	82 a3       	std	Z+34, r24	; 0x22
    27ea:	93 a3       	std	Z+35, r25	; 0x23
    27ec:	a4 a3       	std	Z+36, r26	; 0x24
    27ee:	b5 a3       	std	Z+37, r27	; 0x25
    27f0:	f9 89       	ldd	r31, Y+17	; 0x11
    27f2:	f2 30       	cpi	r31, 0x02	; 2
    27f4:	29 f4       	brne	.+10     	; 0x2800 <find_volume+0x366>
    27f6:	88 0c       	add	r8, r8
    27f8:	99 1c       	adc	r9, r9
    27fa:	aa 1c       	adc	r10, r10
    27fc:	bb 1c       	adc	r11, r11
    27fe:	0a c1       	rjmp	.+532    	; 0x2a14 <find_volume+0x57a>
    2800:	a3 e0       	ldi	r26, 0x03	; 3
    2802:	b0 e0       	ldi	r27, 0x00	; 0
    2804:	a5 01       	movw	r20, r10
    2806:	94 01       	movw	r18, r8
    2808:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <__muluhisi3>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	b6 95       	lsr	r27
    2812:	a7 95       	ror	r26
    2814:	97 95       	ror	r25
    2816:	87 95       	ror	r24
    2818:	21 e0       	ldi	r18, 0x01	; 1
    281a:	82 22       	and	r8, r18
    281c:	99 24       	eor	r9, r9
    281e:	aa 24       	eor	r10, r10
    2820:	bb 24       	eor	r11, r11
    2822:	88 0e       	add	r8, r24
    2824:	99 1e       	adc	r9, r25
    2826:	aa 1e       	adc	r10, r26
    2828:	bb 1e       	adc	r11, r27
    282a:	f4 c0       	rjmp	.+488    	; 0x2a14 <find_volume+0x57a>
    282c:	b7 01       	movw	r22, r14
    282e:	a6 01       	movw	r20, r12
    2830:	4f 5f       	subi	r20, 0xFF	; 255
    2832:	5f 4f       	sbci	r21, 0xFF	; 255
    2834:	6f 4f       	sbci	r22, 0xFF	; 255
    2836:	7f 4f       	sbci	r23, 0xFF	; 255
    2838:	c8 01       	movw	r24, r16
    283a:	0e 94 af 11 	call	0x235e	; 0x235e <move_window>
    283e:	81 11       	cpse	r24, r1
    2840:	39 c0       	rjmp	.+114    	; 0x28b4 <find_volume+0x41a>
    2842:	d8 01       	movw	r26, r16
    2844:	15 96       	adiw	r26, 0x05	; 5
    2846:	1c 92       	st	X, r1
    2848:	f8 01       	movw	r30, r16
    284a:	e4 5d       	subi	r30, 0xD4	; 212
    284c:	fd 4f       	sbci	r31, 0xFD	; 253
    284e:	80 81       	ld	r24, Z
    2850:	91 81       	ldd	r25, Z+1	; 0x01
    2852:	85 35       	cpi	r24, 0x55	; 85
    2854:	9a 4a       	sbci	r25, 0xAA	; 170
    2856:	89 f5       	brne	.+98     	; 0x28ba <find_volume+0x420>
    2858:	f8 01       	movw	r30, r16
    285a:	86 a5       	ldd	r24, Z+46	; 0x2e
    285c:	97 a5       	ldd	r25, Z+47	; 0x2f
    285e:	a0 a9       	ldd	r26, Z+48	; 0x30
    2860:	b1 a9       	ldd	r27, Z+49	; 0x31
    2862:	82 35       	cpi	r24, 0x52	; 82
    2864:	92 45       	sbci	r25, 0x52	; 82
    2866:	a1 46       	sbci	r26, 0x61	; 97
    2868:	b1 44       	sbci	r27, 0x41	; 65
    286a:	51 f5       	brne	.+84     	; 0x28c0 <find_volume+0x426>
    286c:	f8 01       	movw	r30, r16
    286e:	ee 5e       	subi	r30, 0xEE	; 238
    2870:	fd 4f       	sbci	r31, 0xFD	; 253
    2872:	80 81       	ld	r24, Z
    2874:	91 81       	ldd	r25, Z+1	; 0x01
    2876:	a2 81       	ldd	r26, Z+2	; 0x02
    2878:	b3 81       	ldd	r27, Z+3	; 0x03
    287a:	82 37       	cpi	r24, 0x72	; 114
    287c:	92 47       	sbci	r25, 0x72	; 114
    287e:	a1 44       	sbci	r26, 0x41	; 65
    2880:	b1 46       	sbci	r27, 0x61	; 97
    2882:	09 f5       	brne	.+66     	; 0x28c6 <find_volume+0x42c>
    2884:	34 96       	adiw	r30, 0x04	; 4
    2886:	80 81       	ld	r24, Z
    2888:	91 81       	ldd	r25, Z+1	; 0x01
    288a:	a2 81       	ldd	r26, Z+2	; 0x02
    288c:	b3 81       	ldd	r27, Z+3	; 0x03
    288e:	f8 01       	movw	r30, r16
    2890:	86 87       	std	Z+14, r24	; 0x0e
    2892:	97 87       	std	Z+15, r25	; 0x0f
    2894:	a0 8b       	std	Z+16, r26	; 0x10
    2896:	b1 8b       	std	Z+17, r27	; 0x11
    2898:	e6 5e       	subi	r30, 0xE6	; 230
    289a:	fd 4f       	sbci	r31, 0xFD	; 253
    289c:	80 81       	ld	r24, Z
    289e:	91 81       	ldd	r25, Z+1	; 0x01
    28a0:	a2 81       	ldd	r26, Z+2	; 0x02
    28a2:	b3 81       	ldd	r27, Z+3	; 0x03
    28a4:	f8 01       	movw	r30, r16
    28a6:	82 87       	std	Z+10, r24	; 0x0a
    28a8:	93 87       	std	Z+11, r25	; 0x0b
    28aa:	a4 87       	std	Z+12, r26	; 0x0c
    28ac:	b5 87       	std	Z+13, r27	; 0x0d
    28ae:	f3 e0       	ldi	r31, 0x03	; 3
    28b0:	f9 8b       	std	Y+17, r31	; 0x11
    28b2:	0b c0       	rjmp	.+22     	; 0x28ca <find_volume+0x430>
    28b4:	e3 e0       	ldi	r30, 0x03	; 3
    28b6:	e9 8b       	std	Y+17, r30	; 0x11
    28b8:	08 c0       	rjmp	.+16     	; 0x28ca <find_volume+0x430>
    28ba:	f3 e0       	ldi	r31, 0x03	; 3
    28bc:	f9 8b       	std	Y+17, r31	; 0x11
    28be:	05 c0       	rjmp	.+10     	; 0x28ca <find_volume+0x430>
    28c0:	e3 e0       	ldi	r30, 0x03	; 3
    28c2:	e9 8b       	std	Y+17, r30	; 0x11
    28c4:	02 c0       	rjmp	.+4      	; 0x28ca <find_volume+0x430>
    28c6:	f3 e0       	ldi	r31, 0x03	; 3
    28c8:	f9 8b       	std	Y+17, r31	; 0x11
    28ca:	e9 89       	ldd	r30, Y+17	; 0x11
    28cc:	d8 01       	movw	r26, r16
    28ce:	ec 93       	st	X, r30
    28d0:	80 91 e9 03 	lds	r24, 0x03E9	; 0x8003e9 <Fsid>
    28d4:	90 91 ea 03 	lds	r25, 0x03EA	; 0x8003ea <Fsid+0x1>
    28d8:	01 96       	adiw	r24, 0x01	; 1
    28da:	90 93 ea 03 	sts	0x03EA, r25	; 0x8003ea <Fsid+0x1>
    28de:	80 93 e9 03 	sts	0x03E9, r24	; 0x8003e9 <Fsid>
    28e2:	17 96       	adiw	r26, 0x07	; 7
    28e4:	9c 93       	st	X, r25
    28e6:	8e 93       	st	-X, r24
    28e8:	16 97       	sbiw	r26, 0x06	; 6
    28ea:	80 e0       	ldi	r24, 0x00	; 0
    28ec:	a9 c0       	rjmp	.+338    	; 0x2a40 <find_volume+0x5a6>
    28ee:	8b e0       	ldi	r24, 0x0B	; 11
    28f0:	a7 c0       	rjmp	.+334    	; 0x2a40 <find_volume+0x5a6>
    28f2:	8c e0       	ldi	r24, 0x0C	; 12
    28f4:	a5 c0       	rjmp	.+330    	; 0x2a40 <find_volume+0x5a6>
    28f6:	80 e0       	ldi	r24, 0x00	; 0
    28f8:	a3 c0       	rjmp	.+326    	; 0x2a40 <find_volume+0x5a6>
    28fa:	80 e0       	ldi	r24, 0x00	; 0
    28fc:	a1 c0       	rjmp	.+322    	; 0x2a40 <find_volume+0x5a6>
    28fe:	83 e0       	ldi	r24, 0x03	; 3
    2900:	9f c0       	rjmp	.+318    	; 0x2a40 <find_volume+0x5a6>
    2902:	8a e0       	ldi	r24, 0x0A	; 10
    2904:	9d c0       	rjmp	.+314    	; 0x2a40 <find_volume+0x5a6>
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	9b c0       	rjmp	.+310    	; 0x2a40 <find_volume+0x5a6>
    290a:	8d e0       	ldi	r24, 0x0D	; 13
    290c:	99 c0       	rjmp	.+306    	; 0x2a40 <find_volume+0x5a6>
    290e:	8d e0       	ldi	r24, 0x0D	; 13
    2910:	97 c0       	rjmp	.+302    	; 0x2a40 <find_volume+0x5a6>
    2912:	8d e0       	ldi	r24, 0x0D	; 13
    2914:	95 c0       	rjmp	.+298    	; 0x2a40 <find_volume+0x5a6>
    2916:	8d e0       	ldi	r24, 0x0D	; 13
    2918:	93 c0       	rjmp	.+294    	; 0x2a40 <find_volume+0x5a6>
    291a:	8d e0       	ldi	r24, 0x0D	; 13
    291c:	91 c0       	rjmp	.+290    	; 0x2a40 <find_volume+0x5a6>
    291e:	8d e0       	ldi	r24, 0x0D	; 13
    2920:	8f c0       	rjmp	.+286    	; 0x2a40 <find_volume+0x5a6>
    2922:	8d e0       	ldi	r24, 0x0D	; 13
    2924:	8d c0       	rjmp	.+282    	; 0x2a40 <find_volume+0x5a6>
    2926:	8d e0       	ldi	r24, 0x0D	; 13
    2928:	8b c0       	rjmp	.+278    	; 0x2a40 <find_volume+0x5a6>
    292a:	8d e0       	ldi	r24, 0x0D	; 13
    292c:	89 c0       	rjmp	.+274    	; 0x2a40 <find_volume+0x5a6>
    292e:	8d e0       	ldi	r24, 0x0D	; 13
    2930:	87 c0       	rjmp	.+270    	; 0x2a40 <find_volume+0x5a6>
    2932:	8d e0       	ldi	r24, 0x0D	; 13
    2934:	85 c0       	rjmp	.+266    	; 0x2a40 <find_volume+0x5a6>
    2936:	8d e0       	ldi	r24, 0x0D	; 13
    2938:	83 c0       	rjmp	.+262    	; 0x2a40 <find_volume+0x5a6>
    293a:	8d e0       	ldi	r24, 0x0D	; 13
    293c:	81 c0       	rjmp	.+258    	; 0x2a40 <find_volume+0x5a6>
    293e:	40 e0       	ldi	r20, 0x00	; 0
    2940:	50 e0       	ldi	r21, 0x00	; 0
    2942:	ba 01       	movw	r22, r20
    2944:	c8 01       	movw	r24, r16
    2946:	0e 94 ed 11 	call	0x23da	; 0x23da <check_fs>
    294a:	81 30       	cpi	r24, 0x01	; 1
    294c:	09 f0       	breq	.+2      	; 0x2950 <find_volume+0x4b6>
    294e:	2d ce       	rjmp	.-934    	; 0x25aa <find_volume+0x110>
    2950:	f8 01       	movw	r30, r16
    2952:	e0 51       	subi	r30, 0x10	; 16
    2954:	fe 4f       	sbci	r31, 0xFE	; 254
    2956:	9e 01       	movw	r18, r28
    2958:	2f 5f       	subi	r18, 0xFF	; 255
    295a:	3f 4f       	sbci	r19, 0xFF	; 255
    295c:	59 01       	movw	r10, r18
    295e:	a8 01       	movw	r20, r16
    2960:	40 5d       	subi	r20, 0xD0	; 208
    2962:	5d 4f       	sbci	r21, 0xFD	; 253
    2964:	e1 2c       	mov	r14, r1
    2966:	f1 2c       	mov	r15, r1
    2968:	70 e0       	ldi	r23, 0x00	; 0
    296a:	60 e0       	ldi	r22, 0x00	; 0
    296c:	e9 cd       	rjmp	.-1070   	; 0x2540 <find_volume+0xa6>
    296e:	49 01       	movw	r8, r18
    2970:	5a 01       	movw	r10, r20
    2972:	62 e0       	ldi	r22, 0x02	; 2
    2974:	86 0e       	add	r8, r22
    2976:	91 1c       	adc	r9, r1
    2978:	a1 1c       	adc	r10, r1
    297a:	b1 1c       	adc	r11, r1
    297c:	d8 01       	movw	r26, r16
    297e:	52 96       	adiw	r26, 0x12	; 18
    2980:	8d 92       	st	X+, r8
    2982:	9d 92       	st	X+, r9
    2984:	ad 92       	st	X+, r10
    2986:	bc 92       	st	X, r11
    2988:	55 97       	sbiw	r26, 0x15	; 21
    298a:	f8 01       	movw	r30, r16
    298c:	c2 8e       	std	Z+26, r12	; 0x1a
    298e:	d3 8e       	std	Z+27, r13	; 0x1b
    2990:	e4 8e       	std	Z+28, r14	; 0x1c
    2992:	f5 8e       	std	Z+29, r15	; 0x1d
    2994:	8e 89       	ldd	r24, Y+22	; 0x16
    2996:	9f 89       	ldd	r25, Y+23	; 0x17
    2998:	a8 8d       	ldd	r26, Y+24	; 0x18
    299a:	b9 8d       	ldd	r27, Y+25	; 0x19
    299c:	8c 0d       	add	r24, r12
    299e:	9d 1d       	adc	r25, r13
    29a0:	ae 1d       	adc	r26, r14
    29a2:	bf 1d       	adc	r27, r15
    29a4:	86 8f       	std	Z+30, r24	; 0x1e
    29a6:	97 8f       	std	Z+31, r25	; 0x1f
    29a8:	a0 a3       	std	Z+32, r26	; 0x20
    29aa:	b1 a3       	std	Z+33, r27	; 0x21
    29ac:	8a 89       	ldd	r24, Y+18	; 0x12
    29ae:	9b 89       	ldd	r25, Y+19	; 0x13
    29b0:	ac 89       	ldd	r26, Y+20	; 0x14
    29b2:	bd 89       	ldd	r27, Y+21	; 0x15
    29b4:	8c 0d       	add	r24, r12
    29b6:	9d 1d       	adc	r25, r13
    29b8:	ae 1d       	adc	r26, r14
    29ba:	bf 1d       	adc	r27, r15
    29bc:	86 a3       	std	Z+38, r24	; 0x26
    29be:	97 a3       	std	Z+39, r25	; 0x27
    29c0:	a0 a7       	std	Z+40, r26	; 0x28
    29c2:	b1 a7       	std	Z+41, r27	; 0x29
    29c4:	d8 ce       	rjmp	.-592    	; 0x2776 <find_volume+0x2dc>
    29c6:	8f ef       	ldi	r24, 0xFF	; 255
    29c8:	9f ef       	ldi	r25, 0xFF	; 255
    29ca:	dc 01       	movw	r26, r24
    29cc:	f8 01       	movw	r30, r16
    29ce:	86 87       	std	Z+14, r24	; 0x0e
    29d0:	97 87       	std	Z+15, r25	; 0x0f
    29d2:	a0 8b       	std	Z+16, r26	; 0x10
    29d4:	b1 8b       	std	Z+17, r27	; 0x11
    29d6:	82 87       	std	Z+10, r24	; 0x0a
    29d8:	93 87       	std	Z+11, r25	; 0x0b
    29da:	a4 87       	std	Z+12, r26	; 0x0c
    29dc:	b5 87       	std	Z+13, r27	; 0x0d
    29de:	80 e8       	ldi	r24, 0x80	; 128
    29e0:	85 83       	std	Z+5, r24	; 0x05
    29e2:	e2 5a       	subi	r30, 0xA2	; 162
    29e4:	ff 4f       	sbci	r31, 0xFF	; 255
    29e6:	80 81       	ld	r24, Z
    29e8:	91 81       	ldd	r25, Z+1	; 0x01
    29ea:	01 97       	sbiw	r24, 0x01	; 1
    29ec:	09 f4       	brne	.+2      	; 0x29f0 <find_volume+0x556>
    29ee:	1e cf       	rjmp	.-452    	; 0x282c <find_volume+0x392>
    29f0:	f3 e0       	ldi	r31, 0x03	; 3
    29f2:	f9 8b       	std	Y+17, r31	; 0x11
    29f4:	6a cf       	rjmp	.-300    	; 0x28ca <find_volume+0x430>
    29f6:	8f ef       	ldi	r24, 0xFF	; 255
    29f8:	9f ef       	ldi	r25, 0xFF	; 255
    29fa:	dc 01       	movw	r26, r24
    29fc:	f8 01       	movw	r30, r16
    29fe:	86 87       	std	Z+14, r24	; 0x0e
    2a00:	97 87       	std	Z+15, r25	; 0x0f
    2a02:	a0 8b       	std	Z+16, r26	; 0x10
    2a04:	b1 8b       	std	Z+17, r27	; 0x11
    2a06:	82 87       	std	Z+10, r24	; 0x0a
    2a08:	93 87       	std	Z+11, r25	; 0x0b
    2a0a:	a4 87       	std	Z+12, r26	; 0x0c
    2a0c:	b5 87       	std	Z+13, r27	; 0x0d
    2a0e:	80 e8       	ldi	r24, 0x80	; 128
    2a10:	85 83       	std	Z+5, r24	; 0x05
    2a12:	5b cf       	rjmp	.-330    	; 0x28ca <find_volume+0x430>
    2a14:	ff ef       	ldi	r31, 0xFF	; 255
    2a16:	8f 0e       	add	r8, r31
    2a18:	f1 e0       	ldi	r31, 0x01	; 1
    2a1a:	9f 1e       	adc	r9, r31
    2a1c:	a1 1c       	adc	r10, r1
    2a1e:	b1 1c       	adc	r11, r1
    2a20:	07 2e       	mov	r0, r23
    2a22:	79 e0       	ldi	r23, 0x09	; 9
    2a24:	b6 94       	lsr	r11
    2a26:	a7 94       	ror	r10
    2a28:	97 94       	ror	r9
    2a2a:	87 94       	ror	r8
    2a2c:	7a 95       	dec	r23
    2a2e:	d1 f7       	brne	.-12     	; 0x2a24 <find_volume+0x58a>
    2a30:	70 2d       	mov	r23, r0
    2a32:	48 14       	cp	r4, r8
    2a34:	59 04       	cpc	r5, r9
    2a36:	6a 04       	cpc	r6, r10
    2a38:	7b 04       	cpc	r7, r11
    2a3a:	08 f4       	brcc	.+2      	; 0x2a3e <find_volume+0x5a4>
    2a3c:	7e cf       	rjmp	.-260    	; 0x293a <find_volume+0x4a0>
    2a3e:	db cf       	rjmp	.-74     	; 0x29f6 <find_volume+0x55c>
    2a40:	6d 96       	adiw	r28, 0x1d	; 29
    2a42:	0f b6       	in	r0, 0x3f	; 63
    2a44:	f8 94       	cli
    2a46:	de bf       	out	0x3e, r29	; 62
    2a48:	0f be       	out	0x3f, r0	; 63
    2a4a:	cd bf       	out	0x3d, r28	; 61
    2a4c:	df 91       	pop	r29
    2a4e:	cf 91       	pop	r28
    2a50:	1f 91       	pop	r17
    2a52:	0f 91       	pop	r16
    2a54:	ff 90       	pop	r15
    2a56:	ef 90       	pop	r14
    2a58:	df 90       	pop	r13
    2a5a:	cf 90       	pop	r12
    2a5c:	bf 90       	pop	r11
    2a5e:	af 90       	pop	r10
    2a60:	9f 90       	pop	r9
    2a62:	8f 90       	pop	r8
    2a64:	7f 90       	pop	r7
    2a66:	6f 90       	pop	r6
    2a68:	5f 90       	pop	r5
    2a6a:	4f 90       	pop	r4
    2a6c:	3f 90       	pop	r3
    2a6e:	2f 90       	pop	r2
    2a70:	08 95       	ret

00002a72 <clust2sect>:
    2a72:	0f 93       	push	r16
    2a74:	1f 93       	push	r17
    2a76:	fc 01       	movw	r30, r24
    2a78:	9a 01       	movw	r18, r20
    2a7a:	ab 01       	movw	r20, r22
    2a7c:	22 50       	subi	r18, 0x02	; 2
    2a7e:	31 09       	sbc	r19, r1
    2a80:	41 09       	sbc	r20, r1
    2a82:	51 09       	sbc	r21, r1
    2a84:	82 89       	ldd	r24, Z+18	; 0x12
    2a86:	93 89       	ldd	r25, Z+19	; 0x13
    2a88:	a4 89       	ldd	r26, Z+20	; 0x14
    2a8a:	b5 89       	ldd	r27, Z+21	; 0x15
    2a8c:	02 97       	sbiw	r24, 0x02	; 2
    2a8e:	a1 09       	sbc	r26, r1
    2a90:	b1 09       	sbc	r27, r1
    2a92:	28 17       	cp	r18, r24
    2a94:	39 07       	cpc	r19, r25
    2a96:	4a 07       	cpc	r20, r26
    2a98:	5b 07       	cpc	r21, r27
    2a9a:	68 f4       	brcc	.+26     	; 0x2ab6 <clust2sect+0x44>
    2a9c:	a2 81       	ldd	r26, Z+2	; 0x02
    2a9e:	b0 e0       	ldi	r27, 0x00	; 0
    2aa0:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <__muluhisi3>
    2aa4:	06 a1       	ldd	r16, Z+38	; 0x26
    2aa6:	17 a1       	ldd	r17, Z+39	; 0x27
    2aa8:	20 a5       	ldd	r18, Z+40	; 0x28
    2aaa:	31 a5       	ldd	r19, Z+41	; 0x29
    2aac:	60 0f       	add	r22, r16
    2aae:	71 1f       	adc	r23, r17
    2ab0:	82 1f       	adc	r24, r18
    2ab2:	93 1f       	adc	r25, r19
    2ab4:	03 c0       	rjmp	.+6      	; 0x2abc <clust2sect+0x4a>
    2ab6:	60 e0       	ldi	r22, 0x00	; 0
    2ab8:	70 e0       	ldi	r23, 0x00	; 0
    2aba:	cb 01       	movw	r24, r22
    2abc:	1f 91       	pop	r17
    2abe:	0f 91       	pop	r16
    2ac0:	08 95       	ret

00002ac2 <get_fat>:
    2ac2:	af 92       	push	r10
    2ac4:	bf 92       	push	r11
    2ac6:	cf 92       	push	r12
    2ac8:	df 92       	push	r13
    2aca:	ef 92       	push	r14
    2acc:	ff 92       	push	r15
    2ace:	0f 93       	push	r16
    2ad0:	1f 93       	push	r17
    2ad2:	cf 93       	push	r28
    2ad4:	df 93       	push	r29
    2ad6:	42 30       	cpi	r20, 0x02	; 2
    2ad8:	51 05       	cpc	r21, r1
    2ada:	61 05       	cpc	r22, r1
    2adc:	71 05       	cpc	r23, r1
    2ade:	08 f4       	brcc	.+2      	; 0x2ae2 <get_fat+0x20>
    2ae0:	ae c0       	rjmp	.+348    	; 0x2c3e <get_fat+0x17c>
    2ae2:	fc 01       	movw	r30, r24
    2ae4:	c2 88       	ldd	r12, Z+18	; 0x12
    2ae6:	d3 88       	ldd	r13, Z+19	; 0x13
    2ae8:	e4 88       	ldd	r14, Z+20	; 0x14
    2aea:	f5 88       	ldd	r15, Z+21	; 0x15
    2aec:	4c 15       	cp	r20, r12
    2aee:	5d 05       	cpc	r21, r13
    2af0:	6e 05       	cpc	r22, r14
    2af2:	7f 05       	cpc	r23, r15
    2af4:	08 f0       	brcs	.+2      	; 0x2af8 <get_fat+0x36>
    2af6:	a8 c0       	rjmp	.+336    	; 0x2c48 <get_fat+0x186>
    2af8:	6a 01       	movw	r12, r20
    2afa:	7b 01       	movw	r14, r22
    2afc:	ec 01       	movw	r28, r24
    2afe:	80 81       	ld	r24, Z
    2b00:	82 30       	cpi	r24, 0x02	; 2
    2b02:	09 f4       	brne	.+2      	; 0x2b06 <get_fat+0x44>
    2b04:	4d c0       	rjmp	.+154    	; 0x2ba0 <get_fat+0xde>
    2b06:	83 30       	cpi	r24, 0x03	; 3
    2b08:	09 f4       	brne	.+2      	; 0x2b0c <get_fat+0x4a>
    2b0a:	6c c0       	rjmp	.+216    	; 0x2be4 <get_fat+0x122>
    2b0c:	81 30       	cpi	r24, 0x01	; 1
    2b0e:	09 f0       	breq	.+2      	; 0x2b12 <get_fat+0x50>
    2b10:	a0 c0       	rjmp	.+320    	; 0x2c52 <get_fat+0x190>
    2b12:	8a 01       	movw	r16, r20
    2b14:	16 95       	lsr	r17
    2b16:	07 95       	ror	r16
    2b18:	04 0f       	add	r16, r20
    2b1a:	15 1f       	adc	r17, r21
    2b1c:	c8 01       	movw	r24, r16
    2b1e:	89 2f       	mov	r24, r25
    2b20:	99 27       	eor	r25, r25
    2b22:	86 95       	lsr	r24
    2b24:	46 8d       	ldd	r20, Z+30	; 0x1e
    2b26:	57 8d       	ldd	r21, Z+31	; 0x1f
    2b28:	60 a1       	ldd	r22, Z+32	; 0x20
    2b2a:	71 a1       	ldd	r23, Z+33	; 0x21
    2b2c:	48 0f       	add	r20, r24
    2b2e:	59 1f       	adc	r21, r25
    2b30:	61 1d       	adc	r22, r1
    2b32:	71 1d       	adc	r23, r1
    2b34:	cf 01       	movw	r24, r30
    2b36:	0e 94 af 11 	call	0x235e	; 0x235e <move_window>
    2b3a:	81 11       	cpse	r24, r1
    2b3c:	8f c0       	rjmp	.+286    	; 0x2c5c <get_fat+0x19a>
    2b3e:	58 01       	movw	r10, r16
    2b40:	ff ef       	ldi	r31, 0xFF	; 255
    2b42:	af 1a       	sub	r10, r31
    2b44:	bf 0a       	sbc	r11, r31
    2b46:	11 70       	andi	r17, 0x01	; 1
    2b48:	fe 01       	movw	r30, r28
    2b4a:	e0 0f       	add	r30, r16
    2b4c:	f1 1f       	adc	r31, r17
    2b4e:	16 a5       	ldd	r17, Z+46	; 0x2e
    2b50:	c5 01       	movw	r24, r10
    2b52:	89 2f       	mov	r24, r25
    2b54:	99 27       	eor	r25, r25
    2b56:	86 95       	lsr	r24
    2b58:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2b5a:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2b5c:	68 a1       	ldd	r22, Y+32	; 0x20
    2b5e:	79 a1       	ldd	r23, Y+33	; 0x21
    2b60:	48 0f       	add	r20, r24
    2b62:	59 1f       	adc	r21, r25
    2b64:	61 1d       	adc	r22, r1
    2b66:	71 1d       	adc	r23, r1
    2b68:	ce 01       	movw	r24, r28
    2b6a:	0e 94 af 11 	call	0x235e	; 0x235e <move_window>
    2b6e:	81 11       	cpse	r24, r1
    2b70:	79 c0       	rjmp	.+242    	; 0x2c64 <get_fat+0x1a2>
    2b72:	81 e0       	ldi	r24, 0x01	; 1
    2b74:	b8 22       	and	r11, r24
    2b76:	ca 0d       	add	r28, r10
    2b78:	db 1d       	adc	r29, r11
    2b7a:	8e a5       	ldd	r24, Y+46	; 0x2e
    2b7c:	61 2f       	mov	r22, r17
    2b7e:	70 e0       	ldi	r23, 0x00	; 0
    2b80:	78 2b       	or	r23, r24
    2b82:	c0 fe       	sbrs	r12, 0
    2b84:	09 c0       	rjmp	.+18     	; 0x2b98 <get_fat+0xd6>
    2b86:	72 95       	swap	r23
    2b88:	62 95       	swap	r22
    2b8a:	6f 70       	andi	r22, 0x0F	; 15
    2b8c:	67 27       	eor	r22, r23
    2b8e:	7f 70       	andi	r23, 0x0F	; 15
    2b90:	67 27       	eor	r22, r23
    2b92:	80 e0       	ldi	r24, 0x00	; 0
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	71 c0       	rjmp	.+226    	; 0x2c7a <get_fat+0x1b8>
    2b98:	7f 70       	andi	r23, 0x0F	; 15
    2b9a:	80 e0       	ldi	r24, 0x00	; 0
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	6d c0       	rjmp	.+218    	; 0x2c7a <get_fat+0x1b8>
    2ba0:	45 2f       	mov	r20, r21
    2ba2:	56 2f       	mov	r21, r22
    2ba4:	67 2f       	mov	r22, r23
    2ba6:	77 27       	eor	r23, r23
    2ba8:	86 8d       	ldd	r24, Z+30	; 0x1e
    2baa:	97 8d       	ldd	r25, Z+31	; 0x1f
    2bac:	a0 a1       	ldd	r26, Z+32	; 0x20
    2bae:	b1 a1       	ldd	r27, Z+33	; 0x21
    2bb0:	48 0f       	add	r20, r24
    2bb2:	59 1f       	adc	r21, r25
    2bb4:	6a 1f       	adc	r22, r26
    2bb6:	7b 1f       	adc	r23, r27
    2bb8:	cf 01       	movw	r24, r30
    2bba:	0e 94 af 11 	call	0x235e	; 0x235e <move_window>
    2bbe:	81 11       	cpse	r24, r1
    2bc0:	55 c0       	rjmp	.+170    	; 0x2c6c <get_fat+0x1aa>
    2bc2:	b7 01       	movw	r22, r14
    2bc4:	a6 01       	movw	r20, r12
    2bc6:	44 0f       	add	r20, r20
    2bc8:	55 1f       	adc	r21, r21
    2bca:	66 1f       	adc	r22, r22
    2bcc:	77 1f       	adc	r23, r23
    2bce:	4e 7f       	andi	r20, 0xFE	; 254
    2bd0:	51 70       	andi	r21, 0x01	; 1
    2bd2:	66 27       	eor	r22, r22
    2bd4:	77 27       	eor	r23, r23
    2bd6:	c4 0f       	add	r28, r20
    2bd8:	d5 1f       	adc	r29, r21
    2bda:	6e a5       	ldd	r22, Y+46	; 0x2e
    2bdc:	7f a5       	ldd	r23, Y+47	; 0x2f
    2bde:	80 e0       	ldi	r24, 0x00	; 0
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	4b c0       	rjmp	.+150    	; 0x2c7a <get_fat+0x1b8>
    2be4:	86 8d       	ldd	r24, Z+30	; 0x1e
    2be6:	97 8d       	ldd	r25, Z+31	; 0x1f
    2be8:	a0 a1       	ldd	r26, Z+32	; 0x20
    2bea:	b1 a1       	ldd	r27, Z+33	; 0x21
    2bec:	68 94       	set
    2bee:	16 f8       	bld	r1, 6
    2bf0:	76 95       	lsr	r23
    2bf2:	67 95       	ror	r22
    2bf4:	57 95       	ror	r21
    2bf6:	47 95       	ror	r20
    2bf8:	16 94       	lsr	r1
    2bfa:	d1 f7       	brne	.-12     	; 0x2bf0 <get_fat+0x12e>
    2bfc:	48 0f       	add	r20, r24
    2bfe:	59 1f       	adc	r21, r25
    2c00:	6a 1f       	adc	r22, r26
    2c02:	7b 1f       	adc	r23, r27
    2c04:	cf 01       	movw	r24, r30
    2c06:	0e 94 af 11 	call	0x235e	; 0x235e <move_window>
    2c0a:	81 11       	cpse	r24, r1
    2c0c:	33 c0       	rjmp	.+102    	; 0x2c74 <get_fat+0x1b2>
    2c0e:	b7 01       	movw	r22, r14
    2c10:	a6 01       	movw	r20, r12
    2c12:	44 0f       	add	r20, r20
    2c14:	55 1f       	adc	r21, r21
    2c16:	66 1f       	adc	r22, r22
    2c18:	77 1f       	adc	r23, r23
    2c1a:	44 0f       	add	r20, r20
    2c1c:	55 1f       	adc	r21, r21
    2c1e:	66 1f       	adc	r22, r22
    2c20:	77 1f       	adc	r23, r23
    2c22:	4c 7f       	andi	r20, 0xFC	; 252
    2c24:	51 70       	andi	r21, 0x01	; 1
    2c26:	66 27       	eor	r22, r22
    2c28:	77 27       	eor	r23, r23
    2c2a:	c4 0f       	add	r28, r20
    2c2c:	d5 1f       	adc	r29, r21
    2c2e:	8e a5       	ldd	r24, Y+46	; 0x2e
    2c30:	9f a5       	ldd	r25, Y+47	; 0x2f
    2c32:	a8 a9       	ldd	r26, Y+48	; 0x30
    2c34:	b9 a9       	ldd	r27, Y+49	; 0x31
    2c36:	bc 01       	movw	r22, r24
    2c38:	cd 01       	movw	r24, r26
    2c3a:	9f 70       	andi	r25, 0x0F	; 15
    2c3c:	1e c0       	rjmp	.+60     	; 0x2c7a <get_fat+0x1b8>
    2c3e:	61 e0       	ldi	r22, 0x01	; 1
    2c40:	70 e0       	ldi	r23, 0x00	; 0
    2c42:	80 e0       	ldi	r24, 0x00	; 0
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	19 c0       	rjmp	.+50     	; 0x2c7a <get_fat+0x1b8>
    2c48:	61 e0       	ldi	r22, 0x01	; 1
    2c4a:	70 e0       	ldi	r23, 0x00	; 0
    2c4c:	80 e0       	ldi	r24, 0x00	; 0
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	14 c0       	rjmp	.+40     	; 0x2c7a <get_fat+0x1b8>
    2c52:	61 e0       	ldi	r22, 0x01	; 1
    2c54:	70 e0       	ldi	r23, 0x00	; 0
    2c56:	80 e0       	ldi	r24, 0x00	; 0
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	0f c0       	rjmp	.+30     	; 0x2c7a <get_fat+0x1b8>
    2c5c:	6f ef       	ldi	r22, 0xFF	; 255
    2c5e:	7f ef       	ldi	r23, 0xFF	; 255
    2c60:	cb 01       	movw	r24, r22
    2c62:	0b c0       	rjmp	.+22     	; 0x2c7a <get_fat+0x1b8>
    2c64:	6f ef       	ldi	r22, 0xFF	; 255
    2c66:	7f ef       	ldi	r23, 0xFF	; 255
    2c68:	cb 01       	movw	r24, r22
    2c6a:	07 c0       	rjmp	.+14     	; 0x2c7a <get_fat+0x1b8>
    2c6c:	6f ef       	ldi	r22, 0xFF	; 255
    2c6e:	7f ef       	ldi	r23, 0xFF	; 255
    2c70:	cb 01       	movw	r24, r22
    2c72:	03 c0       	rjmp	.+6      	; 0x2c7a <get_fat+0x1b8>
    2c74:	6f ef       	ldi	r22, 0xFF	; 255
    2c76:	7f ef       	ldi	r23, 0xFF	; 255
    2c78:	cb 01       	movw	r24, r22
    2c7a:	df 91       	pop	r29
    2c7c:	cf 91       	pop	r28
    2c7e:	1f 91       	pop	r17
    2c80:	0f 91       	pop	r16
    2c82:	ff 90       	pop	r15
    2c84:	ef 90       	pop	r14
    2c86:	df 90       	pop	r13
    2c88:	cf 90       	pop	r12
    2c8a:	bf 90       	pop	r11
    2c8c:	af 90       	pop	r10
    2c8e:	08 95       	ret

00002c90 <dir_sdi>:
    2c90:	af 92       	push	r10
    2c92:	bf 92       	push	r11
    2c94:	cf 92       	push	r12
    2c96:	df 92       	push	r13
    2c98:	ef 92       	push	r14
    2c9a:	ff 92       	push	r15
    2c9c:	0f 93       	push	r16
    2c9e:	1f 93       	push	r17
    2ca0:	cf 93       	push	r28
    2ca2:	df 93       	push	r29
    2ca4:	ec 01       	movw	r28, r24
    2ca6:	8b 01       	movw	r16, r22
    2ca8:	7d 83       	std	Y+5, r23	; 0x05
    2caa:	6c 83       	std	Y+4, r22	; 0x04
    2cac:	ce 80       	ldd	r12, Y+6	; 0x06
    2cae:	df 80       	ldd	r13, Y+7	; 0x07
    2cb0:	e8 84       	ldd	r14, Y+8	; 0x08
    2cb2:	f9 84       	ldd	r15, Y+9	; 0x09
    2cb4:	81 e0       	ldi	r24, 0x01	; 1
    2cb6:	c8 16       	cp	r12, r24
    2cb8:	d1 04       	cpc	r13, r1
    2cba:	e1 04       	cpc	r14, r1
    2cbc:	f1 04       	cpc	r15, r1
    2cbe:	09 f4       	brne	.+2      	; 0x2cc2 <dir_sdi+0x32>
    2cc0:	8b c0       	rjmp	.+278    	; 0x2dd8 <dir_sdi+0x148>
    2cc2:	e8 81       	ld	r30, Y
    2cc4:	f9 81       	ldd	r31, Y+1	; 0x01
    2cc6:	82 89       	ldd	r24, Z+18	; 0x12
    2cc8:	93 89       	ldd	r25, Z+19	; 0x13
    2cca:	a4 89       	ldd	r26, Z+20	; 0x14
    2ccc:	b5 89       	ldd	r27, Z+21	; 0x15
    2cce:	c8 16       	cp	r12, r24
    2cd0:	d9 06       	cpc	r13, r25
    2cd2:	ea 06       	cpc	r14, r26
    2cd4:	fb 06       	cpc	r15, r27
    2cd6:	08 f0       	brcs	.+2      	; 0x2cda <dir_sdi+0x4a>
    2cd8:	81 c0       	rjmp	.+258    	; 0x2ddc <dir_sdi+0x14c>
    2cda:	c1 14       	cp	r12, r1
    2cdc:	d1 04       	cpc	r13, r1
    2cde:	e1 04       	cpc	r14, r1
    2ce0:	f1 04       	cpc	r15, r1
    2ce2:	c1 f4       	brne	.+48     	; 0x2d14 <dir_sdi+0x84>
    2ce4:	80 81       	ld	r24, Z
    2ce6:	83 30       	cpi	r24, 0x03	; 3
    2ce8:	41 f4       	brne	.+16     	; 0x2cfa <dir_sdi+0x6a>
    2cea:	82 a1       	ldd	r24, Z+34	; 0x22
    2cec:	93 a1       	ldd	r25, Z+35	; 0x23
    2cee:	a4 a1       	ldd	r26, Z+36	; 0x24
    2cf0:	b5 a1       	ldd	r27, Z+37	; 0x25
    2cf2:	00 97       	sbiw	r24, 0x00	; 0
    2cf4:	a1 05       	cpc	r26, r1
    2cf6:	b1 05       	cpc	r27, r1
    2cf8:	59 f4       	brne	.+22     	; 0x2d10 <dir_sdi+0x80>
    2cfa:	80 85       	ldd	r24, Z+8	; 0x08
    2cfc:	91 85       	ldd	r25, Z+9	; 0x09
    2cfe:	08 17       	cp	r16, r24
    2d00:	19 07       	cpc	r17, r25
    2d02:	08 f0       	brcs	.+2      	; 0x2d06 <dir_sdi+0x76>
    2d04:	6d c0       	rjmp	.+218    	; 0x2de0 <dir_sdi+0x150>
    2d06:	62 a1       	ldd	r22, Z+34	; 0x22
    2d08:	73 a1       	ldd	r23, Z+35	; 0x23
    2d0a:	84 a1       	ldd	r24, Z+36	; 0x24
    2d0c:	95 a1       	ldd	r25, Z+37	; 0x25
    2d0e:	37 c0       	rjmp	.+110    	; 0x2d7e <dir_sdi+0xee>
    2d10:	6c 01       	movw	r12, r24
    2d12:	7d 01       	movw	r14, r26
    2d14:	a2 80       	ldd	r10, Z+2	; 0x02
    2d16:	80 e1       	ldi	r24, 0x10	; 16
    2d18:	a8 9e       	mul	r10, r24
    2d1a:	50 01       	movw	r10, r0
    2d1c:	11 24       	eor	r1, r1
    2d1e:	0a 15       	cp	r16, r10
    2d20:	1b 05       	cpc	r17, r11
    2d22:	38 f1       	brcs	.+78     	; 0x2d72 <dir_sdi+0xe2>
    2d24:	b7 01       	movw	r22, r14
    2d26:	a6 01       	movw	r20, r12
    2d28:	88 81       	ld	r24, Y
    2d2a:	99 81       	ldd	r25, Y+1	; 0x01
    2d2c:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <get_fat>
    2d30:	6b 01       	movw	r12, r22
    2d32:	7c 01       	movw	r14, r24
    2d34:	8f ef       	ldi	r24, 0xFF	; 255
    2d36:	c8 16       	cp	r12, r24
    2d38:	d8 06       	cpc	r13, r24
    2d3a:	e8 06       	cpc	r14, r24
    2d3c:	f8 06       	cpc	r15, r24
    2d3e:	09 f4       	brne	.+2      	; 0x2d42 <dir_sdi+0xb2>
    2d40:	51 c0       	rjmp	.+162    	; 0x2de4 <dir_sdi+0x154>
    2d42:	82 e0       	ldi	r24, 0x02	; 2
    2d44:	c8 16       	cp	r12, r24
    2d46:	d1 04       	cpc	r13, r1
    2d48:	e1 04       	cpc	r14, r1
    2d4a:	f1 04       	cpc	r15, r1
    2d4c:	08 f4       	brcc	.+2      	; 0x2d50 <dir_sdi+0xc0>
    2d4e:	4c c0       	rjmp	.+152    	; 0x2de8 <dir_sdi+0x158>
    2d50:	e8 81       	ld	r30, Y
    2d52:	f9 81       	ldd	r31, Y+1	; 0x01
    2d54:	82 89       	ldd	r24, Z+18	; 0x12
    2d56:	93 89       	ldd	r25, Z+19	; 0x13
    2d58:	a4 89       	ldd	r26, Z+20	; 0x14
    2d5a:	b5 89       	ldd	r27, Z+21	; 0x15
    2d5c:	c8 16       	cp	r12, r24
    2d5e:	d9 06       	cpc	r13, r25
    2d60:	ea 06       	cpc	r14, r26
    2d62:	fb 06       	cpc	r15, r27
    2d64:	08 f0       	brcs	.+2      	; 0x2d68 <dir_sdi+0xd8>
    2d66:	42 c0       	rjmp	.+132    	; 0x2dec <dir_sdi+0x15c>
    2d68:	0a 19       	sub	r16, r10
    2d6a:	1b 09       	sbc	r17, r11
    2d6c:	0a 15       	cp	r16, r10
    2d6e:	1b 05       	cpc	r17, r11
    2d70:	c8 f6       	brcc	.-78     	; 0x2d24 <dir_sdi+0x94>
    2d72:	b7 01       	movw	r22, r14
    2d74:	a6 01       	movw	r20, r12
    2d76:	88 81       	ld	r24, Y
    2d78:	99 81       	ldd	r25, Y+1	; 0x01
    2d7a:	0e 94 39 15 	call	0x2a72	; 0x2a72 <clust2sect>
    2d7e:	ca 86       	std	Y+10, r12	; 0x0a
    2d80:	db 86       	std	Y+11, r13	; 0x0b
    2d82:	ec 86       	std	Y+12, r14	; 0x0c
    2d84:	fd 86       	std	Y+13, r15	; 0x0d
    2d86:	61 15       	cp	r22, r1
    2d88:	71 05       	cpc	r23, r1
    2d8a:	81 05       	cpc	r24, r1
    2d8c:	91 05       	cpc	r25, r1
    2d8e:	81 f1       	breq	.+96     	; 0x2df0 <dir_sdi+0x160>
    2d90:	98 01       	movw	r18, r16
    2d92:	32 95       	swap	r19
    2d94:	22 95       	swap	r18
    2d96:	2f 70       	andi	r18, 0x0F	; 15
    2d98:	23 27       	eor	r18, r19
    2d9a:	3f 70       	andi	r19, 0x0F	; 15
    2d9c:	23 27       	eor	r18, r19
    2d9e:	dc 01       	movw	r26, r24
    2da0:	cb 01       	movw	r24, r22
    2da2:	82 0f       	add	r24, r18
    2da4:	93 1f       	adc	r25, r19
    2da6:	a1 1d       	adc	r26, r1
    2da8:	b1 1d       	adc	r27, r1
    2daa:	8e 87       	std	Y+14, r24	; 0x0e
    2dac:	9f 87       	std	Y+15, r25	; 0x0f
    2dae:	a8 8b       	std	Y+16, r26	; 0x10
    2db0:	b9 8b       	std	Y+17, r27	; 0x11
    2db2:	88 81       	ld	r24, Y
    2db4:	99 81       	ldd	r25, Y+1	; 0x01
    2db6:	8e 96       	adiw	r24, 0x2e	; 46
    2db8:	0f 70       	andi	r16, 0x0F	; 15
    2dba:	11 27       	eor	r17, r17
    2dbc:	00 0f       	add	r16, r16
    2dbe:	11 1f       	adc	r17, r17
    2dc0:	02 95       	swap	r16
    2dc2:	12 95       	swap	r17
    2dc4:	10 7f       	andi	r17, 0xF0	; 240
    2dc6:	10 27       	eor	r17, r16
    2dc8:	00 7f       	andi	r16, 0xF0	; 240
    2dca:	10 27       	eor	r17, r16
    2dcc:	08 0f       	add	r16, r24
    2dce:	19 1f       	adc	r17, r25
    2dd0:	1b 8b       	std	Y+19, r17	; 0x13
    2dd2:	0a 8b       	std	Y+18, r16	; 0x12
    2dd4:	80 e0       	ldi	r24, 0x00	; 0
    2dd6:	0d c0       	rjmp	.+26     	; 0x2df2 <dir_sdi+0x162>
    2dd8:	82 e0       	ldi	r24, 0x02	; 2
    2dda:	0b c0       	rjmp	.+22     	; 0x2df2 <dir_sdi+0x162>
    2ddc:	82 e0       	ldi	r24, 0x02	; 2
    2dde:	09 c0       	rjmp	.+18     	; 0x2df2 <dir_sdi+0x162>
    2de0:	82 e0       	ldi	r24, 0x02	; 2
    2de2:	07 c0       	rjmp	.+14     	; 0x2df2 <dir_sdi+0x162>
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	05 c0       	rjmp	.+10     	; 0x2df2 <dir_sdi+0x162>
    2de8:	82 e0       	ldi	r24, 0x02	; 2
    2dea:	03 c0       	rjmp	.+6      	; 0x2df2 <dir_sdi+0x162>
    2dec:	82 e0       	ldi	r24, 0x02	; 2
    2dee:	01 c0       	rjmp	.+2      	; 0x2df2 <dir_sdi+0x162>
    2df0:	82 e0       	ldi	r24, 0x02	; 2
    2df2:	df 91       	pop	r29
    2df4:	cf 91       	pop	r28
    2df6:	1f 91       	pop	r17
    2df8:	0f 91       	pop	r16
    2dfa:	ff 90       	pop	r15
    2dfc:	ef 90       	pop	r14
    2dfe:	df 90       	pop	r13
    2e00:	cf 90       	pop	r12
    2e02:	bf 90       	pop	r11
    2e04:	af 90       	pop	r10
    2e06:	08 95       	ret

00002e08 <put_fat>:
    2e08:	4f 92       	push	r4
    2e0a:	5f 92       	push	r5
    2e0c:	6f 92       	push	r6
    2e0e:	7f 92       	push	r7
    2e10:	9f 92       	push	r9
    2e12:	af 92       	push	r10
    2e14:	bf 92       	push	r11
    2e16:	cf 92       	push	r12
    2e18:	df 92       	push	r13
    2e1a:	ef 92       	push	r14
    2e1c:	ff 92       	push	r15
    2e1e:	0f 93       	push	r16
    2e20:	1f 93       	push	r17
    2e22:	cf 93       	push	r28
    2e24:	df 93       	push	r29
    2e26:	42 30       	cpi	r20, 0x02	; 2
    2e28:	51 05       	cpc	r21, r1
    2e2a:	61 05       	cpc	r22, r1
    2e2c:	71 05       	cpc	r23, r1
    2e2e:	08 f4       	brcc	.+2      	; 0x2e32 <put_fat+0x2a>
    2e30:	db c0       	rjmp	.+438    	; 0x2fe8 <put_fat+0x1e0>
    2e32:	fc 01       	movw	r30, r24
    2e34:	c2 88       	ldd	r12, Z+18	; 0x12
    2e36:	d3 88       	ldd	r13, Z+19	; 0x13
    2e38:	e4 88       	ldd	r14, Z+20	; 0x14
    2e3a:	f5 88       	ldd	r15, Z+21	; 0x15
    2e3c:	4c 15       	cp	r20, r12
    2e3e:	5d 05       	cpc	r21, r13
    2e40:	6e 05       	cpc	r22, r14
    2e42:	7f 05       	cpc	r23, r15
    2e44:	08 f0       	brcs	.+2      	; 0x2e48 <put_fat+0x40>
    2e46:	d4 c0       	rjmp	.+424    	; 0x2ff0 <put_fat+0x1e8>
    2e48:	68 01       	movw	r12, r16
    2e4a:	79 01       	movw	r14, r18
    2e4c:	2a 01       	movw	r4, r20
    2e4e:	3b 01       	movw	r6, r22
    2e50:	ec 01       	movw	r28, r24
    2e52:	80 81       	ld	r24, Z
    2e54:	82 30       	cpi	r24, 0x02	; 2
    2e56:	09 f4       	brne	.+2      	; 0x2e5a <put_fat+0x52>
    2e58:	65 c0       	rjmp	.+202    	; 0x2f24 <put_fat+0x11c>
    2e5a:	83 30       	cpi	r24, 0x03	; 3
    2e5c:	09 f4       	brne	.+2      	; 0x2e60 <put_fat+0x58>
    2e5e:	88 c0       	rjmp	.+272    	; 0x2f70 <put_fat+0x168>
    2e60:	81 30       	cpi	r24, 0x01	; 1
    2e62:	09 f0       	breq	.+2      	; 0x2e66 <put_fat+0x5e>
    2e64:	c9 c0       	rjmp	.+402    	; 0x2ff8 <put_fat+0x1f0>
    2e66:	8a 01       	movw	r16, r20
    2e68:	16 95       	lsr	r17
    2e6a:	07 95       	ror	r16
    2e6c:	04 0f       	add	r16, r20
    2e6e:	15 1f       	adc	r17, r21
    2e70:	c8 01       	movw	r24, r16
    2e72:	89 2f       	mov	r24, r25
    2e74:	99 27       	eor	r25, r25
    2e76:	86 95       	lsr	r24
    2e78:	46 8d       	ldd	r20, Z+30	; 0x1e
    2e7a:	57 8d       	ldd	r21, Z+31	; 0x1f
    2e7c:	60 a1       	ldd	r22, Z+32	; 0x20
    2e7e:	71 a1       	ldd	r23, Z+33	; 0x21
    2e80:	48 0f       	add	r20, r24
    2e82:	59 1f       	adc	r21, r25
    2e84:	61 1d       	adc	r22, r1
    2e86:	71 1d       	adc	r23, r1
    2e88:	cf 01       	movw	r24, r30
    2e8a:	0e 94 af 11 	call	0x235e	; 0x235e <move_window>
    2e8e:	98 2e       	mov	r9, r24
    2e90:	81 11       	cpse	r24, r1
    2e92:	d1 c0       	rjmp	.+418    	; 0x3036 <put_fat+0x22e>
    2e94:	58 01       	movw	r10, r16
    2e96:	ff ef       	ldi	r31, 0xFF	; 255
    2e98:	af 1a       	sub	r10, r31
    2e9a:	bf 0a       	sbc	r11, r31
    2e9c:	11 70       	andi	r17, 0x01	; 1
    2e9e:	40 fe       	sbrs	r4, 0
    2ea0:	21 c0       	rjmp	.+66     	; 0x2ee4 <put_fat+0xdc>
    2ea2:	fe 01       	movw	r30, r28
    2ea4:	e0 0f       	add	r30, r16
    2ea6:	f1 1f       	adc	r31, r17
    2ea8:	86 a5       	ldd	r24, Z+46	; 0x2e
    2eaa:	28 2f       	mov	r18, r24
    2eac:	2f 70       	andi	r18, 0x0F	; 15
    2eae:	30 e1       	ldi	r19, 0x10	; 16
    2eb0:	c3 9e       	mul	r12, r19
    2eb2:	c0 01       	movw	r24, r0
    2eb4:	11 24       	eor	r1, r1
    2eb6:	82 2b       	or	r24, r18
    2eb8:	86 a7       	std	Z+46, r24	; 0x2e
    2eba:	81 e0       	ldi	r24, 0x01	; 1
    2ebc:	8c 83       	std	Y+4, r24	; 0x04
    2ebe:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2ec0:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2ec2:	68 a1       	ldd	r22, Y+32	; 0x20
    2ec4:	79 a1       	ldd	r23, Y+33	; 0x21
    2ec6:	c5 01       	movw	r24, r10
    2ec8:	89 2f       	mov	r24, r25
    2eca:	99 27       	eor	r25, r25
    2ecc:	86 95       	lsr	r24
    2ece:	48 0f       	add	r20, r24
    2ed0:	59 1f       	adc	r21, r25
    2ed2:	61 1d       	adc	r22, r1
    2ed4:	71 1d       	adc	r23, r1
    2ed6:	ce 01       	movw	r24, r28
    2ed8:	0e 94 af 11 	call	0x235e	; 0x235e <move_window>
    2edc:	88 23       	and	r24, r24
    2ede:	09 f4       	brne	.+2      	; 0x2ee2 <put_fat+0xda>
    2ee0:	93 c0       	rjmp	.+294    	; 0x3008 <put_fat+0x200>
    2ee2:	8e c0       	rjmp	.+284    	; 0x3000 <put_fat+0x1f8>
    2ee4:	fe 01       	movw	r30, r28
    2ee6:	e0 0f       	add	r30, r16
    2ee8:	f1 1f       	adc	r31, r17
    2eea:	c6 a6       	std	Z+46, r12	; 0x2e
    2eec:	81 e0       	ldi	r24, 0x01	; 1
    2eee:	8c 83       	std	Y+4, r24	; 0x04
    2ef0:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2ef2:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2ef4:	68 a1       	ldd	r22, Y+32	; 0x20
    2ef6:	79 a1       	ldd	r23, Y+33	; 0x21
    2ef8:	c5 01       	movw	r24, r10
    2efa:	89 2f       	mov	r24, r25
    2efc:	99 27       	eor	r25, r25
    2efe:	86 95       	lsr	r24
    2f00:	48 0f       	add	r20, r24
    2f02:	59 1f       	adc	r21, r25
    2f04:	61 1d       	adc	r22, r1
    2f06:	71 1d       	adc	r23, r1
    2f08:	ce 01       	movw	r24, r28
    2f0a:	0e 94 af 11 	call	0x235e	; 0x235e <move_window>
    2f0e:	88 23       	and	r24, r24
    2f10:	09 f4       	brne	.+2      	; 0x2f14 <put_fat+0x10c>
    2f12:	85 c0       	rjmp	.+266    	; 0x301e <put_fat+0x216>
    2f14:	77 c0       	rjmp	.+238    	; 0x3004 <put_fat+0x1fc>
    2f16:	fe 01       	movw	r30, r28
    2f18:	ea 0d       	add	r30, r10
    2f1a:	fb 1d       	adc	r31, r11
    2f1c:	c6 a6       	std	Z+46, r12	; 0x2e
    2f1e:	81 e0       	ldi	r24, 0x01	; 1
    2f20:	8c 83       	std	Y+4, r24	; 0x04
    2f22:	89 c0       	rjmp	.+274    	; 0x3036 <put_fat+0x22e>
    2f24:	45 2f       	mov	r20, r21
    2f26:	56 2f       	mov	r21, r22
    2f28:	67 2f       	mov	r22, r23
    2f2a:	77 27       	eor	r23, r23
    2f2c:	86 8d       	ldd	r24, Z+30	; 0x1e
    2f2e:	97 8d       	ldd	r25, Z+31	; 0x1f
    2f30:	a0 a1       	ldd	r26, Z+32	; 0x20
    2f32:	b1 a1       	ldd	r27, Z+33	; 0x21
    2f34:	48 0f       	add	r20, r24
    2f36:	59 1f       	adc	r21, r25
    2f38:	6a 1f       	adc	r22, r26
    2f3a:	7b 1f       	adc	r23, r27
    2f3c:	cf 01       	movw	r24, r30
    2f3e:	0e 94 af 11 	call	0x235e	; 0x235e <move_window>
    2f42:	98 2e       	mov	r9, r24
    2f44:	81 11       	cpse	r24, r1
    2f46:	77 c0       	rjmp	.+238    	; 0x3036 <put_fat+0x22e>
    2f48:	b3 01       	movw	r22, r6
    2f4a:	a2 01       	movw	r20, r4
    2f4c:	44 0f       	add	r20, r20
    2f4e:	55 1f       	adc	r21, r21
    2f50:	66 1f       	adc	r22, r22
    2f52:	77 1f       	adc	r23, r23
    2f54:	4e 7f       	andi	r20, 0xFE	; 254
    2f56:	51 70       	andi	r21, 0x01	; 1
    2f58:	66 27       	eor	r22, r22
    2f5a:	77 27       	eor	r23, r23
    2f5c:	42 5d       	subi	r20, 0xD2	; 210
    2f5e:	5f 4f       	sbci	r21, 0xFF	; 255
    2f60:	fe 01       	movw	r30, r28
    2f62:	e4 0f       	add	r30, r20
    2f64:	f5 1f       	adc	r31, r21
    2f66:	d1 82       	std	Z+1, r13	; 0x01
    2f68:	c0 82       	st	Z, r12
    2f6a:	81 e0       	ldi	r24, 0x01	; 1
    2f6c:	8c 83       	std	Y+4, r24	; 0x04
    2f6e:	63 c0       	rjmp	.+198    	; 0x3036 <put_fat+0x22e>
    2f70:	86 8d       	ldd	r24, Z+30	; 0x1e
    2f72:	97 8d       	ldd	r25, Z+31	; 0x1f
    2f74:	a0 a1       	ldd	r26, Z+32	; 0x20
    2f76:	b1 a1       	ldd	r27, Z+33	; 0x21
    2f78:	68 94       	set
    2f7a:	16 f8       	bld	r1, 6
    2f7c:	76 95       	lsr	r23
    2f7e:	67 95       	ror	r22
    2f80:	57 95       	ror	r21
    2f82:	47 95       	ror	r20
    2f84:	16 94       	lsr	r1
    2f86:	d1 f7       	brne	.-12     	; 0x2f7c <put_fat+0x174>
    2f88:	48 0f       	add	r20, r24
    2f8a:	59 1f       	adc	r21, r25
    2f8c:	6a 1f       	adc	r22, r26
    2f8e:	7b 1f       	adc	r23, r27
    2f90:	cf 01       	movw	r24, r30
    2f92:	0e 94 af 11 	call	0x235e	; 0x235e <move_window>
    2f96:	98 2e       	mov	r9, r24
    2f98:	81 11       	cpse	r24, r1
    2f9a:	4d c0       	rjmp	.+154    	; 0x3036 <put_fat+0x22e>
    2f9c:	b3 01       	movw	r22, r6
    2f9e:	a2 01       	movw	r20, r4
    2fa0:	44 0f       	add	r20, r20
    2fa2:	55 1f       	adc	r21, r21
    2fa4:	66 1f       	adc	r22, r22
    2fa6:	77 1f       	adc	r23, r23
    2fa8:	44 0f       	add	r20, r20
    2faa:	55 1f       	adc	r21, r21
    2fac:	66 1f       	adc	r22, r22
    2fae:	77 1f       	adc	r23, r23
    2fb0:	4c 7f       	andi	r20, 0xFC	; 252
    2fb2:	51 70       	andi	r21, 0x01	; 1
    2fb4:	66 27       	eor	r22, r22
    2fb6:	77 27       	eor	r23, r23
    2fb8:	42 5d       	subi	r20, 0xD2	; 210
    2fba:	5f 4f       	sbci	r21, 0xFF	; 255
    2fbc:	fe 01       	movw	r30, r28
    2fbe:	e4 0f       	add	r30, r20
    2fc0:	f5 1f       	adc	r31, r21
    2fc2:	00 81       	ld	r16, Z
    2fc4:	11 81       	ldd	r17, Z+1	; 0x01
    2fc6:	22 81       	ldd	r18, Z+2	; 0x02
    2fc8:	33 81       	ldd	r19, Z+3	; 0x03
    2fca:	00 27       	eor	r16, r16
    2fcc:	11 27       	eor	r17, r17
    2fce:	22 27       	eor	r18, r18
    2fd0:	30 7f       	andi	r19, 0xF0	; 240
    2fd2:	c0 2a       	or	r12, r16
    2fd4:	d1 2a       	or	r13, r17
    2fd6:	e2 2a       	or	r14, r18
    2fd8:	f3 2a       	or	r15, r19
    2fda:	c0 82       	st	Z, r12
    2fdc:	d1 82       	std	Z+1, r13	; 0x01
    2fde:	e2 82       	std	Z+2, r14	; 0x02
    2fe0:	f3 82       	std	Z+3, r15	; 0x03
    2fe2:	81 e0       	ldi	r24, 0x01	; 1
    2fe4:	8c 83       	std	Y+4, r24	; 0x04
    2fe6:	27 c0       	rjmp	.+78     	; 0x3036 <put_fat+0x22e>
    2fe8:	68 94       	set
    2fea:	99 24       	eor	r9, r9
    2fec:	91 f8       	bld	r9, 1
    2fee:	23 c0       	rjmp	.+70     	; 0x3036 <put_fat+0x22e>
    2ff0:	68 94       	set
    2ff2:	99 24       	eor	r9, r9
    2ff4:	91 f8       	bld	r9, 1
    2ff6:	1f c0       	rjmp	.+62     	; 0x3036 <put_fat+0x22e>
    2ff8:	68 94       	set
    2ffa:	99 24       	eor	r9, r9
    2ffc:	91 f8       	bld	r9, 1
    2ffe:	1b c0       	rjmp	.+54     	; 0x3036 <put_fat+0x22e>
    3000:	98 2e       	mov	r9, r24
    3002:	19 c0       	rjmp	.+50     	; 0x3036 <put_fat+0x22e>
    3004:	98 2e       	mov	r9, r24
    3006:	17 c0       	rjmp	.+46     	; 0x3036 <put_fat+0x22e>
    3008:	81 e0       	ldi	r24, 0x01	; 1
    300a:	b8 22       	and	r11, r24
    300c:	68 94       	set
    300e:	13 f8       	bld	r1, 3
    3010:	f6 94       	lsr	r15
    3012:	e7 94       	ror	r14
    3014:	d7 94       	ror	r13
    3016:	c7 94       	ror	r12
    3018:	16 94       	lsr	r1
    301a:	d1 f7       	brne	.-12     	; 0x3010 <put_fat+0x208>
    301c:	7c cf       	rjmp	.-264    	; 0x2f16 <put_fat+0x10e>
    301e:	e1 e0       	ldi	r30, 0x01	; 1
    3020:	be 22       	and	r11, r30
    3022:	fe 01       	movw	r30, r28
    3024:	ea 0d       	add	r30, r10
    3026:	fb 1d       	adc	r31, r11
    3028:	96 a5       	ldd	r25, Z+46	; 0x2e
    302a:	90 7f       	andi	r25, 0xF0	; 240
    302c:	8d 2d       	mov	r24, r13
    302e:	8f 70       	andi	r24, 0x0F	; 15
    3030:	c9 2e       	mov	r12, r25
    3032:	c8 2a       	or	r12, r24
    3034:	70 cf       	rjmp	.-288    	; 0x2f16 <put_fat+0x10e>
    3036:	89 2d       	mov	r24, r9
    3038:	df 91       	pop	r29
    303a:	cf 91       	pop	r28
    303c:	1f 91       	pop	r17
    303e:	0f 91       	pop	r16
    3040:	ff 90       	pop	r15
    3042:	ef 90       	pop	r14
    3044:	df 90       	pop	r13
    3046:	cf 90       	pop	r12
    3048:	bf 90       	pop	r11
    304a:	af 90       	pop	r10
    304c:	9f 90       	pop	r9
    304e:	7f 90       	pop	r7
    3050:	6f 90       	pop	r6
    3052:	5f 90       	pop	r5
    3054:	4f 90       	pop	r4
    3056:	08 95       	ret

00003058 <create_chain>:
    3058:	4f 92       	push	r4
    305a:	5f 92       	push	r5
    305c:	6f 92       	push	r6
    305e:	7f 92       	push	r7
    3060:	8f 92       	push	r8
    3062:	9f 92       	push	r9
    3064:	af 92       	push	r10
    3066:	bf 92       	push	r11
    3068:	cf 92       	push	r12
    306a:	df 92       	push	r13
    306c:	ef 92       	push	r14
    306e:	ff 92       	push	r15
    3070:	0f 93       	push	r16
    3072:	1f 93       	push	r17
    3074:	cf 93       	push	r28
    3076:	df 93       	push	r29
    3078:	ec 01       	movw	r28, r24
    307a:	2a 01       	movw	r4, r20
    307c:	3b 01       	movw	r6, r22
    307e:	41 15       	cp	r20, r1
    3080:	51 05       	cpc	r21, r1
    3082:	61 05       	cpc	r22, r1
    3084:	71 05       	cpc	r23, r1
    3086:	b9 f4       	brne	.+46     	; 0x30b6 <create_chain+0x5e>
    3088:	8a 84       	ldd	r8, Y+10	; 0x0a
    308a:	9b 84       	ldd	r9, Y+11	; 0x0b
    308c:	ac 84       	ldd	r10, Y+12	; 0x0c
    308e:	bd 84       	ldd	r11, Y+13	; 0x0d
    3090:	81 14       	cp	r8, r1
    3092:	91 04       	cpc	r9, r1
    3094:	a1 04       	cpc	r10, r1
    3096:	b1 04       	cpc	r11, r1
    3098:	61 f1       	breq	.+88     	; 0x30f2 <create_chain+0x9a>
    309a:	8a 89       	ldd	r24, Y+18	; 0x12
    309c:	9b 89       	ldd	r25, Y+19	; 0x13
    309e:	ac 89       	ldd	r26, Y+20	; 0x14
    30a0:	bd 89       	ldd	r27, Y+21	; 0x15
    30a2:	88 16       	cp	r8, r24
    30a4:	99 06       	cpc	r9, r25
    30a6:	aa 06       	cpc	r10, r26
    30a8:	bb 06       	cpc	r11, r27
    30aa:	38 f1       	brcs	.+78     	; 0x30fa <create_chain+0xa2>
    30ac:	81 2c       	mov	r8, r1
    30ae:	91 2c       	mov	r9, r1
    30b0:	54 01       	movw	r10, r8
    30b2:	83 94       	inc	r8
    30b4:	22 c0       	rjmp	.+68     	; 0x30fa <create_chain+0xa2>
    30b6:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <get_fat>
    30ba:	6b 01       	movw	r12, r22
    30bc:	7c 01       	movw	r14, r24
    30be:	62 30       	cpi	r22, 0x02	; 2
    30c0:	71 05       	cpc	r23, r1
    30c2:	81 05       	cpc	r24, r1
    30c4:	91 05       	cpc	r25, r1
    30c6:	08 f4       	brcc	.+2      	; 0x30ca <create_chain+0x72>
    30c8:	8e c0       	rjmp	.+284    	; 0x31e6 <create_chain+0x18e>
    30ca:	8f ef       	ldi	r24, 0xFF	; 255
    30cc:	c8 16       	cp	r12, r24
    30ce:	d8 06       	cpc	r13, r24
    30d0:	e8 06       	cpc	r14, r24
    30d2:	f8 06       	cpc	r15, r24
    30d4:	09 f4       	brne	.+2      	; 0x30d8 <create_chain+0x80>
    30d6:	8c c0       	rjmp	.+280    	; 0x31f0 <create_chain+0x198>
    30d8:	8a 89       	ldd	r24, Y+18	; 0x12
    30da:	9b 89       	ldd	r25, Y+19	; 0x13
    30dc:	ac 89       	ldd	r26, Y+20	; 0x14
    30de:	bd 89       	ldd	r27, Y+21	; 0x15
    30e0:	c8 16       	cp	r12, r24
    30e2:	d9 06       	cpc	r13, r25
    30e4:	ea 06       	cpc	r14, r26
    30e6:	fb 06       	cpc	r15, r27
    30e8:	08 f4       	brcc	.+2      	; 0x30ec <create_chain+0x94>
    30ea:	87 c0       	rjmp	.+270    	; 0x31fa <create_chain+0x1a2>
    30ec:	53 01       	movw	r10, r6
    30ee:	42 01       	movw	r8, r4
    30f0:	04 c0       	rjmp	.+8      	; 0x30fa <create_chain+0xa2>
    30f2:	81 2c       	mov	r8, r1
    30f4:	91 2c       	mov	r9, r1
    30f6:	54 01       	movw	r10, r8
    30f8:	83 94       	inc	r8
    30fa:	75 01       	movw	r14, r10
    30fc:	64 01       	movw	r12, r8
    30fe:	2f ef       	ldi	r18, 0xFF	; 255
    3100:	c2 1a       	sub	r12, r18
    3102:	d2 0a       	sbc	r13, r18
    3104:	e2 0a       	sbc	r14, r18
    3106:	f2 0a       	sbc	r15, r18
    3108:	8a 89       	ldd	r24, Y+18	; 0x12
    310a:	9b 89       	ldd	r25, Y+19	; 0x13
    310c:	ac 89       	ldd	r26, Y+20	; 0x14
    310e:	bd 89       	ldd	r27, Y+21	; 0x15
    3110:	c8 16       	cp	r12, r24
    3112:	d9 06       	cpc	r13, r25
    3114:	ea 06       	cpc	r14, r26
    3116:	fb 06       	cpc	r15, r27
    3118:	60 f0       	brcs	.+24     	; 0x3132 <create_chain+0xda>
    311a:	82 e0       	ldi	r24, 0x02	; 2
    311c:	88 16       	cp	r8, r24
    311e:	91 04       	cpc	r9, r1
    3120:	a1 04       	cpc	r10, r1
    3122:	b1 04       	cpc	r11, r1
    3124:	08 f4       	brcc	.+2      	; 0x3128 <create_chain+0xd0>
    3126:	6e c0       	rjmp	.+220    	; 0x3204 <create_chain+0x1ac>
    3128:	c1 2c       	mov	r12, r1
    312a:	d1 2c       	mov	r13, r1
    312c:	76 01       	movw	r14, r12
    312e:	68 94       	set
    3130:	c1 f8       	bld	r12, 1
    3132:	b7 01       	movw	r22, r14
    3134:	a6 01       	movw	r20, r12
    3136:	ce 01       	movw	r24, r28
    3138:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <get_fat>
    313c:	61 15       	cp	r22, r1
    313e:	71 05       	cpc	r23, r1
    3140:	81 05       	cpc	r24, r1
    3142:	91 05       	cpc	r25, r1
    3144:	99 f0       	breq	.+38     	; 0x316c <create_chain+0x114>
    3146:	6f 3f       	cpi	r22, 0xFF	; 255
    3148:	2f ef       	ldi	r18, 0xFF	; 255
    314a:	72 07       	cpc	r23, r18
    314c:	82 07       	cpc	r24, r18
    314e:	92 07       	cpc	r25, r18
    3150:	09 f4       	brne	.+2      	; 0x3154 <create_chain+0xfc>
    3152:	5d c0       	rjmp	.+186    	; 0x320e <create_chain+0x1b6>
    3154:	61 30       	cpi	r22, 0x01	; 1
    3156:	71 05       	cpc	r23, r1
    3158:	81 05       	cpc	r24, r1
    315a:	91 05       	cpc	r25, r1
    315c:	09 f4       	brne	.+2      	; 0x3160 <create_chain+0x108>
    315e:	5c c0       	rjmp	.+184    	; 0x3218 <create_chain+0x1c0>
    3160:	c8 14       	cp	r12, r8
    3162:	d9 04       	cpc	r13, r9
    3164:	ea 04       	cpc	r14, r10
    3166:	fb 04       	cpc	r15, r11
    3168:	51 f6       	brne	.-108    	; 0x30fe <create_chain+0xa6>
    316a:	5b c0       	rjmp	.+182    	; 0x3222 <create_chain+0x1ca>
    316c:	0f ef       	ldi	r16, 0xFF	; 255
    316e:	1f ef       	ldi	r17, 0xFF	; 255
    3170:	2f ef       	ldi	r18, 0xFF	; 255
    3172:	3f e0       	ldi	r19, 0x0F	; 15
    3174:	b7 01       	movw	r22, r14
    3176:	a6 01       	movw	r20, r12
    3178:	ce 01       	movw	r24, r28
    317a:	0e 94 04 17 	call	0x2e08	; 0x2e08 <put_fat>
    317e:	81 11       	cpse	r24, r1
    3180:	2b c0       	rjmp	.+86     	; 0x31d8 <create_chain+0x180>
    3182:	41 14       	cp	r4, r1
    3184:	51 04       	cpc	r5, r1
    3186:	61 04       	cpc	r6, r1
    3188:	71 04       	cpc	r7, r1
    318a:	49 f0       	breq	.+18     	; 0x319e <create_chain+0x146>
    318c:	97 01       	movw	r18, r14
    318e:	86 01       	movw	r16, r12
    3190:	b3 01       	movw	r22, r6
    3192:	a2 01       	movw	r20, r4
    3194:	ce 01       	movw	r24, r28
    3196:	0e 94 04 17 	call	0x2e08	; 0x2e08 <put_fat>
    319a:	81 11       	cpse	r24, r1
    319c:	1d c0       	rjmp	.+58     	; 0x31d8 <create_chain+0x180>
    319e:	ca 86       	std	Y+10, r12	; 0x0a
    31a0:	db 86       	std	Y+11, r13	; 0x0b
    31a2:	ec 86       	std	Y+12, r14	; 0x0c
    31a4:	fd 86       	std	Y+13, r15	; 0x0d
    31a6:	8e 85       	ldd	r24, Y+14	; 0x0e
    31a8:	9f 85       	ldd	r25, Y+15	; 0x0f
    31aa:	a8 89       	ldd	r26, Y+16	; 0x10
    31ac:	b9 89       	ldd	r27, Y+17	; 0x11
    31ae:	8f 3f       	cpi	r24, 0xFF	; 255
    31b0:	2f ef       	ldi	r18, 0xFF	; 255
    31b2:	92 07       	cpc	r25, r18
    31b4:	a2 07       	cpc	r26, r18
    31b6:	b2 07       	cpc	r27, r18
    31b8:	c9 f1       	breq	.+114    	; 0x322c <create_chain+0x1d4>
    31ba:	01 97       	sbiw	r24, 0x01	; 1
    31bc:	a1 09       	sbc	r26, r1
    31be:	b1 09       	sbc	r27, r1
    31c0:	8e 87       	std	Y+14, r24	; 0x0e
    31c2:	9f 87       	std	Y+15, r25	; 0x0f
    31c4:	a8 8b       	std	Y+16, r26	; 0x10
    31c6:	b9 8b       	std	Y+17, r27	; 0x11
    31c8:	8d 81       	ldd	r24, Y+5	; 0x05
    31ca:	81 60       	ori	r24, 0x01	; 1
    31cc:	8d 83       	std	Y+5, r24	; 0x05
    31ce:	6c 2d       	mov	r22, r12
    31d0:	7d 2d       	mov	r23, r13
    31d2:	8e 2d       	mov	r24, r14
    31d4:	9f 2d       	mov	r25, r15
    31d6:	33 c0       	rjmp	.+102    	; 0x323e <create_chain+0x1e6>
    31d8:	81 30       	cpi	r24, 0x01	; 1
    31da:	69 f1       	breq	.+90     	; 0x3236 <create_chain+0x1de>
    31dc:	61 e0       	ldi	r22, 0x01	; 1
    31de:	70 e0       	ldi	r23, 0x00	; 0
    31e0:	80 e0       	ldi	r24, 0x00	; 0
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	2c c0       	rjmp	.+88     	; 0x323e <create_chain+0x1e6>
    31e6:	61 e0       	ldi	r22, 0x01	; 1
    31e8:	70 e0       	ldi	r23, 0x00	; 0
    31ea:	80 e0       	ldi	r24, 0x00	; 0
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	27 c0       	rjmp	.+78     	; 0x323e <create_chain+0x1e6>
    31f0:	6f ef       	ldi	r22, 0xFF	; 255
    31f2:	7f ef       	ldi	r23, 0xFF	; 255
    31f4:	8f ef       	ldi	r24, 0xFF	; 255
    31f6:	9f ef       	ldi	r25, 0xFF	; 255
    31f8:	22 c0       	rjmp	.+68     	; 0x323e <create_chain+0x1e6>
    31fa:	6c 2d       	mov	r22, r12
    31fc:	7d 2d       	mov	r23, r13
    31fe:	8e 2d       	mov	r24, r14
    3200:	9f 2d       	mov	r25, r15
    3202:	1d c0       	rjmp	.+58     	; 0x323e <create_chain+0x1e6>
    3204:	60 e0       	ldi	r22, 0x00	; 0
    3206:	70 e0       	ldi	r23, 0x00	; 0
    3208:	80 e0       	ldi	r24, 0x00	; 0
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	18 c0       	rjmp	.+48     	; 0x323e <create_chain+0x1e6>
    320e:	6f ef       	ldi	r22, 0xFF	; 255
    3210:	7f ef       	ldi	r23, 0xFF	; 255
    3212:	8f ef       	ldi	r24, 0xFF	; 255
    3214:	9f ef       	ldi	r25, 0xFF	; 255
    3216:	13 c0       	rjmp	.+38     	; 0x323e <create_chain+0x1e6>
    3218:	61 e0       	ldi	r22, 0x01	; 1
    321a:	70 e0       	ldi	r23, 0x00	; 0
    321c:	80 e0       	ldi	r24, 0x00	; 0
    321e:	90 e0       	ldi	r25, 0x00	; 0
    3220:	0e c0       	rjmp	.+28     	; 0x323e <create_chain+0x1e6>
    3222:	60 e0       	ldi	r22, 0x00	; 0
    3224:	70 e0       	ldi	r23, 0x00	; 0
    3226:	80 e0       	ldi	r24, 0x00	; 0
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	09 c0       	rjmp	.+18     	; 0x323e <create_chain+0x1e6>
    322c:	6c 2d       	mov	r22, r12
    322e:	7d 2d       	mov	r23, r13
    3230:	8e 2d       	mov	r24, r14
    3232:	9f 2d       	mov	r25, r15
    3234:	04 c0       	rjmp	.+8      	; 0x323e <create_chain+0x1e6>
    3236:	6f ef       	ldi	r22, 0xFF	; 255
    3238:	7f ef       	ldi	r23, 0xFF	; 255
    323a:	8f ef       	ldi	r24, 0xFF	; 255
    323c:	9f ef       	ldi	r25, 0xFF	; 255
    323e:	df 91       	pop	r29
    3240:	cf 91       	pop	r28
    3242:	1f 91       	pop	r17
    3244:	0f 91       	pop	r16
    3246:	ff 90       	pop	r15
    3248:	ef 90       	pop	r14
    324a:	df 90       	pop	r13
    324c:	cf 90       	pop	r12
    324e:	bf 90       	pop	r11
    3250:	af 90       	pop	r10
    3252:	9f 90       	pop	r9
    3254:	8f 90       	pop	r8
    3256:	7f 90       	pop	r7
    3258:	6f 90       	pop	r6
    325a:	5f 90       	pop	r5
    325c:	4f 90       	pop	r4
    325e:	08 95       	ret

00003260 <dir_next>:
    3260:	7f 92       	push	r7
    3262:	8f 92       	push	r8
    3264:	9f 92       	push	r9
    3266:	af 92       	push	r10
    3268:	bf 92       	push	r11
    326a:	cf 92       	push	r12
    326c:	df 92       	push	r13
    326e:	ef 92       	push	r14
    3270:	ff 92       	push	r15
    3272:	0f 93       	push	r16
    3274:	1f 93       	push	r17
    3276:	cf 93       	push	r28
    3278:	df 93       	push	r29
    327a:	dc 01       	movw	r26, r24
    327c:	14 96       	adiw	r26, 0x04	; 4
    327e:	cd 91       	ld	r28, X+
    3280:	dc 91       	ld	r29, X
    3282:	15 97       	sbiw	r26, 0x05	; 5
    3284:	21 96       	adiw	r28, 0x01	; 1
    3286:	09 f4       	brne	.+2      	; 0x328a <dir_next+0x2a>
    3288:	01 c1       	rjmp	.+514    	; 0x348c <dir_next+0x22c>
    328a:	1e 96       	adiw	r26, 0x0e	; 14
    328c:	8d 90       	ld	r8, X+
    328e:	9d 90       	ld	r9, X+
    3290:	ad 90       	ld	r10, X+
    3292:	bc 90       	ld	r11, X
    3294:	51 97       	sbiw	r26, 0x11	; 17
    3296:	81 14       	cp	r8, r1
    3298:	91 04       	cpc	r9, r1
    329a:	a1 04       	cpc	r10, r1
    329c:	b1 04       	cpc	r11, r1
    329e:	09 f4       	brne	.+2      	; 0x32a2 <dir_next+0x42>
    32a0:	f7 c0       	rjmp	.+494    	; 0x3490 <dir_next+0x230>
    32a2:	7b 01       	movw	r14, r22
    32a4:	8c 01       	movw	r16, r24
    32a6:	6e 01       	movw	r12, r28
    32a8:	bf e0       	ldi	r27, 0x0F	; 15
    32aa:	cb 22       	and	r12, r27
    32ac:	dd 24       	eor	r13, r13
    32ae:	c1 14       	cp	r12, r1
    32b0:	d1 04       	cpc	r13, r1
    32b2:	09 f0       	breq	.+2      	; 0x32b6 <dir_next+0x56>
    32b4:	d5 c0       	rjmp	.+426    	; 0x3460 <dir_next+0x200>
    32b6:	ef ef       	ldi	r30, 0xFF	; 255
    32b8:	8e 1a       	sub	r8, r30
    32ba:	9e 0a       	sbc	r9, r30
    32bc:	ae 0a       	sbc	r10, r30
    32be:	be 0a       	sbc	r11, r30
    32c0:	dc 01       	movw	r26, r24
    32c2:	1e 96       	adiw	r26, 0x0e	; 14
    32c4:	8d 92       	st	X+, r8
    32c6:	9d 92       	st	X+, r9
    32c8:	ad 92       	st	X+, r10
    32ca:	bc 92       	st	X, r11
    32cc:	51 97       	sbiw	r26, 0x11	; 17
    32ce:	1a 96       	adiw	r26, 0x0a	; 10
    32d0:	4d 91       	ld	r20, X+
    32d2:	5d 91       	ld	r21, X+
    32d4:	6d 91       	ld	r22, X+
    32d6:	7c 91       	ld	r23, X
    32d8:	1d 97       	sbiw	r26, 0x0d	; 13
    32da:	41 15       	cp	r20, r1
    32dc:	51 05       	cpc	r21, r1
    32de:	61 05       	cpc	r22, r1
    32e0:	71 05       	cpc	r23, r1
    32e2:	49 f4       	brne	.+18     	; 0x32f6 <dir_next+0x96>
    32e4:	ed 91       	ld	r30, X+
    32e6:	fc 91       	ld	r31, X
    32e8:	80 85       	ldd	r24, Z+8	; 0x08
    32ea:	91 85       	ldd	r25, Z+9	; 0x09
    32ec:	c8 17       	cp	r28, r24
    32ee:	d9 07       	cpc	r29, r25
    32f0:	08 f0       	brcs	.+2      	; 0x32f4 <dir_next+0x94>
    32f2:	d0 c0       	rjmp	.+416    	; 0x3494 <dir_next+0x234>
    32f4:	b5 c0       	rjmp	.+362    	; 0x3460 <dir_next+0x200>
    32f6:	dc 01       	movw	r26, r24
    32f8:	ed 91       	ld	r30, X+
    32fa:	fc 91       	ld	r31, X
    32fc:	22 81       	ldd	r18, Z+2	; 0x02
    32fe:	30 e0       	ldi	r19, 0x00	; 0
    3300:	21 50       	subi	r18, 0x01	; 1
    3302:	31 09       	sbc	r19, r1
    3304:	ce 01       	movw	r24, r28
    3306:	92 95       	swap	r25
    3308:	82 95       	swap	r24
    330a:	8f 70       	andi	r24, 0x0F	; 15
    330c:	89 27       	eor	r24, r25
    330e:	9f 70       	andi	r25, 0x0F	; 15
    3310:	89 27       	eor	r24, r25
    3312:	28 23       	and	r18, r24
    3314:	39 23       	and	r19, r25
    3316:	23 2b       	or	r18, r19
    3318:	09 f0       	breq	.+2      	; 0x331c <dir_next+0xbc>
    331a:	a2 c0       	rjmp	.+324    	; 0x3460 <dir_next+0x200>
    331c:	cf 01       	movw	r24, r30
    331e:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <get_fat>
    3322:	4b 01       	movw	r8, r22
    3324:	5c 01       	movw	r10, r24
    3326:	62 30       	cpi	r22, 0x02	; 2
    3328:	71 05       	cpc	r23, r1
    332a:	81 05       	cpc	r24, r1
    332c:	91 05       	cpc	r25, r1
    332e:	08 f4       	brcc	.+2      	; 0x3332 <dir_next+0xd2>
    3330:	b3 c0       	rjmp	.+358    	; 0x3498 <dir_next+0x238>
    3332:	6f 3f       	cpi	r22, 0xFF	; 255
    3334:	7f 4f       	sbci	r23, 0xFF	; 255
    3336:	8f 4f       	sbci	r24, 0xFF	; 255
    3338:	9f 4f       	sbci	r25, 0xFF	; 255
    333a:	09 f4       	brne	.+2      	; 0x333e <dir_next+0xde>
    333c:	af c0       	rjmp	.+350    	; 0x349c <dir_next+0x23c>
    333e:	d8 01       	movw	r26, r16
    3340:	ed 91       	ld	r30, X+
    3342:	fc 91       	ld	r31, X
    3344:	82 89       	ldd	r24, Z+18	; 0x12
    3346:	93 89       	ldd	r25, Z+19	; 0x13
    3348:	a4 89       	ldd	r26, Z+20	; 0x14
    334a:	b5 89       	ldd	r27, Z+21	; 0x15
    334c:	88 16       	cp	r8, r24
    334e:	99 06       	cpc	r9, r25
    3350:	aa 06       	cpc	r10, r26
    3352:	bb 06       	cpc	r11, r27
    3354:	08 f4       	brcc	.+2      	; 0x3358 <dir_next+0xf8>
    3356:	72 c0       	rjmp	.+228    	; 0x343c <dir_next+0x1dc>
    3358:	ef 28       	or	r14, r15
    335a:	09 f4       	brne	.+2      	; 0x335e <dir_next+0xfe>
    335c:	a1 c0       	rjmp	.+322    	; 0x34a0 <dir_next+0x240>
    335e:	d8 01       	movw	r26, r16
    3360:	1a 96       	adiw	r26, 0x0a	; 10
    3362:	4d 91       	ld	r20, X+
    3364:	5d 91       	ld	r21, X+
    3366:	6d 91       	ld	r22, X+
    3368:	7c 91       	ld	r23, X
    336a:	1d 97       	sbiw	r26, 0x0d	; 13
    336c:	cf 01       	movw	r24, r30
    336e:	0e 94 2c 18 	call	0x3058	; 0x3058 <create_chain>
    3372:	4b 01       	movw	r8, r22
    3374:	5c 01       	movw	r10, r24
    3376:	61 15       	cp	r22, r1
    3378:	71 05       	cpc	r23, r1
    337a:	81 05       	cpc	r24, r1
    337c:	91 05       	cpc	r25, r1
    337e:	09 f4       	brne	.+2      	; 0x3382 <dir_next+0x122>
    3380:	91 c0       	rjmp	.+290    	; 0x34a4 <dir_next+0x244>
    3382:	61 30       	cpi	r22, 0x01	; 1
    3384:	71 05       	cpc	r23, r1
    3386:	81 05       	cpc	r24, r1
    3388:	91 05       	cpc	r25, r1
    338a:	09 f4       	brne	.+2      	; 0x338e <dir_next+0x12e>
    338c:	8d c0       	rjmp	.+282    	; 0x34a8 <dir_next+0x248>
    338e:	6f 3f       	cpi	r22, 0xFF	; 255
    3390:	7f 4f       	sbci	r23, 0xFF	; 255
    3392:	8f 4f       	sbci	r24, 0xFF	; 255
    3394:	9f 4f       	sbci	r25, 0xFF	; 255
    3396:	09 f4       	brne	.+2      	; 0x339a <dir_next+0x13a>
    3398:	89 c0       	rjmp	.+274    	; 0x34ac <dir_next+0x24c>
    339a:	d8 01       	movw	r26, r16
    339c:	8d 91       	ld	r24, X+
    339e:	9c 91       	ld	r25, X
    33a0:	0e 94 44 11 	call	0x2288	; 0x2288 <sync_window>
    33a4:	81 11       	cpse	r24, r1
    33a6:	84 c0       	rjmp	.+264    	; 0x34b0 <dir_next+0x250>
    33a8:	f8 01       	movw	r30, r16
    33aa:	80 81       	ld	r24, Z
    33ac:	91 81       	ldd	r25, Z+1	; 0x01
    33ae:	fc 01       	movw	r30, r24
    33b0:	be 96       	adiw	r30, 0x2e	; 46
    33b2:	82 5d       	subi	r24, 0xD2	; 210
    33b4:	9d 4f       	sbci	r25, 0xFD	; 253
    33b6:	11 92       	st	Z+, r1
    33b8:	e8 17       	cp	r30, r24
    33ba:	f9 07       	cpc	r31, r25
    33bc:	e1 f7       	brne	.-8      	; 0x33b6 <dir_next+0x156>
    33be:	d8 01       	movw	r26, r16
    33c0:	ed 90       	ld	r14, X+
    33c2:	fc 90       	ld	r15, X
    33c4:	b5 01       	movw	r22, r10
    33c6:	a4 01       	movw	r20, r8
    33c8:	c7 01       	movw	r24, r14
    33ca:	0e 94 39 15 	call	0x2a72	; 0x2a72 <clust2sect>
    33ce:	f7 01       	movw	r30, r14
    33d0:	62 a7       	std	Z+42, r22	; 0x2a
    33d2:	73 a7       	std	Z+43, r23	; 0x2b
    33d4:	84 a7       	std	Z+44, r24	; 0x2c
    33d6:	95 a7       	std	Z+45, r25	; 0x2d
    33d8:	e1 2c       	mov	r14, r1
    33da:	f1 2c       	mov	r15, r1
    33dc:	77 24       	eor	r7, r7
    33de:	73 94       	inc	r7
    33e0:	19 c0       	rjmp	.+50     	; 0x3414 <dir_next+0x1b4>
    33e2:	74 82       	std	Z+4, r7	; 0x04
    33e4:	d8 01       	movw	r26, r16
    33e6:	8d 91       	ld	r24, X+
    33e8:	9c 91       	ld	r25, X
    33ea:	0e 94 44 11 	call	0x2288	; 0x2288 <sync_window>
    33ee:	81 11       	cpse	r24, r1
    33f0:	61 c0       	rjmp	.+194    	; 0x34b4 <dir_next+0x254>
    33f2:	d8 01       	movw	r26, r16
    33f4:	ed 91       	ld	r30, X+
    33f6:	fc 91       	ld	r31, X
    33f8:	82 a5       	ldd	r24, Z+42	; 0x2a
    33fa:	93 a5       	ldd	r25, Z+43	; 0x2b
    33fc:	a4 a5       	ldd	r26, Z+44	; 0x2c
    33fe:	b5 a5       	ldd	r27, Z+45	; 0x2d
    3400:	01 96       	adiw	r24, 0x01	; 1
    3402:	a1 1d       	adc	r26, r1
    3404:	b1 1d       	adc	r27, r1
    3406:	82 a7       	std	Z+42, r24	; 0x2a
    3408:	93 a7       	std	Z+43, r25	; 0x2b
    340a:	a4 a7       	std	Z+44, r26	; 0x2c
    340c:	b5 a7       	std	Z+45, r27	; 0x2d
    340e:	bf ef       	ldi	r27, 0xFF	; 255
    3410:	eb 1a       	sub	r14, r27
    3412:	fb 0a       	sbc	r15, r27
    3414:	d8 01       	movw	r26, r16
    3416:	ed 91       	ld	r30, X+
    3418:	fc 91       	ld	r31, X
    341a:	82 81       	ldd	r24, Z+2	; 0x02
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	e8 16       	cp	r14, r24
    3420:	f9 06       	cpc	r15, r25
    3422:	f8 f2       	brcs	.-66     	; 0x33e2 <dir_next+0x182>
    3424:	82 a5       	ldd	r24, Z+42	; 0x2a
    3426:	93 a5       	ldd	r25, Z+43	; 0x2b
    3428:	a4 a5       	ldd	r26, Z+44	; 0x2c
    342a:	b5 a5       	ldd	r27, Z+45	; 0x2d
    342c:	8e 19       	sub	r24, r14
    342e:	9f 09       	sbc	r25, r15
    3430:	a1 09       	sbc	r26, r1
    3432:	b1 09       	sbc	r27, r1
    3434:	82 a7       	std	Z+42, r24	; 0x2a
    3436:	93 a7       	std	Z+43, r25	; 0x2b
    3438:	a4 a7       	std	Z+44, r26	; 0x2c
    343a:	b5 a7       	std	Z+45, r27	; 0x2d
    343c:	f8 01       	movw	r30, r16
    343e:	82 86       	std	Z+10, r8	; 0x0a
    3440:	93 86       	std	Z+11, r9	; 0x0b
    3442:	a4 86       	std	Z+12, r10	; 0x0c
    3444:	b5 86       	std	Z+13, r11	; 0x0d
    3446:	b5 01       	movw	r22, r10
    3448:	a4 01       	movw	r20, r8
    344a:	80 81       	ld	r24, Z
    344c:	91 81       	ldd	r25, Z+1	; 0x01
    344e:	0e 94 39 15 	call	0x2a72	; 0x2a72 <clust2sect>
    3452:	d8 01       	movw	r26, r16
    3454:	1e 96       	adiw	r26, 0x0e	; 14
    3456:	6d 93       	st	X+, r22
    3458:	7d 93       	st	X+, r23
    345a:	8d 93       	st	X+, r24
    345c:	9c 93       	st	X, r25
    345e:	51 97       	sbiw	r26, 0x11	; 17
    3460:	f8 01       	movw	r30, r16
    3462:	d5 83       	std	Z+5, r29	; 0x05
    3464:	c4 83       	std	Z+4, r28	; 0x04
    3466:	80 81       	ld	r24, Z
    3468:	91 81       	ldd	r25, Z+1	; 0x01
    346a:	8e 96       	adiw	r24, 0x2e	; 46
    346c:	cc 0c       	add	r12, r12
    346e:	dd 1c       	adc	r13, r13
    3470:	cc 0c       	add	r12, r12
    3472:	dd 1c       	adc	r13, r13
    3474:	cc 0c       	add	r12, r12
    3476:	dd 1c       	adc	r13, r13
    3478:	cc 0c       	add	r12, r12
    347a:	dd 1c       	adc	r13, r13
    347c:	cc 0c       	add	r12, r12
    347e:	dd 1c       	adc	r13, r13
    3480:	c8 0e       	add	r12, r24
    3482:	d9 1e       	adc	r13, r25
    3484:	d3 8a       	std	Z+19, r13	; 0x13
    3486:	c2 8a       	std	Z+18, r12	; 0x12
    3488:	80 e0       	ldi	r24, 0x00	; 0
    348a:	15 c0       	rjmp	.+42     	; 0x34b6 <dir_next+0x256>
    348c:	84 e0       	ldi	r24, 0x04	; 4
    348e:	13 c0       	rjmp	.+38     	; 0x34b6 <dir_next+0x256>
    3490:	84 e0       	ldi	r24, 0x04	; 4
    3492:	11 c0       	rjmp	.+34     	; 0x34b6 <dir_next+0x256>
    3494:	84 e0       	ldi	r24, 0x04	; 4
    3496:	0f c0       	rjmp	.+30     	; 0x34b6 <dir_next+0x256>
    3498:	82 e0       	ldi	r24, 0x02	; 2
    349a:	0d c0       	rjmp	.+26     	; 0x34b6 <dir_next+0x256>
    349c:	81 e0       	ldi	r24, 0x01	; 1
    349e:	0b c0       	rjmp	.+22     	; 0x34b6 <dir_next+0x256>
    34a0:	84 e0       	ldi	r24, 0x04	; 4
    34a2:	09 c0       	rjmp	.+18     	; 0x34b6 <dir_next+0x256>
    34a4:	87 e0       	ldi	r24, 0x07	; 7
    34a6:	07 c0       	rjmp	.+14     	; 0x34b6 <dir_next+0x256>
    34a8:	82 e0       	ldi	r24, 0x02	; 2
    34aa:	05 c0       	rjmp	.+10     	; 0x34b6 <dir_next+0x256>
    34ac:	81 e0       	ldi	r24, 0x01	; 1
    34ae:	03 c0       	rjmp	.+6      	; 0x34b6 <dir_next+0x256>
    34b0:	81 e0       	ldi	r24, 0x01	; 1
    34b2:	01 c0       	rjmp	.+2      	; 0x34b6 <dir_next+0x256>
    34b4:	81 e0       	ldi	r24, 0x01	; 1
    34b6:	df 91       	pop	r29
    34b8:	cf 91       	pop	r28
    34ba:	1f 91       	pop	r17
    34bc:	0f 91       	pop	r16
    34be:	ff 90       	pop	r15
    34c0:	ef 90       	pop	r14
    34c2:	df 90       	pop	r13
    34c4:	cf 90       	pop	r12
    34c6:	bf 90       	pop	r11
    34c8:	af 90       	pop	r10
    34ca:	9f 90       	pop	r9
    34cc:	8f 90       	pop	r8
    34ce:	7f 90       	pop	r7
    34d0:	08 95       	ret

000034d2 <f_mount>:
    34d2:	1f 93       	push	r17
    34d4:	cf 93       	push	r28
    34d6:	df 93       	push	r29
    34d8:	00 d0       	rcall	.+0      	; 0x34da <f_mount+0x8>
    34da:	00 d0       	rcall	.+0      	; 0x34dc <f_mount+0xa>
    34dc:	00 d0       	rcall	.+0      	; 0x34de <f_mount+0xc>
    34de:	cd b7       	in	r28, 0x3d	; 61
    34e0:	de b7       	in	r29, 0x3e	; 62
    34e2:	9c 83       	std	Y+4, r25	; 0x04
    34e4:	8b 83       	std	Y+3, r24	; 0x03
    34e6:	7e 83       	std	Y+6, r23	; 0x06
    34e8:	6d 83       	std	Y+5, r22	; 0x05
    34ea:	14 2f       	mov	r17, r20
    34ec:	7a 83       	std	Y+2, r23	; 0x02
    34ee:	69 83       	std	Y+1, r22	; 0x01
    34f0:	ce 01       	movw	r24, r28
    34f2:	01 96       	adiw	r24, 0x01	; 1
    34f4:	0e 94 0d 11 	call	0x221a	; 0x221a <get_ldnumber>
    34f8:	99 23       	and	r25, r25
    34fa:	34 f1       	brlt	.+76     	; 0x3548 <f_mount+0x76>
    34fc:	fc 01       	movw	r30, r24
    34fe:	ee 0f       	add	r30, r30
    3500:	ff 1f       	adc	r31, r31
    3502:	e5 51       	subi	r30, 0x15	; 21
    3504:	fc 4f       	sbci	r31, 0xFC	; 252
    3506:	01 90       	ld	r0, Z+
    3508:	f0 81       	ld	r31, Z
    350a:	e0 2d       	mov	r30, r0
    350c:	30 97       	sbiw	r30, 0x00	; 0
    350e:	09 f0       	breq	.+2      	; 0x3512 <f_mount+0x40>
    3510:	10 82       	st	Z, r1
    3512:	eb 81       	ldd	r30, Y+3	; 0x03
    3514:	fc 81       	ldd	r31, Y+4	; 0x04
    3516:	30 97       	sbiw	r30, 0x00	; 0
    3518:	e9 f0       	breq	.+58     	; 0x3554 <f_mount+0x82>
    351a:	10 82       	st	Z, r1
    351c:	2b 81       	ldd	r18, Y+3	; 0x03
    351e:	3c 81       	ldd	r19, Y+4	; 0x04
    3520:	88 0f       	add	r24, r24
    3522:	99 1f       	adc	r25, r25
    3524:	fc 01       	movw	r30, r24
    3526:	e5 51       	subi	r30, 0x15	; 21
    3528:	fc 4f       	sbci	r31, 0xFC	; 252
    352a:	31 83       	std	Z+1, r19	; 0x01
    352c:	20 83       	st	Z, r18
    352e:	23 2b       	or	r18, r19
    3530:	69 f0       	breq	.+26     	; 0x354c <f_mount+0x7a>
    3532:	11 30       	cpi	r17, 0x01	; 1
    3534:	69 f4       	brne	.+26     	; 0x3550 <f_mount+0x7e>
    3536:	40 e0       	ldi	r20, 0x00	; 0
    3538:	be 01       	movw	r22, r28
    353a:	6b 5f       	subi	r22, 0xFB	; 251
    353c:	7f 4f       	sbci	r23, 0xFF	; 255
    353e:	ce 01       	movw	r24, r28
    3540:	03 96       	adiw	r24, 0x03	; 3
    3542:	0e 94 4d 12 	call	0x249a	; 0x249a <find_volume>
    3546:	0e c0       	rjmp	.+28     	; 0x3564 <f_mount+0x92>
    3548:	8b e0       	ldi	r24, 0x0B	; 11
    354a:	0c c0       	rjmp	.+24     	; 0x3564 <f_mount+0x92>
    354c:	80 e0       	ldi	r24, 0x00	; 0
    354e:	0a c0       	rjmp	.+20     	; 0x3564 <f_mount+0x92>
    3550:	80 e0       	ldi	r24, 0x00	; 0
    3552:	08 c0       	rjmp	.+16     	; 0x3564 <f_mount+0x92>
    3554:	88 0f       	add	r24, r24
    3556:	99 1f       	adc	r25, r25
    3558:	fc 01       	movw	r30, r24
    355a:	e5 51       	subi	r30, 0x15	; 21
    355c:	fc 4f       	sbci	r31, 0xFC	; 252
    355e:	11 82       	std	Z+1, r1	; 0x01
    3560:	10 82       	st	Z, r1
    3562:	80 e0       	ldi	r24, 0x00	; 0
    3564:	26 96       	adiw	r28, 0x06	; 6
    3566:	0f b6       	in	r0, 0x3f	; 63
    3568:	f8 94       	cli
    356a:	de bf       	out	0x3e, r29	; 62
    356c:	0f be       	out	0x3f, r0	; 63
    356e:	cd bf       	out	0x3d, r28	; 61
    3570:	df 91       	pop	r29
    3572:	cf 91       	pop	r28
    3574:	1f 91       	pop	r17
    3576:	08 95       	ret

00003578 <f_open>:
    3578:	2f 92       	push	r2
    357a:	3f 92       	push	r3
    357c:	4f 92       	push	r4
    357e:	5f 92       	push	r5
    3580:	6f 92       	push	r6
    3582:	7f 92       	push	r7
    3584:	8f 92       	push	r8
    3586:	9f 92       	push	r9
    3588:	af 92       	push	r10
    358a:	bf 92       	push	r11
    358c:	cf 92       	push	r12
    358e:	df 92       	push	r13
    3590:	ef 92       	push	r14
    3592:	ff 92       	push	r15
    3594:	0f 93       	push	r16
    3596:	1f 93       	push	r17
    3598:	cf 93       	push	r28
    359a:	df 93       	push	r29
    359c:	cd b7       	in	r28, 0x3d	; 61
    359e:	de b7       	in	r29, 0x3e	; 62
    35a0:	e0 97       	sbiw	r28, 0x30	; 48
    35a2:	0f b6       	in	r0, 0x3f	; 63
    35a4:	f8 94       	cli
    35a6:	de bf       	out	0x3e, r29	; 62
    35a8:	0f be       	out	0x3f, r0	; 63
    35aa:	cd bf       	out	0x3d, r28	; 61
    35ac:	7c a3       	std	Y+36, r23	; 0x24
    35ae:	6b a3       	std	Y+35, r22	; 0x23
    35b0:	00 97       	sbiw	r24, 0x00	; 0
    35b2:	09 f4       	brne	.+2      	; 0x35b6 <f_open+0x3e>
    35b4:	9b c2       	rjmp	.+1334   	; 0x3aec <f_open+0x574>
    35b6:	49 a7       	std	Y+41, r20	; 0x29
    35b8:	1c 01       	movw	r2, r24
    35ba:	dc 01       	movw	r26, r24
    35bc:	1d 92       	st	X+, r1
    35be:	1c 92       	st	X, r1
    35c0:	4e 71       	andi	r20, 0x1E	; 30
    35c2:	be 01       	movw	r22, r28
    35c4:	6d 5d       	subi	r22, 0xDD	; 221
    35c6:	7f 4f       	sbci	r23, 0xFF	; 255
    35c8:	ce 01       	movw	r24, r28
    35ca:	01 96       	adiw	r24, 0x01	; 1
    35cc:	0e 94 4d 12 	call	0x249a	; 0x249a <find_volume>
    35d0:	81 11       	cpse	r24, r1
    35d2:	fd c2       	rjmp	.+1530   	; 0x3bce <f_open+0x656>
    35d4:	ce 01       	movw	r24, r28
    35d6:	47 96       	adiw	r24, 0x17	; 23
    35d8:	9e 8b       	std	Y+22, r25	; 0x16
    35da:	8d 8b       	std	Y+21, r24	; 0x15
    35dc:	cb a0       	ldd	r12, Y+35	; 0x23
    35de:	dc a0       	ldd	r13, Y+36	; 0x24
    35e0:	f6 01       	movw	r30, r12
    35e2:	80 81       	ld	r24, Z
    35e4:	8f 32       	cpi	r24, 0x2F	; 47
    35e6:	11 f0       	breq	.+4      	; 0x35ec <f_open+0x74>
    35e8:	8c 35       	cpi	r24, 0x5C	; 92
    35ea:	19 f4       	brne	.+6      	; 0x35f2 <f_open+0x7a>
    35ec:	ff ef       	ldi	r31, 0xFF	; 255
    35ee:	cf 1a       	sub	r12, r31
    35f0:	df 0a       	sbc	r13, r31
    35f2:	29 a5       	ldd	r18, Y+41	; 0x29
    35f4:	2f 71       	andi	r18, 0x1F	; 31
    35f6:	2f a7       	std	Y+47, r18	; 0x2f
    35f8:	1f 82       	std	Y+7, r1	; 0x07
    35fa:	18 86       	std	Y+8, r1	; 0x08
    35fc:	19 86       	std	Y+9, r1	; 0x09
    35fe:	1a 86       	std	Y+10, r1	; 0x0a
    3600:	d6 01       	movw	r26, r12
    3602:	8c 91       	ld	r24, X
    3604:	80 32       	cpi	r24, 0x20	; 32
    3606:	70 f4       	brcc	.+28     	; 0x3624 <f_open+0xac>
    3608:	60 e0       	ldi	r22, 0x00	; 0
    360a:	70 e0       	ldi	r23, 0x00	; 0
    360c:	ce 01       	movw	r24, r28
    360e:	01 96       	adiw	r24, 0x01	; 1
    3610:	0e 94 48 16 	call	0x2c90	; 0x2c90 <dir_sdi>
    3614:	1c 8a       	std	Y+20, r1	; 0x14
    3616:	1b 8a       	std	Y+19, r1	; 0x13
    3618:	e1 2c       	mov	r14, r1
    361a:	f1 2c       	mov	r15, r1
    361c:	88 23       	and	r24, r24
    361e:	09 f4       	brne	.+2      	; 0x3622 <f_open+0xaa>
    3620:	a2 c2       	rjmp	.+1348   	; 0x3b66 <f_open+0x5ee>
    3622:	a8 c2       	rjmp	.+1360   	; 0x3b74 <f_open+0x5fc>
    3624:	68 94       	set
    3626:	bb 24       	eor	r11, r11
    3628:	b5 f8       	bld	r11, 5
    362a:	a1 2c       	mov	r10, r1
    362c:	71 2c       	mov	r7, r1
    362e:	68 94       	set
    3630:	66 24       	eor	r6, r6
    3632:	63 f8       	bld	r6, 3
    3634:	41 2c       	mov	r4, r1
    3636:	56 2c       	mov	r5, r6
    3638:	48 aa       	std	Y+48, r4	; 0x30
    363a:	f6 01       	movw	r30, r12
    363c:	03 c0       	rjmp	.+6      	; 0x3644 <f_open+0xcc>
    363e:	fd 01       	movw	r30, r26
    3640:	01 c0       	rjmp	.+2      	; 0x3644 <f_open+0xcc>
    3642:	fd 01       	movw	r30, r26
    3644:	9f 01       	movw	r18, r30
    3646:	df 01       	movw	r26, r30
    3648:	8d 91       	ld	r24, X+
    364a:	8f 32       	cpi	r24, 0x2F	; 47
    364c:	c1 f3       	breq	.-16     	; 0x363e <f_open+0xc6>
    364e:	8c 35       	cpi	r24, 0x5C	; 92
    3650:	c1 f3       	breq	.-16     	; 0x3642 <f_open+0xca>
    3652:	6d 89       	ldd	r22, Y+21	; 0x15
    3654:	7e 89       	ldd	r23, Y+22	; 0x16
    3656:	db 01       	movw	r26, r22
    3658:	cb 01       	movw	r24, r22
    365a:	0b 96       	adiw	r24, 0x0b	; 11
    365c:	bd 92       	st	X+, r11
    365e:	8a 17       	cp	r24, r26
    3660:	9b 07       	cpc	r25, r27
    3662:	e1 f7       	brne	.-8      	; 0x365c <f_open+0xe4>
    3664:	4a 2d       	mov	r20, r10
    3666:	57 2d       	mov	r21, r7
    3668:	c1 2c       	mov	r12, r1
    366a:	d1 2c       	mov	r13, r1
    366c:	86 2c       	mov	r8, r6
    366e:	94 2c       	mov	r9, r4
    3670:	f1 2c       	mov	r15, r1
    3672:	3e a7       	std	Y+46, r19	; 0x2e
    3674:	2d a7       	std	Y+45, r18	; 0x2d
    3676:	7e a3       	std	Y+38, r23	; 0x26
    3678:	6d a3       	std	Y+37, r22	; 0x25
    367a:	3f 2d       	mov	r19, r15
    367c:	bf ef       	ldi	r27, 0xFF	; 255
    367e:	cb 1a       	sub	r12, r27
    3680:	db 0a       	sbc	r13, r27
    3682:	71 91       	ld	r23, Z+
    3684:	71 32       	cpi	r23, 0x21	; 33
    3686:	08 f4       	brcc	.+2      	; 0x368a <f_open+0x112>
    3688:	41 c2       	rjmp	.+1154   	; 0x3b0c <f_open+0x594>
    368a:	7f 32       	cpi	r23, 0x2F	; 47
    368c:	09 f4       	brne	.+2      	; 0x3690 <f_open+0x118>
    368e:	47 c2       	rjmp	.+1166   	; 0x3b1e <f_open+0x5a6>
    3690:	7c 35       	cpi	r23, 0x5C	; 92
    3692:	09 f4       	brne	.+2      	; 0x3696 <f_open+0x11e>
    3694:	44 c2       	rjmp	.+1160   	; 0x3b1e <f_open+0x5a6>
    3696:	7e 32       	cpi	r23, 0x2E	; 46
    3698:	19 f0       	breq	.+6      	; 0x36a0 <f_open+0x128>
    369a:	48 15       	cp	r20, r8
    369c:	59 05       	cpc	r21, r9
    369e:	90 f0       	brcs	.+36     	; 0x36c4 <f_open+0x14c>
    36a0:	28 e0       	ldi	r18, 0x08	; 8
    36a2:	82 16       	cp	r8, r18
    36a4:	91 04       	cpc	r9, r1
    36a6:	09 f0       	breq	.+2      	; 0x36aa <f_open+0x132>
    36a8:	7e c2       	rjmp	.+1276   	; 0x3ba6 <f_open+0x62e>
    36aa:	7e 32       	cpi	r23, 0x2E	; 46
    36ac:	09 f0       	breq	.+2      	; 0x36b0 <f_open+0x138>
    36ae:	7b c2       	rjmp	.+1270   	; 0x3ba6 <f_open+0x62e>
    36b0:	33 0f       	add	r19, r19
    36b2:	33 0f       	add	r19, r19
    36b4:	45 2d       	mov	r20, r5
    36b6:	58 a9       	ldd	r21, Y+48	; 0x30
    36b8:	0f 2e       	mov	r0, r31
    36ba:	fb e0       	ldi	r31, 0x0B	; 11
    36bc:	8f 2e       	mov	r8, r31
    36be:	f0 2d       	mov	r31, r0
    36c0:	91 2c       	mov	r9, r1
    36c2:	dc cf       	rjmp	.-72     	; 0x367c <f_open+0x104>
    36c4:	77 23       	and	r23, r23
    36c6:	0c f0       	brlt	.+2      	; 0x36ca <f_open+0x152>
    36c8:	13 c2       	rjmp	.+1062   	; 0x3af0 <f_open+0x578>
    36ca:	33 60       	ori	r19, 0x03	; 3
    36cc:	a7 2f       	mov	r26, r23
    36ce:	b0 e0       	ldi	r27, 0x00	; 0
    36d0:	a3 51       	subi	r26, 0x13	; 19
    36d2:	bf 4f       	sbci	r27, 0xFF	; 255
    36d4:	7c 91       	ld	r23, X
    36d6:	0c c2       	rjmp	.+1048   	; 0x3af0 <f_open+0x578>
    36d8:	8d 91       	ld	r24, X+
    36da:	88 23       	and	r24, r24
    36dc:	09 f4       	brne	.+2      	; 0x36e0 <f_open+0x168>
    36de:	10 c2       	rjmp	.+1056   	; 0x3b00 <f_open+0x588>
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	80 17       	cp	r24, r16
    36e4:	91 07       	cpc	r25, r17
    36e6:	c1 f7       	brne	.-16     	; 0x36d8 <f_open+0x160>
    36e8:	86 e0       	ldi	r24, 0x06	; 6
    36ea:	36 c2       	rjmp	.+1132   	; 0x3b58 <f_open+0x5e0>
    36ec:	32 60       	ori	r19, 0x02	; 2
    36ee:	06 c0       	rjmp	.+12     	; 0x36fc <f_open+0x184>
    36f0:	8f e9       	ldi	r24, 0x9F	; 159
    36f2:	87 0f       	add	r24, r23
    36f4:	8a 31       	cpi	r24, 0x1A	; 26
    36f6:	10 f4       	brcc	.+4      	; 0x36fc <f_open+0x184>
    36f8:	31 60       	ori	r19, 0x01	; 1
    36fa:	70 52       	subi	r23, 0x20	; 32
    36fc:	ad a1       	ldd	r26, Y+37	; 0x25
    36fe:	be a1       	ldd	r27, Y+38	; 0x26
    3700:	a4 0f       	add	r26, r20
    3702:	b5 1f       	adc	r27, r21
    3704:	7c 93       	st	X, r23
    3706:	4f 5f       	subi	r20, 0xFF	; 255
    3708:	5f 4f       	sbci	r21, 0xFF	; 255
    370a:	b8 cf       	rjmp	.-144    	; 0x367c <f_open+0x104>
    370c:	45 2b       	or	r20, r21
    370e:	09 f4       	brne	.+2      	; 0x3712 <f_open+0x19a>
    3710:	4a c2       	rjmp	.+1172   	; 0x3ba6 <f_open+0x62e>
    3712:	db 01       	movw	r26, r22
    3714:	9c 91       	ld	r25, X
    3716:	95 3e       	cpi	r25, 0xE5	; 229
    3718:	11 f4       	brne	.+4      	; 0x371e <f_open+0x1a6>
    371a:	e5 e0       	ldi	r30, 0x05	; 5
    371c:	ec 93       	st	X, r30
    371e:	f8 e0       	ldi	r31, 0x08	; 8
    3720:	8f 16       	cp	r8, r31
    3722:	91 04       	cpc	r9, r1
    3724:	11 f4       	brne	.+4      	; 0x372a <f_open+0x1b2>
    3726:	ff 0c       	add	r15, r15
    3728:	ff 0c       	add	r15, r15
    372a:	9f 2d       	mov	r25, r15
    372c:	93 70       	andi	r25, 0x03	; 3
    372e:	91 30       	cpi	r25, 0x01	; 1
    3730:	09 f4       	brne	.+2      	; 0x3734 <f_open+0x1bc>
    3732:	80 61       	ori	r24, 0x10	; 16
    3734:	9f 2d       	mov	r25, r15
    3736:	9c 70       	andi	r25, 0x0C	; 12
    3738:	94 30       	cpi	r25, 0x04	; 4
    373a:	09 f4       	brne	.+2      	; 0x373e <f_open+0x1c6>
    373c:	88 60       	ori	r24, 0x08	; 8
    373e:	db 01       	movw	r26, r22
    3740:	1b 96       	adiw	r26, 0x0b	; 11
    3742:	8c 93       	st	X, r24
    3744:	6a 2d       	mov	r22, r10
    3746:	77 2d       	mov	r23, r7
    3748:	ce 01       	movw	r24, r28
    374a:	01 96       	adiw	r24, 0x01	; 1
    374c:	0e 94 48 16 	call	0x2c90	; 0x2c90 <dir_sdi>
    3750:	81 11       	cpse	r24, r1
    3752:	f3 c1       	rjmp	.+998    	; 0x3b3a <f_open+0x5c2>
    3754:	4f 85       	ldd	r20, Y+15	; 0x0f
    3756:	58 89       	ldd	r21, Y+16	; 0x10
    3758:	69 89       	ldd	r22, Y+17	; 0x11
    375a:	7a 89       	ldd	r23, Y+18	; 0x12
    375c:	89 81       	ldd	r24, Y+1	; 0x01
    375e:	9a 81       	ldd	r25, Y+2	; 0x02
    3760:	0e 94 af 11 	call	0x235e	; 0x235e <move_window>
    3764:	81 11       	cpse	r24, r1
    3766:	e9 c1       	rjmp	.+978    	; 0x3b3a <f_open+0x5c2>
    3768:	eb 88       	ldd	r14, Y+19	; 0x13
    376a:	fc 88       	ldd	r15, Y+20	; 0x14
    376c:	f7 01       	movw	r30, r14
    376e:	80 81       	ld	r24, Z
    3770:	88 23       	and	r24, r24
    3772:	d9 f0       	breq	.+54     	; 0x37aa <f_open+0x232>
    3774:	63 85       	ldd	r22, Z+11	; 0x0b
    3776:	63 fd       	sbrc	r22, 3
    3778:	0f c0       	rjmp	.+30     	; 0x3798 <f_open+0x220>
    377a:	4d 89       	ldd	r20, Y+21	; 0x15
    377c:	5e 89       	ldd	r21, Y+22	; 0x16
    377e:	da 01       	movw	r26, r20
    3780:	97 01       	movw	r18, r14
    3782:	25 5f       	subi	r18, 0xF5	; 245
    3784:	3f 4f       	sbci	r19, 0xFF	; 255
    3786:	04 c0       	rjmp	.+8      	; 0x3790 <f_open+0x218>
    3788:	2e 17       	cp	r18, r30
    378a:	3f 07       	cpc	r19, r31
    378c:	09 f4       	brne	.+2      	; 0x3790 <f_open+0x218>
    378e:	d0 c1       	rjmp	.+928    	; 0x3b30 <f_open+0x5b8>
    3790:	91 91       	ld	r25, Z+
    3792:	8d 91       	ld	r24, X+
    3794:	98 17       	cp	r25, r24
    3796:	c1 f3       	breq	.-16     	; 0x3788 <f_open+0x210>
    3798:	6a 2d       	mov	r22, r10
    379a:	77 2d       	mov	r23, r7
    379c:	ce 01       	movw	r24, r28
    379e:	01 96       	adiw	r24, 0x01	; 1
    37a0:	0e 94 30 19 	call	0x3260	; 0x3260 <dir_next>
    37a4:	88 23       	and	r24, r24
    37a6:	b1 f2       	breq	.-84     	; 0x3754 <f_open+0x1dc>
    37a8:	c8 c1       	rjmp	.+912    	; 0x3b3a <f_open+0x5c2>
    37aa:	ed 89       	ldd	r30, Y+21	; 0x15
    37ac:	fe 89       	ldd	r31, Y+22	; 0x16
    37ae:	93 85       	ldd	r25, Z+11	; 0x0b
    37b0:	92 fd       	sbrc	r25, 2
    37b2:	cd c1       	rjmp	.+922    	; 0x3b4e <f_open+0x5d6>
    37b4:	85 e0       	ldi	r24, 0x05	; 5
    37b6:	d0 c1       	rjmp	.+928    	; 0x3b58 <f_open+0x5e0>
    37b8:	64 ff       	sbrs	r22, 4
    37ba:	cb c1       	rjmp	.+918    	; 0x3b52 <f_open+0x5da>
    37bc:	d7 01       	movw	r26, r14
    37be:	5a 96       	adiw	r26, 0x1a	; 26
    37c0:	8d 91       	ld	r24, X+
    37c2:	9c 91       	ld	r25, X
    37c4:	5b 97       	sbiw	r26, 0x1b	; 27
    37c6:	a0 e0       	ldi	r26, 0x00	; 0
    37c8:	b0 e0       	ldi	r27, 0x00	; 0
    37ca:	e9 81       	ldd	r30, Y+1	; 0x01
    37cc:	fa 81       	ldd	r31, Y+2	; 0x02
    37ce:	20 81       	ld	r18, Z
    37d0:	23 30       	cpi	r18, 0x03	; 3
    37d2:	61 f4       	brne	.+24     	; 0x37ec <f_open+0x274>
    37d4:	f7 01       	movw	r30, r14
    37d6:	44 89       	ldd	r20, Z+20	; 0x14
    37d8:	55 89       	ldd	r21, Z+21	; 0x15
    37da:	60 e0       	ldi	r22, 0x00	; 0
    37dc:	70 e0       	ldi	r23, 0x00	; 0
    37de:	ba 01       	movw	r22, r20
    37e0:	55 27       	eor	r21, r21
    37e2:	44 27       	eor	r20, r20
    37e4:	84 2b       	or	r24, r20
    37e6:	95 2b       	or	r25, r21
    37e8:	a6 2b       	or	r26, r22
    37ea:	b7 2b       	or	r27, r23
    37ec:	8f 83       	std	Y+7, r24	; 0x07
    37ee:	98 87       	std	Y+8, r25	; 0x08
    37f0:	a9 87       	std	Y+9, r26	; 0x09
    37f2:	ba 87       	std	Y+10, r27	; 0x0a
    37f4:	22 cf       	rjmp	.-444    	; 0x363a <f_open+0xc2>
    37f6:	88 23       	and	r24, r24
    37f8:	09 f4       	brne	.+2      	; 0x37fc <f_open+0x284>
    37fa:	55 c0       	rjmp	.+170    	; 0x38a6 <f_open+0x32e>
    37fc:	84 30       	cpi	r24, 0x04	; 4
    37fe:	09 f0       	breq	.+2      	; 0x3802 <f_open+0x28a>
    3800:	4a c0       	rjmp	.+148    	; 0x3896 <f_open+0x31e>
    3802:	60 e0       	ldi	r22, 0x00	; 0
    3804:	70 e0       	ldi	r23, 0x00	; 0
    3806:	ce 01       	movw	r24, r28
    3808:	01 96       	adiw	r24, 0x01	; 1
    380a:	0e 94 48 16 	call	0x2c90	; 0x2c90 <dir_sdi>
    380e:	81 11       	cpse	r24, r1
    3810:	19 c0       	rjmp	.+50     	; 0x3844 <f_open+0x2cc>
    3812:	4f 85       	ldd	r20, Y+15	; 0x0f
    3814:	58 89       	ldd	r21, Y+16	; 0x10
    3816:	69 89       	ldd	r22, Y+17	; 0x11
    3818:	7a 89       	ldd	r23, Y+18	; 0x12
    381a:	89 81       	ldd	r24, Y+1	; 0x01
    381c:	9a 81       	ldd	r25, Y+2	; 0x02
    381e:	0e 94 af 11 	call	0x235e	; 0x235e <move_window>
    3822:	81 11       	cpse	r24, r1
    3824:	0f c0       	rjmp	.+30     	; 0x3844 <f_open+0x2cc>
    3826:	eb 89       	ldd	r30, Y+19	; 0x13
    3828:	fc 89       	ldd	r31, Y+20	; 0x14
    382a:	80 81       	ld	r24, Z
    382c:	85 3e       	cpi	r24, 0xE5	; 229
    382e:	79 f0       	breq	.+30     	; 0x384e <f_open+0x2d6>
    3830:	88 23       	and	r24, r24
    3832:	69 f0       	breq	.+26     	; 0x384e <f_open+0x2d6>
    3834:	61 e0       	ldi	r22, 0x01	; 1
    3836:	70 e0       	ldi	r23, 0x00	; 0
    3838:	ce 01       	movw	r24, r28
    383a:	01 96       	adiw	r24, 0x01	; 1
    383c:	0e 94 30 19 	call	0x3260	; 0x3260 <dir_next>
    3840:	88 23       	and	r24, r24
    3842:	39 f3       	breq	.-50     	; 0x3812 <f_open+0x29a>
    3844:	84 30       	cpi	r24, 0x04	; 4
    3846:	09 f4       	brne	.+2      	; 0x384a <f_open+0x2d2>
    3848:	b2 c1       	rjmp	.+868    	; 0x3bae <f_open+0x636>
    384a:	81 11       	cpse	r24, r1
    384c:	b3 c1       	rjmp	.+870    	; 0x3bb4 <f_open+0x63c>
    384e:	4f 85       	ldd	r20, Y+15	; 0x0f
    3850:	58 89       	ldd	r21, Y+16	; 0x10
    3852:	69 89       	ldd	r22, Y+17	; 0x11
    3854:	7a 89       	ldd	r23, Y+18	; 0x12
    3856:	89 81       	ldd	r24, Y+1	; 0x01
    3858:	9a 81       	ldd	r25, Y+2	; 0x02
    385a:	0e 94 af 11 	call	0x235e	; 0x235e <move_window>
    385e:	81 11       	cpse	r24, r1
    3860:	a9 c1       	rjmp	.+850    	; 0x3bb4 <f_open+0x63c>
    3862:	eb 89       	ldd	r30, Y+19	; 0x13
    3864:	fc 89       	ldd	r31, Y+20	; 0x14
    3866:	cf 01       	movw	r24, r30
    3868:	80 96       	adiw	r24, 0x20	; 32
    386a:	11 92       	st	Z+, r1
    386c:	e8 17       	cp	r30, r24
    386e:	f9 07       	cpc	r31, r25
    3870:	e1 f7       	brne	.-8      	; 0x386a <f_open+0x2f2>
    3872:	6d 89       	ldd	r22, Y+21	; 0x15
    3874:	7e 89       	ldd	r23, Y+22	; 0x16
    3876:	4b e0       	ldi	r20, 0x0B	; 11
    3878:	50 e0       	ldi	r21, 0x00	; 0
    387a:	8b 89       	ldd	r24, Y+19	; 0x13
    387c:	9c 89       	ldd	r25, Y+20	; 0x14
    387e:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <mem_cpy>
    3882:	e9 81       	ldd	r30, Y+1	; 0x01
    3884:	fa 81       	ldd	r31, Y+2	; 0x02
    3886:	81 e0       	ldi	r24, 0x01	; 1
    3888:	84 83       	std	Z+4, r24	; 0x04
    388a:	ff a5       	ldd	r31, Y+47	; 0x2f
    388c:	f8 60       	ori	r31, 0x08	; 8
    388e:	ff a7       	std	Y+47, r31	; 0x2f
    3890:	eb 88       	ldd	r14, Y+19	; 0x13
    3892:	fc 88       	ldd	r15, Y+20	; 0x14
    3894:	11 c0       	rjmp	.+34     	; 0x38b8 <f_open+0x340>
    3896:	2f a5       	ldd	r18, Y+47	; 0x2f
    3898:	28 60       	ori	r18, 0x08	; 8
    389a:	2f a7       	std	Y+47, r18	; 0x2f
    389c:	eb 88       	ldd	r14, Y+19	; 0x13
    389e:	fc 88       	ldd	r15, Y+20	; 0x14
    38a0:	88 23       	and	r24, r24
    38a2:	51 f0       	breq	.+20     	; 0x38b8 <f_open+0x340>
    38a4:	94 c1       	rjmp	.+808    	; 0x3bce <f_open+0x656>
    38a6:	d7 01       	movw	r26, r14
    38a8:	1b 96       	adiw	r26, 0x0b	; 11
    38aa:	8c 91       	ld	r24, X
    38ac:	81 71       	andi	r24, 0x11	; 17
    38ae:	09 f0       	breq	.+2      	; 0x38b2 <f_open+0x33a>
    38b0:	87 c1       	rjmp	.+782    	; 0x3bc0 <f_open+0x648>
    38b2:	b9 a5       	ldd	r27, Y+41	; 0x29
    38b4:	b2 fd       	sbrc	r27, 2
    38b6:	86 c1       	rjmp	.+780    	; 0x3bc4 <f_open+0x64c>
    38b8:	ef a5       	ldd	r30, Y+47	; 0x2f
    38ba:	e3 ff       	sbrs	r30, 3
    38bc:	c8 c0       	rjmp	.+400    	; 0x3a4e <f_open+0x4d6>
    38be:	80 e0       	ldi	r24, 0x00	; 0
    38c0:	90 e0       	ldi	r25, 0x00	; 0
    38c2:	a1 e4       	ldi	r26, 0x41	; 65
    38c4:	b6 e4       	ldi	r27, 0x46	; 70
    38c6:	f7 01       	movw	r30, r14
    38c8:	86 87       	std	Z+14, r24	; 0x0e
    38ca:	97 87       	std	Z+15, r25	; 0x0f
    38cc:	a0 8b       	std	Z+16, r26	; 0x10
    38ce:	b1 8b       	std	Z+17, r27	; 0x11
    38d0:	13 86       	std	Z+11, r1	; 0x0b
    38d2:	d7 01       	movw	r26, r14
    38d4:	14 8e       	std	Z+28, r1	; 0x1c
    38d6:	15 8e       	std	Z+29, r1	; 0x1d
    38d8:	16 8e       	std	Z+30, r1	; 0x1e
    38da:	17 8e       	std	Z+31, r1	; 0x1f
    38dc:	c9 80       	ldd	r12, Y+1	; 0x01
    38de:	da 80       	ldd	r13, Y+2	; 0x02
    38e0:	82 8c       	ldd	r8, Z+26	; 0x1a
    38e2:	93 8c       	ldd	r9, Z+27	; 0x1b
    38e4:	a1 2c       	mov	r10, r1
    38e6:	b1 2c       	mov	r11, r1
    38e8:	f6 01       	movw	r30, r12
    38ea:	80 81       	ld	r24, Z
    38ec:	83 30       	cpi	r24, 0x03	; 3
    38ee:	69 f4       	brne	.+26     	; 0x390a <f_open+0x392>
    38f0:	54 96       	adiw	r26, 0x14	; 20
    38f2:	8d 91       	ld	r24, X+
    38f4:	9c 91       	ld	r25, X
    38f6:	55 97       	sbiw	r26, 0x15	; 21
    38f8:	a0 e0       	ldi	r26, 0x00	; 0
    38fa:	b0 e0       	ldi	r27, 0x00	; 0
    38fc:	dc 01       	movw	r26, r24
    38fe:	99 27       	eor	r25, r25
    3900:	88 27       	eor	r24, r24
    3902:	88 2a       	or	r8, r24
    3904:	99 2a       	or	r9, r25
    3906:	aa 2a       	or	r10, r26
    3908:	bb 2a       	or	r11, r27
    390a:	d7 01       	movw	r26, r14
    390c:	5b 96       	adiw	r26, 0x1b	; 27
    390e:	1c 92       	st	X, r1
    3910:	1e 92       	st	-X, r1
    3912:	5a 97       	sbiw	r26, 0x1a	; 26
    3914:	55 96       	adiw	r26, 0x15	; 21
    3916:	1c 92       	st	X, r1
    3918:	1e 92       	st	-X, r1
    391a:	54 97       	sbiw	r26, 0x14	; 20
    391c:	81 e0       	ldi	r24, 0x01	; 1
    391e:	f6 01       	movw	r30, r12
    3920:	84 83       	std	Z+4, r24	; 0x04
    3922:	81 14       	cp	r8, r1
    3924:	91 04       	cpc	r9, r1
    3926:	a1 04       	cpc	r10, r1
    3928:	b1 04       	cpc	r11, r1
    392a:	09 f4       	brne	.+2      	; 0x392e <f_open+0x3b6>
    392c:	8d c0       	rjmp	.+282    	; 0x3a48 <f_open+0x4d0>
    392e:	22 a5       	ldd	r18, Z+42	; 0x2a
    3930:	33 a5       	ldd	r19, Z+43	; 0x2b
    3932:	44 a5       	ldd	r20, Z+44	; 0x2c
    3934:	55 a5       	ldd	r21, Z+45	; 0x2d
    3936:	29 a7       	std	Y+41, r18	; 0x29
    3938:	3a a7       	std	Y+42, r19	; 0x2a
    393a:	4b a7       	std	Y+43, r20	; 0x2b
    393c:	5c a7       	std	Y+44, r21	; 0x2c
    393e:	b2 e0       	ldi	r27, 0x02	; 2
    3940:	8b 16       	cp	r8, r27
    3942:	91 04       	cpc	r9, r1
    3944:	a1 04       	cpc	r10, r1
    3946:	b1 04       	cpc	r11, r1
    3948:	08 f4       	brcc	.+2      	; 0x394c <f_open+0x3d4>
    394a:	1e c1       	rjmp	.+572    	; 0x3b88 <f_open+0x610>
    394c:	82 89       	ldd	r24, Z+18	; 0x12
    394e:	93 89       	ldd	r25, Z+19	; 0x13
    3950:	a4 89       	ldd	r26, Z+20	; 0x14
    3952:	b5 89       	ldd	r27, Z+21	; 0x15
    3954:	88 16       	cp	r8, r24
    3956:	99 06       	cpc	r9, r25
    3958:	aa 06       	cpc	r10, r26
    395a:	bb 06       	cpc	r11, r27
    395c:	08 f0       	brcs	.+2      	; 0x3960 <f_open+0x3e8>
    395e:	16 c1       	rjmp	.+556    	; 0x3b8c <f_open+0x614>
    3960:	8d a2       	std	Y+37, r8	; 0x25
    3962:	9e a2       	std	Y+38, r9	; 0x26
    3964:	af a2       	std	Y+39, r10	; 0x27
    3966:	b8 a6       	std	Y+40, r11	; 0x28
    3968:	4d a1       	ldd	r20, Y+37	; 0x25
    396a:	5e a1       	ldd	r21, Y+38	; 0x26
    396c:	6f a1       	ldd	r22, Y+39	; 0x27
    396e:	78 a5       	ldd	r23, Y+40	; 0x28
    3970:	c6 01       	movw	r24, r12
    3972:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <get_fat>
    3976:	2b 01       	movw	r4, r22
    3978:	3c 01       	movw	r6, r24
    397a:	61 15       	cp	r22, r1
    397c:	71 05       	cpc	r23, r1
    397e:	81 05       	cpc	r24, r1
    3980:	91 05       	cpc	r25, r1
    3982:	e9 f1       	breq	.+122    	; 0x39fe <f_open+0x486>
    3984:	61 30       	cpi	r22, 0x01	; 1
    3986:	71 05       	cpc	r23, r1
    3988:	81 05       	cpc	r24, r1
    398a:	91 05       	cpc	r25, r1
    398c:	09 f4       	brne	.+2      	; 0x3990 <f_open+0x418>
    398e:	00 c1       	rjmp	.+512    	; 0x3b90 <f_open+0x618>
    3990:	6f 3f       	cpi	r22, 0xFF	; 255
    3992:	7f 4f       	sbci	r23, 0xFF	; 255
    3994:	8f 4f       	sbci	r24, 0xFF	; 255
    3996:	9f 4f       	sbci	r25, 0xFF	; 255
    3998:	09 f4       	brne	.+2      	; 0x399c <f_open+0x424>
    399a:	fc c0       	rjmp	.+504    	; 0x3b94 <f_open+0x61c>
    399c:	00 e0       	ldi	r16, 0x00	; 0
    399e:	10 e0       	ldi	r17, 0x00	; 0
    39a0:	98 01       	movw	r18, r16
    39a2:	4d a1       	ldd	r20, Y+37	; 0x25
    39a4:	5e a1       	ldd	r21, Y+38	; 0x26
    39a6:	6f a1       	ldd	r22, Y+39	; 0x27
    39a8:	78 a5       	ldd	r23, Y+40	; 0x28
    39aa:	c6 01       	movw	r24, r12
    39ac:	0e 94 04 17 	call	0x2e08	; 0x2e08 <put_fat>
    39b0:	81 11       	cpse	r24, r1
    39b2:	f1 c0       	rjmp	.+482    	; 0x3b96 <f_open+0x61e>
    39b4:	f6 01       	movw	r30, r12
    39b6:	86 85       	ldd	r24, Z+14	; 0x0e
    39b8:	97 85       	ldd	r25, Z+15	; 0x0f
    39ba:	a0 89       	ldd	r26, Z+16	; 0x10
    39bc:	b1 89       	ldd	r27, Z+17	; 0x11
    39be:	8f 3f       	cpi	r24, 0xFF	; 255
    39c0:	ff ef       	ldi	r31, 0xFF	; 255
    39c2:	9f 07       	cpc	r25, r31
    39c4:	af 07       	cpc	r26, r31
    39c6:	bf 07       	cpc	r27, r31
    39c8:	59 f0       	breq	.+22     	; 0x39e0 <f_open+0x468>
    39ca:	01 96       	adiw	r24, 0x01	; 1
    39cc:	a1 1d       	adc	r26, r1
    39ce:	b1 1d       	adc	r27, r1
    39d0:	f6 01       	movw	r30, r12
    39d2:	86 87       	std	Z+14, r24	; 0x0e
    39d4:	97 87       	std	Z+15, r25	; 0x0f
    39d6:	a0 8b       	std	Z+16, r26	; 0x10
    39d8:	b1 8b       	std	Z+17, r27	; 0x11
    39da:	85 81       	ldd	r24, Z+5	; 0x05
    39dc:	81 60       	ori	r24, 0x01	; 1
    39de:	85 83       	std	Z+5, r24	; 0x05
    39e0:	4d a2       	std	Y+37, r4	; 0x25
    39e2:	5e a2       	std	Y+38, r5	; 0x26
    39e4:	6f a2       	std	Y+39, r6	; 0x27
    39e6:	78 a6       	std	Y+40, r7	; 0x28
    39e8:	f6 01       	movw	r30, r12
    39ea:	82 89       	ldd	r24, Z+18	; 0x12
    39ec:	93 89       	ldd	r25, Z+19	; 0x13
    39ee:	a4 89       	ldd	r26, Z+20	; 0x14
    39f0:	b5 89       	ldd	r27, Z+21	; 0x15
    39f2:	48 16       	cp	r4, r24
    39f4:	59 06       	cpc	r5, r25
    39f6:	6a 06       	cpc	r6, r26
    39f8:	7b 06       	cpc	r7, r27
    39fa:	08 f4       	brcc	.+2      	; 0x39fe <f_open+0x486>
    39fc:	b5 cf       	rjmp	.-150    	; 0x3968 <f_open+0x3f0>
    39fe:	89 81       	ldd	r24, Y+1	; 0x01
    3a00:	9a 81       	ldd	r25, Y+2	; 0x02
    3a02:	f1 e0       	ldi	r31, 0x01	; 1
    3a04:	8f 1a       	sub	r8, r31
    3a06:	91 08       	sbc	r9, r1
    3a08:	a1 08       	sbc	r10, r1
    3a0a:	b1 08       	sbc	r11, r1
    3a0c:	dc 01       	movw	r26, r24
    3a0e:	1a 96       	adiw	r26, 0x0a	; 10
    3a10:	8d 92       	st	X+, r8
    3a12:	9d 92       	st	X+, r9
    3a14:	ad 92       	st	X+, r10
    3a16:	bc 92       	st	X, r11
    3a18:	1d 97       	sbiw	r26, 0x0d	; 13
    3a1a:	49 a5       	ldd	r20, Y+41	; 0x29
    3a1c:	5a a5       	ldd	r21, Y+42	; 0x2a
    3a1e:	6b a5       	ldd	r22, Y+43	; 0x2b
    3a20:	7c a5       	ldd	r23, Y+44	; 0x2c
    3a22:	0e 94 af 11 	call	0x235e	; 0x235e <move_window>
    3a26:	88 23       	and	r24, r24
    3a28:	79 f0       	breq	.+30     	; 0x3a48 <f_open+0x4d0>
    3a2a:	d1 c0       	rjmp	.+418    	; 0x3bce <f_open+0x656>
    3a2c:	81 11       	cpse	r24, r1
    3a2e:	cf c0       	rjmp	.+414    	; 0x3bce <f_open+0x656>
    3a30:	f7 01       	movw	r30, r14
    3a32:	83 85       	ldd	r24, Z+11	; 0x0b
    3a34:	84 fd       	sbrc	r24, 4
    3a36:	c8 c0       	rjmp	.+400    	; 0x3bc8 <f_open+0x650>
    3a38:	f9 a5       	ldd	r31, Y+41	; 0x29
    3a3a:	f1 ff       	sbrs	r31, 1
    3a3c:	02 c0       	rjmp	.+4      	; 0x3a42 <f_open+0x4ca>
    3a3e:	80 fd       	sbrc	r24, 0
    3a40:	c5 c0       	rjmp	.+394    	; 0x3bcc <f_open+0x654>
    3a42:	29 a5       	ldd	r18, Y+41	; 0x29
    3a44:	23 ff       	sbrs	r18, 3
    3a46:	03 c0       	rjmp	.+6      	; 0x3a4e <f_open+0x4d6>
    3a48:	3f a5       	ldd	r19, Y+47	; 0x2f
    3a4a:	30 62       	ori	r19, 0x20	; 32
    3a4c:	3f a7       	std	Y+47, r19	; 0x2f
    3a4e:	e9 81       	ldd	r30, Y+1	; 0x01
    3a50:	fa 81       	ldd	r31, Y+2	; 0x02
    3a52:	82 a5       	ldd	r24, Z+42	; 0x2a
    3a54:	93 a5       	ldd	r25, Z+43	; 0x2b
    3a56:	a4 a5       	ldd	r26, Z+44	; 0x2c
    3a58:	b5 a5       	ldd	r27, Z+45	; 0x2d
    3a5a:	f1 01       	movw	r30, r2
    3a5c:	82 8f       	std	Z+26, r24	; 0x1a
    3a5e:	93 8f       	std	Z+27, r25	; 0x1b
    3a60:	a4 8f       	std	Z+28, r26	; 0x1c
    3a62:	b5 8f       	std	Z+29, r27	; 0x1d
    3a64:	f7 8e       	std	Z+31, r15	; 0x1f
    3a66:	e6 8e       	std	Z+30, r14	; 0x1e
    3a68:	ef a5       	ldd	r30, Y+47	; 0x2f
    3a6a:	d1 01       	movw	r26, r2
    3a6c:	14 96       	adiw	r26, 0x04	; 4
    3a6e:	ec 93       	st	X, r30
    3a70:	14 97       	sbiw	r26, 0x04	; 4
    3a72:	15 96       	adiw	r26, 0x05	; 5
    3a74:	1c 92       	st	X, r1
    3a76:	09 81       	ldd	r16, Y+1	; 0x01
    3a78:	1a 81       	ldd	r17, Y+2	; 0x02
    3a7a:	d7 01       	movw	r26, r14
    3a7c:	5a 96       	adiw	r26, 0x1a	; 26
    3a7e:	8d 91       	ld	r24, X+
    3a80:	9c 91       	ld	r25, X
    3a82:	5b 97       	sbiw	r26, 0x1b	; 27
    3a84:	a0 e0       	ldi	r26, 0x00	; 0
    3a86:	b0 e0       	ldi	r27, 0x00	; 0
    3a88:	f8 01       	movw	r30, r16
    3a8a:	20 81       	ld	r18, Z
    3a8c:	23 30       	cpi	r18, 0x03	; 3
    3a8e:	61 f4       	brne	.+24     	; 0x3aa8 <f_open+0x530>
    3a90:	f7 01       	movw	r30, r14
    3a92:	44 89       	ldd	r20, Z+20	; 0x14
    3a94:	55 89       	ldd	r21, Z+21	; 0x15
    3a96:	60 e0       	ldi	r22, 0x00	; 0
    3a98:	70 e0       	ldi	r23, 0x00	; 0
    3a9a:	ba 01       	movw	r22, r20
    3a9c:	55 27       	eor	r21, r21
    3a9e:	44 27       	eor	r20, r20
    3aa0:	84 2b       	or	r24, r20
    3aa2:	95 2b       	or	r25, r21
    3aa4:	a6 2b       	or	r26, r22
    3aa6:	b7 2b       	or	r27, r23
    3aa8:	f1 01       	movw	r30, r2
    3aaa:	86 87       	std	Z+14, r24	; 0x0e
    3aac:	97 87       	std	Z+15, r25	; 0x0f
    3aae:	a0 8b       	std	Z+16, r26	; 0x10
    3ab0:	b1 8b       	std	Z+17, r27	; 0x11
    3ab2:	f7 01       	movw	r30, r14
    3ab4:	84 8d       	ldd	r24, Z+28	; 0x1c
    3ab6:	95 8d       	ldd	r25, Z+29	; 0x1d
    3ab8:	a6 8d       	ldd	r26, Z+30	; 0x1e
    3aba:	b7 8d       	ldd	r27, Z+31	; 0x1f
    3abc:	f1 01       	movw	r30, r2
    3abe:	82 87       	std	Z+10, r24	; 0x0a
    3ac0:	93 87       	std	Z+11, r25	; 0x0b
    3ac2:	a4 87       	std	Z+12, r26	; 0x0c
    3ac4:	b5 87       	std	Z+13, r27	; 0x0d
    3ac6:	16 82       	std	Z+6, r1	; 0x06
    3ac8:	17 82       	std	Z+7, r1	; 0x07
    3aca:	10 86       	std	Z+8, r1	; 0x08
    3acc:	11 86       	std	Z+9, r1	; 0x09
    3ace:	16 8a       	std	Z+22, r1	; 0x16
    3ad0:	17 8a       	std	Z+23, r1	; 0x17
    3ad2:	10 8e       	std	Z+24, r1	; 0x18
    3ad4:	11 8e       	std	Z+25, r1	; 0x19
    3ad6:	11 83       	std	Z+1, r17	; 0x01
    3ad8:	00 83       	st	Z, r16
    3ada:	d8 01       	movw	r26, r16
    3adc:	16 96       	adiw	r26, 0x06	; 6
    3ade:	8d 91       	ld	r24, X+
    3ae0:	9c 91       	ld	r25, X
    3ae2:	17 97       	sbiw	r26, 0x07	; 7
    3ae4:	93 83       	std	Z+3, r25	; 0x03
    3ae6:	82 83       	std	Z+2, r24	; 0x02
    3ae8:	80 e0       	ldi	r24, 0x00	; 0
    3aea:	71 c0       	rjmp	.+226    	; 0x3bce <f_open+0x656>
    3aec:	89 e0       	ldi	r24, 0x09	; 9
    3aee:	6f c0       	rjmp	.+222    	; 0x3bce <f_open+0x656>
    3af0:	07 2f       	mov	r16, r23
    3af2:	10 e0       	ldi	r17, 0x00	; 0
    3af4:	02 32       	cpi	r16, 0x22	; 34
    3af6:	11 05       	cpc	r17, r1
    3af8:	71 f1       	breq	.+92     	; 0x3b56 <f_open+0x5de>
    3afa:	af e5       	ldi	r26, 0x5F	; 95
    3afc:	b1 e0       	ldi	r27, 0x01	; 1
    3afe:	ec cd       	rjmp	.-1064   	; 0x36d8 <f_open+0x160>
    3b00:	8f eb       	ldi	r24, 0xBF	; 191
    3b02:	87 0f       	add	r24, r23
    3b04:	8a 31       	cpi	r24, 0x1A	; 26
    3b06:	08 f4       	brcc	.+2      	; 0x3b0a <f_open+0x592>
    3b08:	f1 cd       	rjmp	.-1054   	; 0x36ec <f_open+0x174>
    3b0a:	f2 cd       	rjmp	.-1052   	; 0x36f0 <f_open+0x178>
    3b0c:	6d a1       	ldd	r22, Y+37	; 0x25
    3b0e:	7e a1       	ldd	r23, Y+38	; 0x26
    3b10:	f3 2e       	mov	r15, r19
    3b12:	2d a5       	ldd	r18, Y+45	; 0x2d
    3b14:	3e a5       	ldd	r19, Y+46	; 0x2e
    3b16:	c2 0e       	add	r12, r18
    3b18:	d3 1e       	adc	r13, r19
    3b1a:	84 e0       	ldi	r24, 0x04	; 4
    3b1c:	f7 cd       	rjmp	.-1042   	; 0x370c <f_open+0x194>
    3b1e:	6d a1       	ldd	r22, Y+37	; 0x25
    3b20:	7e a1       	ldd	r23, Y+38	; 0x26
    3b22:	f3 2e       	mov	r15, r19
    3b24:	2d a5       	ldd	r18, Y+45	; 0x2d
    3b26:	3e a5       	ldd	r19, Y+46	; 0x2e
    3b28:	c2 0e       	add	r12, r18
    3b2a:	d3 1e       	adc	r13, r19
    3b2c:	80 e0       	ldi	r24, 0x00	; 0
    3b2e:	ee cd       	rjmp	.-1060   	; 0x370c <f_open+0x194>
    3b30:	fa 01       	movw	r30, r20
    3b32:	83 85       	ldd	r24, Z+11	; 0x0b
    3b34:	82 ff       	sbrs	r24, 2
    3b36:	40 ce       	rjmp	.-896    	; 0x37b8 <f_open+0x240>
    3b38:	06 c0       	rjmp	.+12     	; 0x3b46 <f_open+0x5ce>
    3b3a:	ed 89       	ldd	r30, Y+21	; 0x15
    3b3c:	fe 89       	ldd	r31, Y+22	; 0x16
    3b3e:	93 85       	ldd	r25, Z+11	; 0x0b
    3b40:	84 30       	cpi	r24, 0x04	; 4
    3b42:	51 f4       	brne	.+20     	; 0x3b58 <f_open+0x5e0>
    3b44:	35 ce       	rjmp	.-918    	; 0x37b0 <f_open+0x238>
    3b46:	e1 14       	cp	r14, r1
    3b48:	f1 04       	cpc	r15, r1
    3b4a:	c9 f4       	brne	.+50     	; 0x3b7e <f_open+0x606>
    3b4c:	0c c0       	rjmp	.+24     	; 0x3b66 <f_open+0x5ee>
    3b4e:	84 e0       	ldi	r24, 0x04	; 4
    3b50:	03 c0       	rjmp	.+6      	; 0x3b58 <f_open+0x5e0>
    3b52:	85 e0       	ldi	r24, 0x05	; 5
    3b54:	01 c0       	rjmp	.+2      	; 0x3b58 <f_open+0x5e0>
    3b56:	86 e0       	ldi	r24, 0x06	; 6
    3b58:	eb 88       	ldd	r14, Y+19	; 0x13
    3b5a:	fc 88       	ldd	r15, Y+20	; 0x14
    3b5c:	99 a5       	ldd	r25, Y+41	; 0x29
    3b5e:	9c 71       	andi	r25, 0x1C	; 28
    3b60:	09 f0       	breq	.+2      	; 0x3b64 <f_open+0x5ec>
    3b62:	49 ce       	rjmp	.-878    	; 0x37f6 <f_open+0x27e>
    3b64:	63 cf       	rjmp	.-314    	; 0x3a2c <f_open+0x4b4>
    3b66:	09 a5       	ldd	r16, Y+41	; 0x29
    3b68:	0c 71       	andi	r16, 0x1C	; 28
    3b6a:	19 f5       	brne	.+70     	; 0x3bb2 <f_open+0x63a>
    3b6c:	e1 2c       	mov	r14, r1
    3b6e:	f1 2c       	mov	r15, r1
    3b70:	86 e0       	ldi	r24, 0x06	; 6
    3b72:	15 c0       	rjmp	.+42     	; 0x3b9e <f_open+0x626>
    3b74:	09 a5       	ldd	r16, Y+41	; 0x29
    3b76:	0c 71       	andi	r16, 0x1C	; 28
    3b78:	09 f0       	breq	.+2      	; 0x3b7c <f_open+0x604>
    3b7a:	40 ce       	rjmp	.-896    	; 0x37fc <f_open+0x284>
    3b7c:	10 c0       	rjmp	.+32     	; 0x3b9e <f_open+0x626>
    3b7e:	89 a5       	ldd	r24, Y+41	; 0x29
    3b80:	8c 71       	andi	r24, 0x1C	; 28
    3b82:	09 f0       	breq	.+2      	; 0x3b86 <f_open+0x60e>
    3b84:	90 ce       	rjmp	.-736    	; 0x38a6 <f_open+0x32e>
    3b86:	54 cf       	rjmp	.-344    	; 0x3a30 <f_open+0x4b8>
    3b88:	82 e0       	ldi	r24, 0x02	; 2
    3b8a:	05 c0       	rjmp	.+10     	; 0x3b96 <f_open+0x61e>
    3b8c:	82 e0       	ldi	r24, 0x02	; 2
    3b8e:	03 c0       	rjmp	.+6      	; 0x3b96 <f_open+0x61e>
    3b90:	82 e0       	ldi	r24, 0x02	; 2
    3b92:	01 c0       	rjmp	.+2      	; 0x3b96 <f_open+0x61e>
    3b94:	81 e0       	ldi	r24, 0x01	; 1
    3b96:	88 23       	and	r24, r24
    3b98:	09 f4       	brne	.+2      	; 0x3b9c <f_open+0x624>
    3b9a:	56 cf       	rjmp	.-340    	; 0x3a48 <f_open+0x4d0>
    3b9c:	18 c0       	rjmp	.+48     	; 0x3bce <f_open+0x656>
    3b9e:	88 23       	and	r24, r24
    3ba0:	09 f4       	brne	.+2      	; 0x3ba4 <f_open+0x62c>
    3ba2:	62 cf       	rjmp	.-316    	; 0x3a68 <f_open+0x4f0>
    3ba4:	14 c0       	rjmp	.+40     	; 0x3bce <f_open+0x656>
    3ba6:	eb 88       	ldd	r14, Y+19	; 0x13
    3ba8:	fc 88       	ldd	r15, Y+20	; 0x14
    3baa:	86 e0       	ldi	r24, 0x06	; 6
    3bac:	e3 cf       	rjmp	.-58     	; 0x3b74 <f_open+0x5fc>
    3bae:	87 e0       	ldi	r24, 0x07	; 7
    3bb0:	01 c0       	rjmp	.+2      	; 0x3bb4 <f_open+0x63c>
    3bb2:	86 e0       	ldi	r24, 0x06	; 6
    3bb4:	ff a5       	ldd	r31, Y+47	; 0x2f
    3bb6:	f8 60       	ori	r31, 0x08	; 8
    3bb8:	ff a7       	std	Y+47, r31	; 0x2f
    3bba:	eb 88       	ldd	r14, Y+19	; 0x13
    3bbc:	fc 88       	ldd	r15, Y+20	; 0x14
    3bbe:	ef cf       	rjmp	.-34     	; 0x3b9e <f_open+0x626>
    3bc0:	87 e0       	ldi	r24, 0x07	; 7
    3bc2:	05 c0       	rjmp	.+10     	; 0x3bce <f_open+0x656>
    3bc4:	88 e0       	ldi	r24, 0x08	; 8
    3bc6:	03 c0       	rjmp	.+6      	; 0x3bce <f_open+0x656>
    3bc8:	84 e0       	ldi	r24, 0x04	; 4
    3bca:	01 c0       	rjmp	.+2      	; 0x3bce <f_open+0x656>
    3bcc:	87 e0       	ldi	r24, 0x07	; 7
    3bce:	e0 96       	adiw	r28, 0x30	; 48
    3bd0:	0f b6       	in	r0, 0x3f	; 63
    3bd2:	f8 94       	cli
    3bd4:	de bf       	out	0x3e, r29	; 62
    3bd6:	0f be       	out	0x3f, r0	; 63
    3bd8:	cd bf       	out	0x3d, r28	; 61
    3bda:	df 91       	pop	r29
    3bdc:	cf 91       	pop	r28
    3bde:	1f 91       	pop	r17
    3be0:	0f 91       	pop	r16
    3be2:	ff 90       	pop	r15
    3be4:	ef 90       	pop	r14
    3be6:	df 90       	pop	r13
    3be8:	cf 90       	pop	r12
    3bea:	bf 90       	pop	r11
    3bec:	af 90       	pop	r10
    3bee:	9f 90       	pop	r9
    3bf0:	8f 90       	pop	r8
    3bf2:	7f 90       	pop	r7
    3bf4:	6f 90       	pop	r6
    3bf6:	5f 90       	pop	r5
    3bf8:	4f 90       	pop	r4
    3bfa:	3f 90       	pop	r3
    3bfc:	2f 90       	pop	r2
    3bfe:	08 95       	ret

00003c00 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
    3c00:	2f 92       	push	r2
    3c02:	3f 92       	push	r3
    3c04:	4f 92       	push	r4
    3c06:	5f 92       	push	r5
    3c08:	6f 92       	push	r6
    3c0a:	7f 92       	push	r7
    3c0c:	8f 92       	push	r8
    3c0e:	9f 92       	push	r9
    3c10:	af 92       	push	r10
    3c12:	bf 92       	push	r11
    3c14:	cf 92       	push	r12
    3c16:	df 92       	push	r13
    3c18:	ef 92       	push	r14
    3c1a:	ff 92       	push	r15
    3c1c:	0f 93       	push	r16
    3c1e:	1f 93       	push	r17
    3c20:	cf 93       	push	r28
    3c22:	df 93       	push	r29
    3c24:	ec 01       	movw	r28, r24
    3c26:	4b 01       	movw	r8, r22
    3c28:	6a 01       	movw	r12, r20
    3c2a:	59 01       	movw	r10, r18
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
    3c2c:	f9 01       	movw	r30, r18
    3c2e:	11 82       	std	Z+1, r1	; 0x01
    3c30:	10 82       	st	Z, r1

	res = validate(fp);						/* Check validity */
    3c32:	0e 94 28 12 	call	0x2450	; 0x2450 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    3c36:	81 11       	cpse	r24, r1
    3c38:	6d c1       	rjmp	.+730    	; 0x3f14 <f_write+0x314>
	if (fp->err)							/* Check error */
    3c3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c3c:	81 11       	cpse	r24, r1
    3c3e:	6a c1       	rjmp	.+724    	; 0x3f14 <f_write+0x314>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    3c40:	8c 81       	ldd	r24, Y+4	; 0x04
    3c42:	81 ff       	sbrs	r24, 1
    3c44:	66 c1       	rjmp	.+716    	; 0x3f12 <f_write+0x312>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
    3c46:	8e 81       	ldd	r24, Y+6	; 0x06
    3c48:	9f 81       	ldd	r25, Y+7	; 0x07
    3c4a:	a8 85       	ldd	r26, Y+8	; 0x08
    3c4c:	b9 85       	ldd	r27, Y+9	; 0x09
    3c4e:	ac 01       	movw	r20, r24
    3c50:	bd 01       	movw	r22, r26
    3c52:	4c 0d       	add	r20, r12
    3c54:	5d 1d       	adc	r21, r13
    3c56:	61 1d       	adc	r22, r1
    3c58:	71 1d       	adc	r23, r1
    3c5a:	48 17       	cp	r20, r24
    3c5c:	59 07       	cpc	r21, r25
    3c5e:	6a 07       	cpc	r22, r26
    3c60:	7b 07       	cpc	r23, r27
    3c62:	08 f4       	brcc	.+2      	; 0x3c66 <f_write+0x66>
    3c64:	40 c1       	rjmp	.+640    	; 0x3ee6 <f_write+0x2e6>

	for ( ;  btw;							/* Repeat until all data written */
    3c66:	c1 14       	cp	r12, r1
    3c68:	d1 04       	cpc	r13, r1
    3c6a:	09 f4       	brne	.+2      	; 0x3c6e <f_write+0x6e>
    3c6c:	3c c1       	rjmp	.+632    	; 0x3ee6 <f_write+0x2e6>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    3c6e:	4e 81       	ldd	r20, Y+6	; 0x06
    3c70:	5f 81       	ldd	r21, Y+7	; 0x07
    3c72:	68 85       	ldd	r22, Y+8	; 0x08
    3c74:	79 85       	ldd	r23, Y+9	; 0x09
    3c76:	db 01       	movw	r26, r22
    3c78:	ca 01       	movw	r24, r20
    3c7a:	91 70       	andi	r25, 0x01	; 1
    3c7c:	aa 27       	eor	r26, r26
    3c7e:	bb 27       	eor	r27, r27
    3c80:	89 2b       	or	r24, r25
    3c82:	8a 2b       	or	r24, r26
    3c84:	8b 2b       	or	r24, r27
    3c86:	09 f0       	breq	.+2      	; 0x3c8a <f_write+0x8a>
    3c88:	e8 c0       	rjmp	.+464    	; 0x3e5a <f_write+0x25a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    3c8a:	e8 81       	ld	r30, Y
    3c8c:	f9 81       	ldd	r31, Y+1	; 0x01
    3c8e:	12 81       	ldd	r17, Z+2	; 0x02
    3c90:	11 50       	subi	r17, 0x01	; 1
    3c92:	db 01       	movw	r26, r22
    3c94:	ca 01       	movw	r24, r20
    3c96:	07 2e       	mov	r0, r23
    3c98:	79 e0       	ldi	r23, 0x09	; 9
    3c9a:	b6 95       	lsr	r27
    3c9c:	a7 95       	ror	r26
    3c9e:	97 95       	ror	r25
    3ca0:	87 95       	ror	r24
    3ca2:	7a 95       	dec	r23
    3ca4:	d1 f7       	brne	.-12     	; 0x3c9a <f_write+0x9a>
    3ca6:	70 2d       	mov	r23, r0
    3ca8:	18 23       	and	r17, r24
			if (!csect) {					/* On the cluster boundary? */
    3caa:	09 f0       	breq	.+2      	; 0x3cae <f_write+0xae>
    3cac:	42 c0       	rjmp	.+132    	; 0x3d32 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
    3cae:	45 2b       	or	r20, r21
    3cb0:	46 2b       	or	r20, r22
    3cb2:	47 2b       	or	r20, r23
    3cb4:	81 f4       	brne	.+32     	; 0x3cd6 <f_write+0xd6>
					clst = fp->sclust;		/* Follow from the origin */
    3cb6:	6e 85       	ldd	r22, Y+14	; 0x0e
    3cb8:	7f 85       	ldd	r23, Y+15	; 0x0f
    3cba:	88 89       	ldd	r24, Y+16	; 0x10
    3cbc:	99 89       	ldd	r25, Y+17	; 0x11
					if (clst == 0)			/* When no cluster is allocated, */
    3cbe:	61 15       	cp	r22, r1
    3cc0:	71 05       	cpc	r23, r1
    3cc2:	81 05       	cpc	r24, r1
    3cc4:	91 05       	cpc	r25, r1
    3cc6:	a1 f4       	brne	.+40     	; 0x3cf0 <f_write+0xf0>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    3cc8:	40 e0       	ldi	r20, 0x00	; 0
    3cca:	50 e0       	ldi	r21, 0x00	; 0
    3ccc:	ba 01       	movw	r22, r20
    3cce:	cf 01       	movw	r24, r30
    3cd0:	0e 94 2c 18 	call	0x3058	; 0x3058 <create_chain>
    3cd4:	07 c0       	rjmp	.+14     	; 0x3ce4 <f_write+0xe4>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    3cd6:	4a 89       	ldd	r20, Y+18	; 0x12
    3cd8:	5b 89       	ldd	r21, Y+19	; 0x13
    3cda:	6c 89       	ldd	r22, Y+20	; 0x14
    3cdc:	7d 89       	ldd	r23, Y+21	; 0x15
    3cde:	cf 01       	movw	r24, r30
    3ce0:	0e 94 2c 18 	call	0x3058	; 0x3058 <create_chain>
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    3ce4:	61 15       	cp	r22, r1
    3ce6:	71 05       	cpc	r23, r1
    3ce8:	81 05       	cpc	r24, r1
    3cea:	91 05       	cpc	r25, r1
    3cec:	09 f4       	brne	.+2      	; 0x3cf0 <f_write+0xf0>
    3cee:	fb c0       	rjmp	.+502    	; 0x3ee6 <f_write+0x2e6>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    3cf0:	61 30       	cpi	r22, 0x01	; 1
    3cf2:	71 05       	cpc	r23, r1
    3cf4:	81 05       	cpc	r24, r1
    3cf6:	91 05       	cpc	r25, r1
    3cf8:	19 f4       	brne	.+6      	; 0x3d00 <f_write+0x100>
    3cfa:	82 e0       	ldi	r24, 0x02	; 2
    3cfc:	8d 83       	std	Y+5, r24	; 0x05
    3cfe:	0a c1       	rjmp	.+532    	; 0x3f14 <f_write+0x314>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3d00:	6f 3f       	cpi	r22, 0xFF	; 255
    3d02:	ff ef       	ldi	r31, 0xFF	; 255
    3d04:	7f 07       	cpc	r23, r31
    3d06:	8f 07       	cpc	r24, r31
    3d08:	9f 07       	cpc	r25, r31
    3d0a:	19 f4       	brne	.+6      	; 0x3d12 <f_write+0x112>
    3d0c:	81 e0       	ldi	r24, 0x01	; 1
    3d0e:	8d 83       	std	Y+5, r24	; 0x05
    3d10:	01 c1       	rjmp	.+514    	; 0x3f14 <f_write+0x314>
				fp->clust = clst;			/* Update current cluster */
    3d12:	6a 8b       	std	Y+18, r22	; 0x12
    3d14:	7b 8b       	std	Y+19, r23	; 0x13
    3d16:	8c 8b       	std	Y+20, r24	; 0x14
    3d18:	9d 8b       	std	Y+21, r25	; 0x15
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
    3d1a:	4e 84       	ldd	r4, Y+14	; 0x0e
    3d1c:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d1e:	68 88       	ldd	r6, Y+16	; 0x10
    3d20:	79 88       	ldd	r7, Y+17	; 0x11
    3d22:	45 28       	or	r4, r5
    3d24:	46 28       	or	r4, r6
    3d26:	47 28       	or	r4, r7
    3d28:	21 f4       	brne	.+8      	; 0x3d32 <f_write+0x132>
    3d2a:	6e 87       	std	Y+14, r22	; 0x0e
    3d2c:	7f 87       	std	Y+15, r23	; 0x0f
    3d2e:	88 8b       	std	Y+16, r24	; 0x10
    3d30:	99 8b       	std	Y+17, r25	; 0x11
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
    3d32:	e8 81       	ld	r30, Y
    3d34:	f9 81       	ldd	r31, Y+1	; 0x01
    3d36:	42 a5       	ldd	r20, Z+42	; 0x2a
    3d38:	53 a5       	ldd	r21, Z+43	; 0x2b
    3d3a:	64 a5       	ldd	r22, Z+44	; 0x2c
    3d3c:	75 a5       	ldd	r23, Z+45	; 0x2d
    3d3e:	8e 89       	ldd	r24, Y+22	; 0x16
    3d40:	9f 89       	ldd	r25, Y+23	; 0x17
    3d42:	a8 8d       	ldd	r26, Y+24	; 0x18
    3d44:	b9 8d       	ldd	r27, Y+25	; 0x19
    3d46:	48 17       	cp	r20, r24
    3d48:	59 07       	cpc	r21, r25
    3d4a:	6a 07       	cpc	r22, r26
    3d4c:	7b 07       	cpc	r23, r27
    3d4e:	41 f4       	brne	.+16     	; 0x3d60 <f_write+0x160>
    3d50:	cf 01       	movw	r24, r30
    3d52:	0e 94 44 11 	call	0x2288	; 0x2288 <sync_window>
    3d56:	88 23       	and	r24, r24
    3d58:	19 f0       	breq	.+6      	; 0x3d60 <f_write+0x160>
				ABORT(fp->fs, FR_DISK_ERR);
    3d5a:	81 e0       	ldi	r24, 0x01	; 1
    3d5c:	8d 83       	std	Y+5, r24	; 0x05
    3d5e:	da c0       	rjmp	.+436    	; 0x3f14 <f_write+0x314>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    3d60:	28 80       	ld	r2, Y
    3d62:	39 80       	ldd	r3, Y+1	; 0x01
    3d64:	4a 89       	ldd	r20, Y+18	; 0x12
    3d66:	5b 89       	ldd	r21, Y+19	; 0x13
    3d68:	6c 89       	ldd	r22, Y+20	; 0x14
    3d6a:	7d 89       	ldd	r23, Y+21	; 0x15
    3d6c:	c1 01       	movw	r24, r2
    3d6e:	0e 94 39 15 	call	0x2a72	; 0x2a72 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    3d72:	61 15       	cp	r22, r1
    3d74:	71 05       	cpc	r23, r1
    3d76:	81 05       	cpc	r24, r1
    3d78:	91 05       	cpc	r25, r1
    3d7a:	19 f4       	brne	.+6      	; 0x3d82 <f_write+0x182>
    3d7c:	82 e0       	ldi	r24, 0x02	; 2
    3d7e:	8d 83       	std	Y+5, r24	; 0x05
    3d80:	c9 c0       	rjmp	.+402    	; 0x3f14 <f_write+0x314>
			sect += csect;
    3d82:	2b 01       	movw	r4, r22
    3d84:	3c 01       	movw	r6, r24
    3d86:	41 0e       	add	r4, r17
    3d88:	51 1c       	adc	r5, r1
    3d8a:	61 1c       	adc	r6, r1
    3d8c:	71 1c       	adc	r7, r1
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    3d8e:	76 01       	movw	r14, r12
    3d90:	ef 2c       	mov	r14, r15
    3d92:	ff 24       	eor	r15, r15
    3d94:	e6 94       	lsr	r14
			if (cc) {						/* Write maximum contiguous sectors directly */
    3d96:	e1 14       	cp	r14, r1
    3d98:	f1 04       	cpc	r15, r1
    3d9a:	09 f4       	brne	.+2      	; 0x3d9e <f_write+0x19e>
    3d9c:	3f c0       	rjmp	.+126    	; 0x3e1c <f_write+0x21c>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    3d9e:	f1 01       	movw	r30, r2
    3da0:	42 81       	ldd	r20, Z+2	; 0x02
    3da2:	24 2f       	mov	r18, r20
    3da4:	30 e0       	ldi	r19, 0x00	; 0
    3da6:	c7 01       	movw	r24, r14
    3da8:	81 0f       	add	r24, r17
    3daa:	91 1d       	adc	r25, r1
    3dac:	28 17       	cp	r18, r24
    3dae:	39 07       	cpc	r19, r25
    3db0:	18 f4       	brcc	.+6      	; 0x3db8 <f_write+0x1b8>
					cc = fp->fs->csize - csect;
    3db2:	79 01       	movw	r14, r18
    3db4:	e1 1a       	sub	r14, r17
    3db6:	f1 08       	sbc	r15, r1
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
    3db8:	87 01       	movw	r16, r14
    3dba:	a3 01       	movw	r20, r6
    3dbc:	92 01       	movw	r18, r4
    3dbe:	b4 01       	movw	r22, r8
    3dc0:	f1 01       	movw	r30, r2
    3dc2:	81 81       	ldd	r24, Z+1	; 0x01
    3dc4:	0e 94 49 24 	call	0x4892	; 0x4892 <disk_write>
    3dc8:	88 23       	and	r24, r24
    3dca:	19 f0       	breq	.+6      	; 0x3dd2 <f_write+0x1d2>
					ABORT(fp->fs, FR_DISK_ERR);
    3dcc:	81 e0       	ldi	r24, 0x01	; 1
    3dce:	8d 83       	std	Y+5, r24	; 0x05
    3dd0:	a1 c0       	rjmp	.+322    	; 0x3f14 <f_write+0x314>
#if _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    3dd2:	e8 81       	ld	r30, Y
    3dd4:	f9 81       	ldd	r31, Y+1	; 0x01
    3dd6:	82 a5       	ldd	r24, Z+42	; 0x2a
    3dd8:	93 a5       	ldd	r25, Z+43	; 0x2b
    3dda:	a4 a5       	ldd	r26, Z+44	; 0x2c
    3ddc:	b5 a5       	ldd	r27, Z+45	; 0x2d
    3dde:	84 19       	sub	r24, r4
    3de0:	95 09       	sbc	r25, r5
    3de2:	a6 09       	sbc	r26, r6
    3de4:	b7 09       	sbc	r27, r7
    3de6:	a7 01       	movw	r20, r14
    3de8:	60 e0       	ldi	r22, 0x00	; 0
    3dea:	70 e0       	ldi	r23, 0x00	; 0
    3dec:	84 17       	cp	r24, r20
    3dee:	95 07       	cpc	r25, r21
    3df0:	a6 07       	cpc	r26, r22
    3df2:	b7 07       	cpc	r27, r23
    3df4:	78 f4       	brcc	.+30     	; 0x3e14 <f_write+0x214>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    3df6:	98 2f       	mov	r25, r24
    3df8:	88 27       	eor	r24, r24
    3dfa:	99 0f       	add	r25, r25
    3dfc:	b4 01       	movw	r22, r8
    3dfe:	68 0f       	add	r22, r24
    3e00:	79 1f       	adc	r23, r25
    3e02:	40 e0       	ldi	r20, 0x00	; 0
    3e04:	52 e0       	ldi	r21, 0x02	; 2
    3e06:	cf 01       	movw	r24, r30
    3e08:	8e 96       	adiw	r24, 0x2e	; 46
    3e0a:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <mem_cpy>
					fp->fs->wflag = 0;
    3e0e:	e8 81       	ld	r30, Y
    3e10:	f9 81       	ldd	r31, Y+1	; 0x01
    3e12:	14 82       	std	Z+4, r1	; 0x04
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    3e14:	fe 2c       	mov	r15, r14
    3e16:	ee 24       	eor	r14, r14
    3e18:	ff 0c       	add	r15, r15
				continue;
    3e1a:	4c c0       	rjmp	.+152    	; 0x3eb4 <f_write+0x2b4>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    3e1c:	4e 81       	ldd	r20, Y+6	; 0x06
    3e1e:	5f 81       	ldd	r21, Y+7	; 0x07
    3e20:	68 85       	ldd	r22, Y+8	; 0x08
    3e22:	79 85       	ldd	r23, Y+9	; 0x09
    3e24:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e26:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e28:	ac 85       	ldd	r26, Y+12	; 0x0c
    3e2a:	bd 85       	ldd	r27, Y+13	; 0x0d
    3e2c:	48 17       	cp	r20, r24
    3e2e:	59 07       	cpc	r21, r25
    3e30:	6a 07       	cpc	r22, r26
    3e32:	7b 07       	cpc	r23, r27
    3e34:	70 f0       	brcs	.+28     	; 0x3e52 <f_write+0x252>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
    3e36:	c1 01       	movw	r24, r2
    3e38:	0e 94 44 11 	call	0x2288	; 0x2288 <sync_window>
    3e3c:	88 23       	and	r24, r24
    3e3e:	19 f0       	breq	.+6      	; 0x3e46 <f_write+0x246>
    3e40:	81 e0       	ldi	r24, 0x01	; 1
    3e42:	8d 83       	std	Y+5, r24	; 0x05
    3e44:	67 c0       	rjmp	.+206    	; 0x3f14 <f_write+0x314>
				fp->fs->winsect = sect;
    3e46:	e8 81       	ld	r30, Y
    3e48:	f9 81       	ldd	r31, Y+1	; 0x01
    3e4a:	42 a6       	std	Z+42, r4	; 0x2a
    3e4c:	53 a6       	std	Z+43, r5	; 0x2b
    3e4e:	64 a6       	std	Z+44, r6	; 0x2c
    3e50:	75 a6       	std	Z+45, r7	; 0x2d
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    3e52:	4e 8a       	std	Y+22, r4	; 0x16
    3e54:	5f 8a       	std	Y+23, r5	; 0x17
    3e56:	68 8e       	std	Y+24, r6	; 0x18
    3e58:	79 8e       	std	Y+25, r7	; 0x19
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    3e5a:	8e 81       	ldd	r24, Y+6	; 0x06
    3e5c:	9f 81       	ldd	r25, Y+7	; 0x07
    3e5e:	91 70       	andi	r25, 0x01	; 1
    3e60:	20 e0       	ldi	r18, 0x00	; 0
    3e62:	32 e0       	ldi	r19, 0x02	; 2
    3e64:	79 01       	movw	r14, r18
    3e66:	e8 1a       	sub	r14, r24
    3e68:	f9 0a       	sbc	r15, r25
    3e6a:	ce 14       	cp	r12, r14
    3e6c:	df 04       	cpc	r13, r15
    3e6e:	08 f4       	brcc	.+2      	; 0x3e72 <f_write+0x272>
    3e70:	76 01       	movw	r14, r12
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
    3e72:	4e 89       	ldd	r20, Y+22	; 0x16
    3e74:	5f 89       	ldd	r21, Y+23	; 0x17
    3e76:	68 8d       	ldd	r22, Y+24	; 0x18
    3e78:	79 8d       	ldd	r23, Y+25	; 0x19
    3e7a:	88 81       	ld	r24, Y
    3e7c:	99 81       	ldd	r25, Y+1	; 0x01
    3e7e:	0e 94 af 11 	call	0x235e	; 0x235e <move_window>
    3e82:	88 23       	and	r24, r24
    3e84:	19 f0       	breq	.+6      	; 0x3e8c <f_write+0x28c>
			ABORT(fp->fs, FR_DISK_ERR);
    3e86:	81 e0       	ldi	r24, 0x01	; 1
    3e88:	8d 83       	std	Y+5, r24	; 0x05
    3e8a:	44 c0       	rjmp	.+136    	; 0x3f14 <f_write+0x314>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    3e8c:	8e 81       	ldd	r24, Y+6	; 0x06
    3e8e:	9f 81       	ldd	r25, Y+7	; 0x07
    3e90:	a8 85       	ldd	r26, Y+8	; 0x08
    3e92:	b9 85       	ldd	r27, Y+9	; 0x09
    3e94:	91 70       	andi	r25, 0x01	; 1
    3e96:	aa 27       	eor	r26, r26
    3e98:	bb 27       	eor	r27, r27
    3e9a:	8e 96       	adiw	r24, 0x2e	; 46
    3e9c:	28 81       	ld	r18, Y
    3e9e:	39 81       	ldd	r19, Y+1	; 0x01
    3ea0:	a7 01       	movw	r20, r14
    3ea2:	b4 01       	movw	r22, r8
    3ea4:	82 0f       	add	r24, r18
    3ea6:	93 1f       	adc	r25, r19
    3ea8:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <mem_cpy>
		fp->fs->wflag = 1;
    3eac:	e8 81       	ld	r30, Y
    3eae:	f9 81       	ldd	r31, Y+1	; 0x01
    3eb0:	21 e0       	ldi	r18, 0x01	; 1
    3eb2:	24 83       	std	Z+4, r18	; 0x04
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    3eb4:	8e 0c       	add	r8, r14
    3eb6:	9f 1c       	adc	r9, r15
    3eb8:	8e 81       	ldd	r24, Y+6	; 0x06
    3eba:	9f 81       	ldd	r25, Y+7	; 0x07
    3ebc:	a8 85       	ldd	r26, Y+8	; 0x08
    3ebe:	b9 85       	ldd	r27, Y+9	; 0x09
    3ec0:	8e 0d       	add	r24, r14
    3ec2:	9f 1d       	adc	r25, r15
    3ec4:	a1 1d       	adc	r26, r1
    3ec6:	b1 1d       	adc	r27, r1
    3ec8:	8e 83       	std	Y+6, r24	; 0x06
    3eca:	9f 83       	std	Y+7, r25	; 0x07
    3ecc:	a8 87       	std	Y+8, r26	; 0x08
    3ece:	b9 87       	std	Y+9, r27	; 0x09
    3ed0:	f5 01       	movw	r30, r10
    3ed2:	80 81       	ld	r24, Z
    3ed4:	91 81       	ldd	r25, Z+1	; 0x01
    3ed6:	8e 0d       	add	r24, r14
    3ed8:	9f 1d       	adc	r25, r15
    3eda:	91 83       	std	Z+1, r25	; 0x01
    3edc:	80 83       	st	Z, r24
    3ede:	ce 18       	sub	r12, r14
    3ee0:	df 08       	sbc	r13, r15
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
    3ee2:	09 f0       	breq	.+2      	; 0x3ee6 <f_write+0x2e6>
    3ee4:	c4 ce       	rjmp	.-632    	; 0x3c6e <f_write+0x6e>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    3ee6:	8e 81       	ldd	r24, Y+6	; 0x06
    3ee8:	9f 81       	ldd	r25, Y+7	; 0x07
    3eea:	a8 85       	ldd	r26, Y+8	; 0x08
    3eec:	b9 85       	ldd	r27, Y+9	; 0x09
    3eee:	4a 85       	ldd	r20, Y+10	; 0x0a
    3ef0:	5b 85       	ldd	r21, Y+11	; 0x0b
    3ef2:	6c 85       	ldd	r22, Y+12	; 0x0c
    3ef4:	7d 85       	ldd	r23, Y+13	; 0x0d
    3ef6:	48 17       	cp	r20, r24
    3ef8:	59 07       	cpc	r21, r25
    3efa:	6a 07       	cpc	r22, r26
    3efc:	7b 07       	cpc	r23, r27
    3efe:	20 f4       	brcc	.+8      	; 0x3f08 <f_write+0x308>
    3f00:	8a 87       	std	Y+10, r24	; 0x0a
    3f02:	9b 87       	std	Y+11, r25	; 0x0b
    3f04:	ac 87       	std	Y+12, r26	; 0x0c
    3f06:	bd 87       	std	Y+13, r27	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    3f08:	8c 81       	ldd	r24, Y+4	; 0x04
    3f0a:	80 62       	ori	r24, 0x20	; 32
    3f0c:	8c 83       	std	Y+4, r24	; 0x04

	LEAVE_FF(fp->fs, FR_OK);
    3f0e:	80 e0       	ldi	r24, 0x00	; 0
    3f10:	01 c0       	rjmp	.+2      	; 0x3f14 <f_write+0x314>
	res = validate(fp);						/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->err)							/* Check error */
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    3f12:	87 e0       	ldi	r24, 0x07	; 7

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    3f14:	df 91       	pop	r29
    3f16:	cf 91       	pop	r28
    3f18:	1f 91       	pop	r17
    3f1a:	0f 91       	pop	r16
    3f1c:	ff 90       	pop	r15
    3f1e:	ef 90       	pop	r14
    3f20:	df 90       	pop	r13
    3f22:	cf 90       	pop	r12
    3f24:	bf 90       	pop	r11
    3f26:	af 90       	pop	r10
    3f28:	9f 90       	pop	r9
    3f2a:	8f 90       	pop	r8
    3f2c:	7f 90       	pop	r7
    3f2e:	6f 90       	pop	r6
    3f30:	5f 90       	pop	r5
    3f32:	4f 90       	pop	r4
    3f34:	3f 90       	pop	r3
    3f36:	2f 90       	pop	r2
    3f38:	08 95       	ret

00003f3a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
    3f3a:	0f 93       	push	r16
    3f3c:	1f 93       	push	r17
    3f3e:	cf 93       	push	r28
    3f40:	df 93       	push	r29
    3f42:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
    3f44:	0e 94 28 12 	call	0x2450	; 0x2450 <validate>
    3f48:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    3f4a:	81 11       	cpse	r24, r1
    3f4c:	98 c0       	rjmp	.+304    	; 0x407e <f_sync+0x144>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    3f4e:	8c 81       	ldd	r24, Y+4	; 0x04
    3f50:	85 ff       	sbrs	r24, 5
    3f52:	95 c0       	rjmp	.+298    	; 0x407e <f_sync+0x144>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    3f54:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3f56:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3f58:	6c 8d       	ldd	r22, Y+28	; 0x1c
    3f5a:	7d 8d       	ldd	r23, Y+29	; 0x1d
    3f5c:	88 81       	ld	r24, Y
    3f5e:	99 81       	ldd	r25, Y+1	; 0x01
    3f60:	0e 94 af 11 	call	0x235e	; 0x235e <move_window>
    3f64:	98 2f       	mov	r25, r24
			if (res == FR_OK) {
    3f66:	81 11       	cpse	r24, r1
    3f68:	8a c0       	rjmp	.+276    	; 0x407e <f_sync+0x144>
				dir = fp->dir_ptr;
    3f6a:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3f6c:	ff 8d       	ldd	r31, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    3f6e:	83 85       	ldd	r24, Z+11	; 0x0b
    3f70:	80 62       	ori	r24, 0x20	; 32
    3f72:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
    3f74:	8a 85       	ldd	r24, Y+10	; 0x0a
    3f76:	9b 85       	ldd	r25, Y+11	; 0x0b
    3f78:	ac 85       	ldd	r26, Y+12	; 0x0c
    3f7a:	bd 85       	ldd	r27, Y+13	; 0x0d
    3f7c:	84 8f       	std	Z+28, r24	; 0x1c
    3f7e:	95 8f       	std	Z+29, r25	; 0x1d
    3f80:	a6 8f       	std	Z+30, r26	; 0x1e
    3f82:	b7 8f       	std	Z+31, r27	; 0x1f
				st_clust(dir, fp->sclust);					/* Update start cluster */
    3f84:	8e 85       	ldd	r24, Y+14	; 0x0e
    3f86:	9f 85       	ldd	r25, Y+15	; 0x0f
    3f88:	a8 89       	ldd	r26, Y+16	; 0x10
    3f8a:	b9 89       	ldd	r27, Y+17	; 0x11
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir + DIR_FstClusLO, cl);
    3f8c:	93 8f       	std	Z+27, r25	; 0x1b
    3f8e:	82 8f       	std	Z+26, r24	; 0x1a
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
    3f90:	b5 8b       	std	Z+21, r27	; 0x15
    3f92:	a4 8b       	std	Z+20, r26	; 0x14
				dir = fp->dir_ptr;
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
				st_clust(dir, fp->sclust);					/* Update start cluster */
				tm = GET_FATTIME();							/* Update updated time */
				ST_DWORD(dir + DIR_WrtTime, tm);
    3f94:	80 e0       	ldi	r24, 0x00	; 0
    3f96:	90 e0       	ldi	r25, 0x00	; 0
    3f98:	a1 e4       	ldi	r26, 0x41	; 65
    3f9a:	b6 e4       	ldi	r27, 0x46	; 70
    3f9c:	86 8b       	std	Z+22, r24	; 0x16
    3f9e:	97 8b       	std	Z+23, r25	; 0x17
    3fa0:	a0 8f       	std	Z+24, r26	; 0x18
    3fa2:	b1 8f       	std	Z+25, r27	; 0x19
				ST_WORD(dir + DIR_LstAccDate, 0);
    3fa4:	13 8a       	std	Z+19, r1	; 0x13
    3fa6:	12 8a       	std	Z+18, r1	; 0x12
				fp->flag &= ~FA__WRITTEN;
    3fa8:	8c 81       	ldd	r24, Y+4	; 0x04
    3faa:	8f 7d       	andi	r24, 0xDF	; 223
    3fac:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    3fae:	e8 81       	ld	r30, Y
    3fb0:	f9 81       	ldd	r31, Y+1	; 0x01
    3fb2:	81 e0       	ldi	r24, 0x01	; 1
    3fb4:	84 83       	std	Z+4, r24	; 0x04
				res = sync_fs(fp->fs);
    3fb6:	09 90       	ld	r0, Y+
    3fb8:	d8 81       	ld	r29, Y
    3fba:	c0 2d       	mov	r28, r0
)
{
	FRESULT res;


	res = sync_window(fs);
    3fbc:	ce 01       	movw	r24, r28
    3fbe:	0e 94 44 11 	call	0x2288	; 0x2288 <sync_window>
    3fc2:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    3fc4:	81 11       	cpse	r24, r1
    3fc6:	5b c0       	rjmp	.+182    	; 0x407e <f_sync+0x144>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
    3fc8:	88 81       	ld	r24, Y
    3fca:	83 30       	cpi	r24, 0x03	; 3
    3fcc:	09 f0       	breq	.+2      	; 0x3fd0 <f_sync+0x96>
    3fce:	4d c0       	rjmp	.+154    	; 0x406a <f_sync+0x130>
    3fd0:	8d 81       	ldd	r24, Y+5	; 0x05
    3fd2:	81 30       	cpi	r24, 0x01	; 1
    3fd4:	09 f0       	breq	.+2      	; 0x3fd8 <f_sync+0x9e>
    3fd6:	49 c0       	rjmp	.+146    	; 0x406a <f_sync+0x130>
			/* Create FSINFO structure */
			mem_set(fs->win, 0, SS(fs));
    3fd8:	be 01       	movw	r22, r28
    3fda:	62 5d       	subi	r22, 0xD2	; 210
    3fdc:	7f 4f       	sbci	r23, 0xFF	; 255
    3fde:	fb 01       	movw	r30, r22
    3fe0:	ce 01       	movw	r24, r28
    3fe2:	82 5d       	subi	r24, 0xD2	; 210
    3fe4:	9d 4f       	sbci	r25, 0xFD	; 253
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    3fe6:	11 92       	st	Z+, r1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    3fe8:	e8 17       	cp	r30, r24
    3fea:	f9 07       	cpc	r31, r25
    3fec:	e1 f7       	brne	.-8      	; 0x3fe6 <f_sync+0xac>
	if (res == FR_OK) {
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
			/* Create FSINFO structure */
			mem_set(fs->win, 0, SS(fs));
			ST_WORD(fs->win + BS_55AA, 0xAA55);
    3fee:	85 e5       	ldi	r24, 0x55	; 85
    3ff0:	9a ea       	ldi	r25, 0xAA	; 170
    3ff2:	fe 01       	movw	r30, r28
    3ff4:	e4 5d       	subi	r30, 0xD4	; 212
    3ff6:	fd 4f       	sbci	r31, 0xFD	; 253
    3ff8:	91 83       	std	Z+1, r25	; 0x01
    3ffa:	80 83       	st	Z, r24
			ST_DWORD(fs->win + FSI_LeadSig, 0x41615252);
    3ffc:	82 e5       	ldi	r24, 0x52	; 82
    3ffe:	92 e5       	ldi	r25, 0x52	; 82
    4000:	a1 e6       	ldi	r26, 0x61	; 97
    4002:	b1 e4       	ldi	r27, 0x41	; 65
    4004:	8e a7       	std	Y+46, r24	; 0x2e
    4006:	9f a7       	std	Y+47, r25	; 0x2f
    4008:	a8 ab       	std	Y+48, r26	; 0x30
    400a:	b9 ab       	std	Y+49, r27	; 0x31
			ST_DWORD(fs->win + FSI_StrucSig, 0x61417272);
    400c:	82 e7       	ldi	r24, 0x72	; 114
    400e:	92 e7       	ldi	r25, 0x72	; 114
    4010:	a1 e4       	ldi	r26, 0x41	; 65
    4012:	b1 e6       	ldi	r27, 0x61	; 97
    4014:	7a 97       	sbiw	r30, 0x1a	; 26
    4016:	80 83       	st	Z, r24
    4018:	91 83       	std	Z+1, r25	; 0x01
    401a:	a2 83       	std	Z+2, r26	; 0x02
    401c:	b3 83       	std	Z+3, r27	; 0x03
			ST_DWORD(fs->win + FSI_Free_Count, fs->free_clust);
    401e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4020:	9f 85       	ldd	r25, Y+15	; 0x0f
    4022:	a8 89       	ldd	r26, Y+16	; 0x10
    4024:	b9 89       	ldd	r27, Y+17	; 0x11
    4026:	34 96       	adiw	r30, 0x04	; 4
    4028:	80 83       	st	Z, r24
    402a:	91 83       	std	Z+1, r25	; 0x01
    402c:	a2 83       	std	Z+2, r26	; 0x02
    402e:	b3 83       	std	Z+3, r27	; 0x03
			ST_DWORD(fs->win + FSI_Nxt_Free, fs->last_clust);
    4030:	8a 85       	ldd	r24, Y+10	; 0x0a
    4032:	9b 85       	ldd	r25, Y+11	; 0x0b
    4034:	ac 85       	ldd	r26, Y+12	; 0x0c
    4036:	bd 85       	ldd	r27, Y+13	; 0x0d
    4038:	34 96       	adiw	r30, 0x04	; 4
    403a:	80 83       	st	Z, r24
    403c:	91 83       	std	Z+1, r25	; 0x01
    403e:	a2 83       	std	Z+2, r26	; 0x02
    4040:	b3 83       	std	Z+3, r27	; 0x03
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
    4042:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4044:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4046:	ac 8d       	ldd	r26, Y+28	; 0x1c
    4048:	bd 8d       	ldd	r27, Y+29	; 0x1d
    404a:	9c 01       	movw	r18, r24
    404c:	ad 01       	movw	r20, r26
    404e:	2f 5f       	subi	r18, 0xFF	; 255
    4050:	3f 4f       	sbci	r19, 0xFF	; 255
    4052:	4f 4f       	sbci	r20, 0xFF	; 255
    4054:	5f 4f       	sbci	r21, 0xFF	; 255
    4056:	2a a7       	std	Y+42, r18	; 0x2a
    4058:	3b a7       	std	Y+43, r19	; 0x2b
    405a:	4c a7       	std	Y+44, r20	; 0x2c
    405c:	5d a7       	std	Y+45, r21	; 0x2d
			disk_write(fs->drv, fs->win, fs->winsect, 1);
    405e:	01 e0       	ldi	r16, 0x01	; 1
    4060:	10 e0       	ldi	r17, 0x00	; 0
    4062:	89 81       	ldd	r24, Y+1	; 0x01
    4064:	0e 94 49 24 	call	0x4892	; 0x4892 <disk_write>
			fs->fsi_flag = 0;
    4068:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    406a:	40 e0       	ldi	r20, 0x00	; 0
    406c:	50 e0       	ldi	r21, 0x00	; 0
    406e:	60 e0       	ldi	r22, 0x00	; 0
    4070:	89 81       	ldd	r24, Y+1	; 0x01
    4072:	0e 94 be 24 	call	0x497c	; 0x497c <disk_ioctl>
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
    4076:	91 e0       	ldi	r25, 0x01	; 1
    4078:	81 11       	cpse	r24, r1
    407a:	01 c0       	rjmp	.+2      	; 0x407e <f_sync+0x144>
    407c:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    407e:	89 2f       	mov	r24, r25
    4080:	df 91       	pop	r29
    4082:	cf 91       	pop	r28
    4084:	1f 91       	pop	r17
    4086:	0f 91       	pop	r16
    4088:	08 95       	ret

0000408a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    408a:	cf 93       	push	r28
    408c:	df 93       	push	r29
    408e:	ec 01       	movw	r28, r24
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    4090:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <f_sync>
	if (res == FR_OK)
    4094:	81 11       	cpse	r24, r1
    4096:	07 c0       	rjmp	.+14     	; 0x40a6 <f_close+0x1c>
#endif
	{
		res = validate(fp);				/* Lock volume */
    4098:	ce 01       	movw	r24, r28
    409a:	0e 94 28 12 	call	0x2450	; 0x2450 <validate>
		if (res == FR_OK) {
    409e:	81 11       	cpse	r24, r1
    40a0:	02 c0       	rjmp	.+4      	; 0x40a6 <f_close+0x1c>
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
				fp->fs = 0;				/* Invalidate file object */
    40a2:	19 82       	std	Y+1, r1	; 0x01
    40a4:	18 82       	st	Y, r1
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    40a6:	df 91       	pop	r29
    40a8:	cf 91       	pop	r28
    40aa:	08 95       	ret

000040ac <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    40ac:	4f 92       	push	r4
    40ae:	5f 92       	push	r5
    40b0:	6f 92       	push	r6
    40b2:	7f 92       	push	r7
    40b4:	8f 92       	push	r8
    40b6:	9f 92       	push	r9
    40b8:	af 92       	push	r10
    40ba:	bf 92       	push	r11
    40bc:	cf 92       	push	r12
    40be:	df 92       	push	r13
    40c0:	ef 92       	push	r14
    40c2:	ff 92       	push	r15
    40c4:	0f 93       	push	r16
    40c6:	1f 93       	push	r17
    40c8:	cf 93       	push	r28
    40ca:	df 93       	push	r29
    40cc:	00 d0       	rcall	.+0      	; 0x40ce <f_lseek+0x22>
    40ce:	00 d0       	rcall	.+0      	; 0x40d0 <f_lseek+0x24>
    40d0:	00 d0       	rcall	.+0      	; 0x40d2 <f_lseek+0x26>
    40d2:	cd b7       	in	r28, 0x3d	; 61
    40d4:	de b7       	in	r29, 0x3e	; 62
    40d6:	9e 83       	std	Y+6, r25	; 0x06
    40d8:	8d 83       	std	Y+5, r24	; 0x05
    40da:	6a 01       	movw	r12, r20
    40dc:	7b 01       	movw	r14, r22
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
    40de:	0e 94 28 12 	call	0x2450	; 0x2450 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    40e2:	81 11       	cpse	r24, r1
    40e4:	93 c1       	rjmp	.+806    	; 0x440c <f_lseek+0x360>
	if (fp->err)						/* Check error */
    40e6:	ad 81       	ldd	r26, Y+5	; 0x05
    40e8:	be 81       	ldd	r27, Y+6	; 0x06
    40ea:	15 96       	adiw	r26, 0x05	; 5
    40ec:	8c 91       	ld	r24, X
    40ee:	15 97       	sbiw	r26, 0x05	; 5
    40f0:	81 11       	cpse	r24, r1
    40f2:	8c c1       	rjmp	.+792    	; 0x440c <f_lseek+0x360>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    40f4:	1a 96       	adiw	r26, 0x0a	; 10
    40f6:	8d 91       	ld	r24, X+
    40f8:	9d 91       	ld	r25, X+
    40fa:	0d 90       	ld	r0, X+
    40fc:	bc 91       	ld	r27, X
    40fe:	a0 2d       	mov	r26, r0
    4100:	8c 15       	cp	r24, r12
    4102:	9d 05       	cpc	r25, r13
    4104:	ae 05       	cpc	r26, r14
    4106:	bf 05       	cpc	r27, r15
    4108:	38 f4       	brcc	.+14     	; 0x4118 <f_lseek+0x6c>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    410a:	ed 81       	ldd	r30, Y+5	; 0x05
    410c:	fe 81       	ldd	r31, Y+6	; 0x06
    410e:	24 81       	ldd	r18, Z+4	; 0x04
    4110:	21 fd       	sbrc	r18, 1
    4112:	02 c0       	rjmp	.+4      	; 0x4118 <f_lseek+0x6c>
#endif
			) ofs = fp->fsize;
    4114:	6c 01       	movw	r12, r24
    4116:	7d 01       	movw	r14, r26

		ifptr = fp->fptr;
    4118:	ad 81       	ldd	r26, Y+5	; 0x05
    411a:	be 81       	ldd	r27, Y+6	; 0x06
    411c:	16 96       	adiw	r26, 0x06	; 6
    411e:	4d 90       	ld	r4, X+
    4120:	5d 90       	ld	r5, X+
    4122:	6d 90       	ld	r6, X+
    4124:	7c 90       	ld	r7, X
    4126:	19 97       	sbiw	r26, 0x09	; 9
		fp->fptr = nsect = 0;
    4128:	fd 01       	movw	r30, r26
    412a:	16 82       	std	Z+6, r1	; 0x06
    412c:	17 82       	std	Z+7, r1	; 0x07
    412e:	10 86       	std	Z+8, r1	; 0x08
    4130:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    4132:	c1 14       	cp	r12, r1
    4134:	d1 04       	cpc	r13, r1
    4136:	e1 04       	cpc	r14, r1
    4138:	f1 04       	cpc	r15, r1
    413a:	09 f4       	brne	.+2      	; 0x413e <f_lseek+0x92>
    413c:	64 c1       	rjmp	.+712    	; 0x4406 <f_lseek+0x35a>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    413e:	00 81       	ld	r16, Z
    4140:	11 81       	ldd	r17, Z+1	; 0x01
    4142:	d8 01       	movw	r26, r16
    4144:	12 96       	adiw	r26, 0x02	; 2
    4146:	8c 90       	ld	r8, X
    4148:	91 2c       	mov	r9, r1
    414a:	a1 2c       	mov	r10, r1
    414c:	b1 2c       	mov	r11, r1
    414e:	07 2e       	mov	r0, r23
    4150:	79 e0       	ldi	r23, 0x09	; 9
    4152:	88 0c       	add	r8, r8
    4154:	99 1c       	adc	r9, r9
    4156:	aa 1c       	adc	r10, r10
    4158:	bb 1c       	adc	r11, r11
    415a:	7a 95       	dec	r23
    415c:	d1 f7       	brne	.-12     	; 0x4152 <f_lseek+0xa6>
    415e:	70 2d       	mov	r23, r0
			if (ifptr > 0 &&
    4160:	41 14       	cp	r4, r1
    4162:	51 04       	cpc	r5, r1
    4164:	61 04       	cpc	r6, r1
    4166:	71 04       	cpc	r7, r1
    4168:	09 f4       	brne	.+2      	; 0x416c <f_lseek+0xc0>
    416a:	40 c0       	rjmp	.+128    	; 0x41ec <f_lseek+0x140>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    416c:	b1 e0       	ldi	r27, 0x01	; 1
    416e:	4b 1a       	sub	r4, r27
    4170:	51 08       	sbc	r5, r1
    4172:	61 08       	sbc	r6, r1
    4174:	71 08       	sbc	r7, r1

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    4176:	c7 01       	movw	r24, r14
    4178:	b6 01       	movw	r22, r12
    417a:	61 50       	subi	r22, 0x01	; 1
    417c:	71 09       	sbc	r23, r1
    417e:	81 09       	sbc	r24, r1
    4180:	91 09       	sbc	r25, r1
    4182:	a5 01       	movw	r20, r10
    4184:	94 01       	movw	r18, r8
    4186:	0e 94 d6 2d 	call	0x5bac	; 0x5bac <__udivmodsi4>
    418a:	29 83       	std	Y+1, r18	; 0x01
    418c:	3a 83       	std	Y+2, r19	; 0x02
    418e:	4b 83       	std	Y+3, r20	; 0x03
    4190:	5c 83       	std	Y+4, r21	; 0x04
    4192:	c3 01       	movw	r24, r6
    4194:	b2 01       	movw	r22, r4
    4196:	a5 01       	movw	r20, r10
    4198:	94 01       	movw	r18, r8
    419a:	0e 94 d6 2d 	call	0x5bac	; 0x5bac <__udivmodsi4>
    419e:	89 81       	ldd	r24, Y+1	; 0x01
    41a0:	9a 81       	ldd	r25, Y+2	; 0x02
    41a2:	ab 81       	ldd	r26, Y+3	; 0x03
    41a4:	bc 81       	ldd	r27, Y+4	; 0x04
    41a6:	82 17       	cp	r24, r18
    41a8:	93 07       	cpc	r25, r19
    41aa:	a4 07       	cpc	r26, r20
    41ac:	b5 07       	cpc	r27, r21
    41ae:	f0 f0       	brcs	.+60     	; 0x41ec <f_lseek+0x140>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    41b0:	88 27       	eor	r24, r24
    41b2:	99 27       	eor	r25, r25
    41b4:	dc 01       	movw	r26, r24
    41b6:	88 19       	sub	r24, r8
    41b8:	99 09       	sbc	r25, r9
    41ba:	aa 09       	sbc	r26, r10
    41bc:	bb 09       	sbc	r27, r11
    41be:	48 22       	and	r4, r24
    41c0:	59 22       	and	r5, r25
    41c2:	6a 22       	and	r6, r26
    41c4:	7b 22       	and	r7, r27
    41c6:	ad 81       	ldd	r26, Y+5	; 0x05
    41c8:	be 81       	ldd	r27, Y+6	; 0x06
    41ca:	16 96       	adiw	r26, 0x06	; 6
    41cc:	4d 92       	st	X+, r4
    41ce:	5d 92       	st	X+, r5
    41d0:	6d 92       	st	X+, r6
    41d2:	7c 92       	st	X, r7
    41d4:	19 97       	sbiw	r26, 0x09	; 9
				ofs -= fp->fptr;
    41d6:	c4 18       	sub	r12, r4
    41d8:	d5 08       	sbc	r13, r5
    41da:	e6 08       	sbc	r14, r6
    41dc:	f7 08       	sbc	r15, r7
				clst = fp->clust;
    41de:	52 96       	adiw	r26, 0x12	; 18
    41e0:	4d 91       	ld	r20, X+
    41e2:	5d 91       	ld	r21, X+
    41e4:	6d 91       	ld	r22, X+
    41e6:	7c 91       	ld	r23, X
    41e8:	55 97       	sbiw	r26, 0x15	; 21
    41ea:	37 c0       	rjmp	.+110    	; 0x425a <f_lseek+0x1ae>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    41ec:	ed 81       	ldd	r30, Y+5	; 0x05
    41ee:	fe 81       	ldd	r31, Y+6	; 0x06
    41f0:	46 85       	ldd	r20, Z+14	; 0x0e
    41f2:	57 85       	ldd	r21, Z+15	; 0x0f
    41f4:	60 89       	ldd	r22, Z+16	; 0x10
    41f6:	71 89       	ldd	r23, Z+17	; 0x11
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    41f8:	41 15       	cp	r20, r1
    41fa:	51 05       	cpc	r21, r1
    41fc:	61 05       	cpc	r22, r1
    41fe:	71 05       	cpc	r23, r1
    4200:	31 f5       	brne	.+76     	; 0x424e <f_lseek+0x1a2>
					clst = create_chain(fp->fs, 0);
    4202:	40 e0       	ldi	r20, 0x00	; 0
    4204:	50 e0       	ldi	r21, 0x00	; 0
    4206:	ba 01       	movw	r22, r20
    4208:	c8 01       	movw	r24, r16
    420a:	0e 94 2c 18 	call	0x3058	; 0x3058 <create_chain>
    420e:	ab 01       	movw	r20, r22
    4210:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    4212:	41 30       	cpi	r20, 0x01	; 1
    4214:	51 05       	cpc	r21, r1
    4216:	61 05       	cpc	r22, r1
    4218:	71 05       	cpc	r23, r1
    421a:	31 f4       	brne	.+12     	; 0x4228 <f_lseek+0x17c>
    421c:	82 e0       	ldi	r24, 0x02	; 2
    421e:	ad 81       	ldd	r26, Y+5	; 0x05
    4220:	be 81       	ldd	r27, Y+6	; 0x06
    4222:	15 96       	adiw	r26, 0x05	; 5
    4224:	8c 93       	st	X, r24
    4226:	f2 c0       	rjmp	.+484    	; 0x440c <f_lseek+0x360>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    4228:	4f 3f       	cpi	r20, 0xFF	; 255
    422a:	bf ef       	ldi	r27, 0xFF	; 255
    422c:	5b 07       	cpc	r21, r27
    422e:	6b 07       	cpc	r22, r27
    4230:	7b 07       	cpc	r23, r27
    4232:	29 f4       	brne	.+10     	; 0x423e <f_lseek+0x192>
    4234:	81 e0       	ldi	r24, 0x01	; 1
    4236:	ed 81       	ldd	r30, Y+5	; 0x05
    4238:	fe 81       	ldd	r31, Y+6	; 0x06
    423a:	85 83       	std	Z+5, r24	; 0x05
    423c:	e7 c0       	rjmp	.+462    	; 0x440c <f_lseek+0x360>
					fp->sclust = clst;
    423e:	ad 81       	ldd	r26, Y+5	; 0x05
    4240:	be 81       	ldd	r27, Y+6	; 0x06
    4242:	1e 96       	adiw	r26, 0x0e	; 14
    4244:	4d 93       	st	X+, r20
    4246:	5d 93       	st	X+, r21
    4248:	6d 93       	st	X+, r22
    424a:	7c 93       	st	X, r23
    424c:	51 97       	sbiw	r26, 0x11	; 17
				}
#endif
				fp->clust = clst;
    424e:	ed 81       	ldd	r30, Y+5	; 0x05
    4250:	fe 81       	ldd	r31, Y+6	; 0x06
    4252:	42 8b       	std	Z+18, r20	; 0x12
    4254:	53 8b       	std	Z+19, r21	; 0x13
    4256:	64 8b       	std	Z+20, r22	; 0x14
    4258:	75 8b       	std	Z+21, r23	; 0x15
			}
			if (clst != 0) {
    425a:	41 15       	cp	r20, r1
    425c:	51 05       	cpc	r21, r1
    425e:	61 05       	cpc	r22, r1
    4260:	71 05       	cpc	r23, r1
    4262:	09 f4       	brne	.+2      	; 0x4266 <f_lseek+0x1ba>
    4264:	99 c0       	rjmp	.+306    	; 0x4398 <f_lseek+0x2ec>
				while (ofs > bcs) {						/* Cluster following loop */
    4266:	8c 14       	cp	r8, r12
    4268:	9d 04       	cpc	r9, r13
    426a:	ae 04       	cpc	r10, r14
    426c:	bf 04       	cpc	r11, r15
    426e:	08 f0       	brcs	.+2      	; 0x4272 <f_lseek+0x1c6>
    4270:	5f c0       	rjmp	.+190    	; 0x4330 <f_lseek+0x284>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    4272:	ad 81       	ldd	r26, Y+5	; 0x05
    4274:	be 81       	ldd	r27, Y+6	; 0x06
    4276:	14 96       	adiw	r26, 0x04	; 4
    4278:	8c 91       	ld	r24, X
    427a:	14 97       	sbiw	r26, 0x04	; 4
    427c:	81 ff       	sbrs	r24, 1
    427e:	0c c0       	rjmp	.+24     	; 0x4298 <f_lseek+0x1ec>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    4280:	8d 91       	ld	r24, X+
    4282:	9c 91       	ld	r25, X
    4284:	0e 94 2c 18 	call	0x3058	; 0x3058 <create_chain>
    4288:	ab 01       	movw	r20, r22
    428a:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    428c:	41 15       	cp	r20, r1
    428e:	51 05       	cpc	r21, r1
    4290:	61 05       	cpc	r22, r1
    4292:	71 05       	cpc	r23, r1
    4294:	49 f4       	brne	.+18     	; 0x42a8 <f_lseek+0x1fc>
    4296:	4a c0       	rjmp	.+148    	; 0x432c <f_lseek+0x280>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    4298:	ad 81       	ldd	r26, Y+5	; 0x05
    429a:	be 81       	ldd	r27, Y+6	; 0x06
    429c:	8d 91       	ld	r24, X+
    429e:	9c 91       	ld	r25, X
    42a0:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <get_fat>
    42a4:	ab 01       	movw	r20, r22
    42a6:	bc 01       	movw	r22, r24
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    42a8:	4f 3f       	cpi	r20, 0xFF	; 255
    42aa:	bf ef       	ldi	r27, 0xFF	; 255
    42ac:	5b 07       	cpc	r21, r27
    42ae:	6b 07       	cpc	r22, r27
    42b0:	7b 07       	cpc	r23, r27
    42b2:	29 f4       	brne	.+10     	; 0x42be <f_lseek+0x212>
    42b4:	ed 81       	ldd	r30, Y+5	; 0x05
    42b6:	fe 81       	ldd	r31, Y+6	; 0x06
    42b8:	81 e0       	ldi	r24, 0x01	; 1
    42ba:	85 83       	std	Z+5, r24	; 0x05
    42bc:	a7 c0       	rjmp	.+334    	; 0x440c <f_lseek+0x360>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    42be:	42 30       	cpi	r20, 0x02	; 2
    42c0:	51 05       	cpc	r21, r1
    42c2:	61 05       	cpc	r22, r1
    42c4:	71 05       	cpc	r23, r1
    42c6:	68 f0       	brcs	.+26     	; 0x42e2 <f_lseek+0x236>
    42c8:	ad 81       	ldd	r26, Y+5	; 0x05
    42ca:	be 81       	ldd	r27, Y+6	; 0x06
    42cc:	ed 91       	ld	r30, X+
    42ce:	fc 91       	ld	r31, X
    42d0:	82 89       	ldd	r24, Z+18	; 0x12
    42d2:	93 89       	ldd	r25, Z+19	; 0x13
    42d4:	a4 89       	ldd	r26, Z+20	; 0x14
    42d6:	b5 89       	ldd	r27, Z+21	; 0x15
    42d8:	48 17       	cp	r20, r24
    42da:	59 07       	cpc	r21, r25
    42dc:	6a 07       	cpc	r22, r26
    42de:	7b 07       	cpc	r23, r27
    42e0:	28 f0       	brcs	.+10     	; 0x42ec <f_lseek+0x240>
    42e2:	ed 81       	ldd	r30, Y+5	; 0x05
    42e4:	fe 81       	ldd	r31, Y+6	; 0x06
    42e6:	82 e0       	ldi	r24, 0x02	; 2
    42e8:	85 83       	std	Z+5, r24	; 0x05
    42ea:	90 c0       	rjmp	.+288    	; 0x440c <f_lseek+0x360>
					fp->clust = clst;
    42ec:	ad 81       	ldd	r26, Y+5	; 0x05
    42ee:	be 81       	ldd	r27, Y+6	; 0x06
    42f0:	52 96       	adiw	r26, 0x12	; 18
    42f2:	4d 93       	st	X+, r20
    42f4:	5d 93       	st	X+, r21
    42f6:	6d 93       	st	X+, r22
    42f8:	7c 93       	st	X, r23
    42fa:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    42fc:	fd 01       	movw	r30, r26
    42fe:	86 81       	ldd	r24, Z+6	; 0x06
    4300:	97 81       	ldd	r25, Z+7	; 0x07
    4302:	a0 85       	ldd	r26, Z+8	; 0x08
    4304:	b1 85       	ldd	r27, Z+9	; 0x09
    4306:	88 0d       	add	r24, r8
    4308:	99 1d       	adc	r25, r9
    430a:	aa 1d       	adc	r26, r10
    430c:	bb 1d       	adc	r27, r11
    430e:	86 83       	std	Z+6, r24	; 0x06
    4310:	97 83       	std	Z+7, r25	; 0x07
    4312:	a0 87       	std	Z+8, r26	; 0x08
    4314:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    4316:	c8 18       	sub	r12, r8
    4318:	d9 08       	sbc	r13, r9
    431a:	ea 08       	sbc	r14, r10
    431c:	fb 08       	sbc	r15, r11
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    431e:	8c 14       	cp	r8, r12
    4320:	9d 04       	cpc	r9, r13
    4322:	ae 04       	cpc	r10, r14
    4324:	bf 04       	cpc	r11, r15
    4326:	08 f4       	brcc	.+2      	; 0x432a <f_lseek+0x27e>
    4328:	a4 cf       	rjmp	.-184    	; 0x4272 <f_lseek+0x1c6>
    432a:	02 c0       	rjmp	.+4      	; 0x4330 <f_lseek+0x284>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
    432c:	75 01       	movw	r14, r10
    432e:	64 01       	movw	r12, r8
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    4330:	ed 81       	ldd	r30, Y+5	; 0x05
    4332:	fe 81       	ldd	r31, Y+6	; 0x06
    4334:	86 81       	ldd	r24, Z+6	; 0x06
    4336:	97 81       	ldd	r25, Z+7	; 0x07
    4338:	a0 85       	ldd	r26, Z+8	; 0x08
    433a:	b1 85       	ldd	r27, Z+9	; 0x09
    433c:	8c 0d       	add	r24, r12
    433e:	9d 1d       	adc	r25, r13
    4340:	ae 1d       	adc	r26, r14
    4342:	bf 1d       	adc	r27, r15
    4344:	86 83       	std	Z+6, r24	; 0x06
    4346:	97 83       	std	Z+7, r25	; 0x07
    4348:	a0 87       	std	Z+8, r26	; 0x08
    434a:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    434c:	d7 01       	movw	r26, r14
    434e:	c6 01       	movw	r24, r12
    4350:	91 70       	andi	r25, 0x01	; 1
    4352:	aa 27       	eor	r26, r26
    4354:	bb 27       	eor	r27, r27
    4356:	89 2b       	or	r24, r25
    4358:	8a 2b       	or	r24, r26
    435a:	8b 2b       	or	r24, r27
    435c:	09 f1       	breq	.+66     	; 0x43a0 <f_lseek+0x2f4>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    435e:	80 81       	ld	r24, Z
    4360:	91 81       	ldd	r25, Z+1	; 0x01
    4362:	0e 94 39 15 	call	0x2a72	; 0x2a72 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    4366:	61 15       	cp	r22, r1
    4368:	71 05       	cpc	r23, r1
    436a:	81 05       	cpc	r24, r1
    436c:	91 05       	cpc	r25, r1
    436e:	31 f4       	brne	.+12     	; 0x437c <f_lseek+0x2d0>
    4370:	82 e0       	ldi	r24, 0x02	; 2
    4372:	ad 81       	ldd	r26, Y+5	; 0x05
    4374:	be 81       	ldd	r27, Y+6	; 0x06
    4376:	15 96       	adiw	r26, 0x05	; 5
    4378:	8c 93       	st	X, r24
    437a:	48 c0       	rjmp	.+144    	; 0x440c <f_lseek+0x360>
					nsect += ofs / SS(fp->fs);
    437c:	0b 2e       	mov	r0, r27
    437e:	b9 e0       	ldi	r27, 0x09	; 9
    4380:	f6 94       	lsr	r15
    4382:	e7 94       	ror	r14
    4384:	d7 94       	ror	r13
    4386:	c7 94       	ror	r12
    4388:	ba 95       	dec	r27
    438a:	d1 f7       	brne	.-12     	; 0x4380 <f_lseek+0x2d4>
    438c:	b0 2d       	mov	r27, r0
    438e:	c6 0e       	add	r12, r22
    4390:	d7 1e       	adc	r13, r23
    4392:	e8 1e       	adc	r14, r24
    4394:	f9 1e       	adc	r15, r25
    4396:	07 c0       	rjmp	.+14     	; 0x43a6 <f_lseek+0x2fa>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    4398:	c1 2c       	mov	r12, r1
    439a:	d1 2c       	mov	r13, r1
    439c:	76 01       	movw	r14, r12
    439e:	03 c0       	rjmp	.+6      	; 0x43a6 <f_lseek+0x2fa>
    43a0:	c1 2c       	mov	r12, r1
    43a2:	d1 2c       	mov	r13, r1
    43a4:	76 01       	movw	r14, r12
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    43a6:	ed 81       	ldd	r30, Y+5	; 0x05
    43a8:	fe 81       	ldd	r31, Y+6	; 0x06
    43aa:	86 81       	ldd	r24, Z+6	; 0x06
    43ac:	97 81       	ldd	r25, Z+7	; 0x07
    43ae:	a0 85       	ldd	r26, Z+8	; 0x08
    43b0:	b1 85       	ldd	r27, Z+9	; 0x09
    43b2:	ac 01       	movw	r20, r24
    43b4:	bd 01       	movw	r22, r26
    43b6:	51 70       	andi	r21, 0x01	; 1
    43b8:	66 27       	eor	r22, r22
    43ba:	77 27       	eor	r23, r23
    43bc:	45 2b       	or	r20, r21
    43be:	46 2b       	or	r20, r22
    43c0:	47 2b       	or	r20, r23
    43c2:	69 f0       	breq	.+26     	; 0x43de <f_lseek+0x332>
    43c4:	46 89       	ldd	r20, Z+22	; 0x16
    43c6:	57 89       	ldd	r21, Z+23	; 0x17
    43c8:	60 8d       	ldd	r22, Z+24	; 0x18
    43ca:	71 8d       	ldd	r23, Z+25	; 0x19
    43cc:	c4 16       	cp	r12, r20
    43ce:	d5 06       	cpc	r13, r21
    43d0:	e6 06       	cpc	r14, r22
    43d2:	f7 06       	cpc	r15, r23
    43d4:	21 f0       	breq	.+8      	; 0x43de <f_lseek+0x332>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    43d6:	c6 8a       	std	Z+22, r12	; 0x16
    43d8:	d7 8a       	std	Z+23, r13	; 0x17
    43da:	e0 8e       	std	Z+24, r14	; 0x18
    43dc:	f1 8e       	std	Z+25, r15	; 0x19
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    43de:	ed 81       	ldd	r30, Y+5	; 0x05
    43e0:	fe 81       	ldd	r31, Y+6	; 0x06
    43e2:	42 85       	ldd	r20, Z+10	; 0x0a
    43e4:	53 85       	ldd	r21, Z+11	; 0x0b
    43e6:	64 85       	ldd	r22, Z+12	; 0x0c
    43e8:	75 85       	ldd	r23, Z+13	; 0x0d
    43ea:	48 17       	cp	r20, r24
    43ec:	59 07       	cpc	r21, r25
    43ee:	6a 07       	cpc	r22, r26
    43f0:	7b 07       	cpc	r23, r27
    43f2:	58 f4       	brcc	.+22     	; 0x440a <f_lseek+0x35e>
			fp->fsize = fp->fptr;
    43f4:	82 87       	std	Z+10, r24	; 0x0a
    43f6:	93 87       	std	Z+11, r25	; 0x0b
    43f8:	a4 87       	std	Z+12, r26	; 0x0c
    43fa:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA__WRITTEN;
    43fc:	84 81       	ldd	r24, Z+4	; 0x04
    43fe:	80 62       	ori	r24, 0x20	; 32
    4400:	84 83       	std	Z+4, r24	; 0x04
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
    4402:	80 e0       	ldi	r24, 0x00	; 0
    4404:	03 c0       	rjmp	.+6      	; 0x440c <f_lseek+0x360>
    4406:	80 e0       	ldi	r24, 0x00	; 0
    4408:	01 c0       	rjmp	.+2      	; 0x440c <f_lseek+0x360>
    440a:	80 e0       	ldi	r24, 0x00	; 0
}
    440c:	26 96       	adiw	r28, 0x06	; 6
    440e:	0f b6       	in	r0, 0x3f	; 63
    4410:	f8 94       	cli
    4412:	de bf       	out	0x3e, r29	; 62
    4414:	0f be       	out	0x3f, r0	; 63
    4416:	cd bf       	out	0x3d, r28	; 61
    4418:	df 91       	pop	r29
    441a:	cf 91       	pop	r28
    441c:	1f 91       	pop	r17
    441e:	0f 91       	pop	r16
    4420:	ff 90       	pop	r15
    4422:	ef 90       	pop	r14
    4424:	df 90       	pop	r13
    4426:	cf 90       	pop	r12
    4428:	bf 90       	pop	r11
    442a:	af 90       	pop	r10
    442c:	9f 90       	pop	r9
    442e:	8f 90       	pop	r8
    4430:	7f 90       	pop	r7
    4432:	6f 90       	pop	r6
    4434:	5f 90       	pop	r5
    4436:	4f 90       	pop	r4
    4438:	08 95       	ret

0000443a <xchg_spi>:
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    443a:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
    443c:	0d b4       	in	r0, 0x2d	; 45
    443e:	07 fe       	sbrs	r0, 7
    4440:	fd cf       	rjmp	.-6      	; 0x443c <xchg_spi+0x2>
	return SPDR;
    4442:	8e b5       	in	r24, 0x2e	; 46
}
    4444:	08 95       	ret

00004446 <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
    4446:	29 9a       	sbi	0x05, 1	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    4448:	8f ef       	ldi	r24, 0xFF	; 255
    444a:	0e 94 1d 22 	call	0x443a	; 0x443a <xchg_spi>
    444e:	08 95       	ret

00004450 <select>:

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	//PORTB = (0 << 1) | (0 << 2) | (0 << 3);
	CS_LOW();		/* Set CS# low */
    4450:	29 98       	cbi	0x05, 1	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
    4452:	8f ef       	ldi	r24, 0xFF	; 255
    4454:	0e 94 1d 22 	call	0x443a	; 0x443a <xchg_spi>
)
{
	BYTE d;


	Timer2 = wt / 10;
    4458:	82 e3       	ldi	r24, 0x32	; 50
    445a:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <Timer2>
	do
		d = xchg_spi(0xFF);
    445e:	8f ef       	ldi	r24, 0xFF	; 255
    4460:	0e 94 1d 22 	call	0x443a	; 0x443a <xchg_spi>
	while (d != 0xFF && Timer2);
    4464:	8f 3f       	cpi	r24, 0xFF	; 255
    4466:	49 f0       	breq	.+18     	; 0x447a <select+0x2a>
    4468:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <Timer2>
    446c:	81 11       	cpse	r24, r1
    446e:	f7 cf       	rjmp	.-18     	; 0x445e <select+0xe>
	//PORTB = (0 << 1) | (0 << 2) | (0 << 3);
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */

	deselect();
    4470:	0e 94 23 22 	call	0x4446	; 0x4446 <deselect>
	return 0;	/* Timeout */
    4474:	80 e0       	ldi	r24, 0x00	; 0
    4476:	90 e0       	ldi	r25, 0x00	; 0
    4478:	08 95       	ret
int select (void)	/* 1:Successful, 0:Timeout */
{
	//PORTB = (0 << 1) | (0 << 2) | (0 << 3);
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */
    447a:	81 e0       	ldi	r24, 0x01	; 1
    447c:	90 e0       	ldi	r25, 0x00	; 0

	deselect();
	return 0;	/* Timeout */
}
    447e:	08 95       	ret

00004480 <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    4480:	0f 93       	push	r16
    4482:	1f 93       	push	r17
    4484:	cf 93       	push	r28
    4486:	df 93       	push	r29
    4488:	08 2f       	mov	r16, r24
    448a:	19 2f       	mov	r17, r25
    448c:	eb 01       	movw	r28, r22
	BYTE token;


	Timer1 = 20;
    448e:	84 e1       	ldi	r24, 0x14	; 20
    4490:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <Timer1>
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
    4494:	8f ef       	ldi	r24, 0xFF	; 255
    4496:	0e 94 1d 22 	call	0x443a	; 0x443a <xchg_spi>
	} while ((token == 0xFF) && Timer1);
    449a:	8f 3f       	cpi	r24, 0xFF	; 255
    449c:	39 f4       	brne	.+14     	; 0x44ac <rcvr_datablock+0x2c>
    449e:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <Timer1>
    44a2:	81 11       	cpse	r24, r1
    44a4:	f7 cf       	rjmp	.-18     	; 0x4494 <rcvr_datablock+0x14>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    44a6:	80 e0       	ldi	r24, 0x00	; 0
    44a8:	90 e0       	ldi	r25, 0x00	; 0
    44aa:	22 c0       	rjmp	.+68     	; 0x44f0 <rcvr_datablock+0x70>
    44ac:	8e 3f       	cpi	r24, 0xFE	; 254
    44ae:	f1 f4       	brne	.+60     	; 0x44ec <rcvr_datablock+0x6c>
    44b0:	e0 2f       	mov	r30, r16
    44b2:	f1 2f       	mov	r31, r17
	BYTE *p,	/* Data buffer */
	UINT cnt	/* Size of data block (must be multiple of 2) */
)
{
	do {
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
    44b4:	8f ef       	ldi	r24, 0xFF	; 255
    44b6:	8e bd       	out	0x2e, r24	; 46
    44b8:	0d b4       	in	r0, 0x2d	; 45
    44ba:	07 fe       	sbrs	r0, 7
    44bc:	fd cf       	rjmp	.-6      	; 0x44b8 <rcvr_datablock+0x38>
    44be:	9e b5       	in	r25, 0x2e	; 46
    44c0:	df 01       	movw	r26, r30
    44c2:	90 83       	st	Z, r25
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
    44c4:	8e bd       	out	0x2e, r24	; 46
    44c6:	0d b4       	in	r0, 0x2d	; 45
    44c8:	07 fe       	sbrs	r0, 7
    44ca:	fd cf       	rjmp	.-6      	; 0x44c6 <rcvr_datablock+0x46>
    44cc:	9e b5       	in	r25, 0x2e	; 46
    44ce:	11 96       	adiw	r26, 0x01	; 1
    44d0:	9c 93       	st	X, r25
	} while (cnt -= 2);
    44d2:	22 97       	sbiw	r28, 0x02	; 2
    44d4:	32 96       	adiw	r30, 0x02	; 2
    44d6:	20 97       	sbiw	r28, 0x00	; 0
    44d8:	71 f7       	brne	.-36     	; 0x44b6 <rcvr_datablock+0x36>
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
    44da:	8f ef       	ldi	r24, 0xFF	; 255
    44dc:	0e 94 1d 22 	call	0x443a	; 0x443a <xchg_spi>
	xchg_spi(0xFF);
    44e0:	8f ef       	ldi	r24, 0xFF	; 255
    44e2:	0e 94 1d 22 	call	0x443a	; 0x443a <xchg_spi>

	return 1;						/* Return with success */
    44e6:	81 e0       	ldi	r24, 0x01	; 1
    44e8:	90 e0       	ldi	r25, 0x00	; 0
    44ea:	02 c0       	rjmp	.+4      	; 0x44f0 <rcvr_datablock+0x70>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    44ec:	80 e0       	ldi	r24, 0x00	; 0
    44ee:	90 e0       	ldi	r25, 0x00	; 0
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
}
    44f0:	df 91       	pop	r29
    44f2:	cf 91       	pop	r28
    44f4:	1f 91       	pop	r17
    44f6:	0f 91       	pop	r16
    44f8:	08 95       	ret

000044fa <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    44fa:	ff 92       	push	r15
    44fc:	0f 93       	push	r16
    44fe:	1f 93       	push	r17
    4500:	cf 93       	push	r28
    4502:	df 93       	push	r29
    4504:	c8 2f       	mov	r28, r24
    4506:	d4 2f       	mov	r29, r20
    4508:	15 2f       	mov	r17, r21
    450a:	06 2f       	mov	r16, r22
    450c:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    450e:	88 23       	and	r24, r24
    4510:	54 f4       	brge	.+20     	; 0x4526 <send_cmd+0x2c>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    4512:	40 e0       	ldi	r20, 0x00	; 0
    4514:	50 e0       	ldi	r21, 0x00	; 0
    4516:	ba 01       	movw	r22, r20
    4518:	87 e3       	ldi	r24, 0x37	; 55
    451a:	0e 94 7d 22 	call	0x44fa	; 0x44fa <send_cmd>
		if (res > 1) return res;
    451e:	82 30       	cpi	r24, 0x02	; 2
    4520:	08 f0       	brcs	.+2      	; 0x4524 <send_cmd+0x2a>
    4522:	4e c0       	rjmp	.+156    	; 0x45c0 <send_cmd+0xc6>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    4524:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    4526:	cc 30       	cpi	r28, 0x0C	; 12
    4528:	39 f1       	breq	.+78     	; 0x4578 <send_cmd+0x7e>
		deselect();
    452a:	0e 94 23 22 	call	0x4446	; 0x4446 <deselect>
		if (!select()) return 0xFF;
    452e:	0e 94 28 22 	call	0x4450	; 0x4450 <select>
    4532:	89 2b       	or	r24, r25
    4534:	f9 f0       	breq	.+62     	; 0x4574 <send_cmd+0x7a>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
    4536:	8c 2f       	mov	r24, r28
    4538:	80 64       	ori	r24, 0x40	; 64
    453a:	0e 94 1d 22 	call	0x443a	; 0x443a <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    453e:	8f 2d       	mov	r24, r15
    4540:	0e 94 1d 22 	call	0x443a	; 0x443a <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    4544:	80 2f       	mov	r24, r16
    4546:	0e 94 1d 22 	call	0x443a	; 0x443a <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    454a:	81 2f       	mov	r24, r17
    454c:	0e 94 1d 22 	call	0x443a	; 0x443a <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
    4550:	8d 2f       	mov	r24, r29
    4552:	0e 94 1d 22 	call	0x443a	; 0x443a <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
    4556:	cc 23       	and	r28, r28
    4558:	79 f1       	breq	.+94     	; 0x45b8 <send_cmd+0xbe>
    455a:	2b c0       	rjmp	.+86     	; 0x45b2 <send_cmd+0xb8>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
    455c:	8f ef       	ldi	r24, 0xFF	; 255
    455e:	0e 94 1d 22 	call	0x443a	; 0x443a <xchg_spi>
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    4562:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
    4564:	8f ef       	ldi	r24, 0xFF	; 255
    4566:	0e 94 1d 22 	call	0x443a	; 0x443a <xchg_spi>
	while ((res & 0x80) && --n);
    456a:	88 23       	and	r24, r24
    456c:	4c f5       	brge	.+82     	; 0x45c0 <send_cmd+0xc6>
    456e:	c1 50       	subi	r28, 0x01	; 1
    4570:	c9 f7       	brne	.-14     	; 0x4564 <send_cmd+0x6a>
    4572:	26 c0       	rjmp	.+76     	; 0x45c0 <send_cmd+0xc6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
    4574:	8f ef       	ldi	r24, 0xFF	; 255
    4576:	24 c0       	rjmp	.+72     	; 0x45c0 <send_cmd+0xc6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
    4578:	8c e4       	ldi	r24, 0x4C	; 76
    457a:	0e 94 1d 22 	call	0x443a	; 0x443a <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    457e:	8f 2d       	mov	r24, r15
    4580:	0e 94 1d 22 	call	0x443a	; 0x443a <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    4584:	80 2f       	mov	r24, r16
    4586:	0e 94 1d 22 	call	0x443a	; 0x443a <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    458a:	81 2f       	mov	r24, r17
    458c:	0e 94 1d 22 	call	0x443a	; 0x443a <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
    4590:	8d 2f       	mov	r24, r29
    4592:	0e 94 1d 22 	call	0x443a	; 0x443a <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
    4596:	81 e0       	ldi	r24, 0x01	; 1
    4598:	0e 94 1d 22 	call	0x443a	; 0x443a <xchg_spi>

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
    459c:	cc 30       	cpi	r28, 0x0C	; 12
    459e:	f1 f2       	breq	.-68     	; 0x455c <send_cmd+0x62>
    45a0:	e0 cf       	rjmp	.-64     	; 0x4562 <send_cmd+0x68>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);
    45a2:	87 e8       	ldi	r24, 0x87	; 135
    45a4:	0e 94 1d 22 	call	0x443a	; 0x443a <xchg_spi>
    45a8:	dc cf       	rjmp	.-72     	; 0x4562 <send_cmd+0x68>
    45aa:	81 e0       	ldi	r24, 0x01	; 1
    45ac:	0e 94 1d 22 	call	0x443a	; 0x443a <xchg_spi>
    45b0:	d8 cf       	rjmp	.-80     	; 0x4562 <send_cmd+0x68>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    45b2:	c8 30       	cpi	r28, 0x08	; 8
    45b4:	b1 f3       	breq	.-20     	; 0x45a2 <send_cmd+0xa8>
    45b6:	f9 cf       	rjmp	.-14     	; 0x45aa <send_cmd+0xb0>
	xchg_spi(n);
    45b8:	85 e9       	ldi	r24, 0x95	; 149
    45ba:	0e 94 1d 22 	call	0x443a	; 0x443a <xchg_spi>
    45be:	d1 cf       	rjmp	.-94     	; 0x4562 <send_cmd+0x68>
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
    45c0:	df 91       	pop	r29
    45c2:	cf 91       	pop	r28
    45c4:	1f 91       	pop	r17
    45c6:	0f 91       	pop	r16
    45c8:	ff 90       	pop	r15
    45ca:	08 95       	ret

000045cc <xmit_datablock>:
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    45cc:	1f 93       	push	r17
    45ce:	cf 93       	push	r28
    45d0:	df 93       	push	r29
    45d2:	ec 01       	movw	r28, r24
    45d4:	16 2f       	mov	r17, r22
)
{
	BYTE d;


	Timer2 = wt / 10;
    45d6:	82 e3       	ldi	r24, 0x32	; 50
    45d8:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <Timer2>
	do
		d = xchg_spi(0xFF);
    45dc:	8f ef       	ldi	r24, 0xFF	; 255
    45de:	0e 94 1d 22 	call	0x443a	; 0x443a <xchg_spi>
	while (d != 0xFF && Timer2);
    45e2:	8f 3f       	cpi	r24, 0xFF	; 255
    45e4:	31 f0       	breq	.+12     	; 0x45f2 <xmit_datablock+0x26>
    45e6:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <Timer2>
    45ea:	81 11       	cpse	r24, r1
    45ec:	f7 cf       	rjmp	.-18     	; 0x45dc <xmit_datablock+0x10>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
    45ee:	90 e0       	ldi	r25, 0x00	; 0
    45f0:	2b c0       	rjmp	.+86     	; 0x4648 <xmit_datablock+0x7c>

	xchg_spi(token);					/* Xmit data token */
    45f2:	81 2f       	mov	r24, r17
    45f4:	0e 94 1d 22 	call	0x443a	; 0x443a <xchg_spi>
	if (token != 0xFD) {	/* Is data token */
    45f8:	1d 3f       	cpi	r17, 0xFD	; 253
    45fa:	21 f1       	breq	.+72     	; 0x4644 <xmit_datablock+0x78>
    45fc:	fe 01       	movw	r30, r28
    45fe:	9e 01       	movw	r18, r28
    4600:	3e 5f       	subi	r19, 0xFE	; 254
    4602:	df 01       	movw	r26, r30
	const BYTE *p,	/* Data block to be sent */
	UINT cnt		/* Size of data block (must be multiple of 2) */
)
{
	do {
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
    4604:	90 81       	ld	r25, Z
    4606:	9e bd       	out	0x2e, r25	; 46
    4608:	0d b4       	in	r0, 0x2d	; 45
    460a:	07 fe       	sbrs	r0, 7
    460c:	fd cf       	rjmp	.-6      	; 0x4608 <xmit_datablock+0x3c>
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
    460e:	11 96       	adiw	r26, 0x01	; 1
    4610:	9c 91       	ld	r25, X
    4612:	9e bd       	out	0x2e, r25	; 46
    4614:	0d b4       	in	r0, 0x2d	; 45
    4616:	07 fe       	sbrs	r0, 7
    4618:	fd cf       	rjmp	.-6      	; 0x4614 <xmit_datablock+0x48>
    461a:	32 96       	adiw	r30, 0x02	; 2
	} while (cnt -= 2);
    461c:	e2 17       	cp	r30, r18
    461e:	f3 07       	cpc	r31, r19
    4620:	81 f7       	brne	.-32     	; 0x4602 <xmit_datablock+0x36>
	if (!wait_ready(500)) return 0;

	xchg_spi(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, 512);		/* Xmit the data block to the MMC */
		xchg_spi(0xFF);					/* CRC (Dummy) */
    4622:	8f ef       	ldi	r24, 0xFF	; 255
    4624:	0e 94 1d 22 	call	0x443a	; 0x443a <xchg_spi>
		xchg_spi(0xFF);
    4628:	8f ef       	ldi	r24, 0xFF	; 255
    462a:	0e 94 1d 22 	call	0x443a	; 0x443a <xchg_spi>
		resp = xchg_spi(0xFF);			/* Reveive data response */
    462e:	8f ef       	ldi	r24, 0xFF	; 255
    4630:	0e 94 1d 22 	call	0x443a	; 0x443a <xchg_spi>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
    4634:	28 2f       	mov	r18, r24
    4636:	2f 71       	andi	r18, 0x1F	; 31
    4638:	81 e0       	ldi	r24, 0x01	; 1
    463a:	90 e0       	ldi	r25, 0x00	; 0
    463c:	25 30       	cpi	r18, 0x05	; 5
    463e:	21 f0       	breq	.+8      	; 0x4648 <xmit_datablock+0x7c>
    4640:	80 e0       	ldi	r24, 0x00	; 0
    4642:	02 c0       	rjmp	.+4      	; 0x4648 <xmit_datablock+0x7c>
		resp = xchg_spi(0xFF);			/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return 0;
	}

	return 1;
    4644:	81 e0       	ldi	r24, 0x01	; 1
    4646:	90 e0       	ldi	r25, 0x00	; 0
}
    4648:	df 91       	pop	r29
    464a:	cf 91       	pop	r28
    464c:	1f 91       	pop	r17
    464e:	08 95       	ret

00004650 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
    4650:	cf 92       	push	r12
    4652:	df 92       	push	r13
    4654:	ef 92       	push	r14
    4656:	ff 92       	push	r15
    4658:	0f 93       	push	r16
    465a:	1f 93       	push	r17
    465c:	cf 93       	push	r28
    465e:	df 93       	push	r29
    4660:	00 d0       	rcall	.+0      	; 0x4662 <disk_initialize+0x12>
    4662:	00 d0       	rcall	.+0      	; 0x4664 <disk_initialize+0x14>
    4664:	cd b7       	in	r28, 0x3d	; 61
    4666:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    4668:	81 11       	cpse	r24, r1
    466a:	9c c0       	rjmp	.+312    	; 0x47a4 <disk_initialize+0x154>
	//power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    466c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Stat>
    4670:	81 ff       	sbrs	r24, 1
    4672:	03 c0       	rjmp	.+6      	; 0x467a <disk_initialize+0x2a>
    4674:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Stat>
    4678:	a2 c0       	rjmp	.+324    	; 0x47be <disk_initialize+0x16e>
	//power_on();							/* Turn on the socket power */
	FCLK_SLOW();
    467a:	82 e5       	ldi	r24, 0x52	; 82
    467c:	8c bd       	out	0x2c, r24	; 44
    467e:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
    4680:	8f ef       	ldi	r24, 0xFF	; 255
    4682:	0e 94 1d 22 	call	0x443a	; 0x443a <xchg_spi>
    4686:	11 50       	subi	r17, 0x01	; 1
    4688:	d9 f7       	brne	.-10     	; 0x4680 <disk_initialize+0x30>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    468a:	40 e0       	ldi	r20, 0x00	; 0
    468c:	50 e0       	ldi	r21, 0x00	; 0
    468e:	ba 01       	movw	r22, r20
    4690:	80 e0       	ldi	r24, 0x00	; 0
    4692:	0e 94 7d 22 	call	0x44fa	; 0x44fa <send_cmd>
    4696:	81 30       	cpi	r24, 0x01	; 1
    4698:	09 f0       	breq	.+2      	; 0x469c <disk_initialize+0x4c>
    469a:	8c c0       	rjmp	.+280    	; 0x47b4 <disk_initialize+0x164>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    469c:	84 e6       	ldi	r24, 0x64	; 100
    469e:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <Timer1>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    46a2:	4a ea       	ldi	r20, 0xAA	; 170
    46a4:	51 e0       	ldi	r21, 0x01	; 1
    46a6:	60 e0       	ldi	r22, 0x00	; 0
    46a8:	70 e0       	ldi	r23, 0x00	; 0
    46aa:	88 e0       	ldi	r24, 0x08	; 8
    46ac:	0e 94 7d 22 	call	0x44fa	; 0x44fa <send_cmd>
    46b0:	81 30       	cpi	r24, 0x01	; 1
    46b2:	09 f0       	breq	.+2      	; 0x46b6 <disk_initialize+0x66>
    46b4:	41 c0       	rjmp	.+130    	; 0x4738 <disk_initialize+0xe8>
    46b6:	ce 01       	movw	r24, r28
    46b8:	01 96       	adiw	r24, 0x01	; 1
    46ba:	6c 01       	movw	r12, r24
    46bc:	7e 01       	movw	r14, r28
    46be:	95 e0       	ldi	r25, 0x05	; 5
    46c0:	e9 0e       	add	r14, r25
    46c2:	f1 1c       	adc	r15, r1
    46c4:	86 01       	movw	r16, r12
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
    46c6:	8f ef       	ldi	r24, 0xFF	; 255
    46c8:	0e 94 1d 22 	call	0x443a	; 0x443a <xchg_spi>
    46cc:	f8 01       	movw	r30, r16
    46ce:	81 93       	st	Z+, r24
    46d0:	8f 01       	movw	r16, r30
    46d2:	ee 16       	cp	r14, r30
    46d4:	ff 06       	cpc	r15, r31
    46d6:	b9 f7       	brne	.-18     	; 0x46c6 <disk_initialize+0x76>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    46d8:	8b 81       	ldd	r24, Y+3	; 0x03
    46da:	81 30       	cpi	r24, 0x01	; 1
    46dc:	09 f0       	breq	.+2      	; 0x46e0 <disk_initialize+0x90>
    46de:	6a c0       	rjmp	.+212    	; 0x47b4 <disk_initialize+0x164>
    46e0:	8c 81       	ldd	r24, Y+4	; 0x04
    46e2:	8a 3a       	cpi	r24, 0xAA	; 170
    46e4:	09 f0       	breq	.+2      	; 0x46e8 <disk_initialize+0x98>
    46e6:	66 c0       	rjmp	.+204    	; 0x47b4 <disk_initialize+0x164>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    46e8:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <Timer1>
    46ec:	88 23       	and	r24, r24
    46ee:	49 f0       	breq	.+18     	; 0x4702 <disk_initialize+0xb2>
    46f0:	40 e0       	ldi	r20, 0x00	; 0
    46f2:	50 e0       	ldi	r21, 0x00	; 0
    46f4:	60 e0       	ldi	r22, 0x00	; 0
    46f6:	70 e4       	ldi	r23, 0x40	; 64
    46f8:	89 ea       	ldi	r24, 0xA9	; 169
    46fa:	0e 94 7d 22 	call	0x44fa	; 0x44fa <send_cmd>
    46fe:	81 11       	cpse	r24, r1
    4700:	f3 cf       	rjmp	.-26     	; 0x46e8 <disk_initialize+0x98>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    4702:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <Timer1>
    4706:	88 23       	and	r24, r24
    4708:	09 f4       	brne	.+2      	; 0x470c <disk_initialize+0xbc>
    470a:	54 c0       	rjmp	.+168    	; 0x47b4 <disk_initialize+0x164>
    470c:	40 e0       	ldi	r20, 0x00	; 0
    470e:	50 e0       	ldi	r21, 0x00	; 0
    4710:	ba 01       	movw	r22, r20
    4712:	8a e3       	ldi	r24, 0x3A	; 58
    4714:	0e 94 7d 22 	call	0x44fa	; 0x44fa <send_cmd>
    4718:	81 11       	cpse	r24, r1
    471a:	4c c0       	rjmp	.+152    	; 0x47b4 <disk_initialize+0x164>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    471c:	8f ef       	ldi	r24, 0xFF	; 255
    471e:	0e 94 1d 22 	call	0x443a	; 0x443a <xchg_spi>
    4722:	f6 01       	movw	r30, r12
    4724:	81 93       	st	Z+, r24
    4726:	6f 01       	movw	r12, r30
    4728:	ee 16       	cp	r14, r30
    472a:	ff 06       	cpc	r15, r31
    472c:	b9 f7       	brne	.-18     	; 0x471c <disk_initialize+0xcc>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    472e:	89 81       	ldd	r24, Y+1	; 0x01
    4730:	86 fd       	sbrc	r24, 6
    4732:	3a c0       	rjmp	.+116    	; 0x47a8 <disk_initialize+0x158>
    4734:	84 e0       	ldi	r24, 0x04	; 4
    4736:	39 c0       	rjmp	.+114    	; 0x47aa <disk_initialize+0x15a>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    4738:	40 e0       	ldi	r20, 0x00	; 0
    473a:	50 e0       	ldi	r21, 0x00	; 0
    473c:	ba 01       	movw	r22, r20
    473e:	89 ea       	ldi	r24, 0xA9	; 169
    4740:	0e 94 7d 22 	call	0x44fa	; 0x44fa <send_cmd>
    4744:	82 30       	cpi	r24, 0x02	; 2
    4746:	18 f0       	brcs	.+6      	; 0x474e <disk_initialize+0xfe>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    4748:	01 e0       	ldi	r16, 0x01	; 1
    474a:	11 e0       	ldi	r17, 0x01	; 1
    474c:	02 c0       	rjmp	.+4      	; 0x4752 <disk_initialize+0x102>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    474e:	02 e0       	ldi	r16, 0x02	; 2
    4750:	19 ea       	ldi	r17, 0xA9	; 169
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    4752:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <Timer1>
    4756:	88 23       	and	r24, r24
    4758:	41 f0       	breq	.+16     	; 0x476a <disk_initialize+0x11a>
    475a:	40 e0       	ldi	r20, 0x00	; 0
    475c:	50 e0       	ldi	r21, 0x00	; 0
    475e:	ba 01       	movw	r22, r20
    4760:	81 2f       	mov	r24, r17
    4762:	0e 94 7d 22 	call	0x44fa	; 0x44fa <send_cmd>
    4766:	81 11       	cpse	r24, r1
    4768:	f4 cf       	rjmp	.-24     	; 0x4752 <disk_initialize+0x102>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    476a:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <Timer1>
    476e:	88 23       	and	r24, r24
    4770:	09 f1       	breq	.+66     	; 0x47b4 <disk_initialize+0x164>
    4772:	40 e0       	ldi	r20, 0x00	; 0
    4774:	52 e0       	ldi	r21, 0x02	; 2
    4776:	60 e0       	ldi	r22, 0x00	; 0
    4778:	70 e0       	ldi	r23, 0x00	; 0
    477a:	80 e1       	ldi	r24, 0x10	; 16
    477c:	0e 94 7d 22 	call	0x44fa	; 0x44fa <send_cmd>
    4780:	81 11       	cpse	r24, r1
    4782:	18 c0       	rjmp	.+48     	; 0x47b4 <disk_initialize+0x164>
				ty = 0;
		}
	}
	CardType = ty;
    4784:	00 93 ed 03 	sts	0x03ED, r16	; 0x8003ed <CardType>
	deselect();
    4788:	0e 94 23 22 	call	0x4446	; 0x4446 <deselect>

	if (ty) {			/* Initialization succeded */
    478c:	00 23       	and	r16, r16
    478e:	39 f0       	breq	.+14     	; 0x479e <disk_initialize+0x14e>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    4790:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Stat>
    4794:	8e 7f       	andi	r24, 0xFE	; 254
    4796:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <Stat>
		FCLK_FAST();
    479a:	80 e5       	ldi	r24, 0x50	; 80
    479c:	8c bd       	out	0x2c, r24	; 44
	} else {			/* Initialization failed */
		//power_off();
	}

	return Stat;
    479e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Stat>
    47a2:	0d c0       	rjmp	.+26     	; 0x47be <disk_initialize+0x16e>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    47a4:	81 e0       	ldi	r24, 0x01	; 1
    47a6:	0b c0       	rjmp	.+22     	; 0x47be <disk_initialize+0x16e>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    47a8:	8c e0       	ldi	r24, 0x0C	; 12
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    47aa:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <CardType>
	deselect();
    47ae:	0e 94 23 22 	call	0x4446	; 0x4446 <deselect>
    47b2:	ee cf       	rjmp	.-36     	; 0x4790 <disk_initialize+0x140>
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    47b4:	10 92 ed 03 	sts	0x03ED, r1	; 0x8003ed <CardType>
	deselect();
    47b8:	0e 94 23 22 	call	0x4446	; 0x4446 <deselect>
    47bc:	f0 cf       	rjmp	.-32     	; 0x479e <disk_initialize+0x14e>
	} else {			/* Initialization failed */
		//power_off();
	}

	return Stat;
}
    47be:	0f 90       	pop	r0
    47c0:	0f 90       	pop	r0
    47c2:	0f 90       	pop	r0
    47c4:	0f 90       	pop	r0
    47c6:	df 91       	pop	r29
    47c8:	cf 91       	pop	r28
    47ca:	1f 91       	pop	r17
    47cc:	0f 91       	pop	r16
    47ce:	ff 90       	pop	r15
    47d0:	ef 90       	pop	r14
    47d2:	df 90       	pop	r13
    47d4:	cf 90       	pop	r12
    47d6:	08 95       	ret

000047d8 <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    47d8:	81 11       	cpse	r24, r1
    47da:	03 c0       	rjmp	.+6      	; 0x47e2 <disk_status+0xa>
	return Stat;
    47dc:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Stat>
    47e0:	08 95       	ret

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    47e2:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
    47e4:	08 95       	ret

000047e6 <disk_read>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    47e6:	ff 92       	push	r15
    47e8:	0f 93       	push	r16
    47ea:	1f 93       	push	r17
    47ec:	cf 93       	push	r28
    47ee:	df 93       	push	r29
    47f0:	eb 01       	movw	r28, r22
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    47f2:	81 11       	cpse	r24, r1
    47f4:	43 c0       	rjmp	.+134    	; 0x487c <disk_read+0x96>
    47f6:	01 15       	cp	r16, r1
    47f8:	11 05       	cpc	r17, r1
    47fa:	09 f4       	brne	.+2      	; 0x47fe <disk_read+0x18>
    47fc:	41 c0       	rjmp	.+130    	; 0x4880 <disk_read+0x9a>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    47fe:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Stat>
    4802:	80 fd       	sbrc	r24, 0
    4804:	3f c0       	rjmp	.+126    	; 0x4884 <disk_read+0x9e>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    4806:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <CardType>
    480a:	83 fd       	sbrc	r24, 3
    480c:	09 c0       	rjmp	.+18     	; 0x4820 <disk_read+0x3a>
    480e:	01 2e       	mov	r0, r17
    4810:	19 e0       	ldi	r17, 0x09	; 9
    4812:	22 0f       	add	r18, r18
    4814:	33 1f       	adc	r19, r19
    4816:	44 1f       	adc	r20, r20
    4818:	55 1f       	adc	r21, r21
    481a:	1a 95       	dec	r17
    481c:	d1 f7       	brne	.-12     	; 0x4812 <disk_read+0x2c>
    481e:	10 2d       	mov	r17, r0

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    4820:	02 30       	cpi	r16, 0x02	; 2
    4822:	11 05       	cpc	r17, r1
    4824:	28 f4       	brcc	.+10     	; 0x4830 <disk_read+0x4a>
    4826:	0f 2e       	mov	r0, r31
    4828:	f1 e1       	ldi	r31, 0x11	; 17
    482a:	ff 2e       	mov	r15, r31
    482c:	f0 2d       	mov	r31, r0
    482e:	04 c0       	rjmp	.+8      	; 0x4838 <disk_read+0x52>
    4830:	0f 2e       	mov	r0, r31
    4832:	f2 e1       	ldi	r31, 0x12	; 18
    4834:	ff 2e       	mov	r15, r31
    4836:	f0 2d       	mov	r31, r0
	if (send_cmd(cmd, sector) == 0) {
    4838:	ba 01       	movw	r22, r20
    483a:	a9 01       	movw	r20, r18
    483c:	8f 2d       	mov	r24, r15
    483e:	0e 94 7d 22 	call	0x44fa	; 0x44fa <send_cmd>
    4842:	81 11       	cpse	r24, r1
    4844:	14 c0       	rjmp	.+40     	; 0x486e <disk_read+0x88>
		do {
			if (!rcvr_datablock(buff, 512)) break;
    4846:	60 e0       	ldi	r22, 0x00	; 0
    4848:	72 e0       	ldi	r23, 0x02	; 2
    484a:	ce 01       	movw	r24, r28
    484c:	0e 94 40 22 	call	0x4480	; 0x4480 <rcvr_datablock>
    4850:	89 2b       	or	r24, r25
    4852:	21 f0       	breq	.+8      	; 0x485c <disk_read+0x76>
			buff += 512;
    4854:	de 5f       	subi	r29, 0xFE	; 254
		} while (--count);
    4856:	01 50       	subi	r16, 0x01	; 1
    4858:	11 09       	sbc	r17, r1
    485a:	a9 f7       	brne	.-22     	; 0x4846 <disk_read+0x60>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    485c:	82 e1       	ldi	r24, 0x12	; 18
    485e:	f8 12       	cpse	r15, r24
    4860:	06 c0       	rjmp	.+12     	; 0x486e <disk_read+0x88>
    4862:	40 e0       	ldi	r20, 0x00	; 0
    4864:	50 e0       	ldi	r21, 0x00	; 0
    4866:	ba 01       	movw	r22, r20
    4868:	8c e0       	ldi	r24, 0x0C	; 12
    486a:	0e 94 7d 22 	call	0x44fa	; 0x44fa <send_cmd>
	}
	deselect();
    486e:	0e 94 23 22 	call	0x4446	; 0x4446 <deselect>

	return count ? RES_ERROR : RES_OK;
    4872:	81 e0       	ldi	r24, 0x01	; 1
    4874:	01 2b       	or	r16, r17
    4876:	39 f4       	brne	.+14     	; 0x4886 <disk_read+0xa0>
    4878:	80 e0       	ldi	r24, 0x00	; 0
    487a:	05 c0       	rjmp	.+10     	; 0x4886 <disk_read+0xa0>
)
{
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    487c:	84 e0       	ldi	r24, 0x04	; 4
    487e:	03 c0       	rjmp	.+6      	; 0x4886 <disk_read+0xa0>
    4880:	84 e0       	ldi	r24, 0x04	; 4
    4882:	01 c0       	rjmp	.+2      	; 0x4886 <disk_read+0xa0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    4884:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    4886:	df 91       	pop	r29
    4888:	cf 91       	pop	r28
    488a:	1f 91       	pop	r17
    488c:	0f 91       	pop	r16
    488e:	ff 90       	pop	r15
    4890:	08 95       	ret

00004892 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    4892:	cf 92       	push	r12
    4894:	df 92       	push	r13
    4896:	ef 92       	push	r14
    4898:	ff 92       	push	r15
    489a:	0f 93       	push	r16
    489c:	1f 93       	push	r17
    489e:	cf 93       	push	r28
    48a0:	df 93       	push	r29
    48a2:	eb 01       	movw	r28, r22
    48a4:	69 01       	movw	r12, r18
    48a6:	7a 01       	movw	r14, r20
	if (pdrv || !count) return RES_PARERR;
    48a8:	81 11       	cpse	r24, r1
    48aa:	58 c0       	rjmp	.+176    	; 0x495c <disk_write+0xca>
    48ac:	01 15       	cp	r16, r1
    48ae:	11 05       	cpc	r17, r1
    48b0:	09 f4       	brne	.+2      	; 0x48b4 <disk_write+0x22>
    48b2:	56 c0       	rjmp	.+172    	; 0x4960 <disk_write+0xce>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    48b4:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Stat>
    48b8:	80 fd       	sbrc	r24, 0
    48ba:	54 c0       	rjmp	.+168    	; 0x4964 <disk_write+0xd2>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    48bc:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Stat>
    48c0:	82 fd       	sbrc	r24, 2
    48c2:	52 c0       	rjmp	.+164    	; 0x4968 <disk_write+0xd6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    48c4:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <CardType>
    48c8:	83 fd       	sbrc	r24, 3
    48ca:	09 c0       	rjmp	.+18     	; 0x48de <disk_write+0x4c>
    48cc:	0b 2e       	mov	r0, r27
    48ce:	b9 e0       	ldi	r27, 0x09	; 9
    48d0:	cc 0c       	add	r12, r12
    48d2:	dd 1c       	adc	r13, r13
    48d4:	ee 1c       	adc	r14, r14
    48d6:	ff 1c       	adc	r15, r15
    48d8:	ba 95       	dec	r27
    48da:	d1 f7       	brne	.-12     	; 0x48d0 <disk_write+0x3e>
    48dc:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
    48de:	01 30       	cpi	r16, 0x01	; 1
    48e0:	11 05       	cpc	r17, r1
    48e2:	99 f4       	brne	.+38     	; 0x490a <disk_write+0x78>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    48e4:	b7 01       	movw	r22, r14
    48e6:	a6 01       	movw	r20, r12
    48e8:	88 e1       	ldi	r24, 0x18	; 24
    48ea:	0e 94 7d 22 	call	0x44fa	; 0x44fa <send_cmd>
    48ee:	81 11       	cpse	r24, r1
    48f0:	2e c0       	rjmp	.+92     	; 0x494e <disk_write+0xbc>
			&& xmit_datablock(buff, 0xFE))
    48f2:	6e ef       	ldi	r22, 0xFE	; 254
    48f4:	ce 01       	movw	r24, r28
    48f6:	0e 94 e6 22 	call	0x45cc	; 0x45cc <xmit_datablock>
    48fa:	31 e0       	ldi	r19, 0x01	; 1
    48fc:	20 e0       	ldi	r18, 0x00	; 0
    48fe:	89 2b       	or	r24, r25
    4900:	09 f0       	breq	.+2      	; 0x4904 <disk_write+0x72>
    4902:	30 e0       	ldi	r19, 0x00	; 0
    4904:	03 2f       	mov	r16, r19
    4906:	12 2f       	mov	r17, r18
    4908:	22 c0       	rjmp	.+68     	; 0x494e <disk_write+0xbc>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    490a:	86 70       	andi	r24, 0x06	; 6
    490c:	31 f0       	breq	.+12     	; 0x491a <disk_write+0x88>
    490e:	a8 01       	movw	r20, r16
    4910:	60 e0       	ldi	r22, 0x00	; 0
    4912:	70 e0       	ldi	r23, 0x00	; 0
    4914:	87 e9       	ldi	r24, 0x97	; 151
    4916:	0e 94 7d 22 	call	0x44fa	; 0x44fa <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    491a:	b7 01       	movw	r22, r14
    491c:	a6 01       	movw	r20, r12
    491e:	89 e1       	ldi	r24, 0x19	; 25
    4920:	0e 94 7d 22 	call	0x44fa	; 0x44fa <send_cmd>
    4924:	81 11       	cpse	r24, r1
    4926:	13 c0       	rjmp	.+38     	; 0x494e <disk_write+0xbc>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    4928:	6c ef       	ldi	r22, 0xFC	; 252
    492a:	ce 01       	movw	r24, r28
    492c:	0e 94 e6 22 	call	0x45cc	; 0x45cc <xmit_datablock>
    4930:	89 2b       	or	r24, r25
    4932:	21 f0       	breq	.+8      	; 0x493c <disk_write+0xaa>
				buff += 512;
    4934:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    4936:	01 50       	subi	r16, 0x01	; 1
    4938:	11 09       	sbc	r17, r1
    493a:	b1 f7       	brne	.-20     	; 0x4928 <disk_write+0x96>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    493c:	6d ef       	ldi	r22, 0xFD	; 253
    493e:	80 e0       	ldi	r24, 0x00	; 0
    4940:	90 e0       	ldi	r25, 0x00	; 0
    4942:	0e 94 e6 22 	call	0x45cc	; 0x45cc <xmit_datablock>
    4946:	89 2b       	or	r24, r25
    4948:	11 f4       	brne	.+4      	; 0x494e <disk_write+0xbc>
				count = 1;
    494a:	01 e0       	ldi	r16, 0x01	; 1
    494c:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	deselect();
    494e:	0e 94 23 22 	call	0x4446	; 0x4446 <deselect>

	return count ? RES_ERROR : RES_OK;
    4952:	81 e0       	ldi	r24, 0x01	; 1
    4954:	01 2b       	or	r16, r17
    4956:	49 f4       	brne	.+18     	; 0x496a <disk_write+0xd8>
    4958:	80 e0       	ldi	r24, 0x00	; 0
    495a:	07 c0       	rjmp	.+14     	; 0x496a <disk_write+0xd8>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (pdrv || !count) return RES_PARERR;
    495c:	84 e0       	ldi	r24, 0x04	; 4
    495e:	05 c0       	rjmp	.+10     	; 0x496a <disk_write+0xd8>
    4960:	84 e0       	ldi	r24, 0x04	; 4
    4962:	03 c0       	rjmp	.+6      	; 0x496a <disk_write+0xd8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    4964:	83 e0       	ldi	r24, 0x03	; 3
    4966:	01 c0       	rjmp	.+2      	; 0x496a <disk_write+0xd8>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    4968:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    496a:	df 91       	pop	r29
    496c:	cf 91       	pop	r28
    496e:	1f 91       	pop	r17
    4970:	0f 91       	pop	r16
    4972:	ff 90       	pop	r15
    4974:	ef 90       	pop	r14
    4976:	df 90       	pop	r13
    4978:	cf 90       	pop	r12
    497a:	08 95       	ret

0000497c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    497c:	ef 92       	push	r14
    497e:	ff 92       	push	r15
    4980:	0f 93       	push	r16
    4982:	1f 93       	push	r17
    4984:	cf 93       	push	r28
    4986:	df 93       	push	r29
    4988:	cd b7       	in	r28, 0x3d	; 61
    498a:	de b7       	in	r29, 0x3e	; 62
    498c:	60 97       	sbiw	r28, 0x10	; 16
    498e:	0f b6       	in	r0, 0x3f	; 63
    4990:	f8 94       	cli
    4992:	de bf       	out	0x3e, r29	; 62
    4994:	0f be       	out	0x3f, r0	; 63
    4996:	cd bf       	out	0x3d, r28	; 61
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    4998:	81 11       	cpse	r24, r1
    499a:	92 c1       	rjmp	.+804    	; 0x4cc0 <disk_ioctl+0x344>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    499c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Stat>
    49a0:	80 fd       	sbrc	r24, 0
    49a2:	90 c1       	rjmp	.+800    	; 0x4cc4 <disk_ioctl+0x348>
    49a4:	8a 01       	movw	r16, r20

	switch (cmd) {
    49a6:	86 2f       	mov	r24, r22
    49a8:	90 e0       	ldi	r25, 0x00	; 0
    49aa:	87 33       	cpi	r24, 0x37	; 55
    49ac:	91 05       	cpc	r25, r1
    49ae:	08 f0       	brcs	.+2      	; 0x49b2 <disk_ioctl+0x36>
    49b0:	6e c1       	rjmp	.+732    	; 0x4c8e <disk_ioctl+0x312>
    49b2:	fc 01       	movw	r30, r24
    49b4:	ec 5c       	subi	r30, 0xCC	; 204
    49b6:	ff 4f       	sbci	r31, 0xFF	; 255
    49b8:	0c 94 f8 2d 	jmp	0x5bf0	; 0x5bf0 <__tablejump2__>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    49bc:	0e 94 28 22 	call	0x4450	; 0x4450 <select>
    49c0:	11 e0       	ldi	r17, 0x01	; 1
    49c2:	89 2b       	or	r24, r25
    49c4:	09 f4       	brne	.+2      	; 0x49c8 <disk_ioctl+0x4c>
    49c6:	78 c1       	rjmp	.+752    	; 0x4cb8 <disk_ioctl+0x33c>
    49c8:	10 e0       	ldi	r17, 0x00	; 0
    49ca:	76 c1       	rjmp	.+748    	; 0x4cb8 <disk_ioctl+0x33c>
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    49cc:	40 e0       	ldi	r20, 0x00	; 0
    49ce:	50 e0       	ldi	r21, 0x00	; 0
    49d0:	ba 01       	movw	r22, r20
    49d2:	89 e0       	ldi	r24, 0x09	; 9
    49d4:	0e 94 7d 22 	call	0x44fa	; 0x44fa <send_cmd>
    49d8:	81 11       	cpse	r24, r1
    49da:	5b c1       	rjmp	.+694    	; 0x4c92 <disk_ioctl+0x316>
    49dc:	60 e1       	ldi	r22, 0x10	; 16
    49de:	70 e0       	ldi	r23, 0x00	; 0
    49e0:	ce 01       	movw	r24, r28
    49e2:	01 96       	adiw	r24, 0x01	; 1
    49e4:	0e 94 40 22 	call	0x4480	; 0x4480 <rcvr_datablock>
    49e8:	89 2b       	or	r24, r25
    49ea:	09 f4       	brne	.+2      	; 0x49ee <disk_ioctl+0x72>
    49ec:	54 c1       	rjmp	.+680    	; 0x4c96 <disk_ioctl+0x31a>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    49ee:	89 81       	ldd	r24, Y+1	; 0x01
    49f0:	82 95       	swap	r24
    49f2:	86 95       	lsr	r24
    49f4:	86 95       	lsr	r24
    49f6:	83 70       	andi	r24, 0x03	; 3
    49f8:	81 30       	cpi	r24, 0x01	; 1
    49fa:	31 f5       	brne	.+76     	; 0x4a48 <disk_ioctl+0xcc>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
    49fc:	29 85       	ldd	r18, Y+9	; 0x09
    49fe:	30 e0       	ldi	r19, 0x00	; 0
    4a00:	32 2f       	mov	r19, r18
    4a02:	22 27       	eor	r18, r18
    4a04:	8a 85       	ldd	r24, Y+10	; 0x0a
    4a06:	28 0f       	add	r18, r24
    4a08:	31 1d       	adc	r19, r1
    4a0a:	88 85       	ldd	r24, Y+8	; 0x08
    4a0c:	8f 73       	andi	r24, 0x3F	; 63
    4a0e:	90 e0       	ldi	r25, 0x00	; 0
    4a10:	a0 e0       	ldi	r26, 0x00	; 0
    4a12:	b0 e0       	ldi	r27, 0x00	; 0
    4a14:	dc 01       	movw	r26, r24
    4a16:	99 27       	eor	r25, r25
    4a18:	88 27       	eor	r24, r24
    4a1a:	01 96       	adiw	r24, 0x01	; 1
    4a1c:	a1 1d       	adc	r26, r1
    4a1e:	b1 1d       	adc	r27, r1
    4a20:	82 0f       	add	r24, r18
    4a22:	93 1f       	adc	r25, r19
    4a24:	a1 1d       	adc	r26, r1
    4a26:	b1 1d       	adc	r27, r1
    4a28:	07 2e       	mov	r0, r23
    4a2a:	7a e0       	ldi	r23, 0x0A	; 10
    4a2c:	88 0f       	add	r24, r24
    4a2e:	99 1f       	adc	r25, r25
    4a30:	aa 1f       	adc	r26, r26
    4a32:	bb 1f       	adc	r27, r27
    4a34:	7a 95       	dec	r23
    4a36:	d1 f7       	brne	.-12     	; 0x4a2c <disk_ioctl+0xb0>
    4a38:	70 2d       	mov	r23, r0
    4a3a:	f8 01       	movw	r30, r16
    4a3c:	80 83       	st	Z, r24
    4a3e:	91 83       	std	Z+1, r25	; 0x01
    4a40:	a2 83       	std	Z+2, r26	; 0x02
    4a42:	b3 83       	std	Z+3, r27	; 0x03
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
			}
			res = RES_OK;
    4a44:	10 e0       	ldi	r17, 0x00	; 0
    4a46:	38 c1       	rjmp	.+624    	; 0x4cb8 <disk_ioctl+0x33c>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
    4a48:	89 85       	ldd	r24, Y+9	; 0x09
    4a4a:	82 95       	swap	r24
    4a4c:	86 95       	lsr	r24
    4a4e:	86 95       	lsr	r24
    4a50:	83 70       	andi	r24, 0x03	; 3
    4a52:	28 85       	ldd	r18, Y+8	; 0x08
    4a54:	90 e0       	ldi	r25, 0x00	; 0
    4a56:	f4 e0       	ldi	r31, 0x04	; 4
    4a58:	2f 9f       	mul	r18, r31
    4a5a:	80 0d       	add	r24, r0
    4a5c:	91 1d       	adc	r25, r1
    4a5e:	11 24       	eor	r1, r1
    4a60:	9c 01       	movw	r18, r24
    4a62:	2f 5f       	subi	r18, 0xFF	; 255
    4a64:	3f 4f       	sbci	r19, 0xFF	; 255
    4a66:	8f 81       	ldd	r24, Y+7	; 0x07
    4a68:	83 70       	andi	r24, 0x03	; 3
    4a6a:	90 e0       	ldi	r25, 0x00	; 0
    4a6c:	98 2f       	mov	r25, r24
    4a6e:	88 27       	eor	r24, r24
    4a70:	99 0f       	add	r25, r25
    4a72:	99 0f       	add	r25, r25
    4a74:	82 0f       	add	r24, r18
    4a76:	93 1f       	adc	r25, r19
    4a78:	a0 e0       	ldi	r26, 0x00	; 0
    4a7a:	b0 e0       	ldi	r27, 0x00	; 0
    4a7c:	3e 81       	ldd	r19, Y+6	; 0x06
    4a7e:	3f 70       	andi	r19, 0x0F	; 15
    4a80:	2b 85       	ldd	r18, Y+11	; 0x0b
    4a82:	22 1f       	adc	r18, r18
    4a84:	22 27       	eor	r18, r18
    4a86:	22 1f       	adc	r18, r18
    4a88:	32 0f       	add	r19, r18
    4a8a:	2a 85       	ldd	r18, Y+10	; 0x0a
    4a8c:	23 70       	andi	r18, 0x03	; 3
    4a8e:	22 0f       	add	r18, r18
    4a90:	23 0f       	add	r18, r19
    4a92:	27 50       	subi	r18, 0x07	; 7
    4a94:	04 c0       	rjmp	.+8      	; 0x4a9e <disk_ioctl+0x122>
    4a96:	88 0f       	add	r24, r24
    4a98:	99 1f       	adc	r25, r25
    4a9a:	aa 1f       	adc	r26, r26
    4a9c:	bb 1f       	adc	r27, r27
    4a9e:	2a 95       	dec	r18
    4aa0:	d2 f7       	brpl	.-12     	; 0x4a96 <disk_ioctl+0x11a>
    4aa2:	f8 01       	movw	r30, r16
    4aa4:	80 83       	st	Z, r24
    4aa6:	91 83       	std	Z+1, r25	; 0x01
    4aa8:	a2 83       	std	Z+2, r26	; 0x02
    4aaa:	b3 83       	std	Z+3, r27	; 0x03
			}
			res = RES_OK;
    4aac:	10 e0       	ldi	r17, 0x00	; 0
    4aae:	04 c1       	rjmp	.+520    	; 0x4cb8 <disk_ioctl+0x33c>
		}
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
    4ab0:	f0 90 ed 03 	lds	r15, 0x03ED	; 0x8003ed <CardType>
    4ab4:	f2 fe       	sbrs	r15, 2
    4ab6:	33 c0       	rjmp	.+102    	; 0x4b1e <disk_ioctl+0x1a2>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    4ab8:	40 e0       	ldi	r20, 0x00	; 0
    4aba:	50 e0       	ldi	r21, 0x00	; 0
    4abc:	ba 01       	movw	r22, r20
    4abe:	8d e8       	ldi	r24, 0x8D	; 141
    4ac0:	0e 94 7d 22 	call	0x44fa	; 0x44fa <send_cmd>
    4ac4:	81 11       	cpse	r24, r1
    4ac6:	e9 c0       	rjmp	.+466    	; 0x4c9a <disk_ioctl+0x31e>
				xchg_spi(0xFF);
    4ac8:	8f ef       	ldi	r24, 0xFF	; 255
    4aca:	0e 94 1d 22 	call	0x443a	; 0x443a <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    4ace:	60 e1       	ldi	r22, 0x10	; 16
    4ad0:	70 e0       	ldi	r23, 0x00	; 0
    4ad2:	ce 01       	movw	r24, r28
    4ad4:	01 96       	adiw	r24, 0x01	; 1
    4ad6:	0e 94 40 22 	call	0x4480	; 0x4480 <rcvr_datablock>
    4ada:	89 2b       	or	r24, r25
    4adc:	09 f4       	brne	.+2      	; 0x4ae0 <disk_ioctl+0x164>
    4ade:	df c0       	rjmp	.+446    	; 0x4c9e <disk_ioctl+0x322>
    4ae0:	0f 2e       	mov	r0, r31
    4ae2:	f0 e3       	ldi	r31, 0x30	; 48
    4ae4:	ff 2e       	mov	r15, r31
    4ae6:	f0 2d       	mov	r31, r0
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
    4ae8:	8f ef       	ldi	r24, 0xFF	; 255
    4aea:	0e 94 1d 22 	call	0x443a	; 0x443a <xchg_spi>
    4aee:	fa 94       	dec	r15
    4af0:	f1 10       	cpse	r15, r1
    4af2:	fa cf       	rjmp	.-12     	; 0x4ae8 <disk_ioctl+0x16c>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
    4af4:	2b 85       	ldd	r18, Y+11	; 0x0b
    4af6:	22 95       	swap	r18
    4af8:	2f 70       	andi	r18, 0x0F	; 15
    4afa:	80 e1       	ldi	r24, 0x10	; 16
    4afc:	90 e0       	ldi	r25, 0x00	; 0
    4afe:	a0 e0       	ldi	r26, 0x00	; 0
    4b00:	b0 e0       	ldi	r27, 0x00	; 0
    4b02:	04 c0       	rjmp	.+8      	; 0x4b0c <disk_ioctl+0x190>
    4b04:	88 0f       	add	r24, r24
    4b06:	99 1f       	adc	r25, r25
    4b08:	aa 1f       	adc	r26, r26
    4b0a:	bb 1f       	adc	r27, r27
    4b0c:	2a 95       	dec	r18
    4b0e:	d2 f7       	brpl	.-12     	; 0x4b04 <disk_ioctl+0x188>
    4b10:	f8 01       	movw	r30, r16
    4b12:	80 83       	st	Z, r24
    4b14:	91 83       	std	Z+1, r25	; 0x01
    4b16:	a2 83       	std	Z+2, r26	; 0x02
    4b18:	b3 83       	std	Z+3, r27	; 0x03
					res = RES_OK;
    4b1a:	10 e0       	ldi	r17, 0x00	; 0
    4b1c:	cd c0       	rjmp	.+410    	; 0x4cb8 <disk_ioctl+0x33c>
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    4b1e:	40 e0       	ldi	r20, 0x00	; 0
    4b20:	50 e0       	ldi	r21, 0x00	; 0
    4b22:	ba 01       	movw	r22, r20
    4b24:	89 e0       	ldi	r24, 0x09	; 9
    4b26:	0e 94 7d 22 	call	0x44fa	; 0x44fa <send_cmd>
    4b2a:	81 11       	cpse	r24, r1
    4b2c:	ba c0       	rjmp	.+372    	; 0x4ca2 <disk_ioctl+0x326>
    4b2e:	60 e1       	ldi	r22, 0x10	; 16
    4b30:	70 e0       	ldi	r23, 0x00	; 0
    4b32:	ce 01       	movw	r24, r28
    4b34:	01 96       	adiw	r24, 0x01	; 1
    4b36:	0e 94 40 22 	call	0x4480	; 0x4480 <rcvr_datablock>
    4b3a:	89 2b       	or	r24, r25
    4b3c:	09 f4       	brne	.+2      	; 0x4b40 <disk_ioctl+0x1c4>
    4b3e:	b3 c0       	rjmp	.+358    	; 0x4ca6 <disk_ioctl+0x32a>
				if (CardType & CT_SD1) {	/* SDv1 */
    4b40:	f1 fe       	sbrs	r15, 1
    4b42:	20 c0       	rjmp	.+64     	; 0x4b84 <disk_ioctl+0x208>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    4b44:	2b 85       	ldd	r18, Y+11	; 0x0b
    4b46:	2f 73       	andi	r18, 0x3F	; 63
    4b48:	8c 85       	ldd	r24, Y+12	; 0x0c
    4b4a:	88 1f       	adc	r24, r24
    4b4c:	88 27       	eor	r24, r24
    4b4e:	88 1f       	adc	r24, r24
    4b50:	90 e0       	ldi	r25, 0x00	; 0
    4b52:	01 96       	adiw	r24, 0x01	; 1
    4b54:	82 0f       	add	r24, r18
    4b56:	91 1d       	adc	r25, r1
    4b58:	82 0f       	add	r24, r18
    4b5a:	91 1d       	adc	r25, r1
    4b5c:	2e 85       	ldd	r18, Y+14	; 0x0e
    4b5e:	22 95       	swap	r18
    4b60:	26 95       	lsr	r18
    4b62:	26 95       	lsr	r18
    4b64:	23 70       	andi	r18, 0x03	; 3
    4b66:	21 50       	subi	r18, 0x01	; 1
    4b68:	02 c0       	rjmp	.+4      	; 0x4b6e <disk_ioctl+0x1f2>
    4b6a:	88 0f       	add	r24, r24
    4b6c:	99 1f       	adc	r25, r25
    4b6e:	2a 95       	dec	r18
    4b70:	e2 f7       	brpl	.-8      	; 0x4b6a <disk_ioctl+0x1ee>
    4b72:	a0 e0       	ldi	r26, 0x00	; 0
    4b74:	b0 e0       	ldi	r27, 0x00	; 0
    4b76:	f8 01       	movw	r30, r16
    4b78:	80 83       	st	Z, r24
    4b7a:	91 83       	std	Z+1, r25	; 0x01
    4b7c:	a2 83       	std	Z+2, r26	; 0x02
    4b7e:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
    4b80:	10 e0       	ldi	r17, 0x00	; 0
    4b82:	9a c0       	rjmp	.+308    	; 0x4cb8 <disk_ioctl+0x33c>
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
				if (CardType & CT_SD1) {	/* SDv1 */
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    4b84:	8c 85       	ldd	r24, Y+12	; 0x0c
    4b86:	28 2f       	mov	r18, r24
    4b88:	23 70       	andi	r18, 0x03	; 3
    4b8a:	82 95       	swap	r24
    4b8c:	86 95       	lsr	r24
    4b8e:	87 70       	andi	r24, 0x07	; 7
    4b90:	90 e0       	ldi	r25, 0x00	; 0
    4b92:	f8 e0       	ldi	r31, 0x08	; 8
    4b94:	2f 9f       	mul	r18, r31
    4b96:	80 0d       	add	r24, r0
    4b98:	91 1d       	adc	r25, r1
    4b9a:	11 24       	eor	r1, r1
    4b9c:	01 96       	adiw	r24, 0x01	; 1
    4b9e:	2b 85       	ldd	r18, Y+11	; 0x0b
    4ba0:	2c 77       	andi	r18, 0x7C	; 124
    4ba2:	30 e0       	ldi	r19, 0x00	; 0
    4ba4:	35 95       	asr	r19
    4ba6:	27 95       	ror	r18
    4ba8:	35 95       	asr	r19
    4baa:	27 95       	ror	r18
    4bac:	2f 5f       	subi	r18, 0xFF	; 255
    4bae:	3f 4f       	sbci	r19, 0xFF	; 255
    4bb0:	82 9f       	mul	r24, r18
    4bb2:	a0 01       	movw	r20, r0
    4bb4:	83 9f       	mul	r24, r19
    4bb6:	50 0d       	add	r21, r0
    4bb8:	92 9f       	mul	r25, r18
    4bba:	50 0d       	add	r21, r0
    4bbc:	11 24       	eor	r1, r1
    4bbe:	ca 01       	movw	r24, r20
    4bc0:	a0 e0       	ldi	r26, 0x00	; 0
    4bc2:	b0 e0       	ldi	r27, 0x00	; 0
    4bc4:	f8 01       	movw	r30, r16
    4bc6:	80 83       	st	Z, r24
    4bc8:	91 83       	std	Z+1, r25	; 0x01
    4bca:	a2 83       	std	Z+2, r26	; 0x02
    4bcc:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
    4bce:	10 e0       	ldi	r17, 0x00	; 0
    4bd0:	73 c0       	rjmp	.+230    	; 0x4cb8 <disk_ioctl+0x33c>
		break;

	/* Following commands are never used by FatFs module */

	case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
		*ptr = CardType;
    4bd2:	80 91 ed 03 	lds	r24, 0x03ED	; 0x8003ed <CardType>
    4bd6:	fa 01       	movw	r30, r20
    4bd8:	80 83       	st	Z, r24
		res = RES_OK;
    4bda:	10 e0       	ldi	r17, 0x00	; 0
		break;
    4bdc:	6d c0       	rjmp	.+218    	; 0x4cb8 <disk_ioctl+0x33c>

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    4bde:	40 e0       	ldi	r20, 0x00	; 0
    4be0:	50 e0       	ldi	r21, 0x00	; 0
    4be2:	ba 01       	movw	r22, r20
    4be4:	89 e0       	ldi	r24, 0x09	; 9
    4be6:	0e 94 7d 22 	call	0x44fa	; 0x44fa <send_cmd>
    4bea:	81 11       	cpse	r24, r1
    4bec:	5e c0       	rjmp	.+188    	; 0x4caa <disk_ioctl+0x32e>
			&& rcvr_datablock(ptr, 16))
    4bee:	60 e1       	ldi	r22, 0x10	; 16
    4bf0:	70 e0       	ldi	r23, 0x00	; 0
    4bf2:	c8 01       	movw	r24, r16
    4bf4:	0e 94 40 22 	call	0x4480	; 0x4480 <rcvr_datablock>

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	switch (cmd) {
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    4bf8:	11 e0       	ldi	r17, 0x01	; 1
    4bfa:	89 2b       	or	r24, r25
    4bfc:	09 f4       	brne	.+2      	; 0x4c00 <disk_ioctl+0x284>
    4bfe:	5c c0       	rjmp	.+184    	; 0x4cb8 <disk_ioctl+0x33c>
    4c00:	10 e0       	ldi	r17, 0x00	; 0
    4c02:	5a c0       	rjmp	.+180    	; 0x4cb8 <disk_ioctl+0x33c>
			&& rcvr_datablock(ptr, 16))
			res = RES_OK;
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    4c04:	40 e0       	ldi	r20, 0x00	; 0
    4c06:	50 e0       	ldi	r21, 0x00	; 0
    4c08:	ba 01       	movw	r22, r20
    4c0a:	8a e0       	ldi	r24, 0x0A	; 10
    4c0c:	0e 94 7d 22 	call	0x44fa	; 0x44fa <send_cmd>
    4c10:	81 11       	cpse	r24, r1
    4c12:	4d c0       	rjmp	.+154    	; 0x4cae <disk_ioctl+0x332>
			&& rcvr_datablock(ptr, 16))
    4c14:	60 e1       	ldi	r22, 0x10	; 16
    4c16:	70 e0       	ldi	r23, 0x00	; 0
    4c18:	c8 01       	movw	r24, r16
    4c1a:	0e 94 40 22 	call	0x4480	; 0x4480 <rcvr_datablock>

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	switch (cmd) {
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    4c1e:	11 e0       	ldi	r17, 0x01	; 1
    4c20:	89 2b       	or	r24, r25
    4c22:	09 f4       	brne	.+2      	; 0x4c26 <disk_ioctl+0x2aa>
    4c24:	49 c0       	rjmp	.+146    	; 0x4cb8 <disk_ioctl+0x33c>
    4c26:	10 e0       	ldi	r17, 0x00	; 0
    4c28:	47 c0       	rjmp	.+142    	; 0x4cb8 <disk_ioctl+0x33c>
			&& rcvr_datablock(ptr, 16))
			res = RES_OK;
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    4c2a:	40 e0       	ldi	r20, 0x00	; 0
    4c2c:	50 e0       	ldi	r21, 0x00	; 0
    4c2e:	ba 01       	movw	r22, r20
    4c30:	8a e3       	ldi	r24, 0x3A	; 58
    4c32:	0e 94 7d 22 	call	0x44fa	; 0x44fa <send_cmd>
    4c36:	81 11       	cpse	r24, r1
    4c38:	3c c0       	rjmp	.+120    	; 0x4cb2 <disk_ioctl+0x336>
    4c3a:	78 01       	movw	r14, r16
    4c3c:	0c 5f       	subi	r16, 0xFC	; 252
    4c3e:	1f 4f       	sbci	r17, 0xFF	; 255
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    4c40:	8f ef       	ldi	r24, 0xFF	; 255
    4c42:	0e 94 1d 22 	call	0x443a	; 0x443a <xchg_spi>
    4c46:	f7 01       	movw	r30, r14
    4c48:	81 93       	st	Z+, r24
    4c4a:	7f 01       	movw	r14, r30
    4c4c:	0e 17       	cp	r16, r30
    4c4e:	1f 07       	cpc	r17, r31
    4c50:	b9 f7       	brne	.-18     	; 0x4c40 <disk_ioctl+0x2c4>
			res = RES_OK;
    4c52:	10 e0       	ldi	r17, 0x00	; 0
    4c54:	31 c0       	rjmp	.+98     	; 0x4cb8 <disk_ioctl+0x33c>
		}
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    4c56:	40 e0       	ldi	r20, 0x00	; 0
    4c58:	50 e0       	ldi	r21, 0x00	; 0
    4c5a:	ba 01       	movw	r22, r20
    4c5c:	8d e8       	ldi	r24, 0x8D	; 141
    4c5e:	0e 94 7d 22 	call	0x44fa	; 0x44fa <send_cmd>
    4c62:	81 11       	cpse	r24, r1
    4c64:	28 c0       	rjmp	.+80     	; 0x4cb6 <disk_ioctl+0x33a>
			xchg_spi(0xFF);
    4c66:	8f ef       	ldi	r24, 0xFF	; 255
    4c68:	0e 94 1d 22 	call	0x443a	; 0x443a <xchg_spi>
			if (rcvr_datablock(ptr, 64))
    4c6c:	60 e4       	ldi	r22, 0x40	; 64
    4c6e:	70 e0       	ldi	r23, 0x00	; 0
    4c70:	c8 01       	movw	r24, r16
    4c72:	0e 94 40 22 	call	0x4480	; 0x4480 <rcvr_datablock>

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	switch (cmd) {
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    4c76:	11 e0       	ldi	r17, 0x01	; 1
    4c78:	89 2b       	or	r24, r25
    4c7a:	f1 f0       	breq	.+60     	; 0x4cb8 <disk_ioctl+0x33c>
    4c7c:	10 e0       	ldi	r17, 0x00	; 0
    4c7e:	1c c0       	rjmp	.+56     	; 0x4cb8 <disk_ioctl+0x33c>
		}
		break;

	case CTRL_POWER_OFF :	/* Power off */
		power_off();
		Stat |= STA_NOINIT;
    4c80:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Stat>
    4c84:	81 60       	ori	r24, 0x01	; 1
    4c86:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <Stat>
		res = RES_OK;
    4c8a:	10 e0       	ldi	r17, 0x00	; 0
		break;
    4c8c:	15 c0       	rjmp	.+42     	; 0x4cb8 <disk_ioctl+0x33c>

	default:
		res = RES_PARERR;
    4c8e:	14 e0       	ldi	r17, 0x04	; 4
    4c90:	13 c0       	rjmp	.+38     	; 0x4cb8 <disk_ioctl+0x33c>
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    4c92:	11 e0       	ldi	r17, 0x01	; 1
    4c94:	11 c0       	rjmp	.+34     	; 0x4cb8 <disk_ioctl+0x33c>
    4c96:	11 e0       	ldi	r17, 0x01	; 1
    4c98:	0f c0       	rjmp	.+30     	; 0x4cb8 <disk_ioctl+0x33c>
    4c9a:	11 e0       	ldi	r17, 0x01	; 1
    4c9c:	0d c0       	rjmp	.+26     	; 0x4cb8 <disk_ioctl+0x33c>
    4c9e:	11 e0       	ldi	r17, 0x01	; 1
    4ca0:	0b c0       	rjmp	.+22     	; 0x4cb8 <disk_ioctl+0x33c>
    4ca2:	11 e0       	ldi	r17, 0x01	; 1
    4ca4:	09 c0       	rjmp	.+18     	; 0x4cb8 <disk_ioctl+0x33c>
    4ca6:	11 e0       	ldi	r17, 0x01	; 1
    4ca8:	07 c0       	rjmp	.+14     	; 0x4cb8 <disk_ioctl+0x33c>
    4caa:	11 e0       	ldi	r17, 0x01	; 1
    4cac:	05 c0       	rjmp	.+10     	; 0x4cb8 <disk_ioctl+0x33c>
    4cae:	11 e0       	ldi	r17, 0x01	; 1
    4cb0:	03 c0       	rjmp	.+6      	; 0x4cb8 <disk_ioctl+0x33c>
    4cb2:	11 e0       	ldi	r17, 0x01	; 1
    4cb4:	01 c0       	rjmp	.+2      	; 0x4cb8 <disk_ioctl+0x33c>
    4cb6:	11 e0       	ldi	r17, 0x01	; 1

	default:
		res = RES_PARERR;
	}

	deselect();
    4cb8:	0e 94 23 22 	call	0x4446	; 0x4446 <deselect>

	return res;
    4cbc:	81 2f       	mov	r24, r17
    4cbe:	03 c0       	rjmp	.+6      	; 0x4cc6 <disk_ioctl+0x34a>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    4cc0:	84 e0       	ldi	r24, 0x04	; 4
    4cc2:	01 c0       	rjmp	.+2      	; 0x4cc6 <disk_ioctl+0x34a>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    4cc4:	83 e0       	ldi	r24, 0x03	; 3
	}

	deselect();

	return res;
}
    4cc6:	60 96       	adiw	r28, 0x10	; 16
    4cc8:	0f b6       	in	r0, 0x3f	; 63
    4cca:	f8 94       	cli
    4ccc:	de bf       	out	0x3e, r29	; 62
    4cce:	0f be       	out	0x3f, r0	; 63
    4cd0:	cd bf       	out	0x3d, r28	; 61
    4cd2:	df 91       	pop	r29
    4cd4:	cf 91       	pop	r28
    4cd6:	1f 91       	pop	r17
    4cd8:	0f 91       	pop	r16
    4cda:	ff 90       	pop	r15
    4cdc:	ef 90       	pop	r14
    4cde:	08 95       	ret

00004ce0 <hih8120_measure>:

float hih8120_humidity = 1;
float hih8120_temperature_C = 1;

void hih8120_measure()
{
    4ce0:	0f 93       	push	r16
    4ce2:	1f 93       	push	r17
    4ce4:	cf 93       	push	r28
    4ce6:	df 93       	push	r29
	i2c_start_wait(0x27 << 1);
    4ce8:	8e e4       	ldi	r24, 0x4E	; 78
    4cea:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <i2c_start_wait>
	i2c_write((uint8_t) 0x01);
    4cee:	81 e0       	ldi	r24, 0x01	; 1
    4cf0:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <i2c_write>
	i2c_stop();
    4cf4:	0e 94 1c 27 	call	0x4e38	; 0x4e38 <i2c_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4cf8:	2f ef       	ldi	r18, 0xFF	; 255
    4cfa:	80 e7       	ldi	r24, 0x70	; 112
    4cfc:	92 e0       	ldi	r25, 0x02	; 2
    4cfe:	21 50       	subi	r18, 0x01	; 1
    4d00:	80 40       	sbci	r24, 0x00	; 0
    4d02:	90 40       	sbci	r25, 0x00	; 0
    4d04:	e1 f7       	brne	.-8      	; 0x4cfe <hih8120_measure+0x1e>
    4d06:	00 c0       	rjmp	.+0      	; 0x4d08 <hih8120_measure+0x28>
    4d08:	00 00       	nop
	
	_delay_ms(100);
	
	i2c_start_wait((0x27 << 1) | I2C_READ);
    4d0a:	8f e4       	ldi	r24, 0x4F	; 79
    4d0c:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <i2c_start_wait>
	
	uint8_t humidity_hi = i2c_readAck();
    4d10:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <i2c_readAck>
    4d14:	18 2f       	mov	r17, r24
	uint8_t humidity_lo = i2c_readAck();
    4d16:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <i2c_readAck>
    4d1a:	d8 2f       	mov	r29, r24
	uint8_t temp_hi = i2c_readAck();
    4d1c:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <i2c_readAck>
    4d20:	08 2f       	mov	r16, r24
	uint8_t temp_lo = i2c_readNak();
    4d22:	0e 94 42 27 	call	0x4e84	; 0x4e84 <i2c_readNak>
    4d26:	c8 2f       	mov	r28, r24
	
	i2c_stop();
    4d28:	0e 94 1c 27 	call	0x4e38	; 0x4e38 <i2c_stop>
	
	// Calculate Relative Humidity
	hih8120_humidity = (float)((((humidity_hi & 0x3f) << 8) | humidity_lo) / ((pow(2,14) - 2)) * 100);
    4d2c:	1f 73       	andi	r17, 0x3F	; 63
    4d2e:	6d 2f       	mov	r22, r29
    4d30:	70 e0       	ldi	r23, 0x00	; 0
    4d32:	71 2b       	or	r23, r17
    4d34:	07 2e       	mov	r0, r23
    4d36:	00 0c       	add	r0, r0
    4d38:	88 0b       	sbc	r24, r24
    4d3a:	99 0b       	sbc	r25, r25
    4d3c:	0e 94 56 2c 	call	0x58ac	; 0x58ac <__floatsisf>
    4d40:	20 e0       	ldi	r18, 0x00	; 0
    4d42:	38 ef       	ldi	r19, 0xF8	; 248
    4d44:	4f e7       	ldi	r20, 0x7F	; 127
    4d46:	56 e4       	ldi	r21, 0x46	; 70
    4d48:	0e 94 a6 2b 	call	0x574c	; 0x574c <__divsf3>
    4d4c:	20 e0       	ldi	r18, 0x00	; 0
    4d4e:	30 e0       	ldi	r19, 0x00	; 0
    4d50:	48 ec       	ldi	r20, 0xC8	; 200
    4d52:	52 e4       	ldi	r21, 0x42	; 66
    4d54:	0e 94 59 2d 	call	0x5ab2	; 0x5ab2 <__mulsf3>
    4d58:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <hih8120_humidity>
    4d5c:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <hih8120_humidity+0x1>
    4d60:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <hih8120_humidity+0x2>
    4d64:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <hih8120_humidity+0x3>

	// Calculate Temperature
	hih8120_temperature_C = (float) ((((temp_hi << 6) + (temp_lo >> 2)) / (pow(2, 14) - 2)) * 165 - 40);
    4d68:	c6 95       	lsr	r28
    4d6a:	c6 95       	lsr	r28
    4d6c:	6c 2f       	mov	r22, r28
    4d6e:	70 e0       	ldi	r23, 0x00	; 0
    4d70:	20 e4       	ldi	r18, 0x40	; 64
    4d72:	02 9f       	mul	r16, r18
    4d74:	60 0d       	add	r22, r0
    4d76:	71 1d       	adc	r23, r1
    4d78:	11 24       	eor	r1, r1
    4d7a:	07 2e       	mov	r0, r23
    4d7c:	00 0c       	add	r0, r0
    4d7e:	88 0b       	sbc	r24, r24
    4d80:	99 0b       	sbc	r25, r25
    4d82:	0e 94 56 2c 	call	0x58ac	; 0x58ac <__floatsisf>
    4d86:	20 e0       	ldi	r18, 0x00	; 0
    4d88:	38 ef       	ldi	r19, 0xF8	; 248
    4d8a:	4f e7       	ldi	r20, 0x7F	; 127
    4d8c:	56 e4       	ldi	r21, 0x46	; 70
    4d8e:	0e 94 a6 2b 	call	0x574c	; 0x574c <__divsf3>
    4d92:	20 e0       	ldi	r18, 0x00	; 0
    4d94:	30 e0       	ldi	r19, 0x00	; 0
    4d96:	45 e2       	ldi	r20, 0x25	; 37
    4d98:	53 e4       	ldi	r21, 0x43	; 67
    4d9a:	0e 94 59 2d 	call	0x5ab2	; 0x5ab2 <__mulsf3>
    4d9e:	20 e0       	ldi	r18, 0x00	; 0
    4da0:	30 e0       	ldi	r19, 0x00	; 0
    4da2:	40 e2       	ldi	r20, 0x20	; 32
    4da4:	52 e4       	ldi	r21, 0x42	; 66
    4da6:	0e 94 34 2b 	call	0x5668	; 0x5668 <__subsf3>
    4daa:	60 93 19 01 	sts	0x0119, r22	; 0x800119 <hih8120_temperature_C>
    4dae:	70 93 1a 01 	sts	0x011A, r23	; 0x80011a <hih8120_temperature_C+0x1>
    4db2:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <hih8120_temperature_C+0x2>
    4db6:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <hih8120_temperature_C+0x3>
}
    4dba:	df 91       	pop	r29
    4dbc:	cf 91       	pop	r28
    4dbe:	1f 91       	pop	r17
    4dc0:	0f 91       	pop	r16
    4dc2:	08 95       	ret

00004dc4 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    4dc4:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    4dc8:	88 e4       	ldi	r24, 0x48	; 72
    4dca:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    4dce:	84 e0       	ldi	r24, 0x04	; 4
    4dd0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    4dd4:	08 95       	ret

00004dd6 <i2c_start_wait>:
    4dd6:	cf 93       	push	r28
    4dd8:	df 93       	push	r29
    4dda:	ec eb       	ldi	r30, 0xBC	; 188
    4ddc:	f0 e0       	ldi	r31, 0x00	; 0
    4dde:	24 ea       	ldi	r18, 0xA4	; 164
    4de0:	a9 eb       	ldi	r26, 0xB9	; 185
    4de2:	b0 e0       	ldi	r27, 0x00	; 0
    4de4:	cb eb       	ldi	r28, 0xBB	; 187
    4de6:	d0 e0       	ldi	r29, 0x00	; 0
    4de8:	34 e8       	ldi	r19, 0x84	; 132
    4dea:	44 e9       	ldi	r20, 0x94	; 148
    4dec:	20 83       	st	Z, r18
    4dee:	90 81       	ld	r25, Z
    4df0:	99 23       	and	r25, r25
    4df2:	ec f7       	brge	.-6      	; 0x4dee <i2c_start_wait+0x18>
    4df4:	9c 91       	ld	r25, X
    4df6:	98 7f       	andi	r25, 0xF8	; 248
    4df8:	98 30       	cpi	r25, 0x08	; 8
    4dfa:	11 f0       	breq	.+4      	; 0x4e00 <i2c_start_wait+0x2a>
    4dfc:	90 31       	cpi	r25, 0x10	; 16
    4dfe:	b1 f7       	brne	.-20     	; 0x4dec <i2c_start_wait+0x16>
    4e00:	88 83       	st	Y, r24
    4e02:	30 83       	st	Z, r19
    4e04:	90 81       	ld	r25, Z
    4e06:	99 23       	and	r25, r25
    4e08:	ec f7       	brge	.-6      	; 0x4e04 <i2c_start_wait+0x2e>
    4e0a:	9c 91       	ld	r25, X
    4e0c:	98 7f       	andi	r25, 0xF8	; 248
    4e0e:	90 32       	cpi	r25, 0x20	; 32
    4e10:	11 f0       	breq	.+4      	; 0x4e16 <i2c_start_wait+0x40>
    4e12:	98 35       	cpi	r25, 0x58	; 88
    4e14:	29 f4       	brne	.+10     	; 0x4e20 <i2c_start_wait+0x4a>
    4e16:	40 83       	st	Z, r20
    4e18:	90 81       	ld	r25, Z
    4e1a:	94 fd       	sbrc	r25, 4
    4e1c:	fd cf       	rjmp	.-6      	; 0x4e18 <i2c_start_wait+0x42>
    4e1e:	e6 cf       	rjmp	.-52     	; 0x4dec <i2c_start_wait+0x16>
    4e20:	df 91       	pop	r29
    4e22:	cf 91       	pop	r28
    4e24:	08 95       	ret

00004e26 <rtc_I2C_Start>:

void rtc_I2C_Start()
{
	TWCR = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));
    4e26:	84 ea       	ldi	r24, 0xA4	; 164
    4e28:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & (1<<TWINT)));
    4e2c:	ec eb       	ldi	r30, 0xBC	; 188
    4e2e:	f0 e0       	ldi	r31, 0x00	; 0
    4e30:	80 81       	ld	r24, Z
    4e32:	88 23       	and	r24, r24
    4e34:	ec f7       	brge	.-6      	; 0x4e30 <rtc_I2C_Start+0xa>
}
    4e36:	08 95       	ret

00004e38 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    4e38:	84 e9       	ldi	r24, 0x94	; 148
    4e3a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    4e3e:	ec eb       	ldi	r30, 0xBC	; 188
    4e40:	f0 e0       	ldi	r31, 0x00	; 0
    4e42:	80 81       	ld	r24, Z
    4e44:	84 fd       	sbrc	r24, 4
    4e46:	fd cf       	rjmp	.-6      	; 0x4e42 <i2c_stop+0xa>

}/* i2c_stop */
    4e48:	08 95       	ret

00004e4a <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    4e4a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    4e4e:	84 e8       	ldi	r24, 0x84	; 132
    4e50:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    4e54:	ec eb       	ldi	r30, 0xBC	; 188
    4e56:	f0 e0       	ldi	r31, 0x00	; 0
    4e58:	80 81       	ld	r24, Z
    4e5a:	88 23       	and	r24, r24
    4e5c:	ec f7       	brge	.-6      	; 0x4e58 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    4e5e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    4e62:	98 7f       	andi	r25, 0xF8	; 248
    4e64:	81 e0       	ldi	r24, 0x01	; 1
    4e66:	98 32       	cpi	r25, 0x28	; 40
    4e68:	09 f4       	brne	.+2      	; 0x4e6c <i2c_write+0x22>
    4e6a:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    4e6c:	08 95       	ret

00004e6e <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    4e6e:	84 ec       	ldi	r24, 0xC4	; 196
    4e70:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));    
    4e74:	ec eb       	ldi	r30, 0xBC	; 188
    4e76:	f0 e0       	ldi	r31, 0x00	; 0
    4e78:	80 81       	ld	r24, Z
    4e7a:	88 23       	and	r24, r24
    4e7c:	ec f7       	brge	.-6      	; 0x4e78 <i2c_readAck+0xa>

    return TWDR;
    4e7e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readAck */
    4e82:	08 95       	ret

00004e84 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    4e84:	84 e8       	ldi	r24, 0x84	; 132
    4e86:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
    4e8a:	ec eb       	ldi	r30, 0xBC	; 188
    4e8c:	f0 e0       	ldi	r31, 0x00	; 0
    4e8e:	80 81       	ld	r24, Z
    4e90:	88 23       	and	r24, r24
    4e92:	ec f7       	brge	.-6      	; 0x4e8e <i2c_readNak+0xa>
	
    return TWDR;
    4e94:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readNak */
    4e98:	08 95       	ret

00004e9a <RTC_GetDateTime>:
    Note: The date and time read from Ds1307 will be of BCD format, 
          like 0x12,0x39,0x26 for 12hr,39min and 26sec.    
               0x15,0x08,0x47 for 15th day,8th month and 47th year.              
***************************************************************************************************/
void RTC_GetDateTime(rtc_t *rtc)
{
    4e9a:	cf 93       	push	r28
    4e9c:	df 93       	push	r29
    4e9e:	ec 01       	movw	r28, r24
    rtc_I2C_Start();                            // Start I2C communication
    4ea0:	0e 94 13 27 	call	0x4e26	; 0x4e26 <rtc_I2C_Start>

    i2c_write(C_Ds1307WriteMode_U8);        // connect to DS1307 by sending its ID on I2c Bus
    4ea4:	80 ed       	ldi	r24, 0xD0	; 208
    4ea6:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <i2c_write>
    i2c_write(C_Ds1307SecondRegAddress_U8); // Request Sec RAM address at 00H
    4eaa:	80 e0       	ldi	r24, 0x00	; 0
    4eac:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <i2c_write>

    i2c_stop();                                // Stop I2C communication after selecting Sec Register
    4eb0:	0e 94 1c 27 	call	0x4e38	; 0x4e38 <i2c_stop>
    4eb4:	2f ef       	ldi	r18, 0xFF	; 255
    4eb6:	81 ee       	ldi	r24, 0xE1	; 225
    4eb8:	94 e0       	ldi	r25, 0x04	; 4
    4eba:	21 50       	subi	r18, 0x01	; 1
    4ebc:	80 40       	sbci	r24, 0x00	; 0
    4ebe:	90 40       	sbci	r25, 0x00	; 0
    4ec0:	e1 f7       	brne	.-8      	; 0x4eba <RTC_GetDateTime+0x20>
    4ec2:	00 c0       	rjmp	.+0      	; 0x4ec4 <RTC_GetDateTime+0x2a>
    4ec4:	00 00       	nop
	_delay_ms(100);
    rtc_I2C_Start();                            // Start I2C communication
    4ec6:	0e 94 13 27 	call	0x4e26	; 0x4e26 <rtc_I2C_Start>
    i2c_write(C_Ds1307ReadMode_U8);            // connect to DS1307(Read mode) by sending its ID
    4eca:	81 ed       	ldi	r24, 0xD1	; 209
    4ecc:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <i2c_write>

    rtc->sec = bcd2dec(i2c_readAck());                // read second and return Positive ACK
    4ed0:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <i2c_readAck>
    4ed4:	98 2f       	mov	r25, r24
    4ed6:	92 95       	swap	r25
    4ed8:	9f 70       	andi	r25, 0x0F	; 15
    4eda:	99 0f       	add	r25, r25
    4edc:	29 2f       	mov	r18, r25
    4ede:	22 0f       	add	r18, r18
    4ee0:	22 0f       	add	r18, r18
    4ee2:	92 0f       	add	r25, r18
    4ee4:	8f 70       	andi	r24, 0x0F	; 15
    4ee6:	89 0f       	add	r24, r25
    4ee8:	88 83       	st	Y, r24
    rtc->min = bcd2dec(i2c_readAck());                   // read minute and return Positive ACK
    4eea:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <i2c_readAck>
    4eee:	98 2f       	mov	r25, r24
    4ef0:	92 95       	swap	r25
    4ef2:	9f 70       	andi	r25, 0x0F	; 15
    4ef4:	99 0f       	add	r25, r25
    4ef6:	29 2f       	mov	r18, r25
    4ef8:	22 0f       	add	r18, r18
    4efa:	22 0f       	add	r18, r18
    4efc:	92 0f       	add	r25, r18
    4efe:	8f 70       	andi	r24, 0x0F	; 15
    4f00:	89 0f       	add	r24, r25
    4f02:	89 83       	std	Y+1, r24	; 0x01
    rtc->hour= bcd2dec(i2c_readAck());                  // read hour and return Negative/No ACK
    4f04:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <i2c_readAck>
    4f08:	98 2f       	mov	r25, r24
    4f0a:	92 95       	swap	r25
    4f0c:	9f 70       	andi	r25, 0x0F	; 15
    4f0e:	99 0f       	add	r25, r25
    4f10:	29 2f       	mov	r18, r25
    4f12:	22 0f       	add	r18, r18
    4f14:	22 0f       	add	r18, r18
    4f16:	92 0f       	add	r25, r18
    4f18:	8f 70       	andi	r24, 0x0F	; 15
    4f1a:	89 0f       	add	r24, r25
    4f1c:	8a 83       	std	Y+2, r24	; 0x02
    rtc->weekDay = bcd2dec(i2c_readAck());              // read weekDay and return Positive ACK
    4f1e:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <i2c_readAck>
    4f22:	98 2f       	mov	r25, r24
    4f24:	92 95       	swap	r25
    4f26:	9f 70       	andi	r25, 0x0F	; 15
    4f28:	99 0f       	add	r25, r25
    4f2a:	29 2f       	mov	r18, r25
    4f2c:	22 0f       	add	r18, r18
    4f2e:	22 0f       	add	r18, r18
    4f30:	92 0f       	add	r25, r18
    4f32:	8f 70       	andi	r24, 0x0F	; 15
    4f34:	89 0f       	add	r24, r25
    4f36:	8b 83       	std	Y+3, r24	; 0x03
    rtc->date= bcd2dec(i2c_readAck());                // read Date and return Positive ACK
    4f38:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <i2c_readAck>
    4f3c:	98 2f       	mov	r25, r24
    4f3e:	92 95       	swap	r25
    4f40:	9f 70       	andi	r25, 0x0F	; 15
    4f42:	99 0f       	add	r25, r25
    4f44:	29 2f       	mov	r18, r25
    4f46:	22 0f       	add	r18, r18
    4f48:	22 0f       	add	r18, r18
    4f4a:	92 0f       	add	r25, r18
    4f4c:	8f 70       	andi	r24, 0x0F	; 15
    4f4e:	89 0f       	add	r24, r25
    4f50:	8c 83       	std	Y+4, r24	; 0x04
    rtc->month=bcd2dec(i2c_readAck());               // read Month and return Positive ACK
    4f52:	0e 94 37 27 	call	0x4e6e	; 0x4e6e <i2c_readAck>
    4f56:	98 2f       	mov	r25, r24
    4f58:	92 95       	swap	r25
    4f5a:	9f 70       	andi	r25, 0x0F	; 15
    4f5c:	99 0f       	add	r25, r25
    4f5e:	29 2f       	mov	r18, r25
    4f60:	22 0f       	add	r18, r18
    4f62:	22 0f       	add	r18, r18
    4f64:	92 0f       	add	r25, r18
    4f66:	8f 70       	andi	r24, 0x0F	; 15
    4f68:	89 0f       	add	r24, r25
    4f6a:	8d 83       	std	Y+5, r24	; 0x05
    rtc->year =bcd2dec(i2c_readNak());                // read Year and return Negative/No ACK
    4f6c:	0e 94 42 27 	call	0x4e84	; 0x4e84 <i2c_readNak>
    4f70:	98 2f       	mov	r25, r24
    4f72:	92 95       	swap	r25
    4f74:	9f 70       	andi	r25, 0x0F	; 15
    4f76:	99 0f       	add	r25, r25
    4f78:	29 2f       	mov	r18, r25
    4f7a:	22 0f       	add	r18, r18
    4f7c:	22 0f       	add	r18, r18
    4f7e:	92 0f       	add	r25, r18
    4f80:	8f 70       	andi	r24, 0x0F	; 15
    4f82:	89 0f       	add	r24, r25
    4f84:	8e 83       	std	Y+6, r24	; 0x06

    i2c_stop();                             // Stop I2C communication after reading the Date
    4f86:	0e 94 1c 27 	call	0x4e38	; 0x4e38 <i2c_stop>
}
    4f8a:	df 91       	pop	r29
    4f8c:	cf 91       	pop	r28
    4f8e:	08 95       	ret

00004f90 <spi_init_master>:

// SPI
// Initialize SPI Master Device (with SPI interrupt)
void spi_init_master (void)
{
	DDRB |= (1<<MOSI)|(1<<SCK);
    4f90:	84 b1       	in	r24, 0x04	; 4
    4f92:	88 62       	ori	r24, 0x28	; 40
    4f94:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<MISO);
    4f96:	24 98       	cbi	0x04, 4	; 4
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0);
    4f98:	8c b5       	in	r24, 0x2c	; 44
    4f9a:	83 65       	ori	r24, 0x53	; 83
    4f9c:	8c bd       	out	0x2c, r24	; 44
	PORTB |= (1<<MISO);
    4f9e:	2c 9a       	sbi	0x05, 4	; 5
	PORTB &= ~(1<<MISO);
    4fa0:	2c 98       	cbi	0x05, 4	; 5
    4fa2:	08 95       	ret

00004fa4 <spi_rwSPI>:
SPI READ/WRITE
********************************************/

uint8_t spi_rwSPI( uint8_t byteword)
{
	SPDR = byteword; // put the byteword into data register
    4fa4:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    4fa6:	0d b4       	in	r0, 0x2d	; 45
    4fa8:	07 fe       	sbrs	r0, 7
    4faa:	fd cf       	rjmp	.-6      	; 0x4fa6 <spi_rwSPI+0x2>
	return SPDR;
    4fac:	8e b5       	in	r24, 0x2e	; 46
}
    4fae:	08 95       	ret

00004fb0 <spi_BurstRead>:

/********************************************
BURST READ
********************************************/

void spi_BurstRead(uint8_t addr, uint8_t buffer[], uint8_t countdown, int pin) {
    4fb0:	df 92       	push	r13
    4fb2:	ef 92       	push	r14
    4fb4:	ff 92       	push	r15
    4fb6:	0f 93       	push	r16
    4fb8:	1f 93       	push	r17
    4fba:	cf 93       	push	r28
    4fbc:	df 93       	push	r29
    4fbe:	8b 01       	movw	r16, r22
    4fc0:	d4 2e       	mov	r13, r20

	PORT_CS &= ~(1<<pin);
    4fc2:	9b b1       	in	r25, 0x0b	; 11
    4fc4:	41 e0       	ldi	r20, 0x01	; 1
    4fc6:	50 e0       	ldi	r21, 0x00	; 0
    4fc8:	7a 01       	movw	r14, r20
    4fca:	02 c0       	rjmp	.+4      	; 0x4fd0 <spi_BurstRead+0x20>
    4fcc:	ee 0c       	add	r14, r14
    4fce:	ff 1c       	adc	r15, r15
    4fd0:	2a 95       	dec	r18
    4fd2:	e2 f7       	brpl	.-8      	; 0x4fcc <spi_BurstRead+0x1c>
    4fd4:	2e 2d       	mov	r18, r14
    4fd6:	20 95       	com	r18
    4fd8:	92 23       	and	r25, r18
    4fda:	9b b9       	out	0x0b, r25	; 11
	spi_rwSPI(addr);
    4fdc:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <spi_rwSPI>
	for (int i = 0; i < countdown; i++) {
    4fe0:	dd 20       	and	r13, r13
    4fe2:	51 f0       	breq	.+20     	; 0x4ff8 <spi_BurstRead+0x48>
    4fe4:	e8 01       	movw	r28, r16
    4fe6:	0d 0d       	add	r16, r13
    4fe8:	11 1d       	adc	r17, r1
		*buffer++ = spi_rwSPI(0x00);
    4fea:	80 e0       	ldi	r24, 0x00	; 0
    4fec:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <spi_rwSPI>
    4ff0:	89 93       	st	Y+, r24

void spi_BurstRead(uint8_t addr, uint8_t buffer[], uint8_t countdown, int pin) {

	PORT_CS &= ~(1<<pin);
	spi_rwSPI(addr);
	for (int i = 0; i < countdown; i++) {
    4ff2:	c0 17       	cp	r28, r16
    4ff4:	d1 07       	cpc	r29, r17
    4ff6:	c9 f7       	brne	.-14     	; 0x4fea <spi_BurstRead+0x3a>
		*buffer++ = spi_rwSPI(0x00);
	}
	PORT_CS |= (1<<pin);
    4ff8:	8b b1       	in	r24, 0x0b	; 11
    4ffa:	e8 2a       	or	r14, r24
    4ffc:	eb b8       	out	0x0b, r14	; 11
}
    4ffe:	df 91       	pop	r29
    5000:	cf 91       	pop	r28
    5002:	1f 91       	pop	r17
    5004:	0f 91       	pop	r16
    5006:	ff 90       	pop	r15
    5008:	ef 90       	pop	r14
    500a:	df 90       	pop	r13
    500c:	08 95       	ret

0000500e <spi_read16>:

uint16_t spi_read16(uint8_t addr, int pin)
{
    500e:	cf 93       	push	r28
    5010:	df 93       	push	r29
	PORT_CS &= ~(1<<pin);
    5012:	9b b1       	in	r25, 0x0b	; 11
    5014:	c1 e0       	ldi	r28, 0x01	; 1
    5016:	d0 e0       	ldi	r29, 0x00	; 0
    5018:	02 c0       	rjmp	.+4      	; 0x501e <spi_read16+0x10>
    501a:	cc 0f       	add	r28, r28
    501c:	dd 1f       	adc	r29, r29
    501e:	6a 95       	dec	r22
    5020:	e2 f7       	brpl	.-8      	; 0x501a <spi_read16+0xc>
    5022:	2c 2f       	mov	r18, r28
    5024:	20 95       	com	r18
    5026:	92 23       	and	r25, r18
    5028:	9b b9       	out	0x0b, r25	; 11
	spi_rwSPI(addr);
    502a:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <spi_rwSPI>
	uint8_t buffer[2];
	buffer[0] = spi_rwSPI(0x00);
    502e:	80 e0       	ldi	r24, 0x00	; 0
    5030:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <spi_rwSPI>
    5034:	d8 2f       	mov	r29, r24
	buffer[1] = spi_rwSPI(0x00);
    5036:	80 e0       	ldi	r24, 0x00	; 0
    5038:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <spi_rwSPI>
	uint16_t receivedVal = (buffer[1] << 8) | buffer[0];
	PORT_CS |= (1<<pin);
    503c:	9b b1       	in	r25, 0x0b	; 11
    503e:	c9 2b       	or	r28, r25
    5040:	cb b9       	out	0x0b, r28	; 11
	return receivedVal;
    5042:	2d 2f       	mov	r18, r29
    5044:	30 e0       	ldi	r19, 0x00	; 0
}
    5046:	a9 01       	movw	r20, r18
    5048:	58 2b       	or	r21, r24
    504a:	ca 01       	movw	r24, r20
    504c:	df 91       	pop	r29
    504e:	cf 91       	pop	r28
    5050:	08 95       	ret

00005052 <spi_readS16>:

int16_t spi_readS16(uint8_t addr, int pin)
{
	return (int16_t)spi_read16(addr, pin);
    5052:	0e 94 07 28 	call	0x500e	; 0x500e <spi_read16>
}
    5056:	08 95       	ret

00005058 <uart_init>:
#define loop_until_bit_is_set(sfr,bit) \
do { } while (bit_is_clear(sfr, bit))

// UART
void uart_init(void) {
	UBRR0H = UBRRH_VALUE;
    5058:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
    505c:	87 e6       	ldi	r24, 0x67	; 103
    505e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	#if USE_2X
	UCSR0A |= _BV(U2X0);
	#else
	UCSR0A &= ~(_BV(U2X0));
    5062:	e0 ec       	ldi	r30, 0xC0	; 192
    5064:	f0 e0       	ldi	r31, 0x00	; 0
    5066:	80 81       	ld	r24, Z
    5068:	8d 7f       	andi	r24, 0xFD	; 253
    506a:	80 83       	st	Z, r24
	#endif

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
    506c:	86 e0       	ldi	r24, 0x06	; 6
    506e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
    5072:	88 e1       	ldi	r24, 0x18	; 24
    5074:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    5078:	08 95       	ret

0000507a <uart_putchar>:
}

void uart_putchar(char c, FILE *stream) {
    507a:	cf 93       	push	r28
    507c:	c8 2f       	mov	r28, r24
	if (c == '\n') {
    507e:	8a 30       	cpi	r24, 0x0A	; 10
    5080:	19 f4       	brne	.+6      	; 0x5088 <uart_putchar+0xe>
		uart_putchar('\r', stream);
    5082:	8d e0       	ldi	r24, 0x0D	; 13
    5084:	0e 94 3d 28 	call	0x507a	; 0x507a <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
    5088:	e0 ec       	ldi	r30, 0xC0	; 192
    508a:	f0 e0       	ldi	r31, 0x00	; 0
    508c:	80 81       	ld	r24, Z
    508e:	85 ff       	sbrs	r24, 5
    5090:	fd cf       	rjmp	.-6      	; 0x508c <uart_putchar+0x12>
	UDR0 = c;
    5092:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
    5096:	cf 91       	pop	r28
    5098:	08 95       	ret

0000509a <wind_initWindSpeed>:

static void timer1_init()
{
	
	// Starting timer 1 in normal mode
	TCCR1B= 0x00;
    509a:	e1 e8       	ldi	r30, 0x81	; 129
    509c:	f0 e0       	ldi	r31, 0x00	; 0
    509e:	10 82       	st	Z, r1
	TCCR1A= 0x00;
    50a0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	// setting interrupt flag register to 0.
	TIFR1=0x00;
    50a4:	16 ba       	out	0x16, r1	; 22
	// timer 1 setup with a pre-scalar of 256
	TCCR1B |=(1<<CS12);
    50a6:	80 81       	ld	r24, Z
    50a8:	84 60       	ori	r24, 0x04	; 4
    50aa:	80 83       	st	Z, r24
	//Input capture on rising edge
	TCCR1B|=(1<<ICES1);
    50ac:	80 81       	ld	r24, Z
    50ae:	80 64       	ori	r24, 0x40	; 64
    50b0:	80 83       	st	Z, r24
	
	// setting the timer/counter i/o locations to 0.
	TCNT1H=0x00;
    50b2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	TCNT1L=0x00;
    50b6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	// enabling input capture
	TIMSK1=(1<<ICIE1);
    50ba:	80 e2       	ldi	r24, 0x20	; 32
    50bc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	// enabling global interrupt
	sei();
    50c0:	78 94       	sei
{
	// initialize timer
	timer1_init();

	// setting PB0 as input for
	DDRD |= (0<<PORTD5);
    50c2:	8a b1       	in	r24, 0x0a	; 10
    50c4:	8a b9       	out	0x0a, r24	; 10
	//Enable PB0 pull up resistor
	PORTD |= (1<<5);
    50c6:	5d 9a       	sbi	0x0b, 5	; 11
    50c8:	08 95       	ret

000050ca <wind_measureFrequency>:
}

float wind_measureFrequency()
{
	if (flag>=2)
    50ca:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <flag>
    50ce:	82 30       	cpi	r24, 0x02	; 2
    50d0:	18 f1       	brcs	.+70     	; 0x5118 <wind_measureFrequency+0x4e>
	{
		flag =0;
    50d2:	10 92 1e 04 	sts	0x041E, r1	; 0x80041e <flag>
		period= (t_2-t_1);
    50d6:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <t_2>
    50da:	90 91 f3 03 	lds	r25, 0x03F3	; 0x8003f3 <t_2+0x1>
    50de:	20 91 f4 03 	lds	r18, 0x03F4	; 0x8003f4 <t_1>
    50e2:	30 91 f5 03 	lds	r19, 0x03F5	; 0x8003f5 <t_1+0x1>
    50e6:	82 1b       	sub	r24, r18
    50e8:	93 0b       	sbc	r25, r19
    50ea:	90 93 f1 03 	sts	0x03F1, r25	; 0x8003f1 <period+0x1>
    50ee:	80 93 f0 03 	sts	0x03F0, r24	; 0x8003f0 <period>
		TIFR1=(1<<ICF1);
    50f2:	80 e2       	ldi	r24, 0x20	; 32
    50f4:	86 bb       	out	0x16, r24	; 22
		
		return (16000000UL/period)/256;
    50f6:	20 91 f0 03 	lds	r18, 0x03F0	; 0x8003f0 <period>
    50fa:	30 91 f1 03 	lds	r19, 0x03F1	; 0x8003f1 <period+0x1>
    50fe:	40 e0       	ldi	r20, 0x00	; 0
    5100:	50 e0       	ldi	r21, 0x00	; 0
    5102:	64 e2       	ldi	r22, 0x24	; 36
    5104:	74 ef       	ldi	r23, 0xF4	; 244
    5106:	80 e0       	ldi	r24, 0x00	; 0
    5108:	90 e0       	ldi	r25, 0x00	; 0
    510a:	0e 94 d6 2d 	call	0x5bac	; 0x5bac <__udivmodsi4>
    510e:	ca 01       	movw	r24, r20
    5110:	b9 01       	movw	r22, r18
    5112:	0e 94 54 2c 	call	0x58a8	; 0x58a8 <__floatunsisf>
    5116:	08 95       	ret
	}
	return -1;
    5118:	60 e0       	ldi	r22, 0x00	; 0
    511a:	70 e0       	ldi	r23, 0x00	; 0
    511c:	80 e8       	ldi	r24, 0x80	; 128
    511e:	9f eb       	ldi	r25, 0xBF	; 191
}
    5120:	08 95       	ret

00005122 <__vector_10>:

ISR (TIMER1_CAPT_vect)
{
    5122:	1f 92       	push	r1
    5124:	0f 92       	push	r0
    5126:	0f b6       	in	r0, 0x3f	; 63
    5128:	0f 92       	push	r0
    512a:	11 24       	eor	r1, r1
    512c:	8f 93       	push	r24
    512e:	9f 93       	push	r25
	if (flag==0)
    5130:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <flag>
    5134:	81 11       	cpse	r24, r1
    5136:	0b c0       	rjmp	.+22     	; 0x514e <__vector_10+0x2c>
	{
		t_1=ICR1;
    5138:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    513c:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    5140:	90 93 f5 03 	sts	0x03F5, r25	; 0x8003f5 <t_1+0x1>
    5144:	80 93 f4 03 	sts	0x03F4, r24	; 0x8003f4 <t_1>
		TIFR1=(1<<ICF1);
    5148:	80 e2       	ldi	r24, 0x20	; 32
    514a:	86 bb       	out	0x16, r24	; 22
    514c:	0e c0       	rjmp	.+28     	; 0x516a <__vector_10+0x48>

	}
	else if (flag==1)
    514e:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <flag>
    5152:	81 30       	cpi	r24, 0x01	; 1
    5154:	51 f4       	brne	.+20     	; 0x516a <__vector_10+0x48>
	{
		t_2= ICR1;
    5156:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    515a:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    515e:	90 93 f3 03 	sts	0x03F3, r25	; 0x8003f3 <t_2+0x1>
    5162:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <t_2>
		TIFR1=(1<<ICF1);
    5166:	80 e2       	ldi	r24, 0x20	; 32
    5168:	86 bb       	out	0x16, r24	; 22
		
	}
	flag ++;
    516a:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <flag>
    516e:	8f 5f       	subi	r24, 0xFF	; 255
    5170:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <flag>
    5174:	9f 91       	pop	r25
    5176:	8f 91       	pop	r24
    5178:	0f 90       	pop	r0
    517a:	0f be       	out	0x3f, r0	; 63
    517c:	0f 90       	pop	r0
    517e:	1f 90       	pop	r1
    5180:	18 95       	reti

00005182 <adc_read>:
	ADMUX |= (1 << REFS0) | (1 << MUX1);
}

static uint16_t adc_read()
{
	ADCSRA |= (1<<ADSC);
    5182:	ea e7       	ldi	r30, 0x7A	; 122
    5184:	f0 e0       	ldi	r31, 0x00	; 0
    5186:	80 81       	ld	r24, Z
    5188:	80 64       	ori	r24, 0x40	; 64
    518a:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));
    518c:	80 81       	ld	r24, Z
    518e:	86 fd       	sbrc	r24, 6
    5190:	fd cf       	rjmp	.-6      	; 0x518c <adc_read+0xa>
	
	return (ADC);
    5192:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    5196:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
    519a:	08 95       	ret

0000519c <main>:
	printf_P(PSTR("Calibration complete!"));
}
char packetStr[256];
uint8_t runOnce = 0;
int main(void)
{	
    519c:	cf 93       	push	r28
    519e:	df 93       	push	r29
    51a0:	cd b7       	in	r28, 0x3d	; 61
    51a2:	de b7       	in	r29, 0x3e	; 62
    51a4:	cf 54       	subi	r28, 0x4F	; 79
    51a6:	d1 09       	sbc	r29, r1
    51a8:	0f b6       	in	r0, 0x3f	; 63
    51aa:	f8 94       	cli
    51ac:	de bf       	out	0x3e, r29	; 62
    51ae:	0f be       	out	0x3f, r0	; 63
    51b0:	cd bf       	out	0x3d, r28	; 61
 	rtc_t rtc;
	 
	 uart_init();
    51b2:	0e 94 2c 28 	call	0x5058	; 0x5058 <uart_init>
	 stdout = &uart_output;
    51b6:	81 e2       	ldi	r24, 0x21	; 33
    51b8:	91 e0       	ldi	r25, 0x01	; 1
    51ba:	90 93 7a 07 	sts	0x077A, r25	; 0x80077a <__iob+0x3>
    51be:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <__iob+0x2>
	 puts_P(PSTR("Hello"));
    51c2:	83 ee       	ldi	r24, 0xE3	; 227
    51c4:	92 e0       	ldi	r25, 0x02	; 2
    51c6:	0e 94 a2 30 	call	0x6144	; 0x6144 <puts_P>

	i2c_init();
    51ca:	0e 94 e2 26 	call	0x4dc4	; 0x4dc4 <i2c_init>
	spi_init_master();
    51ce:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <spi_init_master>
	bmp280_init();
    51d2:	0e 94 94 01 	call	0x328	; 0x328 <bmp280_init>
	
	wind_initWindSpeed();
    51d6:	0e 94 4d 28 	call	0x509a	; 0x509a <wind_initWindSpeed>
	puts("\n");
}

static void initADC()
{
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
    51da:	ea e7       	ldi	r30, 0x7A	; 122
    51dc:	f0 e0       	ldi	r31, 0x00	; 0
    51de:	80 81       	ld	r24, Z
    51e0:	87 68       	ori	r24, 0x87	; 135
    51e2:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS0) | (1 << MUX1);
    51e4:	ec e7       	ldi	r30, 0x7C	; 124
    51e6:	f0 e0       	ldi	r31, 0x00	; 0
    51e8:	80 81       	ld	r24, Z
    51ea:	82 64       	ori	r24, 0x42	; 66
    51ec:	80 83       	st	Z, r24
	
	
	initADC();
	
	// calibration
	DDRD |= (0 << PIND5);
    51ee:	8a b1       	in	r24, 0x0a	; 10
    51f0:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PIND5);
    51f2:	5d 9a       	sbi	0x0b, 5	; 11
	if((PIND&(1 << PIND5)) == 0)
    51f4:	4d 99       	sbic	0x09, 5	; 9
    51f6:	3d c0       	rjmp	.+122    	; 0x5272 <main+0xd6>
}

int16_t LargestDirectionValue;
static void calibration()
{
	printf_P(PSTR("Calibration started!"));
    51f8:	8e ec       	ldi	r24, 0xCE	; 206
    51fa:	92 e0       	ldi	r25, 0x02	; 2
    51fc:	9f 93       	push	r25
    51fe:	8f 93       	push	r24
    5200:	0e 94 4c 30 	call	0x6098	; 0x6098 <printf_P>
    5204:	0f 90       	pop	r0
    5206:	0f 90       	pop	r0
    5208:	15 c0       	rjmp	.+42     	; 0x5234 <main+0x98>
	while(adc_read()+50 >= LargestDirectionValue)
	{
		if(adc_read() > LargestDirectionValue)
    520a:	0e 94 c1 28 	call	0x5182	; 0x5182 <adc_read>
    520e:	20 91 51 06 	lds	r18, 0x0651	; 0x800651 <LargestDirectionValue>
    5212:	30 91 52 06 	lds	r19, 0x0652	; 0x800652 <LargestDirectionValue+0x1>
    5216:	28 17       	cp	r18, r24
    5218:	39 07       	cpc	r19, r25
    521a:	30 f4       	brcc	.+12     	; 0x5228 <main+0x8c>
		{
			LargestDirectionValue = adc_read();
    521c:	0e 94 c1 28 	call	0x5182	; 0x5182 <adc_read>
    5220:	90 93 52 06 	sts	0x0652, r25	; 0x800652 <LargestDirectionValue+0x1>
    5224:	80 93 51 06 	sts	0x0651, r24	; 0x800651 <LargestDirectionValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5228:	87 ee       	ldi	r24, 0xE7	; 231
    522a:	93 e0       	ldi	r25, 0x03	; 3
    522c:	01 97       	sbiw	r24, 0x01	; 1
    522e:	f1 f7       	brne	.-4      	; 0x522c <main+0x90>
    5230:	00 c0       	rjmp	.+0      	; 0x5232 <main+0x96>
    5232:	00 00       	nop

int16_t LargestDirectionValue;
static void calibration()
{
	printf_P(PSTR("Calibration started!"));
	while(adc_read()+50 >= LargestDirectionValue)
    5234:	0e 94 c1 28 	call	0x5182	; 0x5182 <adc_read>
    5238:	60 91 51 06 	lds	r22, 0x0651	; 0x800651 <LargestDirectionValue>
    523c:	70 91 52 06 	lds	r23, 0x0652	; 0x800652 <LargestDirectionValue+0x1>
    5240:	c2 96       	adiw	r24, 0x32	; 50
    5242:	86 17       	cp	r24, r22
    5244:	97 07       	cpc	r25, r23
    5246:	08 f7       	brcc	.-62     	; 0x520a <main+0x6e>
		{
			LargestDirectionValue = adc_read();
		}
		_delay_us(250);
	}
	eeprom_write_float(0, LargestDirectionValue);
    5248:	07 2e       	mov	r0, r23
    524a:	00 0c       	add	r0, r0
    524c:	88 0b       	sbc	r24, r24
    524e:	99 0b       	sbc	r25, r25
    5250:	0e 94 56 2c 	call	0x58ac	; 0x58ac <__floatsisf>
    5254:	ab 01       	movw	r20, r22
    5256:	bc 01       	movw	r22, r24
    5258:	80 e0       	ldi	r24, 0x00	; 0
    525a:	90 e0       	ldi	r25, 0x00	; 0
    525c:	0e 94 35 39 	call	0x726a	; 0x726a <eeprom_write_dword>
	printf_P(PSTR("Calibration complete!"));
    5260:	88 eb       	ldi	r24, 0xB8	; 184
    5262:	92 e0       	ldi	r25, 0x02	; 2
    5264:	9f 93       	push	r25
    5266:	8f 93       	push	r24
    5268:	0e 94 4c 30 	call	0x6098	; 0x6098 <printf_P>
    526c:	0f 90       	pop	r0
    526e:	0f 90       	pop	r0
    5270:	0a c0       	rjmp	.+20     	; 0x5286 <main+0xea>
	if((PIND&(1 << PIND5)) == 0)
	{
		calibration();
	}
	else {
		LargestDirectionValue = eeprom_read_float(0);
    5272:	80 e0       	ldi	r24, 0x00	; 0
    5274:	90 e0       	ldi	r25, 0x00	; 0
    5276:	0e 94 29 39 	call	0x7252	; 0x7252 <eeprom_read_dword>
    527a:	0e 94 18 2c 	call	0x5830	; 0x5830 <__fixsfsi>
    527e:	70 93 52 06 	sts	0x0652, r23	; 0x800652 <LargestDirectionValue+0x1>
    5282:	60 93 51 06 	sts	0x0651, r22	; 0x800651 <LargestDirectionValue>
	}
	//
	timeout = eeprom_read_word((uint16_t*)0x10);
    5286:	80 e1       	ldi	r24, 0x10	; 16
    5288:	90 e0       	ldi	r25, 0x00	; 0
    528a:	0e 94 2f 39 	call	0x725e	; 0x725e <eeprom_read_word>
    528e:	8c 01       	movw	r16, r24
    5290:	90 93 54 06 	sts	0x0654, r25	; 0x800654 <timeout+0x1>
    5294:	80 93 53 06 	sts	0x0653, r24	; 0x800653 <timeout>

static void uart_print(char *name, float val)
{
	char debug_buffer[10];

	printf(name);
    5298:	8d ee       	ldi	r24, 0xED	; 237
    529a:	91 e0       	ldi	r25, 0x01	; 1
    529c:	9f 93       	push	r25
    529e:	8f 93       	push	r24
    52a0:	0e 94 36 30 	call	0x606c	; 0x606c <printf>
	printf(" = ");
    52a4:	82 ef       	ldi	r24, 0xF2	; 242
    52a6:	91 e0       	ldi	r25, 0x01	; 1
    52a8:	9f 93       	push	r25
    52aa:	8f 93       	push	r24
    52ac:	0e 94 36 30 	call	0x606c	; 0x606c <printf>

	dtostrf(val,1,2,debug_buffer);
    52b0:	7e 01       	movw	r14, r28
    52b2:	98 e0       	ldi	r25, 0x08	; 8
    52b4:	e9 0e       	add	r14, r25
    52b6:	f1 1c       	adc	r15, r1
    52b8:	b8 01       	movw	r22, r16
    52ba:	80 e0       	ldi	r24, 0x00	; 0
    52bc:	90 e0       	ldi	r25, 0x00	; 0
    52be:	0e 94 54 2c 	call	0x58a8	; 0x58a8 <__floatunsisf>
    52c2:	87 01       	movw	r16, r14
    52c4:	22 e0       	ldi	r18, 0x02	; 2
    52c6:	41 e0       	ldi	r20, 0x01	; 1
    52c8:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <dtostrf>
	printf(debug_buffer);
    52cc:	ff 92       	push	r15
    52ce:	ef 92       	push	r14
    52d0:	0e 94 36 30 	call	0x606c	; 0x606c <printf>
	puts("\n");
    52d4:	86 e9       	ldi	r24, 0x96	; 150
    52d6:	92 e0       	ldi	r25, 0x02	; 2
    52d8:	0e 94 72 30 	call	0x60e4	; 0x60e4 <puts>
		LargestDirectionValue = eeprom_read_float(0);
	}
	//
	timeout = eeprom_read_word((uint16_t*)0x10);
	uart_print("time", timeout);
	DDRB |= (1 << SD_CS);
    52dc:	21 9a       	sbi	0x04, 1	; 4
	f_mount(&FatFs, "", 0);
    52de:	40 e0       	ldi	r20, 0x00	; 0
    52e0:	67 e9       	ldi	r22, 0x97	; 151
    52e2:	72 e0       	ldi	r23, 0x02	; 2
    52e4:	83 e2       	ldi	r24, 0x23	; 35
    52e6:	94 e0       	ldi	r25, 0x04	; 4
    52e8:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <f_mount>
	Ether_init();
    52ec:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <Ether_init>
    52f0:	0f 90       	pop	r0
    52f2:	0f 90       	pop	r0
    52f4:	0f 90       	pop	r0
    52f6:	0f 90       	pop	r0
    52f8:	0f 90       	pop	r0
    52fa:	0f 90       	pop	r0
		//uart_print("Temperature", hih8120_temperature_C);
		
		//puts("--------------------------");
		
		char humidChar[10],tempChar[10],pressChar[10],anglChar[10],speedChar[10];
		dtostrf(hih8120_humidity,1,2,humidChar);
    52fc:	6e 01       	movw	r12, r28
    52fe:	20 e4       	ldi	r18, 0x40	; 64
    5300:	c2 0e       	add	r12, r18
    5302:	d1 1c       	adc	r13, r1
		dtostrf(hih8120_temperature_C,1,2,tempChar);
    5304:	7e 01       	movw	r14, r28
    5306:	36 e3       	ldi	r19, 0x36	; 54
    5308:	e3 0e       	add	r14, r19
    530a:	f1 1c       	adc	r15, r1
		dtostrf(bmp280_readPressure(),1,2,pressChar);
    530c:	3e 01       	movw	r6, r28
    530e:	8c e2       	ldi	r24, 0x2C	; 44
    5310:	68 0e       	add	r6, r24
    5312:	71 1c       	adc	r7, r1
		dtostrf(angle,1,2,anglChar);
    5314:	1e 01       	movw	r2, r28
    5316:	92 e2       	ldi	r25, 0x22	; 34
    5318:	29 0e       	add	r2, r25
    531a:	31 1c       	adc	r3, r1
		dtostrf(wind_speed,1,2,speedChar);
    531c:	2e 01       	movw	r4, r28
    531e:	28 e1       	ldi	r18, 0x18	; 24
    5320:	42 0e       	add	r4, r18
    5322:	51 1c       	adc	r5, r1
		sprintf(packetStr, "[%02d:%02d:%02d] %s C , %s %% , %s Pa , %s , %s m/s", rtc.hour, rtc.min, rtc.sec,tempChar, humidChar, pressChar, anglChar, speedChar);
		
		char fileName[16];
		sprintf(fileName, "%02d-%02d-%02d.CSV", rtc.date, rtc.month, rtc.year);
    5324:	2c 96       	adiw	r28, 0x0c	; 12
    5326:	1f af       	std	Y+63, r17	; 0x3f
    5328:	0e af       	std	Y+62, r16	; 0x3e
    532a:	2c 97       	sbiw	r28, 0x0c	; 12
	f_mount(&FatFs, "", 0);
	Ether_init();

	while(1) {	
		float wind_speed;
		if(sendingPacket == 1)
    532c:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <sendingPacket>
    5330:	81 30       	cpi	r24, 0x01	; 1
    5332:	29 f4       	brne	.+10     	; 0x533e <main+0x1a2>
		{
			Ether_SendPacket(packetStr);
    5334:	87 e7       	ldi	r24, 0x77	; 119
    5336:	96 e0       	ldi	r25, 0x06	; 6
    5338:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <Ether_SendPacket>
			continue;
    533c:	f7 cf       	rjmp	.-18     	; 0x532c <main+0x190>
		}	
		if(runOnce == 0) {
    533e:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <runOnce>
    5342:	81 11       	cpse	r24, r1
    5344:	09 c0       	rjmp	.+18     	; 0x5358 <main+0x1bc>
			flag =0;
    5346:	10 92 1e 04 	sts	0x041E, r1	; 0x80041e <flag>
			TIFR1=(1<<ICF1);
    534a:	90 e2       	ldi	r25, 0x20	; 32
    534c:	96 bb       	out	0x16, r25	; 22
			runOnce = 1;
    534e:	81 e0       	ldi	r24, 0x01	; 1
    5350:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <runOnce>
			sec = 0;
    5354:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <sec>
		}
		if(flag < 2 && sec < 1) {
    5358:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <flag>
    535c:	82 30       	cpi	r24, 0x02	; 2
    535e:	20 f4       	brcc	.+8      	; 0x5368 <main+0x1cc>
    5360:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <sec>
    5364:	88 23       	and	r24, r24
    5366:	11 f3       	breq	.-60     	; 0x532c <main+0x190>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5368:	2f ef       	ldi	r18, 0xFF	; 255
    536a:	33 ed       	ldi	r19, 0xD3	; 211
    536c:	80 e3       	ldi	r24, 0x30	; 48
    536e:	21 50       	subi	r18, 0x01	; 1
    5370:	30 40       	sbci	r19, 0x00	; 0
    5372:	80 40       	sbci	r24, 0x00	; 0
    5374:	e1 f7       	brne	.-8      	; 0x536e <main+0x1d2>
    5376:	00 c0       	rjmp	.+0      	; 0x5378 <main+0x1dc>
    5378:	00 00       	nop
			continue;
		}

		_delay_ms(1000);
		runOnce = 0;
    537a:	10 92 f6 03 	sts	0x03F6, r1	; 0x8003f6 <runOnce>
		wind_speed = 0.765 * wind_measureFrequency() + 0.35;
    537e:	0e 94 65 28 	call	0x50ca	; 0x50ca <wind_measureFrequency>
    5382:	2a e0       	ldi	r18, 0x0A	; 10
    5384:	37 ed       	ldi	r19, 0xD7	; 215
    5386:	43 e4       	ldi	r20, 0x43	; 67
    5388:	5f e3       	ldi	r21, 0x3F	; 63
    538a:	0e 94 59 2d 	call	0x5ab2	; 0x5ab2 <__mulsf3>
    538e:	23 e3       	ldi	r18, 0x33	; 51
    5390:	33 e3       	ldi	r19, 0x33	; 51
    5392:	43 eb       	ldi	r20, 0xB3	; 179
    5394:	5e e3       	ldi	r21, 0x3E	; 62
    5396:	0e 94 35 2b 	call	0x566a	; 0x566a <__addsf3>
    539a:	60 96       	adiw	r28, 0x10	; 16
    539c:	6c af       	std	Y+60, r22	; 0x3c
    539e:	7d af       	std	Y+61, r23	; 0x3d
    53a0:	8e af       	std	Y+62, r24	; 0x3e
    53a2:	9f af       	std	Y+63, r25	; 0x3f
    53a4:	60 97       	sbiw	r28, 0x10	; 16
		if(wind_speed < 0 || wind_speed > 1000)
    53a6:	20 e0       	ldi	r18, 0x00	; 0
    53a8:	30 e0       	ldi	r19, 0x00	; 0
    53aa:	a9 01       	movw	r20, r18
    53ac:	0e 94 a1 2b 	call	0x5742	; 0x5742 <__cmpsf2>
    53b0:	88 23       	and	r24, r24
    53b2:	ac f0       	brlt	.+42     	; 0x53de <main+0x242>
    53b4:	20 e0       	ldi	r18, 0x00	; 0
    53b6:	30 e0       	ldi	r19, 0x00	; 0
    53b8:	4a e7       	ldi	r20, 0x7A	; 122
    53ba:	54 e4       	ldi	r21, 0x44	; 68
    53bc:	60 96       	adiw	r28, 0x10	; 16
    53be:	6c ad       	ldd	r22, Y+60	; 0x3c
    53c0:	7d ad       	ldd	r23, Y+61	; 0x3d
    53c2:	8e ad       	ldd	r24, Y+62	; 0x3e
    53c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    53c6:	60 97       	sbiw	r28, 0x10	; 16
    53c8:	0e 94 54 2d 	call	0x5aa8	; 0x5aa8 <__gesf2>
    53cc:	18 16       	cp	r1, r24
    53ce:	6c f4       	brge	.+26     	; 0x53ea <main+0x24e>
			wind_speed = 0;
    53d0:	60 96       	adiw	r28, 0x10	; 16
    53d2:	1c ae       	std	Y+60, r1	; 0x3c
    53d4:	1d ae       	std	Y+61, r1	; 0x3d
    53d6:	1e ae       	std	Y+62, r1	; 0x3e
    53d8:	1f ae       	std	Y+63, r1	; 0x3f
    53da:	60 97       	sbiw	r28, 0x10	; 16
    53dc:	06 c0       	rjmp	.+12     	; 0x53ea <main+0x24e>
    53de:	60 96       	adiw	r28, 0x10	; 16
    53e0:	1c ae       	std	Y+60, r1	; 0x3c
    53e2:	1d ae       	std	Y+61, r1	; 0x3d
    53e4:	1e ae       	std	Y+62, r1	; 0x3e
    53e6:	1f ae       	std	Y+63, r1	; 0x3f
    53e8:	60 97       	sbiw	r28, 0x10	; 16
		//uart_print("wind speed", wind_speed);
		RTC_GetDateTime(&rtc);
    53ea:	ce 01       	movw	r24, r28
    53ec:	01 96       	adiw	r24, 0x01	; 1
    53ee:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <RTC_GetDateTime>

		//uart_print("Pressure", bmp280_readPressure());
		
		float angle = ((float)adc_read() / (float)LargestDirectionValue) * 360.0;
    53f2:	0e 94 c1 28 	call	0x5182	; 0x5182 <adc_read>
    53f6:	bc 01       	movw	r22, r24
    53f8:	80 e0       	ldi	r24, 0x00	; 0
    53fa:	90 e0       	ldi	r25, 0x00	; 0
    53fc:	0e 94 54 2c 	call	0x58a8	; 0x58a8 <__floatunsisf>
    5400:	4b 01       	movw	r8, r22
    5402:	5c 01       	movw	r10, r24
    5404:	60 91 51 06 	lds	r22, 0x0651	; 0x800651 <LargestDirectionValue>
    5408:	70 91 52 06 	lds	r23, 0x0652	; 0x800652 <LargestDirectionValue+0x1>
    540c:	07 2e       	mov	r0, r23
    540e:	00 0c       	add	r0, r0
    5410:	88 0b       	sbc	r24, r24
    5412:	99 0b       	sbc	r25, r25
    5414:	0e 94 56 2c 	call	0x58ac	; 0x58ac <__floatsisf>
    5418:	9b 01       	movw	r18, r22
    541a:	ac 01       	movw	r20, r24
    541c:	c5 01       	movw	r24, r10
    541e:	b4 01       	movw	r22, r8
    5420:	0e 94 a6 2b 	call	0x574c	; 0x574c <__divsf3>
    5424:	20 e0       	ldi	r18, 0x00	; 0
    5426:	30 e0       	ldi	r19, 0x00	; 0
    5428:	44 eb       	ldi	r20, 0xB4	; 180
    542a:	53 e4       	ldi	r21, 0x43	; 67
    542c:	0e 94 59 2d 	call	0x5ab2	; 0x5ab2 <__mulsf3>
    5430:	4b 01       	movw	r8, r22
    5432:	5c 01       	movw	r10, r24
		if(angle > 360)
    5434:	20 e0       	ldi	r18, 0x00	; 0
    5436:	30 e0       	ldi	r19, 0x00	; 0
    5438:	44 eb       	ldi	r20, 0xB4	; 180
    543a:	53 e4       	ldi	r21, 0x43	; 67
    543c:	0e 94 54 2d 	call	0x5aa8	; 0x5aa8 <__gesf2>
    5440:	18 16       	cp	r1, r24
    5442:	44 f4       	brge	.+16     	; 0x5454 <main+0x2b8>
			angle = 360;
    5444:	0f 2e       	mov	r0, r31
    5446:	81 2c       	mov	r8, r1
    5448:	91 2c       	mov	r9, r1
    544a:	f4 eb       	ldi	r31, 0xB4	; 180
    544c:	af 2e       	mov	r10, r31
    544e:	f3 e4       	ldi	r31, 0x43	; 67
    5450:	bf 2e       	mov	r11, r31
    5452:	f0 2d       	mov	r31, r0
		//uart_print("Wind Angle", angle);
		
		
		
		hih8120_measure();
    5454:	0e 94 70 26 	call	0x4ce0	; 0x4ce0 <hih8120_measure>
		//uart_print("Temperature", hih8120_temperature_C);
		
		//puts("--------------------------");
		
		char humidChar[10],tempChar[10],pressChar[10],anglChar[10],speedChar[10];
		dtostrf(hih8120_humidity,1,2,humidChar);
    5458:	60 91 1d 01 	lds	r22, 0x011D	; 0x80011d <hih8120_humidity>
    545c:	70 91 1e 01 	lds	r23, 0x011E	; 0x80011e <hih8120_humidity+0x1>
    5460:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <hih8120_humidity+0x2>
    5464:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <hih8120_humidity+0x3>
    5468:	86 01       	movw	r16, r12
    546a:	22 e0       	ldi	r18, 0x02	; 2
    546c:	41 e0       	ldi	r20, 0x01	; 1
    546e:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <dtostrf>
		dtostrf(hih8120_temperature_C,1,2,tempChar);
    5472:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <hih8120_temperature_C>
    5476:	70 91 1a 01 	lds	r23, 0x011A	; 0x80011a <hih8120_temperature_C+0x1>
    547a:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <hih8120_temperature_C+0x2>
    547e:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <hih8120_temperature_C+0x3>
    5482:	87 01       	movw	r16, r14
    5484:	22 e0       	ldi	r18, 0x02	; 2
    5486:	41 e0       	ldi	r20, 0x01	; 1
    5488:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <dtostrf>
		dtostrf(bmp280_readPressure(),1,2,pressChar);
    548c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <bmp280_readPressure>
    5490:	83 01       	movw	r16, r6
    5492:	22 e0       	ldi	r18, 0x02	; 2
    5494:	41 e0       	ldi	r20, 0x01	; 1
    5496:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <dtostrf>
		dtostrf(angle,1,2,anglChar);
    549a:	81 01       	movw	r16, r2
    549c:	22 e0       	ldi	r18, 0x02	; 2
    549e:	41 e0       	ldi	r20, 0x01	; 1
    54a0:	c5 01       	movw	r24, r10
    54a2:	b4 01       	movw	r22, r8
    54a4:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <dtostrf>
		dtostrf(wind_speed,1,2,speedChar);
    54a8:	82 01       	movw	r16, r4
    54aa:	22 e0       	ldi	r18, 0x02	; 2
    54ac:	41 e0       	ldi	r20, 0x01	; 1
    54ae:	60 96       	adiw	r28, 0x10	; 16
    54b0:	6c ad       	ldd	r22, Y+60	; 0x3c
    54b2:	7d ad       	ldd	r23, Y+61	; 0x3d
    54b4:	8e ad       	ldd	r24, Y+62	; 0x3e
    54b6:	9f ad       	ldd	r25, Y+63	; 0x3f
    54b8:	60 97       	sbiw	r28, 0x10	; 16
    54ba:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <dtostrf>
		sprintf(packetStr, "[%02d:%02d:%02d] %s C , %s %% , %s Pa , %s , %s m/s", rtc.hour, rtc.min, rtc.sec,tempChar, humidChar, pressChar, anglChar, speedChar);
    54be:	5f 92       	push	r5
    54c0:	4f 92       	push	r4
    54c2:	3f 92       	push	r3
    54c4:	2f 92       	push	r2
    54c6:	7f 92       	push	r7
    54c8:	6f 92       	push	r6
    54ca:	df 92       	push	r13
    54cc:	cf 92       	push	r12
    54ce:	ff 92       	push	r15
    54d0:	ef 92       	push	r14
    54d2:	89 81       	ldd	r24, Y+1	; 0x01
    54d4:	1f 92       	push	r1
    54d6:	8f 93       	push	r24
    54d8:	8a 81       	ldd	r24, Y+2	; 0x02
    54da:	1f 92       	push	r1
    54dc:	8f 93       	push	r24
    54de:	8b 81       	ldd	r24, Y+3	; 0x03
    54e0:	1f 92       	push	r1
    54e2:	8f 93       	push	r24
    54e4:	26 ef       	ldi	r18, 0xF6	; 246
    54e6:	31 e0       	ldi	r19, 0x01	; 1
    54e8:	3f 93       	push	r19
    54ea:	2f 93       	push	r18
    54ec:	27 e7       	ldi	r18, 0x77	; 119
    54ee:	36 e0       	ldi	r19, 0x06	; 6
    54f0:	3f 93       	push	r19
    54f2:	2f 93       	push	r18
    54f4:	0e 94 03 31 	call	0x6206	; 0x6206 <sprintf>
		
		char fileName[16];
		sprintf(fileName, "%02d-%02d-%02d.CSV", rtc.date, rtc.month, rtc.year);
    54f8:	8f 81       	ldd	r24, Y+7	; 0x07
    54fa:	1f 92       	push	r1
    54fc:	8f 93       	push	r24
    54fe:	8e 81       	ldd	r24, Y+6	; 0x06
    5500:	1f 92       	push	r1
    5502:	8f 93       	push	r24
    5504:	8d 81       	ldd	r24, Y+5	; 0x05
    5506:	1f 92       	push	r1
    5508:	8f 93       	push	r24
    550a:	2a e2       	ldi	r18, 0x2A	; 42
    550c:	32 e0       	ldi	r19, 0x02	; 2
    550e:	3f 93       	push	r19
    5510:	2f 93       	push	r18
    5512:	2c 96       	adiw	r28, 0x0c	; 12
    5514:	9f ad       	ldd	r25, Y+63	; 0x3f
    5516:	2c 97       	sbiw	r28, 0x0c	; 12
    5518:	9f 93       	push	r25
    551a:	2b 96       	adiw	r28, 0x0b	; 11
    551c:	2f ad       	ldd	r18, Y+63	; 0x3f
    551e:	2b 97       	sbiw	r28, 0x0b	; 11
    5520:	2f 93       	push	r18
    5522:	0e 94 03 31 	call	0x6206	; 0x6206 <sprintf>

		if(f_open(&Fil, fileName, FA_WRITE) == FR_OK)
    5526:	42 e0       	ldi	r20, 0x02	; 2
    5528:	be 01       	movw	r22, r28
    552a:	68 5f       	subi	r22, 0xF8	; 248
    552c:	7f 4f       	sbci	r23, 0xFF	; 255
    552e:	87 e5       	ldi	r24, 0x57	; 87
    5530:	96 e0       	ldi	r25, 0x06	; 6
    5532:	0e 94 bc 1a 	call	0x3578	; 0x3578 <f_open>
    5536:	2d b7       	in	r18, 0x3d	; 61
    5538:	3e b7       	in	r19, 0x3e	; 62
    553a:	22 5e       	subi	r18, 0xE2	; 226
    553c:	3f 4f       	sbci	r19, 0xFF	; 255
    553e:	0f b6       	in	r0, 0x3f	; 63
    5540:	f8 94       	cli
    5542:	3e bf       	out	0x3e, r19	; 62
    5544:	0f be       	out	0x3f, r0	; 63
    5546:	2d bf       	out	0x3d, r18	; 61
    5548:	81 11       	cpse	r24, r1
    554a:	6f c0       	rjmp	.+222    	; 0x562a <main+0x48e>
		{
    554c:	8d b6       	in	r8, 0x3d	; 61
    554e:	9e b6       	in	r9, 0x3e	; 62
			f_lseek(&Fil, Fil.fsize);
    5550:	40 91 61 06 	lds	r20, 0x0661	; 0x800661 <Fil+0xa>
    5554:	50 91 62 06 	lds	r21, 0x0662	; 0x800662 <Fil+0xb>
    5558:	60 91 63 06 	lds	r22, 0x0663	; 0x800663 <Fil+0xc>
    555c:	70 91 64 06 	lds	r23, 0x0664	; 0x800664 <Fil+0xd>
    5560:	87 e5       	ldi	r24, 0x57	; 87
    5562:	96 e0       	ldi	r25, 0x06	; 6
    5564:	0e 94 56 20 	call	0x40ac	; 0x40ac <f_lseek>
			char sdData[snprintf(NULL,0,"%02d:%02d:%02d,%s,%s,%s,%s,%s\r\n", rtc.hour, rtc.min, rtc.sec, pressChar, anglChar, speedChar, humidChar, tempChar)];
    5568:	ff 92       	push	r15
    556a:	ef 92       	push	r14
    556c:	df 92       	push	r13
    556e:	cf 92       	push	r12
    5570:	5f 92       	push	r5
    5572:	4f 92       	push	r4
    5574:	3f 92       	push	r3
    5576:	2f 92       	push	r2
    5578:	7f 92       	push	r7
    557a:	6f 92       	push	r6
    557c:	89 81       	ldd	r24, Y+1	; 0x01
    557e:	1f 92       	push	r1
    5580:	8f 93       	push	r24
    5582:	8a 81       	ldd	r24, Y+2	; 0x02
    5584:	1f 92       	push	r1
    5586:	8f 93       	push	r24
    5588:	8b 81       	ldd	r24, Y+3	; 0x03
    558a:	1f 92       	push	r1
    558c:	8f 93       	push	r24
    558e:	8d e3       	ldi	r24, 0x3D	; 61
    5590:	92 e0       	ldi	r25, 0x02	; 2
    5592:	9f 93       	push	r25
    5594:	8f 93       	push	r24
    5596:	1f 92       	push	r1
    5598:	1f 92       	push	r1
    559a:	1f 92       	push	r1
    559c:	1f 92       	push	r1
    559e:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <snprintf>
    55a2:	8c 01       	movw	r16, r24
    55a4:	8d b7       	in	r24, 0x3d	; 61
    55a6:	9e b7       	in	r25, 0x3e	; 62
    55a8:	46 96       	adiw	r24, 0x16	; 22
    55aa:	0f b6       	in	r0, 0x3f	; 63
    55ac:	f8 94       	cli
    55ae:	9e bf       	out	0x3e, r25	; 62
    55b0:	0f be       	out	0x3f, r0	; 63
    55b2:	8d bf       	out	0x3d, r24	; 61
    55b4:	2d b7       	in	r18, 0x3d	; 61
    55b6:	3e b7       	in	r19, 0x3e	; 62
    55b8:	20 1b       	sub	r18, r16
    55ba:	31 0b       	sbc	r19, r17
    55bc:	0f b6       	in	r0, 0x3f	; 63
    55be:	f8 94       	cli
    55c0:	3e bf       	out	0x3e, r19	; 62
    55c2:	0f be       	out	0x3f, r0	; 63
    55c4:	2d bf       	out	0x3d, r18	; 61
    55c6:	8d b7       	in	r24, 0x3d	; 61
    55c8:	9e b7       	in	r25, 0x3e	; 62
    55ca:	01 96       	adiw	r24, 0x01	; 1
    55cc:	5c 01       	movw	r10, r24
			sprintf(sdData, "%02d:%02d:%02d,%s,%s,%s,%s,%s\r\n", rtc.hour, rtc.min, rtc.sec, pressChar, anglChar, speedChar, humidChar, tempChar);
    55ce:	ff 92       	push	r15
    55d0:	ef 92       	push	r14
    55d2:	df 92       	push	r13
    55d4:	cf 92       	push	r12
    55d6:	5f 92       	push	r5
    55d8:	4f 92       	push	r4
    55da:	3f 92       	push	r3
    55dc:	2f 92       	push	r2
    55de:	7f 92       	push	r7
    55e0:	6f 92       	push	r6
    55e2:	89 81       	ldd	r24, Y+1	; 0x01
    55e4:	1f 92       	push	r1
    55e6:	8f 93       	push	r24
    55e8:	8a 81       	ldd	r24, Y+2	; 0x02
    55ea:	1f 92       	push	r1
    55ec:	8f 93       	push	r24
    55ee:	8b 81       	ldd	r24, Y+3	; 0x03
    55f0:	1f 92       	push	r1
    55f2:	8f 93       	push	r24
    55f4:	2d e3       	ldi	r18, 0x3D	; 61
    55f6:	32 e0       	ldi	r19, 0x02	; 2
    55f8:	3f 93       	push	r19
    55fa:	2f 93       	push	r18
    55fc:	bf 92       	push	r11
    55fe:	af 92       	push	r10
    5600:	0e 94 03 31 	call	0x6206	; 0x6206 <sprintf>
			f_write(&Fil, sdData, sizeof(sdData), &bw);	// Write Data to the file
    5604:	25 e5       	ldi	r18, 0x55	; 85
    5606:	36 e0       	ldi	r19, 0x06	; 6
    5608:	a8 01       	movw	r20, r16
    560a:	6a 2d       	mov	r22, r10
    560c:	7b 2d       	mov	r23, r11
    560e:	87 e5       	ldi	r24, 0x57	; 87
    5610:	96 e0       	ldi	r25, 0x06	; 6
    5612:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <f_write>
			f_close(&Fil);
    5616:	87 e5       	ldi	r24, 0x57	; 87
    5618:	96 e0       	ldi	r25, 0x06	; 6
    561a:	0e 94 45 20 	call	0x408a	; 0x408a <f_close>
    561e:	0f b6       	in	r0, 0x3f	; 63
    5620:	f8 94       	cli
    5622:	9e be       	out	0x3e, r9	; 62
    5624:	0f be       	out	0x3f, r0	; 63
    5626:	8d be       	out	0x3d, r8	; 61
    5628:	18 c0       	rjmp	.+48     	; 0x565a <main+0x4be>
		}
		else
		{
			if (f_open(&Fil, fileName, FA_WRITE | FA_CREATE_ALWAYS) == FR_OK) {	/* Create a file */
    562a:	4a e0       	ldi	r20, 0x0A	; 10
    562c:	be 01       	movw	r22, r28
    562e:	68 5f       	subi	r22, 0xF8	; 248
    5630:	7f 4f       	sbci	r23, 0xFF	; 255
    5632:	87 e5       	ldi	r24, 0x57	; 87
    5634:	96 e0       	ldi	r25, 0x06	; 6
    5636:	0e 94 bc 1a 	call	0x3578	; 0x3578 <f_open>
    563a:	81 11       	cpse	r24, r1
    563c:	0e c0       	rjmp	.+28     	; 0x565a <main+0x4be>
				f_write(&Fil, "Time,Pressure,Wind Angle,Wind Speed,Humidity,Temperature\r\n", 58, &bw);	// Create CSV header
    563e:	25 e5       	ldi	r18, 0x55	; 85
    5640:	36 e0       	ldi	r19, 0x06	; 6
    5642:	4a e3       	ldi	r20, 0x3A	; 58
    5644:	50 e0       	ldi	r21, 0x00	; 0
    5646:	6d e5       	ldi	r22, 0x5D	; 93
    5648:	72 e0       	ldi	r23, 0x02	; 2
    564a:	87 e5       	ldi	r24, 0x57	; 87
    564c:	96 e0       	ldi	r25, 0x06	; 6
    564e:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <f_write>
				f_close(&Fil);								/* Close the file */
    5652:	87 e5       	ldi	r24, 0x57	; 87
    5654:	96 e0       	ldi	r25, 0x06	; 6
    5656:	0e 94 45 20 	call	0x408a	; 0x408a <f_close>
			}
		}

 		sec = 0;
    565a:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <sec>
 		Ether_SendPacket(packetStr);
    565e:	87 e7       	ldi	r24, 0x77	; 119
    5660:	96 e0       	ldi	r25, 0x06	; 6
    5662:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <Ether_SendPacket>
    5666:	62 ce       	rjmp	.-828    	; 0x532c <main+0x190>

00005668 <__subsf3>:
    5668:	50 58       	subi	r21, 0x80	; 128

0000566a <__addsf3>:
    566a:	bb 27       	eor	r27, r27
    566c:	aa 27       	eor	r26, r26
    566e:	0e 94 4c 2b 	call	0x5698	; 0x5698 <__addsf3x>
    5672:	0c 94 1a 2d 	jmp	0x5a34	; 0x5a34 <__fp_round>
    5676:	0e 94 0c 2d 	call	0x5a18	; 0x5a18 <__fp_pscA>
    567a:	38 f0       	brcs	.+14     	; 0x568a <__addsf3+0x20>
    567c:	0e 94 13 2d 	call	0x5a26	; 0x5a26 <__fp_pscB>
    5680:	20 f0       	brcs	.+8      	; 0x568a <__addsf3+0x20>
    5682:	39 f4       	brne	.+14     	; 0x5692 <__addsf3+0x28>
    5684:	9f 3f       	cpi	r25, 0xFF	; 255
    5686:	19 f4       	brne	.+6      	; 0x568e <__addsf3+0x24>
    5688:	26 f4       	brtc	.+8      	; 0x5692 <__addsf3+0x28>
    568a:	0c 94 f9 2c 	jmp	0x59f2	; 0x59f2 <__fp_nan>
    568e:	0e f4       	brtc	.+2      	; 0x5692 <__addsf3+0x28>
    5690:	e0 95       	com	r30
    5692:	e7 fb       	bst	r30, 7
    5694:	0c 94 f3 2c 	jmp	0x59e6	; 0x59e6 <__fp_inf>

00005698 <__addsf3x>:
    5698:	e9 2f       	mov	r30, r25
    569a:	0e 94 2b 2d 	call	0x5a56	; 0x5a56 <__fp_split3>
    569e:	58 f3       	brcs	.-42     	; 0x5676 <__addsf3+0xc>
    56a0:	ba 17       	cp	r27, r26
    56a2:	62 07       	cpc	r22, r18
    56a4:	73 07       	cpc	r23, r19
    56a6:	84 07       	cpc	r24, r20
    56a8:	95 07       	cpc	r25, r21
    56aa:	20 f0       	brcs	.+8      	; 0x56b4 <__addsf3x+0x1c>
    56ac:	79 f4       	brne	.+30     	; 0x56cc <__addsf3x+0x34>
    56ae:	a6 f5       	brtc	.+104    	; 0x5718 <__addsf3x+0x80>
    56b0:	0c 94 4d 2d 	jmp	0x5a9a	; 0x5a9a <__fp_zero>
    56b4:	0e f4       	brtc	.+2      	; 0x56b8 <__addsf3x+0x20>
    56b6:	e0 95       	com	r30
    56b8:	0b 2e       	mov	r0, r27
    56ba:	ba 2f       	mov	r27, r26
    56bc:	a0 2d       	mov	r26, r0
    56be:	0b 01       	movw	r0, r22
    56c0:	b9 01       	movw	r22, r18
    56c2:	90 01       	movw	r18, r0
    56c4:	0c 01       	movw	r0, r24
    56c6:	ca 01       	movw	r24, r20
    56c8:	a0 01       	movw	r20, r0
    56ca:	11 24       	eor	r1, r1
    56cc:	ff 27       	eor	r31, r31
    56ce:	59 1b       	sub	r21, r25
    56d0:	99 f0       	breq	.+38     	; 0x56f8 <__addsf3x+0x60>
    56d2:	59 3f       	cpi	r21, 0xF9	; 249
    56d4:	50 f4       	brcc	.+20     	; 0x56ea <__addsf3x+0x52>
    56d6:	50 3e       	cpi	r21, 0xE0	; 224
    56d8:	68 f1       	brcs	.+90     	; 0x5734 <__addsf3x+0x9c>
    56da:	1a 16       	cp	r1, r26
    56dc:	f0 40       	sbci	r31, 0x00	; 0
    56de:	a2 2f       	mov	r26, r18
    56e0:	23 2f       	mov	r18, r19
    56e2:	34 2f       	mov	r19, r20
    56e4:	44 27       	eor	r20, r20
    56e6:	58 5f       	subi	r21, 0xF8	; 248
    56e8:	f3 cf       	rjmp	.-26     	; 0x56d0 <__addsf3x+0x38>
    56ea:	46 95       	lsr	r20
    56ec:	37 95       	ror	r19
    56ee:	27 95       	ror	r18
    56f0:	a7 95       	ror	r26
    56f2:	f0 40       	sbci	r31, 0x00	; 0
    56f4:	53 95       	inc	r21
    56f6:	c9 f7       	brne	.-14     	; 0x56ea <__addsf3x+0x52>
    56f8:	7e f4       	brtc	.+30     	; 0x5718 <__addsf3x+0x80>
    56fa:	1f 16       	cp	r1, r31
    56fc:	ba 0b       	sbc	r27, r26
    56fe:	62 0b       	sbc	r22, r18
    5700:	73 0b       	sbc	r23, r19
    5702:	84 0b       	sbc	r24, r20
    5704:	ba f0       	brmi	.+46     	; 0x5734 <__addsf3x+0x9c>
    5706:	91 50       	subi	r25, 0x01	; 1
    5708:	a1 f0       	breq	.+40     	; 0x5732 <__addsf3x+0x9a>
    570a:	ff 0f       	add	r31, r31
    570c:	bb 1f       	adc	r27, r27
    570e:	66 1f       	adc	r22, r22
    5710:	77 1f       	adc	r23, r23
    5712:	88 1f       	adc	r24, r24
    5714:	c2 f7       	brpl	.-16     	; 0x5706 <__addsf3x+0x6e>
    5716:	0e c0       	rjmp	.+28     	; 0x5734 <__addsf3x+0x9c>
    5718:	ba 0f       	add	r27, r26
    571a:	62 1f       	adc	r22, r18
    571c:	73 1f       	adc	r23, r19
    571e:	84 1f       	adc	r24, r20
    5720:	48 f4       	brcc	.+18     	; 0x5734 <__addsf3x+0x9c>
    5722:	87 95       	ror	r24
    5724:	77 95       	ror	r23
    5726:	67 95       	ror	r22
    5728:	b7 95       	ror	r27
    572a:	f7 95       	ror	r31
    572c:	9e 3f       	cpi	r25, 0xFE	; 254
    572e:	08 f0       	brcs	.+2      	; 0x5732 <__addsf3x+0x9a>
    5730:	b0 cf       	rjmp	.-160    	; 0x5692 <__addsf3+0x28>
    5732:	93 95       	inc	r25
    5734:	88 0f       	add	r24, r24
    5736:	08 f0       	brcs	.+2      	; 0x573a <__addsf3x+0xa2>
    5738:	99 27       	eor	r25, r25
    573a:	ee 0f       	add	r30, r30
    573c:	97 95       	ror	r25
    573e:	87 95       	ror	r24
    5740:	08 95       	ret

00005742 <__cmpsf2>:
    5742:	0e 94 cf 2c 	call	0x599e	; 0x599e <__fp_cmp>
    5746:	08 f4       	brcc	.+2      	; 0x574a <__cmpsf2+0x8>
    5748:	81 e0       	ldi	r24, 0x01	; 1
    574a:	08 95       	ret

0000574c <__divsf3>:
    574c:	0e 94 ba 2b 	call	0x5774	; 0x5774 <__divsf3x>
    5750:	0c 94 1a 2d 	jmp	0x5a34	; 0x5a34 <__fp_round>
    5754:	0e 94 13 2d 	call	0x5a26	; 0x5a26 <__fp_pscB>
    5758:	58 f0       	brcs	.+22     	; 0x5770 <__divsf3+0x24>
    575a:	0e 94 0c 2d 	call	0x5a18	; 0x5a18 <__fp_pscA>
    575e:	40 f0       	brcs	.+16     	; 0x5770 <__divsf3+0x24>
    5760:	29 f4       	brne	.+10     	; 0x576c <__divsf3+0x20>
    5762:	5f 3f       	cpi	r21, 0xFF	; 255
    5764:	29 f0       	breq	.+10     	; 0x5770 <__divsf3+0x24>
    5766:	0c 94 f3 2c 	jmp	0x59e6	; 0x59e6 <__fp_inf>
    576a:	51 11       	cpse	r21, r1
    576c:	0c 94 4e 2d 	jmp	0x5a9c	; 0x5a9c <__fp_szero>
    5770:	0c 94 f9 2c 	jmp	0x59f2	; 0x59f2 <__fp_nan>

00005774 <__divsf3x>:
    5774:	0e 94 2b 2d 	call	0x5a56	; 0x5a56 <__fp_split3>
    5778:	68 f3       	brcs	.-38     	; 0x5754 <__divsf3+0x8>

0000577a <__divsf3_pse>:
    577a:	99 23       	and	r25, r25
    577c:	b1 f3       	breq	.-20     	; 0x576a <__divsf3+0x1e>
    577e:	55 23       	and	r21, r21
    5780:	91 f3       	breq	.-28     	; 0x5766 <__divsf3+0x1a>
    5782:	95 1b       	sub	r25, r21
    5784:	55 0b       	sbc	r21, r21
    5786:	bb 27       	eor	r27, r27
    5788:	aa 27       	eor	r26, r26
    578a:	62 17       	cp	r22, r18
    578c:	73 07       	cpc	r23, r19
    578e:	84 07       	cpc	r24, r20
    5790:	38 f0       	brcs	.+14     	; 0x57a0 <__divsf3_pse+0x26>
    5792:	9f 5f       	subi	r25, 0xFF	; 255
    5794:	5f 4f       	sbci	r21, 0xFF	; 255
    5796:	22 0f       	add	r18, r18
    5798:	33 1f       	adc	r19, r19
    579a:	44 1f       	adc	r20, r20
    579c:	aa 1f       	adc	r26, r26
    579e:	a9 f3       	breq	.-22     	; 0x578a <__divsf3_pse+0x10>
    57a0:	35 d0       	rcall	.+106    	; 0x580c <__divsf3_pse+0x92>
    57a2:	0e 2e       	mov	r0, r30
    57a4:	3a f0       	brmi	.+14     	; 0x57b4 <__divsf3_pse+0x3a>
    57a6:	e0 e8       	ldi	r30, 0x80	; 128
    57a8:	32 d0       	rcall	.+100    	; 0x580e <__divsf3_pse+0x94>
    57aa:	91 50       	subi	r25, 0x01	; 1
    57ac:	50 40       	sbci	r21, 0x00	; 0
    57ae:	e6 95       	lsr	r30
    57b0:	00 1c       	adc	r0, r0
    57b2:	ca f7       	brpl	.-14     	; 0x57a6 <__divsf3_pse+0x2c>
    57b4:	2b d0       	rcall	.+86     	; 0x580c <__divsf3_pse+0x92>
    57b6:	fe 2f       	mov	r31, r30
    57b8:	29 d0       	rcall	.+82     	; 0x580c <__divsf3_pse+0x92>
    57ba:	66 0f       	add	r22, r22
    57bc:	77 1f       	adc	r23, r23
    57be:	88 1f       	adc	r24, r24
    57c0:	bb 1f       	adc	r27, r27
    57c2:	26 17       	cp	r18, r22
    57c4:	37 07       	cpc	r19, r23
    57c6:	48 07       	cpc	r20, r24
    57c8:	ab 07       	cpc	r26, r27
    57ca:	b0 e8       	ldi	r27, 0x80	; 128
    57cc:	09 f0       	breq	.+2      	; 0x57d0 <__divsf3_pse+0x56>
    57ce:	bb 0b       	sbc	r27, r27
    57d0:	80 2d       	mov	r24, r0
    57d2:	bf 01       	movw	r22, r30
    57d4:	ff 27       	eor	r31, r31
    57d6:	93 58       	subi	r25, 0x83	; 131
    57d8:	5f 4f       	sbci	r21, 0xFF	; 255
    57da:	3a f0       	brmi	.+14     	; 0x57ea <__divsf3_pse+0x70>
    57dc:	9e 3f       	cpi	r25, 0xFE	; 254
    57de:	51 05       	cpc	r21, r1
    57e0:	78 f0       	brcs	.+30     	; 0x5800 <__divsf3_pse+0x86>
    57e2:	0c 94 f3 2c 	jmp	0x59e6	; 0x59e6 <__fp_inf>
    57e6:	0c 94 4e 2d 	jmp	0x5a9c	; 0x5a9c <__fp_szero>
    57ea:	5f 3f       	cpi	r21, 0xFF	; 255
    57ec:	e4 f3       	brlt	.-8      	; 0x57e6 <__divsf3_pse+0x6c>
    57ee:	98 3e       	cpi	r25, 0xE8	; 232
    57f0:	d4 f3       	brlt	.-12     	; 0x57e6 <__divsf3_pse+0x6c>
    57f2:	86 95       	lsr	r24
    57f4:	77 95       	ror	r23
    57f6:	67 95       	ror	r22
    57f8:	b7 95       	ror	r27
    57fa:	f7 95       	ror	r31
    57fc:	9f 5f       	subi	r25, 0xFF	; 255
    57fe:	c9 f7       	brne	.-14     	; 0x57f2 <__divsf3_pse+0x78>
    5800:	88 0f       	add	r24, r24
    5802:	91 1d       	adc	r25, r1
    5804:	96 95       	lsr	r25
    5806:	87 95       	ror	r24
    5808:	97 f9       	bld	r25, 7
    580a:	08 95       	ret
    580c:	e1 e0       	ldi	r30, 0x01	; 1
    580e:	66 0f       	add	r22, r22
    5810:	77 1f       	adc	r23, r23
    5812:	88 1f       	adc	r24, r24
    5814:	bb 1f       	adc	r27, r27
    5816:	62 17       	cp	r22, r18
    5818:	73 07       	cpc	r23, r19
    581a:	84 07       	cpc	r24, r20
    581c:	ba 07       	cpc	r27, r26
    581e:	20 f0       	brcs	.+8      	; 0x5828 <__divsf3_pse+0xae>
    5820:	62 1b       	sub	r22, r18
    5822:	73 0b       	sbc	r23, r19
    5824:	84 0b       	sbc	r24, r20
    5826:	ba 0b       	sbc	r27, r26
    5828:	ee 1f       	adc	r30, r30
    582a:	88 f7       	brcc	.-30     	; 0x580e <__divsf3_pse+0x94>
    582c:	e0 95       	com	r30
    582e:	08 95       	ret

00005830 <__fixsfsi>:
    5830:	0e 94 1f 2c 	call	0x583e	; 0x583e <__fixunssfsi>
    5834:	68 94       	set
    5836:	b1 11       	cpse	r27, r1
    5838:	0c 94 4e 2d 	jmp	0x5a9c	; 0x5a9c <__fp_szero>
    583c:	08 95       	ret

0000583e <__fixunssfsi>:
    583e:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <__fp_splitA>
    5842:	88 f0       	brcs	.+34     	; 0x5866 <__fixunssfsi+0x28>
    5844:	9f 57       	subi	r25, 0x7F	; 127
    5846:	98 f0       	brcs	.+38     	; 0x586e <__fixunssfsi+0x30>
    5848:	b9 2f       	mov	r27, r25
    584a:	99 27       	eor	r25, r25
    584c:	b7 51       	subi	r27, 0x17	; 23
    584e:	b0 f0       	brcs	.+44     	; 0x587c <__fixunssfsi+0x3e>
    5850:	e1 f0       	breq	.+56     	; 0x588a <__fixunssfsi+0x4c>
    5852:	66 0f       	add	r22, r22
    5854:	77 1f       	adc	r23, r23
    5856:	88 1f       	adc	r24, r24
    5858:	99 1f       	adc	r25, r25
    585a:	1a f0       	brmi	.+6      	; 0x5862 <__fixunssfsi+0x24>
    585c:	ba 95       	dec	r27
    585e:	c9 f7       	brne	.-14     	; 0x5852 <__fixunssfsi+0x14>
    5860:	14 c0       	rjmp	.+40     	; 0x588a <__fixunssfsi+0x4c>
    5862:	b1 30       	cpi	r27, 0x01	; 1
    5864:	91 f0       	breq	.+36     	; 0x588a <__fixunssfsi+0x4c>
    5866:	0e 94 4d 2d 	call	0x5a9a	; 0x5a9a <__fp_zero>
    586a:	b1 e0       	ldi	r27, 0x01	; 1
    586c:	08 95       	ret
    586e:	0c 94 4d 2d 	jmp	0x5a9a	; 0x5a9a <__fp_zero>
    5872:	67 2f       	mov	r22, r23
    5874:	78 2f       	mov	r23, r24
    5876:	88 27       	eor	r24, r24
    5878:	b8 5f       	subi	r27, 0xF8	; 248
    587a:	39 f0       	breq	.+14     	; 0x588a <__fixunssfsi+0x4c>
    587c:	b9 3f       	cpi	r27, 0xF9	; 249
    587e:	cc f3       	brlt	.-14     	; 0x5872 <__fixunssfsi+0x34>
    5880:	86 95       	lsr	r24
    5882:	77 95       	ror	r23
    5884:	67 95       	ror	r22
    5886:	b3 95       	inc	r27
    5888:	d9 f7       	brne	.-10     	; 0x5880 <__fixunssfsi+0x42>
    588a:	3e f4       	brtc	.+14     	; 0x589a <__fixunssfsi+0x5c>
    588c:	90 95       	com	r25
    588e:	80 95       	com	r24
    5890:	70 95       	com	r23
    5892:	61 95       	neg	r22
    5894:	7f 4f       	sbci	r23, 0xFF	; 255
    5896:	8f 4f       	sbci	r24, 0xFF	; 255
    5898:	9f 4f       	sbci	r25, 0xFF	; 255
    589a:	08 95       	ret

0000589c <__floatdisf>:
    589c:	97 fb       	bst	r25, 7
    589e:	16 f4       	brtc	.+4      	; 0x58a4 <__floatdisf+0x8>
    58a0:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <__fp_negdi>
    58a4:	0c 94 92 2c 	jmp	0x5924	; 0x5924 <__fp_di2sf>

000058a8 <__floatunsisf>:
    58a8:	e8 94       	clt
    58aa:	09 c0       	rjmp	.+18     	; 0x58be <__floatsisf+0x12>

000058ac <__floatsisf>:
    58ac:	97 fb       	bst	r25, 7
    58ae:	3e f4       	brtc	.+14     	; 0x58be <__floatsisf+0x12>
    58b0:	90 95       	com	r25
    58b2:	80 95       	com	r24
    58b4:	70 95       	com	r23
    58b6:	61 95       	neg	r22
    58b8:	7f 4f       	sbci	r23, 0xFF	; 255
    58ba:	8f 4f       	sbci	r24, 0xFF	; 255
    58bc:	9f 4f       	sbci	r25, 0xFF	; 255
    58be:	99 23       	and	r25, r25
    58c0:	a9 f0       	breq	.+42     	; 0x58ec <__floatsisf+0x40>
    58c2:	f9 2f       	mov	r31, r25
    58c4:	96 e9       	ldi	r25, 0x96	; 150
    58c6:	bb 27       	eor	r27, r27
    58c8:	93 95       	inc	r25
    58ca:	f6 95       	lsr	r31
    58cc:	87 95       	ror	r24
    58ce:	77 95       	ror	r23
    58d0:	67 95       	ror	r22
    58d2:	b7 95       	ror	r27
    58d4:	f1 11       	cpse	r31, r1
    58d6:	f8 cf       	rjmp	.-16     	; 0x58c8 <__floatsisf+0x1c>
    58d8:	fa f4       	brpl	.+62     	; 0x5918 <__floatsisf+0x6c>
    58da:	bb 0f       	add	r27, r27
    58dc:	11 f4       	brne	.+4      	; 0x58e2 <__floatsisf+0x36>
    58de:	60 ff       	sbrs	r22, 0
    58e0:	1b c0       	rjmp	.+54     	; 0x5918 <__floatsisf+0x6c>
    58e2:	6f 5f       	subi	r22, 0xFF	; 255
    58e4:	7f 4f       	sbci	r23, 0xFF	; 255
    58e6:	8f 4f       	sbci	r24, 0xFF	; 255
    58e8:	9f 4f       	sbci	r25, 0xFF	; 255
    58ea:	16 c0       	rjmp	.+44     	; 0x5918 <__floatsisf+0x6c>
    58ec:	88 23       	and	r24, r24
    58ee:	11 f0       	breq	.+4      	; 0x58f4 <__floatsisf+0x48>
    58f0:	96 e9       	ldi	r25, 0x96	; 150
    58f2:	11 c0       	rjmp	.+34     	; 0x5916 <__floatsisf+0x6a>
    58f4:	77 23       	and	r23, r23
    58f6:	21 f0       	breq	.+8      	; 0x5900 <__floatsisf+0x54>
    58f8:	9e e8       	ldi	r25, 0x8E	; 142
    58fa:	87 2f       	mov	r24, r23
    58fc:	76 2f       	mov	r23, r22
    58fe:	05 c0       	rjmp	.+10     	; 0x590a <__floatsisf+0x5e>
    5900:	66 23       	and	r22, r22
    5902:	71 f0       	breq	.+28     	; 0x5920 <__floatsisf+0x74>
    5904:	96 e8       	ldi	r25, 0x86	; 134
    5906:	86 2f       	mov	r24, r22
    5908:	70 e0       	ldi	r23, 0x00	; 0
    590a:	60 e0       	ldi	r22, 0x00	; 0
    590c:	2a f0       	brmi	.+10     	; 0x5918 <__floatsisf+0x6c>
    590e:	9a 95       	dec	r25
    5910:	66 0f       	add	r22, r22
    5912:	77 1f       	adc	r23, r23
    5914:	88 1f       	adc	r24, r24
    5916:	da f7       	brpl	.-10     	; 0x590e <__floatsisf+0x62>
    5918:	88 0f       	add	r24, r24
    591a:	96 95       	lsr	r25
    591c:	87 95       	ror	r24
    591e:	97 f9       	bld	r25, 7
    5920:	08 95       	ret

00005922 <__floatundisf>:
    5922:	e8 94       	clt

00005924 <__fp_di2sf>:
    5924:	f9 2f       	mov	r31, r25
    5926:	96 eb       	ldi	r25, 0xB6	; 182
    5928:	ff 23       	and	r31, r31
    592a:	81 f0       	breq	.+32     	; 0x594c <__fp_di2sf+0x28>
    592c:	12 16       	cp	r1, r18
    592e:	13 06       	cpc	r1, r19
    5930:	14 06       	cpc	r1, r20
    5932:	44 0b       	sbc	r20, r20
    5934:	93 95       	inc	r25
    5936:	f6 95       	lsr	r31
    5938:	87 95       	ror	r24
    593a:	77 95       	ror	r23
    593c:	67 95       	ror	r22
    593e:	57 95       	ror	r21
    5940:	40 40       	sbci	r20, 0x00	; 0
    5942:	ff 23       	and	r31, r31
    5944:	b9 f7       	brne	.-18     	; 0x5934 <__fp_di2sf+0x10>
    5946:	1b c0       	rjmp	.+54     	; 0x597e <__fp_di2sf+0x5a>
    5948:	99 27       	eor	r25, r25
    594a:	08 95       	ret
    594c:	88 23       	and	r24, r24
    594e:	51 f4       	brne	.+20     	; 0x5964 <__fp_di2sf+0x40>
    5950:	98 50       	subi	r25, 0x08	; 8
    5952:	d2 f7       	brpl	.-12     	; 0x5948 <__fp_di2sf+0x24>
    5954:	87 2b       	or	r24, r23
    5956:	76 2f       	mov	r23, r22
    5958:	65 2f       	mov	r22, r21
    595a:	54 2f       	mov	r21, r20
    595c:	43 2f       	mov	r20, r19
    595e:	32 2f       	mov	r19, r18
    5960:	20 e0       	ldi	r18, 0x00	; 0
    5962:	b1 f3       	breq	.-20     	; 0x5950 <__fp_di2sf+0x2c>
    5964:	12 16       	cp	r1, r18
    5966:	13 06       	cpc	r1, r19
    5968:	14 06       	cpc	r1, r20
    596a:	44 0b       	sbc	r20, r20
    596c:	88 23       	and	r24, r24
    596e:	3a f0       	brmi	.+14     	; 0x597e <__fp_di2sf+0x5a>
    5970:	9a 95       	dec	r25
    5972:	44 0f       	add	r20, r20
    5974:	55 1f       	adc	r21, r21
    5976:	66 1f       	adc	r22, r22
    5978:	77 1f       	adc	r23, r23
    597a:	88 1f       	adc	r24, r24
    597c:	ca f7       	brpl	.-14     	; 0x5970 <__fp_di2sf+0x4c>
    597e:	55 23       	and	r21, r21
    5980:	4a f4       	brpl	.+18     	; 0x5994 <__fp_di2sf+0x70>
    5982:	44 0f       	add	r20, r20
    5984:	55 1f       	adc	r21, r21
    5986:	11 f4       	brne	.+4      	; 0x598c <__fp_di2sf+0x68>
    5988:	60 ff       	sbrs	r22, 0
    598a:	04 c0       	rjmp	.+8      	; 0x5994 <__fp_di2sf+0x70>
    598c:	6f 5f       	subi	r22, 0xFF	; 255
    598e:	7f 4f       	sbci	r23, 0xFF	; 255
    5990:	8f 4f       	sbci	r24, 0xFF	; 255
    5992:	9f 4f       	sbci	r25, 0xFF	; 255
    5994:	88 0f       	add	r24, r24
    5996:	96 95       	lsr	r25
    5998:	87 95       	ror	r24
    599a:	97 f9       	bld	r25, 7
    599c:	08 95       	ret

0000599e <__fp_cmp>:
    599e:	99 0f       	add	r25, r25
    59a0:	00 08       	sbc	r0, r0
    59a2:	55 0f       	add	r21, r21
    59a4:	aa 0b       	sbc	r26, r26
    59a6:	e0 e8       	ldi	r30, 0x80	; 128
    59a8:	fe ef       	ldi	r31, 0xFE	; 254
    59aa:	16 16       	cp	r1, r22
    59ac:	17 06       	cpc	r1, r23
    59ae:	e8 07       	cpc	r30, r24
    59b0:	f9 07       	cpc	r31, r25
    59b2:	c0 f0       	brcs	.+48     	; 0x59e4 <__fp_cmp+0x46>
    59b4:	12 16       	cp	r1, r18
    59b6:	13 06       	cpc	r1, r19
    59b8:	e4 07       	cpc	r30, r20
    59ba:	f5 07       	cpc	r31, r21
    59bc:	98 f0       	brcs	.+38     	; 0x59e4 <__fp_cmp+0x46>
    59be:	62 1b       	sub	r22, r18
    59c0:	73 0b       	sbc	r23, r19
    59c2:	84 0b       	sbc	r24, r20
    59c4:	95 0b       	sbc	r25, r21
    59c6:	39 f4       	brne	.+14     	; 0x59d6 <__fp_cmp+0x38>
    59c8:	0a 26       	eor	r0, r26
    59ca:	61 f0       	breq	.+24     	; 0x59e4 <__fp_cmp+0x46>
    59cc:	23 2b       	or	r18, r19
    59ce:	24 2b       	or	r18, r20
    59d0:	25 2b       	or	r18, r21
    59d2:	21 f4       	brne	.+8      	; 0x59dc <__fp_cmp+0x3e>
    59d4:	08 95       	ret
    59d6:	0a 26       	eor	r0, r26
    59d8:	09 f4       	brne	.+2      	; 0x59dc <__fp_cmp+0x3e>
    59da:	a1 40       	sbci	r26, 0x01	; 1
    59dc:	a6 95       	lsr	r26
    59de:	8f ef       	ldi	r24, 0xFF	; 255
    59e0:	81 1d       	adc	r24, r1
    59e2:	81 1d       	adc	r24, r1
    59e4:	08 95       	ret

000059e6 <__fp_inf>:
    59e6:	97 f9       	bld	r25, 7
    59e8:	9f 67       	ori	r25, 0x7F	; 127
    59ea:	80 e8       	ldi	r24, 0x80	; 128
    59ec:	70 e0       	ldi	r23, 0x00	; 0
    59ee:	60 e0       	ldi	r22, 0x00	; 0
    59f0:	08 95       	ret

000059f2 <__fp_nan>:
    59f2:	9f ef       	ldi	r25, 0xFF	; 255
    59f4:	80 ec       	ldi	r24, 0xC0	; 192
    59f6:	08 95       	ret

000059f8 <__fp_negdi>:
    59f8:	90 95       	com	r25
    59fa:	80 95       	com	r24
    59fc:	70 95       	com	r23
    59fe:	60 95       	com	r22
    5a00:	50 95       	com	r21
    5a02:	40 95       	com	r20
    5a04:	30 95       	com	r19
    5a06:	21 95       	neg	r18
    5a08:	3f 4f       	sbci	r19, 0xFF	; 255
    5a0a:	4f 4f       	sbci	r20, 0xFF	; 255
    5a0c:	5f 4f       	sbci	r21, 0xFF	; 255
    5a0e:	6f 4f       	sbci	r22, 0xFF	; 255
    5a10:	7f 4f       	sbci	r23, 0xFF	; 255
    5a12:	8f 4f       	sbci	r24, 0xFF	; 255
    5a14:	9f 4f       	sbci	r25, 0xFF	; 255
    5a16:	08 95       	ret

00005a18 <__fp_pscA>:
    5a18:	00 24       	eor	r0, r0
    5a1a:	0a 94       	dec	r0
    5a1c:	16 16       	cp	r1, r22
    5a1e:	17 06       	cpc	r1, r23
    5a20:	18 06       	cpc	r1, r24
    5a22:	09 06       	cpc	r0, r25
    5a24:	08 95       	ret

00005a26 <__fp_pscB>:
    5a26:	00 24       	eor	r0, r0
    5a28:	0a 94       	dec	r0
    5a2a:	12 16       	cp	r1, r18
    5a2c:	13 06       	cpc	r1, r19
    5a2e:	14 06       	cpc	r1, r20
    5a30:	05 06       	cpc	r0, r21
    5a32:	08 95       	ret

00005a34 <__fp_round>:
    5a34:	09 2e       	mov	r0, r25
    5a36:	03 94       	inc	r0
    5a38:	00 0c       	add	r0, r0
    5a3a:	11 f4       	brne	.+4      	; 0x5a40 <__fp_round+0xc>
    5a3c:	88 23       	and	r24, r24
    5a3e:	52 f0       	brmi	.+20     	; 0x5a54 <__fp_round+0x20>
    5a40:	bb 0f       	add	r27, r27
    5a42:	40 f4       	brcc	.+16     	; 0x5a54 <__fp_round+0x20>
    5a44:	bf 2b       	or	r27, r31
    5a46:	11 f4       	brne	.+4      	; 0x5a4c <__fp_round+0x18>
    5a48:	60 ff       	sbrs	r22, 0
    5a4a:	04 c0       	rjmp	.+8      	; 0x5a54 <__fp_round+0x20>
    5a4c:	6f 5f       	subi	r22, 0xFF	; 255
    5a4e:	7f 4f       	sbci	r23, 0xFF	; 255
    5a50:	8f 4f       	sbci	r24, 0xFF	; 255
    5a52:	9f 4f       	sbci	r25, 0xFF	; 255
    5a54:	08 95       	ret

00005a56 <__fp_split3>:
    5a56:	57 fd       	sbrc	r21, 7
    5a58:	90 58       	subi	r25, 0x80	; 128
    5a5a:	44 0f       	add	r20, r20
    5a5c:	55 1f       	adc	r21, r21
    5a5e:	59 f0       	breq	.+22     	; 0x5a76 <__fp_splitA+0x10>
    5a60:	5f 3f       	cpi	r21, 0xFF	; 255
    5a62:	71 f0       	breq	.+28     	; 0x5a80 <__fp_splitA+0x1a>
    5a64:	47 95       	ror	r20

00005a66 <__fp_splitA>:
    5a66:	88 0f       	add	r24, r24
    5a68:	97 fb       	bst	r25, 7
    5a6a:	99 1f       	adc	r25, r25
    5a6c:	61 f0       	breq	.+24     	; 0x5a86 <__fp_splitA+0x20>
    5a6e:	9f 3f       	cpi	r25, 0xFF	; 255
    5a70:	79 f0       	breq	.+30     	; 0x5a90 <__fp_splitA+0x2a>
    5a72:	87 95       	ror	r24
    5a74:	08 95       	ret
    5a76:	12 16       	cp	r1, r18
    5a78:	13 06       	cpc	r1, r19
    5a7a:	14 06       	cpc	r1, r20
    5a7c:	55 1f       	adc	r21, r21
    5a7e:	f2 cf       	rjmp	.-28     	; 0x5a64 <__fp_split3+0xe>
    5a80:	46 95       	lsr	r20
    5a82:	f1 df       	rcall	.-30     	; 0x5a66 <__fp_splitA>
    5a84:	08 c0       	rjmp	.+16     	; 0x5a96 <__fp_splitA+0x30>
    5a86:	16 16       	cp	r1, r22
    5a88:	17 06       	cpc	r1, r23
    5a8a:	18 06       	cpc	r1, r24
    5a8c:	99 1f       	adc	r25, r25
    5a8e:	f1 cf       	rjmp	.-30     	; 0x5a72 <__fp_splitA+0xc>
    5a90:	86 95       	lsr	r24
    5a92:	71 05       	cpc	r23, r1
    5a94:	61 05       	cpc	r22, r1
    5a96:	08 94       	sec
    5a98:	08 95       	ret

00005a9a <__fp_zero>:
    5a9a:	e8 94       	clt

00005a9c <__fp_szero>:
    5a9c:	bb 27       	eor	r27, r27
    5a9e:	66 27       	eor	r22, r22
    5aa0:	77 27       	eor	r23, r23
    5aa2:	cb 01       	movw	r24, r22
    5aa4:	97 f9       	bld	r25, 7
    5aa6:	08 95       	ret

00005aa8 <__gesf2>:
    5aa8:	0e 94 cf 2c 	call	0x599e	; 0x599e <__fp_cmp>
    5aac:	08 f4       	brcc	.+2      	; 0x5ab0 <__gesf2+0x8>
    5aae:	8f ef       	ldi	r24, 0xFF	; 255
    5ab0:	08 95       	ret

00005ab2 <__mulsf3>:
    5ab2:	0e 94 6c 2d 	call	0x5ad8	; 0x5ad8 <__mulsf3x>
    5ab6:	0c 94 1a 2d 	jmp	0x5a34	; 0x5a34 <__fp_round>
    5aba:	0e 94 0c 2d 	call	0x5a18	; 0x5a18 <__fp_pscA>
    5abe:	38 f0       	brcs	.+14     	; 0x5ace <__mulsf3+0x1c>
    5ac0:	0e 94 13 2d 	call	0x5a26	; 0x5a26 <__fp_pscB>
    5ac4:	20 f0       	brcs	.+8      	; 0x5ace <__mulsf3+0x1c>
    5ac6:	95 23       	and	r25, r21
    5ac8:	11 f0       	breq	.+4      	; 0x5ace <__mulsf3+0x1c>
    5aca:	0c 94 f3 2c 	jmp	0x59e6	; 0x59e6 <__fp_inf>
    5ace:	0c 94 f9 2c 	jmp	0x59f2	; 0x59f2 <__fp_nan>
    5ad2:	11 24       	eor	r1, r1
    5ad4:	0c 94 4e 2d 	jmp	0x5a9c	; 0x5a9c <__fp_szero>

00005ad8 <__mulsf3x>:
    5ad8:	0e 94 2b 2d 	call	0x5a56	; 0x5a56 <__fp_split3>
    5adc:	70 f3       	brcs	.-36     	; 0x5aba <__mulsf3+0x8>

00005ade <__mulsf3_pse>:
    5ade:	95 9f       	mul	r25, r21
    5ae0:	c1 f3       	breq	.-16     	; 0x5ad2 <__mulsf3+0x20>
    5ae2:	95 0f       	add	r25, r21
    5ae4:	50 e0       	ldi	r21, 0x00	; 0
    5ae6:	55 1f       	adc	r21, r21
    5ae8:	62 9f       	mul	r22, r18
    5aea:	f0 01       	movw	r30, r0
    5aec:	72 9f       	mul	r23, r18
    5aee:	bb 27       	eor	r27, r27
    5af0:	f0 0d       	add	r31, r0
    5af2:	b1 1d       	adc	r27, r1
    5af4:	63 9f       	mul	r22, r19
    5af6:	aa 27       	eor	r26, r26
    5af8:	f0 0d       	add	r31, r0
    5afa:	b1 1d       	adc	r27, r1
    5afc:	aa 1f       	adc	r26, r26
    5afe:	64 9f       	mul	r22, r20
    5b00:	66 27       	eor	r22, r22
    5b02:	b0 0d       	add	r27, r0
    5b04:	a1 1d       	adc	r26, r1
    5b06:	66 1f       	adc	r22, r22
    5b08:	82 9f       	mul	r24, r18
    5b0a:	22 27       	eor	r18, r18
    5b0c:	b0 0d       	add	r27, r0
    5b0e:	a1 1d       	adc	r26, r1
    5b10:	62 1f       	adc	r22, r18
    5b12:	73 9f       	mul	r23, r19
    5b14:	b0 0d       	add	r27, r0
    5b16:	a1 1d       	adc	r26, r1
    5b18:	62 1f       	adc	r22, r18
    5b1a:	83 9f       	mul	r24, r19
    5b1c:	a0 0d       	add	r26, r0
    5b1e:	61 1d       	adc	r22, r1
    5b20:	22 1f       	adc	r18, r18
    5b22:	74 9f       	mul	r23, r20
    5b24:	33 27       	eor	r19, r19
    5b26:	a0 0d       	add	r26, r0
    5b28:	61 1d       	adc	r22, r1
    5b2a:	23 1f       	adc	r18, r19
    5b2c:	84 9f       	mul	r24, r20
    5b2e:	60 0d       	add	r22, r0
    5b30:	21 1d       	adc	r18, r1
    5b32:	82 2f       	mov	r24, r18
    5b34:	76 2f       	mov	r23, r22
    5b36:	6a 2f       	mov	r22, r26
    5b38:	11 24       	eor	r1, r1
    5b3a:	9f 57       	subi	r25, 0x7F	; 127
    5b3c:	50 40       	sbci	r21, 0x00	; 0
    5b3e:	9a f0       	brmi	.+38     	; 0x5b66 <__mulsf3_pse+0x88>
    5b40:	f1 f0       	breq	.+60     	; 0x5b7e <__mulsf3_pse+0xa0>
    5b42:	88 23       	and	r24, r24
    5b44:	4a f0       	brmi	.+18     	; 0x5b58 <__mulsf3_pse+0x7a>
    5b46:	ee 0f       	add	r30, r30
    5b48:	ff 1f       	adc	r31, r31
    5b4a:	bb 1f       	adc	r27, r27
    5b4c:	66 1f       	adc	r22, r22
    5b4e:	77 1f       	adc	r23, r23
    5b50:	88 1f       	adc	r24, r24
    5b52:	91 50       	subi	r25, 0x01	; 1
    5b54:	50 40       	sbci	r21, 0x00	; 0
    5b56:	a9 f7       	brne	.-22     	; 0x5b42 <__mulsf3_pse+0x64>
    5b58:	9e 3f       	cpi	r25, 0xFE	; 254
    5b5a:	51 05       	cpc	r21, r1
    5b5c:	80 f0       	brcs	.+32     	; 0x5b7e <__mulsf3_pse+0xa0>
    5b5e:	0c 94 f3 2c 	jmp	0x59e6	; 0x59e6 <__fp_inf>
    5b62:	0c 94 4e 2d 	jmp	0x5a9c	; 0x5a9c <__fp_szero>
    5b66:	5f 3f       	cpi	r21, 0xFF	; 255
    5b68:	e4 f3       	brlt	.-8      	; 0x5b62 <__mulsf3_pse+0x84>
    5b6a:	98 3e       	cpi	r25, 0xE8	; 232
    5b6c:	d4 f3       	brlt	.-12     	; 0x5b62 <__mulsf3_pse+0x84>
    5b6e:	86 95       	lsr	r24
    5b70:	77 95       	ror	r23
    5b72:	67 95       	ror	r22
    5b74:	b7 95       	ror	r27
    5b76:	f7 95       	ror	r31
    5b78:	e7 95       	ror	r30
    5b7a:	9f 5f       	subi	r25, 0xFF	; 255
    5b7c:	c1 f7       	brne	.-16     	; 0x5b6e <__mulsf3_pse+0x90>
    5b7e:	fe 2b       	or	r31, r30
    5b80:	88 0f       	add	r24, r24
    5b82:	91 1d       	adc	r25, r1
    5b84:	96 95       	lsr	r25
    5b86:	87 95       	ror	r24
    5b88:	97 f9       	bld	r25, 7
    5b8a:	08 95       	ret

00005b8c <__mulsi3>:
    5b8c:	db 01       	movw	r26, r22
    5b8e:	8f 93       	push	r24
    5b90:	9f 93       	push	r25
    5b92:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <__muluhisi3>
    5b96:	bf 91       	pop	r27
    5b98:	af 91       	pop	r26
    5b9a:	a2 9f       	mul	r26, r18
    5b9c:	80 0d       	add	r24, r0
    5b9e:	91 1d       	adc	r25, r1
    5ba0:	a3 9f       	mul	r26, r19
    5ba2:	90 0d       	add	r25, r0
    5ba4:	b2 9f       	mul	r27, r18
    5ba6:	90 0d       	add	r25, r0
    5ba8:	11 24       	eor	r1, r1
    5baa:	08 95       	ret

00005bac <__udivmodsi4>:
    5bac:	a1 e2       	ldi	r26, 0x21	; 33
    5bae:	1a 2e       	mov	r1, r26
    5bb0:	aa 1b       	sub	r26, r26
    5bb2:	bb 1b       	sub	r27, r27
    5bb4:	fd 01       	movw	r30, r26
    5bb6:	0d c0       	rjmp	.+26     	; 0x5bd2 <__udivmodsi4_ep>

00005bb8 <__udivmodsi4_loop>:
    5bb8:	aa 1f       	adc	r26, r26
    5bba:	bb 1f       	adc	r27, r27
    5bbc:	ee 1f       	adc	r30, r30
    5bbe:	ff 1f       	adc	r31, r31
    5bc0:	a2 17       	cp	r26, r18
    5bc2:	b3 07       	cpc	r27, r19
    5bc4:	e4 07       	cpc	r30, r20
    5bc6:	f5 07       	cpc	r31, r21
    5bc8:	20 f0       	brcs	.+8      	; 0x5bd2 <__udivmodsi4_ep>
    5bca:	a2 1b       	sub	r26, r18
    5bcc:	b3 0b       	sbc	r27, r19
    5bce:	e4 0b       	sbc	r30, r20
    5bd0:	f5 0b       	sbc	r31, r21

00005bd2 <__udivmodsi4_ep>:
    5bd2:	66 1f       	adc	r22, r22
    5bd4:	77 1f       	adc	r23, r23
    5bd6:	88 1f       	adc	r24, r24
    5bd8:	99 1f       	adc	r25, r25
    5bda:	1a 94       	dec	r1
    5bdc:	69 f7       	brne	.-38     	; 0x5bb8 <__udivmodsi4_loop>
    5bde:	60 95       	com	r22
    5be0:	70 95       	com	r23
    5be2:	80 95       	com	r24
    5be4:	90 95       	com	r25
    5be6:	9b 01       	movw	r18, r22
    5be8:	ac 01       	movw	r20, r24
    5bea:	bd 01       	movw	r22, r26
    5bec:	cf 01       	movw	r24, r30
    5bee:	08 95       	ret

00005bf0 <__tablejump2__>:
    5bf0:	ee 0f       	add	r30, r30
    5bf2:	ff 1f       	adc	r31, r31
    5bf4:	05 90       	lpm	r0, Z+
    5bf6:	f4 91       	lpm	r31, Z
    5bf8:	e0 2d       	mov	r30, r0
    5bfa:	09 94       	ijmp

00005bfc <__muluhisi3>:
    5bfc:	0e 94 96 2f 	call	0x5f2c	; 0x5f2c <__umulhisi3>
    5c00:	a5 9f       	mul	r26, r21
    5c02:	90 0d       	add	r25, r0
    5c04:	b4 9f       	mul	r27, r20
    5c06:	90 0d       	add	r25, r0
    5c08:	a4 9f       	mul	r26, r20
    5c0a:	80 0d       	add	r24, r0
    5c0c:	91 1d       	adc	r25, r1
    5c0e:	11 24       	eor	r1, r1
    5c10:	08 95       	ret

00005c12 <__mulshisi3>:
    5c12:	b7 ff       	sbrs	r27, 7
    5c14:	0c 94 fe 2d 	jmp	0x5bfc	; 0x5bfc <__muluhisi3>

00005c18 <__mulohisi3>:
    5c18:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <__muluhisi3>
    5c1c:	82 1b       	sub	r24, r18
    5c1e:	93 0b       	sbc	r25, r19
    5c20:	08 95       	ret

00005c22 <__muldi3>:
    5c22:	df 93       	push	r29
    5c24:	cf 93       	push	r28
    5c26:	1f 93       	push	r17
    5c28:	0f 93       	push	r16
    5c2a:	9a 9d       	mul	r25, r10
    5c2c:	f0 2d       	mov	r31, r0
    5c2e:	21 9f       	mul	r18, r17
    5c30:	f0 0d       	add	r31, r0
    5c32:	8b 9d       	mul	r24, r11
    5c34:	f0 0d       	add	r31, r0
    5c36:	8a 9d       	mul	r24, r10
    5c38:	e0 2d       	mov	r30, r0
    5c3a:	f1 0d       	add	r31, r1
    5c3c:	03 9f       	mul	r16, r19
    5c3e:	f0 0d       	add	r31, r0
    5c40:	02 9f       	mul	r16, r18
    5c42:	e0 0d       	add	r30, r0
    5c44:	f1 1d       	adc	r31, r1
    5c46:	4e 9d       	mul	r20, r14
    5c48:	e0 0d       	add	r30, r0
    5c4a:	f1 1d       	adc	r31, r1
    5c4c:	5e 9d       	mul	r21, r14
    5c4e:	f0 0d       	add	r31, r0
    5c50:	4f 9d       	mul	r20, r15
    5c52:	f0 0d       	add	r31, r0
    5c54:	7f 93       	push	r23
    5c56:	6f 93       	push	r22
    5c58:	bf 92       	push	r11
    5c5a:	af 92       	push	r10
    5c5c:	5f 93       	push	r21
    5c5e:	4f 93       	push	r20
    5c60:	d5 01       	movw	r26, r10
    5c62:	0e 94 96 2f 	call	0x5f2c	; 0x5f2c <__umulhisi3>
    5c66:	8b 01       	movw	r16, r22
    5c68:	ac 01       	movw	r20, r24
    5c6a:	d7 01       	movw	r26, r14
    5c6c:	0e 94 96 2f 	call	0x5f2c	; 0x5f2c <__umulhisi3>
    5c70:	eb 01       	movw	r28, r22
    5c72:	e8 0f       	add	r30, r24
    5c74:	f9 1f       	adc	r31, r25
    5c76:	d6 01       	movw	r26, r12
    5c78:	0e 94 61 2e 	call	0x5cc2	; 0x5cc2 <__muldi3_6>
    5c7c:	2f 91       	pop	r18
    5c7e:	3f 91       	pop	r19
    5c80:	d6 01       	movw	r26, r12
    5c82:	0e 94 96 2f 	call	0x5f2c	; 0x5f2c <__umulhisi3>
    5c86:	c6 0f       	add	r28, r22
    5c88:	d7 1f       	adc	r29, r23
    5c8a:	e8 1f       	adc	r30, r24
    5c8c:	f9 1f       	adc	r31, r25
    5c8e:	af 91       	pop	r26
    5c90:	bf 91       	pop	r27
    5c92:	0e 94 61 2e 	call	0x5cc2	; 0x5cc2 <__muldi3_6>
    5c96:	2f 91       	pop	r18
    5c98:	3f 91       	pop	r19
    5c9a:	0e 94 96 2f 	call	0x5f2c	; 0x5f2c <__umulhisi3>
    5c9e:	c6 0f       	add	r28, r22
    5ca0:	d7 1f       	adc	r29, r23
    5ca2:	e8 1f       	adc	r30, r24
    5ca4:	f9 1f       	adc	r31, r25
    5ca6:	d6 01       	movw	r26, r12
    5ca8:	0e 94 96 2f 	call	0x5f2c	; 0x5f2c <__umulhisi3>
    5cac:	e6 0f       	add	r30, r22
    5cae:	f7 1f       	adc	r31, r23
    5cb0:	98 01       	movw	r18, r16
    5cb2:	be 01       	movw	r22, r28
    5cb4:	cf 01       	movw	r24, r30
    5cb6:	11 24       	eor	r1, r1
    5cb8:	0f 91       	pop	r16
    5cba:	1f 91       	pop	r17
    5cbc:	cf 91       	pop	r28
    5cbe:	df 91       	pop	r29
    5cc0:	08 95       	ret

00005cc2 <__muldi3_6>:
    5cc2:	0e 94 96 2f 	call	0x5f2c	; 0x5f2c <__umulhisi3>
    5cc6:	46 0f       	add	r20, r22
    5cc8:	57 1f       	adc	r21, r23
    5cca:	c8 1f       	adc	r28, r24
    5ccc:	d9 1f       	adc	r29, r25
    5cce:	08 f4       	brcc	.+2      	; 0x5cd2 <__muldi3_6+0x10>
    5cd0:	31 96       	adiw	r30, 0x01	; 1
    5cd2:	08 95       	ret

00005cd4 <__moddi3>:
    5cd4:	68 94       	set
    5cd6:	01 c0       	rjmp	.+2      	; 0x5cda <__divdi3_moddi3>

00005cd8 <__divdi3>:
    5cd8:	e8 94       	clt

00005cda <__divdi3_moddi3>:
    5cda:	f9 2f       	mov	r31, r25
    5cdc:	f1 2b       	or	r31, r17
    5cde:	12 f0       	brmi	.+4      	; 0x5ce4 <__divdi3_moddi3+0xa>
    5ce0:	0c 94 9e 2e 	jmp	0x5d3c	; 0x5d3c <__udivdi3_umoddi3>
    5ce4:	a0 e0       	ldi	r26, 0x00	; 0
    5ce6:	b0 e0       	ldi	r27, 0x00	; 0
    5ce8:	e8 e7       	ldi	r30, 0x78	; 120
    5cea:	fe e2       	ldi	r31, 0x2E	; 46
    5cec:	0c 94 10 2f 	jmp	0x5e20	; 0x5e20 <__prologue_saves__+0xc>
    5cf0:	09 2e       	mov	r0, r25
    5cf2:	05 94       	asr	r0
    5cf4:	22 f4       	brpl	.+8      	; 0x5cfe <__divdi3_moddi3+0x24>
    5cf6:	0e 94 fa 2e 	call	0x5df4	; 0x5df4 <__negdi2>
    5cfa:	11 23       	and	r17, r17
    5cfc:	92 f4       	brpl	.+36     	; 0x5d22 <__divdi3_moddi3+0x48>
    5cfe:	f0 e8       	ldi	r31, 0x80	; 128
    5d00:	0f 26       	eor	r0, r31
    5d02:	ff ef       	ldi	r31, 0xFF	; 255
    5d04:	e0 94       	com	r14
    5d06:	f0 94       	com	r15
    5d08:	00 95       	com	r16
    5d0a:	10 95       	com	r17
    5d0c:	b0 94       	com	r11
    5d0e:	c0 94       	com	r12
    5d10:	d0 94       	com	r13
    5d12:	a1 94       	neg	r10
    5d14:	bf 0a       	sbc	r11, r31
    5d16:	cf 0a       	sbc	r12, r31
    5d18:	df 0a       	sbc	r13, r31
    5d1a:	ef 0a       	sbc	r14, r31
    5d1c:	ff 0a       	sbc	r15, r31
    5d1e:	0f 0b       	sbc	r16, r31
    5d20:	1f 0b       	sbc	r17, r31
    5d22:	0e 94 a9 2e 	call	0x5d52	; 0x5d52 <__udivmod64>
    5d26:	07 fc       	sbrc	r0, 7
    5d28:	0e 94 fa 2e 	call	0x5df4	; 0x5df4 <__negdi2>
    5d2c:	cd b7       	in	r28, 0x3d	; 61
    5d2e:	de b7       	in	r29, 0x3e	; 62
    5d30:	ec e0       	ldi	r30, 0x0C	; 12
    5d32:	0c 94 2c 2f 	jmp	0x5e58	; 0x5e58 <__epilogue_restores__+0xc>

00005d36 <__umoddi3>:
    5d36:	68 94       	set
    5d38:	01 c0       	rjmp	.+2      	; 0x5d3c <__udivdi3_umoddi3>

00005d3a <__udivdi3>:
    5d3a:	e8 94       	clt

00005d3c <__udivdi3_umoddi3>:
    5d3c:	8f 92       	push	r8
    5d3e:	9f 92       	push	r9
    5d40:	cf 93       	push	r28
    5d42:	df 93       	push	r29
    5d44:	0e 94 a9 2e 	call	0x5d52	; 0x5d52 <__udivmod64>
    5d48:	df 91       	pop	r29
    5d4a:	cf 91       	pop	r28
    5d4c:	9f 90       	pop	r9
    5d4e:	8f 90       	pop	r8
    5d50:	08 95       	ret

00005d52 <__udivmod64>:
    5d52:	88 24       	eor	r8, r8
    5d54:	99 24       	eor	r9, r9
    5d56:	f4 01       	movw	r30, r8
    5d58:	e4 01       	movw	r28, r8
    5d5a:	b0 e4       	ldi	r27, 0x40	; 64
    5d5c:	9f 93       	push	r25
    5d5e:	aa 27       	eor	r26, r26
    5d60:	9a 15       	cp	r25, r10
    5d62:	8b 04       	cpc	r8, r11
    5d64:	9c 04       	cpc	r9, r12
    5d66:	ed 05       	cpc	r30, r13
    5d68:	fe 05       	cpc	r31, r14
    5d6a:	cf 05       	cpc	r28, r15
    5d6c:	d0 07       	cpc	r29, r16
    5d6e:	a1 07       	cpc	r26, r17
    5d70:	98 f4       	brcc	.+38     	; 0x5d98 <__udivmod64+0x46>
    5d72:	ad 2f       	mov	r26, r29
    5d74:	dc 2f       	mov	r29, r28
    5d76:	cf 2f       	mov	r28, r31
    5d78:	fe 2f       	mov	r31, r30
    5d7a:	e9 2d       	mov	r30, r9
    5d7c:	98 2c       	mov	r9, r8
    5d7e:	89 2e       	mov	r8, r25
    5d80:	98 2f       	mov	r25, r24
    5d82:	87 2f       	mov	r24, r23
    5d84:	76 2f       	mov	r23, r22
    5d86:	65 2f       	mov	r22, r21
    5d88:	54 2f       	mov	r21, r20
    5d8a:	43 2f       	mov	r20, r19
    5d8c:	32 2f       	mov	r19, r18
    5d8e:	22 27       	eor	r18, r18
    5d90:	b8 50       	subi	r27, 0x08	; 8
    5d92:	31 f7       	brne	.-52     	; 0x5d60 <__udivmod64+0xe>
    5d94:	bf 91       	pop	r27
    5d96:	27 c0       	rjmp	.+78     	; 0x5de6 <__udivmod64+0x94>
    5d98:	1b 2e       	mov	r1, r27
    5d9a:	bf 91       	pop	r27
    5d9c:	bb 27       	eor	r27, r27
    5d9e:	22 0f       	add	r18, r18
    5da0:	33 1f       	adc	r19, r19
    5da2:	44 1f       	adc	r20, r20
    5da4:	55 1f       	adc	r21, r21
    5da6:	66 1f       	adc	r22, r22
    5da8:	77 1f       	adc	r23, r23
    5daa:	88 1f       	adc	r24, r24
    5dac:	99 1f       	adc	r25, r25
    5dae:	88 1c       	adc	r8, r8
    5db0:	99 1c       	adc	r9, r9
    5db2:	ee 1f       	adc	r30, r30
    5db4:	ff 1f       	adc	r31, r31
    5db6:	cc 1f       	adc	r28, r28
    5db8:	dd 1f       	adc	r29, r29
    5dba:	aa 1f       	adc	r26, r26
    5dbc:	bb 1f       	adc	r27, r27
    5dbe:	8a 14       	cp	r8, r10
    5dc0:	9b 04       	cpc	r9, r11
    5dc2:	ec 05       	cpc	r30, r12
    5dc4:	fd 05       	cpc	r31, r13
    5dc6:	ce 05       	cpc	r28, r14
    5dc8:	df 05       	cpc	r29, r15
    5dca:	a0 07       	cpc	r26, r16
    5dcc:	b1 07       	cpc	r27, r17
    5dce:	48 f0       	brcs	.+18     	; 0x5de2 <__udivmod64+0x90>
    5dd0:	8a 18       	sub	r8, r10
    5dd2:	9b 08       	sbc	r9, r11
    5dd4:	ec 09       	sbc	r30, r12
    5dd6:	fd 09       	sbc	r31, r13
    5dd8:	ce 09       	sbc	r28, r14
    5dda:	df 09       	sbc	r29, r15
    5ddc:	a0 0b       	sbc	r26, r16
    5dde:	b1 0b       	sbc	r27, r17
    5de0:	21 60       	ori	r18, 0x01	; 1
    5de2:	1a 94       	dec	r1
    5de4:	e1 f6       	brne	.-72     	; 0x5d9e <__udivmod64+0x4c>
    5de6:	2e f4       	brtc	.+10     	; 0x5df2 <__udivmod64+0xa0>
    5de8:	94 01       	movw	r18, r8
    5dea:	af 01       	movw	r20, r30
    5dec:	be 01       	movw	r22, r28
    5dee:	cd 01       	movw	r24, r26
    5df0:	00 0c       	add	r0, r0
    5df2:	08 95       	ret

00005df4 <__negdi2>:
    5df4:	60 95       	com	r22
    5df6:	70 95       	com	r23
    5df8:	80 95       	com	r24
    5dfa:	90 95       	com	r25
    5dfc:	30 95       	com	r19
    5dfe:	40 95       	com	r20
    5e00:	50 95       	com	r21
    5e02:	21 95       	neg	r18
    5e04:	3f 4f       	sbci	r19, 0xFF	; 255
    5e06:	4f 4f       	sbci	r20, 0xFF	; 255
    5e08:	5f 4f       	sbci	r21, 0xFF	; 255
    5e0a:	6f 4f       	sbci	r22, 0xFF	; 255
    5e0c:	7f 4f       	sbci	r23, 0xFF	; 255
    5e0e:	8f 4f       	sbci	r24, 0xFF	; 255
    5e10:	9f 4f       	sbci	r25, 0xFF	; 255
    5e12:	08 95       	ret

00005e14 <__prologue_saves__>:
    5e14:	2f 92       	push	r2
    5e16:	3f 92       	push	r3
    5e18:	4f 92       	push	r4
    5e1a:	5f 92       	push	r5
    5e1c:	6f 92       	push	r6
    5e1e:	7f 92       	push	r7
    5e20:	8f 92       	push	r8
    5e22:	9f 92       	push	r9
    5e24:	af 92       	push	r10
    5e26:	bf 92       	push	r11
    5e28:	cf 92       	push	r12
    5e2a:	df 92       	push	r13
    5e2c:	ef 92       	push	r14
    5e2e:	ff 92       	push	r15
    5e30:	0f 93       	push	r16
    5e32:	1f 93       	push	r17
    5e34:	cf 93       	push	r28
    5e36:	df 93       	push	r29
    5e38:	cd b7       	in	r28, 0x3d	; 61
    5e3a:	de b7       	in	r29, 0x3e	; 62
    5e3c:	ca 1b       	sub	r28, r26
    5e3e:	db 0b       	sbc	r29, r27
    5e40:	0f b6       	in	r0, 0x3f	; 63
    5e42:	f8 94       	cli
    5e44:	de bf       	out	0x3e, r29	; 62
    5e46:	0f be       	out	0x3f, r0	; 63
    5e48:	cd bf       	out	0x3d, r28	; 61
    5e4a:	09 94       	ijmp

00005e4c <__epilogue_restores__>:
    5e4c:	2a 88       	ldd	r2, Y+18	; 0x12
    5e4e:	39 88       	ldd	r3, Y+17	; 0x11
    5e50:	48 88       	ldd	r4, Y+16	; 0x10
    5e52:	5f 84       	ldd	r5, Y+15	; 0x0f
    5e54:	6e 84       	ldd	r6, Y+14	; 0x0e
    5e56:	7d 84       	ldd	r7, Y+13	; 0x0d
    5e58:	8c 84       	ldd	r8, Y+12	; 0x0c
    5e5a:	9b 84       	ldd	r9, Y+11	; 0x0b
    5e5c:	aa 84       	ldd	r10, Y+10	; 0x0a
    5e5e:	b9 84       	ldd	r11, Y+9	; 0x09
    5e60:	c8 84       	ldd	r12, Y+8	; 0x08
    5e62:	df 80       	ldd	r13, Y+7	; 0x07
    5e64:	ee 80       	ldd	r14, Y+6	; 0x06
    5e66:	fd 80       	ldd	r15, Y+5	; 0x05
    5e68:	0c 81       	ldd	r16, Y+4	; 0x04
    5e6a:	1b 81       	ldd	r17, Y+3	; 0x03
    5e6c:	aa 81       	ldd	r26, Y+2	; 0x02
    5e6e:	b9 81       	ldd	r27, Y+1	; 0x01
    5e70:	ce 0f       	add	r28, r30
    5e72:	d1 1d       	adc	r29, r1
    5e74:	0f b6       	in	r0, 0x3f	; 63
    5e76:	f8 94       	cli
    5e78:	de bf       	out	0x3e, r29	; 62
    5e7a:	0f be       	out	0x3f, r0	; 63
    5e7c:	cd bf       	out	0x3d, r28	; 61
    5e7e:	ed 01       	movw	r28, r26
    5e80:	08 95       	ret

00005e82 <__ashldi3>:
    5e82:	0f 93       	push	r16
    5e84:	08 30       	cpi	r16, 0x08	; 8
    5e86:	90 f0       	brcs	.+36     	; 0x5eac <__ashldi3+0x2a>
    5e88:	98 2f       	mov	r25, r24
    5e8a:	87 2f       	mov	r24, r23
    5e8c:	76 2f       	mov	r23, r22
    5e8e:	65 2f       	mov	r22, r21
    5e90:	54 2f       	mov	r21, r20
    5e92:	43 2f       	mov	r20, r19
    5e94:	32 2f       	mov	r19, r18
    5e96:	22 27       	eor	r18, r18
    5e98:	08 50       	subi	r16, 0x08	; 8
    5e9a:	f4 cf       	rjmp	.-24     	; 0x5e84 <__ashldi3+0x2>
    5e9c:	22 0f       	add	r18, r18
    5e9e:	33 1f       	adc	r19, r19
    5ea0:	44 1f       	adc	r20, r20
    5ea2:	55 1f       	adc	r21, r21
    5ea4:	66 1f       	adc	r22, r22
    5ea6:	77 1f       	adc	r23, r23
    5ea8:	88 1f       	adc	r24, r24
    5eaa:	99 1f       	adc	r25, r25
    5eac:	0a 95       	dec	r16
    5eae:	b2 f7       	brpl	.-20     	; 0x5e9c <__ashldi3+0x1a>
    5eb0:	0f 91       	pop	r16
    5eb2:	08 95       	ret

00005eb4 <__ashrdi3>:
    5eb4:	97 fb       	bst	r25, 7
    5eb6:	10 f8       	bld	r1, 0

00005eb8 <__lshrdi3>:
    5eb8:	16 94       	lsr	r1
    5eba:	00 08       	sbc	r0, r0
    5ebc:	0f 93       	push	r16
    5ebe:	08 30       	cpi	r16, 0x08	; 8
    5ec0:	98 f0       	brcs	.+38     	; 0x5ee8 <__lshrdi3+0x30>
    5ec2:	08 50       	subi	r16, 0x08	; 8
    5ec4:	23 2f       	mov	r18, r19
    5ec6:	34 2f       	mov	r19, r20
    5ec8:	45 2f       	mov	r20, r21
    5eca:	56 2f       	mov	r21, r22
    5ecc:	67 2f       	mov	r22, r23
    5ece:	78 2f       	mov	r23, r24
    5ed0:	89 2f       	mov	r24, r25
    5ed2:	90 2d       	mov	r25, r0
    5ed4:	f4 cf       	rjmp	.-24     	; 0x5ebe <__lshrdi3+0x6>
    5ed6:	05 94       	asr	r0
    5ed8:	97 95       	ror	r25
    5eda:	87 95       	ror	r24
    5edc:	77 95       	ror	r23
    5ede:	67 95       	ror	r22
    5ee0:	57 95       	ror	r21
    5ee2:	47 95       	ror	r20
    5ee4:	37 95       	ror	r19
    5ee6:	27 95       	ror	r18
    5ee8:	0a 95       	dec	r16
    5eea:	aa f7       	brpl	.-22     	; 0x5ed6 <__lshrdi3+0x1e>
    5eec:	0f 91       	pop	r16
    5eee:	08 95       	ret

00005ef0 <__adddi3>:
    5ef0:	2a 0d       	add	r18, r10
    5ef2:	3b 1d       	adc	r19, r11
    5ef4:	4c 1d       	adc	r20, r12
    5ef6:	5d 1d       	adc	r21, r13
    5ef8:	6e 1d       	adc	r22, r14
    5efa:	7f 1d       	adc	r23, r15
    5efc:	80 1f       	adc	r24, r16
    5efe:	91 1f       	adc	r25, r17
    5f00:	08 95       	ret

00005f02 <__subdi3>:
    5f02:	2a 19       	sub	r18, r10
    5f04:	3b 09       	sbc	r19, r11
    5f06:	4c 09       	sbc	r20, r12
    5f08:	5d 09       	sbc	r21, r13
    5f0a:	6e 09       	sbc	r22, r14
    5f0c:	7f 09       	sbc	r23, r15
    5f0e:	80 0b       	sbc	r24, r16
    5f10:	91 0b       	sbc	r25, r17
    5f12:	08 95       	ret

00005f14 <__cmpdi2_s8>:
    5f14:	00 24       	eor	r0, r0
    5f16:	a7 fd       	sbrc	r26, 7
    5f18:	00 94       	com	r0
    5f1a:	2a 17       	cp	r18, r26
    5f1c:	30 05       	cpc	r19, r0
    5f1e:	40 05       	cpc	r20, r0
    5f20:	50 05       	cpc	r21, r0
    5f22:	60 05       	cpc	r22, r0
    5f24:	70 05       	cpc	r23, r0
    5f26:	80 05       	cpc	r24, r0
    5f28:	90 05       	cpc	r25, r0
    5f2a:	08 95       	ret

00005f2c <__umulhisi3>:
    5f2c:	a2 9f       	mul	r26, r18
    5f2e:	b0 01       	movw	r22, r0
    5f30:	b3 9f       	mul	r27, r19
    5f32:	c0 01       	movw	r24, r0
    5f34:	a3 9f       	mul	r26, r19
    5f36:	70 0d       	add	r23, r0
    5f38:	81 1d       	adc	r24, r1
    5f3a:	11 24       	eor	r1, r1
    5f3c:	91 1d       	adc	r25, r1
    5f3e:	b2 9f       	mul	r27, r18
    5f40:	70 0d       	add	r23, r0
    5f42:	81 1d       	adc	r24, r1
    5f44:	11 24       	eor	r1, r1
    5f46:	91 1d       	adc	r25, r1
    5f48:	08 95       	ret

00005f4a <dtostrf>:
    5f4a:	ef 92       	push	r14
    5f4c:	0f 93       	push	r16
    5f4e:	1f 93       	push	r17
    5f50:	cf 93       	push	r28
    5f52:	df 93       	push	r29
    5f54:	e8 01       	movw	r28, r16
    5f56:	47 fd       	sbrc	r20, 7
    5f58:	02 c0       	rjmp	.+4      	; 0x5f5e <dtostrf+0x14>
    5f5a:	34 e0       	ldi	r19, 0x04	; 4
    5f5c:	01 c0       	rjmp	.+2      	; 0x5f60 <dtostrf+0x16>
    5f5e:	34 e1       	ldi	r19, 0x14	; 20
    5f60:	04 2e       	mov	r0, r20
    5f62:	00 0c       	add	r0, r0
    5f64:	55 0b       	sbc	r21, r21
    5f66:	57 ff       	sbrs	r21, 7
    5f68:	03 c0       	rjmp	.+6      	; 0x5f70 <dtostrf+0x26>
    5f6a:	51 95       	neg	r21
    5f6c:	41 95       	neg	r20
    5f6e:	51 09       	sbc	r21, r1
    5f70:	e3 2e       	mov	r14, r19
    5f72:	02 2f       	mov	r16, r18
    5f74:	24 2f       	mov	r18, r20
    5f76:	ae 01       	movw	r20, r28
    5f78:	0e 94 cc 35 	call	0x6b98	; 0x6b98 <dtoa_prf>
    5f7c:	ce 01       	movw	r24, r28
    5f7e:	df 91       	pop	r29
    5f80:	cf 91       	pop	r28
    5f82:	1f 91       	pop	r17
    5f84:	0f 91       	pop	r16
    5f86:	ef 90       	pop	r14
    5f88:	08 95       	ret

00005f8a <atoi>:
    5f8a:	fc 01       	movw	r30, r24
    5f8c:	88 27       	eor	r24, r24
    5f8e:	99 27       	eor	r25, r25
    5f90:	e8 94       	clt
    5f92:	21 91       	ld	r18, Z+
    5f94:	20 32       	cpi	r18, 0x20	; 32
    5f96:	e9 f3       	breq	.-6      	; 0x5f92 <atoi+0x8>
    5f98:	29 30       	cpi	r18, 0x09	; 9
    5f9a:	10 f0       	brcs	.+4      	; 0x5fa0 <atoi+0x16>
    5f9c:	2e 30       	cpi	r18, 0x0E	; 14
    5f9e:	c8 f3       	brcs	.-14     	; 0x5f92 <atoi+0x8>
    5fa0:	2b 32       	cpi	r18, 0x2B	; 43
    5fa2:	41 f0       	breq	.+16     	; 0x5fb4 <atoi+0x2a>
    5fa4:	2d 32       	cpi	r18, 0x2D	; 45
    5fa6:	39 f4       	brne	.+14     	; 0x5fb6 <atoi+0x2c>
    5fa8:	68 94       	set
    5faa:	04 c0       	rjmp	.+8      	; 0x5fb4 <atoi+0x2a>
    5fac:	0e 94 14 30 	call	0x6028	; 0x6028 <__mulhi_const_10>
    5fb0:	82 0f       	add	r24, r18
    5fb2:	91 1d       	adc	r25, r1
    5fb4:	21 91       	ld	r18, Z+
    5fb6:	20 53       	subi	r18, 0x30	; 48
    5fb8:	2a 30       	cpi	r18, 0x0A	; 10
    5fba:	c0 f3       	brcs	.-16     	; 0x5fac <atoi+0x22>
    5fbc:	1e f4       	brtc	.+6      	; 0x5fc4 <atoi+0x3a>
    5fbe:	90 95       	com	r25
    5fc0:	81 95       	neg	r24
    5fc2:	9f 4f       	sbci	r25, 0xFF	; 255
    5fc4:	08 95       	ret

00005fc6 <__ctype_isfalse>:
    5fc6:	99 27       	eor	r25, r25
    5fc8:	88 27       	eor	r24, r24

00005fca <__ctype_istrue>:
    5fca:	08 95       	ret

00005fcc <isblank>:
    5fcc:	91 11       	cpse	r25, r1
    5fce:	0c 94 e3 2f 	jmp	0x5fc6	; 0x5fc6 <__ctype_isfalse>
    5fd2:	80 32       	cpi	r24, 0x20	; 32
    5fd4:	11 f0       	breq	.+4      	; 0x5fda <isblank+0xe>
    5fd6:	89 30       	cpi	r24, 0x09	; 9
    5fd8:	d1 f7       	brne	.-12     	; 0x5fce <isblank+0x2>
    5fda:	08 95       	ret

00005fdc <memcmp>:
    5fdc:	fb 01       	movw	r30, r22
    5fde:	dc 01       	movw	r26, r24
    5fe0:	04 c0       	rjmp	.+8      	; 0x5fea <memcmp+0xe>
    5fe2:	8d 91       	ld	r24, X+
    5fe4:	01 90       	ld	r0, Z+
    5fe6:	80 19       	sub	r24, r0
    5fe8:	21 f4       	brne	.+8      	; 0x5ff2 <memcmp+0x16>
    5fea:	41 50       	subi	r20, 0x01	; 1
    5fec:	50 40       	sbci	r21, 0x00	; 0
    5fee:	c8 f7       	brcc	.-14     	; 0x5fe2 <memcmp+0x6>
    5ff0:	88 1b       	sub	r24, r24
    5ff2:	99 0b       	sbc	r25, r25
    5ff4:	08 95       	ret

00005ff6 <strncmp>:
    5ff6:	fb 01       	movw	r30, r22
    5ff8:	dc 01       	movw	r26, r24
    5ffa:	41 50       	subi	r20, 0x01	; 1
    5ffc:	50 40       	sbci	r21, 0x00	; 0
    5ffe:	30 f0       	brcs	.+12     	; 0x600c <strncmp+0x16>
    6000:	8d 91       	ld	r24, X+
    6002:	01 90       	ld	r0, Z+
    6004:	80 19       	sub	r24, r0
    6006:	19 f4       	brne	.+6      	; 0x600e <strncmp+0x18>
    6008:	00 20       	and	r0, r0
    600a:	b9 f7       	brne	.-18     	; 0x5ffa <strncmp+0x4>
    600c:	88 1b       	sub	r24, r24
    600e:	99 0b       	sbc	r25, r25
    6010:	08 95       	ret

00006012 <__itoa_ncheck>:
    6012:	bb 27       	eor	r27, r27
    6014:	4a 30       	cpi	r20, 0x0A	; 10
    6016:	31 f4       	brne	.+12     	; 0x6024 <__itoa_ncheck+0x12>
    6018:	99 23       	and	r25, r25
    601a:	22 f4       	brpl	.+8      	; 0x6024 <__itoa_ncheck+0x12>
    601c:	bd e2       	ldi	r27, 0x2D	; 45
    601e:	90 95       	com	r25
    6020:	81 95       	neg	r24
    6022:	9f 4f       	sbci	r25, 0xFF	; 255
    6024:	0c 94 1d 30 	jmp	0x603a	; 0x603a <__utoa_common>

00006028 <__mulhi_const_10>:
    6028:	7a e0       	ldi	r23, 0x0A	; 10
    602a:	97 9f       	mul	r25, r23
    602c:	90 2d       	mov	r25, r0
    602e:	87 9f       	mul	r24, r23
    6030:	80 2d       	mov	r24, r0
    6032:	91 0d       	add	r25, r1
    6034:	11 24       	eor	r1, r1
    6036:	08 95       	ret

00006038 <__utoa_ncheck>:
    6038:	bb 27       	eor	r27, r27

0000603a <__utoa_common>:
    603a:	fb 01       	movw	r30, r22
    603c:	55 27       	eor	r21, r21
    603e:	aa 27       	eor	r26, r26
    6040:	88 0f       	add	r24, r24
    6042:	99 1f       	adc	r25, r25
    6044:	aa 1f       	adc	r26, r26
    6046:	a4 17       	cp	r26, r20
    6048:	10 f0       	brcs	.+4      	; 0x604e <__utoa_common+0x14>
    604a:	a4 1b       	sub	r26, r20
    604c:	83 95       	inc	r24
    604e:	50 51       	subi	r21, 0x10	; 16
    6050:	b9 f7       	brne	.-18     	; 0x6040 <__utoa_common+0x6>
    6052:	a0 5d       	subi	r26, 0xD0	; 208
    6054:	aa 33       	cpi	r26, 0x3A	; 58
    6056:	08 f0       	brcs	.+2      	; 0x605a <__utoa_common+0x20>
    6058:	a9 5d       	subi	r26, 0xD9	; 217
    605a:	a1 93       	st	Z+, r26
    605c:	00 97       	sbiw	r24, 0x00	; 0
    605e:	79 f7       	brne	.-34     	; 0x603e <__utoa_common+0x4>
    6060:	b1 11       	cpse	r27, r1
    6062:	b1 93       	st	Z+, r27
    6064:	11 92       	st	Z+, r1
    6066:	cb 01       	movw	r24, r22
    6068:	0c 94 28 38 	jmp	0x7050	; 0x7050 <strrev>

0000606c <printf>:
    606c:	a0 e0       	ldi	r26, 0x00	; 0
    606e:	b0 e0       	ldi	r27, 0x00	; 0
    6070:	ec e3       	ldi	r30, 0x3C	; 60
    6072:	f0 e3       	ldi	r31, 0x30	; 48
    6074:	0c 94 1a 2f 	jmp	0x5e34	; 0x5e34 <__prologue_saves__+0x20>
    6078:	ae 01       	movw	r20, r28
    607a:	4b 5f       	subi	r20, 0xFB	; 251
    607c:	5f 4f       	sbci	r21, 0xFF	; 255
    607e:	fa 01       	movw	r30, r20
    6080:	61 91       	ld	r22, Z+
    6082:	71 91       	ld	r23, Z+
    6084:	af 01       	movw	r20, r30
    6086:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <__iob+0x2>
    608a:	90 91 7a 07 	lds	r25, 0x077A	; 0x80077a <__iob+0x3>
    608e:	0e 94 3e 31 	call	0x627c	; 0x627c <vfprintf>
    6092:	e2 e0       	ldi	r30, 0x02	; 2
    6094:	0c 94 36 2f 	jmp	0x5e6c	; 0x5e6c <__epilogue_restores__+0x20>

00006098 <printf_P>:
    6098:	a0 e0       	ldi	r26, 0x00	; 0
    609a:	b0 e0       	ldi	r27, 0x00	; 0
    609c:	e2 e5       	ldi	r30, 0x52	; 82
    609e:	f0 e3       	ldi	r31, 0x30	; 48
    60a0:	0c 94 18 2f 	jmp	0x5e30	; 0x5e30 <__prologue_saves__+0x1c>
    60a4:	ae 01       	movw	r20, r28
    60a6:	49 5f       	subi	r20, 0xF9	; 249
    60a8:	5f 4f       	sbci	r21, 0xFF	; 255
    60aa:	da 01       	movw	r26, r20
    60ac:	6d 91       	ld	r22, X+
    60ae:	7d 91       	ld	r23, X+
    60b0:	ad 01       	movw	r20, r26
    60b2:	07 e7       	ldi	r16, 0x77	; 119
    60b4:	17 e0       	ldi	r17, 0x07	; 7
    60b6:	f8 01       	movw	r30, r16
    60b8:	82 81       	ldd	r24, Z+2	; 0x02
    60ba:	93 81       	ldd	r25, Z+3	; 0x03
    60bc:	dc 01       	movw	r26, r24
    60be:	13 96       	adiw	r26, 0x03	; 3
    60c0:	2c 91       	ld	r18, X
    60c2:	13 97       	sbiw	r26, 0x03	; 3
    60c4:	28 60       	ori	r18, 0x08	; 8
    60c6:	13 96       	adiw	r26, 0x03	; 3
    60c8:	2c 93       	st	X, r18
    60ca:	0e 94 3e 31 	call	0x627c	; 0x627c <vfprintf>
    60ce:	d8 01       	movw	r26, r16
    60d0:	12 96       	adiw	r26, 0x02	; 2
    60d2:	ed 91       	ld	r30, X+
    60d4:	fc 91       	ld	r31, X
    60d6:	13 97       	sbiw	r26, 0x03	; 3
    60d8:	23 81       	ldd	r18, Z+3	; 0x03
    60da:	27 7f       	andi	r18, 0xF7	; 247
    60dc:	23 83       	std	Z+3, r18	; 0x03
    60de:	e4 e0       	ldi	r30, 0x04	; 4
    60e0:	0c 94 34 2f 	jmp	0x5e68	; 0x5e68 <__epilogue_restores__+0x1c>

000060e4 <puts>:
    60e4:	0f 93       	push	r16
    60e6:	1f 93       	push	r17
    60e8:	cf 93       	push	r28
    60ea:	df 93       	push	r29
    60ec:	e0 91 79 07 	lds	r30, 0x0779	; 0x800779 <__iob+0x2>
    60f0:	f0 91 7a 07 	lds	r31, 0x077A	; 0x80077a <__iob+0x3>
    60f4:	23 81       	ldd	r18, Z+3	; 0x03
    60f6:	21 ff       	sbrs	r18, 1
    60f8:	1b c0       	rjmp	.+54     	; 0x6130 <puts+0x4c>
    60fa:	8c 01       	movw	r16, r24
    60fc:	d0 e0       	ldi	r29, 0x00	; 0
    60fe:	c0 e0       	ldi	r28, 0x00	; 0
    6100:	f8 01       	movw	r30, r16
    6102:	81 91       	ld	r24, Z+
    6104:	8f 01       	movw	r16, r30
    6106:	60 91 79 07 	lds	r22, 0x0779	; 0x800779 <__iob+0x2>
    610a:	70 91 7a 07 	lds	r23, 0x077A	; 0x80077a <__iob+0x3>
    610e:	db 01       	movw	r26, r22
    6110:	18 96       	adiw	r26, 0x08	; 8
    6112:	ed 91       	ld	r30, X+
    6114:	fc 91       	ld	r31, X
    6116:	19 97       	sbiw	r26, 0x09	; 9
    6118:	88 23       	and	r24, r24
    611a:	31 f0       	breq	.+12     	; 0x6128 <puts+0x44>
    611c:	09 95       	icall
    611e:	89 2b       	or	r24, r25
    6120:	79 f3       	breq	.-34     	; 0x6100 <puts+0x1c>
    6122:	df ef       	ldi	r29, 0xFF	; 255
    6124:	cf ef       	ldi	r28, 0xFF	; 255
    6126:	ec cf       	rjmp	.-40     	; 0x6100 <puts+0x1c>
    6128:	8a e0       	ldi	r24, 0x0A	; 10
    612a:	09 95       	icall
    612c:	89 2b       	or	r24, r25
    612e:	19 f0       	breq	.+6      	; 0x6136 <puts+0x52>
    6130:	8f ef       	ldi	r24, 0xFF	; 255
    6132:	9f ef       	ldi	r25, 0xFF	; 255
    6134:	02 c0       	rjmp	.+4      	; 0x613a <puts+0x56>
    6136:	8d 2f       	mov	r24, r29
    6138:	9c 2f       	mov	r25, r28
    613a:	df 91       	pop	r29
    613c:	cf 91       	pop	r28
    613e:	1f 91       	pop	r17
    6140:	0f 91       	pop	r16
    6142:	08 95       	ret

00006144 <puts_P>:
    6144:	0f 93       	push	r16
    6146:	1f 93       	push	r17
    6148:	cf 93       	push	r28
    614a:	df 93       	push	r29
    614c:	8c 01       	movw	r16, r24
    614e:	e0 91 79 07 	lds	r30, 0x0779	; 0x800779 <__iob+0x2>
    6152:	f0 91 7a 07 	lds	r31, 0x077A	; 0x80077a <__iob+0x3>
    6156:	83 81       	ldd	r24, Z+3	; 0x03
    6158:	81 ff       	sbrs	r24, 1
    615a:	1b c0       	rjmp	.+54     	; 0x6192 <puts_P+0x4e>
    615c:	d0 e0       	ldi	r29, 0x00	; 0
    615e:	c0 e0       	ldi	r28, 0x00	; 0
    6160:	f8 01       	movw	r30, r16
    6162:	84 91       	lpm	r24, Z
    6164:	60 91 79 07 	lds	r22, 0x0779	; 0x800779 <__iob+0x2>
    6168:	70 91 7a 07 	lds	r23, 0x077A	; 0x80077a <__iob+0x3>
    616c:	db 01       	movw	r26, r22
    616e:	18 96       	adiw	r26, 0x08	; 8
    6170:	ed 91       	ld	r30, X+
    6172:	fc 91       	ld	r31, X
    6174:	19 97       	sbiw	r26, 0x09	; 9
    6176:	88 23       	and	r24, r24
    6178:	41 f0       	breq	.+16     	; 0x618a <puts_P+0x46>
    617a:	09 95       	icall
    617c:	89 2b       	or	r24, r25
    617e:	11 f0       	breq	.+4      	; 0x6184 <puts_P+0x40>
    6180:	df ef       	ldi	r29, 0xFF	; 255
    6182:	cf ef       	ldi	r28, 0xFF	; 255
    6184:	0f 5f       	subi	r16, 0xFF	; 255
    6186:	1f 4f       	sbci	r17, 0xFF	; 255
    6188:	eb cf       	rjmp	.-42     	; 0x6160 <puts_P+0x1c>
    618a:	8a e0       	ldi	r24, 0x0A	; 10
    618c:	09 95       	icall
    618e:	89 2b       	or	r24, r25
    6190:	19 f0       	breq	.+6      	; 0x6198 <puts_P+0x54>
    6192:	8f ef       	ldi	r24, 0xFF	; 255
    6194:	9f ef       	ldi	r25, 0xFF	; 255
    6196:	02 c0       	rjmp	.+4      	; 0x619c <puts_P+0x58>
    6198:	8d 2f       	mov	r24, r29
    619a:	9c 2f       	mov	r25, r28
    619c:	df 91       	pop	r29
    619e:	cf 91       	pop	r28
    61a0:	1f 91       	pop	r17
    61a2:	0f 91       	pop	r16
    61a4:	08 95       	ret

000061a6 <snprintf>:
    61a6:	ae e0       	ldi	r26, 0x0E	; 14
    61a8:	b0 e0       	ldi	r27, 0x00	; 0
    61aa:	e9 ed       	ldi	r30, 0xD9	; 217
    61ac:	f0 e3       	ldi	r31, 0x30	; 48
    61ae:	0c 94 18 2f 	jmp	0x5e30	; 0x5e30 <__prologue_saves__+0x1c>
    61b2:	0d 89       	ldd	r16, Y+21	; 0x15
    61b4:	1e 89       	ldd	r17, Y+22	; 0x16
    61b6:	8f 89       	ldd	r24, Y+23	; 0x17
    61b8:	98 8d       	ldd	r25, Y+24	; 0x18
    61ba:	26 e0       	ldi	r18, 0x06	; 6
    61bc:	2c 83       	std	Y+4, r18	; 0x04
    61be:	1a 83       	std	Y+2, r17	; 0x02
    61c0:	09 83       	std	Y+1, r16	; 0x01
    61c2:	97 ff       	sbrs	r25, 7
    61c4:	02 c0       	rjmp	.+4      	; 0x61ca <snprintf+0x24>
    61c6:	80 e0       	ldi	r24, 0x00	; 0
    61c8:	90 e8       	ldi	r25, 0x80	; 128
    61ca:	01 97       	sbiw	r24, 0x01	; 1
    61cc:	9e 83       	std	Y+6, r25	; 0x06
    61ce:	8d 83       	std	Y+5, r24	; 0x05
    61d0:	ae 01       	movw	r20, r28
    61d2:	45 5e       	subi	r20, 0xE5	; 229
    61d4:	5f 4f       	sbci	r21, 0xFF	; 255
    61d6:	69 8d       	ldd	r22, Y+25	; 0x19
    61d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    61da:	ce 01       	movw	r24, r28
    61dc:	01 96       	adiw	r24, 0x01	; 1
    61de:	0e 94 3e 31 	call	0x627c	; 0x627c <vfprintf>
    61e2:	4d 81       	ldd	r20, Y+5	; 0x05
    61e4:	5e 81       	ldd	r21, Y+6	; 0x06
    61e6:	57 fd       	sbrc	r21, 7
    61e8:	0a c0       	rjmp	.+20     	; 0x61fe <snprintf+0x58>
    61ea:	2f 81       	ldd	r18, Y+7	; 0x07
    61ec:	38 85       	ldd	r19, Y+8	; 0x08
    61ee:	42 17       	cp	r20, r18
    61f0:	53 07       	cpc	r21, r19
    61f2:	0c f4       	brge	.+2      	; 0x61f6 <snprintf+0x50>
    61f4:	9a 01       	movw	r18, r20
    61f6:	f8 01       	movw	r30, r16
    61f8:	e2 0f       	add	r30, r18
    61fa:	f3 1f       	adc	r31, r19
    61fc:	10 82       	st	Z, r1
    61fe:	2e 96       	adiw	r28, 0x0e	; 14
    6200:	e4 e0       	ldi	r30, 0x04	; 4
    6202:	0c 94 34 2f 	jmp	0x5e68	; 0x5e68 <__epilogue_restores__+0x1c>

00006206 <sprintf>:
    6206:	ae e0       	ldi	r26, 0x0E	; 14
    6208:	b0 e0       	ldi	r27, 0x00	; 0
    620a:	e9 e0       	ldi	r30, 0x09	; 9
    620c:	f1 e3       	ldi	r31, 0x31	; 49
    620e:	0c 94 18 2f 	jmp	0x5e30	; 0x5e30 <__prologue_saves__+0x1c>
    6212:	0d 89       	ldd	r16, Y+21	; 0x15
    6214:	1e 89       	ldd	r17, Y+22	; 0x16
    6216:	86 e0       	ldi	r24, 0x06	; 6
    6218:	8c 83       	std	Y+4, r24	; 0x04
    621a:	1a 83       	std	Y+2, r17	; 0x02
    621c:	09 83       	std	Y+1, r16	; 0x01
    621e:	8f ef       	ldi	r24, 0xFF	; 255
    6220:	9f e7       	ldi	r25, 0x7F	; 127
    6222:	9e 83       	std	Y+6, r25	; 0x06
    6224:	8d 83       	std	Y+5, r24	; 0x05
    6226:	ae 01       	movw	r20, r28
    6228:	47 5e       	subi	r20, 0xE7	; 231
    622a:	5f 4f       	sbci	r21, 0xFF	; 255
    622c:	6f 89       	ldd	r22, Y+23	; 0x17
    622e:	78 8d       	ldd	r23, Y+24	; 0x18
    6230:	ce 01       	movw	r24, r28
    6232:	01 96       	adiw	r24, 0x01	; 1
    6234:	0e 94 3e 31 	call	0x627c	; 0x627c <vfprintf>
    6238:	ef 81       	ldd	r30, Y+7	; 0x07
    623a:	f8 85       	ldd	r31, Y+8	; 0x08
    623c:	e0 0f       	add	r30, r16
    623e:	f1 1f       	adc	r31, r17
    6240:	10 82       	st	Z, r1
    6242:	2e 96       	adiw	r28, 0x0e	; 14
    6244:	e4 e0       	ldi	r30, 0x04	; 4
    6246:	0c 94 34 2f 	jmp	0x5e68	; 0x5e68 <__epilogue_restores__+0x1c>

0000624a <sscanf>:
    624a:	ae e0       	ldi	r26, 0x0E	; 14
    624c:	b0 e0       	ldi	r27, 0x00	; 0
    624e:	eb e2       	ldi	r30, 0x2B	; 43
    6250:	f1 e3       	ldi	r31, 0x31	; 49
    6252:	0c 94 1a 2f 	jmp	0x5e34	; 0x5e34 <__prologue_saves__+0x20>
    6256:	85 e0       	ldi	r24, 0x05	; 5
    6258:	8c 83       	std	Y+4, r24	; 0x04
    625a:	8b 89       	ldd	r24, Y+19	; 0x13
    625c:	9c 89       	ldd	r25, Y+20	; 0x14
    625e:	9a 83       	std	Y+2, r25	; 0x02
    6260:	89 83       	std	Y+1, r24	; 0x01
    6262:	ae 01       	movw	r20, r28
    6264:	49 5e       	subi	r20, 0xE9	; 233
    6266:	5f 4f       	sbci	r21, 0xFF	; 255
    6268:	6d 89       	ldd	r22, Y+21	; 0x15
    626a:	7e 89       	ldd	r23, Y+22	; 0x16
    626c:	ce 01       	movw	r24, r28
    626e:	01 96       	adiw	r24, 0x01	; 1
    6270:	0e 94 bb 34 	call	0x6976	; 0x6976 <vfscanf>
    6274:	2e 96       	adiw	r28, 0x0e	; 14
    6276:	e2 e0       	ldi	r30, 0x02	; 2
    6278:	0c 94 36 2f 	jmp	0x5e6c	; 0x5e6c <__epilogue_restores__+0x20>

0000627c <vfprintf>:
    627c:	ab e0       	ldi	r26, 0x0B	; 11
    627e:	b0 e0       	ldi	r27, 0x00	; 0
    6280:	e4 e4       	ldi	r30, 0x44	; 68
    6282:	f1 e3       	ldi	r31, 0x31	; 49
    6284:	0c 94 0a 2f 	jmp	0x5e14	; 0x5e14 <__prologue_saves__>
    6288:	6c 01       	movw	r12, r24
    628a:	7b 01       	movw	r14, r22
    628c:	8a 01       	movw	r16, r20
    628e:	fc 01       	movw	r30, r24
    6290:	17 82       	std	Z+7, r1	; 0x07
    6292:	16 82       	std	Z+6, r1	; 0x06
    6294:	83 81       	ldd	r24, Z+3	; 0x03
    6296:	81 ff       	sbrs	r24, 1
    6298:	cc c1       	rjmp	.+920    	; 0x6632 <vfprintf+0x3b6>
    629a:	ce 01       	movw	r24, r28
    629c:	01 96       	adiw	r24, 0x01	; 1
    629e:	3c 01       	movw	r6, r24
    62a0:	f6 01       	movw	r30, r12
    62a2:	93 81       	ldd	r25, Z+3	; 0x03
    62a4:	f7 01       	movw	r30, r14
    62a6:	93 fd       	sbrc	r25, 3
    62a8:	85 91       	lpm	r24, Z+
    62aa:	93 ff       	sbrs	r25, 3
    62ac:	81 91       	ld	r24, Z+
    62ae:	7f 01       	movw	r14, r30
    62b0:	88 23       	and	r24, r24
    62b2:	09 f4       	brne	.+2      	; 0x62b6 <vfprintf+0x3a>
    62b4:	ba c1       	rjmp	.+884    	; 0x662a <vfprintf+0x3ae>
    62b6:	85 32       	cpi	r24, 0x25	; 37
    62b8:	39 f4       	brne	.+14     	; 0x62c8 <vfprintf+0x4c>
    62ba:	93 fd       	sbrc	r25, 3
    62bc:	85 91       	lpm	r24, Z+
    62be:	93 ff       	sbrs	r25, 3
    62c0:	81 91       	ld	r24, Z+
    62c2:	7f 01       	movw	r14, r30
    62c4:	85 32       	cpi	r24, 0x25	; 37
    62c6:	29 f4       	brne	.+10     	; 0x62d2 <vfprintf+0x56>
    62c8:	b6 01       	movw	r22, r12
    62ca:	90 e0       	ldi	r25, 0x00	; 0
    62cc:	0e 94 76 38 	call	0x70ec	; 0x70ec <fputc>
    62d0:	e7 cf       	rjmp	.-50     	; 0x62a0 <vfprintf+0x24>
    62d2:	91 2c       	mov	r9, r1
    62d4:	21 2c       	mov	r2, r1
    62d6:	31 2c       	mov	r3, r1
    62d8:	ff e1       	ldi	r31, 0x1F	; 31
    62da:	f3 15       	cp	r31, r3
    62dc:	d8 f0       	brcs	.+54     	; 0x6314 <vfprintf+0x98>
    62de:	8b 32       	cpi	r24, 0x2B	; 43
    62e0:	79 f0       	breq	.+30     	; 0x6300 <vfprintf+0x84>
    62e2:	38 f4       	brcc	.+14     	; 0x62f2 <vfprintf+0x76>
    62e4:	80 32       	cpi	r24, 0x20	; 32
    62e6:	79 f0       	breq	.+30     	; 0x6306 <vfprintf+0x8a>
    62e8:	83 32       	cpi	r24, 0x23	; 35
    62ea:	a1 f4       	brne	.+40     	; 0x6314 <vfprintf+0x98>
    62ec:	23 2d       	mov	r18, r3
    62ee:	20 61       	ori	r18, 0x10	; 16
    62f0:	1d c0       	rjmp	.+58     	; 0x632c <vfprintf+0xb0>
    62f2:	8d 32       	cpi	r24, 0x2D	; 45
    62f4:	61 f0       	breq	.+24     	; 0x630e <vfprintf+0x92>
    62f6:	80 33       	cpi	r24, 0x30	; 48
    62f8:	69 f4       	brne	.+26     	; 0x6314 <vfprintf+0x98>
    62fa:	23 2d       	mov	r18, r3
    62fc:	21 60       	ori	r18, 0x01	; 1
    62fe:	16 c0       	rjmp	.+44     	; 0x632c <vfprintf+0xb0>
    6300:	83 2d       	mov	r24, r3
    6302:	82 60       	ori	r24, 0x02	; 2
    6304:	38 2e       	mov	r3, r24
    6306:	e3 2d       	mov	r30, r3
    6308:	e4 60       	ori	r30, 0x04	; 4
    630a:	3e 2e       	mov	r3, r30
    630c:	2a c0       	rjmp	.+84     	; 0x6362 <vfprintf+0xe6>
    630e:	f3 2d       	mov	r31, r3
    6310:	f8 60       	ori	r31, 0x08	; 8
    6312:	1d c0       	rjmp	.+58     	; 0x634e <vfprintf+0xd2>
    6314:	37 fc       	sbrc	r3, 7
    6316:	2d c0       	rjmp	.+90     	; 0x6372 <vfprintf+0xf6>
    6318:	20 ed       	ldi	r18, 0xD0	; 208
    631a:	28 0f       	add	r18, r24
    631c:	2a 30       	cpi	r18, 0x0A	; 10
    631e:	40 f0       	brcs	.+16     	; 0x6330 <vfprintf+0xb4>
    6320:	8e 32       	cpi	r24, 0x2E	; 46
    6322:	b9 f4       	brne	.+46     	; 0x6352 <vfprintf+0xd6>
    6324:	36 fc       	sbrc	r3, 6
    6326:	81 c1       	rjmp	.+770    	; 0x662a <vfprintf+0x3ae>
    6328:	23 2d       	mov	r18, r3
    632a:	20 64       	ori	r18, 0x40	; 64
    632c:	32 2e       	mov	r3, r18
    632e:	19 c0       	rjmp	.+50     	; 0x6362 <vfprintf+0xe6>
    6330:	36 fe       	sbrs	r3, 6
    6332:	06 c0       	rjmp	.+12     	; 0x6340 <vfprintf+0xc4>
    6334:	8a e0       	ldi	r24, 0x0A	; 10
    6336:	98 9e       	mul	r9, r24
    6338:	20 0d       	add	r18, r0
    633a:	11 24       	eor	r1, r1
    633c:	92 2e       	mov	r9, r18
    633e:	11 c0       	rjmp	.+34     	; 0x6362 <vfprintf+0xe6>
    6340:	ea e0       	ldi	r30, 0x0A	; 10
    6342:	2e 9e       	mul	r2, r30
    6344:	20 0d       	add	r18, r0
    6346:	11 24       	eor	r1, r1
    6348:	22 2e       	mov	r2, r18
    634a:	f3 2d       	mov	r31, r3
    634c:	f0 62       	ori	r31, 0x20	; 32
    634e:	3f 2e       	mov	r3, r31
    6350:	08 c0       	rjmp	.+16     	; 0x6362 <vfprintf+0xe6>
    6352:	8c 36       	cpi	r24, 0x6C	; 108
    6354:	21 f4       	brne	.+8      	; 0x635e <vfprintf+0xe2>
    6356:	83 2d       	mov	r24, r3
    6358:	80 68       	ori	r24, 0x80	; 128
    635a:	38 2e       	mov	r3, r24
    635c:	02 c0       	rjmp	.+4      	; 0x6362 <vfprintf+0xe6>
    635e:	88 36       	cpi	r24, 0x68	; 104
    6360:	41 f4       	brne	.+16     	; 0x6372 <vfprintf+0xf6>
    6362:	f7 01       	movw	r30, r14
    6364:	93 fd       	sbrc	r25, 3
    6366:	85 91       	lpm	r24, Z+
    6368:	93 ff       	sbrs	r25, 3
    636a:	81 91       	ld	r24, Z+
    636c:	7f 01       	movw	r14, r30
    636e:	81 11       	cpse	r24, r1
    6370:	b3 cf       	rjmp	.-154    	; 0x62d8 <vfprintf+0x5c>
    6372:	98 2f       	mov	r25, r24
    6374:	9f 7d       	andi	r25, 0xDF	; 223
    6376:	95 54       	subi	r25, 0x45	; 69
    6378:	93 30       	cpi	r25, 0x03	; 3
    637a:	28 f4       	brcc	.+10     	; 0x6386 <vfprintf+0x10a>
    637c:	0c 5f       	subi	r16, 0xFC	; 252
    637e:	1f 4f       	sbci	r17, 0xFF	; 255
    6380:	9f e3       	ldi	r25, 0x3F	; 63
    6382:	99 83       	std	Y+1, r25	; 0x01
    6384:	0d c0       	rjmp	.+26     	; 0x63a0 <vfprintf+0x124>
    6386:	83 36       	cpi	r24, 0x63	; 99
    6388:	31 f0       	breq	.+12     	; 0x6396 <vfprintf+0x11a>
    638a:	83 37       	cpi	r24, 0x73	; 115
    638c:	71 f0       	breq	.+28     	; 0x63aa <vfprintf+0x12e>
    638e:	83 35       	cpi	r24, 0x53	; 83
    6390:	09 f0       	breq	.+2      	; 0x6394 <vfprintf+0x118>
    6392:	59 c0       	rjmp	.+178    	; 0x6446 <vfprintf+0x1ca>
    6394:	21 c0       	rjmp	.+66     	; 0x63d8 <vfprintf+0x15c>
    6396:	f8 01       	movw	r30, r16
    6398:	80 81       	ld	r24, Z
    639a:	89 83       	std	Y+1, r24	; 0x01
    639c:	0e 5f       	subi	r16, 0xFE	; 254
    639e:	1f 4f       	sbci	r17, 0xFF	; 255
    63a0:	88 24       	eor	r8, r8
    63a2:	83 94       	inc	r8
    63a4:	91 2c       	mov	r9, r1
    63a6:	53 01       	movw	r10, r6
    63a8:	13 c0       	rjmp	.+38     	; 0x63d0 <vfprintf+0x154>
    63aa:	28 01       	movw	r4, r16
    63ac:	f2 e0       	ldi	r31, 0x02	; 2
    63ae:	4f 0e       	add	r4, r31
    63b0:	51 1c       	adc	r5, r1
    63b2:	f8 01       	movw	r30, r16
    63b4:	a0 80       	ld	r10, Z
    63b6:	b1 80       	ldd	r11, Z+1	; 0x01
    63b8:	36 fe       	sbrs	r3, 6
    63ba:	03 c0       	rjmp	.+6      	; 0x63c2 <vfprintf+0x146>
    63bc:	69 2d       	mov	r22, r9
    63be:	70 e0       	ldi	r23, 0x00	; 0
    63c0:	02 c0       	rjmp	.+4      	; 0x63c6 <vfprintf+0x14a>
    63c2:	6f ef       	ldi	r22, 0xFF	; 255
    63c4:	7f ef       	ldi	r23, 0xFF	; 255
    63c6:	c5 01       	movw	r24, r10
    63c8:	0e 94 1d 38 	call	0x703a	; 0x703a <strnlen>
    63cc:	4c 01       	movw	r8, r24
    63ce:	82 01       	movw	r16, r4
    63d0:	f3 2d       	mov	r31, r3
    63d2:	ff 77       	andi	r31, 0x7F	; 127
    63d4:	3f 2e       	mov	r3, r31
    63d6:	16 c0       	rjmp	.+44     	; 0x6404 <vfprintf+0x188>
    63d8:	28 01       	movw	r4, r16
    63da:	22 e0       	ldi	r18, 0x02	; 2
    63dc:	42 0e       	add	r4, r18
    63de:	51 1c       	adc	r5, r1
    63e0:	f8 01       	movw	r30, r16
    63e2:	a0 80       	ld	r10, Z
    63e4:	b1 80       	ldd	r11, Z+1	; 0x01
    63e6:	36 fe       	sbrs	r3, 6
    63e8:	03 c0       	rjmp	.+6      	; 0x63f0 <vfprintf+0x174>
    63ea:	69 2d       	mov	r22, r9
    63ec:	70 e0       	ldi	r23, 0x00	; 0
    63ee:	02 c0       	rjmp	.+4      	; 0x63f4 <vfprintf+0x178>
    63f0:	6f ef       	ldi	r22, 0xFF	; 255
    63f2:	7f ef       	ldi	r23, 0xFF	; 255
    63f4:	c5 01       	movw	r24, r10
    63f6:	0e 94 12 38 	call	0x7024	; 0x7024 <strnlen_P>
    63fa:	4c 01       	movw	r8, r24
    63fc:	f3 2d       	mov	r31, r3
    63fe:	f0 68       	ori	r31, 0x80	; 128
    6400:	3f 2e       	mov	r3, r31
    6402:	82 01       	movw	r16, r4
    6404:	33 fc       	sbrc	r3, 3
    6406:	1b c0       	rjmp	.+54     	; 0x643e <vfprintf+0x1c2>
    6408:	82 2d       	mov	r24, r2
    640a:	90 e0       	ldi	r25, 0x00	; 0
    640c:	88 16       	cp	r8, r24
    640e:	99 06       	cpc	r9, r25
    6410:	b0 f4       	brcc	.+44     	; 0x643e <vfprintf+0x1c2>
    6412:	b6 01       	movw	r22, r12
    6414:	80 e2       	ldi	r24, 0x20	; 32
    6416:	90 e0       	ldi	r25, 0x00	; 0
    6418:	0e 94 76 38 	call	0x70ec	; 0x70ec <fputc>
    641c:	2a 94       	dec	r2
    641e:	f4 cf       	rjmp	.-24     	; 0x6408 <vfprintf+0x18c>
    6420:	f5 01       	movw	r30, r10
    6422:	37 fc       	sbrc	r3, 7
    6424:	85 91       	lpm	r24, Z+
    6426:	37 fe       	sbrs	r3, 7
    6428:	81 91       	ld	r24, Z+
    642a:	5f 01       	movw	r10, r30
    642c:	b6 01       	movw	r22, r12
    642e:	90 e0       	ldi	r25, 0x00	; 0
    6430:	0e 94 76 38 	call	0x70ec	; 0x70ec <fputc>
    6434:	21 10       	cpse	r2, r1
    6436:	2a 94       	dec	r2
    6438:	21 e0       	ldi	r18, 0x01	; 1
    643a:	82 1a       	sub	r8, r18
    643c:	91 08       	sbc	r9, r1
    643e:	81 14       	cp	r8, r1
    6440:	91 04       	cpc	r9, r1
    6442:	71 f7       	brne	.-36     	; 0x6420 <vfprintf+0x1a4>
    6444:	e8 c0       	rjmp	.+464    	; 0x6616 <vfprintf+0x39a>
    6446:	84 36       	cpi	r24, 0x64	; 100
    6448:	11 f0       	breq	.+4      	; 0x644e <vfprintf+0x1d2>
    644a:	89 36       	cpi	r24, 0x69	; 105
    644c:	41 f5       	brne	.+80     	; 0x649e <vfprintf+0x222>
    644e:	f8 01       	movw	r30, r16
    6450:	37 fe       	sbrs	r3, 7
    6452:	07 c0       	rjmp	.+14     	; 0x6462 <vfprintf+0x1e6>
    6454:	60 81       	ld	r22, Z
    6456:	71 81       	ldd	r23, Z+1	; 0x01
    6458:	82 81       	ldd	r24, Z+2	; 0x02
    645a:	93 81       	ldd	r25, Z+3	; 0x03
    645c:	0c 5f       	subi	r16, 0xFC	; 252
    645e:	1f 4f       	sbci	r17, 0xFF	; 255
    6460:	08 c0       	rjmp	.+16     	; 0x6472 <vfprintf+0x1f6>
    6462:	60 81       	ld	r22, Z
    6464:	71 81       	ldd	r23, Z+1	; 0x01
    6466:	07 2e       	mov	r0, r23
    6468:	00 0c       	add	r0, r0
    646a:	88 0b       	sbc	r24, r24
    646c:	99 0b       	sbc	r25, r25
    646e:	0e 5f       	subi	r16, 0xFE	; 254
    6470:	1f 4f       	sbci	r17, 0xFF	; 255
    6472:	f3 2d       	mov	r31, r3
    6474:	ff 76       	andi	r31, 0x6F	; 111
    6476:	3f 2e       	mov	r3, r31
    6478:	97 ff       	sbrs	r25, 7
    647a:	09 c0       	rjmp	.+18     	; 0x648e <vfprintf+0x212>
    647c:	90 95       	com	r25
    647e:	80 95       	com	r24
    6480:	70 95       	com	r23
    6482:	61 95       	neg	r22
    6484:	7f 4f       	sbci	r23, 0xFF	; 255
    6486:	8f 4f       	sbci	r24, 0xFF	; 255
    6488:	9f 4f       	sbci	r25, 0xFF	; 255
    648a:	f0 68       	ori	r31, 0x80	; 128
    648c:	3f 2e       	mov	r3, r31
    648e:	2a e0       	ldi	r18, 0x0A	; 10
    6490:	30 e0       	ldi	r19, 0x00	; 0
    6492:	a3 01       	movw	r20, r6
    6494:	0e 94 cb 38 	call	0x7196	; 0x7196 <__ultoa_invert>
    6498:	88 2e       	mov	r8, r24
    649a:	86 18       	sub	r8, r6
    649c:	45 c0       	rjmp	.+138    	; 0x6528 <vfprintf+0x2ac>
    649e:	85 37       	cpi	r24, 0x75	; 117
    64a0:	31 f4       	brne	.+12     	; 0x64ae <vfprintf+0x232>
    64a2:	23 2d       	mov	r18, r3
    64a4:	2f 7e       	andi	r18, 0xEF	; 239
    64a6:	b2 2e       	mov	r11, r18
    64a8:	2a e0       	ldi	r18, 0x0A	; 10
    64aa:	30 e0       	ldi	r19, 0x00	; 0
    64ac:	25 c0       	rjmp	.+74     	; 0x64f8 <vfprintf+0x27c>
    64ae:	93 2d       	mov	r25, r3
    64b0:	99 7f       	andi	r25, 0xF9	; 249
    64b2:	b9 2e       	mov	r11, r25
    64b4:	8f 36       	cpi	r24, 0x6F	; 111
    64b6:	c1 f0       	breq	.+48     	; 0x64e8 <vfprintf+0x26c>
    64b8:	18 f4       	brcc	.+6      	; 0x64c0 <vfprintf+0x244>
    64ba:	88 35       	cpi	r24, 0x58	; 88
    64bc:	79 f0       	breq	.+30     	; 0x64dc <vfprintf+0x260>
    64be:	b5 c0       	rjmp	.+362    	; 0x662a <vfprintf+0x3ae>
    64c0:	80 37       	cpi	r24, 0x70	; 112
    64c2:	19 f0       	breq	.+6      	; 0x64ca <vfprintf+0x24e>
    64c4:	88 37       	cpi	r24, 0x78	; 120
    64c6:	21 f0       	breq	.+8      	; 0x64d0 <vfprintf+0x254>
    64c8:	b0 c0       	rjmp	.+352    	; 0x662a <vfprintf+0x3ae>
    64ca:	e9 2f       	mov	r30, r25
    64cc:	e0 61       	ori	r30, 0x10	; 16
    64ce:	be 2e       	mov	r11, r30
    64d0:	b4 fe       	sbrs	r11, 4
    64d2:	0d c0       	rjmp	.+26     	; 0x64ee <vfprintf+0x272>
    64d4:	fb 2d       	mov	r31, r11
    64d6:	f4 60       	ori	r31, 0x04	; 4
    64d8:	bf 2e       	mov	r11, r31
    64da:	09 c0       	rjmp	.+18     	; 0x64ee <vfprintf+0x272>
    64dc:	34 fe       	sbrs	r3, 4
    64de:	0a c0       	rjmp	.+20     	; 0x64f4 <vfprintf+0x278>
    64e0:	29 2f       	mov	r18, r25
    64e2:	26 60       	ori	r18, 0x06	; 6
    64e4:	b2 2e       	mov	r11, r18
    64e6:	06 c0       	rjmp	.+12     	; 0x64f4 <vfprintf+0x278>
    64e8:	28 e0       	ldi	r18, 0x08	; 8
    64ea:	30 e0       	ldi	r19, 0x00	; 0
    64ec:	05 c0       	rjmp	.+10     	; 0x64f8 <vfprintf+0x27c>
    64ee:	20 e1       	ldi	r18, 0x10	; 16
    64f0:	30 e0       	ldi	r19, 0x00	; 0
    64f2:	02 c0       	rjmp	.+4      	; 0x64f8 <vfprintf+0x27c>
    64f4:	20 e1       	ldi	r18, 0x10	; 16
    64f6:	32 e0       	ldi	r19, 0x02	; 2
    64f8:	f8 01       	movw	r30, r16
    64fa:	b7 fe       	sbrs	r11, 7
    64fc:	07 c0       	rjmp	.+14     	; 0x650c <vfprintf+0x290>
    64fe:	60 81       	ld	r22, Z
    6500:	71 81       	ldd	r23, Z+1	; 0x01
    6502:	82 81       	ldd	r24, Z+2	; 0x02
    6504:	93 81       	ldd	r25, Z+3	; 0x03
    6506:	0c 5f       	subi	r16, 0xFC	; 252
    6508:	1f 4f       	sbci	r17, 0xFF	; 255
    650a:	06 c0       	rjmp	.+12     	; 0x6518 <vfprintf+0x29c>
    650c:	60 81       	ld	r22, Z
    650e:	71 81       	ldd	r23, Z+1	; 0x01
    6510:	80 e0       	ldi	r24, 0x00	; 0
    6512:	90 e0       	ldi	r25, 0x00	; 0
    6514:	0e 5f       	subi	r16, 0xFE	; 254
    6516:	1f 4f       	sbci	r17, 0xFF	; 255
    6518:	a3 01       	movw	r20, r6
    651a:	0e 94 cb 38 	call	0x7196	; 0x7196 <__ultoa_invert>
    651e:	88 2e       	mov	r8, r24
    6520:	86 18       	sub	r8, r6
    6522:	fb 2d       	mov	r31, r11
    6524:	ff 77       	andi	r31, 0x7F	; 127
    6526:	3f 2e       	mov	r3, r31
    6528:	36 fe       	sbrs	r3, 6
    652a:	0d c0       	rjmp	.+26     	; 0x6546 <vfprintf+0x2ca>
    652c:	23 2d       	mov	r18, r3
    652e:	2e 7f       	andi	r18, 0xFE	; 254
    6530:	a2 2e       	mov	r10, r18
    6532:	89 14       	cp	r8, r9
    6534:	58 f4       	brcc	.+22     	; 0x654c <vfprintf+0x2d0>
    6536:	34 fe       	sbrs	r3, 4
    6538:	0b c0       	rjmp	.+22     	; 0x6550 <vfprintf+0x2d4>
    653a:	32 fc       	sbrc	r3, 2
    653c:	09 c0       	rjmp	.+18     	; 0x6550 <vfprintf+0x2d4>
    653e:	83 2d       	mov	r24, r3
    6540:	8e 7e       	andi	r24, 0xEE	; 238
    6542:	a8 2e       	mov	r10, r24
    6544:	05 c0       	rjmp	.+10     	; 0x6550 <vfprintf+0x2d4>
    6546:	b8 2c       	mov	r11, r8
    6548:	a3 2c       	mov	r10, r3
    654a:	03 c0       	rjmp	.+6      	; 0x6552 <vfprintf+0x2d6>
    654c:	b8 2c       	mov	r11, r8
    654e:	01 c0       	rjmp	.+2      	; 0x6552 <vfprintf+0x2d6>
    6550:	b9 2c       	mov	r11, r9
    6552:	a4 fe       	sbrs	r10, 4
    6554:	0f c0       	rjmp	.+30     	; 0x6574 <vfprintf+0x2f8>
    6556:	fe 01       	movw	r30, r28
    6558:	e8 0d       	add	r30, r8
    655a:	f1 1d       	adc	r31, r1
    655c:	80 81       	ld	r24, Z
    655e:	80 33       	cpi	r24, 0x30	; 48
    6560:	21 f4       	brne	.+8      	; 0x656a <vfprintf+0x2ee>
    6562:	9a 2d       	mov	r25, r10
    6564:	99 7e       	andi	r25, 0xE9	; 233
    6566:	a9 2e       	mov	r10, r25
    6568:	09 c0       	rjmp	.+18     	; 0x657c <vfprintf+0x300>
    656a:	a2 fe       	sbrs	r10, 2
    656c:	06 c0       	rjmp	.+12     	; 0x657a <vfprintf+0x2fe>
    656e:	b3 94       	inc	r11
    6570:	b3 94       	inc	r11
    6572:	04 c0       	rjmp	.+8      	; 0x657c <vfprintf+0x300>
    6574:	8a 2d       	mov	r24, r10
    6576:	86 78       	andi	r24, 0x86	; 134
    6578:	09 f0       	breq	.+2      	; 0x657c <vfprintf+0x300>
    657a:	b3 94       	inc	r11
    657c:	a3 fc       	sbrc	r10, 3
    657e:	11 c0       	rjmp	.+34     	; 0x65a2 <vfprintf+0x326>
    6580:	a0 fe       	sbrs	r10, 0
    6582:	06 c0       	rjmp	.+12     	; 0x6590 <vfprintf+0x314>
    6584:	b2 14       	cp	r11, r2
    6586:	88 f4       	brcc	.+34     	; 0x65aa <vfprintf+0x32e>
    6588:	28 0c       	add	r2, r8
    658a:	92 2c       	mov	r9, r2
    658c:	9b 18       	sub	r9, r11
    658e:	0e c0       	rjmp	.+28     	; 0x65ac <vfprintf+0x330>
    6590:	b2 14       	cp	r11, r2
    6592:	60 f4       	brcc	.+24     	; 0x65ac <vfprintf+0x330>
    6594:	b6 01       	movw	r22, r12
    6596:	80 e2       	ldi	r24, 0x20	; 32
    6598:	90 e0       	ldi	r25, 0x00	; 0
    659a:	0e 94 76 38 	call	0x70ec	; 0x70ec <fputc>
    659e:	b3 94       	inc	r11
    65a0:	f7 cf       	rjmp	.-18     	; 0x6590 <vfprintf+0x314>
    65a2:	b2 14       	cp	r11, r2
    65a4:	18 f4       	brcc	.+6      	; 0x65ac <vfprintf+0x330>
    65a6:	2b 18       	sub	r2, r11
    65a8:	02 c0       	rjmp	.+4      	; 0x65ae <vfprintf+0x332>
    65aa:	98 2c       	mov	r9, r8
    65ac:	21 2c       	mov	r2, r1
    65ae:	a4 fe       	sbrs	r10, 4
    65b0:	10 c0       	rjmp	.+32     	; 0x65d2 <vfprintf+0x356>
    65b2:	b6 01       	movw	r22, r12
    65b4:	80 e3       	ldi	r24, 0x30	; 48
    65b6:	90 e0       	ldi	r25, 0x00	; 0
    65b8:	0e 94 76 38 	call	0x70ec	; 0x70ec <fputc>
    65bc:	a2 fe       	sbrs	r10, 2
    65be:	17 c0       	rjmp	.+46     	; 0x65ee <vfprintf+0x372>
    65c0:	a1 fc       	sbrc	r10, 1
    65c2:	03 c0       	rjmp	.+6      	; 0x65ca <vfprintf+0x34e>
    65c4:	88 e7       	ldi	r24, 0x78	; 120
    65c6:	90 e0       	ldi	r25, 0x00	; 0
    65c8:	02 c0       	rjmp	.+4      	; 0x65ce <vfprintf+0x352>
    65ca:	88 e5       	ldi	r24, 0x58	; 88
    65cc:	90 e0       	ldi	r25, 0x00	; 0
    65ce:	b6 01       	movw	r22, r12
    65d0:	0c c0       	rjmp	.+24     	; 0x65ea <vfprintf+0x36e>
    65d2:	8a 2d       	mov	r24, r10
    65d4:	86 78       	andi	r24, 0x86	; 134
    65d6:	59 f0       	breq	.+22     	; 0x65ee <vfprintf+0x372>
    65d8:	a1 fe       	sbrs	r10, 1
    65da:	02 c0       	rjmp	.+4      	; 0x65e0 <vfprintf+0x364>
    65dc:	8b e2       	ldi	r24, 0x2B	; 43
    65de:	01 c0       	rjmp	.+2      	; 0x65e2 <vfprintf+0x366>
    65e0:	80 e2       	ldi	r24, 0x20	; 32
    65e2:	a7 fc       	sbrc	r10, 7
    65e4:	8d e2       	ldi	r24, 0x2D	; 45
    65e6:	b6 01       	movw	r22, r12
    65e8:	90 e0       	ldi	r25, 0x00	; 0
    65ea:	0e 94 76 38 	call	0x70ec	; 0x70ec <fputc>
    65ee:	89 14       	cp	r8, r9
    65f0:	38 f4       	brcc	.+14     	; 0x6600 <vfprintf+0x384>
    65f2:	b6 01       	movw	r22, r12
    65f4:	80 e3       	ldi	r24, 0x30	; 48
    65f6:	90 e0       	ldi	r25, 0x00	; 0
    65f8:	0e 94 76 38 	call	0x70ec	; 0x70ec <fputc>
    65fc:	9a 94       	dec	r9
    65fe:	f7 cf       	rjmp	.-18     	; 0x65ee <vfprintf+0x372>
    6600:	8a 94       	dec	r8
    6602:	f3 01       	movw	r30, r6
    6604:	e8 0d       	add	r30, r8
    6606:	f1 1d       	adc	r31, r1
    6608:	80 81       	ld	r24, Z
    660a:	b6 01       	movw	r22, r12
    660c:	90 e0       	ldi	r25, 0x00	; 0
    660e:	0e 94 76 38 	call	0x70ec	; 0x70ec <fputc>
    6612:	81 10       	cpse	r8, r1
    6614:	f5 cf       	rjmp	.-22     	; 0x6600 <vfprintf+0x384>
    6616:	22 20       	and	r2, r2
    6618:	09 f4       	brne	.+2      	; 0x661c <vfprintf+0x3a0>
    661a:	42 ce       	rjmp	.-892    	; 0x62a0 <vfprintf+0x24>
    661c:	b6 01       	movw	r22, r12
    661e:	80 e2       	ldi	r24, 0x20	; 32
    6620:	90 e0       	ldi	r25, 0x00	; 0
    6622:	0e 94 76 38 	call	0x70ec	; 0x70ec <fputc>
    6626:	2a 94       	dec	r2
    6628:	f6 cf       	rjmp	.-20     	; 0x6616 <vfprintf+0x39a>
    662a:	f6 01       	movw	r30, r12
    662c:	86 81       	ldd	r24, Z+6	; 0x06
    662e:	97 81       	ldd	r25, Z+7	; 0x07
    6630:	02 c0       	rjmp	.+4      	; 0x6636 <vfprintf+0x3ba>
    6632:	8f ef       	ldi	r24, 0xFF	; 255
    6634:	9f ef       	ldi	r25, 0xFF	; 255
    6636:	2b 96       	adiw	r28, 0x0b	; 11
    6638:	e2 e1       	ldi	r30, 0x12	; 18
    663a:	0c 94 26 2f 	jmp	0x5e4c	; 0x5e4c <__epilogue_restores__>

0000663e <putval>:
    663e:	20 fd       	sbrc	r18, 0
    6640:	09 c0       	rjmp	.+18     	; 0x6654 <putval+0x16>
    6642:	fc 01       	movw	r30, r24
    6644:	23 fd       	sbrc	r18, 3
    6646:	05 c0       	rjmp	.+10     	; 0x6652 <putval+0x14>
    6648:	22 ff       	sbrs	r18, 2
    664a:	02 c0       	rjmp	.+4      	; 0x6650 <putval+0x12>
    664c:	73 83       	std	Z+3, r23	; 0x03
    664e:	62 83       	std	Z+2, r22	; 0x02
    6650:	51 83       	std	Z+1, r21	; 0x01
    6652:	40 83       	st	Z, r20
    6654:	08 95       	ret

00006656 <mulacc>:
    6656:	44 fd       	sbrc	r20, 4
    6658:	17 c0       	rjmp	.+46     	; 0x6688 <mulacc+0x32>
    665a:	46 fd       	sbrc	r20, 6
    665c:	17 c0       	rjmp	.+46     	; 0x668c <mulacc+0x36>
    665e:	ab 01       	movw	r20, r22
    6660:	bc 01       	movw	r22, r24
    6662:	da 01       	movw	r26, r20
    6664:	fb 01       	movw	r30, r22
    6666:	aa 0f       	add	r26, r26
    6668:	bb 1f       	adc	r27, r27
    666a:	ee 1f       	adc	r30, r30
    666c:	ff 1f       	adc	r31, r31
    666e:	10 94       	com	r1
    6670:	d1 f7       	brne	.-12     	; 0x6666 <mulacc+0x10>
    6672:	4a 0f       	add	r20, r26
    6674:	5b 1f       	adc	r21, r27
    6676:	6e 1f       	adc	r22, r30
    6678:	7f 1f       	adc	r23, r31
    667a:	cb 01       	movw	r24, r22
    667c:	ba 01       	movw	r22, r20
    667e:	66 0f       	add	r22, r22
    6680:	77 1f       	adc	r23, r23
    6682:	88 1f       	adc	r24, r24
    6684:	99 1f       	adc	r25, r25
    6686:	09 c0       	rjmp	.+18     	; 0x669a <mulacc+0x44>
    6688:	33 e0       	ldi	r19, 0x03	; 3
    668a:	01 c0       	rjmp	.+2      	; 0x668e <mulacc+0x38>
    668c:	34 e0       	ldi	r19, 0x04	; 4
    668e:	66 0f       	add	r22, r22
    6690:	77 1f       	adc	r23, r23
    6692:	88 1f       	adc	r24, r24
    6694:	99 1f       	adc	r25, r25
    6696:	31 50       	subi	r19, 0x01	; 1
    6698:	d1 f7       	brne	.-12     	; 0x668e <mulacc+0x38>
    669a:	62 0f       	add	r22, r18
    669c:	71 1d       	adc	r23, r1
    669e:	81 1d       	adc	r24, r1
    66a0:	91 1d       	adc	r25, r1
    66a2:	08 95       	ret

000066a4 <skip_spaces>:
    66a4:	0f 93       	push	r16
    66a6:	1f 93       	push	r17
    66a8:	cf 93       	push	r28
    66aa:	df 93       	push	r29
    66ac:	8c 01       	movw	r16, r24
    66ae:	c8 01       	movw	r24, r16
    66b0:	0e 94 38 38 	call	0x7070	; 0x7070 <fgetc>
    66b4:	ec 01       	movw	r28, r24
    66b6:	97 fd       	sbrc	r25, 7
    66b8:	08 c0       	rjmp	.+16     	; 0x66ca <skip_spaces+0x26>
    66ba:	0e 94 fe 37 	call	0x6ffc	; 0x6ffc <isspace>
    66be:	89 2b       	or	r24, r25
    66c0:	b1 f7       	brne	.-20     	; 0x66ae <skip_spaces+0xa>
    66c2:	b8 01       	movw	r22, r16
    66c4:	ce 01       	movw	r24, r28
    66c6:	0e 94 b2 38 	call	0x7164	; 0x7164 <ungetc>
    66ca:	ce 01       	movw	r24, r28
    66cc:	df 91       	pop	r29
    66ce:	cf 91       	pop	r28
    66d0:	1f 91       	pop	r17
    66d2:	0f 91       	pop	r16
    66d4:	08 95       	ret

000066d6 <conv_int>:
    66d6:	8f 92       	push	r8
    66d8:	9f 92       	push	r9
    66da:	af 92       	push	r10
    66dc:	bf 92       	push	r11
    66de:	ef 92       	push	r14
    66e0:	ff 92       	push	r15
    66e2:	0f 93       	push	r16
    66e4:	1f 93       	push	r17
    66e6:	cf 93       	push	r28
    66e8:	df 93       	push	r29
    66ea:	8c 01       	movw	r16, r24
    66ec:	d6 2f       	mov	r29, r22
    66ee:	7a 01       	movw	r14, r20
    66f0:	b2 2e       	mov	r11, r18
    66f2:	0e 94 38 38 	call	0x7070	; 0x7070 <fgetc>
    66f6:	9c 01       	movw	r18, r24
    66f8:	33 27       	eor	r19, r19
    66fa:	2b 32       	cpi	r18, 0x2B	; 43
    66fc:	31 05       	cpc	r19, r1
    66fe:	31 f0       	breq	.+12     	; 0x670c <conv_int+0x36>
    6700:	2d 32       	cpi	r18, 0x2D	; 45
    6702:	31 05       	cpc	r19, r1
    6704:	61 f4       	brne	.+24     	; 0x671e <conv_int+0x48>
    6706:	8b 2d       	mov	r24, r11
    6708:	80 68       	ori	r24, 0x80	; 128
    670a:	b8 2e       	mov	r11, r24
    670c:	d1 50       	subi	r29, 0x01	; 1
    670e:	11 f4       	brne	.+4      	; 0x6714 <conv_int+0x3e>
    6710:	80 e0       	ldi	r24, 0x00	; 0
    6712:	68 c0       	rjmp	.+208    	; 0x67e4 <conv_int+0x10e>
    6714:	c8 01       	movw	r24, r16
    6716:	0e 94 38 38 	call	0x7070	; 0x7070 <fgetc>
    671a:	97 fd       	sbrc	r25, 7
    671c:	f9 cf       	rjmp	.-14     	; 0x6710 <conv_int+0x3a>
    671e:	cb 2d       	mov	r28, r11
    6720:	cd 7f       	andi	r28, 0xFD	; 253
    6722:	2b 2d       	mov	r18, r11
    6724:	20 73       	andi	r18, 0x30	; 48
    6726:	09 f5       	brne	.+66     	; 0x676a <conv_int+0x94>
    6728:	80 33       	cpi	r24, 0x30	; 48
    672a:	f9 f4       	brne	.+62     	; 0x676a <conv_int+0x94>
    672c:	aa 24       	eor	r10, r10
    672e:	aa 94       	dec	r10
    6730:	ad 0e       	add	r10, r29
    6732:	09 f4       	brne	.+2      	; 0x6736 <conv_int+0x60>
    6734:	43 c0       	rjmp	.+134    	; 0x67bc <conv_int+0xe6>
    6736:	c8 01       	movw	r24, r16
    6738:	0e 94 38 38 	call	0x7070	; 0x7070 <fgetc>
    673c:	97 fd       	sbrc	r25, 7
    673e:	3e c0       	rjmp	.+124    	; 0x67bc <conv_int+0xe6>
    6740:	9c 01       	movw	r18, r24
    6742:	2f 7d       	andi	r18, 0xDF	; 223
    6744:	33 27       	eor	r19, r19
    6746:	28 35       	cpi	r18, 0x58	; 88
    6748:	31 05       	cpc	r19, r1
    674a:	49 f4       	brne	.+18     	; 0x675e <conv_int+0x88>
    674c:	c2 64       	ori	r28, 0x42	; 66
    674e:	d2 50       	subi	r29, 0x02	; 2
    6750:	a9 f1       	breq	.+106    	; 0x67bc <conv_int+0xe6>
    6752:	c8 01       	movw	r24, r16
    6754:	0e 94 38 38 	call	0x7070	; 0x7070 <fgetc>
    6758:	97 ff       	sbrs	r25, 7
    675a:	07 c0       	rjmp	.+14     	; 0x676a <conv_int+0x94>
    675c:	2f c0       	rjmp	.+94     	; 0x67bc <conv_int+0xe6>
    675e:	b6 fe       	sbrs	r11, 6
    6760:	02 c0       	rjmp	.+4      	; 0x6766 <conv_int+0x90>
    6762:	c2 60       	ori	r28, 0x02	; 2
    6764:	01 c0       	rjmp	.+2      	; 0x6768 <conv_int+0x92>
    6766:	c2 61       	ori	r28, 0x12	; 18
    6768:	da 2d       	mov	r29, r10
    676a:	81 2c       	mov	r8, r1
    676c:	91 2c       	mov	r9, r1
    676e:	54 01       	movw	r10, r8
    6770:	20 ed       	ldi	r18, 0xD0	; 208
    6772:	28 0f       	add	r18, r24
    6774:	28 30       	cpi	r18, 0x08	; 8
    6776:	80 f0       	brcs	.+32     	; 0x6798 <conv_int+0xc2>
    6778:	c4 ff       	sbrs	r28, 4
    677a:	04 c0       	rjmp	.+8      	; 0x6784 <conv_int+0xae>
    677c:	b8 01       	movw	r22, r16
    677e:	0e 94 b2 38 	call	0x7164	; 0x7164 <ungetc>
    6782:	19 c0       	rjmp	.+50     	; 0x67b6 <conv_int+0xe0>
    6784:	2a 30       	cpi	r18, 0x0A	; 10
    6786:	40 f0       	brcs	.+16     	; 0x6798 <conv_int+0xc2>
    6788:	c6 ff       	sbrs	r28, 6
    678a:	f8 cf       	rjmp	.-16     	; 0x677c <conv_int+0xa6>
    678c:	2f 7d       	andi	r18, 0xDF	; 223
    678e:	3f ee       	ldi	r19, 0xEF	; 239
    6790:	32 0f       	add	r19, r18
    6792:	36 30       	cpi	r19, 0x06	; 6
    6794:	98 f7       	brcc	.-26     	; 0x677c <conv_int+0xa6>
    6796:	27 50       	subi	r18, 0x07	; 7
    6798:	4c 2f       	mov	r20, r28
    679a:	c5 01       	movw	r24, r10
    679c:	b4 01       	movw	r22, r8
    679e:	0e 94 2b 33 	call	0x6656	; 0x6656 <mulacc>
    67a2:	4b 01       	movw	r8, r22
    67a4:	5c 01       	movw	r10, r24
    67a6:	c2 60       	ori	r28, 0x02	; 2
    67a8:	d1 50       	subi	r29, 0x01	; 1
    67aa:	59 f0       	breq	.+22     	; 0x67c2 <conv_int+0xec>
    67ac:	c8 01       	movw	r24, r16
    67ae:	0e 94 38 38 	call	0x7070	; 0x7070 <fgetc>
    67b2:	97 ff       	sbrs	r25, 7
    67b4:	dd cf       	rjmp	.-70     	; 0x6770 <conv_int+0x9a>
    67b6:	c1 fd       	sbrc	r28, 1
    67b8:	04 c0       	rjmp	.+8      	; 0x67c2 <conv_int+0xec>
    67ba:	aa cf       	rjmp	.-172    	; 0x6710 <conv_int+0x3a>
    67bc:	81 2c       	mov	r8, r1
    67be:	91 2c       	mov	r9, r1
    67c0:	54 01       	movw	r10, r8
    67c2:	c7 ff       	sbrs	r28, 7
    67c4:	08 c0       	rjmp	.+16     	; 0x67d6 <conv_int+0x100>
    67c6:	b0 94       	com	r11
    67c8:	a0 94       	com	r10
    67ca:	90 94       	com	r9
    67cc:	80 94       	com	r8
    67ce:	81 1c       	adc	r8, r1
    67d0:	91 1c       	adc	r9, r1
    67d2:	a1 1c       	adc	r10, r1
    67d4:	b1 1c       	adc	r11, r1
    67d6:	2c 2f       	mov	r18, r28
    67d8:	b5 01       	movw	r22, r10
    67da:	a4 01       	movw	r20, r8
    67dc:	c7 01       	movw	r24, r14
    67de:	0e 94 1f 33 	call	0x663e	; 0x663e <putval>
    67e2:	81 e0       	ldi	r24, 0x01	; 1
    67e4:	df 91       	pop	r29
    67e6:	cf 91       	pop	r28
    67e8:	1f 91       	pop	r17
    67ea:	0f 91       	pop	r16
    67ec:	ff 90       	pop	r15
    67ee:	ef 90       	pop	r14
    67f0:	bf 90       	pop	r11
    67f2:	af 90       	pop	r10
    67f4:	9f 90       	pop	r9
    67f6:	8f 90       	pop	r8
    67f8:	08 95       	ret

000067fa <conv_brk>:
    67fa:	a0 e2       	ldi	r26, 0x20	; 32
    67fc:	b0 e0       	ldi	r27, 0x00	; 0
    67fe:	e3 e0       	ldi	r30, 0x03	; 3
    6800:	f4 e3       	ldi	r31, 0x34	; 52
    6802:	0c 94 0d 2f 	jmp	0x5e1a	; 0x5e1a <__prologue_saves__+0x6>
    6806:	5c 01       	movw	r10, r24
    6808:	96 2e       	mov	r9, r22
    680a:	7a 01       	movw	r14, r20
    680c:	f9 01       	movw	r30, r18
    680e:	8e 01       	movw	r16, r28
    6810:	0f 5f       	subi	r16, 0xFF	; 255
    6812:	1f 4f       	sbci	r17, 0xFF	; 255
    6814:	68 01       	movw	r12, r16
    6816:	80 e2       	ldi	r24, 0x20	; 32
    6818:	d8 01       	movw	r26, r16
    681a:	1d 92       	st	X+, r1
    681c:	8a 95       	dec	r24
    681e:	e9 f7       	brne	.-6      	; 0x681a <conv_brk+0x20>
    6820:	d5 01       	movw	r26, r10
    6822:	13 96       	adiw	r26, 0x03	; 3
    6824:	8c 90       	ld	r8, X
    6826:	80 e0       	ldi	r24, 0x00	; 0
    6828:	90 e0       	ldi	r25, 0x00	; 0
    682a:	61 2c       	mov	r6, r1
    682c:	71 2c       	mov	r7, r1
    682e:	30 e0       	ldi	r19, 0x00	; 0
    6830:	61 e0       	ldi	r22, 0x01	; 1
    6832:	70 e0       	ldi	r23, 0x00	; 0
    6834:	83 fc       	sbrc	r8, 3
    6836:	25 91       	lpm	r18, Z+
    6838:	83 fe       	sbrs	r8, 3
    683a:	21 91       	ld	r18, Z+
    683c:	8f 01       	movw	r16, r30
    683e:	52 2e       	mov	r5, r18
    6840:	21 11       	cpse	r18, r1
    6842:	03 c0       	rjmp	.+6      	; 0x684a <conv_brk+0x50>
    6844:	80 e0       	ldi	r24, 0x00	; 0
    6846:	90 e0       	ldi	r25, 0x00	; 0
    6848:	92 c0       	rjmp	.+292    	; 0x696e <conv_brk+0x174>
    684a:	2e 35       	cpi	r18, 0x5E	; 94
    684c:	11 f4       	brne	.+4      	; 0x6852 <conv_brk+0x58>
    684e:	00 97       	sbiw	r24, 0x00	; 0
    6850:	51 f1       	breq	.+84     	; 0x68a6 <conv_brk+0xac>
    6852:	43 2f       	mov	r20, r19
    6854:	50 e0       	ldi	r21, 0x00	; 0
    6856:	48 17       	cp	r20, r24
    6858:	59 07       	cpc	r21, r25
    685a:	3c f4       	brge	.+14     	; 0x686a <conv_brk+0x70>
    685c:	2d 35       	cpi	r18, 0x5D	; 93
    685e:	59 f1       	breq	.+86     	; 0x68b6 <conv_brk+0xbc>
    6860:	2d 32       	cpi	r18, 0x2D	; 45
    6862:	19 f4       	brne	.+6      	; 0x686a <conv_brk+0x70>
    6864:	77 20       	and	r7, r7
    6866:	09 f1       	breq	.+66     	; 0x68aa <conv_brk+0xb0>
    6868:	03 c0       	rjmp	.+6      	; 0x6870 <conv_brk+0x76>
    686a:	77 20       	and	r7, r7
    686c:	09 f4       	brne	.+2      	; 0x6870 <conv_brk+0x76>
    686e:	6a c0       	rjmp	.+212    	; 0x6944 <conv_brk+0x14a>
    6870:	45 2d       	mov	r20, r5
    6872:	46 95       	lsr	r20
    6874:	46 95       	lsr	r20
    6876:	46 95       	lsr	r20
    6878:	d6 01       	movw	r26, r12
    687a:	a4 0f       	add	r26, r20
    687c:	b1 1d       	adc	r27, r1
    687e:	45 2d       	mov	r20, r5
    6880:	47 70       	andi	r20, 0x07	; 7
    6882:	8b 01       	movw	r16, r22
    6884:	02 c0       	rjmp	.+4      	; 0x688a <conv_brk+0x90>
    6886:	00 0f       	add	r16, r16
    6888:	11 1f       	adc	r17, r17
    688a:	4a 95       	dec	r20
    688c:	e2 f7       	brpl	.-8      	; 0x6886 <conv_brk+0x8c>
    688e:	a8 01       	movw	r20, r16
    6890:	5c 91       	ld	r21, X
    6892:	45 2b       	or	r20, r21
    6894:	4c 93       	st	X, r20
    6896:	65 14       	cp	r6, r5
    6898:	59 f0       	breq	.+22     	; 0x68b0 <conv_brk+0xb6>
    689a:	56 14       	cp	r5, r6
    689c:	10 f4       	brcc	.+4      	; 0x68a2 <conv_brk+0xa8>
    689e:	53 94       	inc	r5
    68a0:	e7 cf       	rjmp	.-50     	; 0x6870 <conv_brk+0x76>
    68a2:	5a 94       	dec	r5
    68a4:	e5 cf       	rjmp	.-54     	; 0x6870 <conv_brk+0x76>
    68a6:	31 e0       	ldi	r19, 0x01	; 1
    68a8:	04 c0       	rjmp	.+8      	; 0x68b2 <conv_brk+0xb8>
    68aa:	77 24       	eor	r7, r7
    68ac:	73 94       	inc	r7
    68ae:	01 c0       	rjmp	.+2      	; 0x68b2 <conv_brk+0xb8>
    68b0:	71 2c       	mov	r7, r1
    68b2:	01 96       	adiw	r24, 0x01	; 1
    68b4:	bf cf       	rjmp	.-130    	; 0x6834 <conv_brk+0x3a>
    68b6:	77 20       	and	r7, r7
    68b8:	19 f0       	breq	.+6      	; 0x68c0 <conv_brk+0xc6>
    68ba:	8e 81       	ldd	r24, Y+6	; 0x06
    68bc:	80 62       	ori	r24, 0x20	; 32
    68be:	8e 83       	std	Y+6, r24	; 0x06
    68c0:	31 11       	cpse	r19, r1
    68c2:	03 c0       	rjmp	.+6      	; 0x68ca <conv_brk+0xd0>
    68c4:	88 24       	eor	r8, r8
    68c6:	83 94       	inc	r8
    68c8:	17 c0       	rjmp	.+46     	; 0x68f8 <conv_brk+0xfe>
    68ca:	f6 01       	movw	r30, r12
    68cc:	9e 01       	movw	r18, r28
    68ce:	2f 5d       	subi	r18, 0xDF	; 223
    68d0:	3f 4f       	sbci	r19, 0xFF	; 255
    68d2:	80 81       	ld	r24, Z
    68d4:	80 95       	com	r24
    68d6:	81 93       	st	Z+, r24
    68d8:	2e 17       	cp	r18, r30
    68da:	3f 07       	cpc	r19, r31
    68dc:	d1 f7       	brne	.-12     	; 0x68d2 <conv_brk+0xd8>
    68de:	f2 cf       	rjmp	.-28     	; 0x68c4 <conv_brk+0xca>
    68e0:	e1 14       	cp	r14, r1
    68e2:	f1 04       	cpc	r15, r1
    68e4:	29 f0       	breq	.+10     	; 0x68f0 <conv_brk+0xf6>
    68e6:	d7 01       	movw	r26, r14
    68e8:	8c 93       	st	X, r24
    68ea:	f7 01       	movw	r30, r14
    68ec:	31 96       	adiw	r30, 0x01	; 1
    68ee:	7f 01       	movw	r14, r30
    68f0:	9a 94       	dec	r9
    68f2:	81 2c       	mov	r8, r1
    68f4:	99 20       	and	r9, r9
    68f6:	f9 f0       	breq	.+62     	; 0x6936 <conv_brk+0x13c>
    68f8:	c5 01       	movw	r24, r10
    68fa:	0e 94 38 38 	call	0x7070	; 0x7070 <fgetc>
    68fe:	97 fd       	sbrc	r25, 7
    6900:	18 c0       	rjmp	.+48     	; 0x6932 <conv_brk+0x138>
    6902:	fc 01       	movw	r30, r24
    6904:	ff 27       	eor	r31, r31
    6906:	23 e0       	ldi	r18, 0x03	; 3
    6908:	f5 95       	asr	r31
    690a:	e7 95       	ror	r30
    690c:	2a 95       	dec	r18
    690e:	e1 f7       	brne	.-8      	; 0x6908 <conv_brk+0x10e>
    6910:	ec 0d       	add	r30, r12
    6912:	fd 1d       	adc	r31, r13
    6914:	20 81       	ld	r18, Z
    6916:	30 e0       	ldi	r19, 0x00	; 0
    6918:	ac 01       	movw	r20, r24
    691a:	47 70       	andi	r20, 0x07	; 7
    691c:	55 27       	eor	r21, r21
    691e:	02 c0       	rjmp	.+4      	; 0x6924 <conv_brk+0x12a>
    6920:	35 95       	asr	r19
    6922:	27 95       	ror	r18
    6924:	4a 95       	dec	r20
    6926:	e2 f7       	brpl	.-8      	; 0x6920 <conv_brk+0x126>
    6928:	20 fd       	sbrc	r18, 0
    692a:	da cf       	rjmp	.-76     	; 0x68e0 <conv_brk+0xe6>
    692c:	b5 01       	movw	r22, r10
    692e:	0e 94 b2 38 	call	0x7164	; 0x7164 <ungetc>
    6932:	81 10       	cpse	r8, r1
    6934:	87 cf       	rjmp	.-242    	; 0x6844 <conv_brk+0x4a>
    6936:	e1 14       	cp	r14, r1
    6938:	f1 04       	cpc	r15, r1
    693a:	11 f0       	breq	.+4      	; 0x6940 <conv_brk+0x146>
    693c:	d7 01       	movw	r26, r14
    693e:	1c 92       	st	X, r1
    6940:	c8 01       	movw	r24, r16
    6942:	15 c0       	rjmp	.+42     	; 0x696e <conv_brk+0x174>
    6944:	42 2f       	mov	r20, r18
    6946:	46 95       	lsr	r20
    6948:	46 95       	lsr	r20
    694a:	46 95       	lsr	r20
    694c:	d6 01       	movw	r26, r12
    694e:	a4 0f       	add	r26, r20
    6950:	b1 1d       	adc	r27, r1
    6952:	42 2f       	mov	r20, r18
    6954:	47 70       	andi	r20, 0x07	; 7
    6956:	8b 01       	movw	r16, r22
    6958:	02 c0       	rjmp	.+4      	; 0x695e <conv_brk+0x164>
    695a:	00 0f       	add	r16, r16
    695c:	11 1f       	adc	r17, r17
    695e:	4a 95       	dec	r20
    6960:	e2 f7       	brpl	.-8      	; 0x695a <conv_brk+0x160>
    6962:	a8 01       	movw	r20, r16
    6964:	5c 91       	ld	r21, X
    6966:	45 2b       	or	r20, r21
    6968:	4c 93       	st	X, r20
    696a:	62 2e       	mov	r6, r18
    696c:	a2 cf       	rjmp	.-188    	; 0x68b2 <conv_brk+0xb8>
    696e:	a0 96       	adiw	r28, 0x20	; 32
    6970:	ef e0       	ldi	r30, 0x0F	; 15
    6972:	0c 94 29 2f 	jmp	0x5e52	; 0x5e52 <__epilogue_restores__+0x6>

00006976 <vfscanf>:
    6976:	a0 e0       	ldi	r26, 0x00	; 0
    6978:	b0 e0       	ldi	r27, 0x00	; 0
    697a:	e1 ec       	ldi	r30, 0xC1	; 193
    697c:	f4 e3       	ldi	r31, 0x34	; 52
    697e:	0c 94 0d 2f 	jmp	0x5e1a	; 0x5e1a <__prologue_saves__+0x6>
    6982:	6c 01       	movw	r12, r24
    6984:	eb 01       	movw	r28, r22
    6986:	5a 01       	movw	r10, r20
    6988:	fc 01       	movw	r30, r24
    698a:	17 82       	std	Z+7, r1	; 0x07
    698c:	16 82       	std	Z+6, r1	; 0x06
    698e:	51 2c       	mov	r5, r1
    6990:	f6 01       	movw	r30, r12
    6992:	e3 80       	ldd	r14, Z+3	; 0x03
    6994:	fe 01       	movw	r30, r28
    6996:	e3 fc       	sbrc	r14, 3
    6998:	85 91       	lpm	r24, Z+
    699a:	e3 fe       	sbrs	r14, 3
    699c:	81 91       	ld	r24, Z+
    699e:	18 2f       	mov	r17, r24
    69a0:	ef 01       	movw	r28, r30
    69a2:	88 23       	and	r24, r24
    69a4:	09 f4       	brne	.+2      	; 0x69a8 <vfscanf+0x32>
    69a6:	ee c0       	rjmp	.+476    	; 0x6b84 <vfscanf+0x20e>
    69a8:	90 e0       	ldi	r25, 0x00	; 0
    69aa:	0e 94 fe 37 	call	0x6ffc	; 0x6ffc <isspace>
    69ae:	89 2b       	or	r24, r25
    69b0:	21 f0       	breq	.+8      	; 0x69ba <vfscanf+0x44>
    69b2:	c6 01       	movw	r24, r12
    69b4:	0e 94 52 33 	call	0x66a4	; 0x66a4 <skip_spaces>
    69b8:	eb cf       	rjmp	.-42     	; 0x6990 <vfscanf+0x1a>
    69ba:	15 32       	cpi	r17, 0x25	; 37
    69bc:	41 f4       	brne	.+16     	; 0x69ce <vfscanf+0x58>
    69be:	fe 01       	movw	r30, r28
    69c0:	e3 fc       	sbrc	r14, 3
    69c2:	15 91       	lpm	r17, Z+
    69c4:	e3 fe       	sbrs	r14, 3
    69c6:	11 91       	ld	r17, Z+
    69c8:	ef 01       	movw	r28, r30
    69ca:	15 32       	cpi	r17, 0x25	; 37
    69cc:	81 f4       	brne	.+32     	; 0x69ee <vfscanf+0x78>
    69ce:	c6 01       	movw	r24, r12
    69d0:	0e 94 38 38 	call	0x7070	; 0x7070 <fgetc>
    69d4:	97 fd       	sbrc	r25, 7
    69d6:	d4 c0       	rjmp	.+424    	; 0x6b80 <vfscanf+0x20a>
    69d8:	41 2f       	mov	r20, r17
    69da:	50 e0       	ldi	r21, 0x00	; 0
    69dc:	9c 01       	movw	r18, r24
    69de:	33 27       	eor	r19, r19
    69e0:	24 17       	cp	r18, r20
    69e2:	35 07       	cpc	r19, r21
    69e4:	a9 f2       	breq	.-86     	; 0x6990 <vfscanf+0x1a>
    69e6:	b6 01       	movw	r22, r12
    69e8:	0e 94 b2 38 	call	0x7164	; 0x7164 <ungetc>
    69ec:	cb c0       	rjmp	.+406    	; 0x6b84 <vfscanf+0x20e>
    69ee:	1a 32       	cpi	r17, 0x2A	; 42
    69f0:	39 f4       	brne	.+14     	; 0x6a00 <vfscanf+0x8a>
    69f2:	e3 fc       	sbrc	r14, 3
    69f4:	15 91       	lpm	r17, Z+
    69f6:	e3 fe       	sbrs	r14, 3
    69f8:	11 91       	ld	r17, Z+
    69fa:	ef 01       	movw	r28, r30
    69fc:	01 e0       	ldi	r16, 0x01	; 1
    69fe:	01 c0       	rjmp	.+2      	; 0x6a02 <vfscanf+0x8c>
    6a00:	00 e0       	ldi	r16, 0x00	; 0
    6a02:	f1 2c       	mov	r15, r1
    6a04:	20 ed       	ldi	r18, 0xD0	; 208
    6a06:	21 0f       	add	r18, r17
    6a08:	2a 30       	cpi	r18, 0x0A	; 10
    6a0a:	80 f4       	brcc	.+32     	; 0x6a2c <vfscanf+0xb6>
    6a0c:	02 60       	ori	r16, 0x02	; 2
    6a0e:	6f 2d       	mov	r22, r15
    6a10:	70 e0       	ldi	r23, 0x00	; 0
    6a12:	80 e0       	ldi	r24, 0x00	; 0
    6a14:	90 e0       	ldi	r25, 0x00	; 0
    6a16:	40 e2       	ldi	r20, 0x20	; 32
    6a18:	0e 94 2b 33 	call	0x6656	; 0x6656 <mulacc>
    6a1c:	f6 2e       	mov	r15, r22
    6a1e:	fe 01       	movw	r30, r28
    6a20:	e3 fc       	sbrc	r14, 3
    6a22:	15 91       	lpm	r17, Z+
    6a24:	e3 fe       	sbrs	r14, 3
    6a26:	11 91       	ld	r17, Z+
    6a28:	ef 01       	movw	r28, r30
    6a2a:	ec cf       	rjmp	.-40     	; 0x6a04 <vfscanf+0x8e>
    6a2c:	01 ff       	sbrs	r16, 1
    6a2e:	03 c0       	rjmp	.+6      	; 0x6a36 <vfscanf+0xc0>
    6a30:	f1 10       	cpse	r15, r1
    6a32:	03 c0       	rjmp	.+6      	; 0x6a3a <vfscanf+0xc4>
    6a34:	a7 c0       	rjmp	.+334    	; 0x6b84 <vfscanf+0x20e>
    6a36:	ff 24       	eor	r15, r15
    6a38:	fa 94       	dec	r15
    6a3a:	18 36       	cpi	r17, 0x68	; 104
    6a3c:	19 f0       	breq	.+6      	; 0x6a44 <vfscanf+0xce>
    6a3e:	1c 36       	cpi	r17, 0x6C	; 108
    6a40:	51 f0       	breq	.+20     	; 0x6a56 <vfscanf+0xe0>
    6a42:	10 c0       	rjmp	.+32     	; 0x6a64 <vfscanf+0xee>
    6a44:	fe 01       	movw	r30, r28
    6a46:	e3 fc       	sbrc	r14, 3
    6a48:	15 91       	lpm	r17, Z+
    6a4a:	e3 fe       	sbrs	r14, 3
    6a4c:	11 91       	ld	r17, Z+
    6a4e:	ef 01       	movw	r28, r30
    6a50:	18 36       	cpi	r17, 0x68	; 104
    6a52:	41 f4       	brne	.+16     	; 0x6a64 <vfscanf+0xee>
    6a54:	08 60       	ori	r16, 0x08	; 8
    6a56:	04 60       	ori	r16, 0x04	; 4
    6a58:	fe 01       	movw	r30, r28
    6a5a:	e3 fc       	sbrc	r14, 3
    6a5c:	15 91       	lpm	r17, Z+
    6a5e:	e3 fe       	sbrs	r14, 3
    6a60:	11 91       	ld	r17, Z+
    6a62:	ef 01       	movw	r28, r30
    6a64:	11 23       	and	r17, r17
    6a66:	09 f4       	brne	.+2      	; 0x6a6a <vfscanf+0xf4>
    6a68:	8d c0       	rjmp	.+282    	; 0x6b84 <vfscanf+0x20e>
    6a6a:	61 2f       	mov	r22, r17
    6a6c:	70 e0       	ldi	r23, 0x00	; 0
    6a6e:	86 ed       	ldi	r24, 0xD6	; 214
    6a70:	90 e0       	ldi	r25, 0x00	; 0
    6a72:	0e 94 07 38 	call	0x700e	; 0x700e <strchr_P>
    6a76:	89 2b       	or	r24, r25
    6a78:	09 f4       	brne	.+2      	; 0x6a7c <vfscanf+0x106>
    6a7a:	84 c0       	rjmp	.+264    	; 0x6b84 <vfscanf+0x20e>
    6a7c:	00 fd       	sbrc	r16, 0
    6a7e:	07 c0       	rjmp	.+14     	; 0x6a8e <vfscanf+0x118>
    6a80:	f5 01       	movw	r30, r10
    6a82:	80 80       	ld	r8, Z
    6a84:	91 80       	ldd	r9, Z+1	; 0x01
    6a86:	c5 01       	movw	r24, r10
    6a88:	02 96       	adiw	r24, 0x02	; 2
    6a8a:	5c 01       	movw	r10, r24
    6a8c:	02 c0       	rjmp	.+4      	; 0x6a92 <vfscanf+0x11c>
    6a8e:	81 2c       	mov	r8, r1
    6a90:	91 2c       	mov	r9, r1
    6a92:	1e 36       	cpi	r17, 0x6E	; 110
    6a94:	51 f4       	brne	.+20     	; 0x6aaa <vfscanf+0x134>
    6a96:	f6 01       	movw	r30, r12
    6a98:	46 81       	ldd	r20, Z+6	; 0x06
    6a9a:	57 81       	ldd	r21, Z+7	; 0x07
    6a9c:	60 e0       	ldi	r22, 0x00	; 0
    6a9e:	70 e0       	ldi	r23, 0x00	; 0
    6aa0:	20 2f       	mov	r18, r16
    6aa2:	c4 01       	movw	r24, r8
    6aa4:	0e 94 1f 33 	call	0x663e	; 0x663e <putval>
    6aa8:	73 cf       	rjmp	.-282    	; 0x6990 <vfscanf+0x1a>
    6aaa:	13 36       	cpi	r17, 0x63	; 99
    6aac:	a9 f4       	brne	.+42     	; 0x6ad8 <vfscanf+0x162>
    6aae:	01 fd       	sbrc	r16, 1
    6ab0:	02 c0       	rjmp	.+4      	; 0x6ab6 <vfscanf+0x140>
    6ab2:	ff 24       	eor	r15, r15
    6ab4:	f3 94       	inc	r15
    6ab6:	c6 01       	movw	r24, r12
    6ab8:	0e 94 38 38 	call	0x7070	; 0x7070 <fgetc>
    6abc:	97 fd       	sbrc	r25, 7
    6abe:	60 c0       	rjmp	.+192    	; 0x6b80 <vfscanf+0x20a>
    6ac0:	81 14       	cp	r8, r1
    6ac2:	91 04       	cpc	r9, r1
    6ac4:	29 f0       	breq	.+10     	; 0x6ad0 <vfscanf+0x15a>
    6ac6:	f4 01       	movw	r30, r8
    6ac8:	80 83       	st	Z, r24
    6aca:	c4 01       	movw	r24, r8
    6acc:	01 96       	adiw	r24, 0x01	; 1
    6ace:	4c 01       	movw	r8, r24
    6ad0:	fa 94       	dec	r15
    6ad2:	f1 10       	cpse	r15, r1
    6ad4:	f0 cf       	rjmp	.-32     	; 0x6ab6 <vfscanf+0x140>
    6ad6:	50 c0       	rjmp	.+160    	; 0x6b78 <vfscanf+0x202>
    6ad8:	1b 35       	cpi	r17, 0x5B	; 91
    6ada:	59 f4       	brne	.+22     	; 0x6af2 <vfscanf+0x17c>
    6adc:	9e 01       	movw	r18, r28
    6ade:	a4 01       	movw	r20, r8
    6ae0:	6f 2d       	mov	r22, r15
    6ae2:	c6 01       	movw	r24, r12
    6ae4:	0e 94 fd 33 	call	0x67fa	; 0x67fa <conv_brk>
    6ae8:	ec 01       	movw	r28, r24
    6aea:	89 2b       	or	r24, r25
    6aec:	09 f0       	breq	.+2      	; 0x6af0 <vfscanf+0x17a>
    6aee:	44 c0       	rjmp	.+136    	; 0x6b78 <vfscanf+0x202>
    6af0:	3e c0       	rjmp	.+124    	; 0x6b6e <vfscanf+0x1f8>
    6af2:	c6 01       	movw	r24, r12
    6af4:	0e 94 52 33 	call	0x66a4	; 0x66a4 <skip_spaces>
    6af8:	97 fd       	sbrc	r25, 7
    6afa:	42 c0       	rjmp	.+132    	; 0x6b80 <vfscanf+0x20a>
    6afc:	1f 36       	cpi	r17, 0x6F	; 111
    6afe:	61 f1       	breq	.+88     	; 0x6b58 <vfscanf+0x1e2>
    6b00:	28 f4       	brcc	.+10     	; 0x6b0c <vfscanf+0x196>
    6b02:	14 36       	cpi	r17, 0x64	; 100
    6b04:	39 f1       	breq	.+78     	; 0x6b54 <vfscanf+0x1de>
    6b06:	19 36       	cpi	r17, 0x69	; 105
    6b08:	51 f1       	breq	.+84     	; 0x6b5e <vfscanf+0x1e8>
    6b0a:	28 c0       	rjmp	.+80     	; 0x6b5c <vfscanf+0x1e6>
    6b0c:	13 37       	cpi	r17, 0x73	; 115
    6b0e:	71 f0       	breq	.+28     	; 0x6b2c <vfscanf+0x1b6>
    6b10:	15 37       	cpi	r17, 0x75	; 117
    6b12:	01 f1       	breq	.+64     	; 0x6b54 <vfscanf+0x1de>
    6b14:	23 c0       	rjmp	.+70     	; 0x6b5c <vfscanf+0x1e6>
    6b16:	81 14       	cp	r8, r1
    6b18:	91 04       	cpc	r9, r1
    6b1a:	29 f0       	breq	.+10     	; 0x6b26 <vfscanf+0x1b0>
    6b1c:	f4 01       	movw	r30, r8
    6b1e:	60 82       	st	Z, r6
    6b20:	c4 01       	movw	r24, r8
    6b22:	01 96       	adiw	r24, 0x01	; 1
    6b24:	4c 01       	movw	r8, r24
    6b26:	fa 94       	dec	r15
    6b28:	ff 20       	and	r15, r15
    6b2a:	71 f0       	breq	.+28     	; 0x6b48 <vfscanf+0x1d2>
    6b2c:	c6 01       	movw	r24, r12
    6b2e:	0e 94 38 38 	call	0x7070	; 0x7070 <fgetc>
    6b32:	3c 01       	movw	r6, r24
    6b34:	97 fd       	sbrc	r25, 7
    6b36:	08 c0       	rjmp	.+16     	; 0x6b48 <vfscanf+0x1d2>
    6b38:	0e 94 fe 37 	call	0x6ffc	; 0x6ffc <isspace>
    6b3c:	89 2b       	or	r24, r25
    6b3e:	59 f3       	breq	.-42     	; 0x6b16 <vfscanf+0x1a0>
    6b40:	b6 01       	movw	r22, r12
    6b42:	c3 01       	movw	r24, r6
    6b44:	0e 94 b2 38 	call	0x7164	; 0x7164 <ungetc>
    6b48:	81 14       	cp	r8, r1
    6b4a:	91 04       	cpc	r9, r1
    6b4c:	a9 f0       	breq	.+42     	; 0x6b78 <vfscanf+0x202>
    6b4e:	f4 01       	movw	r30, r8
    6b50:	10 82       	st	Z, r1
    6b52:	12 c0       	rjmp	.+36     	; 0x6b78 <vfscanf+0x202>
    6b54:	00 62       	ori	r16, 0x20	; 32
    6b56:	03 c0       	rjmp	.+6      	; 0x6b5e <vfscanf+0x1e8>
    6b58:	00 61       	ori	r16, 0x10	; 16
    6b5a:	01 c0       	rjmp	.+2      	; 0x6b5e <vfscanf+0x1e8>
    6b5c:	00 64       	ori	r16, 0x40	; 64
    6b5e:	20 2f       	mov	r18, r16
    6b60:	a4 01       	movw	r20, r8
    6b62:	6f 2d       	mov	r22, r15
    6b64:	c6 01       	movw	r24, r12
    6b66:	0e 94 6b 33 	call	0x66d6	; 0x66d6 <conv_int>
    6b6a:	81 11       	cpse	r24, r1
    6b6c:	05 c0       	rjmp	.+10     	; 0x6b78 <vfscanf+0x202>
    6b6e:	f6 01       	movw	r30, r12
    6b70:	83 81       	ldd	r24, Z+3	; 0x03
    6b72:	80 73       	andi	r24, 0x30	; 48
    6b74:	29 f4       	brne	.+10     	; 0x6b80 <vfscanf+0x20a>
    6b76:	06 c0       	rjmp	.+12     	; 0x6b84 <vfscanf+0x20e>
    6b78:	00 fd       	sbrc	r16, 0
    6b7a:	0a cf       	rjmp	.-492    	; 0x6990 <vfscanf+0x1a>
    6b7c:	53 94       	inc	r5
    6b7e:	08 cf       	rjmp	.-496    	; 0x6990 <vfscanf+0x1a>
    6b80:	55 20       	and	r5, r5
    6b82:	19 f0       	breq	.+6      	; 0x6b8a <vfscanf+0x214>
    6b84:	85 2d       	mov	r24, r5
    6b86:	90 e0       	ldi	r25, 0x00	; 0
    6b88:	02 c0       	rjmp	.+4      	; 0x6b8e <vfscanf+0x218>
    6b8a:	8f ef       	ldi	r24, 0xFF	; 255
    6b8c:	9f ef       	ldi	r25, 0xFF	; 255
    6b8e:	cd b7       	in	r28, 0x3d	; 61
    6b90:	de b7       	in	r29, 0x3e	; 62
    6b92:	ef e0       	ldi	r30, 0x0F	; 15
    6b94:	0c 94 29 2f 	jmp	0x5e52	; 0x5e52 <__epilogue_restores__+0x6>

00006b98 <dtoa_prf>:
    6b98:	a9 e0       	ldi	r26, 0x09	; 9
    6b9a:	b0 e0       	ldi	r27, 0x00	; 0
    6b9c:	e2 ed       	ldi	r30, 0xD2	; 210
    6b9e:	f5 e3       	ldi	r31, 0x35	; 53
    6ba0:	0c 94 10 2f 	jmp	0x5e20	; 0x5e20 <__prologue_saves__+0xc>
    6ba4:	6a 01       	movw	r12, r20
    6ba6:	12 2f       	mov	r17, r18
    6ba8:	b0 2e       	mov	r11, r16
    6baa:	2b e3       	ldi	r18, 0x3B	; 59
    6bac:	20 17       	cp	r18, r16
    6bae:	20 f0       	brcs	.+8      	; 0x6bb8 <dtoa_prf+0x20>
    6bb0:	ff 24       	eor	r15, r15
    6bb2:	f3 94       	inc	r15
    6bb4:	f0 0e       	add	r15, r16
    6bb6:	02 c0       	rjmp	.+4      	; 0x6bbc <dtoa_prf+0x24>
    6bb8:	2c e3       	ldi	r18, 0x3C	; 60
    6bba:	f2 2e       	mov	r15, r18
    6bbc:	0f 2d       	mov	r16, r15
    6bbe:	27 e0       	ldi	r18, 0x07	; 7
    6bc0:	ae 01       	movw	r20, r28
    6bc2:	4f 5f       	subi	r20, 0xFF	; 255
    6bc4:	5f 4f       	sbci	r21, 0xFF	; 255
    6bc6:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <__ftoa_engine>
    6bca:	bc 01       	movw	r22, r24
    6bcc:	49 81       	ldd	r20, Y+1	; 0x01
    6bce:	84 2f       	mov	r24, r20
    6bd0:	89 70       	andi	r24, 0x09	; 9
    6bd2:	81 30       	cpi	r24, 0x01	; 1
    6bd4:	31 f0       	breq	.+12     	; 0x6be2 <dtoa_prf+0x4a>
    6bd6:	e1 fc       	sbrc	r14, 1
    6bd8:	06 c0       	rjmp	.+12     	; 0x6be6 <dtoa_prf+0x4e>
    6bda:	e0 fe       	sbrs	r14, 0
    6bdc:	06 c0       	rjmp	.+12     	; 0x6bea <dtoa_prf+0x52>
    6bde:	90 e2       	ldi	r25, 0x20	; 32
    6be0:	05 c0       	rjmp	.+10     	; 0x6bec <dtoa_prf+0x54>
    6be2:	9d e2       	ldi	r25, 0x2D	; 45
    6be4:	03 c0       	rjmp	.+6      	; 0x6bec <dtoa_prf+0x54>
    6be6:	9b e2       	ldi	r25, 0x2B	; 43
    6be8:	01 c0       	rjmp	.+2      	; 0x6bec <dtoa_prf+0x54>
    6bea:	90 e0       	ldi	r25, 0x00	; 0
    6bec:	5e 2d       	mov	r21, r14
    6bee:	50 71       	andi	r21, 0x10	; 16
    6bf0:	43 ff       	sbrs	r20, 3
    6bf2:	3c c0       	rjmp	.+120    	; 0x6c6c <dtoa_prf+0xd4>
    6bf4:	91 11       	cpse	r25, r1
    6bf6:	02 c0       	rjmp	.+4      	; 0x6bfc <dtoa_prf+0x64>
    6bf8:	83 e0       	ldi	r24, 0x03	; 3
    6bfa:	01 c0       	rjmp	.+2      	; 0x6bfe <dtoa_prf+0x66>
    6bfc:	84 e0       	ldi	r24, 0x04	; 4
    6bfe:	81 17       	cp	r24, r17
    6c00:	18 f4       	brcc	.+6      	; 0x6c08 <dtoa_prf+0x70>
    6c02:	21 2f       	mov	r18, r17
    6c04:	28 1b       	sub	r18, r24
    6c06:	01 c0       	rjmp	.+2      	; 0x6c0a <dtoa_prf+0x72>
    6c08:	20 e0       	ldi	r18, 0x00	; 0
    6c0a:	51 11       	cpse	r21, r1
    6c0c:	0b c0       	rjmp	.+22     	; 0x6c24 <dtoa_prf+0x8c>
    6c0e:	f6 01       	movw	r30, r12
    6c10:	82 2f       	mov	r24, r18
    6c12:	30 e2       	ldi	r19, 0x20	; 32
    6c14:	88 23       	and	r24, r24
    6c16:	19 f0       	breq	.+6      	; 0x6c1e <dtoa_prf+0x86>
    6c18:	31 93       	st	Z+, r19
    6c1a:	81 50       	subi	r24, 0x01	; 1
    6c1c:	fb cf       	rjmp	.-10     	; 0x6c14 <dtoa_prf+0x7c>
    6c1e:	c2 0e       	add	r12, r18
    6c20:	d1 1c       	adc	r13, r1
    6c22:	20 e0       	ldi	r18, 0x00	; 0
    6c24:	99 23       	and	r25, r25
    6c26:	29 f0       	breq	.+10     	; 0x6c32 <dtoa_prf+0x9a>
    6c28:	d6 01       	movw	r26, r12
    6c2a:	9c 93       	st	X, r25
    6c2c:	f6 01       	movw	r30, r12
    6c2e:	31 96       	adiw	r30, 0x01	; 1
    6c30:	6f 01       	movw	r12, r30
    6c32:	c6 01       	movw	r24, r12
    6c34:	03 96       	adiw	r24, 0x03	; 3
    6c36:	e2 fe       	sbrs	r14, 2
    6c38:	0a c0       	rjmp	.+20     	; 0x6c4e <dtoa_prf+0xb6>
    6c3a:	3e e4       	ldi	r19, 0x4E	; 78
    6c3c:	d6 01       	movw	r26, r12
    6c3e:	3c 93       	st	X, r19
    6c40:	41 e4       	ldi	r20, 0x41	; 65
    6c42:	11 96       	adiw	r26, 0x01	; 1
    6c44:	4c 93       	st	X, r20
    6c46:	11 97       	sbiw	r26, 0x01	; 1
    6c48:	12 96       	adiw	r26, 0x02	; 2
    6c4a:	3c 93       	st	X, r19
    6c4c:	06 c0       	rjmp	.+12     	; 0x6c5a <dtoa_prf+0xc2>
    6c4e:	3e e6       	ldi	r19, 0x6E	; 110
    6c50:	f6 01       	movw	r30, r12
    6c52:	30 83       	st	Z, r19
    6c54:	41 e6       	ldi	r20, 0x61	; 97
    6c56:	41 83       	std	Z+1, r20	; 0x01
    6c58:	32 83       	std	Z+2, r19	; 0x02
    6c5a:	fc 01       	movw	r30, r24
    6c5c:	32 2f       	mov	r19, r18
    6c5e:	40 e2       	ldi	r20, 0x20	; 32
    6c60:	33 23       	and	r19, r19
    6c62:	09 f4       	brne	.+2      	; 0x6c66 <dtoa_prf+0xce>
    6c64:	42 c0       	rjmp	.+132    	; 0x6cea <dtoa_prf+0x152>
    6c66:	41 93       	st	Z+, r20
    6c68:	31 50       	subi	r19, 0x01	; 1
    6c6a:	fa cf       	rjmp	.-12     	; 0x6c60 <dtoa_prf+0xc8>
    6c6c:	42 ff       	sbrs	r20, 2
    6c6e:	44 c0       	rjmp	.+136    	; 0x6cf8 <dtoa_prf+0x160>
    6c70:	91 11       	cpse	r25, r1
    6c72:	02 c0       	rjmp	.+4      	; 0x6c78 <dtoa_prf+0xe0>
    6c74:	83 e0       	ldi	r24, 0x03	; 3
    6c76:	01 c0       	rjmp	.+2      	; 0x6c7a <dtoa_prf+0xe2>
    6c78:	84 e0       	ldi	r24, 0x04	; 4
    6c7a:	81 17       	cp	r24, r17
    6c7c:	18 f4       	brcc	.+6      	; 0x6c84 <dtoa_prf+0xec>
    6c7e:	21 2f       	mov	r18, r17
    6c80:	28 1b       	sub	r18, r24
    6c82:	01 c0       	rjmp	.+2      	; 0x6c86 <dtoa_prf+0xee>
    6c84:	20 e0       	ldi	r18, 0x00	; 0
    6c86:	51 11       	cpse	r21, r1
    6c88:	0b c0       	rjmp	.+22     	; 0x6ca0 <dtoa_prf+0x108>
    6c8a:	f6 01       	movw	r30, r12
    6c8c:	82 2f       	mov	r24, r18
    6c8e:	30 e2       	ldi	r19, 0x20	; 32
    6c90:	88 23       	and	r24, r24
    6c92:	19 f0       	breq	.+6      	; 0x6c9a <dtoa_prf+0x102>
    6c94:	31 93       	st	Z+, r19
    6c96:	81 50       	subi	r24, 0x01	; 1
    6c98:	fb cf       	rjmp	.-10     	; 0x6c90 <dtoa_prf+0xf8>
    6c9a:	c2 0e       	add	r12, r18
    6c9c:	d1 1c       	adc	r13, r1
    6c9e:	20 e0       	ldi	r18, 0x00	; 0
    6ca0:	99 23       	and	r25, r25
    6ca2:	29 f0       	breq	.+10     	; 0x6cae <dtoa_prf+0x116>
    6ca4:	d6 01       	movw	r26, r12
    6ca6:	9c 93       	st	X, r25
    6ca8:	f6 01       	movw	r30, r12
    6caa:	31 96       	adiw	r30, 0x01	; 1
    6cac:	6f 01       	movw	r12, r30
    6cae:	c6 01       	movw	r24, r12
    6cb0:	03 96       	adiw	r24, 0x03	; 3
    6cb2:	e2 fe       	sbrs	r14, 2
    6cb4:	0b c0       	rjmp	.+22     	; 0x6ccc <dtoa_prf+0x134>
    6cb6:	39 e4       	ldi	r19, 0x49	; 73
    6cb8:	d6 01       	movw	r26, r12
    6cba:	3c 93       	st	X, r19
    6cbc:	3e e4       	ldi	r19, 0x4E	; 78
    6cbe:	11 96       	adiw	r26, 0x01	; 1
    6cc0:	3c 93       	st	X, r19
    6cc2:	11 97       	sbiw	r26, 0x01	; 1
    6cc4:	36 e4       	ldi	r19, 0x46	; 70
    6cc6:	12 96       	adiw	r26, 0x02	; 2
    6cc8:	3c 93       	st	X, r19
    6cca:	07 c0       	rjmp	.+14     	; 0x6cda <dtoa_prf+0x142>
    6ccc:	39 e6       	ldi	r19, 0x69	; 105
    6cce:	f6 01       	movw	r30, r12
    6cd0:	30 83       	st	Z, r19
    6cd2:	3e e6       	ldi	r19, 0x6E	; 110
    6cd4:	31 83       	std	Z+1, r19	; 0x01
    6cd6:	36 e6       	ldi	r19, 0x66	; 102
    6cd8:	32 83       	std	Z+2, r19	; 0x02
    6cda:	fc 01       	movw	r30, r24
    6cdc:	32 2f       	mov	r19, r18
    6cde:	40 e2       	ldi	r20, 0x20	; 32
    6ce0:	33 23       	and	r19, r19
    6ce2:	19 f0       	breq	.+6      	; 0x6cea <dtoa_prf+0x152>
    6ce4:	41 93       	st	Z+, r20
    6ce6:	31 50       	subi	r19, 0x01	; 1
    6ce8:	fb cf       	rjmp	.-10     	; 0x6ce0 <dtoa_prf+0x148>
    6cea:	fc 01       	movw	r30, r24
    6cec:	e2 0f       	add	r30, r18
    6cee:	f1 1d       	adc	r31, r1
    6cf0:	10 82       	st	Z, r1
    6cf2:	8e ef       	ldi	r24, 0xFE	; 254
    6cf4:	9f ef       	ldi	r25, 0xFF	; 255
    6cf6:	a6 c0       	rjmp	.+332    	; 0x6e44 <dtoa_prf+0x2ac>
    6cf8:	21 e0       	ldi	r18, 0x01	; 1
    6cfa:	30 e0       	ldi	r19, 0x00	; 0
    6cfc:	91 11       	cpse	r25, r1
    6cfe:	02 c0       	rjmp	.+4      	; 0x6d04 <dtoa_prf+0x16c>
    6d00:	20 e0       	ldi	r18, 0x00	; 0
    6d02:	30 e0       	ldi	r19, 0x00	; 0
    6d04:	16 16       	cp	r1, r22
    6d06:	17 06       	cpc	r1, r23
    6d08:	1c f4       	brge	.+6      	; 0x6d10 <dtoa_prf+0x178>
    6d0a:	fb 01       	movw	r30, r22
    6d0c:	31 96       	adiw	r30, 0x01	; 1
    6d0e:	02 c0       	rjmp	.+4      	; 0x6d14 <dtoa_prf+0x17c>
    6d10:	e1 e0       	ldi	r30, 0x01	; 1
    6d12:	f0 e0       	ldi	r31, 0x00	; 0
    6d14:	2e 0f       	add	r18, r30
    6d16:	3f 1f       	adc	r19, r31
    6d18:	bb 20       	and	r11, r11
    6d1a:	21 f0       	breq	.+8      	; 0x6d24 <dtoa_prf+0x18c>
    6d1c:	eb 2d       	mov	r30, r11
    6d1e:	f0 e0       	ldi	r31, 0x00	; 0
    6d20:	31 96       	adiw	r30, 0x01	; 1
    6d22:	02 c0       	rjmp	.+4      	; 0x6d28 <dtoa_prf+0x190>
    6d24:	e0 e0       	ldi	r30, 0x00	; 0
    6d26:	f0 e0       	ldi	r31, 0x00	; 0
    6d28:	2e 0f       	add	r18, r30
    6d2a:	3f 1f       	adc	r19, r31
    6d2c:	e1 2f       	mov	r30, r17
    6d2e:	f0 e0       	ldi	r31, 0x00	; 0
    6d30:	2e 17       	cp	r18, r30
    6d32:	3f 07       	cpc	r19, r31
    6d34:	1c f4       	brge	.+6      	; 0x6d3c <dtoa_prf+0x1a4>
    6d36:	12 1b       	sub	r17, r18
    6d38:	21 2f       	mov	r18, r17
    6d3a:	01 c0       	rjmp	.+2      	; 0x6d3e <dtoa_prf+0x1a6>
    6d3c:	20 e0       	ldi	r18, 0x00	; 0
    6d3e:	8e 2d       	mov	r24, r14
    6d40:	88 71       	andi	r24, 0x18	; 24
    6d42:	59 f4       	brne	.+22     	; 0x6d5a <dtoa_prf+0x1c2>
    6d44:	f6 01       	movw	r30, r12
    6d46:	82 2f       	mov	r24, r18
    6d48:	30 e2       	ldi	r19, 0x20	; 32
    6d4a:	88 23       	and	r24, r24
    6d4c:	19 f0       	breq	.+6      	; 0x6d54 <dtoa_prf+0x1bc>
    6d4e:	31 93       	st	Z+, r19
    6d50:	81 50       	subi	r24, 0x01	; 1
    6d52:	fb cf       	rjmp	.-10     	; 0x6d4a <dtoa_prf+0x1b2>
    6d54:	c2 0e       	add	r12, r18
    6d56:	d1 1c       	adc	r13, r1
    6d58:	20 e0       	ldi	r18, 0x00	; 0
    6d5a:	99 23       	and	r25, r25
    6d5c:	29 f0       	breq	.+10     	; 0x6d68 <dtoa_prf+0x1d0>
    6d5e:	d6 01       	movw	r26, r12
    6d60:	9c 93       	st	X, r25
    6d62:	f6 01       	movw	r30, r12
    6d64:	31 96       	adiw	r30, 0x01	; 1
    6d66:	6f 01       	movw	r12, r30
    6d68:	51 11       	cpse	r21, r1
    6d6a:	0b c0       	rjmp	.+22     	; 0x6d82 <dtoa_prf+0x1ea>
    6d6c:	f6 01       	movw	r30, r12
    6d6e:	82 2f       	mov	r24, r18
    6d70:	90 e3       	ldi	r25, 0x30	; 48
    6d72:	88 23       	and	r24, r24
    6d74:	19 f0       	breq	.+6      	; 0x6d7c <dtoa_prf+0x1e4>
    6d76:	91 93       	st	Z+, r25
    6d78:	81 50       	subi	r24, 0x01	; 1
    6d7a:	fb cf       	rjmp	.-10     	; 0x6d72 <dtoa_prf+0x1da>
    6d7c:	c2 0e       	add	r12, r18
    6d7e:	d1 1c       	adc	r13, r1
    6d80:	20 e0       	ldi	r18, 0x00	; 0
    6d82:	0f 2d       	mov	r16, r15
    6d84:	06 0f       	add	r16, r22
    6d86:	9a 81       	ldd	r25, Y+2	; 0x02
    6d88:	34 2f       	mov	r19, r20
    6d8a:	30 71       	andi	r19, 0x10	; 16
    6d8c:	44 ff       	sbrs	r20, 4
    6d8e:	03 c0       	rjmp	.+6      	; 0x6d96 <dtoa_prf+0x1fe>
    6d90:	91 33       	cpi	r25, 0x31	; 49
    6d92:	09 f4       	brne	.+2      	; 0x6d96 <dtoa_prf+0x1fe>
    6d94:	01 50       	subi	r16, 0x01	; 1
    6d96:	10 16       	cp	r1, r16
    6d98:	24 f4       	brge	.+8      	; 0x6da2 <dtoa_prf+0x20a>
    6d9a:	09 30       	cpi	r16, 0x09	; 9
    6d9c:	18 f0       	brcs	.+6      	; 0x6da4 <dtoa_prf+0x20c>
    6d9e:	08 e0       	ldi	r16, 0x08	; 8
    6da0:	01 c0       	rjmp	.+2      	; 0x6da4 <dtoa_prf+0x20c>
    6da2:	01 e0       	ldi	r16, 0x01	; 1
    6da4:	ab 01       	movw	r20, r22
    6da6:	77 ff       	sbrs	r23, 7
    6da8:	02 c0       	rjmp	.+4      	; 0x6dae <dtoa_prf+0x216>
    6daa:	40 e0       	ldi	r20, 0x00	; 0
    6dac:	50 e0       	ldi	r21, 0x00	; 0
    6dae:	fb 01       	movw	r30, r22
    6db0:	e4 1b       	sub	r30, r20
    6db2:	f5 0b       	sbc	r31, r21
    6db4:	a1 e0       	ldi	r26, 0x01	; 1
    6db6:	b0 e0       	ldi	r27, 0x00	; 0
    6db8:	ac 0f       	add	r26, r28
    6dba:	bd 1f       	adc	r27, r29
    6dbc:	ea 0f       	add	r30, r26
    6dbe:	fb 1f       	adc	r31, r27
    6dc0:	8e e2       	ldi	r24, 0x2E	; 46
    6dc2:	a8 2e       	mov	r10, r24
    6dc4:	4b 01       	movw	r8, r22
    6dc6:	80 1a       	sub	r8, r16
    6dc8:	91 08       	sbc	r9, r1
    6dca:	0b 2d       	mov	r16, r11
    6dcc:	10 e0       	ldi	r17, 0x00	; 0
    6dce:	11 95       	neg	r17
    6dd0:	01 95       	neg	r16
    6dd2:	11 09       	sbc	r17, r1
    6dd4:	4f 3f       	cpi	r20, 0xFF	; 255
    6dd6:	bf ef       	ldi	r27, 0xFF	; 255
    6dd8:	5b 07       	cpc	r21, r27
    6dda:	21 f4       	brne	.+8      	; 0x6de4 <dtoa_prf+0x24c>
    6ddc:	d6 01       	movw	r26, r12
    6dde:	ac 92       	st	X, r10
    6de0:	11 96       	adiw	r26, 0x01	; 1
    6de2:	6d 01       	movw	r12, r26
    6de4:	64 17       	cp	r22, r20
    6de6:	75 07       	cpc	r23, r21
    6de8:	2c f0       	brlt	.+10     	; 0x6df4 <dtoa_prf+0x25c>
    6dea:	84 16       	cp	r8, r20
    6dec:	95 06       	cpc	r9, r21
    6dee:	14 f4       	brge	.+4      	; 0x6df4 <dtoa_prf+0x25c>
    6df0:	81 81       	ldd	r24, Z+1	; 0x01
    6df2:	01 c0       	rjmp	.+2      	; 0x6df6 <dtoa_prf+0x25e>
    6df4:	80 e3       	ldi	r24, 0x30	; 48
    6df6:	41 50       	subi	r20, 0x01	; 1
    6df8:	51 09       	sbc	r21, r1
    6dfa:	31 96       	adiw	r30, 0x01	; 1
    6dfc:	d6 01       	movw	r26, r12
    6dfe:	11 96       	adiw	r26, 0x01	; 1
    6e00:	7d 01       	movw	r14, r26
    6e02:	40 17       	cp	r20, r16
    6e04:	51 07       	cpc	r21, r17
    6e06:	24 f0       	brlt	.+8      	; 0x6e10 <dtoa_prf+0x278>
    6e08:	d6 01       	movw	r26, r12
    6e0a:	8c 93       	st	X, r24
    6e0c:	67 01       	movw	r12, r14
    6e0e:	e2 cf       	rjmp	.-60     	; 0x6dd4 <dtoa_prf+0x23c>
    6e10:	64 17       	cp	r22, r20
    6e12:	75 07       	cpc	r23, r21
    6e14:	39 f4       	brne	.+14     	; 0x6e24 <dtoa_prf+0x28c>
    6e16:	96 33       	cpi	r25, 0x36	; 54
    6e18:	20 f4       	brcc	.+8      	; 0x6e22 <dtoa_prf+0x28a>
    6e1a:	95 33       	cpi	r25, 0x35	; 53
    6e1c:	19 f4       	brne	.+6      	; 0x6e24 <dtoa_prf+0x28c>
    6e1e:	31 11       	cpse	r19, r1
    6e20:	01 c0       	rjmp	.+2      	; 0x6e24 <dtoa_prf+0x28c>
    6e22:	81 e3       	ldi	r24, 0x31	; 49
    6e24:	f6 01       	movw	r30, r12
    6e26:	80 83       	st	Z, r24
    6e28:	f7 01       	movw	r30, r14
    6e2a:	82 2f       	mov	r24, r18
    6e2c:	90 e2       	ldi	r25, 0x20	; 32
    6e2e:	88 23       	and	r24, r24
    6e30:	19 f0       	breq	.+6      	; 0x6e38 <dtoa_prf+0x2a0>
    6e32:	91 93       	st	Z+, r25
    6e34:	81 50       	subi	r24, 0x01	; 1
    6e36:	fb cf       	rjmp	.-10     	; 0x6e2e <dtoa_prf+0x296>
    6e38:	f7 01       	movw	r30, r14
    6e3a:	e2 0f       	add	r30, r18
    6e3c:	f1 1d       	adc	r31, r1
    6e3e:	10 82       	st	Z, r1
    6e40:	80 e0       	ldi	r24, 0x00	; 0
    6e42:	90 e0       	ldi	r25, 0x00	; 0
    6e44:	29 96       	adiw	r28, 0x09	; 9
    6e46:	ec e0       	ldi	r30, 0x0C	; 12
    6e48:	0c 94 2c 2f 	jmp	0x5e58	; 0x5e58 <__epilogue_restores__+0xc>

00006e4c <__ftoa_engine>:
    6e4c:	28 30       	cpi	r18, 0x08	; 8
    6e4e:	08 f0       	brcs	.+2      	; 0x6e52 <__ftoa_engine+0x6>
    6e50:	27 e0       	ldi	r18, 0x07	; 7
    6e52:	33 27       	eor	r19, r19
    6e54:	da 01       	movw	r26, r20
    6e56:	99 0f       	add	r25, r25
    6e58:	31 1d       	adc	r19, r1
    6e5a:	87 fd       	sbrc	r24, 7
    6e5c:	91 60       	ori	r25, 0x01	; 1
    6e5e:	00 96       	adiw	r24, 0x00	; 0
    6e60:	61 05       	cpc	r22, r1
    6e62:	71 05       	cpc	r23, r1
    6e64:	39 f4       	brne	.+14     	; 0x6e74 <__ftoa_engine+0x28>
    6e66:	32 60       	ori	r19, 0x02	; 2
    6e68:	2e 5f       	subi	r18, 0xFE	; 254
    6e6a:	3d 93       	st	X+, r19
    6e6c:	30 e3       	ldi	r19, 0x30	; 48
    6e6e:	2a 95       	dec	r18
    6e70:	e1 f7       	brne	.-8      	; 0x6e6a <__ftoa_engine+0x1e>
    6e72:	08 95       	ret
    6e74:	9f 3f       	cpi	r25, 0xFF	; 255
    6e76:	30 f0       	brcs	.+12     	; 0x6e84 <__ftoa_engine+0x38>
    6e78:	80 38       	cpi	r24, 0x80	; 128
    6e7a:	71 05       	cpc	r23, r1
    6e7c:	61 05       	cpc	r22, r1
    6e7e:	09 f0       	breq	.+2      	; 0x6e82 <__ftoa_engine+0x36>
    6e80:	3c 5f       	subi	r19, 0xFC	; 252
    6e82:	3c 5f       	subi	r19, 0xFC	; 252
    6e84:	3d 93       	st	X+, r19
    6e86:	91 30       	cpi	r25, 0x01	; 1
    6e88:	08 f0       	brcs	.+2      	; 0x6e8c <__ftoa_engine+0x40>
    6e8a:	80 68       	ori	r24, 0x80	; 128
    6e8c:	91 1d       	adc	r25, r1
    6e8e:	df 93       	push	r29
    6e90:	cf 93       	push	r28
    6e92:	1f 93       	push	r17
    6e94:	0f 93       	push	r16
    6e96:	ff 92       	push	r15
    6e98:	ef 92       	push	r14
    6e9a:	19 2f       	mov	r17, r25
    6e9c:	98 7f       	andi	r25, 0xF8	; 248
    6e9e:	96 95       	lsr	r25
    6ea0:	e9 2f       	mov	r30, r25
    6ea2:	96 95       	lsr	r25
    6ea4:	96 95       	lsr	r25
    6ea6:	e9 0f       	add	r30, r25
    6ea8:	ff 27       	eor	r31, r31
    6eaa:	e4 5c       	subi	r30, 0xC4	; 196
    6eac:	fe 4f       	sbci	r31, 0xFE	; 254
    6eae:	99 27       	eor	r25, r25
    6eb0:	33 27       	eor	r19, r19
    6eb2:	ee 24       	eor	r14, r14
    6eb4:	ff 24       	eor	r15, r15
    6eb6:	a7 01       	movw	r20, r14
    6eb8:	e7 01       	movw	r28, r14
    6eba:	05 90       	lpm	r0, Z+
    6ebc:	08 94       	sec
    6ebe:	07 94       	ror	r0
    6ec0:	28 f4       	brcc	.+10     	; 0x6ecc <__ftoa_engine+0x80>
    6ec2:	36 0f       	add	r19, r22
    6ec4:	e7 1e       	adc	r14, r23
    6ec6:	f8 1e       	adc	r15, r24
    6ec8:	49 1f       	adc	r20, r25
    6eca:	51 1d       	adc	r21, r1
    6ecc:	66 0f       	add	r22, r22
    6ece:	77 1f       	adc	r23, r23
    6ed0:	88 1f       	adc	r24, r24
    6ed2:	99 1f       	adc	r25, r25
    6ed4:	06 94       	lsr	r0
    6ed6:	a1 f7       	brne	.-24     	; 0x6ec0 <__ftoa_engine+0x74>
    6ed8:	05 90       	lpm	r0, Z+
    6eda:	07 94       	ror	r0
    6edc:	28 f4       	brcc	.+10     	; 0x6ee8 <__ftoa_engine+0x9c>
    6ede:	e7 0e       	add	r14, r23
    6ee0:	f8 1e       	adc	r15, r24
    6ee2:	49 1f       	adc	r20, r25
    6ee4:	56 1f       	adc	r21, r22
    6ee6:	c1 1d       	adc	r28, r1
    6ee8:	77 0f       	add	r23, r23
    6eea:	88 1f       	adc	r24, r24
    6eec:	99 1f       	adc	r25, r25
    6eee:	66 1f       	adc	r22, r22
    6ef0:	06 94       	lsr	r0
    6ef2:	a1 f7       	brne	.-24     	; 0x6edc <__ftoa_engine+0x90>
    6ef4:	05 90       	lpm	r0, Z+
    6ef6:	07 94       	ror	r0
    6ef8:	28 f4       	brcc	.+10     	; 0x6f04 <__ftoa_engine+0xb8>
    6efa:	f8 0e       	add	r15, r24
    6efc:	49 1f       	adc	r20, r25
    6efe:	56 1f       	adc	r21, r22
    6f00:	c7 1f       	adc	r28, r23
    6f02:	d1 1d       	adc	r29, r1
    6f04:	88 0f       	add	r24, r24
    6f06:	99 1f       	adc	r25, r25
    6f08:	66 1f       	adc	r22, r22
    6f0a:	77 1f       	adc	r23, r23
    6f0c:	06 94       	lsr	r0
    6f0e:	a1 f7       	brne	.-24     	; 0x6ef8 <__ftoa_engine+0xac>
    6f10:	05 90       	lpm	r0, Z+
    6f12:	07 94       	ror	r0
    6f14:	20 f4       	brcc	.+8      	; 0x6f1e <__ftoa_engine+0xd2>
    6f16:	49 0f       	add	r20, r25
    6f18:	56 1f       	adc	r21, r22
    6f1a:	c7 1f       	adc	r28, r23
    6f1c:	d8 1f       	adc	r29, r24
    6f1e:	99 0f       	add	r25, r25
    6f20:	66 1f       	adc	r22, r22
    6f22:	77 1f       	adc	r23, r23
    6f24:	88 1f       	adc	r24, r24
    6f26:	06 94       	lsr	r0
    6f28:	a9 f7       	brne	.-22     	; 0x6f14 <__ftoa_engine+0xc8>
    6f2a:	84 91       	lpm	r24, Z
    6f2c:	10 95       	com	r17
    6f2e:	17 70       	andi	r17, 0x07	; 7
    6f30:	41 f0       	breq	.+16     	; 0x6f42 <__ftoa_engine+0xf6>
    6f32:	d6 95       	lsr	r29
    6f34:	c7 95       	ror	r28
    6f36:	57 95       	ror	r21
    6f38:	47 95       	ror	r20
    6f3a:	f7 94       	ror	r15
    6f3c:	e7 94       	ror	r14
    6f3e:	1a 95       	dec	r17
    6f40:	c1 f7       	brne	.-16     	; 0x6f32 <__ftoa_engine+0xe6>
    6f42:	e2 ee       	ldi	r30, 0xE2	; 226
    6f44:	f0 e0       	ldi	r31, 0x00	; 0
    6f46:	68 94       	set
    6f48:	15 90       	lpm	r1, Z+
    6f4a:	15 91       	lpm	r17, Z+
    6f4c:	35 91       	lpm	r19, Z+
    6f4e:	65 91       	lpm	r22, Z+
    6f50:	95 91       	lpm	r25, Z+
    6f52:	05 90       	lpm	r0, Z+
    6f54:	7f e2       	ldi	r23, 0x2F	; 47
    6f56:	73 95       	inc	r23
    6f58:	e1 18       	sub	r14, r1
    6f5a:	f1 0a       	sbc	r15, r17
    6f5c:	43 0b       	sbc	r20, r19
    6f5e:	56 0b       	sbc	r21, r22
    6f60:	c9 0b       	sbc	r28, r25
    6f62:	d0 09       	sbc	r29, r0
    6f64:	c0 f7       	brcc	.-16     	; 0x6f56 <__ftoa_engine+0x10a>
    6f66:	e1 0c       	add	r14, r1
    6f68:	f1 1e       	adc	r15, r17
    6f6a:	43 1f       	adc	r20, r19
    6f6c:	56 1f       	adc	r21, r22
    6f6e:	c9 1f       	adc	r28, r25
    6f70:	d0 1d       	adc	r29, r0
    6f72:	7e f4       	brtc	.+30     	; 0x6f92 <__ftoa_engine+0x146>
    6f74:	70 33       	cpi	r23, 0x30	; 48
    6f76:	11 f4       	brne	.+4      	; 0x6f7c <__ftoa_engine+0x130>
    6f78:	8a 95       	dec	r24
    6f7a:	e6 cf       	rjmp	.-52     	; 0x6f48 <__ftoa_engine+0xfc>
    6f7c:	e8 94       	clt
    6f7e:	01 50       	subi	r16, 0x01	; 1
    6f80:	30 f0       	brcs	.+12     	; 0x6f8e <__ftoa_engine+0x142>
    6f82:	08 0f       	add	r16, r24
    6f84:	0a f4       	brpl	.+2      	; 0x6f88 <__ftoa_engine+0x13c>
    6f86:	00 27       	eor	r16, r16
    6f88:	02 17       	cp	r16, r18
    6f8a:	08 f4       	brcc	.+2      	; 0x6f8e <__ftoa_engine+0x142>
    6f8c:	20 2f       	mov	r18, r16
    6f8e:	23 95       	inc	r18
    6f90:	02 2f       	mov	r16, r18
    6f92:	7a 33       	cpi	r23, 0x3A	; 58
    6f94:	28 f0       	brcs	.+10     	; 0x6fa0 <__ftoa_engine+0x154>
    6f96:	79 e3       	ldi	r23, 0x39	; 57
    6f98:	7d 93       	st	X+, r23
    6f9a:	2a 95       	dec	r18
    6f9c:	e9 f7       	brne	.-6      	; 0x6f98 <__ftoa_engine+0x14c>
    6f9e:	10 c0       	rjmp	.+32     	; 0x6fc0 <__ftoa_engine+0x174>
    6fa0:	7d 93       	st	X+, r23
    6fa2:	2a 95       	dec	r18
    6fa4:	89 f6       	brne	.-94     	; 0x6f48 <__ftoa_engine+0xfc>
    6fa6:	06 94       	lsr	r0
    6fa8:	97 95       	ror	r25
    6faa:	67 95       	ror	r22
    6fac:	37 95       	ror	r19
    6fae:	17 95       	ror	r17
    6fb0:	17 94       	ror	r1
    6fb2:	e1 18       	sub	r14, r1
    6fb4:	f1 0a       	sbc	r15, r17
    6fb6:	43 0b       	sbc	r20, r19
    6fb8:	56 0b       	sbc	r21, r22
    6fba:	c9 0b       	sbc	r28, r25
    6fbc:	d0 09       	sbc	r29, r0
    6fbe:	98 f0       	brcs	.+38     	; 0x6fe6 <__ftoa_engine+0x19a>
    6fc0:	23 95       	inc	r18
    6fc2:	7e 91       	ld	r23, -X
    6fc4:	73 95       	inc	r23
    6fc6:	7a 33       	cpi	r23, 0x3A	; 58
    6fc8:	08 f0       	brcs	.+2      	; 0x6fcc <__ftoa_engine+0x180>
    6fca:	70 e3       	ldi	r23, 0x30	; 48
    6fcc:	7c 93       	st	X, r23
    6fce:	20 13       	cpse	r18, r16
    6fd0:	b8 f7       	brcc	.-18     	; 0x6fc0 <__ftoa_engine+0x174>
    6fd2:	7e 91       	ld	r23, -X
    6fd4:	70 61       	ori	r23, 0x10	; 16
    6fd6:	7d 93       	st	X+, r23
    6fd8:	30 f0       	brcs	.+12     	; 0x6fe6 <__ftoa_engine+0x19a>
    6fda:	83 95       	inc	r24
    6fdc:	71 e3       	ldi	r23, 0x31	; 49
    6fde:	7d 93       	st	X+, r23
    6fe0:	70 e3       	ldi	r23, 0x30	; 48
    6fe2:	2a 95       	dec	r18
    6fe4:	e1 f7       	brne	.-8      	; 0x6fde <__ftoa_engine+0x192>
    6fe6:	11 24       	eor	r1, r1
    6fe8:	ef 90       	pop	r14
    6fea:	ff 90       	pop	r15
    6fec:	0f 91       	pop	r16
    6fee:	1f 91       	pop	r17
    6ff0:	cf 91       	pop	r28
    6ff2:	df 91       	pop	r29
    6ff4:	99 27       	eor	r25, r25
    6ff6:	87 fd       	sbrc	r24, 7
    6ff8:	90 95       	com	r25
    6ffa:	08 95       	ret

00006ffc <isspace>:
    6ffc:	91 11       	cpse	r25, r1
    6ffe:	0c 94 e3 2f 	jmp	0x5fc6	; 0x5fc6 <__ctype_isfalse>
    7002:	80 32       	cpi	r24, 0x20	; 32
    7004:	19 f0       	breq	.+6      	; 0x700c <isspace+0x10>
    7006:	89 50       	subi	r24, 0x09	; 9
    7008:	85 50       	subi	r24, 0x05	; 5
    700a:	c8 f7       	brcc	.-14     	; 0x6ffe <isspace+0x2>
    700c:	08 95       	ret

0000700e <strchr_P>:
    700e:	fc 01       	movw	r30, r24
    7010:	05 90       	lpm	r0, Z+
    7012:	06 16       	cp	r0, r22
    7014:	21 f0       	breq	.+8      	; 0x701e <strchr_P+0x10>
    7016:	00 20       	and	r0, r0
    7018:	d9 f7       	brne	.-10     	; 0x7010 <strchr_P+0x2>
    701a:	c0 01       	movw	r24, r0
    701c:	08 95       	ret
    701e:	31 97       	sbiw	r30, 0x01	; 1
    7020:	cf 01       	movw	r24, r30
    7022:	08 95       	ret

00007024 <strnlen_P>:
    7024:	fc 01       	movw	r30, r24
    7026:	05 90       	lpm	r0, Z+
    7028:	61 50       	subi	r22, 0x01	; 1
    702a:	70 40       	sbci	r23, 0x00	; 0
    702c:	01 10       	cpse	r0, r1
    702e:	d8 f7       	brcc	.-10     	; 0x7026 <strnlen_P+0x2>
    7030:	80 95       	com	r24
    7032:	90 95       	com	r25
    7034:	8e 0f       	add	r24, r30
    7036:	9f 1f       	adc	r25, r31
    7038:	08 95       	ret

0000703a <strnlen>:
    703a:	fc 01       	movw	r30, r24
    703c:	61 50       	subi	r22, 0x01	; 1
    703e:	70 40       	sbci	r23, 0x00	; 0
    7040:	01 90       	ld	r0, Z+
    7042:	01 10       	cpse	r0, r1
    7044:	d8 f7       	brcc	.-10     	; 0x703c <strnlen+0x2>
    7046:	80 95       	com	r24
    7048:	90 95       	com	r25
    704a:	8e 0f       	add	r24, r30
    704c:	9f 1f       	adc	r25, r31
    704e:	08 95       	ret

00007050 <strrev>:
    7050:	dc 01       	movw	r26, r24
    7052:	fc 01       	movw	r30, r24
    7054:	67 2f       	mov	r22, r23
    7056:	71 91       	ld	r23, Z+
    7058:	77 23       	and	r23, r23
    705a:	e1 f7       	brne	.-8      	; 0x7054 <strrev+0x4>
    705c:	32 97       	sbiw	r30, 0x02	; 2
    705e:	04 c0       	rjmp	.+8      	; 0x7068 <strrev+0x18>
    7060:	7c 91       	ld	r23, X
    7062:	6d 93       	st	X+, r22
    7064:	70 83       	st	Z, r23
    7066:	62 91       	ld	r22, -Z
    7068:	ae 17       	cp	r26, r30
    706a:	bf 07       	cpc	r27, r31
    706c:	c8 f3       	brcs	.-14     	; 0x7060 <strrev+0x10>
    706e:	08 95       	ret

00007070 <fgetc>:
    7070:	cf 93       	push	r28
    7072:	df 93       	push	r29
    7074:	ec 01       	movw	r28, r24
    7076:	2b 81       	ldd	r18, Y+3	; 0x03
    7078:	20 ff       	sbrs	r18, 0
    707a:	33 c0       	rjmp	.+102    	; 0x70e2 <fgetc+0x72>
    707c:	26 ff       	sbrs	r18, 6
    707e:	0a c0       	rjmp	.+20     	; 0x7094 <fgetc+0x24>
    7080:	2f 7b       	andi	r18, 0xBF	; 191
    7082:	2b 83       	std	Y+3, r18	; 0x03
    7084:	8e 81       	ldd	r24, Y+6	; 0x06
    7086:	9f 81       	ldd	r25, Y+7	; 0x07
    7088:	01 96       	adiw	r24, 0x01	; 1
    708a:	9f 83       	std	Y+7, r25	; 0x07
    708c:	8e 83       	std	Y+6, r24	; 0x06
    708e:	8a 81       	ldd	r24, Y+2	; 0x02
    7090:	90 e0       	ldi	r25, 0x00	; 0
    7092:	29 c0       	rjmp	.+82     	; 0x70e6 <fgetc+0x76>
    7094:	22 ff       	sbrs	r18, 2
    7096:	0f c0       	rjmp	.+30     	; 0x70b6 <fgetc+0x46>
    7098:	e8 81       	ld	r30, Y
    709a:	f9 81       	ldd	r31, Y+1	; 0x01
    709c:	80 81       	ld	r24, Z
    709e:	08 2e       	mov	r0, r24
    70a0:	00 0c       	add	r0, r0
    70a2:	99 0b       	sbc	r25, r25
    70a4:	00 97       	sbiw	r24, 0x00	; 0
    70a6:	19 f4       	brne	.+6      	; 0x70ae <fgetc+0x3e>
    70a8:	20 62       	ori	r18, 0x20	; 32
    70aa:	2b 83       	std	Y+3, r18	; 0x03
    70ac:	1a c0       	rjmp	.+52     	; 0x70e2 <fgetc+0x72>
    70ae:	31 96       	adiw	r30, 0x01	; 1
    70b0:	f9 83       	std	Y+1, r31	; 0x01
    70b2:	e8 83       	st	Y, r30
    70b4:	0e c0       	rjmp	.+28     	; 0x70d2 <fgetc+0x62>
    70b6:	ea 85       	ldd	r30, Y+10	; 0x0a
    70b8:	fb 85       	ldd	r31, Y+11	; 0x0b
    70ba:	09 95       	icall
    70bc:	97 ff       	sbrs	r25, 7
    70be:	09 c0       	rjmp	.+18     	; 0x70d2 <fgetc+0x62>
    70c0:	2b 81       	ldd	r18, Y+3	; 0x03
    70c2:	01 96       	adiw	r24, 0x01	; 1
    70c4:	11 f0       	breq	.+4      	; 0x70ca <fgetc+0x5a>
    70c6:	80 e2       	ldi	r24, 0x20	; 32
    70c8:	01 c0       	rjmp	.+2      	; 0x70cc <fgetc+0x5c>
    70ca:	80 e1       	ldi	r24, 0x10	; 16
    70cc:	82 2b       	or	r24, r18
    70ce:	8b 83       	std	Y+3, r24	; 0x03
    70d0:	08 c0       	rjmp	.+16     	; 0x70e2 <fgetc+0x72>
    70d2:	2e 81       	ldd	r18, Y+6	; 0x06
    70d4:	3f 81       	ldd	r19, Y+7	; 0x07
    70d6:	2f 5f       	subi	r18, 0xFF	; 255
    70d8:	3f 4f       	sbci	r19, 0xFF	; 255
    70da:	3f 83       	std	Y+7, r19	; 0x07
    70dc:	2e 83       	std	Y+6, r18	; 0x06
    70de:	99 27       	eor	r25, r25
    70e0:	02 c0       	rjmp	.+4      	; 0x70e6 <fgetc+0x76>
    70e2:	8f ef       	ldi	r24, 0xFF	; 255
    70e4:	9f ef       	ldi	r25, 0xFF	; 255
    70e6:	df 91       	pop	r29
    70e8:	cf 91       	pop	r28
    70ea:	08 95       	ret

000070ec <fputc>:
    70ec:	0f 93       	push	r16
    70ee:	1f 93       	push	r17
    70f0:	cf 93       	push	r28
    70f2:	df 93       	push	r29
    70f4:	fb 01       	movw	r30, r22
    70f6:	23 81       	ldd	r18, Z+3	; 0x03
    70f8:	21 fd       	sbrc	r18, 1
    70fa:	03 c0       	rjmp	.+6      	; 0x7102 <fputc+0x16>
    70fc:	8f ef       	ldi	r24, 0xFF	; 255
    70fe:	9f ef       	ldi	r25, 0xFF	; 255
    7100:	2c c0       	rjmp	.+88     	; 0x715a <fputc+0x6e>
    7102:	22 ff       	sbrs	r18, 2
    7104:	16 c0       	rjmp	.+44     	; 0x7132 <fputc+0x46>
    7106:	46 81       	ldd	r20, Z+6	; 0x06
    7108:	57 81       	ldd	r21, Z+7	; 0x07
    710a:	24 81       	ldd	r18, Z+4	; 0x04
    710c:	35 81       	ldd	r19, Z+5	; 0x05
    710e:	42 17       	cp	r20, r18
    7110:	53 07       	cpc	r21, r19
    7112:	44 f4       	brge	.+16     	; 0x7124 <fputc+0x38>
    7114:	a0 81       	ld	r26, Z
    7116:	b1 81       	ldd	r27, Z+1	; 0x01
    7118:	9d 01       	movw	r18, r26
    711a:	2f 5f       	subi	r18, 0xFF	; 255
    711c:	3f 4f       	sbci	r19, 0xFF	; 255
    711e:	31 83       	std	Z+1, r19	; 0x01
    7120:	20 83       	st	Z, r18
    7122:	8c 93       	st	X, r24
    7124:	26 81       	ldd	r18, Z+6	; 0x06
    7126:	37 81       	ldd	r19, Z+7	; 0x07
    7128:	2f 5f       	subi	r18, 0xFF	; 255
    712a:	3f 4f       	sbci	r19, 0xFF	; 255
    712c:	37 83       	std	Z+7, r19	; 0x07
    712e:	26 83       	std	Z+6, r18	; 0x06
    7130:	14 c0       	rjmp	.+40     	; 0x715a <fputc+0x6e>
    7132:	8b 01       	movw	r16, r22
    7134:	ec 01       	movw	r28, r24
    7136:	fb 01       	movw	r30, r22
    7138:	00 84       	ldd	r0, Z+8	; 0x08
    713a:	f1 85       	ldd	r31, Z+9	; 0x09
    713c:	e0 2d       	mov	r30, r0
    713e:	09 95       	icall
    7140:	89 2b       	or	r24, r25
    7142:	e1 f6       	brne	.-72     	; 0x70fc <fputc+0x10>
    7144:	d8 01       	movw	r26, r16
    7146:	16 96       	adiw	r26, 0x06	; 6
    7148:	8d 91       	ld	r24, X+
    714a:	9c 91       	ld	r25, X
    714c:	17 97       	sbiw	r26, 0x07	; 7
    714e:	01 96       	adiw	r24, 0x01	; 1
    7150:	17 96       	adiw	r26, 0x07	; 7
    7152:	9c 93       	st	X, r25
    7154:	8e 93       	st	-X, r24
    7156:	16 97       	sbiw	r26, 0x06	; 6
    7158:	ce 01       	movw	r24, r28
    715a:	df 91       	pop	r29
    715c:	cf 91       	pop	r28
    715e:	1f 91       	pop	r17
    7160:	0f 91       	pop	r16
    7162:	08 95       	ret

00007164 <ungetc>:
    7164:	fb 01       	movw	r30, r22
    7166:	23 81       	ldd	r18, Z+3	; 0x03
    7168:	20 ff       	sbrs	r18, 0
    716a:	12 c0       	rjmp	.+36     	; 0x7190 <ungetc+0x2c>
    716c:	26 fd       	sbrc	r18, 6
    716e:	10 c0       	rjmp	.+32     	; 0x7190 <ungetc+0x2c>
    7170:	8f 3f       	cpi	r24, 0xFF	; 255
    7172:	3f ef       	ldi	r19, 0xFF	; 255
    7174:	93 07       	cpc	r25, r19
    7176:	61 f0       	breq	.+24     	; 0x7190 <ungetc+0x2c>
    7178:	82 83       	std	Z+2, r24	; 0x02
    717a:	2f 7d       	andi	r18, 0xDF	; 223
    717c:	20 64       	ori	r18, 0x40	; 64
    717e:	23 83       	std	Z+3, r18	; 0x03
    7180:	26 81       	ldd	r18, Z+6	; 0x06
    7182:	37 81       	ldd	r19, Z+7	; 0x07
    7184:	21 50       	subi	r18, 0x01	; 1
    7186:	31 09       	sbc	r19, r1
    7188:	37 83       	std	Z+7, r19	; 0x07
    718a:	26 83       	std	Z+6, r18	; 0x06
    718c:	99 27       	eor	r25, r25
    718e:	08 95       	ret
    7190:	8f ef       	ldi	r24, 0xFF	; 255
    7192:	9f ef       	ldi	r25, 0xFF	; 255
    7194:	08 95       	ret

00007196 <__ultoa_invert>:
    7196:	fa 01       	movw	r30, r20
    7198:	aa 27       	eor	r26, r26
    719a:	28 30       	cpi	r18, 0x08	; 8
    719c:	51 f1       	breq	.+84     	; 0x71f2 <__ultoa_invert+0x5c>
    719e:	20 31       	cpi	r18, 0x10	; 16
    71a0:	81 f1       	breq	.+96     	; 0x7202 <__ultoa_invert+0x6c>
    71a2:	e8 94       	clt
    71a4:	6f 93       	push	r22
    71a6:	6e 7f       	andi	r22, 0xFE	; 254
    71a8:	6e 5f       	subi	r22, 0xFE	; 254
    71aa:	7f 4f       	sbci	r23, 0xFF	; 255
    71ac:	8f 4f       	sbci	r24, 0xFF	; 255
    71ae:	9f 4f       	sbci	r25, 0xFF	; 255
    71b0:	af 4f       	sbci	r26, 0xFF	; 255
    71b2:	b1 e0       	ldi	r27, 0x01	; 1
    71b4:	3e d0       	rcall	.+124    	; 0x7232 <__ultoa_invert+0x9c>
    71b6:	b4 e0       	ldi	r27, 0x04	; 4
    71b8:	3c d0       	rcall	.+120    	; 0x7232 <__ultoa_invert+0x9c>
    71ba:	67 0f       	add	r22, r23
    71bc:	78 1f       	adc	r23, r24
    71be:	89 1f       	adc	r24, r25
    71c0:	9a 1f       	adc	r25, r26
    71c2:	a1 1d       	adc	r26, r1
    71c4:	68 0f       	add	r22, r24
    71c6:	79 1f       	adc	r23, r25
    71c8:	8a 1f       	adc	r24, r26
    71ca:	91 1d       	adc	r25, r1
    71cc:	a1 1d       	adc	r26, r1
    71ce:	6a 0f       	add	r22, r26
    71d0:	71 1d       	adc	r23, r1
    71d2:	81 1d       	adc	r24, r1
    71d4:	91 1d       	adc	r25, r1
    71d6:	a1 1d       	adc	r26, r1
    71d8:	20 d0       	rcall	.+64     	; 0x721a <__ultoa_invert+0x84>
    71da:	09 f4       	brne	.+2      	; 0x71de <__ultoa_invert+0x48>
    71dc:	68 94       	set
    71de:	3f 91       	pop	r19
    71e0:	2a e0       	ldi	r18, 0x0A	; 10
    71e2:	26 9f       	mul	r18, r22
    71e4:	11 24       	eor	r1, r1
    71e6:	30 19       	sub	r19, r0
    71e8:	30 5d       	subi	r19, 0xD0	; 208
    71ea:	31 93       	st	Z+, r19
    71ec:	de f6       	brtc	.-74     	; 0x71a4 <__ultoa_invert+0xe>
    71ee:	cf 01       	movw	r24, r30
    71f0:	08 95       	ret
    71f2:	46 2f       	mov	r20, r22
    71f4:	47 70       	andi	r20, 0x07	; 7
    71f6:	40 5d       	subi	r20, 0xD0	; 208
    71f8:	41 93       	st	Z+, r20
    71fa:	b3 e0       	ldi	r27, 0x03	; 3
    71fc:	0f d0       	rcall	.+30     	; 0x721c <__ultoa_invert+0x86>
    71fe:	c9 f7       	brne	.-14     	; 0x71f2 <__ultoa_invert+0x5c>
    7200:	f6 cf       	rjmp	.-20     	; 0x71ee <__ultoa_invert+0x58>
    7202:	46 2f       	mov	r20, r22
    7204:	4f 70       	andi	r20, 0x0F	; 15
    7206:	40 5d       	subi	r20, 0xD0	; 208
    7208:	4a 33       	cpi	r20, 0x3A	; 58
    720a:	18 f0       	brcs	.+6      	; 0x7212 <__ultoa_invert+0x7c>
    720c:	49 5d       	subi	r20, 0xD9	; 217
    720e:	31 fd       	sbrc	r19, 1
    7210:	40 52       	subi	r20, 0x20	; 32
    7212:	41 93       	st	Z+, r20
    7214:	02 d0       	rcall	.+4      	; 0x721a <__ultoa_invert+0x84>
    7216:	a9 f7       	brne	.-22     	; 0x7202 <__ultoa_invert+0x6c>
    7218:	ea cf       	rjmp	.-44     	; 0x71ee <__ultoa_invert+0x58>
    721a:	b4 e0       	ldi	r27, 0x04	; 4
    721c:	a6 95       	lsr	r26
    721e:	97 95       	ror	r25
    7220:	87 95       	ror	r24
    7222:	77 95       	ror	r23
    7224:	67 95       	ror	r22
    7226:	ba 95       	dec	r27
    7228:	c9 f7       	brne	.-14     	; 0x721c <__ultoa_invert+0x86>
    722a:	00 97       	sbiw	r24, 0x00	; 0
    722c:	61 05       	cpc	r22, r1
    722e:	71 05       	cpc	r23, r1
    7230:	08 95       	ret
    7232:	9b 01       	movw	r18, r22
    7234:	ac 01       	movw	r20, r24
    7236:	0a 2e       	mov	r0, r26
    7238:	06 94       	lsr	r0
    723a:	57 95       	ror	r21
    723c:	47 95       	ror	r20
    723e:	37 95       	ror	r19
    7240:	27 95       	ror	r18
    7242:	ba 95       	dec	r27
    7244:	c9 f7       	brne	.-14     	; 0x7238 <__ultoa_invert+0xa2>
    7246:	62 0f       	add	r22, r18
    7248:	73 1f       	adc	r23, r19
    724a:	84 1f       	adc	r24, r20
    724c:	95 1f       	adc	r25, r21
    724e:	a0 1d       	adc	r26, r0
    7250:	08 95       	ret

00007252 <eeprom_read_dword>:
    7252:	a6 e1       	ldi	r26, 0x16	; 22
    7254:	b0 e0       	ldi	r27, 0x00	; 0
    7256:	44 e0       	ldi	r20, 0x04	; 4
    7258:	50 e0       	ldi	r21, 0x00	; 0
    725a:	0c 94 44 39 	jmp	0x7288	; 0x7288 <eeprom_read_blraw>

0000725e <eeprom_read_word>:
    725e:	a8 e1       	ldi	r26, 0x18	; 24
    7260:	b0 e0       	ldi	r27, 0x00	; 0
    7262:	42 e0       	ldi	r20, 0x02	; 2
    7264:	50 e0       	ldi	r21, 0x00	; 0
    7266:	0c 94 44 39 	jmp	0x7288	; 0x7288 <eeprom_read_blraw>

0000726a <eeprom_write_dword>:
    726a:	24 2f       	mov	r18, r20
    726c:	0e 94 53 39 	call	0x72a6	; 0x72a6 <eeprom_write_r18>
    7270:	25 2f       	mov	r18, r21
    7272:	0e 94 53 39 	call	0x72a6	; 0x72a6 <eeprom_write_r18>
    7276:	0c 94 3d 39 	jmp	0x727a	; 0x727a <eeprom_write_word>

0000727a <eeprom_write_word>:
    727a:	0e 94 52 39 	call	0x72a4	; 0x72a4 <eeprom_write_byte>
    727e:	27 2f       	mov	r18, r23
    7280:	0c 94 53 39 	jmp	0x72a6	; 0x72a6 <eeprom_write_r18>

00007284 <eeprom_read_block>:
    7284:	dc 01       	movw	r26, r24
    7286:	cb 01       	movw	r24, r22

00007288 <eeprom_read_blraw>:
    7288:	fc 01       	movw	r30, r24
    728a:	f9 99       	sbic	0x1f, 1	; 31
    728c:	fe cf       	rjmp	.-4      	; 0x728a <eeprom_read_blraw+0x2>
    728e:	06 c0       	rjmp	.+12     	; 0x729c <eeprom_read_blraw+0x14>
    7290:	f2 bd       	out	0x22, r31	; 34
    7292:	e1 bd       	out	0x21, r30	; 33
    7294:	f8 9a       	sbi	0x1f, 0	; 31
    7296:	31 96       	adiw	r30, 0x01	; 1
    7298:	00 b4       	in	r0, 0x20	; 32
    729a:	0d 92       	st	X+, r0
    729c:	41 50       	subi	r20, 0x01	; 1
    729e:	50 40       	sbci	r21, 0x00	; 0
    72a0:	b8 f7       	brcc	.-18     	; 0x7290 <eeprom_read_blraw+0x8>
    72a2:	08 95       	ret

000072a4 <eeprom_write_byte>:
    72a4:	26 2f       	mov	r18, r22

000072a6 <eeprom_write_r18>:
    72a6:	f9 99       	sbic	0x1f, 1	; 31
    72a8:	fe cf       	rjmp	.-4      	; 0x72a6 <eeprom_write_r18>
    72aa:	1f ba       	out	0x1f, r1	; 31
    72ac:	92 bd       	out	0x22, r25	; 34
    72ae:	81 bd       	out	0x21, r24	; 33
    72b0:	20 bd       	out	0x20, r18	; 32
    72b2:	0f b6       	in	r0, 0x3f	; 63
    72b4:	f8 94       	cli
    72b6:	fa 9a       	sbi	0x1f, 2	; 31
    72b8:	f9 9a       	sbi	0x1f, 1	; 31
    72ba:	0f be       	out	0x3f, r0	; 63
    72bc:	01 96       	adiw	r24, 0x01	; 1
    72be:	08 95       	ret

000072c0 <_exit>:
    72c0:	f8 94       	cli

000072c2 <__stop_program>:
    72c2:	ff cf       	rjmp	.-2      	; 0x72c2 <__stop_program>
