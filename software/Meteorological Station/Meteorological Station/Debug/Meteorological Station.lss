
Meteorological Station.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003f8  00800100  00009c9e  00009d32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00009c9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000119b  008004f8  008004f8  0000a12a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000a12a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000a188  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000700  00000000  00000000  0000a1c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000bea2  00000000  00000000  0000a8c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000026c8  00000000  00000000  0001676a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000060f8  00000000  00000000  00018e32  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001654  00000000  00000000  0001ef2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c18  00000000  00000000  00020580  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ba79  00000000  00000000  00022198  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000710  00000000  00000000  0002dc11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 27 0a 	jmp	0x144e	; 0x144e <__ctors_end>
       4:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__bad_interrupt>
       8:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__bad_interrupt>
       c:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__bad_interrupt>
      10:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__bad_interrupt>
      14:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__bad_interrupt>
      18:	0c 94 8f 38 	jmp	0x711e	; 0x711e <__vector_6>
      1c:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__bad_interrupt>
      20:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__bad_interrupt>
      24:	0c 94 8e 17 	jmp	0x2f1c	; 0x2f1c <__vector_9>
      28:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__bad_interrupt>
      2c:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__bad_interrupt>
      30:	0c 94 94 37 	jmp	0x6f28	; 0x6f28 <__vector_12>
      34:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__bad_interrupt>
      38:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__bad_interrupt>
      3c:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__bad_interrupt>
      40:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__bad_interrupt>
      44:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__bad_interrupt>
      48:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__bad_interrupt>
      4c:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__bad_interrupt>
      50:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__bad_interrupt>
      54:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__bad_interrupt>
      58:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__bad_interrupt>
      5c:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__bad_interrupt>
      60:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__bad_interrupt>
      64:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__bad_interrupt>
      68:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__bad_interrupt>
      6c:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__bad_interrupt>
      70:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__bad_interrupt>
      74:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__bad_interrupt>
      78:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__bad_interrupt>
      7c:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__bad_interrupt>
      80:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__bad_interrupt>
      84:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__bad_interrupt>
      88:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__bad_interrupt>
      8c:	4c 32       	cpi	r20, 0x2C	; 44
      8e:	53 32       	cpi	r21, 0x23	; 35
      90:	a5 33       	cpi	r26, 0x35	; 53
      92:	c3 32       	cpi	r28, 0x23	; 35
      94:	a5 33       	cpi	r26, 0x35	; 53
      96:	a5 33       	cpi	r26, 0x35	; 53
      98:	a5 33       	cpi	r26, 0x35	; 53
      9a:	9e 33       	cpi	r25, 0x3E	; 62
      9c:	a5 33       	cpi	r26, 0x35	; 53
      9e:	a5 33       	cpi	r26, 0x35	; 53
      a0:	a5 33       	cpi	r26, 0x35	; 53
      a2:	a5 33       	cpi	r26, 0x35	; 53
      a4:	a5 33       	cpi	r26, 0x35	; 53
      a6:	a5 33       	cpi	r26, 0x35	; 53
      a8:	a5 33       	cpi	r26, 0x35	; 53
      aa:	a5 33       	cpi	r26, 0x35	; 53
      ac:	a5 33       	cpi	r26, 0x35	; 53
      ae:	a5 33       	cpi	r26, 0x35	; 53
      b0:	a5 33       	cpi	r26, 0x35	; 53
      b2:	a5 33       	cpi	r26, 0x35	; 53
      b4:	a5 33       	cpi	r26, 0x35	; 53
      b6:	a5 33       	cpi	r26, 0x35	; 53
      b8:	a5 33       	cpi	r26, 0x35	; 53
      ba:	a5 33       	cpi	r26, 0x35	; 53
      bc:	a5 33       	cpi	r26, 0x35	; 53
      be:	a5 33       	cpi	r26, 0x35	; 53
      c0:	a5 33       	cpi	r26, 0x35	; 53
      c2:	a5 33       	cpi	r26, 0x35	; 53
      c4:	a5 33       	cpi	r26, 0x35	; 53
      c6:	a5 33       	cpi	r26, 0x35	; 53
      c8:	a5 33       	cpi	r26, 0x35	; 53
      ca:	a5 33       	cpi	r26, 0x35	; 53
      cc:	a5 33       	cpi	r26, 0x35	; 53
      ce:	a5 33       	cpi	r26, 0x35	; 53
      d0:	a5 33       	cpi	r26, 0x35	; 53
      d2:	a5 33       	cpi	r26, 0x35	; 53
      d4:	a5 33       	cpi	r26, 0x35	; 53
      d6:	a5 33       	cpi	r26, 0x35	; 53
      d8:	a5 33       	cpi	r26, 0x35	; 53
      da:	a5 33       	cpi	r26, 0x35	; 53
      dc:	a5 33       	cpi	r26, 0x35	; 53
      de:	a5 33       	cpi	r26, 0x35	; 53
      e0:	a5 33       	cpi	r26, 0x35	; 53
      e2:	a5 33       	cpi	r26, 0x35	; 53
      e4:	a5 33       	cpi	r26, 0x35	; 53
      e6:	a5 33       	cpi	r26, 0x35	; 53
      e8:	a5 33       	cpi	r26, 0x35	; 53
      ea:	a5 33       	cpi	r26, 0x35	; 53
      ec:	a5 33       	cpi	r26, 0x35	; 53
      ee:	a5 33       	cpi	r26, 0x35	; 53
      f0:	50 33       	cpi	r21, 0x30	; 48
      f2:	56 33       	cpi	r21, 0x36	; 54
      f4:	67 33       	cpi	r22, 0x37	; 55
      f6:	78 33       	cpi	r23, 0x38	; 56
      f8:	8c 33       	cpi	r24, 0x3C	; 60

000000fa <__trampolines_end>:
      fa:	63 64       	ori	r22, 0x43	; 67
      fc:	69 6e       	ori	r22, 0xE9	; 233
      fe:	6f 70       	andi	r22, 0x0F	; 15
     100:	73 75       	andi	r23, 0x53	; 83
     102:	78 58       	subi	r23, 0x88	; 136
     104:	5b 00       	.word	0x005b	; ????
     106:	00 40       	sbci	r16, 0x00	; 0
     108:	7a 10       	cpse	r7, r10
     10a:	f3 5a       	subi	r31, 0xA3	; 163
     10c:	00 a0       	ldd	r0, Z+32	; 0x20
     10e:	72 4e       	sbci	r23, 0xE2	; 226
     110:	18 09       	sbc	r17, r8
     112:	00 10       	cpse	r0, r0
     114:	a5 d4       	rcall	.+2378   	; 0xa60 <__c.2817+0x3>
     116:	e8 00       	.word	0x00e8	; ????
     118:	00 e8       	ldi	r16, 0x80	; 128
     11a:	76 48       	sbci	r23, 0x86	; 134
     11c:	17 00       	.word	0x0017	; ????
     11e:	00 e4       	ldi	r16, 0x40	; 64
     120:	0b 54       	subi	r16, 0x4B	; 75
     122:	02 00       	.word	0x0002	; ????
     124:	00 ca       	rjmp	.-3072   	; 0xfffff526 <__eeprom_end+0xff7ef526>
     126:	9a 3b       	cpi	r25, 0xBA	; 186
     128:	00 00       	nop
     12a:	00 e1       	ldi	r16, 0x10	; 16
     12c:	f5 05       	cpc	r31, r5
     12e:	00 00       	nop
     130:	80 96       	adiw	r24, 0x20	; 32
     132:	98 00       	.word	0x0098	; ????
     134:	00 00       	nop
     136:	40 42       	sbci	r20, 0x20	; 32
     138:	0f 00       	.word	0x000f	; ????
     13a:	00 00       	nop
     13c:	a0 86       	std	Z+8, r10	; 0x08
     13e:	01 00       	.word	0x0001	; ????
     140:	00 00       	nop
     142:	10 27       	eor	r17, r16
     144:	00 00       	nop
     146:	00 00       	nop
     148:	e8 03       	fmulsu	r22, r16
     14a:	00 00       	nop
     14c:	00 00       	nop
     14e:	64 00       	.word	0x0064	; ????
     150:	00 00       	nop
     152:	00 00       	nop
     154:	0a 00       	.word	0x000a	; ????
     156:	00 00       	nop
     158:	00 00       	nop
     15a:	01 00       	.word	0x0001	; ????
     15c:	00 00       	nop
     15e:	00 00       	nop
     160:	2c 76       	andi	r18, 0x6C	; 108
     162:	d8 88       	ldd	r13, Y+16	; 0x10
     164:	dc 67       	ori	r29, 0x7C	; 124
     166:	4f 08       	sbc	r4, r15
     168:	23 df       	rcall	.-442    	; 0xffffffb0 <__eeprom_end+0xff7effb0>
     16a:	c1 df       	rcall	.-126    	; 0xee <__SREG__+0xaf>
     16c:	ae 59       	subi	r26, 0x9E	; 158
     16e:	e1 b1       	in	r30, 0x01	; 1
     170:	b7 96       	adiw	r30, 0x27	; 39
     172:	e5 e3       	ldi	r30, 0x35	; 53
     174:	e4 53       	subi	r30, 0x34	; 52
     176:	c6 3a       	cpi	r28, 0xA6	; 166
     178:	e6 51       	subi	r30, 0x16	; 22
     17a:	99 76       	andi	r25, 0x69	; 105
     17c:	96 e8       	ldi	r25, 0x86	; 134
     17e:	e6 c2       	rjmp	.+1484   	; 0x74c <__c.2861+0x22>
     180:	84 26       	eor	r8, r20
     182:	eb 89       	ldd	r30, Y+19	; 0x13
     184:	8c 9b       	sbis	0x11, 4	; 17
     186:	62 ed       	ldi	r22, 0xD2	; 210
     188:	40 7c       	andi	r20, 0xC0	; 192
     18a:	6f fc       	.word	0xfc6f	; ????
     18c:	ef bc       	out	0x2f, r14	; 47
     18e:	9c 9f       	mul	r25, r28
     190:	40 f2       	brcs	.-112    	; 0x122 <__trampolines_end+0x28>
     192:	ba a5       	ldd	r27, Y+42	; 0x2a
     194:	6f a5       	ldd	r22, Y+47	; 0x2f
     196:	f4 90       	lpm	r15, Z
     198:	05 5a       	subi	r16, 0xA5	; 165
     19a:	2a f7       	brpl	.-54     	; 0x166 <__trampolines_end+0x6c>
     19c:	5c 93       	st	X, r21
     19e:	6b 6c       	ori	r22, 0xCB	; 203
     1a0:	f9 67       	ori	r31, 0x79	; 121
     1a2:	6d c1       	rjmp	.+730    	; 0x47e <__c.2891+0x4a>
     1a4:	1b fc       	.word	0xfc1b	; ????
     1a6:	e0 e4       	ldi	r30, 0x40	; 64
     1a8:	0d 47       	sbci	r16, 0x7D	; 125
     1aa:	fe f5       	brtc	.+126    	; 0x22a <__c.2463+0x2a>
     1ac:	20 e6       	ldi	r18, 0x60	; 96
     1ae:	b5 00       	.word	0x00b5	; ????
     1b0:	d0 ed       	ldi	r29, 0xD0	; 208
     1b2:	90 2e       	mov	r9, r16
     1b4:	03 00       	.word	0x0003	; ????
     1b6:	94 35       	cpi	r25, 0x54	; 84
     1b8:	77 05       	cpc	r23, r7
     1ba:	00 80       	ld	r0, Z
     1bc:	84 1e       	adc	r8, r20
     1be:	08 00       	.word	0x0008	; ????
     1c0:	00 20       	and	r0, r0
     1c2:	4e 0a       	sbc	r4, r30
     1c4:	00 00       	nop
     1c6:	00 c8       	rjmp	.-4096   	; 0xfffff1c8 <__eeprom_end+0xff7ef1c8>
     1c8:	0c 33       	cpi	r16, 0x3C	; 60
     1ca:	33 33       	cpi	r19, 0x33	; 51
     1cc:	33 0f       	add	r19, r19
     1ce:	98 6e       	ori	r25, 0xE8	; 232
     1d0:	12 83       	std	Z+2, r17	; 0x02
     1d2:	11 41       	sbci	r17, 0x11	; 17
     1d4:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1d6:	21 14       	cp	r2, r1
     1d8:	89 3b       	cpi	r24, 0xB9	; 185
     1da:	e6 55       	subi	r30, 0x56	; 86
     1dc:	16 cf       	rjmp	.-468    	; 0xa <__FUSE_REGION_LENGTH__+0x7>
     1de:	fe e6       	ldi	r31, 0x6E	; 110
     1e0:	db 18       	sub	r13, r11
     1e2:	d1 84       	ldd	r13, Z+9	; 0x09
     1e4:	4b 38       	cpi	r20, 0x8B	; 139
     1e6:	1b f7       	brvc	.-58     	; 0x1ae <__trampolines_end+0xb4>
     1e8:	7c 1d       	adc	r23, r12
     1ea:	90 1d       	adc	r25, r0
     1ec:	a4 bb       	out	0x14, r26	; 20
     1ee:	e4 24       	eor	r14, r4
     1f0:	20 32       	cpi	r18, 0x20	; 32
     1f2:	84 72       	andi	r24, 0x24	; 36
     1f4:	5e 22       	and	r5, r30
     1f6:	81 00       	.word	0x0081	; ????
     1f8:	c9 f1       	breq	.+114    	; 0x26c <__c.2457>
     1fa:	24 ec       	ldi	r18, 0xC4	; 196
     1fc:	a1 e5       	ldi	r26, 0x51	; 81
     1fe:	3d 27       	eor	r19, r29

00000200 <__c.2463>:
     200:	0d 0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20     ..Content-Type: 
     210:	61 70 70 6c 69 63 61 74 69 6f 6e 2f 78 2d 77 77     application/x-ww
     220:	77 2d 66 6f 72 6d 2d 75 72 6c 65 6e 63 6f 64 65     w-form-urlencode
     230:	64 0d 0a 0d 0a 00                                   d.....

00000236 <__c.2461>:
     236:	43 6f 6e 74 65 6e 74 2d 4c 65 6e 67 74 68 3a 20     Content-Length: 
	...

00000247 <__c.2459>:
     247:	0d 0a 55 73 65 72 2d 41 67 65 6e 74 3a 20 74 67     ..User-Agent: tg
     257:	72 2f 31 2e 31 0d 0a 41 63 63 65 70 74 3a 20 2a     r/1.1..Accept: *
     267:	2f 2a 0d 0a 00                                      /*...

0000026c <__c.2457>:
     26c:	0d 0a 00                                            ...

0000026f <__c.2455>:
     26f:	20 48 54 54 50 2f 31 2e 31 0d 0a 48 6f 73 74 3a      HTTP/1.1..Host:
     27f:	20 00                                                .

00000281 <__c.2453>:
     281:	50 4f 53 54 20 00                                   POST .

00000287 <__c.2451>:
     287:	0d 0a 55 73 65 72 2d 41 67 65 6e 74 3a 20 74 67     ..User-Agent: tg
     297:	72 2f 31 2e 31 0d 0a 41 63 63 65 70 74 3a 20 74     r/1.1..Accept: t
     2a7:	65 78 74 2f 68 74 6d 6c 0d 0a 0d 0a 00              ext/html.....

000002b4 <__c.2449>:
     2b4:	20 48 54 54 50 2f 31 2e 31 0d 0a 48 6f 73 74 3a      HTTP/1.1..Host:
     2c4:	20 00                                                .

000002c6 <__c.2447>:
     2c6:	47 45 54 20 00                                      GET .

000002cb <arpreqhdr>:
     2cb:	00 01 08 00 06 04 00 01                             ........

000002d3 <iphdr>:
     2d3:	45 00 00 82 00 00 40 00 20                          E.....@. 

000002dc <__c.2929>:
     2dc:	2f 68 6f 6d 65 27 3b 0a 3c 2f 73 63 72 69 70 74     /home';.</script
     2ec:	3e 0a 00                                            >..

000002ef <__c.2927>:
     2ef:	6c 6f 63 61 74 69 6f 6e 2e 68 72 65 66 20 3d 20     location.href = 
     2ff:	27 68 74 74 70 3a 2f 2f 00                          'http://.

00000308 <__c.2925>:
     308:	3c 73 63 72 69 70 74 20 74 79 70 65 3d 74 65 78     <script type=tex
     318:	74 2f 6a 61 76 61 73 63 72 69 70 74 3e 0a 00        t/javascript>..

00000327 <__c.2923>:
     327:	3c 70 72 65 3e 0a 00                                <pre>..

0000032e <__c.2920>:
     32e:	48 54 54 50 2f 31 2e 30 20 34 30 31 20 55 6e 61     HTTP/1.0 401 Una
     33e:	75 74 68 6f 72 69 7a 65 64 0d 0a 43 6f 6e 74 65     uthorized..Conte
     34e:	6e 74 2d 54 79 70 65 3a 20 74 65 78 74 2f 68 74     nt-Type: text/ht
     35e:	6d 6c 0d 0a 0d 0a 3c 68 31 3e 34 30 31 20 55 6e     ml....<h1>401 Un
     36e:	61 75 74 68 6f 72 69 7a 65 64 3c 2f 68 31 3e 00     authorized</h1>.

0000037e <__c.2916>:
     37e:	3c 68 31 3e 32 30 30 20 4f 4b 3c 2f 68 31 3e 00     <h1>200 OK</h1>.

0000038e <__c.2901>:
     38e:	3c 2f 70 72 65 3e 00                                </pre>.

00000395 <__c.2899>:
     395:	3c 2f 64 69 76 3e 0a 3c 2f 62 6f 64 79 3e 0a 00     </div>.</body>..

000003a5 <__c.2897>:
     3a5:	3c 62 72 3e 3c 68 72 3e 62 79 20 44 61 6e 69 65     <br><hr>by Danie
     3b5:	6c 73 20 46 69 26 23 33 35 33 65 72 73 3c 2f 68     ls Fi&#353ers</h
     3c5:	72 3e 3c 2f 62 72 3e 00                             r></br>.

000003cd <__c.2895>:
     3cd:	3c 69 6e 70 75 74 20 74 79 70 65 3d 22 73 75 62     <input type="sub
     3dd:	6d 69 74 22 20 76 61 6c 75 65 3d 22 48 6f 6d 65     mit" value="Home
     3ed:	22 20 73 74 79 6c 65 3d 22 77 69 64 74 68 3a 31     " style="width:1
     3fd:	30 30 25 22 20 6f 6e 63 6c 69 63 6b 3d 22 77 69     00%" onclick="wi
     40d:	6e 64 6f 77 2e 6c 6f 63 61 74 69 6f 6e 3d 27 2f     ndow.location='/
     41d:	68 6f 6d 65 27 3b 22 20 2f 3e 0a 00                 home';" />..

00000429 <__c.2893>:
     429:	0a 3c 2f 74 61 62 6c 65 3e 0a 00                    .</table>..

00000434 <__c.2891>:
     434:	3c 74 72 3e 0a 3c 74 64 20 63 6c 61 73 73 3d 62     <tr>.<td class=b
     444:	75 74 74 6f 6e 20 63 6f 6c 73 70 61 6e 3d 22 32     utton colspan="2
     454:	22 3e 3c 69 6e 70 75 74 20 74 79 70 65 3d 73 75     "><input type=su
     464:	62 6d 69 74 20 76 61 6c 75 65 3d 22 43 6f 6e 66     bmit value="Conf
     474:	69 72 6d 22 20 73 74 79 6c 65 3d 22 77 69 64 74     irm" style="widt
     484:	68 3a 31 30 30 25 22 3e 3c 2f 74 64 3e 0a 3c 2f     h:100%"></td>.</
     494:	74 72 3e 0a 3c 2f 66 6f 72 6d 3e 00                 tr>.</form>.

000004a0 <__c.2889>:
     4a0:	3e 3c 2f 74 64 3e 0a 3c 2f 74 72 3e 00              ></td>.</tr>.

000004ad <__c.2887>:
     4ad:	0a 3c 74 64 3e 3c 66 6f 72 6d 20 61 63 74 69 6f     .<td><form actio
     4bd:	6e 3d 2f 20 6d 65 74 68 6f 64 3d 67 65 74 3e 0a     n=/ method=get>.
     4cd:	53 65 63 6f 6e 64 3a 20 3c 69 6e 70 75 74 20 74     Second: <input t
     4dd:	79 70 65 3d 74 65 78 74 20 73 69 7a 65 3d 31 32     ype=text size=12
     4ed:	20 6e 61 6d 65 3d 73 65 63 20 76 61 6c 75 65 3d      name=sec value=
	...

000004fe <__c.2885>:
     4fe:	3e 3c 2f 74 64 3e 00                                ></td>.

00000505 <__c.2883>:
     505:	3c 74 72 3e 0a 3c 74 64 3e 3c 66 6f 72 6d 20 61     <tr>.<td><form a
     515:	63 74 69 6f 6e 3d 2f 20 6d 65 74 68 6f 64 3d 67     ction=/ method=g
     525:	65 74 3e 0a 44 61 79 3a 20 3c 69 6e 70 75 74 20     et>.Day: <input 
     535:	74 79 70 65 3d 74 65 78 74 20 73 69 7a 65 3d 31     type=text size=1
     545:	32 20 6e 61 6d 65 3d 64 61 79 20 76 61 6c 75 65     2 name=day value
     555:	3d 00                                               =.

00000557 <__c.2881>:
     557:	3e 3c 2f 74 64 3e 0a 3c 2f 74 72 3e 00              ></td>.</tr>.

00000564 <__c.2879>:
     564:	0a 3c 74 64 3e 3c 66 6f 72 6d 20 61 63 74 69 6f     .<td><form actio
     574:	6e 3d 2f 20 6d 65 74 68 6f 64 3d 67 65 74 3e 0a     n=/ method=get>.
     584:	4d 69 6e 75 74 65 3a 20 3c 69 6e 70 75 74 20 74     Minute: <input t
     594:	79 70 65 3d 74 65 78 74 20 73 69 7a 65 3d 31 32     ype=text size=12
     5a4:	20 6e 61 6d 65 3d 6d 69 6e 20 76 61 6c 75 65 3d      name=min value=
	...

000005b5 <__c.2877>:
     5b5:	3e 3c 2f 74 64 3e 00                                ></td>.

000005bc <__c.2875>:
     5bc:	3c 74 72 3e 0a 3c 74 64 3e 3c 66 6f 72 6d 20 61     <tr>.<td><form a
     5cc:	63 74 69 6f 6e 3d 2f 20 6d 65 74 68 6f 64 3d 67     ction=/ method=g
     5dc:	65 74 3e 0a 4d 6f 6e 74 68 3a 20 3c 69 6e 70 75     et>.Month: <inpu
     5ec:	74 20 74 79 70 65 3d 74 65 78 74 20 73 69 7a 65     t type=text size
     5fc:	3d 31 32 20 6e 61 6d 65 3d 6d 6f 6e 74 68 20 76     =12 name=month v
     60c:	61 6c 75 65 3d 00                                   alue=.

00000612 <__c.2873>:
     612:	3e 3c 2f 74 64 3e 0a 3c 2f 74 72 3e 00              ></td>.</tr>.

0000061f <__c.2871>:
     61f:	0a 3c 74 64 3e 3c 66 6f 72 6d 20 61 63 74 69 6f     .<td><form actio
     62f:	6e 3d 2f 20 6d 65 74 68 6f 64 3d 67 65 74 3e 0a     n=/ method=get>.
     63f:	48 6f 75 72 3a 20 3c 69 6e 70 75 74 20 74 79 70     Hour: <input typ
     64f:	65 3d 74 65 78 74 20 73 69 7a 65 3d 31 32 20 6e     e=text size=12 n
     65f:	61 6d 65 3d 68 6f 75 72 20 76 61 6c 75 65 3d 00     ame=hour value=.

0000066f <__c.2869>:
     66f:	3e 3c 2f 74 64 3e 00                                ></td>.

00000676 <__c.2867>:
     676:	3c 74 72 3e 0a 3c 74 64 3e 3c 66 6f 72 6d 20 61     <tr>.<td><form a
     686:	63 74 69 6f 6e 3d 2f 20 6d 65 74 68 6f 64 3d 67     ction=/ method=g
     696:	65 74 3e 0a 59 65 61 72 3a 20 3c 69 6e 70 75 74     et>.Year: <input
     6a6:	20 74 79 70 65 3d 74 65 78 74 20 73 69 7a 65 3d      type=text size=
     6b6:	31 32 20 6e 61 6d 65 3d 79 65 61 72 20 76 61 6c     12 name=year val
     6c6:	75 65 3d 00                                         ue=.

000006ca <__c.2865>:
     6ca:	3c 74 72 3e 0a 3c 74 68 3e 44 61 74 65 3c 2f 74     <tr>.<th>Date</t
     6da:	68 3e 3c 74 68 3e 54 69 6d 65 3c 2f 74 68 3e 0a     h><th>Time</th>.
     6ea:	3c 2f 74 72 3e 00                                   </tr>.

000006f0 <__c.2863>:
     6f0:	3c 74 72 3e 0a 3c 74 68 20 63 6f 6c 73 70 61 6e     <tr>.<th colspan
     700:	3d 22 32 22 3e 52 65 61 6c 20 54 69 6d 65 20 43     ="2">Real Time C
     710:	6c 6f 63 6b 20 53 65 74 74 69 6e 67 73 3c 2f 74     lock Settings</t
     720:	68 3e 0a 3c 2f 74 72 3e 0a 00                       h>.</tr>..

0000072a <__c.2861>:
     72a:	3c 62 6f 64 79 3e 0a 3c 64 69 76 20 63 6c 61 73     <body>.<div clas
     73a:	73 3d 63 65 6e 74 65 72 3e 0a 3c 68 32 3e 57 65     s=center>.<h2>We
     74a:	61 74 68 65 72 20 53 74 61 74 69 6f 6e 3c 2f 68     ather Station</h
     75a:	32 3e 0a 3c 74 61 62 6c 65 3e 0a 00                 2>.<table>..

00000766 <__c.2859>:
     766:	3c 2f 73 74 79 6c 65 3e 0a 00                       </style>..

00000770 <__c.2857>:
     770:	62 6f 64 79 20 7b 0a 62 61 63 6b 67 72 6f 75 6e     body {.backgroun
     780:	64 2d 63 6f 6c 6f 72 3a 20 70 6f 77 64 65 72 62     d-color: powderb
     790:	6c 75 65 3b 0a 7d 0a 00                             lue;.}..

00000798 <__c.2855>:
     798:	68 32 2c 20 68 72 20 7b 0a 74 65 78 74 2d 61 6c     h2, hr {.text-al
     7a8:	69 67 6e 3a 20 63 65 6e 74 65 72 3b 0a 7d 0a 00     ign: center;.}..

000007b8 <__c.2853>:
     7b8:	74 64 2e 62 75 74 74 6f 6e 20 7b 0a 70 61 64 64     td.button {.padd
     7c8:	69 6e 67 3a 20 30 70 78 3b 0a 7d 0a 00              ing: 0px;.}..

000007d5 <__c.2851>:
     7d5:	74 61 62 6c 65 2c 20 74 68 2c 20 74 64 20 7b 0a     table, th, td {.
     7e5:	62 6f 72 64 65 72 3a 20 31 70 78 20 73 6f 6c 69     border: 1px soli
     7f5:	64 20 62 6c 61 63 6b 3b 0a 62 6f 72 64 65 72 2d     d black;.border-
     805:	63 6f 6c 6c 61 70 73 65 3a 20 63 6f 6c 6c 61 70     collapse: collap
     815:	73 65 3b 0a 70 61 64 64 69 6e 67 3a 20 31 35 70     se;.padding: 15p
     825:	78 3b 0a 74 65 78 74 2d 61 6c 69 67 6e 3a 20 63     x;.text-align: c
     835:	65 6e 74 65 72 3b 0a 7d 0a 00                       enter;.}..

0000083f <__c.2849>:
     83f:	64 69 76 2e 63 65 6e 74 65 72 20 7b 0a 70 6f 73     div.center {.pos
     84f:	69 74 69 6f 6e 3a 20 61 62 73 6f 6c 75 74 65 3b     ition: absolute;
     85f:	0a 74 6f 70 3a 20 35 30 25 3b 0a 6c 65 66 74 3a     .top: 50%;.left:
     86f:	20 35 30 25 3b 0a 6d 61 72 67 69 6e 2d 72 69 67      50%;.margin-rig
     87f:	68 74 3a 20 2d 35 30 25 3b 0a 74 72 61 6e 73 66     ht: -50%;.transf
     88f:	6f 72 6d 3a 20 74 72 61 6e 73 6c 61 74 65 28 2d     orm: translate(-
     89f:	35 30 25 2c 20 2d 35 30 25 29 0a 7d 0a 00           50%, -50%).}..

000008ad <__c.2847>:
     8ad:	3c 73 74 79 6c 65 3e 0a 00                          <style>..

000008b6 <__c.2845>:
     8b6:	0a 3c 70 72 65 3e 0a 00                             .<pre>..

000008be <__c.2833>:
     8be:	3c 2f 70 72 65 3e 00                                </pre>.

000008c5 <__c.2831>:
     8c5:	3c 2f 64 69 76 3e 0a 3c 2f 62 6f 64 79 3e 0a 00     </div>.</body>..

000008d5 <__c.2829>:
     8d5:	3c 62 72 3e 3c 68 72 3e 62 79 20 44 61 6e 69 65     <br><hr>by Danie
     8e5:	6c 73 20 46 69 26 23 33 35 33 65 72 73 3c 2f 68     ls Fi&#353ers</h
     8f5:	72 3e 3c 2f 62 72 3e 00                             r></br>.

000008fd <__c.2827>:
     8fd:	3c 69 6e 70 75 74 20 74 79 70 65 3d 22 73 75 62     <input type="sub
     90d:	6d 69 74 22 20 76 61 6c 75 65 3d 22 48 6f 6d 65     mit" value="Home
     91d:	22 20 73 74 79 6c 65 3d 22 77 69 64 74 68 3a 31     " style="width:1
     92d:	30 30 25 22 20 6f 6e 63 6c 69 63 6b 3d 22 77 69     00%" onclick="wi
     93d:	6e 64 6f 77 2e 6c 6f 63 61 74 69 6f 6e 3d 27 2f     ndow.location='/
     94d:	68 6f 6d 65 27 3b 22 20 2f 3e 0a 00                 home';" />..

00000959 <__c.2825>:
     959:	0a 3c 2f 74 61 62 6c 65 3e 0a 00                    .</table>..

00000964 <__c.2823>:
     964:	3c 74 72 3e 0a 3c 74 64 20 63 6c 61 73 73 3d 62     <tr>.<td class=b
     974:	75 74 74 6f 6e 3e 3c 69 6e 70 75 74 20 74 79 70     utton><input typ
     984:	65 3d 22 73 75 62 6d 69 74 22 20 76 61 6c 75 65     e="submit" value
     994:	3d 22 52 65 73 74 61 72 74 22 20 73 74 79 6c 65     ="Restart" style
     9a4:	3d 22 77 69 64 74 68 3a 31 30 30 25 22 20 6f 6e     ="width:100%" on
     9b4:	63 6c 69 63 6b 3d 22 77 69 6e 64 6f 77 2e 6c 6f     click="window.lo
     9c4:	63 61 74 69 6f 6e 3d 27 2f 72 65 73 65 74 27 3b     cation='/reset';
     9d4:	22 20 2f 3e 3c 2f 74 64 3e 0a 3c 2f 74 72 3e 0a     " /></td>.</tr>.
	...

000009e5 <__c.2821>:
     9e5:	3c 74 72 3e 0a 3c 74 64 20 63 6c 61 73 73 3d 62     <tr>.<td class=b
     9f5:	75 74 74 6f 6e 3e 3c 69 6e 70 75 74 20 74 79 70     utton><input typ
     a05:	65 3d 73 75 62 6d 69 74 20 76 61 6c 75 65 3d 22     e=submit value="
     a15:	43 6f 6e 66 69 72 6d 22 20 73 74 79 6c 65 3d 22     Confirm" style="
     a25:	77 69 64 74 68 3a 31 30 30 25 22 3e 3c 2f 74 64     width:100%"></td
     a35:	3e 0a 3c 2f 74 72 3e 0a 3c 2f 66 6f 72 6d 3e 00     >.</tr>.</form>.

00000a45 <__c.2819>:
     a45:	3e 3c 2f 69 6e 70 75 74 3e 0a 3c 2f 74 64 3e 0a     ></input>.</td>.
     a55:	3c 2f 74 72 3e 0a 0a 00                             </tr>...

00000a5d <__c.2817>:
     a5d:	3c 74 72 3e 0a 3c 74 64 3e 0a 48 6f 6c 6c 61 20     <tr>.<td>.Holla 
     a6d:	53 65 6e 73 6f 72 3a 20 3c 69 6e 70 75 74 20 74     Sensor: <input t
     a7d:	79 70 65 3d 74 65 78 74 20 73 69 7a 65 3d 31 32     ype=text size=12
     a8d:	20 6e 61 6d 65 3d 68 61 6c 6c 20 76 61 6c 75 65      name=hall value
     a9d:	3d 00                                               =.

00000a9f <__c.2815>:
     a9f:	3e 3c 2f 69 6e 70 75 74 3e 0a 3c 2f 74 64 3e 0a     ></input>.</td>.
     aaf:	3c 2f 74 72 3e 0a 00                                </tr>..

00000ab6 <__c.2813>:
     ab6:	3c 74 72 3e 0a 3c 74 64 3e 0a 54 69 6d 65 6f 75     <tr>.<td>.Timeou
     ac6:	74 20 28 53 65 63 6f 6e 64 73 29 3a 20 3c 69 6e     t (Seconds): <in
     ad6:	70 75 74 20 74 79 70 65 3d 74 65 78 74 20 73 69     put type=text si
     ae6:	7a 65 3d 31 32 20 6e 61 6d 65 3d 74 69 6d 65 6f     ze=12 name=timeo
     af6:	75 74 20 76 61 6c 75 65 3d 00                       ut value=.

00000b00 <__c.2811>:
     b00:	3e 3c 2f 69 6e 70 75 74 3e 0a 3c 2f 74 64 3e 0a     ></input>.</td>.
     b10:	3c 2f 74 72 3e 00                                   </tr>.

00000b16 <__c.2809>:
     b16:	3c 74 72 3e 0a 3c 74 64 3e 0a 47 61 74 65 77 61     <tr>.<td>.Gatewa
     b26:	79 20 49 50 3a 20 3c 69 6e 70 75 74 20 74 79 70     y IP: <input typ
     b36:	65 3d 74 65 78 74 20 73 69 7a 65 3d 31 32 20 6e     e=text size=12 n
     b46:	61 6d 65 3d 67 77 69 70 20 76 61 6c 75 65 3d 00     ame=gwip value=.

00000b56 <__c.2807>:
     b56:	3e 3c 2f 69 6e 70 75 74 3e 0a 3c 2f 74 64 3e 0a     ></input>.</td>.
     b66:	3c 2f 74 72 3e 00                                   </tr>.

00000b6c <__c.2805>:
     b6c:	3c 74 72 3e 0a 3c 74 64 3e 0a 44 65 73 74 69 6e     <tr>.<td>.Destin
     b7c:	61 74 69 6f 6e 20 49 50 3a 20 3c 69 6e 70 75 74     ation IP: <input
     b8c:	20 74 79 70 65 3d 74 65 78 74 20 73 69 7a 65 3d      type=text size=
     b9c:	31 32 20 6e 61 6d 65 3d 73 65 72 76 69 70 20 76     12 name=servip v
     bac:	61 6c 75 65 3d 00                                   alue=.

00000bb2 <__c.2803>:
     bb2:	3e 3c 2f 69 6e 70 75 74 3e 0a 3c 2f 74 64 3e 0a     ></input>.</td>.
     bc2:	3c 2f 74 72 3e 00                                   </tr>.

00000bc8 <__c.2801>:
     bc8:	3c 74 72 3e 0a 3c 74 64 3e 0a 3c 66 6f 72 6d 20     <tr>.<td>.<form 
     bd8:	61 63 74 69 6f 6e 3d 2f 20 6d 65 74 68 6f 64 3d     action=/ method=
     be8:	67 65 74 3e 0a 57 65 61 74 68 65 72 20 53 74 61     get>.Weather Sta
     bf8:	74 69 6f 6e 20 49 50 3a 20 3c 69 6e 70 75 74 20     tion IP: <input 
     c08:	74 79 70 65 3d 74 65 78 74 20 73 69 7a 65 3d 31     type=text size=1
     c18:	32 20 6e 61 6d 65 3d 6d 79 69 70 20 76 61 6c 75     2 name=myip valu
     c28:	65 3d 00                                            e=.

00000c2b <__c.2799>:
     c2b:	3c 74 72 3e 0a 3c 74 68 3e 53 65 74 74 69 6e 67     <tr>.<th>Setting
     c3b:	73 3c 2f 74 68 3e 0a 3c 2f 74 72 3e 00              s</th>.</tr>.

00000c48 <__c.2797>:
     c48:	3c 62 6f 64 79 3e 0a 3c 64 69 76 20 63 6c 61 73     <body>.<div clas
     c58:	73 3d 63 65 6e 74 65 72 3e 0a 3c 68 32 3e 57 65     s=center>.<h2>We
     c68:	61 74 68 65 72 20 53 74 61 74 69 6f 6e 3c 2f 68     ather Station</h
     c78:	32 3e 0a 3c 74 61 62 6c 65 3e 0a 00                 2>.<table>..

00000c84 <__c.2795>:
     c84:	3c 2f 73 74 79 6c 65 3e 0a 00                       </style>..

00000c8e <__c.2793>:
     c8e:	62 6f 64 79 20 7b 0a 62 61 63 6b 67 72 6f 75 6e     body {.backgroun
     c9e:	64 2d 63 6f 6c 6f 72 3a 20 70 6f 77 64 65 72 62     d-color: powderb
     cae:	6c 75 65 3b 0a 7d 0a 00                             lue;.}..

00000cb6 <__c.2791>:
     cb6:	68 32 2c 20 68 72 20 7b 0a 74 65 78 74 2d 61 6c     h2, hr {.text-al
     cc6:	69 67 6e 3a 20 63 65 6e 74 65 72 3b 0a 7d 0a 00     ign: center;.}..

00000cd6 <__c.2789>:
     cd6:	74 64 2e 62 75 74 74 6f 6e 20 7b 0a 70 61 64 64     td.button {.padd
     ce6:	69 6e 67 3a 20 30 70 78 3b 0a 7d 0a 00              ing: 0px;.}..

00000cf3 <__c.2787>:
     cf3:	74 61 62 6c 65 2c 20 74 68 2c 20 74 64 20 7b 0a     table, th, td {.
     d03:	62 6f 72 64 65 72 3a 20 31 70 78 20 73 6f 6c 69     border: 1px soli
     d13:	64 20 62 6c 61 63 6b 3b 0a 62 6f 72 64 65 72 2d     d black;.border-
     d23:	63 6f 6c 6c 61 70 73 65 3a 20 63 6f 6c 6c 61 70     collapse: collap
     d33:	73 65 3b 0a 70 61 64 64 69 6e 67 3a 20 31 35 70     se;.padding: 15p
     d43:	78 3b 0a 74 65 78 74 2d 61 6c 69 67 6e 3a 20 63     x;.text-align: c
     d53:	65 6e 74 65 72 3b 0a 7d 0a 00                       enter;.}..

00000d5d <__c.2785>:
     d5d:	64 69 76 2e 63 65 6e 74 65 72 20 7b 0a 70 6f 73     div.center {.pos
     d6d:	69 74 69 6f 6e 3a 20 61 62 73 6f 6c 75 74 65 3b     ition: absolute;
     d7d:	0a 74 6f 70 3a 20 35 30 25 3b 0a 6c 65 66 74 3a     .top: 50%;.left:
     d8d:	20 35 30 25 3b 0a 6d 61 72 67 69 6e 2d 72 69 67      50%;.margin-rig
     d9d:	68 74 3a 20 2d 35 30 25 3b 0a 74 72 61 6e 73 66     ht: -50%;.transf
     dad:	6f 72 6d 3a 20 74 72 61 6e 73 6c 61 74 65 28 2d     orm: translate(-
     dbd:	35 30 25 2c 20 2d 35 30 25 29 0a 7d 0a 00           50%, -50%).}..

00000dcb <__c.2783>:
     dcb:	3c 73 74 79 6c 65 3e 0a 00                          <style>..

00000dd4 <__c.2781>:
     dd4:	0a 3c 70 72 65 3e 0a 00                             .<pre>..

00000ddc <__c.2772>:
     ddc:	3c 2f 70 72 65 3e 00                                </pre>.

00000de3 <__c.2770>:
     de3:	3c 2f 64 69 76 3e 0a 3c 2f 62 6f 64 79 3e 0a 00     </div>.</body>..

00000df3 <__c.2768>:
     df3:	3c 62 72 3e 3c 68 72 3e 62 79 20 44 61 6e 69 65     <br><hr>by Danie
     e03:	6c 73 20 46 69 26 23 33 35 33 65 72 73 3c 2f 68     ls Fi&#353ers</h
     e13:	72 3e 3c 2f 62 72 3e 00                             r></br>.

00000e1b <__c.2766>:
     e1b:	3c 69 6e 70 75 74 20 74 79 70 65 3d 22 73 75 62     <input type="sub
     e2b:	6d 69 74 22 20 76 61 6c 75 65 3d 22 52 54 43 20     mit" value="RTC 
     e3b:	53 65 74 74 69 6e 67 73 22 20 73 74 79 6c 65 3d     Settings" style=
     e4b:	22 77 69 64 74 68 3a 31 30 30 25 22 20 6f 6e 63     "width:100%" onc
     e5b:	6c 69 63 6b 3d 22 77 69 6e 64 6f 77 2e 6c 6f 63     lick="window.loc
     e6b:	61 74 69 6f 6e 3d 27 2f 72 74 63 27 3b 22 20 2f     ation='/rtc';" /
     e7b:	3e 0a 00                                            >..

00000e7e <__c.2764>:
     e7e:	3c 69 6e 70 75 74 20 74 79 70 65 3d 22 73 75 62     <input type="sub
     e8e:	6d 69 74 22 20 76 61 6c 75 65 3d 22 53 65 74 74     mit" value="Sett
     e9e:	69 6e 67 73 22 20 73 74 79 6c 65 3d 22 77 69 64     ings" style="wid
     eae:	74 68 3a 31 30 30 25 22 20 6f 6e 63 6c 69 63 6b     th:100%" onclick
     ebe:	3d 22 77 69 6e 64 6f 77 2e 6c 6f 63 61 74 69 6f     ="window.locatio
     ece:	6e 3d 27 2f 73 65 74 74 69 6e 67 73 27 3b 22 20     n='/settings';" 
     ede:	2f 3e 0a 00                                         />..

00000ee2 <__c.2762>:
     ee2:	0a 3c 2f 74 61 62 6c 65 3e 0a 3c 2f 66 6f 72 6d     .</table>.</form
     ef2:	3e 0a 00                                            >..

00000ef5 <__c.2760>:
     ef5:	3c 2f 74 64 3e 0a 3c 2f 74 72 3e 00                 </td>.</tr>.

00000f01 <__c.2758>:
     f01:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 22 67 72 65     <font color="gre
     f11:	65 6e 22 3e 4f 70 65 6e 3c 2f 66 6f 6e 74 3e 00     en">Open</font>.

00000f21 <__c.2756>:
     f21:	3c 66 6f 6e 74 20 63 6f 6c 6f 72 3d 22 72 65 64     <font color="red
     f31:	22 3e 43 6c 6f 73 65 64 3c 2f 66 6f 6e 74 3e 00     ">Closed</font>.

00000f41 <__c.2754>:
     f41:	0a 3c 74 72 3e 0a 3c 74 64 3e 42 6f 78 20 53 74     .<tr>.<td>Box St
     f51:	61 74 75 73 3a 20 00                                atus: .

00000f58 <__c.2752>:
     f58:	20 6d 2f 73 3c 2f 74 64 3e 0a 3c 2f 74 72 3e 00      m/s</td>.</tr>.

00000f68 <__c.2750>:
     f68:	0a 3c 74 72 3e 0a 3c 74 64 3e 57 69 6e 64 20 53     .<tr>.<td>Wind S
     f78:	70 65 65 64 3a 20 00                                peed: .

00000f7f <__c.2748>:
     f7f:	26 23 78 62 30 3b 3c 2f 74 64 3e 0a 3c 2f 74 72     &#xb0;</td>.</tr
     f8f:	3e 00                                               >.

00000f91 <__c.2746>:
     f91:	0a 3c 74 72 3e 0a 3c 74 64 3e 57 69 6e 64 20 41     .<tr>.<td>Wind A
     fa1:	6e 67 6c 65 3a 20 00                                ngle: .

00000fa8 <__c.2744>:
     fa8:	20 50 61 3c 2f 74 64 3e 0a 3c 2f 74 72 3e 00         Pa</td>.</tr>.

00000fb7 <__c.2742>:
     fb7:	0a 3c 74 72 3e 3c 74 64 3e 50 72 65 73 73 75 72     .<tr><td>Pressur
     fc7:	65 3a 20 00                                         e: .

00000fcb <__c.2740>:
     fcb:	20 25 3c 2f 74 64 3e 0a 3c 2f 74 72 3e 00            %</td>.</tr>.

00000fd9 <__c.2738>:
     fd9:	0a 3c 74 72 3e 0a 3c 74 64 3e 48 75 6d 69 64 69     .<tr>.<td>Humidi
     fe9:	74 79 3a 20 00                                      ty: .

00000fee <__c.2736>:
     fee:	20 26 23 78 32 31 30 33 3b 3c 2f 74 64 3e 0a 3c      &#x2103;</td>.<
     ffe:	2f 74 72 3e 00                                      /tr>.

00001003 <__c.2734>:
    1003:	0a 3c 74 72 3e 0a 3c 74 64 3e 54 65 6d 70 65 72     .<tr>.<td>Temper
    1013:	61 74 75 72 65 3a 20 00                             ature: .

0000101b <__c.2732>:
    101b:	3c 74 72 3e 0a 3c 74 68 3e 49 6e 66 6f 72 6d 61     <tr>.<th>Informa
    102b:	74 69 6f 6e 3c 2f 74 68 3e 0a 3c 2f 74 72 3e 00     tion</th>.</tr>.

0000103b <__c.2730>:
    103b:	3c 62 6f 64 79 3e 0a 3c 64 69 76 20 63 6c 61 73     <body>.<div clas
    104b:	73 3d 63 65 6e 74 65 72 3e 0a 3c 68 32 3e 57 65     s=center>.<h2>We
    105b:	61 74 68 65 72 20 53 74 61 74 69 6f 6e 3c 2f 68     ather Station</h
    106b:	32 3e 0a 3c 74 61 62 6c 65 3e 0a 00                 2>.<table>..

00001077 <__c.2728>:
    1077:	3c 2f 73 74 79 6c 65 3e 0a 00                       </style>..

00001081 <__c.2726>:
    1081:	62 6f 64 79 20 7b 0a 62 61 63 6b 67 72 6f 75 6e     body {.backgroun
    1091:	64 2d 63 6f 6c 6f 72 3a 20 70 6f 77 64 65 72 62     d-color: powderb
    10a1:	6c 75 65 3b 0a 7d 0a 00                             lue;.}..

000010a9 <__c.2724>:
    10a9:	68 32 2c 20 68 72 20 7b 0a 74 65 78 74 2d 61 6c     h2, hr {.text-al
    10b9:	69 67 6e 3a 20 63 65 6e 74 65 72 3b 0a 7d 0a 00     ign: center;.}..

000010c9 <__c.2722>:
    10c9:	74 64 2e 62 75 74 74 6f 6e 20 7b 0a 70 61 64 64     td.button {.padd
    10d9:	69 6e 67 3a 20 30 70 78 3b 0a 7d 0a 00              ing: 0px;.}..

000010e6 <__c.2720>:
    10e6:	74 61 62 6c 65 2c 20 74 68 2c 20 74 64 20 7b 0a     table, th, td {.
    10f6:	62 6f 72 64 65 72 3a 20 31 70 78 20 73 6f 6c 69     border: 1px soli
    1106:	64 20 62 6c 61 63 6b 3b 0a 62 6f 72 64 65 72 2d     d black;.border-
    1116:	63 6f 6c 6c 61 70 73 65 3a 20 63 6f 6c 6c 61 70     collapse: collap
    1126:	73 65 3b 0a 70 61 64 64 69 6e 67 3a 20 31 35 70     se;.padding: 15p
    1136:	78 3b 0a 74 65 78 74 2d 61 6c 69 67 6e 3a 20 63     x;.text-align: c
    1146:	65 6e 74 65 72 3b 0a 7d 0a 00                       enter;.}..

00001150 <__c.2718>:
    1150:	64 69 76 2e 63 65 6e 74 65 72 20 7b 0a 70 6f 73     div.center {.pos
    1160:	69 74 69 6f 6e 3a 20 61 62 73 6f 6c 75 74 65 3b     ition: absolute;
    1170:	0a 74 6f 70 3a 20 35 30 25 3b 0a 6c 65 66 74 3a     .top: 50%;.left:
    1180:	20 35 30 25 3b 0a 6d 61 72 67 69 6e 2d 72 69 67      50%;.margin-rig
    1190:	68 74 3a 20 2d 35 30 25 3b 0a 74 72 61 6e 73 66     ht: -50%;.transf
    11a0:	6f 72 6d 3a 20 74 72 61 6e 73 6c 61 74 65 28 2d     orm: translate(-
    11b0:	35 30 25 2c 20 2d 35 30 25 29 0a 7d 0a 00           50%, -50%).}..

000011be <__c.2716>:
    11be:	3c 73 74 79 6c 65 3e 0a 00                          <style>..

000011c7 <__c.2714>:
    11c7:	0a 3c 70 72 65 3e 0a 00                             .<pre>..

000011cf <__c.2704>:
    11cf:	48 54 54 50 2f 31 2e 30 20 32 30 30 20 4f 4b 0d     HTTP/1.0 200 OK.
    11df:	0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74     .Content-Type: t
    11ef:	65 78 74 2f 68 74 6d 6c 0d 0a 50 72 61 67 6d 61     ext/html..Pragma
    11ff:	3a 20 6e 6f 2d 63 61 63 68 65 0d 0a 0d 0a 00        : no-cache.....

0000120e <SplashScreen>:
	...
    122a:	00 38 38 38 c0 c0 c0 00 00 00 00 00 00 00 00 00     .888............
    123a:	00 00 00 00 c0 c0 c0 38 38 38 00 00 00 00 00 00     .......888......
	...
    127a:	00 e0 e0 e0 e0 fe fe fe 8f 8f 8f fe fe fe fe fe     ................
    128a:	fe fe fe fe fe fe fe fe 8f 8f 8f fe fe fe f0 f0     ................
    129a:	f0 f0 80 80 80 80 00 00 00 00 00 00 00 00 00 00     ................
	...
    12ca:	00 ff ff ff ff 03 03 03 03 ff ff ff ff 0f 0f 0f     ................
    12da:	0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f ff ff     ................
    12ea:	ff ff 03 03 03 03 ff ff ff ff 00 00 00 00 00 00     ................
	...
    132a:	00 0f 0f 0f 0f 0f 0f 00 00 00 00 00 0f 0f 0f 0f     ................
    133a:	0f 0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1362:	00 00 00 48 54 54 24 00 7c 14 14 08 00 78 14 14     ...HTT$.|....x..
    1372:	78 00 38 44 44 28 00 7c 54 54 44 00 00 00 00 00     x.8DD(.|TTD.....
    1382:	00 44 7c 44 00 7c 08 10 7c 00 0c 30 40 30 0c 00     .D|D.|..|..0@0..
    1392:	78 14 14 78 00 7c 44 44 38 00 7c 54 54 44 00 7c     x..x.|DD8.|TTD.|
    13a2:	14 34 48 00 48 54 54 24 00 00 00 00 00 00 00 00     .4H.HTT$........
	...

00001406 <__c.2830>:
    1406:	43 61 6c 69 62 72 61 74 69 6f 6e 20 63 6f 6d 70     Calibration comp
    1416:	6c 65 74 65 21 0a 00                                lete!..

0000141d <__c.2825>:
    141d:	43 61 6c 69 62 72 61 74 69 6f 6e 20 73 74 61 72     Calibration star
    142d:	74 65 64 21 0a 00                                   ted!..

00001433 <__c.2936>:
    1433:	53 70 61 63 65 20 49 6e 76 61 64 65 72 73 20 61     Space Invaders a
    1443:	63 74 69 76 61 74 65 64 21 00 00                    ctivated!..

0000144e <__ctors_end>:
    144e:	11 24       	eor	r1, r1
    1450:	1f be       	out	0x3f, r1	; 63
    1452:	cf ef       	ldi	r28, 0xFF	; 255
    1454:	d0 e4       	ldi	r29, 0x40	; 64
    1456:	de bf       	out	0x3e, r29	; 62
    1458:	cd bf       	out	0x3d, r28	; 61

0000145a <wdt_init>:


// Function Implementation
void wdt_init(void)
{
	MCUSR = 0;
    145a:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    145c:	0f b6       	in	r0, 0x3f	; 63
    145e:	f8 94       	cli
    1460:	a8 95       	wdr
    1462:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1466:	88 61       	ori	r24, 0x18	; 24
    1468:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    146c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1470:	0f be       	out	0x3f, r0	; 63

00001472 <__do_copy_data>:
    1472:	14 e0       	ldi	r17, 0x04	; 4
    1474:	a0 e0       	ldi	r26, 0x00	; 0
    1476:	b1 e0       	ldi	r27, 0x01	; 1
    1478:	ee e9       	ldi	r30, 0x9E	; 158
    147a:	fc e9       	ldi	r31, 0x9C	; 156
    147c:	00 e0       	ldi	r16, 0x00	; 0
    147e:	0b bf       	out	0x3b, r16	; 59
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <__do_copy_data+0x14>
    1482:	07 90       	elpm	r0, Z+
    1484:	0d 92       	st	X+, r0
    1486:	a8 3f       	cpi	r26, 0xF8	; 248
    1488:	b1 07       	cpc	r27, r17
    148a:	d9 f7       	brne	.-10     	; 0x1482 <__do_copy_data+0x10>

0000148c <__do_clear_bss>:
    148c:	26 e1       	ldi	r18, 0x16	; 22
    148e:	a8 ef       	ldi	r26, 0xF8	; 248
    1490:	b4 e0       	ldi	r27, 0x04	; 4
    1492:	01 c0       	rjmp	.+2      	; 0x1496 <.do_clear_bss_start>

00001494 <.do_clear_bss_loop>:
    1494:	1d 92       	st	X+, r1

00001496 <.do_clear_bss_start>:
    1496:	a3 39       	cpi	r26, 0x93	; 147
    1498:	b2 07       	cpc	r27, r18
    149a:	e1 f7       	brne	.-8      	; 0x1494 <.do_clear_bss_loop>
    149c:	0e 94 f8 38 	call	0x71f0	; 0x71f0 <main>
    14a0:	0c 94 4d 4e 	jmp	0x9c9a	; 0x9c9a <_exit>

000014a4 <__bad_interrupt>:
    14a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000014a8 <bmp280_init>:

	p = ((p + var1 + var2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
	return (float)p / 256;
}

void bmp280_init() {
    14a8:	cf 93       	push	r28
    14aa:	df 93       	push	r29
	DDRB |= (1 << BMP_CS);
    14ac:	23 9a       	sbi	0x04, 3	; 4
	PORT_CS &= ~(1<<BMP_CS); // Power On the module
    14ae:	2b 98       	cbi	0x05, 3	; 5
	spi_rwSPI(0b01110100);
    14b0:	84 e7       	ldi	r24, 0x74	; 116
    14b2:	0e 94 fe 36 	call	0x6dfc	; 0x6dfc <spi_rwSPI>
	spi_rwSPI(0xFF);
    14b6:	8f ef       	ldi	r24, 0xFF	; 255
    14b8:	0e 94 fe 36 	call	0x6dfc	; 0x6dfc <spi_rwSPI>
	
	spi_rwSPI(0xF4);
    14bc:	84 ef       	ldi	r24, 0xF4	; 244
    14be:	0e 94 fe 36 	call	0x6dfc	; 0x6dfc <spi_rwSPI>
	spi_rwSPI(0b01010111);
    14c2:	87 e5       	ldi	r24, 0x57	; 87
    14c4:	0e 94 fe 36 	call	0x6dfc	; 0x6dfc <spi_rwSPI>
	PORT_CS |= (1<<BMP_CS);
    14c8:	2b 9a       	sbi	0x05, 3	; 5
#include "BMP280_SPI.h"
#include "../SPI/SPI.h"
#include "../../Options.h"

static void readCalibration() {
	_bmp280_calib.dig_T1 = spi_read16(0x88, BMP_CS);
    14ca:	63 e0       	ldi	r22, 0x03	; 3
    14cc:	70 e0       	ldi	r23, 0x00	; 0
    14ce:	88 e8       	ldi	r24, 0x88	; 136
    14d0:	0e 94 31 37 	call	0x6e62	; 0x6e62 <spi_read16>
    14d4:	c4 e1       	ldi	r28, 0x14	; 20
    14d6:	d3 e1       	ldi	r29, 0x13	; 19
    14d8:	99 83       	std	Y+1, r25	; 0x01
    14da:	88 83       	st	Y, r24
	_bmp280_calib.dig_T2 = spi_readS16(0x8A, BMP_CS);
    14dc:	63 e0       	ldi	r22, 0x03	; 3
    14de:	70 e0       	ldi	r23, 0x00	; 0
    14e0:	8a e8       	ldi	r24, 0x8A	; 138
    14e2:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <spi_readS16>
    14e6:	9b 83       	std	Y+3, r25	; 0x03
    14e8:	8a 83       	std	Y+2, r24	; 0x02
	_bmp280_calib.dig_T3 = spi_readS16(0x8C, BMP_CS);
    14ea:	63 e0       	ldi	r22, 0x03	; 3
    14ec:	70 e0       	ldi	r23, 0x00	; 0
    14ee:	8c e8       	ldi	r24, 0x8C	; 140
    14f0:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <spi_readS16>
    14f4:	9d 83       	std	Y+5, r25	; 0x05
    14f6:	8c 83       	std	Y+4, r24	; 0x04

	_bmp280_calib.dig_P1 = spi_read16(0x8E, BMP_CS);
    14f8:	63 e0       	ldi	r22, 0x03	; 3
    14fa:	70 e0       	ldi	r23, 0x00	; 0
    14fc:	8e e8       	ldi	r24, 0x8E	; 142
    14fe:	0e 94 31 37 	call	0x6e62	; 0x6e62 <spi_read16>
    1502:	9f 83       	std	Y+7, r25	; 0x07
    1504:	8e 83       	std	Y+6, r24	; 0x06
	_bmp280_calib.dig_P2 = spi_readS16(0x90, BMP_CS);
    1506:	63 e0       	ldi	r22, 0x03	; 3
    1508:	70 e0       	ldi	r23, 0x00	; 0
    150a:	80 e9       	ldi	r24, 0x90	; 144
    150c:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <spi_readS16>
    1510:	99 87       	std	Y+9, r25	; 0x09
    1512:	88 87       	std	Y+8, r24	; 0x08
	_bmp280_calib.dig_P3 = spi_readS16(0x92, BMP_CS);
    1514:	63 e0       	ldi	r22, 0x03	; 3
    1516:	70 e0       	ldi	r23, 0x00	; 0
    1518:	82 e9       	ldi	r24, 0x92	; 146
    151a:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <spi_readS16>
    151e:	9b 87       	std	Y+11, r25	; 0x0b
    1520:	8a 87       	std	Y+10, r24	; 0x0a
	_bmp280_calib.dig_P4 = spi_readS16(0x94, BMP_CS);
    1522:	63 e0       	ldi	r22, 0x03	; 3
    1524:	70 e0       	ldi	r23, 0x00	; 0
    1526:	84 e9       	ldi	r24, 0x94	; 148
    1528:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <spi_readS16>
    152c:	9d 87       	std	Y+13, r25	; 0x0d
    152e:	8c 87       	std	Y+12, r24	; 0x0c
	_bmp280_calib.dig_P5 = spi_readS16(0x96, BMP_CS);
    1530:	63 e0       	ldi	r22, 0x03	; 3
    1532:	70 e0       	ldi	r23, 0x00	; 0
    1534:	86 e9       	ldi	r24, 0x96	; 150
    1536:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <spi_readS16>
    153a:	9f 87       	std	Y+15, r25	; 0x0f
    153c:	8e 87       	std	Y+14, r24	; 0x0e
	_bmp280_calib.dig_P6 = spi_readS16(0x98, BMP_CS);
    153e:	63 e0       	ldi	r22, 0x03	; 3
    1540:	70 e0       	ldi	r23, 0x00	; 0
    1542:	88 e9       	ldi	r24, 0x98	; 152
    1544:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <spi_readS16>
    1548:	99 8b       	std	Y+17, r25	; 0x11
    154a:	88 8b       	std	Y+16, r24	; 0x10
	_bmp280_calib.dig_P7 = spi_readS16(0x9A, BMP_CS);
    154c:	63 e0       	ldi	r22, 0x03	; 3
    154e:	70 e0       	ldi	r23, 0x00	; 0
    1550:	8a e9       	ldi	r24, 0x9A	; 154
    1552:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <spi_readS16>
    1556:	9b 8b       	std	Y+19, r25	; 0x13
    1558:	8a 8b       	std	Y+18, r24	; 0x12
	_bmp280_calib.dig_P8 = spi_readS16(0x9C, BMP_CS);
    155a:	63 e0       	ldi	r22, 0x03	; 3
    155c:	70 e0       	ldi	r23, 0x00	; 0
    155e:	8c e9       	ldi	r24, 0x9C	; 156
    1560:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <spi_readS16>
    1564:	9d 8b       	std	Y+21, r25	; 0x15
    1566:	8c 8b       	std	Y+20, r24	; 0x14
	_bmp280_calib.dig_P9 = spi_readS16(0x9E, BMP_CS);
    1568:	63 e0       	ldi	r22, 0x03	; 3
    156a:	70 e0       	ldi	r23, 0x00	; 0
    156c:	8e e9       	ldi	r24, 0x9E	; 158
    156e:	0e 94 50 37 	call	0x6ea0	; 0x6ea0 <spi_readS16>
    1572:	9f 8b       	std	Y+23, r25	; 0x17
    1574:	8e 8b       	std	Y+22, r24	; 0x16
	spi_rwSPI(0xF4);
	spi_rwSPI(0b01010111);
	PORT_CS |= (1<<BMP_CS);
	
	readCalibration();
}
    1576:	df 91       	pop	r29
    1578:	cf 91       	pop	r28
    157a:	08 95       	ret

0000157c <bmp280_readPressure>:

float bmp280_readPressure()
{
    157c:	2f 92       	push	r2
    157e:	3f 92       	push	r3
    1580:	4f 92       	push	r4
    1582:	5f 92       	push	r5
    1584:	6f 92       	push	r6
    1586:	7f 92       	push	r7
    1588:	8f 92       	push	r8
    158a:	9f 92       	push	r9
    158c:	af 92       	push	r10
    158e:	bf 92       	push	r11
    1590:	cf 92       	push	r12
    1592:	df 92       	push	r13
    1594:	ef 92       	push	r14
    1596:	ff 92       	push	r15
    1598:	0f 93       	push	r16
    159a:	1f 93       	push	r17
    159c:	cf 93       	push	r28
    159e:	df 93       	push	r29
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
    15a4:	6f 97       	sbiw	r28, 0x1f	; 31
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	f8 94       	cli
    15aa:	de bf       	out	0x3e, r29	; 62
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[6]; // Array to hold temp/pressure values (pressure in indices 0:2, and temp in indices 3:5)
	uint32_t pressureUncomp, tempUncomp;
	
	spi_BurstRead(0xF7, data, 6, BMP_CS);
    15b0:	23 e0       	ldi	r18, 0x03	; 3
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	46 e0       	ldi	r20, 0x06	; 6
    15b6:	be 01       	movw	r22, r28
    15b8:	6f 5f       	subi	r22, 0xFF	; 255
    15ba:	7f 4f       	sbci	r23, 0xFF	; 255
    15bc:	87 ef       	ldi	r24, 0xF7	; 247
    15be:	0e 94 04 37 	call	0x6e08	; 0x6e08 <spi_BurstRead>
	tempUncomp = ((uint32_t)data[3]<<12) | ((uint32_t)data[4] << 4) | data[5]; // 20 bit temp val
	pressureUncomp = ((uint32_t)data[0]<<12) | ((uint32_t)data[1] << 4) | data[2]; // 20 bit pressure value
    15c2:	89 80       	ldd	r8, Y+1	; 0x01
    15c4:	8d 8e       	std	Y+29, r8	; 0x1d
    15c6:	9a 80       	ldd	r9, Y+2	; 0x02
    15c8:	9e 8e       	std	Y+30, r9	; 0x1e
    15ca:	8b 80       	ldd	r8, Y+3	; 0x03
    15cc:	8f 8e       	std	Y+31, r8	; 0x1f
	bmp280_compensate_T_int32(tempUncomp);
    15ce:	8c 81       	ldd	r24, Y+4	; 0x04
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	a0 e0       	ldi	r26, 0x00	; 0
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	ac 01       	movw	r20, r24
    15d8:	bd 01       	movw	r22, r26
    15da:	03 2e       	mov	r0, r19
    15dc:	3c e0       	ldi	r19, 0x0C	; 12
    15de:	44 0f       	add	r20, r20
    15e0:	55 1f       	adc	r21, r21
    15e2:	66 1f       	adc	r22, r22
    15e4:	77 1f       	adc	r23, r23
    15e6:	3a 95       	dec	r19
    15e8:	d1 f7       	brne	.-12     	; 0x15de <bmp280_readPressure+0x62>
    15ea:	30 2d       	mov	r19, r0
    15ec:	9d 81       	ldd	r25, Y+5	; 0x05
    15ee:	89 2f       	mov	r24, r25
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	a0 e0       	ldi	r26, 0x00	; 0
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	88 0f       	add	r24, r24
    15f8:	99 1f       	adc	r25, r25
    15fa:	aa 1f       	adc	r26, r26
    15fc:	bb 1f       	adc	r27, r27
    15fe:	88 0f       	add	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	aa 1f       	adc	r26, r26
    1604:	bb 1f       	adc	r27, r27
    1606:	88 0f       	add	r24, r24
    1608:	99 1f       	adc	r25, r25
    160a:	aa 1f       	adc	r26, r26
    160c:	bb 1f       	adc	r27, r27
    160e:	88 0f       	add	r24, r24
    1610:	99 1f       	adc	r25, r25
    1612:	aa 1f       	adc	r26, r26
    1614:	bb 1f       	adc	r27, r27
    1616:	84 2b       	or	r24, r20
    1618:	95 2b       	or	r25, r21
    161a:	a6 2b       	or	r26, r22
    161c:	b7 2b       	or	r27, r23
    161e:	2e 81       	ldd	r18, Y+6	; 0x06
    1620:	82 2b       	or	r24, r18
}

static float bmp280_compensate_T_int32(int32_t adc_T)
{
	int32_t var1, var2;
	var1 = ((((adc_T>>3) - ((int32_t)_bmp280_calib.dig_T1<<1))) * ((int32_t)_bmp280_calib.dig_T2)) >> 11;
    1622:	0f 2e       	mov	r0, r31
    1624:	f4 e1       	ldi	r31, 0x14	; 20
    1626:	6f 2e       	mov	r6, r31
    1628:	f3 e1       	ldi	r31, 0x13	; 19
    162a:	7f 2e       	mov	r7, r31
    162c:	f0 2d       	mov	r31, r0
    162e:	f3 01       	movw	r30, r6
    1630:	40 81       	ld	r20, Z
    1632:	51 81       	ldd	r21, Z+1	; 0x01
    1634:	60 e0       	ldi	r22, 0x00	; 0
    1636:	70 e0       	ldi	r23, 0x00	; 0
	var2 = (((((adc_T>>4) - ((int32_t)_bmp280_calib.dig_T1)) * ((adc_T>>4) - ((int32_t)_bmp280_calib.dig_T1))) >> 12) * ((int32_t)_bmp280_calib.dig_T3)) >> 14;
    1638:	6c 01       	movw	r12, r24
    163a:	7d 01       	movw	r14, r26
    163c:	68 94       	set
    163e:	13 f8       	bld	r1, 3
    1640:	f5 94       	asr	r15
    1642:	e7 94       	ror	r14
    1644:	d7 94       	ror	r13
    1646:	c7 94       	ror	r12
    1648:	16 94       	lsr	r1
    164a:	d1 f7       	brne	.-12     	; 0x1640 <bmp280_readPressure+0xc4>
    164c:	c4 1a       	sub	r12, r20
    164e:	d5 0a       	sbc	r13, r21
    1650:	e6 0a       	sbc	r14, r22
    1652:	f7 0a       	sbc	r15, r23
	t_fine = var1 + var2;
    1654:	68 94       	set
    1656:	12 f8       	bld	r1, 2
    1658:	b5 95       	asr	r27
    165a:	a7 95       	ror	r26
    165c:	97 95       	ror	r25
    165e:	87 95       	ror	r24
    1660:	16 94       	lsr	r1
    1662:	d1 f7       	brne	.-12     	; 0x1658 <bmp280_readPressure+0xdc>
    1664:	44 0f       	add	r20, r20
    1666:	55 1f       	adc	r21, r21
    1668:	66 1f       	adc	r22, r22
    166a:	77 1f       	adc	r23, r23
    166c:	4c 01       	movw	r8, r24
    166e:	5d 01       	movw	r10, r26
    1670:	84 1a       	sub	r8, r20
    1672:	95 0a       	sbc	r9, r21
    1674:	a6 0a       	sbc	r10, r22
    1676:	b7 0a       	sbc	r11, r23
    1678:	a5 01       	movw	r20, r10
    167a:	94 01       	movw	r18, r8
    167c:	a2 81       	ldd	r26, Z+2	; 0x02
    167e:	b3 81       	ldd	r27, Z+3	; 0x03
    1680:	0e 94 ee 40 	call	0x81dc	; 0x81dc <__mulshisi3>
    1684:	4b 01       	movw	r8, r22
    1686:	5c 01       	movw	r10, r24
    1688:	07 2e       	mov	r0, r23
    168a:	7b e0       	ldi	r23, 0x0B	; 11
    168c:	b5 94       	asr	r11
    168e:	a7 94       	ror	r10
    1690:	97 94       	ror	r9
    1692:	87 94       	ror	r8
    1694:	7a 95       	dec	r23
    1696:	d1 f7       	brne	.-12     	; 0x168c <bmp280_readPressure+0x110>
    1698:	70 2d       	mov	r23, r0
    169a:	a7 01       	movw	r20, r14
    169c:	96 01       	movw	r18, r12
    169e:	c7 01       	movw	r24, r14
    16a0:	b6 01       	movw	r22, r12
    16a2:	0e 94 88 40 	call	0x8110	; 0x8110 <__mulsi3>
    16a6:	9b 01       	movw	r18, r22
    16a8:	ac 01       	movw	r20, r24
    16aa:	01 2e       	mov	r0, r17
    16ac:	1c e0       	ldi	r17, 0x0C	; 12
    16ae:	55 95       	asr	r21
    16b0:	47 95       	ror	r20
    16b2:	37 95       	ror	r19
    16b4:	27 95       	ror	r18
    16b6:	1a 95       	dec	r17
    16b8:	d1 f7       	brne	.-12     	; 0x16ae <bmp280_readPressure+0x132>
    16ba:	10 2d       	mov	r17, r0
    16bc:	a4 81       	ldd	r26, Z+4	; 0x04
    16be:	b5 81       	ldd	r27, Z+5	; 0x05
    16c0:	0e 94 ee 40 	call	0x81dc	; 0x81dc <__mulshisi3>
    16c4:	dc 01       	movw	r26, r24
    16c6:	cb 01       	movw	r24, r22
    16c8:	07 2e       	mov	r0, r23
    16ca:	7e e0       	ldi	r23, 0x0E	; 14
    16cc:	b5 95       	asr	r27
    16ce:	a7 95       	ror	r26
    16d0:	97 95       	ror	r25
    16d2:	87 95       	ror	r24
    16d4:	7a 95       	dec	r23
    16d6:	d1 f7       	brne	.-12     	; 0x16cc <bmp280_readPressure+0x150>
    16d8:	70 2d       	mov	r23, r0
    16da:	88 0d       	add	r24, r8
    16dc:	99 1d       	adc	r25, r9
    16de:	aa 1d       	adc	r26, r10
    16e0:	bb 1d       	adc	r27, r11
    16e2:	80 93 35 13 	sts	0x1335, r24	; 0x801335 <t_fine>
    16e6:	90 93 36 13 	sts	0x1336, r25	; 0x801336 <t_fine+0x1>
    16ea:	a0 93 37 13 	sts	0x1337, r26	; 0x801337 <t_fine+0x2>
    16ee:	b0 93 38 13 	sts	0x1338, r27	; 0x801338 <t_fine+0x3>

static float bmp280_compensate_pressure(int32_t adc_P)
{
	int64_t var1, var2, p;

	var1 = ((int64_t)t_fine) - 128000;
    16f2:	6c 01       	movw	r12, r24
    16f4:	7d 01       	movw	r14, r26
    16f6:	ff 0c       	add	r15, r15
    16f8:	cc 08       	sbc	r12, r12
    16fa:	dc 2c       	mov	r13, r12
    16fc:	76 01       	movw	r14, r12
    16fe:	28 2f       	mov	r18, r24
    1700:	39 2f       	mov	r19, r25
    1702:	4a 2f       	mov	r20, r26
    1704:	5b 2f       	mov	r21, r27
    1706:	6c 2d       	mov	r22, r12
    1708:	7c 2d       	mov	r23, r12
    170a:	8c 2d       	mov	r24, r12
    170c:	9c 2d       	mov	r25, r12
    170e:	34 5f       	subi	r19, 0xF4	; 244
    1710:	41 40       	sbci	r20, 0x01	; 1
    1712:	51 09       	sbc	r21, r1
    1714:	61 09       	sbc	r22, r1
    1716:	71 09       	sbc	r23, r1
    1718:	81 09       	sbc	r24, r1
    171a:	91 09       	sbc	r25, r1
    171c:	2f 83       	std	Y+7, r18	; 0x07
    171e:	3a 87       	std	Y+10, r19	; 0x0a
    1720:	4b 87       	std	Y+11, r20	; 0x0b
    1722:	5c 87       	std	Y+12, r21	; 0x0c
    1724:	6d 87       	std	Y+13, r22	; 0x0d
    1726:	7e 87       	std	Y+14, r23	; 0x0e
    1728:	8f 87       	std	Y+15, r24	; 0x0f
    172a:	98 8b       	std	Y+16, r25	; 0x10
	var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
    172c:	a2 2e       	mov	r10, r18
    172e:	b3 2e       	mov	r11, r19
    1730:	c4 2e       	mov	r12, r20
    1732:	d5 2e       	mov	r13, r21
    1734:	e6 2e       	mov	r14, r22
    1736:	f7 2e       	mov	r15, r23
    1738:	08 2f       	mov	r16, r24
    173a:	19 2f       	mov	r17, r25
    173c:	0e 94 f4 40 	call	0x81e8	; 0x81e8 <__muldi3>
    1740:	29 8b       	std	Y+17, r18	; 0x11
    1742:	3a 8b       	std	Y+18, r19	; 0x12
    1744:	4b 8b       	std	Y+19, r20	; 0x13
    1746:	5c 8b       	std	Y+20, r21	; 0x14
    1748:	69 8f       	std	Y+25, r22	; 0x19
    174a:	7a 8f       	std	Y+26, r23	; 0x1a
    174c:	8b 8f       	std	Y+27, r24	; 0x1b
    174e:	9c 8f       	std	Y+28, r25	; 0x1c
	var2 = var2 + ((var1 * (int64_t)_bmp280_calib.dig_P5) << 17);
	var2 = var2 + (((int64_t)_bmp280_calib.dig_P4) << 35);
	var1 = ((var1 * var1 * (int64_t)_bmp280_calib.dig_P3) >> 8) +
	((var1 * (int64_t)_bmp280_calib.dig_P2) << 12);
    1750:	d3 01       	movw	r26, r6
    1752:	19 96       	adiw	r26, 0x09	; 9
    1754:	3c 91       	ld	r19, X
    1756:	19 97       	sbiw	r26, 0x09	; 9
    1758:	18 96       	adiw	r26, 0x08	; 8
    175a:	2c 91       	ld	r18, X
    175c:	93 2f       	mov	r25, r19
    175e:	99 0f       	add	r25, r25
    1760:	99 0b       	sbc	r25, r25
    1762:	49 2f       	mov	r20, r25
    1764:	59 2f       	mov	r21, r25
    1766:	69 2f       	mov	r22, r25
    1768:	79 2f       	mov	r23, r25
    176a:	89 2f       	mov	r24, r25
    176c:	0e 94 f4 40 	call	0x81e8	; 0x81e8 <__muldi3>
    1770:	0c e0       	ldi	r16, 0x0C	; 12
    1772:	0e 94 15 42 	call	0x842a	; 0x842a <__ashldi3>
    1776:	22 2e       	mov	r2, r18
    1778:	33 2e       	mov	r3, r19
    177a:	44 2e       	mov	r4, r20
    177c:	55 2e       	mov	r5, r21
    177e:	68 87       	std	Y+8, r22	; 0x08
    1780:	79 87       	std	Y+9, r23	; 0x09
    1782:	88 2e       	mov	r8, r24
    1784:	99 2e       	mov	r9, r25
	var1 =
	(((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;
    1786:	f3 01       	movw	r30, r6
    1788:	33 85       	ldd	r19, Z+11	; 0x0b
    178a:	22 85       	ldd	r18, Z+10	; 0x0a
    178c:	93 2f       	mov	r25, r19
    178e:	99 0f       	add	r25, r25
    1790:	99 0b       	sbc	r25, r25
    1792:	a9 88       	ldd	r10, Y+17	; 0x11
    1794:	ba 88       	ldd	r11, Y+18	; 0x12
    1796:	cb 88       	ldd	r12, Y+19	; 0x13
    1798:	dc 88       	ldd	r13, Y+20	; 0x14
    179a:	e9 8c       	ldd	r14, Y+25	; 0x19
    179c:	fa 8c       	ldd	r15, Y+26	; 0x1a
    179e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    17a0:	1c 8d       	ldd	r17, Y+28	; 0x1c
    17a2:	49 2f       	mov	r20, r25
    17a4:	59 2f       	mov	r21, r25
    17a6:	69 2f       	mov	r22, r25
    17a8:	79 2f       	mov	r23, r25
    17aa:	89 2f       	mov	r24, r25
    17ac:	0e 94 f4 40 	call	0x81e8	; 0x81e8 <__muldi3>
    17b0:	08 e0       	ldi	r16, 0x08	; 8
    17b2:	0e 94 2e 42 	call	0x845c	; 0x845c <__ashrdi3>
    17b6:	a2 2c       	mov	r10, r2
    17b8:	b3 2c       	mov	r11, r3
    17ba:	c4 2c       	mov	r12, r4
    17bc:	d5 2c       	mov	r13, r5
    17be:	e8 84       	ldd	r14, Y+8	; 0x08
    17c0:	f9 84       	ldd	r15, Y+9	; 0x09
    17c2:	08 2d       	mov	r16, r8
    17c4:	19 2d       	mov	r17, r9
    17c6:	0e 94 4c 42 	call	0x8498	; 0x8498 <__adddi3>
    17ca:	70 58       	subi	r23, 0x80	; 128
    17cc:	8f 4f       	sbci	r24, 0xFF	; 255
    17ce:	9f 4f       	sbci	r25, 0xFF	; 255
    17d0:	d3 01       	movw	r26, r6
    17d2:	16 96       	adiw	r26, 0x06	; 6
    17d4:	2d 90       	ld	r2, X+
    17d6:	3c 90       	ld	r3, X
    17d8:	17 97       	sbiw	r26, 0x07	; 7
    17da:	a2 2c       	mov	r10, r2
    17dc:	b3 2c       	mov	r11, r3
    17de:	c1 2c       	mov	r12, r1
    17e0:	d1 2c       	mov	r13, r1
    17e2:	e1 2c       	mov	r14, r1
    17e4:	f1 2c       	mov	r15, r1
    17e6:	00 e0       	ldi	r16, 0x00	; 0
    17e8:	10 e0       	ldi	r17, 0x00	; 0
    17ea:	0e 94 f4 40 	call	0x81e8	; 0x81e8 <__muldi3>
	var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
	var2 = var2 + ((var1 * (int64_t)_bmp280_calib.dig_P5) << 17);
	var2 = var2 + (((int64_t)_bmp280_calib.dig_P4) << 35);
	var1 = ((var1 * var1 * (int64_t)_bmp280_calib.dig_P3) >> 8) +
	((var1 * (int64_t)_bmp280_calib.dig_P2) << 12);
	var1 =
    17ee:	01 e2       	ldi	r16, 0x21	; 33
    17f0:	0e 94 2e 42 	call	0x845c	; 0x845c <__ashrdi3>
    17f4:	28 87       	std	Y+8, r18	; 0x08
    17f6:	39 87       	std	Y+9, r19	; 0x09
    17f8:	4d 8b       	std	Y+21, r20	; 0x15
    17fa:	5e 8b       	std	Y+22, r21	; 0x16
    17fc:	6f 8b       	std	Y+23, r22	; 0x17
    17fe:	78 8f       	std	Y+24, r23	; 0x18
    1800:	58 2e       	mov	r5, r24
    1802:	49 2e       	mov	r4, r25
	(((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;

	if (var1 == 0) {
    1804:	a0 e0       	ldi	r26, 0x00	; 0
    1806:	0e 94 5e 42 	call	0x84bc	; 0x84bc <__cmpdi2_s8>
    180a:	09 f4       	brne	.+2      	; 0x180e <bmp280_readPressure+0x292>
    180c:	65 c1       	rjmp	.+714    	; 0x1ad8 <bmp280_readPressure+0x55c>
static float bmp280_compensate_pressure(int32_t adc_P)
{
	int64_t var1, var2, p;

	var1 = ((int64_t)t_fine) - 128000;
	var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
    180e:	0f 2e       	mov	r0, r31
    1810:	f4 e1       	ldi	r31, 0x14	; 20
    1812:	2f 2e       	mov	r2, r31
    1814:	f3 e1       	ldi	r31, 0x13	; 19
    1816:	3f 2e       	mov	r3, r31
    1818:	f0 2d       	mov	r31, r0
    181a:	f1 01       	movw	r30, r2
    181c:	31 89       	ldd	r19, Z+17	; 0x11
    181e:	20 89       	ldd	r18, Z+16	; 0x10
    1820:	93 2f       	mov	r25, r19
    1822:	99 0f       	add	r25, r25
    1824:	99 0b       	sbc	r25, r25
    1826:	a9 88       	ldd	r10, Y+17	; 0x11
    1828:	ba 88       	ldd	r11, Y+18	; 0x12
    182a:	cb 88       	ldd	r12, Y+19	; 0x13
    182c:	dc 88       	ldd	r13, Y+20	; 0x14
    182e:	e9 8c       	ldd	r14, Y+25	; 0x19
    1830:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1832:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1834:	1c 8d       	ldd	r17, Y+28	; 0x1c
    1836:	49 2f       	mov	r20, r25
    1838:	59 2f       	mov	r21, r25
    183a:	69 2f       	mov	r22, r25
    183c:	79 2f       	mov	r23, r25
    183e:	89 2f       	mov	r24, r25
    1840:	0e 94 f4 40 	call	0x81e8	; 0x81e8 <__muldi3>
    1844:	29 8b       	std	Y+17, r18	; 0x11
    1846:	3a 8b       	std	Y+18, r19	; 0x12
    1848:	4b 8b       	std	Y+19, r20	; 0x13
    184a:	5c 8b       	std	Y+20, r21	; 0x14
    184c:	66 2e       	mov	r6, r22
    184e:	77 2e       	mov	r7, r23
    1850:	88 2e       	mov	r8, r24
    1852:	99 2e       	mov	r9, r25
	var2 = var2 + ((var1 * (int64_t)_bmp280_calib.dig_P5) << 17);
    1854:	d1 01       	movw	r26, r2
    1856:	1f 96       	adiw	r26, 0x0f	; 15
    1858:	3c 91       	ld	r19, X
    185a:	1f 97       	sbiw	r26, 0x0f	; 15
    185c:	1e 96       	adiw	r26, 0x0e	; 14
    185e:	2c 91       	ld	r18, X
    1860:	93 2f       	mov	r25, r19
    1862:	99 0f       	add	r25, r25
    1864:	99 0b       	sbc	r25, r25
    1866:	af 80       	ldd	r10, Y+7	; 0x07
    1868:	ba 84       	ldd	r11, Y+10	; 0x0a
    186a:	cb 84       	ldd	r12, Y+11	; 0x0b
    186c:	dc 84       	ldd	r13, Y+12	; 0x0c
    186e:	ed 84       	ldd	r14, Y+13	; 0x0d
    1870:	fe 84       	ldd	r15, Y+14	; 0x0e
    1872:	0f 85       	ldd	r16, Y+15	; 0x0f
    1874:	18 89       	ldd	r17, Y+16	; 0x10
    1876:	49 2f       	mov	r20, r25
    1878:	59 2f       	mov	r21, r25
    187a:	69 2f       	mov	r22, r25
    187c:	79 2f       	mov	r23, r25
    187e:	89 2f       	mov	r24, r25
    1880:	0e 94 f4 40 	call	0x81e8	; 0x81e8 <__muldi3>
    1884:	01 e1       	ldi	r16, 0x11	; 17
    1886:	0e 94 15 42 	call	0x842a	; 0x842a <__ashldi3>
    188a:	a9 88       	ldd	r10, Y+17	; 0x11
    188c:	ba 88       	ldd	r11, Y+18	; 0x12
    188e:	cb 88       	ldd	r12, Y+19	; 0x13
    1890:	dc 88       	ldd	r13, Y+20	; 0x14
    1892:	e6 2c       	mov	r14, r6
    1894:	f7 2c       	mov	r15, r7
    1896:	08 2d       	mov	r16, r8
    1898:	19 2d       	mov	r17, r9
    189a:	0e 94 4c 42 	call	0x8498	; 0x8498 <__adddi3>
    189e:	a2 2e       	mov	r10, r18
    18a0:	b3 2e       	mov	r11, r19
    18a2:	c4 2e       	mov	r12, r20
    18a4:	d5 2e       	mov	r13, r21
    18a6:	e6 2e       	mov	r14, r22
    18a8:	f7 2e       	mov	r15, r23
    18aa:	8f 83       	std	Y+7, r24	; 0x07
    18ac:	19 2f       	mov	r17, r25

	if (var1 == 0) {
		return 0; // avoid exception caused by division by zero
	}
	p = 1048576 - adc_P;
	p = (((p << 31) - var2) * 3125) / var1;
    18ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    18b0:	48 2d       	mov	r20, r8
    18b2:	50 e0       	ldi	r21, 0x00	; 0
    18b4:	60 e0       	ldi	r22, 0x00	; 0
    18b6:	70 e0       	ldi	r23, 0x00	; 0
    18b8:	db 01       	movw	r26, r22
    18ba:	ca 01       	movw	r24, r20
    18bc:	07 2e       	mov	r0, r23
    18be:	7c e0       	ldi	r23, 0x0C	; 12
    18c0:	88 0f       	add	r24, r24
    18c2:	99 1f       	adc	r25, r25
    18c4:	aa 1f       	adc	r26, r26
    18c6:	bb 1f       	adc	r27, r27
    18c8:	7a 95       	dec	r23
    18ca:	d1 f7       	brne	.-12     	; 0x18c0 <bmp280_readPressure+0x344>
    18cc:	70 2d       	mov	r23, r0
    18ce:	9e 8c       	ldd	r9, Y+30	; 0x1e
    18d0:	49 2d       	mov	r20, r9
    18d2:	50 e0       	ldi	r21, 0x00	; 0
    18d4:	60 e0       	ldi	r22, 0x00	; 0
    18d6:	70 e0       	ldi	r23, 0x00	; 0
    18d8:	44 0f       	add	r20, r20
    18da:	55 1f       	adc	r21, r21
    18dc:	66 1f       	adc	r22, r22
    18de:	77 1f       	adc	r23, r23
    18e0:	44 0f       	add	r20, r20
    18e2:	55 1f       	adc	r21, r21
    18e4:	66 1f       	adc	r22, r22
    18e6:	77 1f       	adc	r23, r23
    18e8:	44 0f       	add	r20, r20
    18ea:	55 1f       	adc	r21, r21
    18ec:	66 1f       	adc	r22, r22
    18ee:	77 1f       	adc	r23, r23
    18f0:	44 0f       	add	r20, r20
    18f2:	55 1f       	adc	r21, r21
    18f4:	66 1f       	adc	r22, r22
    18f6:	77 1f       	adc	r23, r23
    18f8:	48 2b       	or	r20, r24
    18fa:	59 2b       	or	r21, r25
    18fc:	6a 2b       	or	r22, r26
    18fe:	7b 2b       	or	r23, r27
    1900:	8f 8c       	ldd	r8, Y+31	; 0x1f
    1902:	48 29       	or	r20, r8
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	a0 e1       	ldi	r26, 0x10	; 16
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	84 1b       	sub	r24, r20
    190e:	95 0b       	sbc	r25, r21
    1910:	a6 0b       	sbc	r26, r22
    1912:	b7 0b       	sbc	r27, r23
    1914:	3c 01       	movw	r6, r24
    1916:	4d 01       	movw	r8, r26
    1918:	99 0c       	add	r9, r9
    191a:	66 08       	sbc	r6, r6
    191c:	76 2c       	mov	r7, r6
    191e:	43 01       	movw	r8, r6
    1920:	28 2f       	mov	r18, r24
    1922:	39 2f       	mov	r19, r25
    1924:	4a 2f       	mov	r20, r26
    1926:	5b 2f       	mov	r21, r27
    1928:	66 2d       	mov	r22, r6
    192a:	76 2d       	mov	r23, r6
    192c:	86 2d       	mov	r24, r6
    192e:	96 2d       	mov	r25, r6
    1930:	0f e1       	ldi	r16, 0x1F	; 31
    1932:	0e 94 15 42 	call	0x842a	; 0x842a <__ashldi3>
    1936:	62 2e       	mov	r6, r18
    1938:	73 2e       	mov	r7, r19
    193a:	84 2e       	mov	r8, r20
    193c:	95 2e       	mov	r9, r21
    193e:	b6 2f       	mov	r27, r22
    1940:	a7 2f       	mov	r26, r23
    1942:	8a 87       	std	Y+10, r24	; 0x0a
    1944:	9b 87       	std	Y+11, r25	; 0x0b
    1946:	f1 01       	movw	r30, r2
    1948:	35 85       	ldd	r19, Z+13	; 0x0d
    194a:	24 85       	ldd	r18, Z+12	; 0x0c
    194c:	93 2f       	mov	r25, r19
    194e:	99 0f       	add	r25, r25
    1950:	99 0b       	sbc	r25, r25
    1952:	49 2f       	mov	r20, r25
    1954:	59 2f       	mov	r21, r25
    1956:	69 2f       	mov	r22, r25
    1958:	79 2f       	mov	r23, r25
    195a:	89 2f       	mov	r24, r25
    195c:	03 e2       	ldi	r16, 0x23	; 35
    195e:	0e 94 15 42 	call	0x842a	; 0x842a <__ashldi3>
    1962:	0f 81       	ldd	r16, Y+7	; 0x07
    1964:	0e 94 4c 42 	call	0x8498	; 0x8498 <__adddi3>
    1968:	a2 2e       	mov	r10, r18
    196a:	b3 2e       	mov	r11, r19
    196c:	c4 2e       	mov	r12, r20
    196e:	d5 2e       	mov	r13, r21
    1970:	e6 2e       	mov	r14, r22
    1972:	f7 2e       	mov	r15, r23
    1974:	08 2f       	mov	r16, r24
    1976:	19 2f       	mov	r17, r25
    1978:	26 2d       	mov	r18, r6
    197a:	37 2d       	mov	r19, r7
    197c:	48 2d       	mov	r20, r8
    197e:	59 2d       	mov	r21, r9
    1980:	6b 2f       	mov	r22, r27
    1982:	7a 2f       	mov	r23, r26
    1984:	8a 85       	ldd	r24, Y+10	; 0x0a
    1986:	9b 85       	ldd	r25, Y+11	; 0x0b
    1988:	0e 94 55 42 	call	0x84aa	; 0x84aa <__subdi3>
    198c:	0f 2e       	mov	r0, r31
    198e:	f5 e3       	ldi	r31, 0x35	; 53
    1990:	af 2e       	mov	r10, r31
    1992:	f0 2d       	mov	r31, r0
    1994:	0f 2e       	mov	r0, r31
    1996:	fc e0       	ldi	r31, 0x0C	; 12
    1998:	bf 2e       	mov	r11, r31
    199a:	f0 2d       	mov	r31, r0
    199c:	c1 2c       	mov	r12, r1
    199e:	d1 2c       	mov	r13, r1
    19a0:	e1 2c       	mov	r14, r1
    19a2:	f1 2c       	mov	r15, r1
    19a4:	00 e0       	ldi	r16, 0x00	; 0
    19a6:	10 e0       	ldi	r17, 0x00	; 0
    19a8:	0e 94 f4 40 	call	0x81e8	; 0x81e8 <__muldi3>
    19ac:	a8 84       	ldd	r10, Y+8	; 0x08
    19ae:	b9 84       	ldd	r11, Y+9	; 0x09
    19b0:	cd 88       	ldd	r12, Y+21	; 0x15
    19b2:	de 88       	ldd	r13, Y+22	; 0x16
    19b4:	ef 88       	ldd	r14, Y+23	; 0x17
    19b6:	f8 8c       	ldd	r15, Y+24	; 0x18
    19b8:	05 2d       	mov	r16, r5
    19ba:	14 2d       	mov	r17, r4
    19bc:	0e 94 47 41 	call	0x828e	; 0x828e <__divdi3>
    19c0:	2f 83       	std	Y+7, r18	; 0x07
    19c2:	3a 87       	std	Y+10, r19	; 0x0a
    19c4:	4b 87       	std	Y+11, r20	; 0x0b
    19c6:	5c 87       	std	Y+12, r21	; 0x0c
    19c8:	6d 87       	std	Y+13, r22	; 0x0d
    19ca:	7e 87       	std	Y+14, r23	; 0x0e
    19cc:	8f 87       	std	Y+15, r24	; 0x0f
    19ce:	98 8b       	std	Y+16, r25	; 0x10
	var1 = (((int64_t)_bmp280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
    19d0:	0d e0       	ldi	r16, 0x0D	; 13
    19d2:	0e 94 2e 42 	call	0x845c	; 0x845c <__ashrdi3>
    19d6:	92 2e       	mov	r9, r18
    19d8:	83 2e       	mov	r8, r19
    19da:	74 2e       	mov	r7, r20
    19dc:	65 2e       	mov	r6, r21
    19de:	56 2e       	mov	r5, r22
    19e0:	47 2e       	mov	r4, r23
    19e2:	88 87       	std	Y+8, r24	; 0x08
    19e4:	99 87       	std	Y+9, r25	; 0x09
	var2 = (((int64_t)_bmp280_calib.dig_P8) * p) >> 19;

	p = ((p + var1 + var2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
    19e6:	d1 01       	movw	r26, r2
    19e8:	57 96       	adiw	r26, 0x17	; 23
    19ea:	3c 91       	ld	r19, X
    19ec:	57 97       	sbiw	r26, 0x17	; 23
    19ee:	56 96       	adiw	r26, 0x16	; 22
    19f0:	2c 91       	ld	r18, X
    19f2:	93 2f       	mov	r25, r19
    19f4:	99 0f       	add	r25, r25
    19f6:	99 0b       	sbc	r25, r25
    19f8:	a9 2c       	mov	r10, r9
    19fa:	b8 2c       	mov	r11, r8
    19fc:	c7 2c       	mov	r12, r7
    19fe:	d6 2c       	mov	r13, r6
    1a00:	e5 2c       	mov	r14, r5
    1a02:	f4 2c       	mov	r15, r4
    1a04:	08 2f       	mov	r16, r24
    1a06:	19 85       	ldd	r17, Y+9	; 0x09
    1a08:	49 2f       	mov	r20, r25
    1a0a:	59 2f       	mov	r21, r25
    1a0c:	69 2f       	mov	r22, r25
    1a0e:	79 2f       	mov	r23, r25
    1a10:	89 2f       	mov	r24, r25
    1a12:	0e 94 f4 40 	call	0x81e8	; 0x81e8 <__muldi3>
    1a16:	0e 94 f4 40 	call	0x81e8	; 0x81e8 <__muldi3>
    1a1a:	09 e1       	ldi	r16, 0x19	; 25
    1a1c:	0e 94 2e 42 	call	0x845c	; 0x845c <__ashrdi3>
    1a20:	af 80       	ldd	r10, Y+7	; 0x07
    1a22:	ba 84       	ldd	r11, Y+10	; 0x0a
    1a24:	cb 84       	ldd	r12, Y+11	; 0x0b
    1a26:	dc 84       	ldd	r13, Y+12	; 0x0c
    1a28:	ed 84       	ldd	r14, Y+13	; 0x0d
    1a2a:	fe 84       	ldd	r15, Y+14	; 0x0e
    1a2c:	0f 85       	ldd	r16, Y+15	; 0x0f
    1a2e:	18 89       	ldd	r17, Y+16	; 0x10
    1a30:	0e 94 4c 42 	call	0x8498	; 0x8498 <__adddi3>
    1a34:	28 87       	std	Y+8, r18	; 0x08
    1a36:	39 87       	std	Y+9, r19	; 0x09
    1a38:	44 2e       	mov	r4, r20
    1a3a:	55 2e       	mov	r5, r21
    1a3c:	66 2e       	mov	r6, r22
    1a3e:	77 2e       	mov	r7, r23
    1a40:	88 2e       	mov	r8, r24
    1a42:	99 2e       	mov	r9, r25
    1a44:	f1 01       	movw	r30, r2
    1a46:	35 89       	ldd	r19, Z+21	; 0x15
    1a48:	24 89       	ldd	r18, Z+20	; 0x14
    1a4a:	93 2f       	mov	r25, r19
    1a4c:	99 0f       	add	r25, r25
    1a4e:	99 0b       	sbc	r25, r25
    1a50:	49 2f       	mov	r20, r25
    1a52:	59 2f       	mov	r21, r25
    1a54:	69 2f       	mov	r22, r25
    1a56:	79 2f       	mov	r23, r25
    1a58:	89 2f       	mov	r24, r25
    1a5a:	0e 94 f4 40 	call	0x81e8	; 0x81e8 <__muldi3>
    1a5e:	03 e1       	ldi	r16, 0x13	; 19
    1a60:	0e 94 2e 42 	call	0x845c	; 0x845c <__ashrdi3>
    1a64:	a2 2e       	mov	r10, r18
    1a66:	b3 2e       	mov	r11, r19
    1a68:	c4 2e       	mov	r12, r20
    1a6a:	d5 2e       	mov	r13, r21
    1a6c:	e6 2e       	mov	r14, r22
    1a6e:	f7 2e       	mov	r15, r23
    1a70:	08 2f       	mov	r16, r24
    1a72:	19 2f       	mov	r17, r25
    1a74:	28 85       	ldd	r18, Y+8	; 0x08
    1a76:	39 85       	ldd	r19, Y+9	; 0x09
    1a78:	44 2d       	mov	r20, r4
    1a7a:	55 2d       	mov	r21, r5
    1a7c:	66 2d       	mov	r22, r6
    1a7e:	77 2d       	mov	r23, r7
    1a80:	88 2d       	mov	r24, r8
    1a82:	99 2d       	mov	r25, r9
    1a84:	0e 94 4c 42 	call	0x8498	; 0x8498 <__adddi3>
    1a88:	08 e0       	ldi	r16, 0x08	; 8
    1a8a:	0e 94 2e 42 	call	0x845c	; 0x845c <__ashrdi3>
    1a8e:	a2 2e       	mov	r10, r18
    1a90:	b3 2e       	mov	r11, r19
    1a92:	c4 2e       	mov	r12, r20
    1a94:	d5 2e       	mov	r13, r21
    1a96:	e6 2e       	mov	r14, r22
    1a98:	f7 2e       	mov	r15, r23
    1a9a:	e8 2f       	mov	r30, r24
    1a9c:	19 2f       	mov	r17, r25
	return (float)p / 256;
    1a9e:	d1 01       	movw	r26, r2
    1aa0:	53 96       	adiw	r26, 0x13	; 19
    1aa2:	3c 91       	ld	r19, X
    1aa4:	53 97       	sbiw	r26, 0x13	; 19
    1aa6:	52 96       	adiw	r26, 0x12	; 18
    1aa8:	2c 91       	ld	r18, X
    1aaa:	93 2f       	mov	r25, r19
    1aac:	99 0f       	add	r25, r25
    1aae:	99 0b       	sbc	r25, r25
    1ab0:	49 2f       	mov	r20, r25
    1ab2:	59 2f       	mov	r21, r25
    1ab4:	69 2f       	mov	r22, r25
    1ab6:	79 2f       	mov	r23, r25
    1ab8:	89 2f       	mov	r24, r25
    1aba:	04 e0       	ldi	r16, 0x04	; 4
    1abc:	0e 94 15 42 	call	0x842a	; 0x842a <__ashldi3>
    1ac0:	0e 2f       	mov	r16, r30
    1ac2:	0e 94 4c 42 	call	0x8498	; 0x8498 <__adddi3>
    1ac6:	0e 94 1d 3f 	call	0x7e3a	; 0x7e3a <__floatdisf>
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	40 e8       	ldi	r20, 0x80	; 128
    1ad0:	5b e3       	ldi	r21, 0x3B	; 59
    1ad2:	0e 94 25 40 	call	0x804a	; 0x804a <__mulsf3>
    1ad6:	03 c0       	rjmp	.+6      	; 0x1ade <bmp280_readPressure+0x562>
	((var1 * (int64_t)_bmp280_calib.dig_P2) << 12);
	var1 =
	(((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;

	if (var1 == 0) {
		return 0; // avoid exception caused by division by zero
    1ad8:	60 e0       	ldi	r22, 0x00	; 0
    1ada:	70 e0       	ldi	r23, 0x00	; 0
    1adc:	cb 01       	movw	r24, r22
	spi_BurstRead(0xF7, data, 6, BMP_CS);
	tempUncomp = ((uint32_t)data[3]<<12) | ((uint32_t)data[4] << 4) | data[5]; // 20 bit temp val
	pressureUncomp = ((uint32_t)data[0]<<12) | ((uint32_t)data[1] << 4) | data[2]; // 20 bit pressure value
	bmp280_compensate_T_int32(tempUncomp);
	return bmp280_compensate_pressure(pressureUncomp);
}
    1ade:	6f 96       	adiw	r28, 0x1f	; 31
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	f8 94       	cli
    1ae4:	de bf       	out	0x3e, r29	; 62
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	cd bf       	out	0x3d, r28	; 61
    1aea:	df 91       	pop	r29
    1aec:	cf 91       	pop	r28
    1aee:	1f 91       	pop	r17
    1af0:	0f 91       	pop	r16
    1af2:	ff 90       	pop	r15
    1af4:	ef 90       	pop	r14
    1af6:	df 90       	pop	r13
    1af8:	cf 90       	pop	r12
    1afa:	bf 90       	pop	r11
    1afc:	af 90       	pop	r10
    1afe:	9f 90       	pop	r9
    1b00:	8f 90       	pop	r8
    1b02:	7f 90       	pop	r7
    1b04:	6f 90       	pop	r6
    1b06:	5f 90       	pop	r5
    1b08:	4f 90       	pop	r4
    1b0a:	3f 90       	pop	r3
    1b0c:	2f 90       	pop	r2
    1b0e:	08 95       	ret

00001b10 <udp_client_check_for_dns_answer>:
}

// process the answer from the dns server:
// return 1 on sucessful processing of answer.
// We set also the variable haveDNSanswer
uint8_t udp_client_check_for_dns_answer(uint8_t *buf,uint16_t plen){
    1b10:	fc 01       	movw	r30, r24
        uint8_t j,i;
        if (plen<70){
    1b12:	66 34       	cpi	r22, 0x46	; 70
    1b14:	71 05       	cpc	r23, r1
    1b16:	08 f4       	brcc	.+2      	; 0x1b1a <udp_client_check_for_dns_answer+0xa>
    1b18:	73 c0       	rjmp	.+230    	; 0x1c00 <udp_client_check_for_dns_answer+0xf0>
                return(0);
        }
        if (buf[UDP_SRC_PORT_L_P]!=53){
    1b1a:	83 a1       	ldd	r24, Z+35	; 0x23
    1b1c:	85 33       	cpi	r24, 0x35	; 53
    1b1e:	09 f0       	breq	.+2      	; 0x1b22 <udp_client_check_for_dns_answer+0x12>
    1b20:	71 c0       	rjmp	.+226    	; 0x1c04 <udp_client_check_for_dns_answer+0xf4>
                // not from a DNS
                return(0);
        }
        if (buf[UDP_DST_PORT_H_P]!=DNSCLIENT_SRC_PORT_H){ 
    1b22:	84 a1       	ldd	r24, Z+36	; 0x24
    1b24:	80 3e       	cpi	r24, 0xE0	; 224
    1b26:	09 f0       	breq	.+2      	; 0x1b2a <udp_client_check_for_dns_answer+0x1a>
    1b28:	6f c0       	rjmp	.+222    	; 0x1c08 <udp_client_check_for_dns_answer+0xf8>
                return(0);
        }
        // we use the TID also as port:
        if (buf[UDP_DST_PORT_L_P]!=dnstid_l){ 
    1b2a:	85 a1       	ldd	r24, Z+37	; 0x25
    1b2c:	90 91 fe 04 	lds	r25, 0x04FE	; 0x8004fe <dnstid_l>
    1b30:	89 13       	cpse	r24, r25
    1b32:	6c c0       	rjmp	.+216    	; 0x1c0c <udp_client_check_for_dns_answer+0xfc>
        // is the packet for my IP:
        if(eth_type_is_ip_and_my_ip(buf,plen)==0){
                return(0);
        }
        */
        if (buf[UDP_DATA_P+1]!=dnstid_l){ 
    1b34:	93 a5       	ldd	r25, Z+43	; 0x2b
    1b36:	89 13       	cpse	r24, r25
    1b38:	6b c0       	rjmp	.+214    	; 0x1c10 <udp_client_check_for_dns_answer+0x100>
                return(0);
        }
        // check flags lower byte:
        if ((buf[UDP_DATA_P+3]&0x8F)!=0x80){ 
    1b3a:	85 a5       	ldd	r24, Z+45	; 0x2d
    1b3c:	8f 78       	andi	r24, 0x8F	; 143
    1b3e:	80 38       	cpi	r24, 0x80	; 128
    1b40:	29 f0       	breq	.+10     	; 0x1b4c <udp_client_check_for_dns_answer+0x3c>
                // there is an error or server does not support recursive
                // queries. We can only work with servers that support recursive
                // queries.
                dns_ansError=1;
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	80 93 f8 04 	sts	0x04F8, r24	; 0x8004f8 <__data_end>
                return(0);
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	08 95       	ret
        //
        // UDP_DATA_P+12+querylen is first byte of first answer.
        // The answer contains again the domain name and we need to
        // jump over it to find the IP. This part can be abbreviated by
        // the use of 2 byte pointers. See RFC 1035.
        i=12+buf[UDP_DATA_P]; // we encoded the query len into tid
    1b4c:	92 a5       	ldd	r25, Z+42	; 0x2a
    1b4e:	94 5f       	subi	r25, 0xF4	; 244
                // pointer
                i+=2;
        }else{
                // we just search for the first, zero=root domain
                // all other octets must be non zero
                while(i<plen-UDP_DATA_P-7){
    1b50:	61 53       	subi	r22, 0x31	; 49
    1b52:	71 09       	sbc	r23, r1
        // The answer contains again the domain name and we need to
        // jump over it to find the IP. This part can be abbreviated by
        // the use of 2 byte pointers. See RFC 1035.
        i=12+buf[UDP_DATA_P]; // we encoded the query len into tid
ChecNextResp:
        if (buf[UDP_DATA_P+i] & 0xc0){
    1b54:	df 01       	movw	r26, r30
    1b56:	a9 0f       	add	r26, r25
    1b58:	b1 1d       	adc	r27, r1
    1b5a:	9a 96       	adiw	r26, 0x2a	; 42
    1b5c:	8c 91       	ld	r24, X
    1b5e:	80 7c       	andi	r24, 0xC0	; 192
    1b60:	71 f0       	breq	.+28     	; 0x1b7e <udp_client_check_for_dns_answer+0x6e>
                // pointer
                i+=2;
    1b62:	9e 5f       	subi	r25, 0xFE	; 254
    1b64:	11 c0       	rjmp	.+34     	; 0x1b88 <udp_client_check_for_dns_answer+0x78>
        }else{
                // we just search for the first, zero=root domain
                // all other octets must be non zero
                while(i<plen-UDP_DATA_P-7){
                        i++;
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	89 0f       	add	r24, r25
                        if (buf[UDP_DATA_P+i]==0){
    1b6a:	df 01       	movw	r26, r30
    1b6c:	a8 0f       	add	r26, r24
    1b6e:	b1 1d       	adc	r27, r1
    1b70:	9a 96       	adiw	r26, 0x2a	; 42
    1b72:	2c 91       	ld	r18, X
    1b74:	21 11       	cpse	r18, r1
    1b76:	02 c0       	rjmp	.+4      	; 0x1b7c <udp_client_check_for_dns_answer+0x6c>
                                i++;
    1b78:	9e 5f       	subi	r25, 0xFE	; 254
                                break;
    1b7a:	06 c0       	rjmp	.+12     	; 0x1b88 <udp_client_check_for_dns_answer+0x78>
                i+=2;
        }else{
                // we just search for the first, zero=root domain
                // all other octets must be non zero
                while(i<plen-UDP_DATA_P-7){
                        i++;
    1b7c:	98 2f       	mov	r25, r24
                // pointer
                i+=2;
        }else{
                // we just search for the first, zero=root domain
                // all other octets must be non zero
                while(i<plen-UDP_DATA_P-7){
    1b7e:	29 2f       	mov	r18, r25
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	26 17       	cp	r18, r22
    1b84:	37 07       	cpc	r19, r23
    1b86:	78 f3       	brcs	.-34     	; 0x1b66 <udp_client_check_for_dns_answer+0x56>
                }
        }
        // There might be multipe records in the answer. 
        // We are searching for an A record (contains IP).
        // Contributed by Andras Tucsni
        if (buf[UDP_DATA_P+i+1] != 1){    // check type == 1 for "A"
    1b88:	29 2f       	mov	r18, r25
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	df 01       	movw	r26, r30
    1b8e:	a2 0f       	add	r26, r18
    1b90:	b3 1f       	adc	r27, r19
    1b92:	9b 96       	adiw	r26, 0x2b	; 43
    1b94:	8c 91       	ld	r24, X
    1b96:	81 30       	cpi	r24, 0x01	; 1
    1b98:	99 f0       	breq	.+38     	; 0x1bc0 <udp_client_check_for_dns_answer+0xb0>
                i += 2 + 2 + 4;    // skip type & class & TTL
                i += buf[UDP_DATA_P+i+1] + 2;    // skip datalength bytes
    1b9a:	88 e0       	ldi	r24, 0x08	; 8
    1b9c:	89 0f       	add	r24, r25
    1b9e:	df 01       	movw	r26, r30
    1ba0:	a8 0f       	add	r26, r24
    1ba2:	b1 1d       	adc	r27, r1
    1ba4:	9b 96       	adiw	r26, 0x2b	; 43
    1ba6:	8c 91       	ld	r24, X
    1ba8:	96 5f       	subi	r25, 0xF6	; 246
    1baa:	98 0f       	add	r25, r24
                if (i < plen-UDP_DATA_P-7){
    1bac:	29 2f       	mov	r18, r25
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	26 17       	cp	r18, r22
    1bb2:	37 07       	cpc	r19, r23
    1bb4:	78 f2       	brcs	.-98     	; 0x1b54 <udp_client_check_for_dns_answer+0x44>
                        goto ChecNextResp;
                }
                dns_ansError=3; // no A record found but packet ends 
    1bb6:	83 e0       	ldi	r24, 0x03	; 3
    1bb8:	80 93 f8 04 	sts	0x04F8, r24	; 0x8004f8 <__data_end>
                return(0);
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	08 95       	ret
        } 
        // We have an A record
        // i is now pointing to the high octet of the type field
        if (buf[UDP_DATA_P+i+9] !=4 ){
    1bc0:	df 01       	movw	r26, r30
    1bc2:	a2 0f       	add	r26, r18
    1bc4:	b3 1f       	adc	r27, r19
    1bc6:	d3 96       	adiw	r26, 0x33	; 51
    1bc8:	2c 91       	ld	r18, X
    1bca:	24 30       	cpi	r18, 0x04	; 4
    1bcc:	29 f0       	breq	.+10     	; 0x1bd8 <udp_client_check_for_dns_answer+0xc8>
                dns_ansError=2; // not IPv4
    1bce:	82 e0       	ldi	r24, 0x02	; 2
    1bd0:	80 93 f8 04 	sts	0x04F8, r24	; 0x8004f8 <__data_end>
                return(0);
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	08 95       	ret
    1bd8:	2a e0       	ldi	r18, 0x0A	; 10
    1bda:	29 0f       	add	r18, r25
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	26 5d       	subi	r18, 0xD6	; 214
    1be0:	3f 4f       	sbci	r19, 0xFF	; 255
    1be2:	e2 0f       	add	r30, r18
    1be4:	f3 1f       	adc	r31, r19
    1be6:	a9 ef       	ldi	r26, 0xF9	; 249
    1be8:	b4 e0       	ldi	r27, 0x04	; 4
    1bea:	2d ef       	ldi	r18, 0xFD	; 253
    1bec:	34 e0       	ldi	r19, 0x04	; 4
        }
        i+=10;
        j=0;
        while(j<4){
                dns_answerip[j]=buf[UDP_DATA_P+i+j];
    1bee:	91 91       	ld	r25, Z+
    1bf0:	9d 93       	st	X+, r25
                dns_ansError=2; // not IPv4
                return(0);
        }
        i+=10;
        j=0;
        while(j<4){
    1bf2:	a2 17       	cp	r26, r18
    1bf4:	b3 07       	cpc	r27, r19
    1bf6:	d9 f7       	brne	.-10     	; 0x1bee <udp_client_check_for_dns_answer+0xde>
                dns_answerip[j]=buf[UDP_DATA_P+i+j];
                j++;
        }
        haveDNSanswer=1;
    1bf8:	91 e0       	ldi	r25, 0x01	; 1
    1bfa:	90 93 fd 04 	sts	0x04FD, r25	; 0x8004fd <haveDNSanswer>
        return(1);
    1bfe:	08 95       	ret
// return 1 on sucessful processing of answer.
// We set also the variable haveDNSanswer
uint8_t udp_client_check_for_dns_answer(uint8_t *buf,uint16_t plen){
        uint8_t j,i;
        if (plen<70){
                return(0);
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	08 95       	ret
        }
        if (buf[UDP_SRC_PORT_L_P]!=53){
                // not from a DNS
                return(0);
    1c04:	80 e0       	ldi	r24, 0x00	; 0
    1c06:	08 95       	ret
        }
        if (buf[UDP_DST_PORT_H_P]!=DNSCLIENT_SRC_PORT_H){ 
                return(0);
    1c08:	80 e0       	ldi	r24, 0x00	; 0
    1c0a:	08 95       	ret
        }
        // we use the TID also as port:
        if (buf[UDP_DST_PORT_L_P]!=dnstid_l){ 
                return(0);
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	08 95       	ret
        if(eth_type_is_ip_and_my_ip(buf,plen)==0){
                return(0);
        }
        */
        if (buf[UDP_DATA_P+1]!=dnstid_l){ 
                return(0);
    1c10:	80 e0       	ldi	r24, 0x00	; 0
                dns_answerip[j]=buf[UDP_DATA_P+i+j];
                j++;
        }
        haveDNSanswer=1;
        return(1);
}
    1c12:	08 95       	ret

00001c14 <enc28j60ReadOp>:
{
	if( enc28j60Read(EPKTCNT) ==0 ){
		return(0);
        }
        return(1);
}
    1c14:	2a 98       	cbi	0x05, 2	; 5
    1c16:	96 2f       	mov	r25, r22
    1c18:	6f 71       	andi	r22, 0x1F	; 31
    1c1a:	86 2b       	or	r24, r22
    1c1c:	8e bd       	out	0x2e, r24	; 46
    1c1e:	0d b4       	in	r0, 0x2d	; 45
    1c20:	07 fe       	sbrs	r0, 7
    1c22:	fd cf       	rjmp	.-6      	; 0x1c1e <enc28j60ReadOp+0xa>
    1c24:	1e bc       	out	0x2e, r1	; 46
    1c26:	0d b4       	in	r0, 0x2d	; 45
    1c28:	07 fe       	sbrs	r0, 7
    1c2a:	fd cf       	rjmp	.-6      	; 0x1c26 <enc28j60ReadOp+0x12>
    1c2c:	99 23       	and	r25, r25
    1c2e:	24 f4       	brge	.+8      	; 0x1c38 <enc28j60ReadOp+0x24>
    1c30:	1e bc       	out	0x2e, r1	; 46
    1c32:	0d b4       	in	r0, 0x2d	; 45
    1c34:	07 fe       	sbrs	r0, 7
    1c36:	fd cf       	rjmp	.-6      	; 0x1c32 <enc28j60ReadOp+0x1e>
    1c38:	2a 9a       	sbi	0x05, 2	; 5
    1c3a:	8e b5       	in	r24, 0x2e	; 46
    1c3c:	08 95       	ret

00001c3e <enc28j60WriteOp>:
    1c3e:	2a 98       	cbi	0x05, 2	; 5
    1c40:	6f 71       	andi	r22, 0x1F	; 31
    1c42:	86 2b       	or	r24, r22
    1c44:	8e bd       	out	0x2e, r24	; 46
    1c46:	0d b4       	in	r0, 0x2d	; 45
    1c48:	07 fe       	sbrs	r0, 7
    1c4a:	fd cf       	rjmp	.-6      	; 0x1c46 <enc28j60WriteOp+0x8>
    1c4c:	4e bd       	out	0x2e, r20	; 46
    1c4e:	0d b4       	in	r0, 0x2d	; 45
    1c50:	07 fe       	sbrs	r0, 7
    1c52:	fd cf       	rjmp	.-6      	; 0x1c4e <enc28j60WriteOp+0x10>
    1c54:	2a 9a       	sbi	0x05, 2	; 5
    1c56:	08 95       	ret

00001c58 <enc28j60ReadBuffer>:
    1c58:	fb 01       	movw	r30, r22
    1c5a:	2a 98       	cbi	0x05, 2	; 5
    1c5c:	2a e3       	ldi	r18, 0x3A	; 58
    1c5e:	2e bd       	out	0x2e, r18	; 46
    1c60:	0d b4       	in	r0, 0x2d	; 45
    1c62:	07 fe       	sbrs	r0, 7
    1c64:	fd cf       	rjmp	.-6      	; 0x1c60 <enc28j60ReadBuffer+0x8>
    1c66:	00 97       	sbiw	r24, 0x00	; 0
    1c68:	69 f0       	breq	.+26     	; 0x1c84 <enc28j60ReadBuffer+0x2c>
    1c6a:	df 01       	movw	r26, r30
    1c6c:	a8 0f       	add	r26, r24
    1c6e:	b9 1f       	adc	r27, r25
    1c70:	1e bc       	out	0x2e, r1	; 46
    1c72:	0d b4       	in	r0, 0x2d	; 45
    1c74:	07 fe       	sbrs	r0, 7
    1c76:	fd cf       	rjmp	.-6      	; 0x1c72 <enc28j60ReadBuffer+0x1a>
    1c78:	9e b5       	in	r25, 0x2e	; 46
    1c7a:	91 93       	st	Z+, r25
    1c7c:	ea 17       	cp	r30, r26
    1c7e:	fb 07       	cpc	r31, r27
    1c80:	b9 f7       	brne	.-18     	; 0x1c70 <enc28j60ReadBuffer+0x18>
    1c82:	01 c0       	rjmp	.+2      	; 0x1c86 <enc28j60ReadBuffer+0x2e>
    1c84:	df 01       	movw	r26, r30
    1c86:	1c 92       	st	X, r1
    1c88:	2a 9a       	sbi	0x05, 2	; 5
    1c8a:	08 95       	ret

00001c8c <enc28j60WriteBuffer>:
    1c8c:	fb 01       	movw	r30, r22
    1c8e:	2a 98       	cbi	0x05, 2	; 5
    1c90:	2a e7       	ldi	r18, 0x7A	; 122
    1c92:	2e bd       	out	0x2e, r18	; 46
    1c94:	0d b4       	in	r0, 0x2d	; 45
    1c96:	07 fe       	sbrs	r0, 7
    1c98:	fd cf       	rjmp	.-6      	; 0x1c94 <enc28j60WriteBuffer+0x8>
    1c9a:	09 c0       	rjmp	.+18     	; 0x1cae <enc28j60WriteBuffer+0x22>
    1c9c:	9f 01       	movw	r18, r30
    1c9e:	28 0f       	add	r18, r24
    1ca0:	39 1f       	adc	r19, r25
    1ca2:	91 91       	ld	r25, Z+
    1ca4:	9e bd       	out	0x2e, r25	; 46
    1ca6:	0d b4       	in	r0, 0x2d	; 45
    1ca8:	07 fe       	sbrs	r0, 7
    1caa:	fd cf       	rjmp	.-6      	; 0x1ca6 <enc28j60WriteBuffer+0x1a>
    1cac:	03 c0       	rjmp	.+6      	; 0x1cb4 <enc28j60WriteBuffer+0x28>
    1cae:	00 97       	sbiw	r24, 0x00	; 0
    1cb0:	a9 f7       	brne	.-22     	; 0x1c9c <enc28j60WriteBuffer+0x10>
    1cb2:	03 c0       	rjmp	.+6      	; 0x1cba <enc28j60WriteBuffer+0x2e>
    1cb4:	2e 17       	cp	r18, r30
    1cb6:	3f 07       	cpc	r19, r31
    1cb8:	a1 f7       	brne	.-24     	; 0x1ca2 <enc28j60WriteBuffer+0x16>
    1cba:	2a 9a       	sbi	0x05, 2	; 5
    1cbc:	08 95       	ret

00001cbe <enc28j60SetBank>:
    1cbe:	1f 93       	push	r17
    1cc0:	cf 93       	push	r28
    1cc2:	df 93       	push	r29
    1cc4:	18 2f       	mov	r17, r24
    1cc6:	10 76       	andi	r17, 0x60	; 96
    1cc8:	c1 2f       	mov	r28, r17
    1cca:	d0 e0       	ldi	r29, 0x00	; 0
    1ccc:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <Enc28j60Bank>
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	c8 17       	cp	r28, r24
    1cd4:	d9 07       	cpc	r29, r25
    1cd6:	a1 f0       	breq	.+40     	; 0x1d00 <enc28j60SetBank+0x42>
    1cd8:	43 e0       	ldi	r20, 0x03	; 3
    1cda:	6f e1       	ldi	r22, 0x1F	; 31
    1cdc:	80 ea       	ldi	r24, 0xA0	; 160
    1cde:	af df       	rcall	.-162    	; 0x1c3e <enc28j60WriteOp>
    1ce0:	ae 01       	movw	r20, r28
    1ce2:	55 95       	asr	r21
    1ce4:	47 95       	ror	r20
    1ce6:	55 95       	asr	r21
    1ce8:	47 95       	ror	r20
    1cea:	55 95       	asr	r21
    1cec:	47 95       	ror	r20
    1cee:	55 95       	asr	r21
    1cf0:	47 95       	ror	r20
    1cf2:	55 95       	asr	r21
    1cf4:	47 95       	ror	r20
    1cf6:	6f e1       	ldi	r22, 0x1F	; 31
    1cf8:	80 e8       	ldi	r24, 0x80	; 128
    1cfa:	a1 df       	rcall	.-190    	; 0x1c3e <enc28j60WriteOp>
    1cfc:	10 93 01 05 	sts	0x0501, r17	; 0x800501 <Enc28j60Bank>
    1d00:	df 91       	pop	r29
    1d02:	cf 91       	pop	r28
    1d04:	1f 91       	pop	r17
    1d06:	08 95       	ret

00001d08 <enc28j60Read>:
    1d08:	cf 93       	push	r28
    1d0a:	c8 2f       	mov	r28, r24
    1d0c:	d8 df       	rcall	.-80     	; 0x1cbe <enc28j60SetBank>
    1d0e:	6c 2f       	mov	r22, r28
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	80 df       	rcall	.-256    	; 0x1c14 <enc28j60ReadOp>
    1d14:	cf 91       	pop	r28
    1d16:	08 95       	ret

00001d18 <enc28j60Write>:
    1d18:	cf 93       	push	r28
    1d1a:	df 93       	push	r29
    1d1c:	c8 2f       	mov	r28, r24
    1d1e:	d6 2f       	mov	r29, r22
    1d20:	ce df       	rcall	.-100    	; 0x1cbe <enc28j60SetBank>
    1d22:	4d 2f       	mov	r20, r29
    1d24:	6c 2f       	mov	r22, r28
    1d26:	80 e4       	ldi	r24, 0x40	; 64
    1d28:	8a df       	rcall	.-236    	; 0x1c3e <enc28j60WriteOp>
    1d2a:	df 91       	pop	r29
    1d2c:	cf 91       	pop	r28
    1d2e:	08 95       	ret

00001d30 <enc28j60PhyRead>:
    1d30:	cf 93       	push	r28
    1d32:	68 2f       	mov	r22, r24
    1d34:	84 ed       	ldi	r24, 0xD4	; 212
    1d36:	f0 df       	rcall	.-32     	; 0x1d18 <enc28j60Write>
    1d38:	61 e0       	ldi	r22, 0x01	; 1
    1d3a:	82 ed       	ldi	r24, 0xD2	; 210
    1d3c:	ed df       	rcall	.-38     	; 0x1d18 <enc28j60Write>
    1d3e:	8a ee       	ldi	r24, 0xEA	; 234
    1d40:	e3 df       	rcall	.-58     	; 0x1d08 <enc28j60Read>
    1d42:	80 fd       	sbrc	r24, 0
    1d44:	fc cf       	rjmp	.-8      	; 0x1d3e <enc28j60PhyRead+0xe>
    1d46:	60 e0       	ldi	r22, 0x00	; 0
    1d48:	82 ed       	ldi	r24, 0xD2	; 210
    1d4a:	e6 df       	rcall	.-52     	; 0x1d18 <enc28j60Write>
    1d4c:	89 ed       	ldi	r24, 0xD9	; 217
    1d4e:	dc df       	rcall	.-72     	; 0x1d08 <enc28j60Read>
    1d50:	c8 2f       	mov	r28, r24
    1d52:	88 ed       	ldi	r24, 0xD8	; 216
    1d54:	d9 df       	rcall	.-78     	; 0x1d08 <enc28j60Read>
    1d56:	2c 2f       	mov	r18, r28
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	32 2f       	mov	r19, r18
    1d5c:	22 27       	eor	r18, r18
    1d5e:	a9 01       	movw	r20, r18
    1d60:	48 2b       	or	r20, r24
    1d62:	ca 01       	movw	r24, r20
    1d64:	cf 91       	pop	r28
    1d66:	08 95       	ret

00001d68 <enc28j60PhyWrite>:
    1d68:	cf 93       	push	r28
    1d6a:	df 93       	push	r29
    1d6c:	d6 2f       	mov	r29, r22
    1d6e:	c7 2f       	mov	r28, r23
    1d70:	68 2f       	mov	r22, r24
    1d72:	84 ed       	ldi	r24, 0xD4	; 212
    1d74:	d1 df       	rcall	.-94     	; 0x1d18 <enc28j60Write>
    1d76:	6d 2f       	mov	r22, r29
    1d78:	86 ed       	ldi	r24, 0xD6	; 214
    1d7a:	ce df       	rcall	.-100    	; 0x1d18 <enc28j60Write>
    1d7c:	6c 2f       	mov	r22, r28
    1d7e:	87 ed       	ldi	r24, 0xD7	; 215
    1d80:	cb df       	rcall	.-106    	; 0x1d18 <enc28j60Write>
    1d82:	c8 e2       	ldi	r28, 0x28	; 40
    1d84:	03 c0       	rjmp	.+6      	; 0x1d8c <enc28j60PhyWrite+0x24>
    1d86:	8c 2f       	mov	r24, r28
    1d88:	8a 95       	dec	r24
    1d8a:	f1 f7       	brne	.-4      	; 0x1d88 <enc28j60PhyWrite+0x20>
    1d8c:	8a ee       	ldi	r24, 0xEA	; 234
    1d8e:	bc df       	rcall	.-136    	; 0x1d08 <enc28j60Read>
    1d90:	80 fd       	sbrc	r24, 0
    1d92:	f9 cf       	rjmp	.-14     	; 0x1d86 <enc28j60PhyWrite+0x1e>
    1d94:	df 91       	pop	r29
    1d96:	cf 91       	pop	r28
    1d98:	08 95       	ret

00001d9a <enc28j60clkout>:
    1d9a:	68 2f       	mov	r22, r24
    1d9c:	67 70       	andi	r22, 0x07	; 7
    1d9e:	85 e7       	ldi	r24, 0x75	; 117
    1da0:	bb cf       	rjmp	.-138    	; 0x1d18 <enc28j60Write>
    1da2:	08 95       	ret

00001da4 <enc28j60Init>:
    1da4:	cf 93       	push	r28
    1da6:	df 93       	push	r29
    1da8:	ec 01       	movw	r28, r24
    1daa:	22 9a       	sbi	0x04, 2	; 4
    1dac:	2a 9a       	sbi	0x05, 2	; 5
    1dae:	4f ef       	ldi	r20, 0xFF	; 255
    1db0:	60 e0       	ldi	r22, 0x00	; 0
    1db2:	8f ef       	ldi	r24, 0xFF	; 255
    1db4:	44 df       	rcall	.-376    	; 0x1c3e <enc28j60WriteOp>
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	f1 f7       	brne	.-4      	; 0x1dba <enc28j60Init+0x16>
    1dbe:	10 92 00 05 	sts	0x0500, r1	; 0x800500 <gNextPacketPtr+0x1>
    1dc2:	10 92 ff 04 	sts	0x04FF, r1	; 0x8004ff <gNextPacketPtr>
    1dc6:	60 e0       	ldi	r22, 0x00	; 0
    1dc8:	88 e0       	ldi	r24, 0x08	; 8
    1dca:	a6 df       	rcall	.-180    	; 0x1d18 <enc28j60Write>
    1dcc:	60 e0       	ldi	r22, 0x00	; 0
    1dce:	89 e0       	ldi	r24, 0x09	; 9
    1dd0:	a3 df       	rcall	.-186    	; 0x1d18 <enc28j60Write>
    1dd2:	60 e0       	ldi	r22, 0x00	; 0
    1dd4:	8c e0       	ldi	r24, 0x0C	; 12
    1dd6:	a0 df       	rcall	.-192    	; 0x1d18 <enc28j60Write>
    1dd8:	60 e0       	ldi	r22, 0x00	; 0
    1dda:	8d e0       	ldi	r24, 0x0D	; 13
    1ddc:	9d df       	rcall	.-198    	; 0x1d18 <enc28j60Write>
    1dde:	6f ef       	ldi	r22, 0xFF	; 255
    1de0:	8a e0       	ldi	r24, 0x0A	; 10
    1de2:	9a df       	rcall	.-204    	; 0x1d18 <enc28j60Write>
    1de4:	69 e1       	ldi	r22, 0x19	; 25
    1de6:	8b e0       	ldi	r24, 0x0B	; 11
    1de8:	97 df       	rcall	.-210    	; 0x1d18 <enc28j60Write>
    1dea:	60 e0       	ldi	r22, 0x00	; 0
    1dec:	84 e0       	ldi	r24, 0x04	; 4
    1dee:	94 df       	rcall	.-216    	; 0x1d18 <enc28j60Write>
    1df0:	6a e1       	ldi	r22, 0x1A	; 26
    1df2:	85 e0       	ldi	r24, 0x05	; 5
    1df4:	91 df       	rcall	.-222    	; 0x1d18 <enc28j60Write>
    1df6:	6f ef       	ldi	r22, 0xFF	; 255
    1df8:	86 e0       	ldi	r24, 0x06	; 6
    1dfa:	8e df       	rcall	.-228    	; 0x1d18 <enc28j60Write>
    1dfc:	6f e1       	ldi	r22, 0x1F	; 31
    1dfe:	87 e0       	ldi	r24, 0x07	; 7
    1e00:	8b df       	rcall	.-234    	; 0x1d18 <enc28j60Write>
    1e02:	60 eb       	ldi	r22, 0xB0	; 176
    1e04:	88 e3       	ldi	r24, 0x38	; 56
    1e06:	88 df       	rcall	.-240    	; 0x1d18 <enc28j60Write>
    1e08:	6f e3       	ldi	r22, 0x3F	; 63
    1e0a:	88 e2       	ldi	r24, 0x28	; 40
    1e0c:	85 df       	rcall	.-246    	; 0x1d18 <enc28j60Write>
    1e0e:	60 e3       	ldi	r22, 0x30	; 48
    1e10:	89 e2       	ldi	r24, 0x29	; 41
    1e12:	82 df       	rcall	.-252    	; 0x1d18 <enc28j60Write>
    1e14:	69 ef       	ldi	r22, 0xF9	; 249
    1e16:	80 e3       	ldi	r24, 0x30	; 48
    1e18:	7f df       	rcall	.-258    	; 0x1d18 <enc28j60Write>
    1e1a:	67 ef       	ldi	r22, 0xF7	; 247
    1e1c:	81 e3       	ldi	r24, 0x31	; 49
    1e1e:	7c df       	rcall	.-264    	; 0x1d18 <enc28j60Write>
    1e20:	6d e0       	ldi	r22, 0x0D	; 13
    1e22:	80 ec       	ldi	r24, 0xC0	; 192
    1e24:	79 df       	rcall	.-270    	; 0x1d18 <enc28j60Write>
    1e26:	60 e0       	ldi	r22, 0x00	; 0
    1e28:	81 ec       	ldi	r24, 0xC1	; 193
    1e2a:	76 df       	rcall	.-276    	; 0x1d18 <enc28j60Write>
    1e2c:	42 e3       	ldi	r20, 0x32	; 50
    1e2e:	62 ec       	ldi	r22, 0xC2	; 194
    1e30:	80 e8       	ldi	r24, 0x80	; 128
    1e32:	05 df       	rcall	.-502    	; 0x1c3e <enc28j60WriteOp>
    1e34:	62 e1       	ldi	r22, 0x12	; 18
    1e36:	86 ec       	ldi	r24, 0xC6	; 198
    1e38:	6f df       	rcall	.-290    	; 0x1d18 <enc28j60Write>
    1e3a:	6c e0       	ldi	r22, 0x0C	; 12
    1e3c:	87 ec       	ldi	r24, 0xC7	; 199
    1e3e:	6c df       	rcall	.-296    	; 0x1d18 <enc28j60Write>
    1e40:	62 e1       	ldi	r22, 0x12	; 18
    1e42:	84 ec       	ldi	r24, 0xC4	; 196
    1e44:	69 df       	rcall	.-302    	; 0x1d18 <enc28j60Write>
    1e46:	6c ed       	ldi	r22, 0xDC	; 220
    1e48:	8a ec       	ldi	r24, 0xCA	; 202
    1e4a:	66 df       	rcall	.-308    	; 0x1d18 <enc28j60Write>
    1e4c:	65 e0       	ldi	r22, 0x05	; 5
    1e4e:	8b ec       	ldi	r24, 0xCB	; 203
    1e50:	63 df       	rcall	.-314    	; 0x1d18 <enc28j60Write>
    1e52:	68 81       	ld	r22, Y
    1e54:	84 ee       	ldi	r24, 0xE4	; 228
    1e56:	60 df       	rcall	.-320    	; 0x1d18 <enc28j60Write>
    1e58:	69 81       	ldd	r22, Y+1	; 0x01
    1e5a:	85 ee       	ldi	r24, 0xE5	; 229
    1e5c:	5d df       	rcall	.-326    	; 0x1d18 <enc28j60Write>
    1e5e:	6a 81       	ldd	r22, Y+2	; 0x02
    1e60:	82 ee       	ldi	r24, 0xE2	; 226
    1e62:	5a df       	rcall	.-332    	; 0x1d18 <enc28j60Write>
    1e64:	6b 81       	ldd	r22, Y+3	; 0x03
    1e66:	83 ee       	ldi	r24, 0xE3	; 227
    1e68:	57 df       	rcall	.-338    	; 0x1d18 <enc28j60Write>
    1e6a:	6c 81       	ldd	r22, Y+4	; 0x04
    1e6c:	80 ee       	ldi	r24, 0xE0	; 224
    1e6e:	54 df       	rcall	.-344    	; 0x1d18 <enc28j60Write>
    1e70:	6d 81       	ldd	r22, Y+5	; 0x05
    1e72:	81 ee       	ldi	r24, 0xE1	; 225
    1e74:	51 df       	rcall	.-350    	; 0x1d18 <enc28j60Write>
    1e76:	60 e0       	ldi	r22, 0x00	; 0
    1e78:	71 e0       	ldi	r23, 0x01	; 1
    1e7a:	80 e1       	ldi	r24, 0x10	; 16
    1e7c:	75 df       	rcall	.-278    	; 0x1d68 <enc28j60PhyWrite>
    1e7e:	8f e1       	ldi	r24, 0x1F	; 31
    1e80:	1e df       	rcall	.-452    	; 0x1cbe <enc28j60SetBank>
    1e82:	40 ec       	ldi	r20, 0xC0	; 192
    1e84:	6b e1       	ldi	r22, 0x1B	; 27
    1e86:	80 e8       	ldi	r24, 0x80	; 128
    1e88:	da de       	rcall	.-588    	; 0x1c3e <enc28j60WriteOp>
    1e8a:	44 e0       	ldi	r20, 0x04	; 4
    1e8c:	6f e1       	ldi	r22, 0x1F	; 31
    1e8e:	80 e8       	ldi	r24, 0x80	; 128
    1e90:	d6 de       	rcall	.-596    	; 0x1c3e <enc28j60WriteOp>
    1e92:	df 91       	pop	r29
    1e94:	cf 91       	pop	r28
    1e96:	08 95       	ret

00001e98 <enc28j60linkup>:
    1e98:	81 e1       	ldi	r24, 0x11	; 17
    1e9a:	4a df       	rcall	.-364    	; 0x1d30 <enc28j60PhyRead>
    1e9c:	92 fb       	bst	r25, 2
    1e9e:	88 27       	eor	r24, r24
    1ea0:	80 f9       	bld	r24, 0
    1ea2:	08 95       	ret

00001ea4 <enc28j60PacketSend>:
    1ea4:	0f 93       	push	r16
    1ea6:	1f 93       	push	r17
    1ea8:	cf 93       	push	r28
    1eaa:	df 93       	push	r29
    1eac:	ec 01       	movw	r28, r24
    1eae:	8b 01       	movw	r16, r22
    1eb0:	6f e1       	ldi	r22, 0x1F	; 31
    1eb2:	80 e0       	ldi	r24, 0x00	; 0
    1eb4:	af de       	rcall	.-674    	; 0x1c14 <enc28j60ReadOp>
    1eb6:	83 fd       	sbrc	r24, 3
    1eb8:	fb cf       	rjmp	.-10     	; 0x1eb0 <enc28j60PacketSend+0xc>
    1eba:	8c e1       	ldi	r24, 0x1C	; 28
    1ebc:	25 df       	rcall	.-438    	; 0x1d08 <enc28j60Read>
    1ebe:	81 ff       	sbrs	r24, 1
    1ec0:	10 c0       	rjmp	.+32     	; 0x1ee2 <enc28j60PacketSend+0x3e>
    1ec2:	40 e8       	ldi	r20, 0x80	; 128
    1ec4:	6f e1       	ldi	r22, 0x1F	; 31
    1ec6:	80 e8       	ldi	r24, 0x80	; 128
    1ec8:	ba de       	rcall	.-652    	; 0x1c3e <enc28j60WriteOp>
    1eca:	40 e8       	ldi	r20, 0x80	; 128
    1ecc:	6f e1       	ldi	r22, 0x1F	; 31
    1ece:	80 ea       	ldi	r24, 0xA0	; 160
    1ed0:	b6 de       	rcall	.-660    	; 0x1c3e <enc28j60WriteOp>
    1ed2:	42 e0       	ldi	r20, 0x02	; 2
    1ed4:	6c e1       	ldi	r22, 0x1C	; 28
    1ed6:	80 ea       	ldi	r24, 0xA0	; 160
    1ed8:	b2 de       	rcall	.-668    	; 0x1c3e <enc28j60WriteOp>
    1eda:	80 e3       	ldi	r24, 0x30	; 48
    1edc:	95 e7       	ldi	r25, 0x75	; 117
    1ede:	01 97       	sbiw	r24, 0x01	; 1
    1ee0:	f1 f7       	brne	.-4      	; 0x1ede <enc28j60PacketSend+0x3a>
    1ee2:	60 e0       	ldi	r22, 0x00	; 0
    1ee4:	82 e0       	ldi	r24, 0x02	; 2
    1ee6:	18 df       	rcall	.-464    	; 0x1d18 <enc28j60Write>
    1ee8:	6a e1       	ldi	r22, 0x1A	; 26
    1eea:	83 e0       	ldi	r24, 0x03	; 3
    1eec:	15 df       	rcall	.-470    	; 0x1d18 <enc28j60Write>
    1eee:	6c 2f       	mov	r22, r28
    1ef0:	86 e0       	ldi	r24, 0x06	; 6
    1ef2:	12 df       	rcall	.-476    	; 0x1d18 <enc28j60Write>
    1ef4:	ce 01       	movw	r24, r28
    1ef6:	96 5e       	subi	r25, 0xE6	; 230
    1ef8:	69 2f       	mov	r22, r25
    1efa:	87 e0       	ldi	r24, 0x07	; 7
    1efc:	0d df       	rcall	.-486    	; 0x1d18 <enc28j60Write>
    1efe:	40 e0       	ldi	r20, 0x00	; 0
    1f00:	60 e0       	ldi	r22, 0x00	; 0
    1f02:	8a e7       	ldi	r24, 0x7A	; 122
    1f04:	9c de       	rcall	.-712    	; 0x1c3e <enc28j60WriteOp>
    1f06:	b8 01       	movw	r22, r16
    1f08:	ce 01       	movw	r24, r28
    1f0a:	c0 de       	rcall	.-640    	; 0x1c8c <enc28j60WriteBuffer>
    1f0c:	48 e0       	ldi	r20, 0x08	; 8
    1f0e:	6f e1       	ldi	r22, 0x1F	; 31
    1f10:	80 e8       	ldi	r24, 0x80	; 128
    1f12:	95 de       	rcall	.-726    	; 0x1c3e <enc28j60WriteOp>
    1f14:	df 91       	pop	r29
    1f16:	cf 91       	pop	r28
    1f18:	1f 91       	pop	r17
    1f1a:	0f 91       	pop	r16
    1f1c:	08 95       	ret

00001f1e <enc28j60PacketReceive>:
// The packet will by headed by an ethernet header.
//      maxlen  The maximum acceptable length of a retrieved packet.
//      packet  Pointer where packet data should be stored.
// Returns: Packet length in bytes if a packet was retrieved, zero otherwise.
uint16_t enc28j60PacketReceive(uint16_t maxlen, uint8_t* packet)
{
    1f1e:	af 92       	push	r10
    1f20:	bf 92       	push	r11
    1f22:	cf 92       	push	r12
    1f24:	df 92       	push	r13
    1f26:	ef 92       	push	r14
    1f28:	ff 92       	push	r15
    1f2a:	0f 93       	push	r16
    1f2c:	1f 93       	push	r17
    1f2e:	cf 93       	push	r28
    1f30:	df 93       	push	r29
    1f32:	6c 01       	movw	r12, r24
    1f34:	7b 01       	movw	r14, r22
	uint16_t rxstat;
	uint16_t len;
	// check if a packet has been received and buffered
	//if( !(enc28j60Read(EIR) & EIR_PKTIF) )
        // The above does not work. See Rev. B4 Silicon Errata point 6.
	if( enc28j60Read(EPKTCNT) ==0 ){
    1f36:	89 e3       	ldi	r24, 0x39	; 57
    1f38:	e7 de       	rcall	.-562    	; 0x1d08 <enc28j60Read>
    1f3a:	88 23       	and	r24, r24
    1f3c:	09 f4       	brne	.+2      	; 0x1f40 <enc28j60PacketReceive+0x22>
    1f3e:	56 c0       	rjmp	.+172    	; 0x1fec <enc28j60PacketReceive+0xce>
		return(0);
        }

	// Set the read pointer to the start of the received packet
	enc28j60Write(ERDPTL, (gNextPacketPtr &0xFF));
    1f40:	60 91 ff 04 	lds	r22, 0x04FF	; 0x8004ff <gNextPacketPtr>
    1f44:	c0 91 00 05 	lds	r28, 0x0500	; 0x800500 <gNextPacketPtr+0x1>
    1f48:	80 e0       	ldi	r24, 0x00	; 0
    1f4a:	e6 de       	rcall	.-564    	; 0x1d18 <enc28j60Write>
	enc28j60Write(ERDPTH, (gNextPacketPtr)>>8);
    1f4c:	6c 2f       	mov	r22, r28
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	e3 de       	rcall	.-570    	; 0x1d18 <enc28j60Write>
	// read the next packet pointer
	gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
    1f52:	60 e0       	ldi	r22, 0x00	; 0
    1f54:	8a e3       	ldi	r24, 0x3A	; 58
    1f56:	5e de       	rcall	.-836    	; 0x1c14 <enc28j60ReadOp>
    1f58:	c8 2f       	mov	r28, r24
	gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
    1f5a:	60 e0       	ldi	r22, 0x00	; 0
    1f5c:	8a e3       	ldi	r24, 0x3A	; 58
    1f5e:	5a de       	rcall	.-844    	; 0x1c14 <enc28j60ReadOp>
    1f60:	d0 e0       	ldi	r29, 0x00	; 0
    1f62:	d8 2b       	or	r29, r24
    1f64:	d0 93 00 05 	sts	0x0500, r29	; 0x800500 <gNextPacketPtr+0x1>
    1f68:	c0 93 ff 04 	sts	0x04FF, r28	; 0x8004ff <gNextPacketPtr>
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
    1f6c:	60 e0       	ldi	r22, 0x00	; 0
    1f6e:	8a e3       	ldi	r24, 0x3A	; 58
    1f70:	51 de       	rcall	.-862    	; 0x1c14 <enc28j60ReadOp>
    1f72:	b8 2e       	mov	r11, r24
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
    1f74:	60 e0       	ldi	r22, 0x00	; 0
    1f76:	8a e3       	ldi	r24, 0x3A	; 58
    1f78:	4d de       	rcall	.-870    	; 0x1c14 <enc28j60ReadOp>
    1f7a:	a8 2e       	mov	r10, r24
        len-=4; //remove the CRC count
	// read the receive status (see datasheet page 43)
	rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
    1f7c:	60 e0       	ldi	r22, 0x00	; 0
    1f7e:	8a e3       	ldi	r24, 0x3A	; 58
    1f80:	49 de       	rcall	.-878    	; 0x1c14 <enc28j60ReadOp>
    1f82:	08 2f       	mov	r16, r24
    1f84:	60 e0       	ldi	r22, 0x00	; 0
	rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
    1f86:	8a e3       	ldi	r24, 0x3A	; 58
    1f88:	45 de       	rcall	.-886    	; 0x1c14 <enc28j60ReadOp>
    1f8a:	07 ff       	sbrs	r16, 7
    1f8c:	10 c0       	rjmp	.+32     	; 0x1fae <enc28j60PacketReceive+0x90>
                len=maxlen-1;
        }
        // check CRC and symbol errors (see datasheet page 44, table 7-3):
        // The ERXFCON.CRCEN is set by default. Normally we should not
        // need to check this.
        if ((rxstat & 0x80)==0){
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	c8 1a       	sub	r12, r24
        len-=4; //remove the CRC count
	// read the receive status (see datasheet page 43)
	rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
	// limit retrieve length
        if (len>maxlen-1){
    1f92:	d1 08       	sbc	r13, r1
    1f94:	0b 2d       	mov	r16, r11
    1f96:	10 e0       	ldi	r17, 0x00	; 0
	// read the next packet pointer
	gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
    1f98:	1a 29       	or	r17, r10
    1f9a:	04 50       	subi	r16, 0x04	; 4
    1f9c:	11 09       	sbc	r17, r1
    1f9e:	c0 16       	cp	r12, r16
    1fa0:	d1 06       	cpc	r13, r17
    1fa2:	08 f4       	brcc	.+2      	; 0x1fa6 <enc28j60PacketReceive+0x88>
    1fa4:	86 01       	movw	r16, r12
    1fa6:	b7 01       	movw	r22, r14
        if ((rxstat & 0x80)==0){
                // invalid
                len=0;
        }else{
                // copy the packet from the receive buffer
                enc28j60ReadBuffer(len, packet);
    1fa8:	c8 01       	movw	r24, r16
    1faa:	56 de       	rcall	.-852    	; 0x1c58 <enc28j60ReadBuffer>
    1fac:	02 c0       	rjmp	.+4      	; 0x1fb2 <enc28j60PacketReceive+0x94>
    1fae:	00 e0       	ldi	r16, 0x00	; 0
    1fb0:	10 e0       	ldi	r17, 0x00	; 0
        // check CRC and symbol errors (see datasheet page 44, table 7-3):
        // The ERXFCON.CRCEN is set by default. Normally we should not
        // need to check this.
        if ((rxstat & 0x80)==0){
                // invalid
                len=0;
    1fb2:	7e 01       	movw	r14, r28
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
        //
        // Move the RX read pointer to the start of the next received packet
        // This frees the memory we just read out. 
        // However, compensate for the errata point 13, rev B4: never write an even address!
        // gNextPacketPtr is always an even address if RXSTOP_INIT is odd.
        if (gNextPacketPtr -1 > RXSTOP_INIT){ // RXSTART_INIT is zero, no test for gNextPacketPtr less than RXSTART_INIT.
    1fb6:	e8 1a       	sub	r14, r24
    1fb8:	f1 08       	sbc	r15, r1
    1fba:	e1 14       	cp	r14, r1
    1fbc:	8a e1       	ldi	r24, 0x1A	; 26
    1fbe:	f8 06       	cpc	r15, r24
    1fc0:	3c f0       	brlt	.+14     	; 0x1fd0 <enc28j60PacketReceive+0xb2>
                enc28j60Write(ERXRDPTL, (RXSTOP_INIT)&0xFF);
    1fc2:	6f ef       	ldi	r22, 0xFF	; 255
    1fc4:	8c e0       	ldi	r24, 0x0C	; 12
    1fc6:	a8 de       	rcall	.-688    	; 0x1d18 <enc28j60Write>
                enc28j60Write(ERXRDPTH, (RXSTOP_INIT)>>8);
    1fc8:	69 e1       	ldi	r22, 0x19	; 25
    1fca:	8d e0       	ldi	r24, 0x0D	; 13
    1fcc:	a5 de       	rcall	.-694    	; 0x1d18 <enc28j60Write>
    1fce:	07 c0       	rjmp	.+14     	; 0x1fde <enc28j60PacketReceive+0xc0>
        } else {
                enc28j60Write(ERXRDPTL, (gNextPacketPtr-1)&0xFF);
    1fd0:	6c 2f       	mov	r22, r28
    1fd2:	61 50       	subi	r22, 0x01	; 1
    1fd4:	8c e0       	ldi	r24, 0x0C	; 12
    1fd6:	a0 de       	rcall	.-704    	; 0x1d18 <enc28j60Write>
    1fd8:	6f 2d       	mov	r22, r15
                enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
    1fda:	8d e0       	ldi	r24, 0x0D	; 13
    1fdc:	9d de       	rcall	.-710    	; 0x1d18 <enc28j60Write>
    1fde:	40 e4       	ldi	r20, 0x40	; 64
    1fe0:	6e e1       	ldi	r22, 0x1E	; 30
        }
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
    1fe2:	80 e8       	ldi	r24, 0x80	; 128
    1fe4:	2c de       	rcall	.-936    	; 0x1c3e <enc28j60WriteOp>
    1fe6:	80 2f       	mov	r24, r16
    1fe8:	91 2f       	mov	r25, r17
    1fea:	02 c0       	rjmp	.+4      	; 0x1ff0 <enc28j60PacketReceive+0xd2>
	return(len);
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	df 91       	pop	r29
	uint16_t len;
	// check if a packet has been received and buffered
	//if( !(enc28j60Read(EIR) & EIR_PKTIF) )
        // The above does not work. See Rev. B4 Silicon Errata point 6.
	if( enc28j60Read(EPKTCNT) ==0 ){
		return(0);
    1ff2:	cf 91       	pop	r28
    1ff4:	1f 91       	pop	r17
                enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
        }
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
	return(len);
}
    1ff6:	0f 91       	pop	r16
    1ff8:	ff 90       	pop	r15
    1ffa:	ef 90       	pop	r14
    1ffc:	df 90       	pop	r13
    1ffe:	cf 90       	pop	r12
    2000:	bf 90       	pop	r11
    2002:	af 90       	pop	r10
    2004:	08 95       	ret

00002006 <www_client_internal_result_callback>:
    2006:	cf 92       	push	r12
    2008:	df 92       	push	r13
    200a:	ef 92       	push	r14
}
#endif // WWW_client

void register_ping_rec_callback(void (*callback)(uint8_t *srcip))
{
        icmp_callback=callback;
    200c:	ff 92       	push	r15
    200e:	0f 93       	push	r16
    2010:	1f 93       	push	r17
    2012:	cf 93       	push	r28
    2014:	df 93       	push	r29
    2016:	ea 01       	movw	r28, r20
    2018:	89 01       	movw	r16, r18
    201a:	90 91 1a 05 	lds	r25, 0x051A	; 0x80051a <www_fd>
    201e:	98 17       	cp	r25, r24
    2020:	61 f0       	breq	.+24     	; 0x203a <www_client_internal_result_callback+0x34>
    2022:	e0 91 17 05 	lds	r30, 0x0517	; 0x800517 <client_browser_callback>
    2026:	f0 91 18 05 	lds	r31, 0x0518	; 0x800518 <client_browser_callback+0x1>
    202a:	40 e0       	ldi	r20, 0x00	; 0
    202c:	50 e0       	ldi	r21, 0x00	; 0
    202e:	60 e0       	ldi	r22, 0x00	; 0
    2030:	70 e0       	ldi	r23, 0x00	; 0
    2032:	84 ef       	ldi	r24, 0xF4	; 244
    2034:	91 e0       	ldi	r25, 0x01	; 1
    2036:	09 95       	icall
    2038:	5e c0       	rjmp	.+188    	; 0x20f6 <www_client_internal_result_callback+0xf0>
    203a:	61 11       	cpse	r22, r1
    203c:	5c c0       	rjmp	.+184    	; 0x20f6 <www_client_internal_result_callback+0xf0>
    203e:	2d 30       	cpi	r18, 0x0D	; 13
    2040:	31 05       	cpc	r19, r1
    2042:	08 f4       	brcc	.+2      	; 0x2046 <www_client_internal_result_callback+0x40>
    2044:	58 c0       	rjmp	.+176    	; 0x20f6 <www_client_internal_result_callback+0xf0>
    2046:	e0 90 17 05 	lds	r14, 0x0517	; 0x800517 <client_browser_callback>
    204a:	f0 90 18 05 	lds	r15, 0x0518	; 0x800518 <client_browser_callback+0x1>
    204e:	e1 14       	cp	r14, r1
    2050:	f1 04       	cpc	r15, r1
    2052:	09 f4       	brne	.+2      	; 0x2056 <www_client_internal_result_callback+0x50>
    2054:	50 c0       	rjmp	.+160    	; 0x20f6 <www_client_internal_result_callback+0xf0>
    2056:	c0 90 0b 05 	lds	r12, 0x050B	; 0x80050b <bufptr>
    205a:	d0 90 0c 05 	lds	r13, 0x050C	; 0x80050c <bufptr+0x1>
    205e:	f6 01       	movw	r30, r12
    2060:	e4 0f       	add	r30, r20
    2062:	f5 1f       	adc	r31, r21
    2064:	80 85       	ldd	r24, Z+8	; 0x08
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	0e 94 46 44 	call	0x888c	; 0x888c <isblank>
    206c:	89 2b       	or	r24, r25
    206e:	b9 f1       	breq	.+110    	; 0x20de <www_client_internal_result_callback+0xd8>
    2070:	f6 01       	movw	r30, r12
    2072:	ec 0f       	add	r30, r28
    2074:	fd 1f       	adc	r31, r29
    2076:	21 85       	ldd	r18, Z+9	; 0x09
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	20 53       	subi	r18, 0x30	; 48
    207c:	31 09       	sbc	r19, r1
    207e:	2a 30       	cpi	r18, 0x0A	; 10
    2080:	31 05       	cpc	r19, r1
    2082:	80 f5       	brcc	.+96     	; 0x20e4 <www_client_internal_result_callback+0xde>
    2084:	f6 01       	movw	r30, r12
    2086:	ec 0f       	add	r30, r28
    2088:	fd 1f       	adc	r31, r29
    208a:	83 85       	ldd	r24, Z+11	; 0x0b
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	ac 01       	movw	r20, r24
    2090:	40 53       	subi	r20, 0x30	; 48
    2092:	51 09       	sbc	r21, r1
    2094:	4a 30       	cpi	r20, 0x0A	; 10
    2096:	51 05       	cpc	r21, r1
    2098:	40 f5       	brcc	.+80     	; 0x20ea <www_client_internal_result_callback+0xe4>
    209a:	c9 01       	movw	r24, r18
    209c:	88 0f       	add	r24, r24
    209e:	99 1f       	adc	r25, r25
    20a0:	22 0f       	add	r18, r18
    20a2:	33 1f       	adc	r19, r19
    20a4:	22 0f       	add	r18, r18
    20a6:	33 1f       	adc	r19, r19
    20a8:	22 0f       	add	r18, r18
    20aa:	33 1f       	adc	r19, r19
    20ac:	28 0f       	add	r18, r24
    20ae:	39 1f       	adc	r19, r25
    20b0:	f6 01       	movw	r30, r12
    20b2:	ec 0f       	add	r30, r28
    20b4:	fd 1f       	adc	r31, r29
    20b6:	82 85       	ldd	r24, Z+10	; 0x0a
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	c0 97       	sbiw	r24, 0x30	; 48
    20bc:	28 0f       	add	r18, r24
    20be:	39 1f       	adc	r19, r25
    20c0:	c9 01       	movw	r24, r18
    20c2:	88 0f       	add	r24, r24
    20c4:	99 1f       	adc	r25, r25
    20c6:	22 0f       	add	r18, r18
    20c8:	33 1f       	adc	r19, r19
    20ca:	22 0f       	add	r18, r18
    20cc:	33 1f       	adc	r19, r19
    20ce:	22 0f       	add	r18, r18
    20d0:	33 1f       	adc	r19, r19
    20d2:	28 0f       	add	r18, r24
    20d4:	39 1f       	adc	r19, r25
    20d6:	ca 01       	movw	r24, r20
    20d8:	82 0f       	add	r24, r18
    20da:	93 1f       	adc	r25, r19
    20dc:	08 c0       	rjmp	.+16     	; 0x20ee <www_client_internal_result_callback+0xe8>
    20de:	80 e0       	ldi	r24, 0x00	; 0
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	05 c0       	rjmp	.+10     	; 0x20ee <www_client_internal_result_callback+0xe8>
    20e4:	80 e0       	ldi	r24, 0x00	; 0
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	02 c0       	rjmp	.+4      	; 0x20ee <www_client_internal_result_callback+0xe8>
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	a8 01       	movw	r20, r16
    20f0:	be 01       	movw	r22, r28
    20f2:	f7 01       	movw	r30, r14
    20f4:	09 95       	icall
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	df 91       	pop	r29
    20fa:	cf 91       	pop	r28
    20fc:	1f 91       	pop	r17
    20fe:	0f 91       	pop	r16
    2100:	ff 90       	pop	r15
    2102:	ef 90       	pop	r14
    2104:	df 90       	pop	r13
    2106:	cf 90       	pop	r12
    2108:	08 95       	ret

0000210a <checksum>:
    210a:	cf 92       	push	r12
    210c:	df 92       	push	r13
    210e:	ef 92       	push	r14
    2110:	ff 92       	push	r15
    2112:	cf 93       	push	r28
    2114:	df 93       	push	r29
    2116:	ec 01       	movw	r28, r24
    2118:	db 01       	movw	r26, r22
    211a:	41 30       	cpi	r20, 0x01	; 1
    211c:	61 f4       	brne	.+24     	; 0x2136 <checksum+0x2c>
    211e:	6b 01       	movw	r12, r22
    2120:	88 e0       	ldi	r24, 0x08	; 8
    2122:	c8 1a       	sub	r12, r24
    2124:	d1 08       	sbc	r13, r1
    2126:	e1 2c       	mov	r14, r1
    2128:	f1 2c       	mov	r15, r1
    212a:	81 e1       	ldi	r24, 0x11	; 17
    212c:	c8 0e       	add	r12, r24
    212e:	d1 1c       	adc	r13, r1
    2130:	e1 1c       	adc	r14, r1
    2132:	f1 1c       	adc	r15, r1
    2134:	11 c0       	rjmp	.+34     	; 0x2158 <checksum+0x4e>
    2136:	42 30       	cpi	r20, 0x02	; 2
    2138:	61 f4       	brne	.+24     	; 0x2152 <checksum+0x48>
    213a:	6b 01       	movw	r12, r22
    213c:	88 e0       	ldi	r24, 0x08	; 8
    213e:	c8 1a       	sub	r12, r24
    2140:	d1 08       	sbc	r13, r1
    2142:	e1 2c       	mov	r14, r1
    2144:	f1 2c       	mov	r15, r1
    2146:	86 e0       	ldi	r24, 0x06	; 6
    2148:	c8 0e       	add	r12, r24
    214a:	d1 1c       	adc	r13, r1
    214c:	e1 1c       	adc	r14, r1
    214e:	f1 1c       	adc	r15, r1
    2150:	03 c0       	rjmp	.+6      	; 0x2158 <checksum+0x4e>
    2152:	c1 2c       	mov	r12, r1
    2154:	d1 2c       	mov	r13, r1
    2156:	76 01       	movw	r14, r12
    2158:	a2 30       	cpi	r26, 0x02	; 2
    215a:	b1 05       	cpc	r27, r1
    215c:	f0 f0       	brcs	.+60     	; 0x219a <checksum+0x90>
    215e:	9d 01       	movw	r18, r26
    2160:	fe 01       	movw	r30, r28
    2162:	40 81       	ld	r20, Z
    2164:	50 e0       	ldi	r21, 0x00	; 0
    2166:	60 e0       	ldi	r22, 0x00	; 0
    2168:	70 e0       	ldi	r23, 0x00	; 0
    216a:	76 2f       	mov	r23, r22
    216c:	65 2f       	mov	r22, r21
    216e:	54 2f       	mov	r21, r20
    2170:	44 27       	eor	r20, r20
    2172:	81 81       	ldd	r24, Z+1	; 0x01
    2174:	48 2b       	or	r20, r24
    2176:	c4 0e       	add	r12, r20
    2178:	d5 1e       	adc	r13, r21
    217a:	e6 1e       	adc	r14, r22
    217c:	f7 1e       	adc	r15, r23
    217e:	32 96       	adiw	r30, 0x02	; 2
    2180:	22 50       	subi	r18, 0x02	; 2
    2182:	31 09       	sbc	r19, r1
    2184:	22 30       	cpi	r18, 0x02	; 2
    2186:	31 05       	cpc	r19, r1
    2188:	60 f7       	brcc	.-40     	; 0x2162 <checksum+0x58>
    218a:	cd 01       	movw	r24, r26
    218c:	02 97       	sbiw	r24, 0x02	; 2
    218e:	8e 7f       	andi	r24, 0xFE	; 254
    2190:	02 96       	adiw	r24, 0x02	; 2
    2192:	c8 0f       	add	r28, r24
    2194:	d9 1f       	adc	r29, r25
    2196:	a1 70       	andi	r26, 0x01	; 1
    2198:	bb 27       	eor	r27, r27
    219a:	ab 2b       	or	r26, r27
    219c:	61 f0       	breq	.+24     	; 0x21b6 <checksum+0xac>
    219e:	88 81       	ld	r24, Y
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	a0 e0       	ldi	r26, 0x00	; 0
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	ba 2f       	mov	r27, r26
    21a8:	a9 2f       	mov	r26, r25
    21aa:	98 2f       	mov	r25, r24
    21ac:	88 27       	eor	r24, r24
    21ae:	c8 0e       	add	r12, r24
    21b0:	d9 1e       	adc	r13, r25
    21b2:	ea 1e       	adc	r14, r26
    21b4:	fb 1e       	adc	r15, r27
    21b6:	a7 01       	movw	r20, r14
    21b8:	66 27       	eor	r22, r22
    21ba:	77 27       	eor	r23, r23
    21bc:	41 15       	cp	r20, r1
    21be:	51 05       	cpc	r21, r1
    21c0:	61 05       	cpc	r22, r1
    21c2:	71 05       	cpc	r23, r1
    21c4:	71 f0       	breq	.+28     	; 0x21e2 <checksum+0xd8>
    21c6:	ee 24       	eor	r14, r14
    21c8:	ff 24       	eor	r15, r15
    21ca:	c4 0e       	add	r12, r20
    21cc:	d5 1e       	adc	r13, r21
    21ce:	e6 1e       	adc	r14, r22
    21d0:	f7 1e       	adc	r15, r23
    21d2:	a7 01       	movw	r20, r14
    21d4:	66 27       	eor	r22, r22
    21d6:	77 27       	eor	r23, r23
    21d8:	41 15       	cp	r20, r1
    21da:	51 05       	cpc	r21, r1
    21dc:	61 05       	cpc	r22, r1
    21de:	71 05       	cpc	r23, r1
    21e0:	91 f7       	brne	.-28     	; 0x21c6 <checksum+0xbc>
    21e2:	c6 01       	movw	r24, r12
    21e4:	80 95       	com	r24
    21e6:	90 95       	com	r25
    21e8:	df 91       	pop	r29
    21ea:	cf 91       	pop	r28
    21ec:	ff 90       	pop	r15
    21ee:	ef 90       	pop	r14
    21f0:	df 90       	pop	r13
    21f2:	cf 90       	pop	r12
    21f4:	08 95       	ret

000021f6 <init_mac>:
    21f6:	00 97       	sbiw	r24, 0x00	; 0
    21f8:	41 f0       	breq	.+16     	; 0x220a <init_mac+0x14>
    21fa:	26 e0       	ldi	r18, 0x06	; 6
    21fc:	fc 01       	movw	r30, r24
    21fe:	a3 e3       	ldi	r26, 0x33	; 51
    2200:	b5 e0       	ldi	r27, 0x05	; 5
    2202:	01 90       	ld	r0, Z+
    2204:	0d 92       	st	X+, r0
    2206:	2a 95       	dec	r18
    2208:	e1 f7       	brne	.-8      	; 0x2202 <init_mac+0xc>
    220a:	08 95       	ret

0000220c <route_via_gw>:
    220c:	cf 93       	push	r28
    220e:	df 93       	push	r29
    2210:	fc 01       	movw	r30, r24
    2212:	30 81       	ld	r19, Z
    2214:	20 91 2f 05 	lds	r18, 0x052F	; 0x80052f <ipaddr>
    2218:	23 27       	eor	r18, r19
    221a:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <ipnetmask>
    221e:	23 23       	and	r18, r19
    2220:	91 f4       	brne	.+36     	; 0x2246 <route_via_gw+0x3a>
    2222:	31 96       	adiw	r30, 0x01	; 1
    2224:	c0 e3       	ldi	r28, 0x30	; 48
    2226:	d5 e0       	ldi	r29, 0x05	; 5
    2228:	a6 e0       	ldi	r26, 0x06	; 6
    222a:	b1 e0       	ldi	r27, 0x01	; 1
    222c:	ac 01       	movw	r20, r24
    222e:	4c 5f       	subi	r20, 0xFC	; 252
    2230:	5f 4f       	sbci	r21, 0xFF	; 255
    2232:	81 91       	ld	r24, Z+
    2234:	29 91       	ld	r18, Y+
    2236:	9d 91       	ld	r25, X+
    2238:	82 27       	eor	r24, r18
    223a:	89 23       	and	r24, r25
    223c:	31 f4       	brne	.+12     	; 0x224a <route_via_gw+0x3e>
    223e:	e4 17       	cp	r30, r20
    2240:	f5 07       	cpc	r31, r21
    2242:	b9 f7       	brne	.-18     	; 0x2232 <route_via_gw+0x26>
    2244:	03 c0       	rjmp	.+6      	; 0x224c <route_via_gw+0x40>
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	01 c0       	rjmp	.+2      	; 0x224c <route_via_gw+0x40>
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	df 91       	pop	r29
    224e:	cf 91       	pop	r28
    2250:	08 95       	ret

00002252 <check_ip_message_is_from>:
    2252:	fc 01       	movw	r30, r24
    2254:	32 8d       	ldd	r19, Z+26	; 0x1a
    2256:	fb 01       	movw	r30, r22
    2258:	20 81       	ld	r18, Z
    225a:	32 13       	cpse	r19, r18
    225c:	0d c0       	rjmp	.+26     	; 0x2278 <check_ip_message_is_from+0x26>
    225e:	dc 01       	movw	r26, r24
    2260:	5b 96       	adiw	r26, 0x1b	; 27
    2262:	31 96       	adiw	r30, 0x01	; 1
    2264:	4e 96       	adiw	r24, 0x1e	; 30
    2266:	3d 91       	ld	r19, X+
    2268:	21 91       	ld	r18, Z+
    226a:	32 13       	cpse	r19, r18
    226c:	07 c0       	rjmp	.+14     	; 0x227c <check_ip_message_is_from+0x2a>
    226e:	a8 17       	cp	r26, r24
    2270:	b9 07       	cpc	r27, r25
    2272:	c9 f7       	brne	.-14     	; 0x2266 <check_ip_message_is_from+0x14>
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	08 95       	ret
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	08 95       	ret
    227c:	80 e0       	ldi	r24, 0x00	; 0
    227e:	08 95       	ret

00002280 <eth_type_is_arp_and_my_ip>:
    2280:	69 32       	cpi	r22, 0x29	; 41
    2282:	71 05       	cpc	r23, r1
    2284:	c8 f0       	brcs	.+50     	; 0x22b8 <eth_type_is_arp_and_my_ip+0x38>
    2286:	fc 01       	movw	r30, r24
    2288:	24 85       	ldd	r18, Z+12	; 0x0c
    228a:	28 30       	cpi	r18, 0x08	; 8
    228c:	b9 f4       	brne	.+46     	; 0x22bc <eth_type_is_arp_and_my_ip+0x3c>
    228e:	25 85       	ldd	r18, Z+13	; 0x0d
    2290:	26 30       	cpi	r18, 0x06	; 6
    2292:	b1 f4       	brne	.+44     	; 0x22c0 <eth_type_is_arp_and_my_ip+0x40>
    2294:	36 a1       	ldd	r19, Z+38	; 0x26
    2296:	20 91 2f 05 	lds	r18, 0x052F	; 0x80052f <ipaddr>
    229a:	32 13       	cpse	r19, r18
    229c:	13 c0       	rjmp	.+38     	; 0x22c4 <eth_type_is_arp_and_my_ip+0x44>
    229e:	b7 96       	adiw	r30, 0x27	; 39
    22a0:	a0 e3       	ldi	r26, 0x30	; 48
    22a2:	b5 e0       	ldi	r27, 0x05	; 5
    22a4:	8a 96       	adiw	r24, 0x2a	; 42
    22a6:	31 91       	ld	r19, Z+
    22a8:	2d 91       	ld	r18, X+
    22aa:	32 13       	cpse	r19, r18
    22ac:	0d c0       	rjmp	.+26     	; 0x22c8 <eth_type_is_arp_and_my_ip+0x48>
    22ae:	e8 17       	cp	r30, r24
    22b0:	f9 07       	cpc	r31, r25
    22b2:	c9 f7       	brne	.-14     	; 0x22a6 <eth_type_is_arp_and_my_ip+0x26>
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	08 95       	ret
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	08 95       	ret
    22bc:	80 e0       	ldi	r24, 0x00	; 0
    22be:	08 95       	ret
    22c0:	80 e0       	ldi	r24, 0x00	; 0
    22c2:	08 95       	ret
    22c4:	80 e0       	ldi	r24, 0x00	; 0
    22c6:	08 95       	ret
    22c8:	80 e0       	ldi	r24, 0x00	; 0
    22ca:	08 95       	ret

000022cc <eth_type_is_ip_and_my_ip>:
    22cc:	cf 93       	push	r28
    22ce:	df 93       	push	r29
    22d0:	fc 01       	movw	r30, r24
    22d2:	6a 32       	cpi	r22, 0x2A	; 42
    22d4:	71 05       	cpc	r23, r1
    22d6:	e0 f0       	brcs	.+56     	; 0x2310 <eth_type_is_ip_and_my_ip+0x44>
    22d8:	84 85       	ldd	r24, Z+12	; 0x0c
    22da:	88 30       	cpi	r24, 0x08	; 8
    22dc:	d9 f4       	brne	.+54     	; 0x2314 <eth_type_is_ip_and_my_ip+0x48>
    22de:	85 85       	ldd	r24, Z+13	; 0x0d
    22e0:	81 11       	cpse	r24, r1
    22e2:	1a c0       	rjmp	.+52     	; 0x2318 <eth_type_is_ip_and_my_ip+0x4c>
    22e4:	96 85       	ldd	r25, Z+14	; 0x0e
    22e6:	95 34       	cpi	r25, 0x45	; 69
    22e8:	c1 f4       	brne	.+48     	; 0x231a <eth_type_is_ip_and_my_ip+0x4e>
    22ea:	26 8d       	ldd	r18, Z+30	; 0x1e
    22ec:	90 91 2f 05 	lds	r25, 0x052F	; 0x80052f <ipaddr>
    22f0:	29 13       	cpse	r18, r25
    22f2:	13 c0       	rjmp	.+38     	; 0x231a <eth_type_is_ip_and_my_ip+0x4e>
    22f4:	df 01       	movw	r26, r30
    22f6:	5f 96       	adiw	r26, 0x1f	; 31
    22f8:	c0 e3       	ldi	r28, 0x30	; 48
    22fa:	d5 e0       	ldi	r29, 0x05	; 5
    22fc:	b2 96       	adiw	r30, 0x22	; 34
    22fe:	2d 91       	ld	r18, X+
    2300:	99 91       	ld	r25, Y+
    2302:	29 13       	cpse	r18, r25
    2304:	0a c0       	rjmp	.+20     	; 0x231a <eth_type_is_ip_and_my_ip+0x4e>
    2306:	ae 17       	cp	r26, r30
    2308:	bf 07       	cpc	r27, r31
    230a:	c9 f7       	brne	.-14     	; 0x22fe <eth_type_is_ip_and_my_ip+0x32>
    230c:	81 e0       	ldi	r24, 0x01	; 1
    230e:	05 c0       	rjmp	.+10     	; 0x231a <eth_type_is_ip_and_my_ip+0x4e>
    2310:	80 e0       	ldi	r24, 0x00	; 0
    2312:	03 c0       	rjmp	.+6      	; 0x231a <eth_type_is_ip_and_my_ip+0x4e>
    2314:	80 e0       	ldi	r24, 0x00	; 0
    2316:	01 c0       	rjmp	.+2      	; 0x231a <eth_type_is_ip_and_my_ip+0x4e>
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	df 91       	pop	r29
    231c:	cf 91       	pop	r28
    231e:	08 95       	ret

00002320 <make_eth>:
    2320:	fc 01       	movw	r30, r24
    2322:	a3 e3       	ldi	r26, 0x33	; 51
    2324:	b5 e0       	ldi	r27, 0x05	; 5
    2326:	9c 01       	movw	r18, r24
    2328:	2a 5f       	subi	r18, 0xFA	; 250
    232a:	3f 4f       	sbci	r19, 0xFF	; 255
    232c:	86 81       	ldd	r24, Z+6	; 0x06
    232e:	81 93       	st	Z+, r24
    2330:	8d 91       	ld	r24, X+
    2332:	85 83       	std	Z+5, r24	; 0x05
    2334:	e2 17       	cp	r30, r18
    2336:	f3 07       	cpc	r31, r19
    2338:	c9 f7       	brne	.-14     	; 0x232c <make_eth+0xc>
    233a:	08 95       	ret

0000233c <fill_ip_hdr_checksum>:
    233c:	cf 93       	push	r28
    233e:	df 93       	push	r29
    2340:	ec 01       	movw	r28, r24
    2342:	18 8e       	std	Y+24, r1	; 0x18
    2344:	19 8e       	std	Y+25, r1	; 0x19
    2346:	80 e4       	ldi	r24, 0x40	; 64
    2348:	8c 8b       	std	Y+20, r24	; 0x14
    234a:	1d 8a       	std	Y+21, r1	; 0x15
    234c:	8e 8b       	std	Y+22, r24	; 0x16
    234e:	40 e0       	ldi	r20, 0x00	; 0
    2350:	64 e1       	ldi	r22, 0x14	; 20
    2352:	70 e0       	ldi	r23, 0x00	; 0
    2354:	ce 01       	movw	r24, r28
    2356:	0e 96       	adiw	r24, 0x0e	; 14
    2358:	d8 de       	rcall	.-592    	; 0x210a <checksum>
    235a:	98 8f       	std	Y+24, r25	; 0x18
    235c:	89 8f       	std	Y+25, r24	; 0x19
    235e:	df 91       	pop	r29
    2360:	cf 91       	pop	r28
    2362:	08 95       	ret

00002364 <make_ip>:
    2364:	ac 01       	movw	r20, r24
    2366:	af e2       	ldi	r26, 0x2F	; 47
    2368:	b5 e0       	ldi	r27, 0x05	; 5
    236a:	fc 01       	movw	r30, r24
    236c:	7a 96       	adiw	r30, 0x1a	; 26
    236e:	23 e3       	ldi	r18, 0x33	; 51
    2370:	35 e0       	ldi	r19, 0x05	; 5
    2372:	90 81       	ld	r25, Z
    2374:	94 83       	std	Z+4, r25	; 0x04
    2376:	9d 91       	ld	r25, X+
    2378:	91 93       	st	Z+, r25
    237a:	a2 17       	cp	r26, r18
    237c:	b3 07       	cpc	r27, r19
    237e:	c9 f7       	brne	.-14     	; 0x2372 <make_ip+0xe>
    2380:	ca 01       	movw	r24, r20
    2382:	dc cf       	rjmp	.-72     	; 0x233c <fill_ip_hdr_checksum>
    2384:	08 95       	ret

00002386 <step_seq>:
    2386:	fc 01       	movw	r30, r24
    2388:	ba 96       	adiw	r30, 0x2a	; 42
    238a:	86 96       	adiw	r24, 0x26	; 38
    238c:	22 91       	ld	r18, -Z
    238e:	62 0f       	add	r22, r18
    2390:	71 1d       	adc	r23, r1
    2392:	24 81       	ldd	r18, Z+4	; 0x04
    2394:	64 83       	std	Z+4, r22	; 0x04
    2396:	44 23       	and	r20, r20
    2398:	11 f0       	breq	.+4      	; 0x239e <step_seq+0x18>
    239a:	20 83       	st	Z, r18
    239c:	01 c0       	rjmp	.+2      	; 0x23a0 <step_seq+0x1a>
    239e:	10 82       	st	Z, r1
    23a0:	67 2f       	mov	r22, r23
    23a2:	77 27       	eor	r23, r23
    23a4:	e8 17       	cp	r30, r24
    23a6:	f9 07       	cpc	r31, r25
    23a8:	89 f7       	brne	.-30     	; 0x238c <step_seq+0x6>
    23aa:	08 95       	ret

000023ac <make_tcphead>:
    23ac:	cf 93       	push	r28
    23ae:	df 93       	push	r29
    23b0:	ec 01       	movw	r28, r24
    23b2:	8c a1       	ldd	r24, Y+36	; 0x24
    23b4:	9a a1       	ldd	r25, Y+34	; 0x22
    23b6:	9c a3       	std	Y+36, r25	; 0x24
    23b8:	8a a3       	std	Y+34, r24	; 0x22
    23ba:	8d a1       	ldd	r24, Y+37	; 0x25
    23bc:	9b a1       	ldd	r25, Y+35	; 0x23
    23be:	9d a3       	std	Y+37, r25	; 0x25
    23c0:	8b a3       	std	Y+35, r24	; 0x23
    23c2:	ce 01       	movw	r24, r28
    23c4:	e0 df       	rcall	.-64     	; 0x2386 <step_seq>
    23c6:	1a aa       	std	Y+50, r1	; 0x32
    23c8:	1b aa       	std	Y+51, r1	; 0x33
    23ca:	80 e5       	ldi	r24, 0x50	; 80
    23cc:	8e a7       	std	Y+46, r24	; 0x2e
    23ce:	df 91       	pop	r29
    23d0:	cf 91       	pop	r28
    23d2:	08 95       	ret

000023d4 <make_arp_answer_from_request>:
    23d4:	cf 93       	push	r28
    23d6:	df 93       	push	r29
    23d8:	ec 01       	movw	r28, r24
    23da:	a2 df       	rcall	.-188    	; 0x2320 <make_eth>
    23dc:	1c 8a       	std	Y+20, r1	; 0x14
    23de:	82 e0       	ldi	r24, 0x02	; 2
    23e0:	8d 8b       	std	Y+21, r24	; 0x15
    23e2:	a3 e3       	ldi	r26, 0x33	; 51
    23e4:	b5 e0       	ldi	r27, 0x05	; 5
    23e6:	fe 01       	movw	r30, r28
    23e8:	76 96       	adiw	r30, 0x16	; 22
    23ea:	29 e3       	ldi	r18, 0x39	; 57
    23ec:	35 e0       	ldi	r19, 0x05	; 5
    23ee:	80 81       	ld	r24, Z
    23f0:	82 87       	std	Z+10, r24	; 0x0a
    23f2:	8d 91       	ld	r24, X+
    23f4:	81 93       	st	Z+, r24
    23f6:	a2 17       	cp	r26, r18
    23f8:	b3 07       	cpc	r27, r19
    23fa:	c9 f7       	brne	.-14     	; 0x23ee <make_arp_answer_from_request+0x1a>
    23fc:	af e2       	ldi	r26, 0x2F	; 47
    23fe:	b5 e0       	ldi	r27, 0x05	; 5
    2400:	fe 01       	movw	r30, r28
    2402:	7c 96       	adiw	r30, 0x1c	; 28
    2404:	23 e3       	ldi	r18, 0x33	; 51
    2406:	35 e0       	ldi	r19, 0x05	; 5
    2408:	80 81       	ld	r24, Z
    240a:	82 87       	std	Z+10, r24	; 0x0a
    240c:	8d 91       	ld	r24, X+
    240e:	81 93       	st	Z+, r24
    2410:	a2 17       	cp	r26, r18
    2412:	b3 07       	cpc	r27, r19
    2414:	c9 f7       	brne	.-14     	; 0x2408 <make_arp_answer_from_request+0x34>
    2416:	be 01       	movw	r22, r28
    2418:	8a e2       	ldi	r24, 0x2A	; 42
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	43 dd       	rcall	.-1402   	; 0x1ea4 <enc28j60PacketSend>
    241e:	df 91       	pop	r29
    2420:	cf 91       	pop	r28
    2422:	08 95       	ret

00002424 <make_echo_reply_from_request>:
    2424:	0f 93       	push	r16
    2426:	1f 93       	push	r17
    2428:	cf 93       	push	r28
    242a:	df 93       	push	r29
    242c:	ec 01       	movw	r28, r24
    242e:	8b 01       	movw	r16, r22
    2430:	77 df       	rcall	.-274    	; 0x2320 <make_eth>
    2432:	ce 01       	movw	r24, r28
    2434:	97 df       	rcall	.-210    	; 0x2364 <make_ip>
    2436:	1a a2       	std	Y+34, r1	; 0x22
    2438:	8c a1       	ldd	r24, Y+36	; 0x24
    243a:	88 3f       	cpi	r24, 0xF8	; 248
    243c:	18 f0       	brcs	.+6      	; 0x2444 <make_echo_reply_from_request+0x20>
    243e:	9d a1       	ldd	r25, Y+37	; 0x25
    2440:	9f 5f       	subi	r25, 0xFF	; 255
    2442:	9d a3       	std	Y+37, r25	; 0x25
    2444:	88 5f       	subi	r24, 0xF8	; 248
    2446:	8c a3       	std	Y+36, r24	; 0x24
    2448:	be 01       	movw	r22, r28
    244a:	c8 01       	movw	r24, r16
    244c:	2b dd       	rcall	.-1450   	; 0x1ea4 <enc28j60PacketSend>
    244e:	df 91       	pop	r29
    2450:	cf 91       	pop	r28
    2452:	1f 91       	pop	r17
    2454:	0f 91       	pop	r16
    2456:	08 95       	ret

00002458 <get_tcp_data_len>:
    2458:	fc 01       	movw	r30, r24
    245a:	20 89       	ldd	r18, Z+16	; 0x10
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	32 2f       	mov	r19, r18
    2460:	22 27       	eor	r18, r18
    2462:	81 89       	ldd	r24, Z+17	; 0x11
    2464:	28 2b       	or	r18, r24
    2466:	24 51       	subi	r18, 0x14	; 20
    2468:	31 09       	sbc	r19, r1
    246a:	86 a5       	ldd	r24, Z+46	; 0x2e
    246c:	82 95       	swap	r24
    246e:	8f 70       	andi	r24, 0x0F	; 15
    2470:	a9 01       	movw	r20, r18
    2472:	64 e0       	ldi	r22, 0x04	; 4
    2474:	86 9f       	mul	r24, r22
    2476:	40 19       	sub	r20, r0
    2478:	51 09       	sbc	r21, r1
    247a:	11 24       	eor	r1, r1
    247c:	ca 01       	movw	r24, r20
    247e:	99 23       	and	r25, r25
    2480:	14 f4       	brge	.+4      	; 0x2486 <get_tcp_data_len+0x2e>
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	08 95       	ret

00002488 <fill_tcp_data_p>:
    2488:	9a 01       	movw	r18, r20
    248a:	2f 5f       	subi	r18, 0xFF	; 255
    248c:	3f 4f       	sbci	r19, 0xFF	; 255
    248e:	fa 01       	movw	r30, r20
    2490:	44 91       	lpm	r20, Z
    2492:	44 23       	and	r20, r20
    2494:	69 f0       	breq	.+26     	; 0x24b0 <fill_tcp_data_p+0x28>
    2496:	fb 01       	movw	r30, r22
    2498:	f6 96       	adiw	r30, 0x36	; 54
    249a:	dc 01       	movw	r26, r24
    249c:	ae 0f       	add	r26, r30
    249e:	bf 1f       	adc	r27, r31
    24a0:	f9 01       	movw	r30, r18
    24a2:	4d 93       	st	X+, r20
    24a4:	6f 5f       	subi	r22, 0xFF	; 255
    24a6:	7f 4f       	sbci	r23, 0xFF	; 255
    24a8:	44 91       	lpm	r20, Z
    24aa:	31 96       	adiw	r30, 0x01	; 1
    24ac:	41 11       	cpse	r20, r1
    24ae:	f9 cf       	rjmp	.-14     	; 0x24a2 <fill_tcp_data_p+0x1a>
    24b0:	cb 01       	movw	r24, r22
    24b2:	08 95       	ret

000024b4 <fill_tcp_data_len>:
    24b4:	22 23       	and	r18, r18
    24b6:	91 f0       	breq	.+36     	; 0x24dc <fill_tcp_data_len+0x28>
    24b8:	a4 2f       	mov	r26, r20
    24ba:	b5 2f       	mov	r27, r21
    24bc:	ab 01       	movw	r20, r22
    24be:	4a 5c       	subi	r20, 0xCA	; 202
    24c0:	5f 4f       	sbci	r21, 0xFF	; 255
    24c2:	fc 01       	movw	r30, r24
    24c4:	e4 0f       	add	r30, r20
    24c6:	f5 1f       	adc	r31, r21
    24c8:	92 2f       	mov	r25, r18
    24ca:	3d 91       	ld	r19, X+
    24cc:	31 93       	st	Z+, r19
    24ce:	91 50       	subi	r25, 0x01	; 1
    24d0:	e1 f7       	brne	.-8      	; 0x24ca <fill_tcp_data_len+0x16>
    24d2:	21 50       	subi	r18, 0x01	; 1
    24d4:	62 0f       	add	r22, r18
    24d6:	71 1d       	adc	r23, r1
    24d8:	6f 5f       	subi	r22, 0xFF	; 255
    24da:	7f 4f       	sbci	r23, 0xFF	; 255
    24dc:	cb 01       	movw	r24, r22
    24de:	08 95       	ret

000024e0 <fill_tcp_data>:
    24e0:	fa 01       	movw	r30, r20
    24e2:	01 90       	ld	r0, Z+
    24e4:	00 20       	and	r0, r0
    24e6:	e9 f7       	brne	.-6      	; 0x24e2 <fill_tcp_data+0x2>
    24e8:	31 97       	sbiw	r30, 0x01	; 1
    24ea:	9f 01       	movw	r18, r30
    24ec:	24 1b       	sub	r18, r20
    24ee:	35 0b       	sbc	r19, r21
    24f0:	e1 cf       	rjmp	.-62     	; 0x24b4 <fill_tcp_data_len>
    24f2:	08 95       	ret

000024f4 <www_client_internal_datafill_callback>:
    24f4:	ef 92       	push	r14
    24f6:	ff 92       	push	r15
    24f8:	0f 93       	push	r16
    24fa:	1f 93       	push	r17
    24fc:	cf 93       	push	r28
    24fe:	df 93       	push	r29
    2500:	00 d0       	rcall	.+0      	; 0x2502 <www_client_internal_datafill_callback+0xe>
    2502:	00 d0       	rcall	.+0      	; 0x2504 <www_client_internal_datafill_callback+0x10>
    2504:	1f 92       	push	r1
    2506:	cd b7       	in	r28, 0x3d	; 61
    2508:	de b7       	in	r29, 0x3e	; 62
    250a:	90 91 1a 05 	lds	r25, 0x051A	; 0x80051a <www_fd>
    250e:	98 13       	cpse	r25, r24
    2510:	a5 c0       	rjmp	.+330    	; 0x265c <www_client_internal_datafill_callback+0x168>
    2512:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <browsertype>
    2516:	81 11       	cpse	r24, r1
    2518:	2a c0       	rjmp	.+84     	; 0x256e <www_client_internal_datafill_callback+0x7a>
    251a:	00 91 0b 05 	lds	r16, 0x050B	; 0x80050b <bufptr>
    251e:	10 91 0c 05 	lds	r17, 0x050C	; 0x80050c <bufptr+0x1>
    2522:	46 ec       	ldi	r20, 0xC6	; 198
    2524:	52 e0       	ldi	r21, 0x02	; 2
    2526:	60 e0       	ldi	r22, 0x00	; 0
    2528:	70 e0       	ldi	r23, 0x00	; 0
    252a:	c8 01       	movw	r24, r16
    252c:	ad df       	rcall	.-166    	; 0x2488 <fill_tcp_data_p>
    252e:	40 91 11 05 	lds	r20, 0x0511	; 0x800511 <client_urlbuf_p>
    2532:	50 91 12 05 	lds	r21, 0x0512	; 0x800512 <client_urlbuf_p+0x1>
    2536:	bc 01       	movw	r22, r24
    2538:	c8 01       	movw	r24, r16
    253a:	a6 df       	rcall	.-180    	; 0x2488 <fill_tcp_data_p>
    253c:	40 91 0f 05 	lds	r20, 0x050F	; 0x80050f <client_urlbuf_var>
    2540:	50 91 10 05 	lds	r21, 0x0510	; 0x800510 <client_urlbuf_var+0x1>
    2544:	bc 01       	movw	r22, r24
    2546:	c8 01       	movw	r24, r16
    2548:	cb df       	rcall	.-106    	; 0x24e0 <fill_tcp_data>
    254a:	44 eb       	ldi	r20, 0xB4	; 180
    254c:	52 e0       	ldi	r21, 0x02	; 2
    254e:	bc 01       	movw	r22, r24
    2550:	c8 01       	movw	r24, r16
    2552:	9a df       	rcall	.-204    	; 0x2488 <fill_tcp_data_p>
    2554:	40 91 0d 05 	lds	r20, 0x050D	; 0x80050d <client_hoststr>
    2558:	50 91 0e 05 	lds	r21, 0x050E	; 0x80050e <client_hoststr+0x1>
    255c:	bc 01       	movw	r22, r24
    255e:	c8 01       	movw	r24, r16
    2560:	93 df       	rcall	.-218    	; 0x2488 <fill_tcp_data_p>
    2562:	47 e8       	ldi	r20, 0x87	; 135
    2564:	52 e0       	ldi	r21, 0x02	; 2
    2566:	bc 01       	movw	r22, r24
    2568:	c8 01       	movw	r24, r16
    256a:	8e df       	rcall	.-228    	; 0x2488 <fill_tcp_data_p>
    256c:	79 c0       	rjmp	.+242    	; 0x2660 <www_client_internal_datafill_callback+0x16c>
    256e:	81 30       	cpi	r24, 0x01	; 1
    2570:	09 f0       	breq	.+2      	; 0x2574 <www_client_internal_datafill_callback+0x80>
    2572:	68 c0       	rjmp	.+208    	; 0x2644 <www_client_internal_datafill_callback+0x150>
    2574:	00 91 0b 05 	lds	r16, 0x050B	; 0x80050b <bufptr>
    2578:	10 91 0c 05 	lds	r17, 0x050C	; 0x80050c <bufptr+0x1>
    257c:	41 e8       	ldi	r20, 0x81	; 129
    257e:	52 e0       	ldi	r21, 0x02	; 2
    2580:	60 e0       	ldi	r22, 0x00	; 0
    2582:	70 e0       	ldi	r23, 0x00	; 0
    2584:	c8 01       	movw	r24, r16
    2586:	80 df       	rcall	.-256    	; 0x2488 <fill_tcp_data_p>
    2588:	40 91 11 05 	lds	r20, 0x0511	; 0x800511 <client_urlbuf_p>
    258c:	50 91 12 05 	lds	r21, 0x0512	; 0x800512 <client_urlbuf_p+0x1>
    2590:	bc 01       	movw	r22, r24
    2592:	c8 01       	movw	r24, r16
    2594:	79 df       	rcall	.-270    	; 0x2488 <fill_tcp_data_p>
    2596:	40 91 0f 05 	lds	r20, 0x050F	; 0x80050f <client_urlbuf_var>
    259a:	50 91 10 05 	lds	r21, 0x0510	; 0x800510 <client_urlbuf_var+0x1>
    259e:	bc 01       	movw	r22, r24
    25a0:	c8 01       	movw	r24, r16
    25a2:	9e df       	rcall	.-196    	; 0x24e0 <fill_tcp_data>
    25a4:	4f e6       	ldi	r20, 0x6F	; 111
    25a6:	52 e0       	ldi	r21, 0x02	; 2
    25a8:	bc 01       	movw	r22, r24
    25aa:	c8 01       	movw	r24, r16
    25ac:	6d df       	rcall	.-294    	; 0x2488 <fill_tcp_data_p>
    25ae:	40 91 0d 05 	lds	r20, 0x050D	; 0x80050d <client_hoststr>
    25b2:	50 91 0e 05 	lds	r21, 0x050E	; 0x80050e <client_hoststr+0x1>
    25b6:	bc 01       	movw	r22, r24
    25b8:	c8 01       	movw	r24, r16
    25ba:	66 df       	rcall	.-308    	; 0x2488 <fill_tcp_data_p>
    25bc:	e0 90 15 05 	lds	r14, 0x0515	; 0x800515 <client_additionalheaderline_p>
    25c0:	f0 90 16 05 	lds	r15, 0x0516	; 0x800516 <client_additionalheaderline_p+0x1>
    25c4:	e1 14       	cp	r14, r1
    25c6:	f1 04       	cpc	r15, r1
    25c8:	49 f0       	breq	.+18     	; 0x25dc <www_client_internal_datafill_callback+0xe8>
    25ca:	4c e6       	ldi	r20, 0x6C	; 108
    25cc:	52 e0       	ldi	r21, 0x02	; 2
    25ce:	bc 01       	movw	r22, r24
    25d0:	c8 01       	movw	r24, r16
    25d2:	5a df       	rcall	.-332    	; 0x2488 <fill_tcp_data_p>
    25d4:	a7 01       	movw	r20, r14
    25d6:	bc 01       	movw	r22, r24
    25d8:	c8 01       	movw	r24, r16
    25da:	56 df       	rcall	.-340    	; 0x2488 <fill_tcp_data_p>
    25dc:	47 e4       	ldi	r20, 0x47	; 71
    25de:	52 e0       	ldi	r21, 0x02	; 2
    25e0:	bc 01       	movw	r22, r24
    25e2:	c8 01       	movw	r24, r16
    25e4:	51 df       	rcall	.-350    	; 0x2488 <fill_tcp_data_p>
    25e6:	46 e3       	ldi	r20, 0x36	; 54
    25e8:	52 e0       	ldi	r21, 0x02	; 2
    25ea:	bc 01       	movw	r22, r24
    25ec:	c8 01       	movw	r24, r16
    25ee:	4c df       	rcall	.-360    	; 0x2488 <fill_tcp_data_p>
    25f0:	7c 01       	movw	r14, r24
    25f2:	e0 91 13 05 	lds	r30, 0x0513	; 0x800513 <client_postval>
    25f6:	f0 91 14 05 	lds	r31, 0x0514	; 0x800514 <client_postval+0x1>
    25fa:	df 01       	movw	r26, r30
    25fc:	0d 90       	ld	r0, X+
    25fe:	00 20       	and	r0, r0
    2600:	e9 f7       	brne	.-6      	; 0x25fc <www_client_internal_datafill_callback+0x108>
    2602:	cd 01       	movw	r24, r26
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	4a e0       	ldi	r20, 0x0A	; 10
    2608:	be 01       	movw	r22, r28
    260a:	6f 5f       	subi	r22, 0xFF	; 255
    260c:	7f 4f       	sbci	r23, 0xFF	; 255
    260e:	8e 1b       	sub	r24, r30
    2610:	9f 0b       	sbc	r25, r31
    2612:	0e 94 6f 44 	call	0x88de	; 0x88de <__itoa_ncheck>
    2616:	00 91 0b 05 	lds	r16, 0x050B	; 0x80050b <bufptr>
    261a:	10 91 0c 05 	lds	r17, 0x050C	; 0x80050c <bufptr+0x1>
    261e:	ae 01       	movw	r20, r28
    2620:	4f 5f       	subi	r20, 0xFF	; 255
    2622:	5f 4f       	sbci	r21, 0xFF	; 255
    2624:	b7 01       	movw	r22, r14
    2626:	c8 01       	movw	r24, r16
    2628:	5b df       	rcall	.-330    	; 0x24e0 <fill_tcp_data>
    262a:	40 e0       	ldi	r20, 0x00	; 0
    262c:	52 e0       	ldi	r21, 0x02	; 2
    262e:	bc 01       	movw	r22, r24
    2630:	c8 01       	movw	r24, r16
    2632:	2a df       	rcall	.-428    	; 0x2488 <fill_tcp_data_p>
    2634:	40 91 13 05 	lds	r20, 0x0513	; 0x800513 <client_postval>
    2638:	50 91 14 05 	lds	r21, 0x0514	; 0x800514 <client_postval+0x1>
    263c:	bc 01       	movw	r22, r24
    263e:	c8 01       	movw	r24, r16
    2640:	4f df       	rcall	.-354    	; 0x24e0 <fill_tcp_data>
    2642:	0e c0       	rjmp	.+28     	; 0x2660 <www_client_internal_datafill_callback+0x16c>
    2644:	40 91 0f 05 	lds	r20, 0x050F	; 0x80050f <client_urlbuf_var>
    2648:	50 91 10 05 	lds	r21, 0x0510	; 0x800510 <client_urlbuf_var+0x1>
    264c:	60 e0       	ldi	r22, 0x00	; 0
    264e:	70 e0       	ldi	r23, 0x00	; 0
    2650:	80 91 0b 05 	lds	r24, 0x050B	; 0x80050b <bufptr>
    2654:	90 91 0c 05 	lds	r25, 0x050C	; 0x80050c <bufptr+0x1>
    2658:	43 df       	rcall	.-378    	; 0x24e0 <fill_tcp_data>
    265a:	02 c0       	rjmp	.+4      	; 0x2660 <www_client_internal_datafill_callback+0x16c>
    265c:	80 e0       	ldi	r24, 0x00	; 0
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	0f 90       	pop	r0
    2662:	0f 90       	pop	r0
    2664:	0f 90       	pop	r0
    2666:	0f 90       	pop	r0
    2668:	0f 90       	pop	r0
    266a:	df 91       	pop	r29
    266c:	cf 91       	pop	r28
    266e:	1f 91       	pop	r17
    2670:	0f 91       	pop	r16
    2672:	ff 90       	pop	r15
    2674:	ef 90       	pop	r14
    2676:	08 95       	ret

00002678 <make_tcp_ack_from_any>:
    2678:	ff 92       	push	r15
    267a:	0f 93       	push	r16
    267c:	1f 93       	push	r17
    267e:	cf 93       	push	r28
    2680:	df 93       	push	r29
    2682:	ec 01       	movw	r28, r24
    2684:	8b 01       	movw	r16, r22
    2686:	f4 2e       	mov	r15, r20
    2688:	4b de       	rcall	.-874    	; 0x2320 <make_eth>
    268a:	8f 2d       	mov	r24, r15
    268c:	80 61       	ori	r24, 0x10	; 16
    268e:	8f a7       	std	Y+47, r24	; 0x2f
    2690:	84 e0       	ldi	r24, 0x04	; 4
    2692:	f8 12       	cpse	r15, r24
    2694:	05 c0       	rjmp	.+10     	; 0x26a0 <make_tcp_ack_from_any+0x28>
    2696:	41 e0       	ldi	r20, 0x01	; 1
    2698:	b8 01       	movw	r22, r16
    269a:	ce 01       	movw	r24, r28
    269c:	87 de       	rcall	.-754    	; 0x23ac <make_tcphead>
    269e:	09 c0       	rjmp	.+18     	; 0x26b2 <make_tcp_ack_from_any+0x3a>
    26a0:	01 15       	cp	r16, r1
    26a2:	11 05       	cpc	r17, r1
    26a4:	11 f4       	brne	.+4      	; 0x26aa <make_tcp_ack_from_any+0x32>
    26a6:	01 e0       	ldi	r16, 0x01	; 1
    26a8:	10 e0       	ldi	r17, 0x00	; 0
    26aa:	41 e0       	ldi	r20, 0x01	; 1
    26ac:	b8 01       	movw	r22, r16
    26ae:	ce 01       	movw	r24, r28
    26b0:	7d de       	rcall	.-774    	; 0x23ac <make_tcphead>
    26b2:	18 8a       	std	Y+16, r1	; 0x10
    26b4:	88 e2       	ldi	r24, 0x28	; 40
    26b6:	89 8b       	std	Y+17, r24	; 0x11
    26b8:	ce 01       	movw	r24, r28
    26ba:	54 de       	rcall	.-856    	; 0x2364 <make_ip>
    26bc:	84 e0       	ldi	r24, 0x04	; 4
    26be:	88 ab       	std	Y+48, r24	; 0x30
    26c0:	19 aa       	std	Y+49, r1	; 0x31
    26c2:	42 e0       	ldi	r20, 0x02	; 2
    26c4:	6c e1       	ldi	r22, 0x1C	; 28
    26c6:	70 e0       	ldi	r23, 0x00	; 0
    26c8:	ce 01       	movw	r24, r28
    26ca:	4a 96       	adiw	r24, 0x1a	; 26
    26cc:	1e dd       	rcall	.-1476   	; 0x210a <checksum>
    26ce:	9a ab       	std	Y+50, r25	; 0x32
    26d0:	8b ab       	std	Y+51, r24	; 0x33
    26d2:	be 01       	movw	r22, r28
    26d4:	86 e3       	ldi	r24, 0x36	; 54
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	e5 db       	rcall	.-2102   	; 0x1ea4 <enc28j60PacketSend>
    26da:	df 91       	pop	r29
    26dc:	cf 91       	pop	r28
    26de:	1f 91       	pop	r17
    26e0:	0f 91       	pop	r16
    26e2:	ff 90       	pop	r15
    26e4:	08 95       	ret

000026e6 <make_tcp_ack_with_data_noflags>:
    26e6:	0f 93       	push	r16
    26e8:	1f 93       	push	r17
    26ea:	cf 93       	push	r28
    26ec:	df 93       	push	r29
    26ee:	ec 01       	movw	r28, r24
    26f0:	8b 01       	movw	r16, r22
    26f2:	cb 01       	movw	r24, r22
    26f4:	88 96       	adiw	r24, 0x28	; 40
    26f6:	98 8b       	std	Y+16, r25	; 0x10
    26f8:	89 8b       	std	Y+17, r24	; 0x11
    26fa:	ce 01       	movw	r24, r28
    26fc:	1f de       	rcall	.-962    	; 0x233c <fill_ip_hdr_checksum>
    26fe:	1a aa       	std	Y+50, r1	; 0x32
    2700:	1b aa       	std	Y+51, r1	; 0x33
    2702:	b8 01       	movw	r22, r16
    2704:	64 5e       	subi	r22, 0xE4	; 228
    2706:	7f 4f       	sbci	r23, 0xFF	; 255
    2708:	42 e0       	ldi	r20, 0x02	; 2
    270a:	ce 01       	movw	r24, r28
    270c:	4a 96       	adiw	r24, 0x1a	; 26
    270e:	fd dc       	rcall	.-1542   	; 0x210a <checksum>
    2710:	9a ab       	std	Y+50, r25	; 0x32
    2712:	8b ab       	std	Y+51, r24	; 0x33
    2714:	be 01       	movw	r22, r28
    2716:	c8 01       	movw	r24, r16
    2718:	c6 96       	adiw	r24, 0x36	; 54
    271a:	c4 db       	rcall	.-2168   	; 0x1ea4 <enc28j60PacketSend>
    271c:	df 91       	pop	r29
    271e:	cf 91       	pop	r28
    2720:	1f 91       	pop	r17
    2722:	0f 91       	pop	r16
    2724:	08 95       	ret

00002726 <init_udp_or_www_server>:
    2726:	9c 01       	movw	r18, r24
    2728:	61 15       	cp	r22, r1
    272a:	71 05       	cpc	r23, r1
    272c:	51 f0       	breq	.+20     	; 0x2742 <init_udp_or_www_server+0x1c>
    272e:	db 01       	movw	r26, r22
    2730:	ef e2       	ldi	r30, 0x2F	; 47
    2732:	f5 e0       	ldi	r31, 0x05	; 5
    2734:	43 e3       	ldi	r20, 0x33	; 51
    2736:	55 e0       	ldi	r21, 0x05	; 5
    2738:	9d 91       	ld	r25, X+
    273a:	91 93       	st	Z+, r25
    273c:	e4 17       	cp	r30, r20
    273e:	f5 07       	cpc	r31, r21
    2740:	d9 f7       	brne	.-10     	; 0x2738 <init_udp_or_www_server+0x12>
    2742:	21 15       	cp	r18, r1
    2744:	31 05       	cpc	r19, r1
    2746:	11 f0       	breq	.+4      	; 0x274c <init_udp_or_www_server+0x26>
    2748:	c9 01       	movw	r24, r18
    274a:	55 cd       	rjmp	.-1366   	; 0x21f6 <init_mac>
    274c:	08 95       	ret

0000274e <www_server_port>:
    274e:	90 93 04 05 	sts	0x0504, r25	; 0x800504 <wwwport_h>
    2752:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <wwwport_l>
    2756:	08 95       	ret

00002758 <make_tcp_synack_from_syn>:
    2758:	cf 93       	push	r28
    275a:	df 93       	push	r29
    275c:	ec 01       	movw	r28, r24
    275e:	e0 dd       	rcall	.-1088   	; 0x2320 <make_eth>
    2760:	18 8a       	std	Y+16, r1	; 0x10
    2762:	8c e2       	ldi	r24, 0x2C	; 44
    2764:	89 8b       	std	Y+17, r24	; 0x11
    2766:	ce 01       	movw	r24, r28
    2768:	fd dd       	rcall	.-1030   	; 0x2364 <make_ip>
    276a:	82 e1       	ldi	r24, 0x12	; 18
    276c:	8f a7       	std	Y+47, r24	; 0x2f
    276e:	40 e0       	ldi	r20, 0x00	; 0
    2770:	61 e0       	ldi	r22, 0x01	; 1
    2772:	70 e0       	ldi	r23, 0x00	; 0
    2774:	ce 01       	movw	r24, r28
    2776:	1a de       	rcall	.-972    	; 0x23ac <make_tcphead>
    2778:	1e a2       	std	Y+38, r1	; 0x26
    277a:	1f a2       	std	Y+39, r1	; 0x27
    277c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <seqnum>
    2780:	88 a7       	std	Y+40, r24	; 0x28
    2782:	19 a6       	std	Y+41, r1	; 0x29
    2784:	8d 5f       	subi	r24, 0xFD	; 253
    2786:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <seqnum>
    278a:	82 e0       	ldi	r24, 0x02	; 2
    278c:	8e ab       	std	Y+54, r24	; 0x36
    278e:	84 e0       	ldi	r24, 0x04	; 4
    2790:	8f ab       	std	Y+55, r24	; 0x37
    2792:	85 e0       	ldi	r24, 0x05	; 5
    2794:	88 af       	std	Y+56, r24	; 0x38
    2796:	19 ae       	std	Y+57, r1	; 0x39
    2798:	80 e6       	ldi	r24, 0x60	; 96
    279a:	8e a7       	std	Y+46, r24	; 0x2e
    279c:	8a e0       	ldi	r24, 0x0A	; 10
    279e:	88 ab       	std	Y+48, r24	; 0x30
    27a0:	19 aa       	std	Y+49, r1	; 0x31
    27a2:	42 e0       	ldi	r20, 0x02	; 2
    27a4:	60 e2       	ldi	r22, 0x20	; 32
    27a6:	70 e0       	ldi	r23, 0x00	; 0
    27a8:	ce 01       	movw	r24, r28
    27aa:	4a 96       	adiw	r24, 0x1a	; 26
    27ac:	ae dc       	rcall	.-1700   	; 0x210a <checksum>
    27ae:	9a ab       	std	Y+50, r25	; 0x32
    27b0:	8b ab       	std	Y+51, r24	; 0x33
    27b2:	be 01       	movw	r22, r28
    27b4:	8a e3       	ldi	r24, 0x3A	; 58
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	75 db       	rcall	.-2326   	; 0x1ea4 <enc28j60PacketSend>
    27ba:	df 91       	pop	r29
    27bc:	cf 91       	pop	r28
    27be:	08 95       	ret

000027c0 <www_server_reply>:
    27c0:	0f 93       	push	r16
    27c2:	1f 93       	push	r17
    27c4:	cf 93       	push	r28
    27c6:	df 93       	push	r29
    27c8:	ec 01       	movw	r28, r24
    27ca:	8b 01       	movw	r16, r22
    27cc:	60 91 02 05 	lds	r22, 0x0502	; 0x800502 <info_data_len>
    27d0:	70 91 03 05 	lds	r23, 0x0503	; 0x800503 <info_data_len+0x1>
    27d4:	40 e0       	ldi	r20, 0x00	; 0
    27d6:	50 df       	rcall	.-352    	; 0x2678 <make_tcp_ack_from_any>
    27d8:	89 e1       	ldi	r24, 0x19	; 25
    27da:	8f a7       	std	Y+47, r24	; 0x2f
    27dc:	b8 01       	movw	r22, r16
    27de:	ce 01       	movw	r24, r28
    27e0:	82 df       	rcall	.-252    	; 0x26e6 <make_tcp_ack_with_data_noflags>
    27e2:	df 91       	pop	r29
    27e4:	cf 91       	pop	r28
    27e6:	1f 91       	pop	r17
    27e8:	0f 91       	pop	r16
    27ea:	08 95       	ret

000027ec <fill_buf_p>:
    27ec:	dc 01       	movw	r26, r24
    27ee:	fa 01       	movw	r30, r20
    27f0:	61 15       	cp	r22, r1
    27f2:	71 05       	cpc	r23, r1
    27f4:	41 f0       	breq	.+16     	; 0x2806 <fill_buf_p+0x1a>
    27f6:	68 0f       	add	r22, r24
    27f8:	79 1f       	adc	r23, r25
    27fa:	84 91       	lpm	r24, Z
    27fc:	8d 93       	st	X+, r24
    27fe:	31 96       	adiw	r30, 0x01	; 1
    2800:	6a 17       	cp	r22, r26
    2802:	7b 07       	cpc	r23, r27
    2804:	d1 f7       	brne	.-12     	; 0x27fa <fill_buf_p+0xe>
    2806:	08 95       	ret

00002808 <client_arp_whohas>:
    2808:	cf 92       	push	r12
    280a:	df 92       	push	r13
    280c:	ef 92       	push	r14
    280e:	ff 92       	push	r15
    2810:	0f 93       	push	r16
    2812:	1f 93       	push	r17
    2814:	cf 93       	push	r28
    2816:	df 93       	push	r29
    2818:	7c 01       	movw	r14, r24
    281a:	80 91 2f 05 	lds	r24, 0x052F	; 0x80052f <ipaddr>
    281e:	88 23       	and	r24, r24
    2820:	c1 f1       	breq	.+112    	; 0x2892 <client_arp_whohas+0x8a>
    2822:	d7 01       	movw	r26, r14
    2824:	c3 e3       	ldi	r28, 0x33	; 51
    2826:	d5 e0       	ldi	r29, 0x05	; 5
    2828:	09 e3       	ldi	r16, 0x39	; 57
    282a:	15 e0       	ldi	r17, 0x05	; 5
    282c:	fe 01       	movw	r30, r28
    282e:	2f ef       	ldi	r18, 0xFF	; 255
    2830:	2d 93       	st	X+, r18
    2832:	91 91       	ld	r25, Z+
    2834:	15 96       	adiw	r26, 0x05	; 5
    2836:	9c 93       	st	X, r25
    2838:	15 97       	sbiw	r26, 0x05	; 5
    283a:	0e 17       	cp	r16, r30
    283c:	1f 07       	cpc	r17, r31
    283e:	c1 f7       	brne	.-16     	; 0x2830 <client_arp_whohas+0x28>
    2840:	d7 2e       	mov	r13, r23
    2842:	c6 2e       	mov	r12, r22
    2844:	88 e0       	ldi	r24, 0x08	; 8
    2846:	f7 01       	movw	r30, r14
    2848:	84 87       	std	Z+12, r24	; 0x0c
    284a:	86 e0       	ldi	r24, 0x06	; 6
    284c:	85 87       	std	Z+13, r24	; 0x0d
    284e:	4b ec       	ldi	r20, 0xCB	; 203
    2850:	52 e0       	ldi	r21, 0x02	; 2
    2852:	68 e0       	ldi	r22, 0x08	; 8
    2854:	70 e0       	ldi	r23, 0x00	; 0
    2856:	c7 01       	movw	r24, r14
    2858:	0e 96       	adiw	r24, 0x0e	; 14
    285a:	c8 df       	rcall	.-112    	; 0x27ec <fill_buf_p>
    285c:	f7 01       	movw	r30, r14
    285e:	76 96       	adiw	r30, 0x16	; 22
    2860:	89 91       	ld	r24, Y+
    2862:	81 93       	st	Z+, r24
    2864:	11 86       	std	Z+9, r1	; 0x09
    2866:	0c 17       	cp	r16, r28
    2868:	1d 07       	cpc	r17, r29
    286a:	d1 f7       	brne	.-12     	; 0x2860 <client_arp_whohas+0x58>
    286c:	cc 2d       	mov	r28, r12
    286e:	dd 2d       	mov	r29, r13
    2870:	af e2       	ldi	r26, 0x2F	; 47
    2872:	b5 e0       	ldi	r27, 0x05	; 5
    2874:	f7 01       	movw	r30, r14
    2876:	7c 96       	adiw	r30, 0x1c	; 28
    2878:	23 e3       	ldi	r18, 0x33	; 51
    287a:	35 e0       	ldi	r19, 0x05	; 5
    287c:	89 91       	ld	r24, Y+
    287e:	82 87       	std	Z+10, r24	; 0x0a
    2880:	8d 91       	ld	r24, X+
    2882:	81 93       	st	Z+, r24
    2884:	a2 17       	cp	r26, r18
    2886:	b3 07       	cpc	r27, r19
    2888:	c9 f7       	brne	.-14     	; 0x287c <client_arp_whohas+0x74>
    288a:	b7 01       	movw	r22, r14
    288c:	8a e2       	ldi	r24, 0x2A	; 42
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	09 db       	rcall	.-2542   	; 0x1ea4 <enc28j60PacketSend>
    2892:	df 91       	pop	r29
    2894:	cf 91       	pop	r28
    2896:	1f 91       	pop	r17
    2898:	0f 91       	pop	r16
    289a:	ff 90       	pop	r15
    289c:	ef 90       	pop	r14
    289e:	df 90       	pop	r13
    28a0:	cf 90       	pop	r12
    28a2:	08 95       	ret

000028a4 <get_mac_with_arp_wait>:
    28a4:	81 e0       	ldi	r24, 0x01	; 1
    28a6:	90 91 06 05 	lds	r25, 0x0506	; 0x800506 <arpip_state>
    28aa:	92 30       	cpi	r25, 0x02	; 2
    28ac:	09 f4       	brne	.+2      	; 0x28b0 <get_mac_with_arp_wait+0xc>
    28ae:	80 e0       	ldi	r24, 0x00	; 0
    28b0:	08 95       	ret

000028b2 <get_mac_with_arp>:
    28b2:	50 93 3a 13 	sts	0x133A, r21	; 0x80133a <client_arp_result_callback+0x1>
    28b6:	40 93 39 13 	sts	0x1339, r20	; 0x801339 <client_arp_result_callback>
    28ba:	21 e0       	ldi	r18, 0x01	; 1
    28bc:	20 93 06 05 	sts	0x0506, r18	; 0x800506 <arpip_state>
    28c0:	60 93 05 05 	sts	0x0505, r22	; 0x800505 <arp_reference_number>
    28c4:	dc 01       	movw	r26, r24
    28c6:	e7 e0       	ldi	r30, 0x07	; 7
    28c8:	f5 e0       	ldi	r31, 0x05	; 5
    28ca:	2b e0       	ldi	r18, 0x0B	; 11
    28cc:	35 e0       	ldi	r19, 0x05	; 5
    28ce:	8d 91       	ld	r24, X+
    28d0:	81 93       	st	Z+, r24
    28d2:	e2 17       	cp	r30, r18
    28d4:	f3 07       	cpc	r31, r19
    28d6:	d9 f7       	brne	.-10     	; 0x28ce <get_mac_with_arp+0x1c>
    28d8:	08 95       	ret

000028da <tcp_client_syn>:
    28da:	df 92       	push	r13
    28dc:	ef 92       	push	r14
    28de:	ff 92       	push	r15
    28e0:	0f 93       	push	r16
    28e2:	1f 93       	push	r17
    28e4:	cf 93       	push	r28
    28e6:	df 93       	push	r29
    28e8:	ec 01       	movw	r28, r24
    28ea:	f6 2e       	mov	r15, r22
    28ec:	e4 2e       	mov	r14, r20
    28ee:	d5 2e       	mov	r13, r21
    28f0:	a2 e2       	ldi	r26, 0x22	; 34
    28f2:	b5 e0       	ldi	r27, 0x05	; 5
    28f4:	bc 01       	movw	r22, r24
    28f6:	83 e3       	ldi	r24, 0x33	; 51
    28f8:	95 e0       	ldi	r25, 0x05	; 5
    28fa:	48 e2       	ldi	r20, 0x28	; 40
    28fc:	55 e0       	ldi	r21, 0x05	; 5
    28fe:	2d 91       	ld	r18, X+
    2900:	fb 01       	movw	r30, r22
    2902:	21 93       	st	Z+, r18
    2904:	bf 01       	movw	r22, r30
    2906:	fc 01       	movw	r30, r24
    2908:	21 91       	ld	r18, Z+
    290a:	cf 01       	movw	r24, r30
    290c:	fb 01       	movw	r30, r22
    290e:	25 83       	std	Z+5, r18	; 0x05
    2910:	a4 17       	cp	r26, r20
    2912:	b5 07       	cpc	r27, r21
    2914:	a1 f7       	brne	.-24     	; 0x28fe <tcp_client_syn+0x24>
    2916:	88 e0       	ldi	r24, 0x08	; 8
    2918:	8c 87       	std	Y+12, r24	; 0x0c
    291a:	1d 86       	std	Y+13, r1	; 0x0d
    291c:	43 ed       	ldi	r20, 0xD3	; 211
    291e:	52 e0       	ldi	r21, 0x02	; 2
    2920:	69 e0       	ldi	r22, 0x09	; 9
    2922:	70 e0       	ldi	r23, 0x00	; 0
    2924:	ce 01       	movw	r24, r28
    2926:	0e 96       	adiw	r24, 0x0e	; 14
    2928:	61 df       	rcall	.-318    	; 0x27ec <fill_buf_p>
    292a:	8c e2       	ldi	r24, 0x2C	; 44
    292c:	89 8b       	std	Y+17, r24	; 0x11
    292e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ipid>
    2932:	8b 8b       	std	Y+19, r24	; 0x13
    2934:	8f 5f       	subi	r24, 0xFF	; 255
    2936:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ipid>
    293a:	86 e0       	ldi	r24, 0x06	; 6
    293c:	8f 8b       	std	Y+23, r24	; 0x17
    293e:	a8 e2       	ldi	r26, 0x28	; 40
    2940:	b5 e0       	ldi	r27, 0x05	; 5
    2942:	8f e2       	ldi	r24, 0x2F	; 47
    2944:	95 e0       	ldi	r25, 0x05	; 5
    2946:	8e 01       	movw	r16, r28
    2948:	06 5e       	subi	r16, 0xE6	; 230
    294a:	1f 4f       	sbci	r17, 0xFF	; 255
    294c:	b8 01       	movw	r22, r16
    294e:	4c e2       	ldi	r20, 0x2C	; 44
    2950:	55 e0       	ldi	r21, 0x05	; 5
    2952:	2d 91       	ld	r18, X+
    2954:	fb 01       	movw	r30, r22
    2956:	24 83       	std	Z+4, r18	; 0x04
    2958:	fc 01       	movw	r30, r24
    295a:	21 91       	ld	r18, Z+
    295c:	cf 01       	movw	r24, r30
    295e:	fb 01       	movw	r30, r22
    2960:	21 93       	st	Z+, r18
    2962:	bf 01       	movw	r22, r30
    2964:	a4 17       	cp	r26, r20
    2966:	b5 07       	cpc	r27, r21
    2968:	a1 f7       	brne	.-24     	; 0x2952 <tcp_client_syn+0x78>
    296a:	ce 01       	movw	r24, r28
    296c:	e7 dc       	rcall	.-1586   	; 0x233c <fill_ip_hdr_checksum>
    296e:	dc a2       	std	Y+36, r13	; 0x24
    2970:	ed a2       	std	Y+37, r14	; 0x25
    2972:	8b e0       	ldi	r24, 0x0B	; 11
    2974:	8a a3       	std	Y+34, r24	; 0x22
    2976:	fb a2       	std	Y+35, r15	; 0x23
    2978:	fe 01       	movw	r30, r28
    297a:	b6 96       	adiw	r30, 0x26	; 38
    297c:	ce 01       	movw	r24, r28
    297e:	8e 96       	adiw	r24, 0x2e	; 46
    2980:	11 92       	st	Z+, r1
    2982:	8e 17       	cp	r24, r30
    2984:	9f 07       	cpc	r25, r31
    2986:	e1 f7       	brne	.-8      	; 0x2980 <tcp_client_syn+0xa6>
    2988:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <seqnum>
    298c:	88 a7       	std	Y+40, r24	; 0x28
    298e:	8d 5f       	subi	r24, 0xFD	; 253
    2990:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <seqnum>
    2994:	80 e6       	ldi	r24, 0x60	; 96
    2996:	8e a7       	std	Y+46, r24	; 0x2e
    2998:	82 e0       	ldi	r24, 0x02	; 2
    299a:	8f a7       	std	Y+47, r24	; 0x2f
    299c:	93 e0       	ldi	r25, 0x03	; 3
    299e:	98 ab       	std	Y+48, r25	; 0x30
    29a0:	19 aa       	std	Y+49, r1	; 0x31
    29a2:	1a aa       	std	Y+50, r1	; 0x32
    29a4:	1b aa       	std	Y+51, r1	; 0x33
    29a6:	1c aa       	std	Y+52, r1	; 0x34
    29a8:	1d aa       	std	Y+53, r1	; 0x35
    29aa:	8e ab       	std	Y+54, r24	; 0x36
    29ac:	94 e0       	ldi	r25, 0x04	; 4
    29ae:	9f ab       	std	Y+55, r25	; 0x37
    29b0:	88 af       	std	Y+56, r24	; 0x38
    29b2:	8e ee       	ldi	r24, 0xEE	; 238
    29b4:	89 af       	std	Y+57, r24	; 0x39
    29b6:	42 e0       	ldi	r20, 0x02	; 2
    29b8:	60 e2       	ldi	r22, 0x20	; 32
    29ba:	70 e0       	ldi	r23, 0x00	; 0
    29bc:	c8 01       	movw	r24, r16
    29be:	a5 db       	rcall	.-2230   	; 0x210a <checksum>
    29c0:	9a ab       	std	Y+50, r25	; 0x32
    29c2:	8b ab       	std	Y+51, r24	; 0x33
    29c4:	be 01       	movw	r22, r28
    29c6:	8a e3       	ldi	r24, 0x3A	; 58
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	6c da       	rcall	.-2856   	; 0x1ea4 <enc28j60PacketSend>
    29cc:	df 91       	pop	r29
    29ce:	cf 91       	pop	r28
    29d0:	1f 91       	pop	r17
    29d2:	0f 91       	pop	r16
    29d4:	ff 90       	pop	r15
    29d6:	ef 90       	pop	r14
    29d8:	df 90       	pop	r13
    29da:	08 95       	ret

000029dc <client_tcp_req>:
    29dc:	0f 93       	push	r16
    29de:	1f 93       	push	r17
    29e0:	90 93 1e 05 	sts	0x051E, r25	; 0x80051e <client_tcp_result_callback+0x1>
    29e4:	80 93 1d 05 	sts	0x051D, r24	; 0x80051d <client_tcp_result_callback>
    29e8:	70 93 1c 05 	sts	0x051C, r23	; 0x80051c <client_tcp_datafill_callback+0x1>
    29ec:	60 93 1b 05 	sts	0x051B, r22	; 0x80051b <client_tcp_datafill_callback>
    29f0:	a2 2f       	mov	r26, r18
    29f2:	b3 2f       	mov	r27, r19
    29f4:	e8 e2       	ldi	r30, 0x28	; 40
    29f6:	f5 e0       	ldi	r31, 0x05	; 5
    29f8:	2c e2       	ldi	r18, 0x2C	; 44
    29fa:	35 e0       	ldi	r19, 0x05	; 5
    29fc:	8d 91       	ld	r24, X+
    29fe:	81 93       	st	Z+, r24
    2a00:	e2 17       	cp	r30, r18
    2a02:	f3 07       	cpc	r31, r19
    2a04:	d9 f7       	brne	.-10     	; 0x29fc <client_tcp_req+0x20>
    2a06:	a0 2f       	mov	r26, r16
    2a08:	b1 2f       	mov	r27, r17
    2a0a:	e2 e2       	ldi	r30, 0x22	; 34
    2a0c:	f5 e0       	ldi	r31, 0x05	; 5
    2a0e:	28 e2       	ldi	r18, 0x28	; 40
    2a10:	35 e0       	ldi	r19, 0x05	; 5
    2a12:	8d 91       	ld	r24, X+
    2a14:	81 93       	st	Z+, r24
    2a16:	e2 17       	cp	r30, r18
    2a18:	f3 07       	cpc	r31, r19
    2a1a:	d9 f7       	brne	.-10     	; 0x2a12 <client_tcp_req+0x36>
    2a1c:	50 93 20 05 	sts	0x0520, r21	; 0x800520 <tcp_client_port+0x1>
    2a20:	40 93 1f 05 	sts	0x051F, r20	; 0x80051f <tcp_client_port>
    2a24:	81 e0       	ldi	r24, 0x01	; 1
    2a26:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <tcp_client_state>
    2a2a:	80 91 2c 05 	lds	r24, 0x052C	; 0x80052c <tcp_fd>
    2a2e:	8f 5f       	subi	r24, 0xFF	; 255
    2a30:	88 30       	cpi	r24, 0x08	; 8
    2a32:	18 f4       	brcc	.+6      	; 0x2a3a <client_tcp_req+0x5e>
    2a34:	80 93 2c 05 	sts	0x052C, r24	; 0x80052c <tcp_fd>
    2a38:	02 c0       	rjmp	.+4      	; 0x2a3e <client_tcp_req+0x62>
    2a3a:	10 92 2c 05 	sts	0x052C, r1	; 0x80052c <tcp_fd>
    2a3e:	80 91 2c 05 	lds	r24, 0x052C	; 0x80052c <tcp_fd>
    2a42:	1f 91       	pop	r17
    2a44:	0f 91       	pop	r16
    2a46:	08 95       	ret

00002a48 <client_tcpSend>:
    2a48:	8f 92       	push	r8
    2a4a:	9f 92       	push	r9
    2a4c:	af 92       	push	r10
    2a4e:	bf 92       	push	r11
    2a50:	cf 92       	push	r12
    2a52:	df 92       	push	r13
    2a54:	ef 92       	push	r14
    2a56:	ff 92       	push	r15
    2a58:	0f 93       	push	r16
    2a5a:	1f 93       	push	r17
    2a5c:	cf 93       	push	r28
    2a5e:	df 93       	push	r29
    2a60:	4c 01       	movw	r8, r24
    2a62:	5b 01       	movw	r10, r22
    2a64:	7a 01       	movw	r14, r20
    2a66:	69 01       	movw	r12, r18
    2a68:	e8 01       	movw	r28, r16
    2a6a:	16 da       	rcall	.-3028   	; 0x1e98 <enc28j60linkup>
    2a6c:	88 23       	and	r24, r24
    2a6e:	a9 f0       	breq	.+42     	; 0x2a9a <client_tcpSend+0x52>
    2a70:	90 92 10 05 	sts	0x0510, r9	; 0x800510 <client_urlbuf_var+0x1>
    2a74:	80 92 0f 05 	sts	0x050F, r8	; 0x80050f <client_urlbuf_var>
    2a78:	82 e0       	ldi	r24, 0x02	; 2
    2a7a:	80 93 19 05 	sts	0x0519, r24	; 0x800519 <browsertype>
    2a7e:	b0 92 18 05 	sts	0x0518, r11	; 0x800518 <client_browser_callback+0x1>
    2a82:	a0 92 17 05 	sts	0x0517, r10	; 0x800517 <client_browser_callback>
    2a86:	86 01       	movw	r16, r12
    2a88:	97 01       	movw	r18, r14
    2a8a:	ae 01       	movw	r20, r28
    2a8c:	6a e7       	ldi	r22, 0x7A	; 122
    2a8e:	72 e1       	ldi	r23, 0x12	; 18
    2a90:	83 e0       	ldi	r24, 0x03	; 3
    2a92:	90 e1       	ldi	r25, 0x10	; 16
    2a94:	a3 df       	rcall	.-186    	; 0x29dc <client_tcp_req>
    2a96:	80 93 1a 05 	sts	0x051A, r24	; 0x80051a <www_fd>
    2a9a:	df 91       	pop	r29
    2a9c:	cf 91       	pop	r28
    2a9e:	1f 91       	pop	r17
    2aa0:	0f 91       	pop	r16
    2aa2:	ff 90       	pop	r15
    2aa4:	ef 90       	pop	r14
    2aa6:	df 90       	pop	r13
    2aa8:	cf 90       	pop	r12
    2aaa:	bf 90       	pop	r11
    2aac:	af 90       	pop	r10
    2aae:	9f 90       	pop	r9
    2ab0:	8f 90       	pop	r8
    2ab2:	08 95       	ret

00002ab4 <packetloop_arp_icmp_tcp>:


// return 0 to just continue in the packet loop and return the position 
// of the tcp data if there is tcp data part
uint16_t packetloop_arp_icmp_tcp(uint8_t *buf,uint16_t plen)
{
    2ab4:	df 92       	push	r13
    2ab6:	ef 92       	push	r14
    2ab8:	ff 92       	push	r15
    2aba:	0f 93       	push	r16
    2abc:	1f 93       	push	r17
    2abe:	cf 93       	push	r28
    2ac0:	df 93       	push	r29
    2ac2:	8c 01       	movw	r16, r24
    2ac4:	eb 01       	movw	r28, r22
        uint16_t save_len;
#endif
#ifdef ARP_MAC_resolver_client
        //plen will be unequal to zero if there is a valid 
        // packet (without crc error):
        if(plen==0){
    2ac6:	20 97       	sbiw	r28, 0x00	; 0
    2ac8:	09 f0       	breq	.+2      	; 0x2acc <packetloop_arp_icmp_tcp+0x18>
    2aca:	50 c0       	rjmp	.+160    	; 0x2b6c <packetloop_arp_icmp_tcp+0xb8>
                if (arpip_state == (WGW_ACCEPT_ARP_REPLY|WGW_INITIAL_ARP) && arp_delaycnt==0 ){
    2acc:	80 91 06 05 	lds	r24, 0x0506	; 0x800506 <arpip_state>
    2ad0:	89 30       	cpi	r24, 0x09	; 9
    2ad2:	69 f4       	brne	.+26     	; 0x2aee <packetloop_arp_icmp_tcp+0x3a>
    2ad4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <arp_delaycnt>
    2ad8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <arp_delaycnt+0x1>
    2adc:	89 2b       	or	r24, r25
    2ade:	d9 f4       	brne	.+54     	; 0x2b16 <packetloop_arp_icmp_tcp+0x62>
                        // arp_delaycnt has wrapped no arp reply yet
                        if (enc28j60linkup()) client_arp_whohas(buf,arpip);
    2ae0:	db d9       	rcall	.-3146   	; 0x1e98 <enc28j60linkup>
    2ae2:	88 23       	and	r24, r24
    2ae4:	21 f0       	breq	.+8      	; 0x2aee <packetloop_arp_icmp_tcp+0x3a>
    2ae6:	67 e0       	ldi	r22, 0x07	; 7
    2ae8:	75 e0       	ldi	r23, 0x05	; 5
    2aea:	c8 01       	movw	r24, r16
    2aec:	8d de       	rcall	.-742    	; 0x2808 <client_arp_whohas>
                }
                if (arpip_state == WGW_INITIAL_ARP && enc28j60linkup()){
    2aee:	80 91 06 05 	lds	r24, 0x0506	; 0x800506 <arpip_state>
    2af2:	81 30       	cpi	r24, 0x01	; 1
    2af4:	81 f4       	brne	.+32     	; 0x2b16 <packetloop_arp_icmp_tcp+0x62>
    2af6:	d0 d9       	rcall	.-3168   	; 0x1e98 <enc28j60linkup>
    2af8:	88 23       	and	r24, r24
    2afa:	69 f0       	breq	.+26     	; 0x2b16 <packetloop_arp_icmp_tcp+0x62>
                        client_arp_whohas(buf,arpip);
    2afc:	67 e0       	ldi	r22, 0x07	; 7
    2afe:	75 e0       	ldi	r23, 0x05	; 5
    2b00:	c8 01       	movw	r24, r16
    2b02:	82 de       	rcall	.-764    	; 0x2808 <client_arp_whohas>
                        arpip_state|=WGW_ACCEPT_ARP_REPLY; // WGW_INITIAL_ARP and WGW_ACCEPT_ARP_REPLY set
    2b04:	80 91 06 05 	lds	r24, 0x0506	; 0x800506 <arpip_state>
    2b08:	88 60       	ori	r24, 0x08	; 8
    2b0a:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <arpip_state>
                        arp_delaycnt=0; // this is like a timer, not so precise but good enough, it wraps in about 2 sec
    2b0e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <arp_delaycnt+0x1>
    2b12:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <arp_delaycnt>
                }
                arp_delaycnt++;
    2b16:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <arp_delaycnt>
    2b1a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <arp_delaycnt+0x1>
    2b1e:	01 96       	adiw	r24, 0x01	; 1
    2b20:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <arp_delaycnt+0x1>
    2b24:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <arp_delaycnt>
#if defined (TCP_client)
                if (tcp_client_state==1 && enc28j60linkup()){ // send a syn
    2b28:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <tcp_client_state>
    2b2c:	81 30       	cpi	r24, 0x01	; 1
    2b2e:	09 f0       	breq	.+2      	; 0x2b32 <packetloop_arp_icmp_tcp+0x7e>
    2b30:	96 c1       	rjmp	.+812    	; 0x2e5e <packetloop_arp_icmp_tcp+0x3aa>
    2b32:	b2 d9       	rcall	.-3228   	; 0x1e98 <enc28j60linkup>
    2b34:	88 23       	and	r24, r24
    2b36:	09 f4       	brne	.+2      	; 0x2b3a <packetloop_arp_icmp_tcp+0x86>
    2b38:	95 c1       	rjmp	.+810    	; 0x2e64 <packetloop_arp_icmp_tcp+0x3b0>
                        tcp_client_state=2;
    2b3a:	82 e0       	ldi	r24, 0x02	; 2
    2b3c:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <tcp_client_state>
                        tcpclient_src_port_l++; // allocate a new port
    2b40:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <tcpclient_src_port_l>
    2b44:	8f 5f       	subi	r24, 0xFF	; 255
    2b46:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <tcpclient_src_port_l>
                        // we encode our 3 bit fd into the src port this
                        // way we get it back in every message that comes
                        // from the server:
                        tcp_client_syn(buf,((tcp_fd<<5) | (0x1f & tcpclient_src_port_l)),tcp_client_port);
    2b4a:	40 91 1f 05 	lds	r20, 0x051F	; 0x80051f <tcp_client_port>
    2b4e:	50 91 20 05 	lds	r21, 0x0520	; 0x800520 <tcp_client_port+0x1>
    2b52:	60 91 2c 05 	lds	r22, 0x052C	; 0x80052c <tcp_fd>
    2b56:	90 e2       	ldi	r25, 0x20	; 32
    2b58:	69 9f       	mul	r22, r25
    2b5a:	b0 01       	movw	r22, r0
    2b5c:	11 24       	eor	r1, r1
    2b5e:	8f 71       	andi	r24, 0x1F	; 31
    2b60:	68 2b       	or	r22, r24
    2b62:	c8 01       	movw	r24, r16
                }
#endif
                return(0);
    2b64:	ba de       	rcall	.-652    	; 0x28da <tcp_client_syn>
    2b66:	e1 2c       	mov	r14, r1
    2b68:	f1 2c       	mov	r15, r1
        }
#endif // ARP_MAC_resolver_client
        // arp is broadcast if unknown but a host may also
        // verify the mac address by sending it to 
        // a unicast address.
        if(eth_type_is_arp_and_my_ip(buf,plen)){
    2b6a:	b0 c1       	rjmp	.+864    	; 0x2ecc <packetloop_arp_icmp_tcp+0x418>
    2b6c:	89 db       	rcall	.-2286   	; 0x2280 <eth_type_is_arp_and_my_ip>
    2b6e:	88 23       	and	r24, r24
                if (buf[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V){
    2b70:	69 f1       	breq	.+90     	; 0x2bcc <packetloop_arp_icmp_tcp+0x118>
    2b72:	d8 01       	movw	r26, r16
    2b74:	55 96       	adiw	r26, 0x15	; 21
    2b76:	8c 91       	ld	r24, X
    2b78:	81 30       	cpi	r24, 0x01	; 1
                        // is it an arp request 
                        make_arp_answer_from_request(buf);
    2b7a:	11 f4       	brne	.+4      	; 0x2b80 <packetloop_arp_icmp_tcp+0xcc>
    2b7c:	c8 01       	movw	r24, r16
    2b7e:	2a dc       	rcall	.-1964   	; 0x23d4 <make_arp_answer_from_request>
                }
#ifdef ARP_MAC_resolver_client
                if ((arpip_state & WGW_ACCEPT_ARP_REPLY) && (buf[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V)){
    2b80:	80 91 06 05 	lds	r24, 0x0506	; 0x800506 <arpip_state>
    2b84:	83 ff       	sbrs	r24, 3
    2b86:	71 c1       	rjmp	.+738    	; 0x2e6a <packetloop_arp_icmp_tcp+0x3b6>
    2b88:	f8 01       	movw	r30, r16
    2b8a:	85 89       	ldd	r24, Z+21	; 0x15
    2b8c:	82 30       	cpi	r24, 0x02	; 2
    2b8e:	09 f0       	breq	.+2      	; 0x2b92 <packetloop_arp_icmp_tcp+0xde>
    2b90:	6f c1       	rjmp	.+734    	; 0x2e70 <packetloop_arp_icmp_tcp+0x3bc>
                        // is it an arp reply 
                        if (memcmp(&buf[ETH_ARP_SRC_IP_P],arpip,4)!=0) return(0); // not an arp reply for the IP we were searching           
    2b92:	44 e0       	ldi	r20, 0x04	; 4
    2b94:	50 e0       	ldi	r21, 0x00	; 0
    2b96:	67 e0       	ldi	r22, 0x07	; 7
    2b98:	75 e0       	ldi	r23, 0x05	; 5
    2b9a:	c8 01       	movw	r24, r16
    2b9c:	4c 96       	adiw	r24, 0x1c	; 28
    2b9e:	0e 94 4d 44 	call	0x889a	; 0x889a <memcmp>
    2ba2:	89 2b       	or	r24, r25
    2ba4:	09 f0       	breq	.+2      	; 0x2ba8 <packetloop_arp_icmp_tcp+0xf4>
    2ba6:	67 c1       	rjmp	.+718    	; 0x2e76 <packetloop_arp_icmp_tcp+0x3c2>
                        (*client_arp_result_callback)(arpip,arp_reference_number,buf+ETH_ARP_SRC_MAC_P);
    2ba8:	a8 01       	movw	r20, r16
    2baa:	4a 5e       	subi	r20, 0xEA	; 234
    2bac:	5f 4f       	sbci	r21, 0xFF	; 255
    2bae:	e0 91 39 13 	lds	r30, 0x1339	; 0x801339 <client_arp_result_callback>
    2bb2:	f0 91 3a 13 	lds	r31, 0x133A	; 0x80133a <client_arp_result_callback+0x1>
    2bb6:	60 91 05 05 	lds	r22, 0x0505	; 0x800505 <arp_reference_number>
    2bba:	87 e0       	ldi	r24, 0x07	; 7
    2bbc:	95 e0       	ldi	r25, 0x05	; 5
    2bbe:	09 95       	icall
                        arpip_state=WGW_HAVE_MAC;
    2bc0:	82 e0       	ldi	r24, 0x02	; 2
    2bc2:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <arpip_state>
                }
#endif // ARP_MAC_resolver_client
                return(0);
    2bc6:	e1 2c       	mov	r14, r1
    2bc8:	f1 2c       	mov	r15, r1

        }
        // check if ip packets are for us:
        if(eth_type_is_ip_and_my_ip(buf,plen)==0){
    2bca:	80 c1       	rjmp	.+768    	; 0x2ecc <packetloop_arp_icmp_tcp+0x418>
    2bcc:	be 01       	movw	r22, r28
    2bce:	c8 01       	movw	r24, r16
    2bd0:	7d db       	rcall	.-2310   	; 0x22cc <eth_type_is_ip_and_my_ip>
    2bd2:	88 23       	and	r24, r24
    2bd4:	09 f4       	brne	.+2      	; 0x2bd8 <packetloop_arp_icmp_tcp+0x124>
    2bd6:	52 c1       	rjmp	.+676    	; 0x2e7c <packetloop_arp_icmp_tcp+0x3c8>
                return(0);
        }
        if(buf[IP_PROTO_P]==IP_PROTO_ICMP_V && buf[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V){
    2bd8:	d8 01       	movw	r26, r16
    2bda:	57 96       	adiw	r26, 0x17	; 23
    2bdc:	8c 91       	ld	r24, X
    2bde:	57 97       	sbiw	r26, 0x17	; 23
    2be0:	81 30       	cpi	r24, 0x01	; 1
    2be2:	a1 f4       	brne	.+40     	; 0x2c0c <packetloop_arp_icmp_tcp+0x158>
    2be4:	92 96       	adiw	r26, 0x22	; 34
    2be6:	8c 91       	ld	r24, X
    2be8:	88 30       	cpi	r24, 0x08	; 8
    2bea:	09 f0       	breq	.+2      	; 0x2bee <packetloop_arp_icmp_tcp+0x13a>
    2bec:	4a c1       	rjmp	.+660    	; 0x2e82 <packetloop_arp_icmp_tcp+0x3ce>
                if (icmp_callback){
    2bee:	e0 91 2d 05 	lds	r30, 0x052D	; 0x80052d <icmp_callback>
    2bf2:	f0 91 2e 05 	lds	r31, 0x052E	; 0x80052e <icmp_callback+0x1>
    2bf6:	30 97       	sbiw	r30, 0x00	; 0
                        (*icmp_callback)(&(buf[IP_SRC_P]));
    2bf8:	19 f0       	breq	.+6      	; 0x2c00 <packetloop_arp_icmp_tcp+0x14c>
    2bfa:	c8 01       	movw	r24, r16
    2bfc:	4a 96       	adiw	r24, 0x1a	; 26
                }
                // a ping packet, let's send pong
                make_echo_reply_from_request(buf,plen);
    2bfe:	09 95       	icall
    2c00:	be 01       	movw	r22, r28
    2c02:	c8 01       	movw	r24, r16
    2c04:	0f dc       	rcall	.-2018   	; 0x2424 <make_echo_reply_from_request>
                return(0);
    2c06:	e1 2c       	mov	r14, r1
    2c08:	f1 2c       	mov	r15, r1
    2c0a:	60 c1       	rjmp	.+704    	; 0x2ecc <packetloop_arp_icmp_tcp+0x418>
        }
        // this is an important check to avoid working on the wrong packets:
        if (plen<54 || buf[IP_PROTO_P]!=IP_PROTO_TCP_V ){
    2c0c:	c6 33       	cpi	r28, 0x36	; 54
    2c0e:	d1 05       	cpc	r29, r1
    2c10:	08 f4       	brcc	.+2      	; 0x2c14 <packetloop_arp_icmp_tcp+0x160>
    2c12:	3a c1       	rjmp	.+628    	; 0x2e88 <packetloop_arp_icmp_tcp+0x3d4>
    2c14:	86 30       	cpi	r24, 0x06	; 6
    2c16:	09 f0       	breq	.+2      	; 0x2c1a <packetloop_arp_icmp_tcp+0x166>
    2c18:	3a c1       	rjmp	.+628    	; 0x2e8e <packetloop_arp_icmp_tcp+0x3da>
                // smaller than the smallest TCP packet (TCP packet with no options section) or not tcp port
                return(0);
        }
#if defined (TCP_client)
        // a message for the tcp client, tcp_client_state is zero if client was never used
        if ( buf[TCP_DST_PORT_H_P]==TCPCLIENT_SRC_PORT_H){
    2c1a:	f8 01       	movw	r30, r16
    2c1c:	84 a1       	ldd	r24, Z+36	; 0x24
    2c1e:	8b 30       	cpi	r24, 0x0B	; 11
    2c20:	09 f0       	breq	.+2      	; 0x2c24 <packetloop_arp_icmp_tcp+0x170>
#if defined (WWW_client)
                // workaround to pass pointer to www_client_internal..
                bufptr=buf; 
    2c22:	e7 c0       	rjmp	.+462    	; 0x2df2 <packetloop_arp_icmp_tcp+0x33e>
    2c24:	10 93 0c 05 	sts	0x050C, r17	; 0x80050c <bufptr+0x1>
    2c28:	00 93 0b 05 	sts	0x050B, r16	; 0x80050b <bufptr>
#endif // WWW_client
                if (check_ip_message_is_from(buf,tcp_otherside_ip)==0){
    2c2c:	68 e2       	ldi	r22, 0x28	; 40
    2c2e:	75 e0       	ldi	r23, 0x05	; 5
    2c30:	c8 01       	movw	r24, r16
    2c32:	0f db       	rcall	.-2530   	; 0x2252 <check_ip_message_is_from>
    2c34:	88 23       	and	r24, r24
    2c36:	09 f4       	brne	.+2      	; 0x2c3a <packetloop_arp_icmp_tcp+0x186>
    2c38:	2d c1       	rjmp	.+602    	; 0x2e94 <packetloop_arp_icmp_tcp+0x3e0>
                        return(0);
                }
                // if we get a reset:
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_RST_V){
    2c3a:	d8 01       	movw	r26, r16
    2c3c:	9f 96       	adiw	r26, 0x2f	; 47
    2c3e:	dc 90       	ld	r13, X
    2c40:	9f 97       	sbiw	r26, 0x2f	; 47
    2c42:	d2 fe       	sbrs	r13, 2
    2c44:	17 c0       	rjmp	.+46     	; 0x2c74 <packetloop_arp_icmp_tcp+0x1c0>
                        if (client_tcp_result_callback){
    2c46:	e0 91 1d 05 	lds	r30, 0x051D	; 0x80051d <client_tcp_result_callback>
    2c4a:	f0 91 1e 05 	lds	r31, 0x051E	; 0x80051e <client_tcp_result_callback+0x1>
    2c4e:	30 97       	sbiw	r30, 0x00	; 0
    2c50:	59 f0       	breq	.+22     	; 0x2c68 <packetloop_arp_icmp_tcp+0x1b4>
                                // parameters in client_tcp_result_callback: fd, status, buf_start, len
                                (*client_tcp_result_callback)((buf[TCP_DST_PORT_L_P]>>5)&0x7,3,0,0);
    2c52:	95 96       	adiw	r26, 0x25	; 37
    2c54:	8c 91       	ld	r24, X
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	40 e0       	ldi	r20, 0x00	; 0
    2c5c:	50 e0       	ldi	r21, 0x00	; 0
    2c5e:	63 e0       	ldi	r22, 0x03	; 3
    2c60:	82 95       	swap	r24
    2c62:	86 95       	lsr	r24
    2c64:	87 70       	andi	r24, 0x07	; 7
                        }
                        tcp_client_state=6;
    2c66:	09 95       	icall
    2c68:	86 e0       	ldi	r24, 0x06	; 6
    2c6a:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <tcp_client_state>
                        return(0);
    2c6e:	e1 2c       	mov	r14, r1
    2c70:	f1 2c       	mov	r15, r1
                }
                len=get_tcp_data_len(buf);
    2c72:	2c c1       	rjmp	.+600    	; 0x2ecc <packetloop_arp_icmp_tcp+0x418>
    2c74:	c8 01       	movw	r24, r16
    2c76:	f0 db       	rcall	.-2080   	; 0x2458 <get_tcp_data_len>
    2c78:	7c 01       	movw	r14, r24
                if (tcp_client_state==2){
    2c7a:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <tcp_client_state>
    2c7e:	82 30       	cpi	r24, 0x02	; 2
    2c80:	c1 f5       	brne	.+112    	; 0x2cf2 <packetloop_arp_icmp_tcp+0x23e>
    2c82:	9d 2d       	mov	r25, r13
                        if ((buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V) && (buf[TCP_FLAGS_P] &TCP_FLAGS_ACK_V)){
    2c84:	90 71       	andi	r25, 0x10	; 16
    2c86:	8d 2d       	mov	r24, r13
    2c88:	82 71       	andi	r24, 0x12	; 18
    2c8a:	82 31       	cpi	r24, 0x12	; 18
                                // synack, answer with ack
                                make_tcp_ack_from_any(buf,0,0);
    2c8c:	09 f5       	brne	.+66     	; 0x2cd0 <packetloop_arp_icmp_tcp+0x21c>
    2c8e:	40 e0       	ldi	r20, 0x00	; 0
    2c90:	60 e0       	ldi	r22, 0x00	; 0
    2c92:	70 e0       	ldi	r23, 0x00	; 0
    2c94:	c8 01       	movw	r24, r16
    2c96:	f0 dc       	rcall	.-1568   	; 0x2678 <make_tcp_ack_from_any>
                                buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V;
    2c98:	88 e1       	ldi	r24, 0x18	; 24
    2c9a:	f8 01       	movw	r30, r16
    2c9c:	87 a7       	std	Z+47, r24	; 0x2f

                                // Make a tcp message with data. When calling this function we must
                                // still have a valid tcp-ack in the buffer. In other words
                                // you have just called make_tcp_ack_from_any(buf,0).
                                if (client_tcp_datafill_callback){
    2c9e:	e0 91 1b 05 	lds	r30, 0x051B	; 0x80051b <client_tcp_datafill_callback>
    2ca2:	f0 91 1c 05 	lds	r31, 0x051C	; 0x80051c <client_tcp_datafill_callback+0x1>
    2ca6:	30 97       	sbiw	r30, 0x00	; 0
    2ca8:	41 f0       	breq	.+16     	; 0x2cba <packetloop_arp_icmp_tcp+0x206>
                                        // in this case it is src port because the above 
                                        // make_tcp_ack_from_any swaps the dst and src port:
                                        len=(*client_tcp_datafill_callback)((buf[TCP_SRC_PORT_L_P]>>5)&0x7);
    2caa:	d8 01       	movw	r26, r16
    2cac:	93 96       	adiw	r26, 0x23	; 35
    2cae:	8c 91       	ld	r24, X
    2cb0:	82 95       	swap	r24
    2cb2:	86 95       	lsr	r24
    2cb4:	87 70       	andi	r24, 0x07	; 7
    2cb6:	09 95       	icall
                                }else{
                                        // this is just to prevent a crash
                                        len=0;
    2cb8:	02 c0       	rjmp	.+4      	; 0x2cbe <packetloop_arp_icmp_tcp+0x20a>
    2cba:	80 e0       	ldi	r24, 0x00	; 0
                                }
                                tcp_client_state=3;
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	23 e0       	ldi	r18, 0x03	; 3
    2cc0:	20 93 21 05 	sts	0x0521, r18	; 0x800521 <tcp_client_state>
                                make_tcp_ack_with_data_noflags(buf,len);
    2cc4:	bc 01       	movw	r22, r24
    2cc6:	c8 01       	movw	r24, r16
    2cc8:	0e dd       	rcall	.-1508   	; 0x26e6 <make_tcp_ack_with_data_noflags>
                                return(0);
    2cca:	e1 2c       	mov	r14, r1
    2ccc:	f1 2c       	mov	r15, r1
                        }else{
                                // reset only if we have sent a syn and don't get syn-ack back.
                                // If we connect to a non listen port then we get a RST
                                // which will be handeled above. In other words there is
                                // normally no danger for an endless loop.
                                tcp_client_state=1; // retry
    2cce:	fe c0       	rjmp	.+508    	; 0x2ecc <packetloop_arp_icmp_tcp+0x418>
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <tcp_client_state>
                                // do not inform application layer as we retry.
                                len++;
                                if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
    2cd6:	91 11       	cpse	r25, r1
                                // If we connect to a non listen port then we get a RST
                                // which will be handeled above. In other words there is
                                // normally no danger for an endless loop.
                                tcp_client_state=1; // retry
                                // do not inform application layer as we retry.
                                len++;
    2cd8:	04 c0       	rjmp	.+8      	; 0x2ce2 <packetloop_arp_icmp_tcp+0x22e>
    2cda:	b7 01       	movw	r22, r14
    2cdc:	6f 5f       	subi	r22, 0xFF	; 255
    2cde:	7f 4f       	sbci	r23, 0xFF	; 255
                                if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
                                        // if packet was an ack then do not step the ack number
                                        len=0;
    2ce0:	02 c0       	rjmp	.+4      	; 0x2ce6 <packetloop_arp_icmp_tcp+0x232>
    2ce2:	60 e0       	ldi	r22, 0x00	; 0
                                }
                                // refuse and reset the connection
                                make_tcp_ack_from_any(buf,len,TCP_FLAGS_RST_V);
    2ce4:	70 e0       	ldi	r23, 0x00	; 0
    2ce6:	44 e0       	ldi	r20, 0x04	; 4
    2ce8:	c8 01       	movw	r24, r16
    2cea:	c6 dc       	rcall	.-1652   	; 0x2678 <make_tcp_ack_from_any>
                                return(0);
    2cec:	e1 2c       	mov	r14, r1
    2cee:	f1 2c       	mov	r15, r1
    2cf0:	ed c0       	rjmp	.+474    	; 0x2ecc <packetloop_arp_icmp_tcp+0x418>
                        }
                }
                // in tcp_client_state==3 we will normally first get an empty
                // ack-packet and then a ack-packet with data.
                if (tcp_client_state==3 && len>0){ 
    2cf2:	83 30       	cpi	r24, 0x03	; 3
    2cf4:	09 f0       	breq	.+2      	; 0x2cf8 <packetloop_arp_icmp_tcp+0x244>
    2cf6:	3e c0       	rjmp	.+124    	; 0x2d74 <packetloop_arp_icmp_tcp+0x2c0>
    2cf8:	e1 14       	cp	r14, r1
    2cfa:	f1 04       	cpc	r15, r1
    2cfc:	09 f4       	brne	.+2      	; 0x2d00 <packetloop_arp_icmp_tcp+0x24c>
    2cfe:	df c0       	rjmp	.+446    	; 0x2ebe <packetloop_arp_icmp_tcp+0x40a>
                        // our first real data packet
                        tcp_client_state=4;
    2d00:	84 e0       	ldi	r24, 0x04	; 4
    2d02:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <tcp_client_state>
                        // return the data we received
                        if (client_tcp_result_callback){
    2d06:	e0 91 1d 05 	lds	r30, 0x051D	; 0x80051d <client_tcp_result_callback>
    2d0a:	f0 91 1e 05 	lds	r31, 0x051E	; 0x80051e <client_tcp_result_callback+0x1>
    2d0e:	30 97       	sbiw	r30, 0x00	; 0
    2d10:	09 f4       	brne	.+2      	; 0x2d14 <packetloop_arp_icmp_tcp+0x260>
    2d12:	54 c0       	rjmp	.+168    	; 0x2dbc <packetloop_arp_icmp_tcp+0x308>
                                tcpstart=TCP_DATA_START; // TCP_DATA_START is a formula
    2d14:	d8 01       	movw	r26, r16
    2d16:	9e 96       	adiw	r26, 0x2e	; 46
    2d18:	4c 91       	ld	r20, X
    2d1a:	42 95       	swap	r20
    2d1c:	4f 70       	andi	r20, 0x0F	; 15
    2d1e:	b4 e0       	ldi	r27, 0x04	; 4
    2d20:	4b 9f       	mul	r20, r27
    2d22:	a0 01       	movw	r20, r0
    2d24:	11 24       	eor	r1, r1
                                // out of buffer bounds check, needed in case of fragmented IP packets
                                if (tcpstart>plen-8){
    2d26:	ce 01       	movw	r24, r28
    2d28:	08 97       	sbiw	r24, 0x08	; 8
    2d2a:	4e 5d       	subi	r20, 0xDE	; 222
    2d2c:	5f 4f       	sbci	r21, 0xFF	; 255
    2d2e:	84 17       	cp	r24, r20
    2d30:	95 07       	cpc	r25, r21
    2d32:	08 f4       	brcc	.+2      	; 0x2d36 <packetloop_arp_icmp_tcp+0x282>
    2d34:	ac 01       	movw	r20, r24
                                        tcpstart=plen-8; // dummy but save
                                }
                                save_len=len;
                                if (tcpstart+len>plen){
    2d36:	c7 01       	movw	r24, r14
    2d38:	84 0f       	add	r24, r20
    2d3a:	95 1f       	adc	r25, r21
    2d3c:	c8 17       	cp	r28, r24
    2d3e:	d9 07       	cpc	r29, r25
    2d40:	20 f4       	brcc	.+8      	; 0x2d4a <packetloop_arp_icmp_tcp+0x296>
                                        save_len=plen-tcpstart;
    2d42:	9e 01       	movw	r18, r28
    2d44:	24 1b       	sub	r18, r20
    2d46:	35 0b       	sbc	r19, r21
                                tcpstart=TCP_DATA_START; // TCP_DATA_START is a formula
                                // out of buffer bounds check, needed in case of fragmented IP packets
                                if (tcpstart>plen-8){
                                        tcpstart=plen-8; // dummy but save
                                }
                                save_len=len;
    2d48:	01 c0       	rjmp	.+2      	; 0x2d4c <packetloop_arp_icmp_tcp+0x298>
                                if (tcpstart+len>plen){
                                        save_len=plen-tcpstart;
                                }
                                send_fin=(*client_tcp_result_callback)((buf[TCP_DST_PORT_L_P]>>5)&0x7,0,tcpstart,save_len);
    2d4a:	97 01       	movw	r18, r14
    2d4c:	d8 01       	movw	r26, r16
    2d4e:	95 96       	adiw	r26, 0x25	; 37
    2d50:	8c 91       	ld	r24, X
    2d52:	60 e0       	ldi	r22, 0x00	; 0
    2d54:	82 95       	swap	r24
    2d56:	86 95       	lsr	r24
    2d58:	87 70       	andi	r24, 0x07	; 7
                        }
                        if (send_fin){
    2d5a:	09 95       	icall
    2d5c:	88 23       	and	r24, r24
                                make_tcp_ack_from_any(buf,len,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
    2d5e:	51 f0       	breq	.+20     	; 0x2d74 <packetloop_arp_icmp_tcp+0x2c0>
    2d60:	49 e0       	ldi	r20, 0x09	; 9
    2d62:	b7 01       	movw	r22, r14
    2d64:	c8 01       	movw	r24, r16
    2d66:	88 dc       	rcall	.-1776   	; 0x2678 <make_tcp_ack_from_any>
                                tcp_client_state=5;
    2d68:	85 e0       	ldi	r24, 0x05	; 5
    2d6a:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <tcp_client_state>
                                return(0);
    2d6e:	e1 2c       	mov	r14, r1
    2d70:	f1 2c       	mov	r15, r1
    2d72:	ac c0       	rjmp	.+344    	; 0x2ecc <packetloop_arp_icmp_tcp+0x418>
                        }
                }
                if(tcp_client_state==5){
    2d74:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <tcp_client_state>
    2d78:	85 30       	cpi	r24, 0x05	; 5
    2d7a:	51 f4       	brne	.+20     	; 0x2d90 <packetloop_arp_icmp_tcp+0x2dc>
                        // we get one more final ack to our fin-ack:
                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
    2d7c:	f8 01       	movw	r30, r16
    2d7e:	87 a5       	ldd	r24, Z+47	; 0x2f
    2d80:	84 ff       	sbrs	r24, 4
    2d82:	8b c0       	rjmp	.+278    	; 0x2e9a <packetloop_arp_icmp_tcp+0x3e6>
                                tcp_client_state=6; // in state 6 communication should be finished
    2d84:	86 e0       	ldi	r24, 0x06	; 6
    2d86:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <tcp_client_state>
                        }
                        return(0);
    2d8a:	e1 2c       	mov	r14, r1
    2d8c:	f1 2c       	mov	r15, r1
                }
                if(tcp_client_state==6){
    2d8e:	9e c0       	rjmp	.+316    	; 0x2ecc <packetloop_arp_icmp_tcp+0x418>
    2d90:	86 30       	cpi	r24, 0x06	; 6
                        // something wrong, can't deal with this, reset the connection
                        len++;
                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V) len=0; // if packet was an ack then do not step the ack number
    2d92:	a1 f4       	brne	.+40     	; 0x2dbc <packetloop_arp_icmp_tcp+0x308>
    2d94:	d8 01       	movw	r26, r16
    2d96:	9f 96       	adiw	r26, 0x2f	; 47
    2d98:	8c 91       	ld	r24, X
    2d9a:	84 fd       	sbrc	r24, 4
                        }
                        return(0);
                }
                if(tcp_client_state==6){
                        // something wrong, can't deal with this, reset the connection
                        len++;
    2d9c:	04 c0       	rjmp	.+8      	; 0x2da6 <packetloop_arp_icmp_tcp+0x2f2>
    2d9e:	b7 01       	movw	r22, r14
    2da0:	6f 5f       	subi	r22, 0xFF	; 255
    2da2:	7f 4f       	sbci	r23, 0xFF	; 255
                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V) len=0; // if packet was an ack then do not step the ack number
    2da4:	02 c0       	rjmp	.+4      	; 0x2daa <packetloop_arp_icmp_tcp+0x2f6>
    2da6:	60 e0       	ldi	r22, 0x00	; 0
                        make_tcp_ack_from_any(buf,len,TCP_FLAGS_RST_V);
    2da8:	70 e0       	ldi	r23, 0x00	; 0
    2daa:	44 e0       	ldi	r20, 0x04	; 4
    2dac:	c8 01       	movw	r24, r16
                        // just a single reset, do not repeat if more messages:
                        tcp_client_state=7;
    2dae:	64 dc       	rcall	.-1848   	; 0x2678 <make_tcp_ack_from_any>
    2db0:	87 e0       	ldi	r24, 0x07	; 7
    2db2:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <tcp_client_state>
                        return(0);
    2db6:	e1 2c       	mov	r14, r1
    2db8:	f1 2c       	mov	r15, r1
                }
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
    2dba:	88 c0       	rjmp	.+272    	; 0x2ecc <packetloop_arp_icmp_tcp+0x418>
    2dbc:	f8 01       	movw	r30, r16
    2dbe:	87 a5       	ldd	r24, Z+47	; 0x2f
    2dc0:	80 ff       	sbrs	r24, 0
                        // this normally a fin ack message but it could be
                        // any message with fin we answer with fin-ack:
                        make_tcp_ack_from_any(buf,len+1,TCP_FLAGS_FIN_V);
    2dc2:	0c c0       	rjmp	.+24     	; 0x2ddc <packetloop_arp_icmp_tcp+0x328>
    2dc4:	b7 01       	movw	r22, r14
    2dc6:	6f 5f       	subi	r22, 0xFF	; 255
    2dc8:	7f 4f       	sbci	r23, 0xFF	; 255
    2dca:	41 e0       	ldi	r20, 0x01	; 1
    2dcc:	c8 01       	movw	r24, r16
                        tcp_client_state=5; // connection terminated
    2dce:	54 dc       	rcall	.-1880   	; 0x2678 <make_tcp_ack_from_any>
    2dd0:	85 e0       	ldi	r24, 0x05	; 5
    2dd2:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <tcp_client_state>
                        return(0);
    2dd6:	e1 2c       	mov	r14, r1
    2dd8:	f1 2c       	mov	r15, r1
                }
                // ack all data (the web page may be long):
                // if we just get a fragment then len will be zero
                // and we ack only once we have the full packet
                if (len>0){
    2dda:	78 c0       	rjmp	.+240    	; 0x2ecc <packetloop_arp_icmp_tcp+0x418>
    2ddc:	e1 14       	cp	r14, r1
    2dde:	f1 04       	cpc	r15, r1
    2de0:	09 f4       	brne	.+2      	; 0x2de4 <packetloop_arp_icmp_tcp+0x330>
                        make_tcp_ack_from_any(buf,len,0);
    2de2:	5e c0       	rjmp	.+188    	; 0x2ea0 <packetloop_arp_icmp_tcp+0x3ec>
    2de4:	40 e0       	ldi	r20, 0x00	; 0
    2de6:	b7 01       	movw	r22, r14
    2de8:	c8 01       	movw	r24, r16
                }
                return(0);
    2dea:	46 dc       	rcall	.-1908   	; 0x2678 <make_tcp_ack_from_any>
    2dec:	e1 2c       	mov	r14, r1
    2dee:	f1 2c       	mov	r15, r1
        }
#endif // TCP_client
        //
#ifdef WWW_server
        // tcp port web server start
        if (buf[TCP_DST_PORT_H_P]==wwwport_h && buf[TCP_DST_PORT_L_P]==wwwport_l){
    2df0:	6d c0       	rjmp	.+218    	; 0x2ecc <packetloop_arp_icmp_tcp+0x418>
    2df2:	90 91 04 05 	lds	r25, 0x0504	; 0x800504 <wwwport_h>
    2df6:	89 13       	cpse	r24, r25
    2df8:	56 c0       	rjmp	.+172    	; 0x2ea6 <packetloop_arp_icmp_tcp+0x3f2>
    2dfa:	95 a1       	ldd	r25, Z+37	; 0x25
    2dfc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <wwwport_l>
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V){
    2e00:	98 13       	cpse	r25, r24
    2e02:	54 c0       	rjmp	.+168    	; 0x2eac <packetloop_arp_icmp_tcp+0x3f8>
    2e04:	d7 a4       	ldd	r13, Z+47	; 0x2f
                        make_tcp_synack_from_syn(buf);
    2e06:	d1 fe       	sbrs	r13, 1
    2e08:	05 c0       	rjmp	.+10     	; 0x2e14 <packetloop_arp_icmp_tcp+0x360>
    2e0a:	c8 01       	movw	r24, r16
                        // make_tcp_synack_from_syn does already send the syn,ack
                        return(0);
    2e0c:	a5 dc       	rcall	.-1718   	; 0x2758 <make_tcp_synack_from_syn>
    2e0e:	e1 2c       	mov	r14, r1
                }
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
    2e10:	f1 2c       	mov	r15, r1
    2e12:	5c c0       	rjmp	.+184    	; 0x2ecc <packetloop_arp_icmp_tcp+0x418>
                        info_data_len=get_tcp_data_len(buf);
    2e14:	d4 fe       	sbrs	r13, 4
    2e16:	4d c0       	rjmp	.+154    	; 0x2eb2 <packetloop_arp_icmp_tcp+0x3fe>
    2e18:	c8 01       	movw	r24, r16
    2e1a:	1e db       	rcall	.-2500   	; 0x2458 <get_tcp_data_len>
    2e1c:	7c 01       	movw	r14, r24
    2e1e:	90 93 03 05 	sts	0x0503, r25	; 0x800503 <info_data_len+0x1>
    2e22:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <info_data_len>
                        // we can possibly have no data, just ack:
                        // Here we misuse plen for something else to save a variable.
                        // plen is now the position of start of the tcp user data.
                        if (info_data_len==0){
    2e26:	89 2b       	or	r24, r25
                                if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
    2e28:	41 f4       	brne	.+16     	; 0x2e3a <packetloop_arp_icmp_tcp+0x386>
    2e2a:	d0 fe       	sbrs	r13, 0
                                        // finack, answer with ack
                                        make_tcp_ack_from_any(buf,0,0);
    2e2c:	4f c0       	rjmp	.+158    	; 0x2ecc <packetloop_arp_icmp_tcp+0x418>
    2e2e:	40 e0       	ldi	r20, 0x00	; 0
    2e30:	60 e0       	ldi	r22, 0x00	; 0
    2e32:	70 e0       	ldi	r23, 0x00	; 0
    2e34:	c8 01       	movw	r24, r16
    2e36:	20 dc       	rcall	.-1984   	; 0x2678 <make_tcp_ack_from_any>
    2e38:	49 c0       	rjmp	.+146    	; 0x2ecc <packetloop_arp_icmp_tcp+0x418>
                                }
                                // just an ack with no data, wait for next packet
                                return(0);
                        }
                        // Here we misuse len for something else to save a variable
                        len=TCP_DATA_START; // TCP_DATA_START is a formula
    2e3a:	f8 01       	movw	r30, r16
    2e3c:	e6 a4       	ldd	r14, Z+46	; 0x2e
    2e3e:	e6 94       	lsr	r14
    2e40:	e6 94       	lsr	r14
    2e42:	e6 94       	lsr	r14
    2e44:	e6 94       	lsr	r14
    2e46:	f4 e0       	ldi	r31, 0x04	; 4
    2e48:	ef 9e       	mul	r14, r31
    2e4a:	70 01       	movw	r14, r0
    2e4c:	11 24       	eor	r1, r1
    2e4e:	82 e2       	ldi	r24, 0x22	; 34
    2e50:	e8 0e       	add	r14, r24
    2e52:	f1 1c       	adc	r15, r1
                        // check for data corruption
                        if (len>plen-8){
    2e54:	28 97       	sbiw	r28, 0x08	; 8
    2e56:	ce 15       	cp	r28, r14
    2e58:	df 05       	cpc	r29, r15
    2e5a:	70 f1       	brcs	.+92     	; 0x2eb8 <packetloop_arp_icmp_tcp+0x404>
    2e5c:	37 c0       	rjmp	.+110    	; 0x2ecc <packetloop_arp_icmp_tcp+0x418>
                        // way we get it back in every message that comes
                        // from the server:
                        tcp_client_syn(buf,((tcp_fd<<5) | (0x1f & tcpclient_src_port_l)),tcp_client_port);
                }
#endif
                return(0);
    2e5e:	e1 2c       	mov	r14, r1
    2e60:	f1 2c       	mov	r15, r1
    2e62:	34 c0       	rjmp	.+104    	; 0x2ecc <packetloop_arp_icmp_tcp+0x418>
    2e64:	e1 2c       	mov	r14, r1
    2e66:	f1 2c       	mov	r15, r1
    2e68:	31 c0       	rjmp	.+98     	; 0x2ecc <packetloop_arp_icmp_tcp+0x418>
                        if (memcmp(&buf[ETH_ARP_SRC_IP_P],arpip,4)!=0) return(0); // not an arp reply for the IP we were searching           
                        (*client_arp_result_callback)(arpip,arp_reference_number,buf+ETH_ARP_SRC_MAC_P);
                        arpip_state=WGW_HAVE_MAC;
                }
#endif // ARP_MAC_resolver_client
                return(0);
    2e6a:	e1 2c       	mov	r14, r1
    2e6c:	f1 2c       	mov	r15, r1
    2e6e:	2e c0       	rjmp	.+92     	; 0x2ecc <packetloop_arp_icmp_tcp+0x418>
    2e70:	e1 2c       	mov	r14, r1
    2e72:	f1 2c       	mov	r15, r1
    2e74:	2b c0       	rjmp	.+86     	; 0x2ecc <packetloop_arp_icmp_tcp+0x418>
                        make_arp_answer_from_request(buf);
                }
#ifdef ARP_MAC_resolver_client
                if ((arpip_state & WGW_ACCEPT_ARP_REPLY) && (buf[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V)){
                        // is it an arp reply 
                        if (memcmp(&buf[ETH_ARP_SRC_IP_P],arpip,4)!=0) return(0); // not an arp reply for the IP we were searching           
    2e76:	e1 2c       	mov	r14, r1
    2e78:	f1 2c       	mov	r15, r1
    2e7a:	28 c0       	rjmp	.+80     	; 0x2ecc <packetloop_arp_icmp_tcp+0x418>
                return(0);

        }
        // check if ip packets are for us:
        if(eth_type_is_ip_and_my_ip(buf,plen)==0){
                return(0);
    2e7c:	e1 2c       	mov	r14, r1
    2e7e:	f1 2c       	mov	r15, r1
    2e80:	25 c0       	rjmp	.+74     	; 0x2ecc <packetloop_arp_icmp_tcp+0x418>
                return(0);
        }
        // this is an important check to avoid working on the wrong packets:
        if (plen<54 || buf[IP_PROTO_P]!=IP_PROTO_TCP_V ){
                // smaller than the smallest TCP packet (TCP packet with no options section) or not tcp port
                return(0);
    2e82:	e1 2c       	mov	r14, r1
    2e84:	f1 2c       	mov	r15, r1
    2e86:	22 c0       	rjmp	.+68     	; 0x2ecc <packetloop_arp_icmp_tcp+0x418>
    2e88:	e1 2c       	mov	r14, r1
    2e8a:	f1 2c       	mov	r15, r1
    2e8c:	1f c0       	rjmp	.+62     	; 0x2ecc <packetloop_arp_icmp_tcp+0x418>
    2e8e:	e1 2c       	mov	r14, r1
    2e90:	f1 2c       	mov	r15, r1
    2e92:	1c c0       	rjmp	.+56     	; 0x2ecc <packetloop_arp_icmp_tcp+0x418>
#if defined (WWW_client)
                // workaround to pass pointer to www_client_internal..
                bufptr=buf; 
#endif // WWW_client
                if (check_ip_message_is_from(buf,tcp_otherside_ip)==0){
                        return(0);
    2e94:	e1 2c       	mov	r14, r1
    2e96:	f1 2c       	mov	r15, r1
    2e98:	19 c0       	rjmp	.+50     	; 0x2ecc <packetloop_arp_icmp_tcp+0x418>
                if(tcp_client_state==5){
                        // we get one more final ack to our fin-ack:
                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
                                tcp_client_state=6; // in state 6 communication should be finished
                        }
                        return(0);
    2e9a:	e1 2c       	mov	r14, r1
    2e9c:	f1 2c       	mov	r15, r1
    2e9e:	16 c0       	rjmp	.+44     	; 0x2ecc <packetloop_arp_icmp_tcp+0x418>
                // if we just get a fragment then len will be zero
                // and we ack only once we have the full packet
                if (len>0){
                        make_tcp_ack_from_any(buf,len,0);
                }
                return(0);
    2ea0:	e1 2c       	mov	r14, r1
    2ea2:	f1 2c       	mov	r15, r1
    2ea4:	13 c0       	rjmp	.+38     	; 0x2ecc <packetloop_arp_icmp_tcp+0x418>
                        }
                        return(len);
                }
        }
#endif // WWW_server
        return(0);
    2ea6:	e1 2c       	mov	r14, r1
    2ea8:	f1 2c       	mov	r15, r1
    2eaa:	10 c0       	rjmp	.+32     	; 0x2ecc <packetloop_arp_icmp_tcp+0x418>
    2eac:	e1 2c       	mov	r14, r1
    2eae:	f1 2c       	mov	r15, r1
    2eb0:	0d c0       	rjmp	.+26     	; 0x2ecc <packetloop_arp_icmp_tcp+0x418>
    2eb2:	e1 2c       	mov	r14, r1
    2eb4:	f1 2c       	mov	r15, r1
    2eb6:	0a c0       	rjmp	.+20     	; 0x2ecc <packetloop_arp_icmp_tcp+0x418>
                        }
                        // Here we misuse len for something else to save a variable
                        len=TCP_DATA_START; // TCP_DATA_START is a formula
                        // check for data corruption
                        if (len>plen-8){
                                return(0);
    2eb8:	e1 2c       	mov	r14, r1
    2eba:	f1 2c       	mov	r15, r1
    2ebc:	07 c0       	rjmp	.+14     	; 0x2ecc <packetloop_arp_icmp_tcp+0x418>
                        make_tcp_ack_from_any(buf,len,TCP_FLAGS_RST_V);
                        // just a single reset, do not repeat if more messages:
                        tcp_client_state=7;
                        return(0);
                }
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
    2ebe:	d8 01       	movw	r26, r16
    2ec0:	9f 96       	adiw	r26, 0x2f	; 47
    2ec2:	8c 91       	ld	r24, X
    2ec4:	80 fd       	sbrc	r24, 0
    2ec6:	7e cf       	rjmp	.-260    	; 0x2dc4 <packetloop_arp_icmp_tcp+0x310>
                // if we just get a fragment then len will be zero
                // and we ack only once we have the full packet
                if (len>0){
                        make_tcp_ack_from_any(buf,len,0);
                }
                return(0);
    2ec8:	e1 2c       	mov	r14, r1
    2eca:	f1 2c       	mov	r15, r1
                        return(len);
                }
        }
#endif // WWW_server
        return(0);
}
    2ecc:	c7 01       	movw	r24, r14
    2ece:	df 91       	pop	r29
    2ed0:	cf 91       	pop	r28
    2ed2:	1f 91       	pop	r17
    2ed4:	0f 91       	pop	r16
    2ed6:	ff 90       	pop	r15
    2ed8:	ef 90       	pop	r14
    2eda:	df 90       	pop	r13
    2edc:	08 95       	ret

00002ede <browserresult_callback>:
char charNumber[24];
char* toChar(int number)
{
	itoa(number, charNumber, 24);
	return charNumber;
}
    2ede:	08 95       	ret

00002ee0 <arpresolver_result_callback>:
    2ee0:	61 30       	cpi	r22, 0x01	; 1
    2ee2:	59 f4       	brne	.+22     	; 0x2efa <arpresolver_result_callback+0x1a>
    2ee4:	a4 2f       	mov	r26, r20
    2ee6:	b5 2f       	mov	r27, r21
    2ee8:	ed ef       	ldi	r30, 0xFD	; 253
    2eea:	f0 e1       	ldi	r31, 0x10	; 16
    2eec:	23 e0       	ldi	r18, 0x03	; 3
    2eee:	31 e1       	ldi	r19, 0x11	; 17
    2ef0:	8d 91       	ld	r24, X+
    2ef2:	81 93       	st	Z+, r24
    2ef4:	e2 17       	cp	r30, r18
    2ef6:	f3 07       	cpc	r31, r19
    2ef8:	d9 f7       	brne	.-10     	; 0x2ef0 <arpresolver_result_callback+0x10>
    2efa:	08 95       	ret

00002efc <init_cnt2>:
    2efc:	10 92 3e 05 	sts	0x053E, r1	; 0x80053e <cnt2step>
    2f00:	82 e0       	ldi	r24, 0x02	; 2
    2f02:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    2f06:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
    2f0a:	94 ef       	ldi	r25, 0xF4	; 244
    2f0c:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    2f10:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2f14:	87 e0       	ldi	r24, 0x07	; 7
    2f16:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2f1a:	08 95       	ret

00002f1c <__vector_9>:
    2f1c:	1f 92       	push	r1
    2f1e:	0f 92       	push	r0
    2f20:	0f b6       	in	r0, 0x3f	; 63
    2f22:	0f 92       	push	r0
    2f24:	11 24       	eor	r1, r1
    2f26:	8f 93       	push	r24
    2f28:	80 91 3e 05 	lds	r24, 0x053E	; 0x80053e <cnt2step>
    2f2c:	8f 5f       	subi	r24, 0xFF	; 255
    2f2e:	80 93 3e 05 	sts	0x053E, r24	; 0x80053e <cnt2step>
    2f32:	80 91 3e 05 	lds	r24, 0x053E	; 0x80053e <cnt2step>
    2f36:	83 33       	cpi	r24, 0x33	; 51
    2f38:	38 f0       	brcs	.+14     	; 0x2f48 <__vector_9+0x2c>
    2f3a:	10 92 3e 05 	sts	0x053E, r1	; 0x80053e <cnt2step>
    2f3e:	80 91 3f 05 	lds	r24, 0x053F	; 0x80053f <sec>
    2f42:	8f 5f       	subi	r24, 0xFF	; 255
    2f44:	80 93 3f 05 	sts	0x053F, r24	; 0x80053f <sec>
    2f48:	8f 91       	pop	r24
    2f4a:	0f 90       	pop	r0
    2f4c:	0f be       	out	0x3f, r0	; 63
    2f4e:	0f 90       	pop	r0
    2f50:	1f 90       	pop	r1
    2f52:	18 95       	reti

00002f54 <http200ok>:
    2f54:	4f ec       	ldi	r20, 0xCF	; 207
    2f56:	51 e1       	ldi	r21, 0x11	; 17
    2f58:	60 e0       	ldi	r22, 0x00	; 0
    2f5a:	70 e0       	ldi	r23, 0x00	; 0
    2f5c:	80 e4       	ldi	r24, 0x40	; 64
    2f5e:	95 e0       	ldi	r25, 0x05	; 5
    2f60:	93 ca       	rjmp	.-2778   	; 0x2488 <fill_tcp_data_p>
    2f62:	08 95       	ret

00002f64 <print_webpage>:

uint32_t print_webpage(uint8_t *buf)
{
    2f64:	cf 93       	push	r28
    2f66:	df 93       	push	r29
    2f68:	ec 01       	movw	r28, r24
	uint32_t plen;
	plen=http200ok();
    2f6a:	f4 df       	rcall	.-24     	; 0x2f54 <http200ok>
	plen=fill_tcp_data_p(buf,plen,PSTR("\n<pre>\n"));
    2f6c:	47 ec       	ldi	r20, 0xC7	; 199
    2f6e:	51 e1       	ldi	r21, 0x11	; 17
    2f70:	bc 01       	movw	r22, r24
    2f72:	ce 01       	movw	r24, r28
    2f74:	89 da       	rcall	.-2798   	; 0x2488 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("<style>\n"));
    2f76:	4e eb       	ldi	r20, 0xBE	; 190
    2f78:	51 e1       	ldi	r21, 0x11	; 17
    2f7a:	bc 01       	movw	r22, r24
    2f7c:	ce 01       	movw	r24, r28
    2f7e:	84 da       	rcall	.-2808   	; 0x2488 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("div.center {\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%)\n}\n"));
    2f80:	40 e5       	ldi	r20, 0x50	; 80
    2f82:	51 e1       	ldi	r21, 0x11	; 17
    2f84:	bc 01       	movw	r22, r24
    2f86:	ce 01       	movw	r24, r28
    2f88:	7f da       	rcall	.-2818   	; 0x2488 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("table, th, td {\nborder: 1px solid black;\nborder-collapse: collapse;\npadding: 15px;\ntext-align: center;\n}\n"));
    2f8a:	46 ee       	ldi	r20, 0xE6	; 230
    2f8c:	50 e1       	ldi	r21, 0x10	; 16
    2f8e:	bc 01       	movw	r22, r24
    2f90:	ce 01       	movw	r24, r28
    2f92:	7a da       	rcall	.-2828   	; 0x2488 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("td.button {\npadding: 0px;\n}\n"));
    2f94:	49 ec       	ldi	r20, 0xC9	; 201
    2f96:	50 e1       	ldi	r21, 0x10	; 16
    2f98:	bc 01       	movw	r22, r24
    2f9a:	ce 01       	movw	r24, r28
    2f9c:	75 da       	rcall	.-2838   	; 0x2488 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("h2, hr {\ntext-align: center;\n}\n"));
    2f9e:	49 ea       	ldi	r20, 0xA9	; 169
    2fa0:	50 e1       	ldi	r21, 0x10	; 16
    2fa2:	bc 01       	movw	r22, r24
    2fa4:	ce 01       	movw	r24, r28
    2fa6:	70 da       	rcall	.-2848   	; 0x2488 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("body {\nbackground-color: powderblue;\n}\n"));
    2fa8:	41 e8       	ldi	r20, 0x81	; 129
    2faa:	50 e1       	ldi	r21, 0x10	; 16
    2fac:	bc 01       	movw	r22, r24
    2fae:	ce 01       	movw	r24, r28
    2fb0:	6b da       	rcall	.-2858   	; 0x2488 <fill_tcp_data_p>

	plen=fill_tcp_data_p(buf,plen,PSTR("</style>\n"));
    2fb2:	47 e7       	ldi	r20, 0x77	; 119
    2fb4:	50 e1       	ldi	r21, 0x10	; 16
    2fb6:	bc 01       	movw	r22, r24
    2fb8:	ce 01       	movw	r24, r28
    2fba:	66 da       	rcall	.-2868   	; 0x2488 <fill_tcp_data_p>
	//plen=fill_tcp_data_p(buf,plen,PSTR("<meta charset=UTF-8>\n"));
	plen=fill_tcp_data_p(buf,plen,PSTR("<body>\n<div class=center>\n<h2>Weather Station</h2>\n<table>\n"));
    2fbc:	4b e3       	ldi	r20, 0x3B	; 59
    2fbe:	50 e1       	ldi	r21, 0x10	; 16
    2fc0:	bc 01       	movw	r22, r24
    2fc2:	ce 01       	movw	r24, r28
    2fc4:	61 da       	rcall	.-2878   	; 0x2488 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("<tr>\n<th>Information</th>\n</tr>"));
    2fc6:	4b e1       	ldi	r20, 0x1B	; 27
    2fc8:	50 e1       	ldi	r21, 0x10	; 16
    2fca:	bc 01       	movw	r22, r24
    2fcc:	ce 01       	movw	r24, r28
    2fce:	5c da       	rcall	.-2888   	; 0x2488 <fill_tcp_data_p>

	plen=fill_tcp_data_p(buf,plen,PSTR("\n<tr>\n<td>Temperature: "));
    2fd0:	43 e0       	ldi	r20, 0x03	; 3
    2fd2:	50 e1       	ldi	r21, 0x10	; 16
    2fd4:	bc 01       	movw	r22, r24
    2fd6:	ce 01       	movw	r24, r28
    2fd8:	57 da       	rcall	.-2898   	; 0x2488 <fill_tcp_data_p>
	plen=fill_tcp_data(buf,plen,tempChar);
    2fda:	41 e9       	ldi	r20, 0x91	; 145
    2fdc:	55 e1       	ldi	r21, 0x15	; 21
    2fde:	bc 01       	movw	r22, r24
    2fe0:	ce 01       	movw	r24, r28
    2fe2:	7e da       	rcall	.-2820   	; 0x24e0 <fill_tcp_data>
	plen=fill_tcp_data_p(buf,plen,PSTR(" &#x2103;</td>\n</tr>"));
    2fe4:	4e ee       	ldi	r20, 0xEE	; 238
    2fe6:	5f e0       	ldi	r21, 0x0F	; 15
    2fe8:	bc 01       	movw	r22, r24
    2fea:	ce 01       	movw	r24, r28
    2fec:	4d da       	rcall	.-2918   	; 0x2488 <fill_tcp_data_p>
	
	plen=fill_tcp_data_p(buf,plen,PSTR("\n<tr>\n<td>Humidity: "));
    2fee:	49 ed       	ldi	r20, 0xD9	; 217
    2ff0:	5f e0       	ldi	r21, 0x0F	; 15
    2ff2:	bc 01       	movw	r22, r24
    2ff4:	ce 01       	movw	r24, r28
    2ff6:	48 da       	rcall	.-2928   	; 0x2488 <fill_tcp_data_p>
	plen=fill_tcp_data(buf,plen,humidChar);
    2ff8:	45 e8       	ldi	r20, 0x85	; 133
    2ffa:	55 e1       	ldi	r21, 0x15	; 21
    2ffc:	bc 01       	movw	r22, r24
    2ffe:	ce 01       	movw	r24, r28
    3000:	6f da       	rcall	.-2850   	; 0x24e0 <fill_tcp_data>
	plen=fill_tcp_data_p(buf,plen,PSTR(" %</td>\n</tr>"));
    3002:	4b ec       	ldi	r20, 0xCB	; 203
    3004:	5f e0       	ldi	r21, 0x0F	; 15
    3006:	bc 01       	movw	r22, r24
    3008:	ce 01       	movw	r24, r28
    300a:	3e da       	rcall	.-2948   	; 0x2488 <fill_tcp_data_p>
	
	plen=fill_tcp_data_p(buf,plen,PSTR("\n<tr><td>Pressure: "));
    300c:	47 eb       	ldi	r20, 0xB7	; 183
    300e:	5f e0       	ldi	r21, 0x0F	; 15
    3010:	bc 01       	movw	r22, r24
    3012:	ce 01       	movw	r24, r28
    3014:	39 da       	rcall	.-2958   	; 0x2488 <fill_tcp_data_p>
	plen=fill_tcp_data(buf,plen,pressChar);
    3016:	47 ea       	ldi	r20, 0xA7	; 167
    3018:	55 e1       	ldi	r21, 0x15	; 21
    301a:	bc 01       	movw	r22, r24
    301c:	ce 01       	movw	r24, r28
    301e:	60 da       	rcall	.-2880   	; 0x24e0 <fill_tcp_data>
	plen=fill_tcp_data_p(buf,plen,PSTR(" Pa</td>\n</tr>"));
    3020:	48 ea       	ldi	r20, 0xA8	; 168
    3022:	5f e0       	ldi	r21, 0x0F	; 15
    3024:	bc 01       	movw	r22, r24
    3026:	ce 01       	movw	r24, r28
    3028:	2f da       	rcall	.-2978   	; 0x2488 <fill_tcp_data_p>
	
	//
	plen=fill_tcp_data_p(buf,plen,PSTR("\n<tr>\n<td>Wind Angle: "));
    302a:	41 e9       	ldi	r20, 0x91	; 145
    302c:	5f e0       	ldi	r21, 0x0F	; 15
    302e:	bc 01       	movw	r22, r24
    3030:	ce 01       	movw	r24, r28
    3032:	2a da       	rcall	.-2988   	; 0x2488 <fill_tcp_data_p>
	plen=fill_tcp_data(buf,plen,anglChar);
    3034:	4e e6       	ldi	r20, 0x6E	; 110
    3036:	55 e1       	ldi	r21, 0x15	; 21
    3038:	bc 01       	movw	r22, r24
    303a:	ce 01       	movw	r24, r28
    303c:	51 da       	rcall	.-2910   	; 0x24e0 <fill_tcp_data>
	plen=fill_tcp_data_p(buf,plen,PSTR("&#xb0;</td>\n</tr>"));
    303e:	4f e7       	ldi	r20, 0x7F	; 127
    3040:	5f e0       	ldi	r21, 0x0F	; 15
    3042:	bc 01       	movw	r22, r24
    3044:	ce 01       	movw	r24, r28
    3046:	20 da       	rcall	.-3008   	; 0x2488 <fill_tcp_data_p>

	//
	plen=fill_tcp_data_p(buf,plen,PSTR("\n<tr>\n<td>Wind Speed: "));
    3048:	48 e6       	ldi	r20, 0x68	; 104
    304a:	5f e0       	ldi	r21, 0x0F	; 15
    304c:	bc 01       	movw	r22, r24
    304e:	ce 01       	movw	r24, r28
    3050:	1b da       	rcall	.-3018   	; 0x2488 <fill_tcp_data_p>
    3052:	41 e0       	ldi	r20, 0x01	; 1
	plen=fill_tcp_data(buf,plen,speedChar);
    3054:	56 e1       	ldi	r21, 0x16	; 22
    3056:	bc 01       	movw	r22, r24
    3058:	ce 01       	movw	r24, r28
    305a:	42 da       	rcall	.-2940   	; 0x24e0 <fill_tcp_data>
    305c:	48 e5       	ldi	r20, 0x58	; 88
    305e:	5f e0       	ldi	r21, 0x0F	; 15
	plen=fill_tcp_data_p(buf,plen,PSTR(" m/s</td>\n</tr>"));
    3060:	bc 01       	movw	r22, r24
    3062:	ce 01       	movw	r24, r28
    3064:	11 da       	rcall	.-3038   	; 0x2488 <fill_tcp_data_p>
    3066:	41 e4       	ldi	r20, 0x41	; 65
    3068:	5f e0       	ldi	r21, 0x0F	; 15
	
	plen=fill_tcp_data_p(buf,plen,PSTR("\n<tr>\n<td>Box Status: "));
    306a:	bc 01       	movw	r22, r24
    306c:	ce 01       	movw	r24, r28
    306e:	0c da       	rcall	.-3048   	; 0x2488 <fill_tcp_data_p>
    3070:	40 91 78 15 	lds	r20, 0x1578	; 0x801578 <magnetVal>
	if(magnetVal >= halleff)
    3074:	50 91 79 15 	lds	r21, 0x1579	; 0x801579 <magnetVal+0x1>
    3078:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <halleff>
    307c:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <halleff+0x1>
    3080:	42 17       	cp	r20, r18
    3082:	53 07       	cpc	r21, r19
    3084:	38 f0       	brcs	.+14     	; 0x3094 <print_webpage+0x130>
		plen=fill_tcp_data_p(buf,plen,PSTR("<font color=\"red\">Closed</font>"));
    3086:	41 e2       	ldi	r20, 0x21	; 33
    3088:	5f e0       	ldi	r21, 0x0F	; 15
    308a:	bc 01       	movw	r22, r24
    308c:	ce 01       	movw	r24, r28
    308e:	fc d9       	rcall	.-3080   	; 0x2488 <fill_tcp_data_p>
    3090:	bc 01       	movw	r22, r24
    3092:	06 c0       	rjmp	.+12     	; 0x30a0 <print_webpage+0x13c>
	else
		plen=fill_tcp_data_p(buf,plen,PSTR("<font color=\"green\">Open</font>"));
    3094:	41 e0       	ldi	r20, 0x01	; 1
    3096:	5f e0       	ldi	r21, 0x0F	; 15
    3098:	bc 01       	movw	r22, r24
    309a:	ce 01       	movw	r24, r28
    309c:	f5 d9       	rcall	.-3094   	; 0x2488 <fill_tcp_data_p>
    309e:	bc 01       	movw	r22, r24
	plen=fill_tcp_data_p(buf,plen,PSTR("</td>\n</tr>"));
    30a0:	45 ef       	ldi	r20, 0xF5	; 245
    30a2:	5e e0       	ldi	r21, 0x0E	; 14
    30a4:	ce 01       	movw	r24, r28
    30a6:	f0 d9       	rcall	.-3104   	; 0x2488 <fill_tcp_data_p>

	plen=fill_tcp_data_p(buf,plen,PSTR("\n</table>\n</form>\n"));
    30a8:	42 ee       	ldi	r20, 0xE2	; 226
    30aa:	5e e0       	ldi	r21, 0x0E	; 14
    30ac:	bc 01       	movw	r22, r24
    30ae:	ce 01       	movw	r24, r28
    30b0:	eb d9       	rcall	.-3114   	; 0x2488 <fill_tcp_data_p>
    30b2:	4e e7       	ldi	r20, 0x7E	; 126
	plen=fill_tcp_data_p(buf,plen,PSTR("<input type=\"submit\" value=\"Settings\" style=\"width:100%\" onclick=\"window.location='/settings';\" />\n"));
    30b4:	5e e0       	ldi	r21, 0x0E	; 14
    30b6:	bc 01       	movw	r22, r24
    30b8:	ce 01       	movw	r24, r28
    30ba:	e6 d9       	rcall	.-3124   	; 0x2488 <fill_tcp_data_p>
    30bc:	4b e1       	ldi	r20, 0x1B	; 27
    30be:	5e e0       	ldi	r21, 0x0E	; 14
	plen=fill_tcp_data_p(buf,plen,PSTR("<input type=\"submit\" value=\"RTC Settings\" style=\"width:100%\" onclick=\"window.location='/rtc';\" />\n"));
    30c0:	bc 01       	movw	r22, r24
    30c2:	ce 01       	movw	r24, r28
    30c4:	e1 d9       	rcall	.-3134   	; 0x2488 <fill_tcp_data_p>
    30c6:	43 ef       	ldi	r20, 0xF3	; 243
    30c8:	5d e0       	ldi	r21, 0x0D	; 13
    30ca:	bc 01       	movw	r22, r24
	//plen=fill_tcp_data_p(buf,plen,PSTR("<tr>\n<td class=button><input type=submit value=\"Confirm\" style=\"width:100%\"></td>\n</tr>\n</table></form>"));
	
	//plen=fill_tcp_data_p(buf,plen,PSTR("\n</form>\n<form action=/ method=get><input type=hidden name=\"rr\" value=\"1\"><td class=button><input type=submit value=\"Reset\" style=\"width:100%\"></td></form>\n</tr>\n</table>"));
	plen=fill_tcp_data_p(buf,plen,PSTR("<br><hr>by Daniels Fi&#353ers</hr></br>"));
    30cc:	ce 01       	movw	r24, r28
    30ce:	dc d9       	rcall	.-3144   	; 0x2488 <fill_tcp_data_p>
    30d0:	43 ee       	ldi	r20, 0xE3	; 227
    30d2:	5d e0       	ldi	r21, 0x0D	; 13
    30d4:	bc 01       	movw	r22, r24
    30d6:	ce 01       	movw	r24, r28
	plen=fill_tcp_data_p(buf,plen,PSTR("</div>\n</body>\n"));
    30d8:	d7 d9       	rcall	.-3154   	; 0x2488 <fill_tcp_data_p>
    30da:	4c ed       	ldi	r20, 0xDC	; 220
    30dc:	5d e0       	ldi	r21, 0x0D	; 13
    30de:	bc 01       	movw	r22, r24
    30e0:	ce 01       	movw	r24, r28
    30e2:	d2 d9       	rcall	.-3164   	; 0x2488 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("</pre>"));
    30e4:	bc 01       	movw	r22, r24
    30e6:	80 e0       	ldi	r24, 0x00	; 0
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	df 91       	pop	r29
    30ec:	cf 91       	pop	r28
    30ee:	08 95       	ret

000030f0 <print_settings>:

	
	return(plen);
    30f0:	af 92       	push	r10
    30f2:	bf 92       	push	r11
    30f4:	cf 92       	push	r12
}
    30f6:	df 92       	push	r13
    30f8:	ef 92       	push	r14
    30fa:	ff 92       	push	r15
uint32_t print_settings(uint8_t *buf)
{
    30fc:	0f 93       	push	r16
    30fe:	1f 93       	push	r17
    3100:	cf 93       	push	r28
    3102:	df 93       	push	r29
    3104:	cd b7       	in	r28, 0x3d	; 61
    3106:	de b7       	in	r29, 0x3e	; 62
    3108:	a5 97       	sbiw	r28, 0x25	; 37
    310a:	0f b6       	in	r0, 0x3f	; 63
    310c:	f8 94       	cli
    310e:	de bf       	out	0x3e, r29	; 62
    3110:	0f be       	out	0x3f, r0	; 63
    3112:	cd bf       	out	0x3d, r28	; 61
    3114:	8c 01       	movw	r16, r24
	char charMyIP[16], charGWIP[16];
	uint32_t plen;
	char vstr[5];
	plen=http200ok();
    3116:	1e df       	rcall	.-452    	; 0x2f54 <http200ok>
	plen=fill_tcp_data_p(buf,plen,PSTR("\n<pre>\n"));
    3118:	44 ed       	ldi	r20, 0xD4	; 212
    311a:	5d e0       	ldi	r21, 0x0D	; 13
    311c:	bc 01       	movw	r22, r24
    311e:	c8 01       	movw	r24, r16
    3120:	b3 d9       	rcall	.-3226   	; 0x2488 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("<style>\n"));
    3122:	4b ec       	ldi	r20, 0xCB	; 203
    3124:	5d e0       	ldi	r21, 0x0D	; 13
    3126:	bc 01       	movw	r22, r24
    3128:	c8 01       	movw	r24, r16
    312a:	ae d9       	rcall	.-3236   	; 0x2488 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("div.center {\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%)\n}\n"));
    312c:	4d e5       	ldi	r20, 0x5D	; 93
    312e:	5d e0       	ldi	r21, 0x0D	; 13
    3130:	bc 01       	movw	r22, r24
    3132:	c8 01       	movw	r24, r16
    3134:	a9 d9       	rcall	.-3246   	; 0x2488 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("table, th, td {\nborder: 1px solid black;\nborder-collapse: collapse;\npadding: 15px;\ntext-align: center;\n}\n"));
    3136:	43 ef       	ldi	r20, 0xF3	; 243
    3138:	5c e0       	ldi	r21, 0x0C	; 12
    313a:	bc 01       	movw	r22, r24
    313c:	c8 01       	movw	r24, r16
    313e:	a4 d9       	rcall	.-3256   	; 0x2488 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("td.button {\npadding: 0px;\n}\n"));
    3140:	46 ed       	ldi	r20, 0xD6	; 214
    3142:	5c e0       	ldi	r21, 0x0C	; 12
    3144:	bc 01       	movw	r22, r24
    3146:	c8 01       	movw	r24, r16
    3148:	9f d9       	rcall	.-3266   	; 0x2488 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("h2, hr {\ntext-align: center;\n}\n"));
    314a:	46 eb       	ldi	r20, 0xB6	; 182
    314c:	5c e0       	ldi	r21, 0x0C	; 12
    314e:	bc 01       	movw	r22, r24
    3150:	c8 01       	movw	r24, r16
    3152:	9a d9       	rcall	.-3276   	; 0x2488 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("body {\nbackground-color: powderblue;\n}\n"));
    3154:	4e e8       	ldi	r20, 0x8E	; 142
    3156:	5c e0       	ldi	r21, 0x0C	; 12
    3158:	bc 01       	movw	r22, r24
    315a:	c8 01       	movw	r24, r16
    315c:	95 d9       	rcall	.-3286   	; 0x2488 <fill_tcp_data_p>

	plen=fill_tcp_data_p(buf,plen,PSTR("</style>\n"));
    315e:	44 e8       	ldi	r20, 0x84	; 132
    3160:	5c e0       	ldi	r21, 0x0C	; 12
    3162:	bc 01       	movw	r22, r24
    3164:	c8 01       	movw	r24, r16
    3166:	90 d9       	rcall	.-3296   	; 0x2488 <fill_tcp_data_p>
	//plen=fill_tcp_data_p(buf,plen,PSTR("<meta charset=UTF-8>\n"));
	plen=fill_tcp_data_p(buf,plen,PSTR("<body>\n<div class=center>\n<h2>Weather Station</h2>\n<table>\n"));
    3168:	48 e4       	ldi	r20, 0x48	; 72
    316a:	5c e0       	ldi	r21, 0x0C	; 12
    316c:	bc 01       	movw	r22, r24
    316e:	c8 01       	movw	r24, r16
    3170:	8b d9       	rcall	.-3306   	; 0x2488 <fill_tcp_data_p>
	
	plen=fill_tcp_data_p(buf,plen,PSTR("<tr>\n<th>Settings</th>\n</tr>"));
    3172:	4b e2       	ldi	r20, 0x2B	; 43
    3174:	5c e0       	ldi	r21, 0x0C	; 12
    3176:	bc 01       	movw	r22, r24
    3178:	c8 01       	movw	r24, r16
    317a:	86 d9       	rcall	.-3316   	; 0x2488 <fill_tcp_data_p>
    317c:	48 ec       	ldi	r20, 0xC8	; 200

	
	plen=fill_tcp_data_p(buf,plen,PSTR("<tr>\n<td>\n<form action=/ method=get>\nWeather Station IP: <input type=text size=12 name=myip value="));
    317e:	5b e0       	ldi	r21, 0x0B	; 11
    3180:	bc 01       	movw	r22, r24
    3182:	c8 01       	movw	r24, r16
    3184:	81 d9       	rcall	.-3326   	; 0x2488 <fill_tcp_data_p>
    3186:	5c 01       	movw	r10, r24
    3188:	e2 e2       	ldi	r30, 0x22	; 34
    318a:	f1 e0       	ldi	r31, 0x01	; 1
	sprintf(charMyIP, "%d.%d.%d.%d", myip[0], myip[1], myip[2], myip[3]);
    318c:	83 81       	ldd	r24, Z+3	; 0x03
    318e:	1f 92       	push	r1
    3190:	8f 93       	push	r24
    3192:	82 81       	ldd	r24, Z+2	; 0x02
    3194:	1f 92       	push	r1
    3196:	8f 93       	push	r24
    3198:	81 81       	ldd	r24, Z+1	; 0x01
    319a:	1f 92       	push	r1
    319c:	8f 93       	push	r24
    319e:	80 81       	ld	r24, Z
    31a0:	1f 92       	push	r1
    31a2:	8f 93       	push	r24
    31a4:	0f 2e       	mov	r0, r31
    31a6:	fc e3       	ldi	r31, 0x3C	; 60
    31a8:	ef 2e       	mov	r14, r31
    31aa:	f1 e0       	ldi	r31, 0x01	; 1
    31ac:	ff 2e       	mov	r15, r31
    31ae:	f0 2d       	mov	r31, r0
    31b0:	ff 92       	push	r15
    31b2:	ef 92       	push	r14
    31b4:	9e 01       	movw	r18, r28
    31b6:	2f 5f       	subi	r18, 0xFF	; 255
    31b8:	3f 4f       	sbci	r19, 0xFF	; 255
    31ba:	69 01       	movw	r12, r18
    31bc:	3f 93       	push	r19
    31be:	2f 93       	push	r18
    31c0:	0e 94 72 45 	call	0x8ae4	; 0x8ae4 <sprintf>
	plen=fill_tcp_data(buf,plen,charMyIP);
    31c4:	a6 01       	movw	r20, r12
    31c6:	b5 01       	movw	r22, r10
    31c8:	c8 01       	movw	r24, r16
    31ca:	8a d9       	rcall	.-3308   	; 0x24e0 <fill_tcp_data>
	plen=fill_tcp_data_p(buf,plen,PSTR("></input>\n</td>\n</tr>"));
    31cc:	42 eb       	ldi	r20, 0xB2	; 178
    31ce:	5b e0       	ldi	r21, 0x0B	; 11
    31d0:	bc 01       	movw	r22, r24
    31d2:	c8 01       	movw	r24, r16
    31d4:	59 d9       	rcall	.-3406   	; 0x2488 <fill_tcp_data_p>
	
	
	plen=fill_tcp_data_p(buf,plen,PSTR("<tr>\n<td>\nDestination IP: <input type=text size=12 name=servip value="));
    31d6:	4c e6       	ldi	r20, 0x6C	; 108
    31d8:	5b e0       	ldi	r21, 0x0B	; 11
    31da:	bc 01       	movw	r22, r24
    31dc:	c8 01       	movw	r24, r16
    31de:	54 d9       	rcall	.-3416   	; 0x2488 <fill_tcp_data_p>
	plen=fill_tcp_data(buf,plen,serverip);
    31e0:	42 e1       	ldi	r20, 0x12	; 18
    31e2:	51 e0       	ldi	r21, 0x01	; 1
    31e4:	bc 01       	movw	r22, r24
    31e6:	c8 01       	movw	r24, r16
    31e8:	7b d9       	rcall	.-3338   	; 0x24e0 <fill_tcp_data>
    31ea:	46 e5       	ldi	r20, 0x56	; 86
	plen=fill_tcp_data_p(buf,plen,PSTR("></input>\n</td>\n</tr>"));
    31ec:	5b e0       	ldi	r21, 0x0B	; 11
    31ee:	bc 01       	movw	r22, r24
    31f0:	c8 01       	movw	r24, r16
    31f2:	4a d9       	rcall	.-3436   	; 0x2488 <fill_tcp_data_p>
    31f4:	46 e1       	ldi	r20, 0x16	; 22
    31f6:	5b e0       	ldi	r21, 0x0B	; 11
	
	
	plen=fill_tcp_data_p(buf,plen,PSTR("<tr>\n<td>\nGateway IP: <input type=text size=12 name=gwip value="));
    31f8:	bc 01       	movw	r22, r24
    31fa:	c8 01       	movw	r24, r16
    31fc:	45 d9       	rcall	.-3446   	; 0x2488 <fill_tcp_data_p>
    31fe:	6c 01       	movw	r12, r24
    3200:	ee e0       	ldi	r30, 0x0E	; 14
    3202:	f1 e0       	ldi	r31, 0x01	; 1
    3204:	83 81       	ldd	r24, Z+3	; 0x03
	sprintf(charGWIP, "%d.%d.%d.%d", gwip[0], gwip[1], gwip[2], gwip[3]);
    3206:	1f 92       	push	r1
    3208:	8f 93       	push	r24
    320a:	82 81       	ldd	r24, Z+2	; 0x02
    320c:	1f 92       	push	r1
    320e:	8f 93       	push	r24
    3210:	81 81       	ldd	r24, Z+1	; 0x01
    3212:	1f 92       	push	r1
    3214:	8f 93       	push	r24
    3216:	80 81       	ld	r24, Z
    3218:	1f 92       	push	r1
    321a:	8f 93       	push	r24
    321c:	ff 92       	push	r15
    321e:	ef 92       	push	r14
    3220:	7e 01       	movw	r14, r28
    3222:	31 e1       	ldi	r19, 0x11	; 17
    3224:	e3 0e       	add	r14, r19
    3226:	f1 1c       	adc	r15, r1
    3228:	ff 92       	push	r15
    322a:	ef 92       	push	r14
    322c:	0e 94 72 45 	call	0x8ae4	; 0x8ae4 <sprintf>
	plen=fill_tcp_data(buf,plen,charGWIP);
    3230:	a7 01       	movw	r20, r14
    3232:	b6 01       	movw	r22, r12
    3234:	c8 01       	movw	r24, r16
    3236:	54 d9       	rcall	.-3416   	; 0x24e0 <fill_tcp_data>
    3238:	40 e0       	ldi	r20, 0x00	; 0
	plen=fill_tcp_data_p(buf,plen,PSTR("></input>\n</td>\n</tr>"));
    323a:	5b e0       	ldi	r21, 0x0B	; 11
    323c:	bc 01       	movw	r22, r24
    323e:	c8 01       	movw	r24, r16
    3240:	23 d9       	rcall	.-3514   	; 0x2488 <fill_tcp_data_p>
    3242:	46 eb       	ldi	r20, 0xB6	; 182
    3244:	5a e0       	ldi	r21, 0x0A	; 10
	//
	
	plen=fill_tcp_data_p(buf,plen,PSTR("<tr>\n<td>\nTimeout (Seconds): <input type=text size=12 name=timeout value="));
    3246:	bc 01       	movw	r22, r24
    3248:	c8 01       	movw	r24, r16
    324a:	1e d9       	rcall	.-3524   	; 0x2488 <fill_tcp_data_p>
    324c:	7c 01       	movw	r14, r24
    324e:	4a e0       	ldi	r20, 0x0A	; 10
    3250:	be 01       	movw	r22, r28
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    3252:	6f 5d       	subi	r22, 0xDF	; 223
    3254:	7f 4f       	sbci	r23, 0xFF	; 255
    3256:	80 91 8f 15 	lds	r24, 0x158F	; 0x80158f <timeout>
    325a:	90 91 90 15 	lds	r25, 0x1590	; 0x801590 <timeout+0x1>
    325e:	0e 94 6f 44 	call	0x88de	; 0x88de <__itoa_ncheck>
    3262:	ae 01       	movw	r20, r28
	itoa(timeout,vstr,10);
	plen=fill_tcp_data(buf,plen,vstr);
    3264:	4f 5d       	subi	r20, 0xDF	; 223
    3266:	5f 4f       	sbci	r21, 0xFF	; 255
    3268:	b7 01       	movw	r22, r14
    326a:	c8 01       	movw	r24, r16
    326c:	39 d9       	rcall	.-3470   	; 0x24e0 <fill_tcp_data>
    326e:	4f e9       	ldi	r20, 0x9F	; 159
    3270:	5a e0       	ldi	r21, 0x0A	; 10
	plen=fill_tcp_data_p(buf,plen,PSTR("></input>\n</td>\n</tr>\n"));
    3272:	bc 01       	movw	r22, r24
    3274:	c8 01       	movw	r24, r16
    3276:	08 d9       	rcall	.-3568   	; 0x2488 <fill_tcp_data_p>
    3278:	4d e5       	ldi	r20, 0x5D	; 93
    327a:	5a e0       	ldi	r21, 0x0A	; 10
	
	plen=fill_tcp_data_p(buf,plen,PSTR("<tr>\n<td>\nHolla Sensor: <input type=text size=12 name=hall value="));
    327c:	bc 01       	movw	r22, r24
    327e:	c8 01       	movw	r24, r16
    3280:	03 d9       	rcall	.-3578   	; 0x2488 <fill_tcp_data_p>
    3282:	7c 01       	movw	r14, r24
    3284:	4a e0       	ldi	r20, 0x0A	; 10
    3286:	be 01       	movw	r22, r28
    3288:	6f 5d       	subi	r22, 0xDF	; 223
    328a:	7f 4f       	sbci	r23, 0xFF	; 255
    328c:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <halleff>
    3290:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <halleff+0x1>
    3294:	0e 94 6f 44 	call	0x88de	; 0x88de <__itoa_ncheck>
 	itoa(halleff,vstr,10);
 	plen=fill_tcp_data(buf,plen,vstr);
    3298:	ae 01       	movw	r20, r28
    329a:	4f 5d       	subi	r20, 0xDF	; 223
    329c:	5f 4f       	sbci	r21, 0xFF	; 255
    329e:	b7 01       	movw	r22, r14
    32a0:	c8 01       	movw	r24, r16
    32a2:	1e d9       	rcall	.-3524   	; 0x24e0 <fill_tcp_data>
	plen=fill_tcp_data_p(buf,plen,PSTR("></input>\n</td>\n</tr>\n\n"));
    32a4:	45 e4       	ldi	r20, 0x45	; 69
    32a6:	5a e0       	ldi	r21, 0x0A	; 10
    32a8:	bc 01       	movw	r22, r24
    32aa:	c8 01       	movw	r24, r16
    32ac:	ed d8       	rcall	.-3622   	; 0x2488 <fill_tcp_data_p>
	//
	plen=fill_tcp_data_p(buf,plen,PSTR("<tr>\n<td class=button><input type=submit value=\"Confirm\" style=\"width:100%\"></td>\n</tr>\n</form>"));
    32ae:	45 ee       	ldi	r20, 0xE5	; 229
    32b0:	59 e0       	ldi	r21, 0x09	; 9
    32b2:	bc 01       	movw	r22, r24
    32b4:	c8 01       	movw	r24, r16
    32b6:	e8 d8       	rcall	.-3632   	; 0x2488 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("<tr>\n<td class=button><input type=\"submit\" value=\"Restart\" style=\"width:100%\" onclick=\"window.location='/reset';\" /></td>\n</tr>\n"));
    32b8:	44 e6       	ldi	r20, 0x64	; 100
    32ba:	59 e0       	ldi	r21, 0x09	; 9
    32bc:	bc 01       	movw	r22, r24
    32be:	c8 01       	movw	r24, r16
    32c0:	e3 d8       	rcall	.-3642   	; 0x2488 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("\n</table>\n"));
    32c2:	49 e5       	ldi	r20, 0x59	; 89
    32c4:	59 e0       	ldi	r21, 0x09	; 9
    32c6:	bc 01       	movw	r22, r24
    32c8:	c8 01       	movw	r24, r16
    32ca:	de d8       	rcall	.-3652   	; 0x2488 <fill_tcp_data_p>
    32cc:	4d ef       	ldi	r20, 0xFD	; 253
	plen=fill_tcp_data_p(buf,plen,PSTR("<input type=\"submit\" value=\"Home\" style=\"width:100%\" onclick=\"window.location='/home';\" />\n"));
    32ce:	58 e0       	ldi	r21, 0x08	; 8
    32d0:	bc 01       	movw	r22, r24
    32d2:	c8 01       	movw	r24, r16
    32d4:	d9 d8       	rcall	.-3662   	; 0x2488 <fill_tcp_data_p>
    32d6:	45 ed       	ldi	r20, 0xD5	; 213
    32d8:	58 e0       	ldi	r21, 0x08	; 8
	//plen=fill_tcp_data_p(buf,plen,PSTR("<input type=\"submit\" value=\"Information\" style=\"width:100%\" onclick=\"window.location='/';\" />\n</table></form>"));
	//plen=fill_tcp_data_p(buf,plen,PSTR("<tr>\n<td class=button><input type=submit value=\"Confirm\" style=\"width:100%\"></td>\n</tr>\n</table></form>"));
	
	//plen=fill_tcp_data_p(buf,plen,PSTR("\n</form>\n<form action=/ method=get><input type=hidden name=\"rr\" value=\"1\"><td class=button><input type=submit value=\"Reset\" style=\"width:100%\"></td></form>\n</tr>\n</table>"));
	plen=fill_tcp_data_p(buf,plen,PSTR("<br><hr>by Daniels Fi&#353ers</hr></br>"));
    32da:	bc 01       	movw	r22, r24
    32dc:	c8 01       	movw	r24, r16
    32de:	d4 d8       	rcall	.-3672   	; 0x2488 <fill_tcp_data_p>
    32e0:	45 ec       	ldi	r20, 0xC5	; 197
    32e2:	58 e0       	ldi	r21, 0x08	; 8
    32e4:	bc 01       	movw	r22, r24
	plen=fill_tcp_data_p(buf,plen,PSTR("</div>\n</body>\n"));
    32e6:	c8 01       	movw	r24, r16
    32e8:	cf d8       	rcall	.-3682   	; 0x2488 <fill_tcp_data_p>
    32ea:	4e eb       	ldi	r20, 0xBE	; 190
    32ec:	58 e0       	ldi	r21, 0x08	; 8
    32ee:	bc 01       	movw	r22, r24
    32f0:	c8 01       	movw	r24, r16
	plen=fill_tcp_data_p(buf,plen,PSTR("</pre>"));
    32f2:	ca d8       	rcall	.-3692   	; 0x2488 <fill_tcp_data_p>
    32f4:	bc 01       	movw	r22, r24
    32f6:	80 e0       	ldi	r24, 0x00	; 0
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	0f b6       	in	r0, 0x3f	; 63
    32fc:	f8 94       	cli

	
	return(plen);
    32fe:	de bf       	out	0x3e, r29	; 62
    3300:	0f be       	out	0x3f, r0	; 63
    3302:	cd bf       	out	0x3d, r28	; 61
    3304:	a5 96       	adiw	r28, 0x25	; 37
    3306:	0f b6       	in	r0, 0x3f	; 63
    3308:	f8 94       	cli
    330a:	de bf       	out	0x3e, r29	; 62
    330c:	0f be       	out	0x3f, r0	; 63
}
    330e:	cd bf       	out	0x3d, r28	; 61
    3310:	df 91       	pop	r29
    3312:	cf 91       	pop	r28
    3314:	1f 91       	pop	r17
    3316:	0f 91       	pop	r16
    3318:	ff 90       	pop	r15
    331a:	ef 90       	pop	r14
    331c:	df 90       	pop	r13
    331e:	cf 90       	pop	r12
    3320:	bf 90       	pop	r11
    3322:	af 90       	pop	r10
    3324:	08 95       	ret

00003326 <print_rtc>:
    3326:	af 92       	push	r10
    3328:	bf 92       	push	r11
    332a:	cf 92       	push	r12
    332c:	df 92       	push	r13
    332e:	ef 92       	push	r14
uint32_t print_rtc(uint8_t *buf)
{
    3330:	ff 92       	push	r15
    3332:	0f 93       	push	r16
    3334:	1f 93       	push	r17
    3336:	cf 93       	push	r28
    3338:	df 93       	push	r29
    333a:	cd b7       	in	r28, 0x3d	; 61
    333c:	de b7       	in	r29, 0x3e	; 62
    333e:	e0 97       	sbiw	r28, 0x30	; 48
    3340:	0f b6       	in	r0, 0x3f	; 63
    3342:	f8 94       	cli
    3344:	de bf       	out	0x3e, r29	; 62
    3346:	0f be       	out	0x3f, r0	; 63
    3348:	cd bf       	out	0x3d, r28	; 61
    334a:	7c 01       	movw	r14, r24
	char year[8],month[8],day[8],hour[8],minute[8],second[8];
	uint32_t plen;
	plen=http200ok();
    334c:	03 de       	rcall	.-1018   	; 0x2f54 <http200ok>
	plen=fill_tcp_data_p(buf,plen,PSTR("\n<pre>\n"));
    334e:	46 eb       	ldi	r20, 0xB6	; 182
    3350:	58 e0       	ldi	r21, 0x08	; 8
    3352:	bc 01       	movw	r22, r24
    3354:	c7 01       	movw	r24, r14
    3356:	98 d8       	rcall	.-3792   	; 0x2488 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("<style>\n"));
    3358:	4d ea       	ldi	r20, 0xAD	; 173
    335a:	58 e0       	ldi	r21, 0x08	; 8
    335c:	bc 01       	movw	r22, r24
    335e:	c7 01       	movw	r24, r14
    3360:	93 d8       	rcall	.-3802   	; 0x2488 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("div.center {\nposition: absolute;\ntop: 50%;\nleft: 50%;\nmargin-right: -50%;\ntransform: translate(-50%, -50%)\n}\n"));
    3362:	4f e3       	ldi	r20, 0x3F	; 63
    3364:	58 e0       	ldi	r21, 0x08	; 8
    3366:	bc 01       	movw	r22, r24
    3368:	c7 01       	movw	r24, r14
    336a:	8e d8       	rcall	.-3812   	; 0x2488 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("table, th, td {\nborder: 1px solid black;\nborder-collapse: collapse;\npadding: 15px;\ntext-align: center;\n}\n"));
    336c:	45 ed       	ldi	r20, 0xD5	; 213
    336e:	57 e0       	ldi	r21, 0x07	; 7
    3370:	bc 01       	movw	r22, r24
    3372:	c7 01       	movw	r24, r14
    3374:	89 d8       	rcall	.-3822   	; 0x2488 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("td.button {\npadding: 0px;\n}\n"));
    3376:	48 eb       	ldi	r20, 0xB8	; 184
    3378:	57 e0       	ldi	r21, 0x07	; 7
    337a:	bc 01       	movw	r22, r24
    337c:	c7 01       	movw	r24, r14
    337e:	84 d8       	rcall	.-3832   	; 0x2488 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("h2, hr {\ntext-align: center;\n}\n"));
    3380:	48 e9       	ldi	r20, 0x98	; 152
    3382:	57 e0       	ldi	r21, 0x07	; 7
    3384:	bc 01       	movw	r22, r24
    3386:	c7 01       	movw	r24, r14
    3388:	7f d8       	rcall	.-3842   	; 0x2488 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("body {\nbackground-color: powderblue;\n}\n"));
    338a:	40 e7       	ldi	r20, 0x70	; 112
    338c:	57 e0       	ldi	r21, 0x07	; 7
    338e:	bc 01       	movw	r22, r24
    3390:	c7 01       	movw	r24, r14
    3392:	7a d8       	rcall	.-3852   	; 0x2488 <fill_tcp_data_p>

	plen=fill_tcp_data_p(buf,plen,PSTR("</style>\n"));
    3394:	46 e6       	ldi	r20, 0x66	; 102
    3396:	57 e0       	ldi	r21, 0x07	; 7
    3398:	bc 01       	movw	r22, r24
    339a:	c7 01       	movw	r24, r14
    339c:	75 d8       	rcall	.-3862   	; 0x2488 <fill_tcp_data_p>
	//plen=fill_tcp_data_p(buf,plen,PSTR("<meta charset=UTF-8>\n"));
	plen=fill_tcp_data_p(buf,plen,PSTR("<body>\n<div class=center>\n<h2>Weather Station</h2>\n<table>\n"));
    339e:	4a e2       	ldi	r20, 0x2A	; 42
    33a0:	57 e0       	ldi	r21, 0x07	; 7
    33a2:	bc 01       	movw	r22, r24
    33a4:	c7 01       	movw	r24, r14
    33a6:	70 d8       	rcall	.-3872   	; 0x2488 <fill_tcp_data_p>
	
	plen=fill_tcp_data_p(buf,plen,PSTR("<tr>\n<th colspan=\"2\">Real Time Clock Settings</th>\n</tr>\n"));
    33a8:	40 ef       	ldi	r20, 0xF0	; 240
    33aa:	56 e0       	ldi	r21, 0x06	; 6
    33ac:	bc 01       	movw	r22, r24
    33ae:	c7 01       	movw	r24, r14
    33b0:	6b d8       	rcall	.-3882   	; 0x2488 <fill_tcp_data_p>
	plen=fill_tcp_data_p(buf,plen,PSTR("<tr>\n<th>Date</th><th>Time</th>\n</tr>"));
    33b2:	4a ec       	ldi	r20, 0xCA	; 202
    33b4:	56 e0       	ldi	r21, 0x06	; 6
    33b6:	bc 01       	movw	r22, r24
    33b8:	c7 01       	movw	r24, r14
    33ba:	66 d8       	rcall	.-3892   	; 0x2488 <fill_tcp_data_p>
    33bc:	46 e7       	ldi	r20, 0x76	; 118

	
	plen=fill_tcp_data_p(buf,plen,PSTR("<tr>\n<td><form action=/ method=get>\nYear: <input type=text size=12 name=year value="));
    33be:	56 e0       	ldi	r21, 0x06	; 6
    33c0:	bc 01       	movw	r22, r24
    33c2:	c7 01       	movw	r24, r14
    33c4:	61 d8       	rcall	.-3902   	; 0x2488 <fill_tcp_data_p>
    33c6:	5c 01       	movw	r10, r24
    33c8:	0f 2e       	mov	r0, r31
    33ca:	fe e7       	ldi	r31, 0x7E	; 126
	dtostrf(rtc.year,1,0,year);
    33cc:	cf 2e       	mov	r12, r31
    33ce:	f5 e1       	ldi	r31, 0x15	; 21
    33d0:	df 2e       	mov	r13, r31
    33d2:	f0 2d       	mov	r31, r0
    33d4:	f6 01       	movw	r30, r12
    33d6:	66 81       	ldd	r22, Z+6	; 0x06
    33d8:	70 e0       	ldi	r23, 0x00	; 0
    33da:	80 e0       	ldi	r24, 0x00	; 0
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	0e 94 21 3f 	call	0x7e42	; 0x7e42 <__floatunsisf>
    33e2:	8e 01       	movw	r16, r28
    33e4:	0f 5f       	subi	r16, 0xFF	; 255
    33e6:	1f 4f       	sbci	r17, 0xFF	; 255
    33e8:	20 e0       	ldi	r18, 0x00	; 0
    33ea:	41 e0       	ldi	r20, 0x01	; 1
    33ec:	0e 94 7e 42 	call	0x84fc	; 0x84fc <dtostrf>
	plen=fill_tcp_data(buf,plen,year);
    33f0:	a8 01       	movw	r20, r16
    33f2:	b5 01       	movw	r22, r10
    33f4:	c7 01       	movw	r24, r14
    33f6:	74 d8       	rcall	.-3864   	; 0x24e0 <fill_tcp_data>
	plen=fill_tcp_data_p(buf,plen,PSTR("></td>"));
    33f8:	4f e6       	ldi	r20, 0x6F	; 111
    33fa:	56 e0       	ldi	r21, 0x06	; 6
    33fc:	bc 01       	movw	r22, r24
    33fe:	c7 01       	movw	r24, r14
    3400:	43 d8       	rcall	.-3962   	; 0x2488 <fill_tcp_data_p>
    3402:	4f e1       	ldi	r20, 0x1F	; 31
	
	plen=fill_tcp_data_p(buf,plen,PSTR("\n<td><form action=/ method=get>\nHour: <input type=text size=12 name=hour value="));
    3404:	56 e0       	ldi	r21, 0x06	; 6
    3406:	bc 01       	movw	r22, r24
    3408:	c7 01       	movw	r24, r14
    340a:	3e d8       	rcall	.-3972   	; 0x2488 <fill_tcp_data_p>
    340c:	5c 01       	movw	r10, r24
    340e:	f6 01       	movw	r30, r12
    3410:	62 81       	ldd	r22, Z+2	; 0x02
	dtostrf(rtc.hour,1,0,hour);
    3412:	70 e0       	ldi	r23, 0x00	; 0
    3414:	80 e0       	ldi	r24, 0x00	; 0
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	0e 94 21 3f 	call	0x7e42	; 0x7e42 <__floatunsisf>
    341c:	08 5e       	subi	r16, 0xE8	; 232
    341e:	1f 4f       	sbci	r17, 0xFF	; 255
    3420:	20 e0       	ldi	r18, 0x00	; 0
    3422:	41 e0       	ldi	r20, 0x01	; 1
    3424:	0e 94 7e 42 	call	0x84fc	; 0x84fc <dtostrf>
	plen=fill_tcp_data(buf,plen,hour);
    3428:	a8 01       	movw	r20, r16
    342a:	b5 01       	movw	r22, r10
    342c:	c7 01       	movw	r24, r14
    342e:	58 d8       	rcall	.-3920   	; 0x24e0 <fill_tcp_data>
	plen=fill_tcp_data_p(buf,plen,PSTR("></td>\n</tr>"));
    3430:	42 e1       	ldi	r20, 0x12	; 18
    3432:	56 e0       	ldi	r21, 0x06	; 6
    3434:	bc 01       	movw	r22, r24
    3436:	c7 01       	movw	r24, r14
    3438:	27 d8       	rcall	.-4018   	; 0x2488 <fill_tcp_data_p>
    343a:	4c eb       	ldi	r20, 0xBC	; 188
	
	
	plen=fill_tcp_data_p(buf,plen,PSTR("<tr>\n<td><form action=/ method=get>\nMonth: <input type=text size=12 name=month value="));
    343c:	55 e0       	ldi	r21, 0x05	; 5
    343e:	bc 01       	movw	r22, r24
    3440:	c7 01       	movw	r24, r14
    3442:	22 d8       	rcall	.-4028   	; 0x2488 <fill_tcp_data_p>
    3444:	5c 01       	movw	r10, r24
    3446:	f6 01       	movw	r30, r12
	dtostrf(rtc.month,1,0,month);
    3448:	65 81       	ldd	r22, Z+5	; 0x05
    344a:	70 e0       	ldi	r23, 0x00	; 0
    344c:	80 e0       	ldi	r24, 0x00	; 0
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	0e 94 21 3f 	call	0x7e42	; 0x7e42 <__floatunsisf>
    3454:	00 51       	subi	r16, 0x10	; 16
    3456:	11 09       	sbc	r17, r1
    3458:	20 e0       	ldi	r18, 0x00	; 0
    345a:	41 e0       	ldi	r20, 0x01	; 1
    345c:	0e 94 7e 42 	call	0x84fc	; 0x84fc <dtostrf>
	plen=fill_tcp_data(buf,plen,month);
    3460:	a8 01       	movw	r20, r16
    3462:	b5 01       	movw	r22, r10
    3464:	c7 01       	movw	r24, r14
    3466:	3c d8       	rcall	.-3976   	; 0x24e0 <fill_tcp_data>
	plen=fill_tcp_data_p(buf,plen,PSTR("></td>"));
    3468:	45 eb       	ldi	r20, 0xB5	; 181
    346a:	55 e0       	ldi	r21, 0x05	; 5
    346c:	bc 01       	movw	r22, r24
    346e:	c7 01       	movw	r24, r14
    3470:	0b d8       	rcall	.-4074   	; 0x2488 <fill_tcp_data_p>
    3472:	44 e6       	ldi	r20, 0x64	; 100
	
	plen=fill_tcp_data_p(buf,plen,PSTR("\n<td><form action=/ method=get>\nMinute: <input type=text size=12 name=min value="));
    3474:	55 e0       	ldi	r21, 0x05	; 5
    3476:	bc 01       	movw	r22, r24
    3478:	c7 01       	movw	r24, r14
    347a:	06 d8       	rcall	.-4084   	; 0x2488 <fill_tcp_data_p>
    347c:	5c 01       	movw	r10, r24
    347e:	f6 01       	movw	r30, r12
	dtostrf(rtc.min,1,0,minute);
    3480:	61 81       	ldd	r22, Z+1	; 0x01
    3482:	70 e0       	ldi	r23, 0x00	; 0
    3484:	80 e0       	ldi	r24, 0x00	; 0
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	0e 94 21 3f 	call	0x7e42	; 0x7e42 <__floatunsisf>
    348c:	08 5e       	subi	r16, 0xE8	; 232
    348e:	1f 4f       	sbci	r17, 0xFF	; 255
    3490:	20 e0       	ldi	r18, 0x00	; 0
    3492:	41 e0       	ldi	r20, 0x01	; 1
    3494:	0e 94 7e 42 	call	0x84fc	; 0x84fc <dtostrf>
    3498:	a8 01       	movw	r20, r16
	plen=fill_tcp_data(buf,plen,minute);
    349a:	b5 01       	movw	r22, r10
    349c:	c7 01       	movw	r24, r14
    349e:	20 d8       	rcall	.-4032   	; 0x24e0 <fill_tcp_data>
    34a0:	47 e5       	ldi	r20, 0x57	; 87
    34a2:	55 e0       	ldi	r21, 0x05	; 5
	plen=fill_tcp_data_p(buf,plen,PSTR("></td>\n</tr>"));
    34a4:	bc 01       	movw	r22, r24
    34a6:	c7 01       	movw	r24, r14
    34a8:	0e 94 44 12 	call	0x2488	; 0x2488 <fill_tcp_data_p>
    34ac:	45 e0       	ldi	r20, 0x05	; 5
    34ae:	55 e0       	ldi	r21, 0x05	; 5
	
	
	plen=fill_tcp_data_p(buf,plen,PSTR("<tr>\n<td><form action=/ method=get>\nDay: <input type=text size=12 name=day value="));
    34b0:	bc 01       	movw	r22, r24
    34b2:	c7 01       	movw	r24, r14
    34b4:	0e 94 44 12 	call	0x2488	; 0x2488 <fill_tcp_data_p>
    34b8:	5c 01       	movw	r10, r24
    34ba:	f6 01       	movw	r30, r12
	dtostrf(rtc.date,1,0,day);
    34bc:	64 81       	ldd	r22, Z+4	; 0x04
    34be:	70 e0       	ldi	r23, 0x00	; 0
    34c0:	80 e0       	ldi	r24, 0x00	; 0
    34c2:	90 e0       	ldi	r25, 0x00	; 0
    34c4:	0e 94 21 3f 	call	0x7e42	; 0x7e42 <__floatunsisf>
    34c8:	00 51       	subi	r16, 0x10	; 16
    34ca:	11 09       	sbc	r17, r1
    34cc:	20 e0       	ldi	r18, 0x00	; 0
    34ce:	41 e0       	ldi	r20, 0x01	; 1
    34d0:	0e 94 7e 42 	call	0x84fc	; 0x84fc <dtostrf>
    34d4:	a8 01       	movw	r20, r16
	plen=fill_tcp_data(buf,plen,day);
    34d6:	b5 01       	movw	r22, r10
    34d8:	c7 01       	movw	r24, r14
    34da:	02 d8       	rcall	.-4092   	; 0x24e0 <fill_tcp_data>
    34dc:	4e ef       	ldi	r20, 0xFE	; 254
    34de:	54 e0       	ldi	r21, 0x04	; 4
	plen=fill_tcp_data_p(buf,plen,PSTR("></td>"));
    34e0:	bc 01       	movw	r22, r24
    34e2:	c7 01       	movw	r24, r14
    34e4:	0e 94 44 12 	call	0x2488	; 0x2488 <fill_tcp_data_p>
    34e8:	4d ea       	ldi	r20, 0xAD	; 173
    34ea:	54 e0       	ldi	r21, 0x04	; 4
	//
	plen=fill_tcp_data_p(buf,plen,PSTR("\n<td><form action=/ method=get>\nSecond: <input type=text size=12 name=sec value="));
    34ec:	bc 01       	movw	r22, r24
    34ee:	c7 01       	movw	r24, r14
    34f0:	0e 94 44 12 	call	0x2488	; 0x2488 <fill_tcp_data_p>
    34f4:	5c 01       	movw	r10, r24
    34f6:	f6 01       	movw	r30, r12
    34f8:	60 81       	ld	r22, Z
	dtostrf(rtc.sec,1,0,second);
    34fa:	70 e0       	ldi	r23, 0x00	; 0
    34fc:	80 e0       	ldi	r24, 0x00	; 0
    34fe:	90 e0       	ldi	r25, 0x00	; 0
    3500:	0e 94 21 3f 	call	0x7e42	; 0x7e42 <__floatunsisf>
    3504:	08 5e       	subi	r16, 0xE8	; 232
    3506:	1f 4f       	sbci	r17, 0xFF	; 255
    3508:	20 e0       	ldi	r18, 0x00	; 0
    350a:	41 e0       	ldi	r20, 0x01	; 1
    350c:	0e 94 7e 42 	call	0x84fc	; 0x84fc <dtostrf>
    3510:	a8 01       	movw	r20, r16
    3512:	b5 01       	movw	r22, r10
	plen=fill_tcp_data(buf,plen,second);
    3514:	c7 01       	movw	r24, r14
    3516:	0e 94 70 12 	call	0x24e0	; 0x24e0 <fill_tcp_data>
    351a:	40 ea       	ldi	r20, 0xA0	; 160
    351c:	54 e0       	ldi	r21, 0x04	; 4
	plen=fill_tcp_data_p(buf,plen,PSTR("></td>\n</tr>"));
    351e:	bc 01       	movw	r22, r24
    3520:	c7 01       	movw	r24, r14
    3522:	0e 94 44 12 	call	0x2488	; 0x2488 <fill_tcp_data_p>
    3526:	44 e3       	ldi	r20, 0x34	; 52
    3528:	54 e0       	ldi	r21, 0x04	; 4

	//
	plen=fill_tcp_data_p(buf,plen,PSTR("<tr>\n<td class=button colspan=\"2\"><input type=submit value=\"Confirm\" style=\"width:100%\"></td>\n</tr>\n</form>"));
    352a:	bc 01       	movw	r22, r24
    352c:	c7 01       	movw	r24, r14
    352e:	0e 94 44 12 	call	0x2488	; 0x2488 <fill_tcp_data_p>
    3532:	49 e2       	ldi	r20, 0x29	; 41
    3534:	54 e0       	ldi	r21, 0x04	; 4
	plen=fill_tcp_data_p(buf,plen,PSTR("\n</table>\n"));
    3536:	bc 01       	movw	r22, r24
    3538:	c7 01       	movw	r24, r14
    353a:	0e 94 44 12 	call	0x2488	; 0x2488 <fill_tcp_data_p>
    353e:	4d ec       	ldi	r20, 0xCD	; 205
    3540:	53 e0       	ldi	r21, 0x03	; 3
	plen=fill_tcp_data_p(buf,plen,PSTR("<input type=\"submit\" value=\"Home\" style=\"width:100%\" onclick=\"window.location='/home';\" />\n"));
    3542:	bc 01       	movw	r22, r24
    3544:	c7 01       	movw	r24, r14
    3546:	0e 94 44 12 	call	0x2488	; 0x2488 <fill_tcp_data_p>
    354a:	45 ea       	ldi	r20, 0xA5	; 165
    354c:	53 e0       	ldi	r21, 0x03	; 3
	//plen=fill_tcp_data_p(buf,plen,PSTR("<input type=\"submit\" value=\"Information\" style=\"width:100%\" onclick=\"window.location='/';\" />\n</table></form>"));
	//plen=fill_tcp_data_p(buf,plen,PSTR("<tr>\n<td class=button><input type=submit value=\"Confirm\" style=\"width:100%\"></td>\n</tr>\n</table></form>"));
	
	//plen=fill_tcp_data_p(buf,plen,PSTR("\n</form>\n<form action=/ method=get><input type=hidden name=\"rr\" value=\"1\"><td class=button><input type=submit value=\"Reset\" style=\"width:100%\"></td></form>\n</tr>\n</table>"));
	plen=fill_tcp_data_p(buf,plen,PSTR("<br><hr>by Daniels Fi&#353ers</hr></br>"));
    354e:	bc 01       	movw	r22, r24
    3550:	c7 01       	movw	r24, r14
    3552:	0e 94 44 12 	call	0x2488	; 0x2488 <fill_tcp_data_p>
    3556:	45 e9       	ldi	r20, 0x95	; 149
    3558:	53 e0       	ldi	r21, 0x03	; 3
	plen=fill_tcp_data_p(buf,plen,PSTR("</div>\n</body>\n"));
    355a:	bc 01       	movw	r22, r24
    355c:	c7 01       	movw	r24, r14
    355e:	0e 94 44 12 	call	0x2488	; 0x2488 <fill_tcp_data_p>
    3562:	4e e8       	ldi	r20, 0x8E	; 142
    3564:	53 e0       	ldi	r21, 0x03	; 3
	plen=fill_tcp_data_p(buf,plen,PSTR("</pre>"));
    3566:	bc 01       	movw	r22, r24
    3568:	c7 01       	movw	r24, r14
    356a:	0e 94 44 12 	call	0x2488	; 0x2488 <fill_tcp_data_p>
    356e:	bc 01       	movw	r22, r24
    3570:	80 e0       	ldi	r24, 0x00	; 0

	
	return(plen);
    3572:	90 e0       	ldi	r25, 0x00	; 0
    3574:	e0 96       	adiw	r28, 0x30	; 48
    3576:	0f b6       	in	r0, 0x3f	; 63
}
    3578:	f8 94       	cli
    357a:	de bf       	out	0x3e, r29	; 62
    357c:	0f be       	out	0x3f, r0	; 63
    357e:	cd bf       	out	0x3d, r28	; 61
    3580:	df 91       	pop	r29
    3582:	cf 91       	pop	r28
    3584:	1f 91       	pop	r17
    3586:	0f 91       	pop	r16
    3588:	ff 90       	pop	r15
    358a:	ef 90       	pop	r14
    358c:	df 90       	pop	r13
    358e:	cf 90       	pop	r12
    3590:	bf 90       	pop	r11
    3592:	af 90       	pop	r10
    3594:	08 95       	ret

00003596 <software_reset>:
    3596:	a8 95       	wdr
    3598:	9c e0       	ldi	r25, 0x0C	; 12
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    359a:	88 e1       	ldi	r24, 0x18	; 24
    359c:	0f b6       	in	r0, 0x3f	; 63
    359e:	f8 94       	cli
    35a0:	a8 95       	wdr
    35a2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    35a6:	0f be       	out	0x3f, r0	; 63
    35a8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>

void software_reset()
{
	wdt_reset();
	wdt_enable(WDTO_250MS);
	exit (1);  // loop forever
    35ac:	81 e0       	ldi	r24, 0x01	; 1
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	0e 94 4d 4e 	call	0x9c9a	; 0x9c9a <_exit>

000035b4 <analyse_get_url>:
}

int restart = 0;

int8_t analyse_get_url(char *str)
{
    35b4:	ff 92       	push	r15
    35b6:	0f 93       	push	r16
    35b8:	1f 93       	push	r17
    35ba:	cf 93       	push	r28
    35bc:	df 93       	push	r29
    35be:	cd b7       	in	r28, 0x3d	; 61
    35c0:	de b7       	in	r29, 0x3e	; 62
    35c2:	2a 97       	sbiw	r28, 0x0a	; 10
    35c4:	0f b6       	in	r0, 0x3f	; 63
    35c6:	f8 94       	cli
    35c8:	de bf       	out	0x3e, r29	; 62
    35ca:	0f be       	out	0x3f, r0	; 63
    35cc:	cd bf       	out	0x3d, r28	; 61
	uint8_t mn=0;
	char kvalstrbuf[10];
	// the first slash:
	if(str[0] == '/' && str[1] == 'r' && str[3] == 'c' && str[4] == ' ')
    35ce:	fc 01       	movw	r30, r24
    35d0:	20 81       	ld	r18, Z
    35d2:	2f 32       	cpi	r18, 0x2F	; 47
    35d4:	61 f5       	brne	.+88     	; 0x362e <analyse_get_url+0x7a>
    35d6:	21 81       	ldd	r18, Z+1	; 0x01
    35d8:	22 37       	cpi	r18, 0x72	; 114
    35da:	39 f4       	brne	.+14     	; 0x35ea <analyse_get_url+0x36>
    35dc:	33 81       	ldd	r19, Z+3	; 0x03
    35de:	33 36       	cpi	r19, 0x63	; 99
    35e0:	71 f4       	brne	.+28     	; 0x35fe <analyse_get_url+0x4a>
    35e2:	34 81       	ldd	r19, Z+4	; 0x04
    35e4:	30 32       	cpi	r19, 0x20	; 32
    35e6:	59 f4       	brne	.+22     	; 0x35fe <analyse_get_url+0x4a>
    35e8:	1d c1       	rjmp	.+570    	; 0x3824 <analyse_get_url+0x270>
	{
		return (4);
	}
	if(str[0] == '/' && str[1] == 's' && str[8] == 's' && str[9] == ' ')
    35ea:	23 37       	cpi	r18, 0x73	; 115
    35ec:	41 f4       	brne	.+16     	; 0x35fe <analyse_get_url+0x4a>
    35ee:	fc 01       	movw	r30, r24
    35f0:	30 85       	ldd	r19, Z+8	; 0x08
    35f2:	33 37       	cpi	r19, 0x73	; 115
    35f4:	51 f4       	brne	.+20     	; 0x360a <analyse_get_url+0x56>
    35f6:	31 85       	ldd	r19, Z+9	; 0x09
    35f8:	30 32       	cpi	r19, 0x20	; 32
    35fa:	39 f4       	brne	.+14     	; 0x360a <analyse_get_url+0x56>
    35fc:	15 c1       	rjmp	.+554    	; 0x3828 <analyse_get_url+0x274>
	{
		return (3);
	}
	if ((str[0] == '/' && str[1] == ' ') || (str[0] == '/' && str[1] == 'h')){
    35fe:	20 32       	cpi	r18, 0x20	; 32
    3600:	09 f4       	brne	.+2      	; 0x3604 <analyse_get_url+0x50>
    3602:	14 c1       	rjmp	.+552    	; 0x382c <analyse_get_url+0x278>
    3604:	28 36       	cpi	r18, 0x68	; 104
    3606:	09 f4       	brne	.+2      	; 0x360a <analyse_get_url+0x56>
    3608:	13 c1       	rjmp	.+550    	; 0x3830 <analyse_get_url+0x27c>
		// end of url, display just the web page
		return(2);
	}
	if(str[0] == '/' && str[1] == 'r' && str[5] == 't' && str[6] == ' ')
    360a:	22 37       	cpi	r18, 0x72	; 114
    360c:	91 f4       	brne	.+36     	; 0x3632 <analyse_get_url+0x7e>
    360e:	fc 01       	movw	r30, r24
    3610:	25 81       	ldd	r18, Z+5	; 0x05
    3612:	24 37       	cpi	r18, 0x74	; 116
    3614:	81 f4       	brne	.+32     	; 0x3636 <analyse_get_url+0x82>
    3616:	26 81       	ldd	r18, Z+6	; 0x06
    3618:	20 32       	cpi	r18, 0x20	; 32
    361a:	79 f4       	brne	.+30     	; 0x363a <analyse_get_url+0x86>
	{
		restart = 1;
    361c:	21 e0       	ldi	r18, 0x01	; 1
    361e:	30 e0       	ldi	r19, 0x00	; 0
    3620:	30 93 3a 05 	sts	0x053A, r19	; 0x80053a <restart+0x1>
    3624:	20 93 39 05 	sts	0x0539, r18	; 0x800539 <restart>
		mn = 1;
    3628:	ff 24       	eor	r15, r15
    362a:	f3 94       	inc	r15
    362c:	07 c0       	rjmp	.+14     	; 0x363c <analyse_get_url+0x88>

int restart = 0;

int8_t analyse_get_url(char *str)
{
	uint8_t mn=0;
    362e:	f1 2c       	mov	r15, r1
    3630:	05 c0       	rjmp	.+10     	; 0x363c <analyse_get_url+0x88>
    3632:	f1 2c       	mov	r15, r1
    3634:	03 c0       	rjmp	.+6      	; 0x363c <analyse_get_url+0x88>
    3636:	f1 2c       	mov	r15, r1
    3638:	01 c0       	rjmp	.+2      	; 0x363c <analyse_get_url+0x88>
    363a:	f1 2c       	mov	r15, r1
    363c:	8c 01       	movw	r16, r24
	}
// 	if (find_key_val(str,kvalstrbuf,16,"settings")){
// 		mn = 3;
// 	}
	// str is now something like ?pw=secret&mn=0 or just end of url
	if (find_key_val(str,kvalstrbuf,16,"arip")){
    363e:	28 e4       	ldi	r18, 0x48	; 72
    3640:	31 e0       	ldi	r19, 0x01	; 1
    3642:	40 e1       	ldi	r20, 0x10	; 16
    3644:	be 01       	movw	r22, r28
    3646:	6f 5f       	subi	r22, 0xFF	; 255
    3648:	7f 4f       	sbci	r23, 0xFF	; 255
    364a:	b3 d2       	rcall	.+1382   	; 0x3bb2 <find_key_val>
    364c:	88 23       	and	r24, r24
    364e:	59 f0       	breq	.+22     	; 0x3666 <analyse_get_url+0xb2>
		stringToIntArray(myip, kvalstrbuf, (uint8_t*)0x20);
    3650:	40 e2       	ldi	r20, 0x20	; 32
    3652:	50 e0       	ldi	r21, 0x00	; 0
    3654:	be 01       	movw	r22, r28
    3656:	6f 5f       	subi	r22, 0xFF	; 255
    3658:	7f 4f       	sbci	r23, 0xFF	; 255
    365a:	82 e2       	ldi	r24, 0x22	; 34
    365c:	91 e0       	ldi	r25, 0x01	; 1
    365e:	0e 94 3f 38 	call	0x707e	; 0x707e <stringToIntArray>
		mn = 1;
    3662:	ff 24       	eor	r15, r15
    3664:	f3 94       	inc	r15
	}
	if (find_key_val(str,kvalstrbuf,16,"servip")){
    3666:	2d e4       	ldi	r18, 0x4D	; 77
    3668:	31 e0       	ldi	r19, 0x01	; 1
    366a:	40 e1       	ldi	r20, 0x10	; 16
    366c:	be 01       	movw	r22, r28
    366e:	6f 5f       	subi	r22, 0xFF	; 255
    3670:	7f 4f       	sbci	r23, 0xFF	; 255
    3672:	c8 01       	movw	r24, r16
    3674:	9e d2       	rcall	.+1340   	; 0x3bb2 <find_key_val>
    3676:	88 23       	and	r24, r24
    3678:	89 f0       	breq	.+34     	; 0x369c <analyse_get_url+0xe8>
		sprintf(serverip, "%s", kvalstrbuf);
    367a:	be 01       	movw	r22, r28
    367c:	6f 5f       	subi	r22, 0xFF	; 255
    367e:	7f 4f       	sbci	r23, 0xFF	; 255
    3680:	82 e1       	ldi	r24, 0x12	; 18
    3682:	91 e0       	ldi	r25, 0x01	; 1
    3684:	0e 94 5a 44 	call	0x88b4	; 0x88b4 <strcpy>
		eeprom_write_block((const void*)kvalstrbuf, (void*)0x30, 16);
    3688:	40 e1       	ldi	r20, 0x10	; 16
    368a:	50 e0       	ldi	r21, 0x00	; 0
    368c:	60 e3       	ldi	r22, 0x30	; 48
    368e:	70 e0       	ldi	r23, 0x00	; 0
    3690:	ce 01       	movw	r24, r28
    3692:	01 96       	adiw	r24, 0x01	; 1
    3694:	0e 94 01 4e 	call	0x9c02	; 0x9c02 <eeprom_write_block>
		mn = 1;
    3698:	ff 24       	eor	r15, r15
    369a:	f3 94       	inc	r15
	}
	if (find_key_val(str,kvalstrbuf,16,"gwip")){
    369c:	24 e5       	ldi	r18, 0x54	; 84
    369e:	31 e0       	ldi	r19, 0x01	; 1
    36a0:	40 e1       	ldi	r20, 0x10	; 16
    36a2:	be 01       	movw	r22, r28
    36a4:	6f 5f       	subi	r22, 0xFF	; 255
    36a6:	7f 4f       	sbci	r23, 0xFF	; 255
    36a8:	c8 01       	movw	r24, r16
    36aa:	83 d2       	rcall	.+1286   	; 0x3bb2 <find_key_val>
    36ac:	88 23       	and	r24, r24
    36ae:	59 f0       	breq	.+22     	; 0x36c6 <analyse_get_url+0x112>
		stringToIntArray(gwip, kvalstrbuf, (uint8_t*)0x40);
    36b0:	40 e4       	ldi	r20, 0x40	; 64
    36b2:	50 e0       	ldi	r21, 0x00	; 0
    36b4:	be 01       	movw	r22, r28
    36b6:	6f 5f       	subi	r22, 0xFF	; 255
    36b8:	7f 4f       	sbci	r23, 0xFF	; 255
    36ba:	8e e0       	ldi	r24, 0x0E	; 14
    36bc:	91 e0       	ldi	r25, 0x01	; 1
    36be:	0e 94 3f 38 	call	0x707e	; 0x707e <stringToIntArray>
		mn = 1;
    36c2:	ff 24       	eor	r15, r15
    36c4:	f3 94       	inc	r15
	}
	if (find_key_val(str,kvalstrbuf,10,"timeout")){
    36c6:	21 e8       	ldi	r18, 0x81	; 129
    36c8:	31 e0       	ldi	r19, 0x01	; 1
    36ca:	4a e0       	ldi	r20, 0x0A	; 10
    36cc:	be 01       	movw	r22, r28
    36ce:	6f 5f       	subi	r22, 0xFF	; 255
    36d0:	7f 4f       	sbci	r23, 0xFF	; 255
    36d2:	c8 01       	movw	r24, r16
    36d4:	6e d2       	rcall	.+1244   	; 0x3bb2 <find_key_val>
    36d6:	88 23       	and	r24, r24
    36d8:	79 f0       	breq	.+30     	; 0x36f8 <analyse_get_url+0x144>
		timeout = atoi(kvalstrbuf);
    36da:	ce 01       	movw	r24, r28
    36dc:	01 96       	adiw	r24, 0x01	; 1
    36de:	0e 94 1e 44 	call	0x883c	; 0x883c <atoi>
    36e2:	90 93 90 15 	sts	0x1590, r25	; 0x801590 <timeout+0x1>
    36e6:	80 93 8f 15 	sts	0x158F, r24	; 0x80158f <timeout>
		eeprom_write_word((uint16_t*)0x10, (uint16_t)timeout);
    36ea:	bc 01       	movw	r22, r24
    36ec:	80 e1       	ldi	r24, 0x10	; 16
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	0e 94 1d 4e 	call	0x9c3a	; 0x9c3a <eeprom_write_word>
		mn = 1;
    36f4:	ff 24       	eor	r15, r15
    36f6:	f3 94       	inc	r15
	}
	if (find_key_val(str,kvalstrbuf,10,"hall")){
    36f8:	29 e5       	ldi	r18, 0x59	; 89
    36fa:	31 e0       	ldi	r19, 0x01	; 1
    36fc:	4a e0       	ldi	r20, 0x0A	; 10
    36fe:	be 01       	movw	r22, r28
    3700:	6f 5f       	subi	r22, 0xFF	; 255
    3702:	7f 4f       	sbci	r23, 0xFF	; 255
    3704:	c8 01       	movw	r24, r16
    3706:	55 d2       	rcall	.+1194   	; 0x3bb2 <find_key_val>
    3708:	88 23       	and	r24, r24
    370a:	79 f0       	breq	.+30     	; 0x372a <analyse_get_url+0x176>
		halleff = atoi(kvalstrbuf);
    370c:	ce 01       	movw	r24, r28
    370e:	01 96       	adiw	r24, 0x01	; 1
    3710:	0e 94 1e 44 	call	0x883c	; 0x883c <atoi>
    3714:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <halleff+0x1>
    3718:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <halleff>
		eeprom_write_word((uint16_t*)0x60, (uint16_t)halleff);
    371c:	bc 01       	movw	r22, r24
    371e:	80 e6       	ldi	r24, 0x60	; 96
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	0e 94 1d 4e 	call	0x9c3a	; 0x9c3a <eeprom_write_word>
		mn = 1;
    3726:	ff 24       	eor	r15, r15
    3728:	f3 94       	inc	r15
	}
	if (find_key_val(str,kvalstrbuf,8,"year")){
    372a:	2e e5       	ldi	r18, 0x5E	; 94
    372c:	31 e0       	ldi	r19, 0x01	; 1
    372e:	48 e0       	ldi	r20, 0x08	; 8
    3730:	be 01       	movw	r22, r28
    3732:	6f 5f       	subi	r22, 0xFF	; 255
    3734:	7f 4f       	sbci	r23, 0xFF	; 255
    3736:	c8 01       	movw	r24, r16
    3738:	3c d2       	rcall	.+1144   	; 0x3bb2 <find_key_val>
    373a:	88 23       	and	r24, r24
    373c:	41 f0       	breq	.+16     	; 0x374e <analyse_get_url+0x19a>
		rtc.year = atoi(kvalstrbuf);
    373e:	ce 01       	movw	r24, r28
    3740:	01 96       	adiw	r24, 0x01	; 1
    3742:	0e 94 1e 44 	call	0x883c	; 0x883c <atoi>
    3746:	80 93 84 15 	sts	0x1584, r24	; 0x801584 <rtc+0x6>
		mn = 1;
    374a:	ff 24       	eor	r15, r15
    374c:	f3 94       	inc	r15
	}
	if (find_key_val(str,kvalstrbuf,8,"month")){
    374e:	23 e6       	ldi	r18, 0x63	; 99
    3750:	31 e0       	ldi	r19, 0x01	; 1
    3752:	48 e0       	ldi	r20, 0x08	; 8
    3754:	be 01       	movw	r22, r28
    3756:	6f 5f       	subi	r22, 0xFF	; 255
    3758:	7f 4f       	sbci	r23, 0xFF	; 255
    375a:	c8 01       	movw	r24, r16
    375c:	2a d2       	rcall	.+1108   	; 0x3bb2 <find_key_val>
    375e:	88 23       	and	r24, r24
    3760:	41 f0       	breq	.+16     	; 0x3772 <analyse_get_url+0x1be>
		rtc.month = atoi(kvalstrbuf);
    3762:	ce 01       	movw	r24, r28
    3764:	01 96       	adiw	r24, 0x01	; 1
    3766:	0e 94 1e 44 	call	0x883c	; 0x883c <atoi>
    376a:	80 93 83 15 	sts	0x1583, r24	; 0x801583 <rtc+0x5>
		mn = 1;
    376e:	ff 24       	eor	r15, r15
    3770:	f3 94       	inc	r15
	}
	if (find_key_val(str,kvalstrbuf,8,"day")){
    3772:	29 e6       	ldi	r18, 0x69	; 105
    3774:	31 e0       	ldi	r19, 0x01	; 1
    3776:	48 e0       	ldi	r20, 0x08	; 8
    3778:	be 01       	movw	r22, r28
    377a:	6f 5f       	subi	r22, 0xFF	; 255
    377c:	7f 4f       	sbci	r23, 0xFF	; 255
    377e:	c8 01       	movw	r24, r16
    3780:	18 d2       	rcall	.+1072   	; 0x3bb2 <find_key_val>
    3782:	88 23       	and	r24, r24
    3784:	41 f0       	breq	.+16     	; 0x3796 <analyse_get_url+0x1e2>
		rtc.date = atoi(kvalstrbuf);
    3786:	ce 01       	movw	r24, r28
    3788:	01 96       	adiw	r24, 0x01	; 1
    378a:	0e 94 1e 44 	call	0x883c	; 0x883c <atoi>
    378e:	80 93 82 15 	sts	0x1582, r24	; 0x801582 <rtc+0x4>
		mn = 1;
    3792:	ff 24       	eor	r15, r15
	}
	if (find_key_val(str,kvalstrbuf,8,"hour")){
    3794:	f3 94       	inc	r15
    3796:	2d e6       	ldi	r18, 0x6D	; 109
    3798:	31 e0       	ldi	r19, 0x01	; 1
    379a:	48 e0       	ldi	r20, 0x08	; 8
    379c:	be 01       	movw	r22, r28
    379e:	6f 5f       	subi	r22, 0xFF	; 255
    37a0:	7f 4f       	sbci	r23, 0xFF	; 255
    37a2:	c8 01       	movw	r24, r16
    37a4:	06 d2       	rcall	.+1036   	; 0x3bb2 <find_key_val>
    37a6:	88 23       	and	r24, r24
    37a8:	41 f0       	breq	.+16     	; 0x37ba <analyse_get_url+0x206>
		rtc.hour = atoi(kvalstrbuf);
    37aa:	ce 01       	movw	r24, r28
    37ac:	01 96       	adiw	r24, 0x01	; 1
    37ae:	0e 94 1e 44 	call	0x883c	; 0x883c <atoi>
    37b2:	80 93 80 15 	sts	0x1580, r24	; 0x801580 <rtc+0x2>
		mn = 1;
    37b6:	ff 24       	eor	r15, r15
	}
	if (find_key_val(str,kvalstrbuf,8,"min")){
    37b8:	f3 94       	inc	r15
    37ba:	22 e7       	ldi	r18, 0x72	; 114
    37bc:	31 e0       	ldi	r19, 0x01	; 1
    37be:	48 e0       	ldi	r20, 0x08	; 8
    37c0:	be 01       	movw	r22, r28
    37c2:	6f 5f       	subi	r22, 0xFF	; 255
    37c4:	7f 4f       	sbci	r23, 0xFF	; 255
    37c6:	c8 01       	movw	r24, r16
    37c8:	f4 d1       	rcall	.+1000   	; 0x3bb2 <find_key_val>
    37ca:	88 23       	and	r24, r24
    37cc:	89 f0       	breq	.+34     	; 0x37f0 <analyse_get_url+0x23c>
		rtc.min = atoi(kvalstrbuf);
    37ce:	ce 01       	movw	r24, r28
    37d0:	01 96       	adiw	r24, 0x01	; 1
    37d2:	0e 94 1e 44 	call	0x883c	; 0x883c <atoi>
    37d6:	80 93 7f 15 	sts	0x157F, r24	; 0x80157f <rtc+0x1>
		mn = 1;
	}
	if (find_key_val(str,kvalstrbuf,8,"sec")){
    37da:	26 e7       	ldi	r18, 0x76	; 118
    37dc:	31 e0       	ldi	r19, 0x01	; 1
    37de:	48 e0       	ldi	r20, 0x08	; 8
    37e0:	be 01       	movw	r22, r28
    37e2:	6f 5f       	subi	r22, 0xFF	; 255
    37e4:	7f 4f       	sbci	r23, 0xFF	; 255
    37e6:	c8 01       	movw	r24, r16
    37e8:	e4 d1       	rcall	.+968    	; 0x3bb2 <find_key_val>
    37ea:	81 11       	cpse	r24, r1
    37ec:	0b c0       	rjmp	.+22     	; 0x3804 <analyse_get_url+0x250>
    37ee:	14 c0       	rjmp	.+40     	; 0x3818 <analyse_get_url+0x264>
    37f0:	26 e7       	ldi	r18, 0x76	; 118
    37f2:	31 e0       	ldi	r19, 0x01	; 1
    37f4:	48 e0       	ldi	r20, 0x08	; 8
    37f6:	be 01       	movw	r22, r28
    37f8:	6f 5f       	subi	r22, 0xFF	; 255
    37fa:	7f 4f       	sbci	r23, 0xFF	; 255
    37fc:	c8 01       	movw	r24, r16
    37fe:	d9 d1       	rcall	.+946    	; 0x3bb2 <find_key_val>
    3800:	88 23       	and	r24, r24
    3802:	39 f0       	breq	.+14     	; 0x3812 <analyse_get_url+0x25e>
		rtc.sec = atoi(kvalstrbuf);
    3804:	ce 01       	movw	r24, r28
    3806:	01 96       	adiw	r24, 0x01	; 1
    3808:	0e 94 1e 44 	call	0x883c	; 0x883c <atoi>
    380c:	80 93 7e 15 	sts	0x157E, r24	; 0x80157e <rtc>
    3810:	03 c0       	rjmp	.+6      	; 0x3818 <analyse_get_url+0x264>
		mn = 1;
	}
	if(mn == 1)
    3812:	f1 e0       	ldi	r31, 0x01	; 1
    3814:	ff 12       	cpse	r15, r31
    3816:	0e c0       	rjmp	.+28     	; 0x3834 <analyse_get_url+0x280>
	{
		RTC_SetDateTime(&rtc);
    3818:	8e e7       	ldi	r24, 0x7E	; 126
    381a:	95 e1       	ldi	r25, 0x15	; 21
    381c:	0e 94 f1 35 	call	0x6be2	; 0x6be2 <RTC_SetDateTime>
		return(1);
    3820:	81 e0       	ldi	r24, 0x01	; 1
    3822:	09 c0       	rjmp	.+18     	; 0x3836 <analyse_get_url+0x282>
	uint8_t mn=0;
	char kvalstrbuf[10];
	// the first slash:
	if(str[0] == '/' && str[1] == 'r' && str[3] == 'c' && str[4] == ' ')
	{
		return (4);
    3824:	84 e0       	ldi	r24, 0x04	; 4
    3826:	07 c0       	rjmp	.+14     	; 0x3836 <analyse_get_url+0x282>
	}
	if(str[0] == '/' && str[1] == 's' && str[8] == 's' && str[9] == ' ')
	{
		return (3);
    3828:	83 e0       	ldi	r24, 0x03	; 3
    382a:	05 c0       	rjmp	.+10     	; 0x3836 <analyse_get_url+0x282>
	}
	if ((str[0] == '/' && str[1] == ' ') || (str[0] == '/' && str[1] == 'h')){
		// end of url, display just the web page
		return(2);
    382c:	82 e0       	ldi	r24, 0x02	; 2
    382e:	03 c0       	rjmp	.+6      	; 0x3836 <analyse_get_url+0x282>
    3830:	82 e0       	ldi	r24, 0x02	; 2
    3832:	01 c0       	rjmp	.+2      	; 0x3836 <analyse_get_url+0x282>
	{
		RTC_SetDateTime(&rtc);
		return(1);
	}
	// browsers looking for /favion.ico, non existing pages etc...
	return(-1);
    3834:	8f ef       	ldi	r24, 0xFF	; 255
}
    3836:	2a 96       	adiw	r28, 0x0a	; 10
    3838:	0f b6       	in	r0, 0x3f	; 63
    383a:	f8 94       	cli
    383c:	de bf       	out	0x3e, r29	; 62
    383e:	0f be       	out	0x3f, r0	; 63
    3840:	cd bf       	out	0x3d, r28	; 61
    3842:	df 91       	pop	r29
    3844:	cf 91       	pop	r28
    3846:	1f 91       	pop	r17
    3848:	0f 91       	pop	r16
    384a:	ff 90       	pop	r15
    384c:	08 95       	ret

0000384e <Ether_SendPacket>:

void Ether_SendPacket(char* text){
    384e:	af 92       	push	r10
    3850:	bf 92       	push	r11
    3852:	cf 92       	push	r12
    3854:	df 92       	push	r13
    3856:	ef 92       	push	r14
    3858:	ff 92       	push	r15
    385a:	0f 93       	push	r16
    385c:	1f 93       	push	r17
    385e:	cf 93       	push	r28
    3860:	df 93       	push	r29
    3862:	cd b7       	in	r28, 0x3d	; 61
    3864:	de b7       	in	r29, 0x3e	; 62
    3866:	60 97       	sbiw	r28, 0x10	; 16
    3868:	0f b6       	in	r0, 0x3f	; 63
    386a:	f8 94       	cli
    386c:	de bf       	out	0x3e, r29	; 62
    386e:	0f be       	out	0x3f, r0	; 63
    3870:	cd bf       	out	0x3d, r28	; 61
	uint16_t dat_p,plen;

	PORT_CS &= ~(1 << ETHER_CS);
    3872:	2a 98       	cbi	0x05, 2	; 5
	if(sec > timeout)
    3874:	20 91 3f 05 	lds	r18, 0x053F	; 0x80053f <sec>
    3878:	30 e0       	ldi	r19, 0x00	; 0
    387a:	40 91 8f 15 	lds	r20, 0x158F	; 0x80158f <timeout>
    387e:	50 91 90 15 	lds	r21, 0x1590	; 0x801590 <timeout+0x1>
    3882:	42 17       	cp	r20, r18
    3884:	53 07       	cpc	r21, r19
    3886:	38 f4       	brcc	.+14     	; 0x3896 <Ether_SendPacket+0x48>
	{
		PORT_CS |= (1 << ETHER_CS);
    3888:	2a 9a       	sbi	0x05, 2	; 5
		sendingPacket = 0;
    388a:	10 92 3d 05 	sts	0x053D, r1	; 0x80053d <sendingPacket>
		start_web_client = 1;
    388e:	81 e0       	ldi	r24, 0x01	; 1
    3890:	80 93 3c 05 	sts	0x053C, r24	; 0x80053c <start_web_client>
		return;
    3894:	11 c1       	rjmp	.+546    	; 0x3ab8 <Ether_SendPacket+0x26a>
    3896:	7c 01       	movw	r14, r24
	}
	cli();
    3898:	f8 94       	cli
	sendingPacket = 1;
    389a:	81 e0       	ldi	r24, 0x01	; 1
    389c:	80 93 3d 05 	sts	0x053D, r24	; 0x80053d <sendingPacket>
	plen=enc28j60PacketReceive(BUFFER_SIZE, buf);
    38a0:	60 e4       	ldi	r22, 0x40	; 64
    38a2:	75 e0       	ldi	r23, 0x05	; 5
    38a4:	88 eb       	ldi	r24, 0xB8	; 184
    38a6:	9b e0       	ldi	r25, 0x0B	; 11
    38a8:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <enc28j60PacketReceive>
    38ac:	6c 01       	movw	r12, r24
	buf[BUFFER_SIZE]='\0';
    38ae:	10 92 f8 10 	sts	0x10F8, r1	; 0x8010f8 <buf+0xbb8>
	dat_p=packetloop_arp_icmp_tcp(buf,plen);
    38b2:	bc 01       	movw	r22, r24
    38b4:	80 e4       	ldi	r24, 0x40	; 64
    38b6:	95 e0       	ldi	r25, 0x05	; 5
    38b8:	fd d8       	rcall	.-3590   	; 0x2ab4 <packetloop_arp_icmp_tcp>
    38ba:	5c 01       	movw	r10, r24
	if(plen == 0){
    38bc:	c1 14       	cp	r12, r1
    38be:	d1 04       	cpc	r13, r1
    38c0:	91 f4       	brne	.+36     	; 0x38e6 <Ether_SendPacket+0x98>
		if(start_web_client == 1)
    38c2:	80 91 3c 05 	lds	r24, 0x053C	; 0x80053c <start_web_client>
    38c6:	81 30       	cpi	r24, 0x01	; 1
    38c8:	71 f4       	brne	.+28     	; 0x38e6 <Ether_SendPacket+0x98>
		{
			sec = 0;
    38ca:	10 92 3f 05 	sts	0x053F, r1	; 0x80053f <sec>
			start_web_client = 0;
    38ce:	10 92 3c 05 	sts	0x053C, r1	; 0x80053c <start_web_client>
			
			client_tcpSend(text,&browserresult_callback,otherside_www_ip,gwmac,(uint8_t*)81);
    38d2:	01 e5       	ldi	r16, 0x51	; 81
    38d4:	10 e0       	ldi	r17, 0x00	; 0
    38d6:	2d ef       	ldi	r18, 0xFD	; 253
    38d8:	30 e1       	ldi	r19, 0x10	; 16
    38da:	49 ef       	ldi	r20, 0xF9	; 249
    38dc:	50 e1       	ldi	r21, 0x10	; 16
    38de:	6f e6       	ldi	r22, 0x6F	; 111
    38e0:	77 e1       	ldi	r23, 0x17	; 23
    38e2:	c7 01       	movw	r24, r14
    38e4:	b1 d8       	rcall	.-3742   	; 0x2a48 <client_tcpSend>
			
		}
	}
	sei();
    38e6:	78 94       	sei
	if(dat_p==0){ // plen!=0
    38e8:	a1 14       	cp	r10, r1
    38ea:	b1 04       	cpc	r11, r1
    38ec:	31 f4       	brne	.+12     	; 0x38fa <Ether_SendPacket+0xac>
		                         // check for incomming messages not processed
		                         // as part of packetloop_arp_icmp_tcp, e.g udp messages
		                         udp_client_check_for_dns_answer(buf,plen);
    38ee:	b6 01       	movw	r22, r12
    38f0:	80 e4       	ldi	r24, 0x40	; 64
    38f2:	95 e0       	ldi	r25, 0x05	; 5
    38f4:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <udp_client_check_for_dns_answer>
		                         return;
    38f8:	df c0       	rjmp	.+446    	; 0x3ab8 <Ether_SendPacket+0x26a>
		                 }
		if (strncmp("POST / timeout",(char *)&(buf[dat_p]),14)==0){
    38fa:	85 01       	movw	r16, r10
    38fc:	00 5c       	subi	r16, 0xC0	; 192
    38fe:	1a 4f       	sbci	r17, 0xFA	; 250
    3900:	4e e0       	ldi	r20, 0x0E	; 14
    3902:	50 e0       	ldi	r21, 0x00	; 0
    3904:	b8 01       	movw	r22, r16
    3906:	8a e7       	ldi	r24, 0x7A	; 122
    3908:	91 e0       	ldi	r25, 0x01	; 1
    390a:	0e 94 61 44 	call	0x88c2	; 0x88c2 <strncmp>
    390e:	89 2b       	or	r24, r25
    3910:	d9 f4       	brne	.+54     	; 0x3948 <Ether_SendPacket+0xfa>
			sscanf((char *)&(buf[dat_p]), "POST / timeout %d", &timeout);
    3912:	8f e8       	ldi	r24, 0x8F	; 143
    3914:	95 e1       	ldi	r25, 0x15	; 21
    3916:	9f 93       	push	r25
    3918:	8f 93       	push	r24
    391a:	89 e8       	ldi	r24, 0x89	; 137
    391c:	91 e0       	ldi	r25, 0x01	; 1
    391e:	9f 93       	push	r25
    3920:	8f 93       	push	r24
    3922:	1f 93       	push	r17
    3924:	0f 93       	push	r16
    3926:	0e 94 a0 45 	call	0x8b40	; 0x8b40 <sscanf>
			eeprom_write_word((uint16_t*)0x10, (uint16_t)timeout);
    392a:	60 91 8f 15 	lds	r22, 0x158F	; 0x80158f <timeout>
    392e:	70 91 90 15 	lds	r23, 0x1590	; 0x801590 <timeout+0x1>
    3932:	80 e1       	ldi	r24, 0x10	; 16
    3934:	90 e0       	ldi	r25, 0x00	; 0
    3936:	0e 94 1d 4e 	call	0x9c3a	; 0x9c3a <eeprom_write_word>
    393a:	0f 90       	pop	r0
    393c:	0f 90       	pop	r0
    393e:	0f 90       	pop	r0
    3940:	0f 90       	pop	r0
    3942:	0f 90       	pop	r0
    3944:	0f 90       	pop	r0
    3946:	32 c0       	rjmp	.+100    	; 0x39ac <Ether_SendPacket+0x15e>
		}
		else if (strncmp("POST / setrtc",(char *)&(buf[dat_p]),13)==0){
    3948:	4d e0       	ldi	r20, 0x0D	; 13
    394a:	50 e0       	ldi	r21, 0x00	; 0
    394c:	b8 01       	movw	r22, r16
    394e:	8b e9       	ldi	r24, 0x9B	; 155
    3950:	91 e0       	ldi	r25, 0x01	; 1
    3952:	0e 94 61 44 	call	0x88c2	; 0x88c2 <strncmp>
    3956:	89 2b       	or	r24, r25
    3958:	49 f5       	brne	.+82     	; 0x39ac <Ether_SendPacket+0x15e>
			//rtc_t tempRtc;
			sscanf((char *)&(buf[dat_p]), "POST / setrtc %"SCNu8"/%"SCNu8"/%"SCNu8" %"SCNu8"/%"SCNu8"/%"SCNu8, &rtc.date, &rtc.month, &rtc.year, &rtc.hour, &rtc.min, &rtc.sec);
    395a:	8e e7       	ldi	r24, 0x7E	; 126
    395c:	95 e1       	ldi	r25, 0x15	; 21
    395e:	9f 93       	push	r25
    3960:	8f 93       	push	r24
    3962:	8f e7       	ldi	r24, 0x7F	; 127
    3964:	95 e1       	ldi	r25, 0x15	; 21
    3966:	9f 93       	push	r25
    3968:	8f 93       	push	r24
    396a:	80 e8       	ldi	r24, 0x80	; 128
    396c:	95 e1       	ldi	r25, 0x15	; 21
    396e:	9f 93       	push	r25
    3970:	8f 93       	push	r24
    3972:	84 e8       	ldi	r24, 0x84	; 132
    3974:	95 e1       	ldi	r25, 0x15	; 21
    3976:	9f 93       	push	r25
    3978:	8f 93       	push	r24
    397a:	83 e8       	ldi	r24, 0x83	; 131
    397c:	95 e1       	ldi	r25, 0x15	; 21
    397e:	9f 93       	push	r25
    3980:	8f 93       	push	r24
    3982:	82 e8       	ldi	r24, 0x82	; 130
    3984:	95 e1       	ldi	r25, 0x15	; 21
    3986:	9f 93       	push	r25
    3988:	8f 93       	push	r24
    398a:	89 ea       	ldi	r24, 0xA9	; 169
    398c:	91 e0       	ldi	r25, 0x01	; 1
    398e:	9f 93       	push	r25
    3990:	8f 93       	push	r24
    3992:	1f 93       	push	r17
    3994:	0f 93       	push	r16
    3996:	0e 94 a0 45 	call	0x8b40	; 0x8b40 <sscanf>
			RTC_SetDateTime(&rtc);
    399a:	8e e7       	ldi	r24, 0x7E	; 126
    399c:	95 e1       	ldi	r25, 0x15	; 21
    399e:	0e 94 f1 35 	call	0x6be2	; 0x6be2 <RTC_SetDateTime>
    39a2:	0f b6       	in	r0, 0x3f	; 63
    39a4:	f8 94       	cli
    39a6:	de bf       	out	0x3e, r29	; 62
    39a8:	0f be       	out	0x3f, r0	; 63
    39aa:	cd bf       	out	0x3d, r28	; 61
		}
		if (strncmp("GET ",(char *)&(buf[dat_p]),4)!=0){
    39ac:	44 e0       	ldi	r20, 0x04	; 4
    39ae:	50 e0       	ldi	r21, 0x00	; 0
    39b0:	b8 01       	movw	r22, r16
    39b2:	85 ed       	ldi	r24, 0xD5	; 213
    39b4:	91 e0       	ldi	r25, 0x01	; 1
    39b6:	0e 94 61 44 	call	0x88c2	; 0x88c2 <strncmp>
    39ba:	89 2b       	or	r24, r25
    39bc:	51 f0       	breq	.+20     	; 0x39d2 <Ether_SendPacket+0x184>
			//head, post and other methods:
						                         
				//for possible status codes see:
				///http:www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
				dat_p=http200ok();
    39be:	ca da       	rcall	.-2668   	; 0x2f54 <http200ok>
				dat_p=fill_tcp_data_p(buf,dat_p,PSTR("<h1>200 OK</h1>"));
    39c0:	4e e7       	ldi	r20, 0x7E	; 126
    39c2:	53 e0       	ldi	r21, 0x03	; 3
    39c4:	bc 01       	movw	r22, r24
    39c6:	80 e4       	ldi	r24, 0x40	; 64
    39c8:	95 e0       	ldi	r25, 0x05	; 5
    39ca:	0e 94 44 12 	call	0x2488	; 0x2488 <fill_tcp_data_p>
    39ce:	bc 01       	movw	r22, r24
				goto SENDTCP;
    39d0:	6f c0       	rjmp	.+222    	; 0x3ab0 <Ether_SendPacket+0x262>
		}
		int8_t cmd = analyse_get_url((char *)&(buf[dat_p+4]));
    39d2:	c5 01       	movw	r24, r10
    39d4:	8c 5b       	subi	r24, 0xBC	; 188
    39d6:	9a 4f       	sbci	r25, 0xFA	; 250
    39d8:	ed dd       	rcall	.-1062   	; 0x35b4 <analyse_get_url>
		if (cmd==-1){
    39da:	8f 3f       	cpi	r24, 0xFF	; 255
    39dc:	51 f4       	brne	.+20     	; 0x39f2 <Ether_SendPacket+0x1a4>
			dat_p=fill_tcp_data_p(buf,0,PSTR("HTTP/1.0 401 Unauthorized\r\nContent-Type: text/html\r\n\r\n<h1>401 Unauthorized</h1>"));
    39de:	4e e2       	ldi	r20, 0x2E	; 46
    39e0:	53 e0       	ldi	r21, 0x03	; 3
    39e2:	60 e0       	ldi	r22, 0x00	; 0
    39e4:	70 e0       	ldi	r23, 0x00	; 0
    39e6:	80 e4       	ldi	r24, 0x40	; 64
    39e8:	95 e0       	ldi	r25, 0x05	; 5
    39ea:	0e 94 44 12 	call	0x2488	; 0x2488 <fill_tcp_data_p>
    39ee:	bc 01       	movw	r22, r24
			goto SENDTCP;
    39f0:	5f c0       	rjmp	.+190    	; 0x3ab0 <Ether_SendPacket+0x262>
		}
		if(cmd == 1)
    39f2:	81 30       	cpi	r24, 0x01	; 1
    39f4:	09 f0       	breq	.+2      	; 0x39f8 <Ether_SendPacket+0x1aa>
    39f6:	43 c0       	rjmp	.+134    	; 0x3a7e <Ether_SendPacket+0x230>
		{
			char charMyIP[16];
			sprintf(charMyIP, "%d.%d.%d.%d", myip[0], myip[1], myip[2], myip[3]);
    39f8:	e2 e2       	ldi	r30, 0x22	; 34
    39fa:	f1 e0       	ldi	r31, 0x01	; 1
    39fc:	83 81       	ldd	r24, Z+3	; 0x03
    39fe:	1f 92       	push	r1
    3a00:	8f 93       	push	r24
    3a02:	82 81       	ldd	r24, Z+2	; 0x02
    3a04:	1f 92       	push	r1
    3a06:	8f 93       	push	r24
    3a08:	81 81       	ldd	r24, Z+1	; 0x01
    3a0a:	1f 92       	push	r1
    3a0c:	8f 93       	push	r24
    3a0e:	80 81       	ld	r24, Z
    3a10:	1f 92       	push	r1
    3a12:	8f 93       	push	r24
    3a14:	8c e3       	ldi	r24, 0x3C	; 60
    3a16:	91 e0       	ldi	r25, 0x01	; 1
    3a18:	9f 93       	push	r25
    3a1a:	8f 93       	push	r24
    3a1c:	8e 01       	movw	r16, r28
    3a1e:	0f 5f       	subi	r16, 0xFF	; 255
    3a20:	1f 4f       	sbci	r17, 0xFF	; 255
    3a22:	1f 93       	push	r17
    3a24:	0f 93       	push	r16
    3a26:	0e 94 72 45 	call	0x8ae4	; 0x8ae4 <sprintf>
			dat_p=http200ok();
    3a2a:	94 da       	rcall	.-2776   	; 0x2f54 <http200ok>
			dat_p=fill_tcp_data_p(buf,dat_p,PSTR("<pre>\n"));
    3a2c:	47 e2       	ldi	r20, 0x27	; 39
    3a2e:	53 e0       	ldi	r21, 0x03	; 3
    3a30:	bc 01       	movw	r22, r24
    3a32:	80 e4       	ldi	r24, 0x40	; 64
    3a34:	95 e0       	ldi	r25, 0x05	; 5
    3a36:	0e 94 44 12 	call	0x2488	; 0x2488 <fill_tcp_data_p>
			dat_p=fill_tcp_data_p(buf,dat_p,PSTR("<script type=text/javascript>\n"));
    3a3a:	48 e0       	ldi	r20, 0x08	; 8
    3a3c:	53 e0       	ldi	r21, 0x03	; 3
    3a3e:	bc 01       	movw	r22, r24
    3a40:	80 e4       	ldi	r24, 0x40	; 64
    3a42:	95 e0       	ldi	r25, 0x05	; 5
    3a44:	0e 94 44 12 	call	0x2488	; 0x2488 <fill_tcp_data_p>
			dat_p=fill_tcp_data_p(buf,dat_p,PSTR("location.href = 'http://"));
    3a48:	4f ee       	ldi	r20, 0xEF	; 239
    3a4a:	52 e0       	ldi	r21, 0x02	; 2
    3a4c:	bc 01       	movw	r22, r24
    3a4e:	80 e4       	ldi	r24, 0x40	; 64
    3a50:	95 e0       	ldi	r25, 0x05	; 5
    3a52:	0e 94 44 12 	call	0x2488	; 0x2488 <fill_tcp_data_p>
			dat_p=fill_tcp_data(buf,dat_p,charMyIP);
    3a56:	a8 01       	movw	r20, r16
    3a58:	bc 01       	movw	r22, r24
    3a5a:	80 e4       	ldi	r24, 0x40	; 64
    3a5c:	95 e0       	ldi	r25, 0x05	; 5
    3a5e:	0e 94 70 12 	call	0x24e0	; 0x24e0 <fill_tcp_data>
			dat_p=fill_tcp_data_p(buf,dat_p,PSTR("/home';\n</script>\n"));
    3a62:	4c ed       	ldi	r20, 0xDC	; 220
    3a64:	52 e0       	ldi	r21, 0x02	; 2
    3a66:	bc 01       	movw	r22, r24
    3a68:	80 e4       	ldi	r24, 0x40	; 64
    3a6a:	95 e0       	ldi	r25, 0x05	; 5
    3a6c:	0e 94 44 12 	call	0x2488	; 0x2488 <fill_tcp_data_p>
    3a70:	bc 01       	movw	r22, r24
    3a72:	0f b6       	in	r0, 0x3f	; 63
    3a74:	f8 94       	cli
    3a76:	de bf       	out	0x3e, r29	; 62
    3a78:	0f be       	out	0x3f, r0	; 63
    3a7a:	cd bf       	out	0x3d, r28	; 61
			//dat_p=fill_tcp_data(buf,dat_p,charMyIP);
			goto SENDTCP;
		}
		if(cmd == 3)
    3a7c:	19 c0       	rjmp	.+50     	; 0x3ab0 <Ether_SendPacket+0x262>
    3a7e:	83 30       	cpi	r24, 0x03	; 3
		{
			dat_p=http200ok();
    3a80:	29 f4       	brne	.+10     	; 0x3a8c <Ether_SendPacket+0x23e>
			dat_p=print_settings(buf);
    3a82:	68 da       	rcall	.-2864   	; 0x2f54 <http200ok>
    3a84:	80 e4       	ldi	r24, 0x40	; 64
    3a86:	95 e0       	ldi	r25, 0x05	; 5
			goto SENDTCP;
    3a88:	33 db       	rcall	.-2458   	; 0x30f0 <print_settings>
		}
		if(cmd == 4)
    3a8a:	12 c0       	rjmp	.+36     	; 0x3ab0 <Ether_SendPacket+0x262>
		{
			dat_p=http200ok();
    3a8c:	84 30       	cpi	r24, 0x04	; 4
			dat_p=print_rtc(buf);
    3a8e:	29 f4       	brne	.+10     	; 0x3a9a <Ether_SendPacket+0x24c>
    3a90:	61 da       	rcall	.-2878   	; 0x2f54 <http200ok>
    3a92:	80 e4       	ldi	r24, 0x40	; 64
			goto SENDTCP;
    3a94:	95 e0       	ldi	r25, 0x05	; 5
		}
		dat_p=http200ok();
    3a96:	47 dc       	rcall	.-1906   	; 0x3326 <print_rtc>
    3a98:	0b c0       	rjmp	.+22     	; 0x3ab0 <Ether_SendPacket+0x262>
		dat_p=print_webpage(buf);
    3a9a:	5c da       	rcall	.-2888   	; 0x2f54 <http200ok>
    3a9c:	80 e4       	ldi	r24, 0x40	; 64
    3a9e:	95 e0       	ldi	r25, 0x05	; 5
		if(restart) software_reset();
    3aa0:	61 da       	rcall	.-2878   	; 0x2f64 <print_webpage>
    3aa2:	80 91 39 05 	lds	r24, 0x0539	; 0x800539 <restart>
    3aa6:	90 91 3a 05 	lds	r25, 0x053A	; 0x80053a <restart+0x1>
    3aaa:	89 2b       	or	r24, r25
    3aac:	09 f0       	breq	.+2      	; 0x3ab0 <Ether_SendPacket+0x262>
    3aae:	73 dd       	rcall	.-1306   	; 0x3596 <software_reset>
		goto SENDTCP;
						                 
	SENDTCP:
				www_server_reply(buf,dat_p);
    3ab0:	80 e4       	ldi	r24, 0x40	; 64
    3ab2:	95 e0       	ldi	r25, 0x05	; 5
    3ab4:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <www_server_reply>
}
    3ab8:	60 96       	adiw	r28, 0x10	; 16
    3aba:	0f b6       	in	r0, 0x3f	; 63
    3abc:	f8 94       	cli
    3abe:	de bf       	out	0x3e, r29	; 62
    3ac0:	0f be       	out	0x3f, r0	; 63
    3ac2:	cd bf       	out	0x3d, r28	; 61
    3ac4:	df 91       	pop	r29
    3ac6:	cf 91       	pop	r28
    3ac8:	1f 91       	pop	r17
    3aca:	0f 91       	pop	r16
    3acc:	ff 90       	pop	r15
    3ace:	ef 90       	pop	r14
    3ad0:	df 90       	pop	r13
    3ad2:	cf 90       	pop	r12
    3ad4:	bf 90       	pop	r11
    3ad6:	af 90       	pop	r10
    3ad8:	08 95       	ret

00003ada <Ether_init>:


void Ether_init()
{
    3ada:	cf 93       	push	r28
    3adc:	df 93       	push	r29
	 // full external speed)
	 // set the clock prescaler. First write CLKPCE to enable setting
	 // of clock the next four instructions.
	 // Note that the CKDIV8 Fuse determines the initial
	 // value of the CKKPS bits.
	 CLKPR=(1<<CLKPCE); // change enable
    3ade:	e1 e6       	ldi	r30, 0x61	; 97
    3ae0:	f0 e0       	ldi	r31, 0x00	; 0
    3ae2:	80 e8       	ldi	r24, 0x80	; 128
    3ae4:	80 83       	st	Z, r24
	 CLKPR=0; // "no pre-scaler"
    3ae6:	10 82       	st	Z, r1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3ae8:	c0 e0       	ldi	r28, 0x00	; 0
    3aea:	8c 2f       	mov	r24, r28
    3aec:	8a 95       	dec	r24
    3aee:	f1 f7       	brne	.-4      	; 0x3aec <Ether_init+0x12>
	 _delay_loop_1(0); // 60us

	 /*initialize enc28j60*/
	 enc28j60Init(mymac);
    3af0:	86 e2       	ldi	r24, 0x26	; 38
    3af2:	91 e0       	ldi	r25, 0x01	; 1
    3af4:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <enc28j60Init>
	 enc28j60clkout(1); // change clkout from 6.25MHz to 12.5MHz
    3af8:	81 e0       	ldi	r24, 0x01	; 1
    3afa:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <enc28j60clkout>
    3afe:	ca 95       	dec	r28
    3b00:	f1 f7       	brne	.-4      	; 0x3afe <Ether_init+0x24>
	 _delay_loop_1(0); // 60us

	 init_cnt2();
    3b02:	fc d9       	rcall	.-3080   	; 0x2efc <init_cnt2>
	 sei();
    3b04:	78 94       	sei
	 /* Magjack leds configuration, see enc28j60 datasheet, page 11 */
	 // LEDB=yellow LEDA=green
	 //
	 // 0x476 is PHLCON LEDA=links status, LEDB=receive/transmit
	 // enc28j60PhyWrite(PHLCON,0b0000 0100 0111 01 10);
	 enc28j60PhyWrite(PHLCON,0x476);
    3b06:	66 e7       	ldi	r22, 0x76	; 118
    3b08:	74 e0       	ldi	r23, 0x04	; 4
    3b0a:	84 e1       	ldi	r24, 0x14	; 20
    3b0c:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <enc28j60PhyWrite>

	 
	 //init the web server ethernet/ip layer:
	 init_udp_or_www_server(mymac,myip);
    3b10:	62 e2       	ldi	r22, 0x22	; 34
    3b12:	71 e0       	ldi	r23, 0x01	; 1
    3b14:	86 e2       	ldi	r24, 0x26	; 38
    3b16:	91 e0       	ldi	r25, 0x01	; 1
    3b18:	0e 94 93 13 	call	0x2726	; 0x2726 <init_udp_or_www_server>
	 www_server_port(MYWWWPORT);
    3b1c:	80 e5       	ldi	r24, 0x50	; 80
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	0e 94 a7 13 	call	0x274e	; 0x274e <www_server_port>

	 get_mac_with_arp(gwip,TRANS_NUM_GWMAC,&arpresolver_result_callback);
    3b24:	40 e7       	ldi	r20, 0x70	; 112
    3b26:	57 e1       	ldi	r21, 0x17	; 23
    3b28:	61 e0       	ldi	r22, 0x01	; 1
    3b2a:	8e e0       	ldi	r24, 0x0E	; 14
    3b2c:	91 e0       	ldi	r25, 0x01	; 1
    3b2e:	0e 94 59 14 	call	0x28b2	; 0x28b2 <get_mac_with_arp>
	 while(get_mac_with_arp_wait()){
    3b32:	0b c0       	rjmp	.+22     	; 0x3b4a <Ether_init+0x70>
		 // to process the ARP reply we must call the packetloop
		 plen=enc28j60PacketReceive(BUFFER_SIZE, buf);
    3b34:	60 e4       	ldi	r22, 0x40	; 64
    3b36:	75 e0       	ldi	r23, 0x05	; 5
    3b38:	88 eb       	ldi	r24, 0xB8	; 184
    3b3a:	9b e0       	ldi	r25, 0x0B	; 11
    3b3c:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <enc28j60PacketReceive>
		 packetloop_arp_icmp_tcp(buf,plen);
    3b40:	bc 01       	movw	r22, r24
    3b42:	80 e4       	ldi	r24, 0x40	; 64
    3b44:	95 e0       	ldi	r25, 0x05	; 5
    3b46:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <packetloop_arp_icmp_tcp>
	 //init the web server ethernet/ip layer:
	 init_udp_or_www_server(mymac,myip);
	 www_server_port(MYWWWPORT);

	 get_mac_with_arp(gwip,TRANS_NUM_GWMAC,&arpresolver_result_callback);
	 while(get_mac_with_arp_wait()){
    3b4a:	0e 94 52 14 	call	0x28a4	; 0x28a4 <get_mac_with_arp_wait>
    3b4e:	81 11       	cpse	r24, r1
    3b50:	f1 cf       	rjmp	.-30     	; 0x3b34 <Ether_init+0x5a>
		 // to process the ARP reply we must call the packetloop
		 plen=enc28j60PacketReceive(BUFFER_SIZE, buf);
		 packetloop_arp_icmp_tcp(buf,plen);
	 }

	 parse_ip(otherside_www_ip,serverip);
    3b52:	62 e1       	ldi	r22, 0x12	; 18
    3b54:	71 e0       	ldi	r23, 0x01	; 1
    3b56:	89 ef       	ldi	r24, 0xF9	; 249
    3b58:	90 e1       	ldi	r25, 0x10	; 16
    3b5a:	9e d0       	rcall	.+316    	; 0x3c98 <parse_ip>
	 processing_state=2; // no need to do any dns look-up
    3b5c:	82 e0       	ldi	r24, 0x02	; 2
    3b5e:	80 93 3b 05 	sts	0x053B, r24	; 0x80053b <processing_state>
					 i++;
				 }
				 processing_state=4;
				 }else{
				 get_mac_with_arp(otherside_www_ip,TRANS_NUM_WEBMAC,&arpresolver_result_callback);
				 processing_state=3;
    3b62:	d3 e0       	ldi	r29, 0x03	; 3
			 }
			 continue;
		 }
		 if (processing_state==3 && get_mac_with_arp_wait()==0){
			 processing_state=4;
    3b64:	c4 e0       	ldi	r28, 0x04	; 4
    3b66:	02 c0       	rjmp	.+4      	; 0x3b6c <Ether_init+0x92>
	 parse_ip(otherside_www_ip,serverip);
	 processing_state=2; // no need to do any dns look-up
	 
	 while(processing_state != 4)
	 {
		 if (processing_state==2){
    3b68:	82 30       	cpi	r24, 0x02	; 2
    3b6a:	a1 f4       	brne	.+40     	; 0x3b94 <Ether_init+0xba>
			 if (route_via_gw(otherside_www_ip)){
    3b6c:	89 ef       	ldi	r24, 0xF9	; 249
    3b6e:	90 e1       	ldi	r25, 0x10	; 16
    3b70:	0e 94 06 11 	call	0x220c	; 0x220c <route_via_gw>
    3b74:	88 23       	and	r24, r24
    3b76:	21 f0       	breq	.+8      	; 0x3b80 <Ether_init+0xa6>
				 i=0;
				 while(i<6){
					 otherside_www_gwmac[i]=gwmac[i];
					 i++;
				 }
				 processing_state=4;
    3b78:	84 e0       	ldi	r24, 0x04	; 4
    3b7a:	80 93 3b 05 	sts	0x053B, r24	; 0x80053b <processing_state>
    3b7e:	16 c0       	rjmp	.+44     	; 0x3bac <Ether_init+0xd2>
				 }else{
				 get_mac_with_arp(otherside_www_ip,TRANS_NUM_WEBMAC,&arpresolver_result_callback);
    3b80:	40 e7       	ldi	r20, 0x70	; 112
    3b82:	57 e1       	ldi	r21, 0x17	; 23
    3b84:	62 e0       	ldi	r22, 0x02	; 2
    3b86:	89 ef       	ldi	r24, 0xF9	; 249
    3b88:	90 e1       	ldi	r25, 0x10	; 16
    3b8a:	0e 94 59 14 	call	0x28b2	; 0x28b2 <get_mac_with_arp>
				 processing_state=3;
    3b8e:	d0 93 3b 05 	sts	0x053B, r29	; 0x80053b <processing_state>
    3b92:	08 c0       	rjmp	.+16     	; 0x3ba4 <Ether_init+0xca>
			 }
			 continue;
		 }
		 if (processing_state==3 && get_mac_with_arp_wait()==0){
    3b94:	83 30       	cpi	r24, 0x03	; 3
    3b96:	31 f4       	brne	.+12     	; 0x3ba4 <Ether_init+0xca>
    3b98:	0e 94 52 14 	call	0x28a4	; 0x28a4 <get_mac_with_arp_wait>
    3b9c:	81 11       	cpse	r24, r1
    3b9e:	02 c0       	rjmp	.+4      	; 0x3ba4 <Ether_init+0xca>
			 processing_state=4;
    3ba0:	c0 93 3b 05 	sts	0x053B, r28	; 0x80053b <processing_state>
	 }

	 parse_ip(otherside_www_ip,serverip);
	 processing_state=2; // no need to do any dns look-up
	 
	 while(processing_state != 4)
    3ba4:	80 91 3b 05 	lds	r24, 0x053B	; 0x80053b <processing_state>
    3ba8:	84 30       	cpi	r24, 0x04	; 4
    3baa:	f1 f6       	brne	.-68     	; 0x3b68 <Ether_init+0x8e>
		 }
		 if (processing_state==3 && get_mac_with_arp_wait()==0){
			 processing_state=4;
		 }
	 }
}
    3bac:	df 91       	pop	r29
    3bae:	cf 91       	pop	r28
    3bb0:	08 95       	ret

00003bb2 <find_key_val>:
                urlbuf++;
                urlbuf++;
                str++;
        }
        *urlbuf='\0';
}
    3bb2:	1f 93       	push	r17
    3bb4:	cf 93       	push	r28
    3bb6:	df 93       	push	r29
    3bb8:	ec 01       	movw	r28, r24
    3bba:	98 81       	ld	r25, Y
    3bbc:	89 2f       	mov	r24, r25
    3bbe:	8f 7d       	andi	r24, 0xDF	; 223
    3bc0:	09 f4       	brne	.+2      	; 0x3bc4 <find_key_val+0x12>
    3bc2:	54 c0       	rjmp	.+168    	; 0x3c6c <find_key_val+0xba>
    3bc4:	9d 30       	cpi	r25, 0x0D	; 13
    3bc6:	09 f4       	brne	.+2      	; 0x3bca <find_key_val+0x18>
    3bc8:	53 c0       	rjmp	.+166    	; 0x3c70 <find_key_val+0xbe>
    3bca:	d9 01       	movw	r26, r18
    3bcc:	50 e0       	ldi	r21, 0x00	; 0
    3bce:	11 e0       	ldi	r17, 0x01	; 1
    3bd0:	8c 91       	ld	r24, X
    3bd2:	89 13       	cpse	r24, r25
    3bd4:	1c c0       	rjmp	.+56     	; 0x3c0e <find_key_val+0x5c>
    3bd6:	2a 17       	cp	r18, r26
    3bd8:	3b 07       	cpc	r19, r27
    3bda:	39 f4       	brne	.+14     	; 0x3bea <find_key_val+0x38>
    3bdc:	fe 01       	movw	r30, r28
    3bde:	31 97       	sbiw	r30, 0x01	; 1
    3be0:	80 81       	ld	r24, Z
    3be2:	8f 33       	cpi	r24, 0x3F	; 63
    3be4:	11 f0       	breq	.+4      	; 0x3bea <find_key_val+0x38>
    3be6:	86 32       	cpi	r24, 0x26	; 38
    3be8:	b1 f4       	brne	.+44     	; 0x3c16 <find_key_val+0x64>
    3bea:	11 96       	adiw	r26, 0x01	; 1
    3bec:	8c 91       	ld	r24, X
    3bee:	11 97       	sbiw	r26, 0x01	; 1
    3bf0:	88 23       	and	r24, r24
    3bf2:	21 f0       	breq	.+8      	; 0x3bfc <find_key_val+0x4a>
    3bf4:	11 96       	adiw	r26, 0x01	; 1
    3bf6:	fe 01       	movw	r30, r28
    3bf8:	85 2f       	mov	r24, r21
    3bfa:	10 c0       	rjmp	.+32     	; 0x3c1c <find_key_val+0x6a>
    3bfc:	fe 01       	movw	r30, r28
    3bfe:	31 96       	adiw	r30, 0x01	; 1
    3c00:	81 2f       	mov	r24, r17
    3c02:	99 81       	ldd	r25, Y+1	; 0x01
    3c04:	9d 33       	cpi	r25, 0x3D	; 61
    3c06:	09 f0       	breq	.+2      	; 0x3c0a <find_key_val+0x58>
    3c08:	85 2f       	mov	r24, r21
    3c0a:	d9 01       	movw	r26, r18
    3c0c:	07 c0       	rjmp	.+14     	; 0x3c1c <find_key_val+0x6a>
    3c0e:	d9 01       	movw	r26, r18
    3c10:	fe 01       	movw	r30, r28
    3c12:	85 2f       	mov	r24, r21
    3c14:	03 c0       	rjmp	.+6      	; 0x3c1c <find_key_val+0x6a>
    3c16:	d9 01       	movw	r26, r18
    3c18:	fe 01       	movw	r30, r28
    3c1a:	85 2f       	mov	r24, r21
    3c1c:	ef 01       	movw	r28, r30
    3c1e:	21 96       	adiw	r28, 0x01	; 1
    3c20:	91 81       	ldd	r25, Z+1	; 0x01
    3c22:	99 23       	and	r25, r25
    3c24:	99 f1       	breq	.+102    	; 0x3c8c <find_key_val+0xda>
    3c26:	90 32       	cpi	r25, 0x20	; 32
    3c28:	59 f1       	breq	.+86     	; 0x3c80 <find_key_val+0xce>
    3c2a:	9d 30       	cpi	r25, 0x0D	; 13
    3c2c:	61 f1       	breq	.+88     	; 0x3c86 <find_key_val+0xd4>
    3c2e:	88 23       	and	r24, r24
    3c30:	79 f2       	breq	.-98     	; 0x3bd0 <find_key_val+0x1e>
    3c32:	23 c0       	rjmp	.+70     	; 0x3c7a <find_key_val+0xc8>
    3c34:	50 e0       	ldi	r21, 0x00	; 0
    3c36:	41 50       	subi	r20, 0x01	; 1
    3c38:	51 09       	sbc	r21, r1
    3c3a:	14 16       	cp	r1, r20
    3c3c:	15 06       	cpc	r1, r21
    3c3e:	9c f4       	brge	.+38     	; 0x3c66 <find_key_val+0xb4>
    3c40:	db 01       	movw	r26, r22
    3c42:	32 96       	adiw	r30, 0x02	; 2
    3c44:	20 e0       	ldi	r18, 0x00	; 0
    3c46:	9d 93       	st	X+, r25
    3c48:	2f 5f       	subi	r18, 0xFF	; 255
    3c4a:	bd 01       	movw	r22, r26
    3c4c:	91 91       	ld	r25, Z+
    3c4e:	39 2f       	mov	r19, r25
    3c50:	3f 7d       	andi	r19, 0xDF	; 223
    3c52:	49 f0       	breq	.+18     	; 0x3c66 <find_key_val+0xb4>
    3c54:	9d 30       	cpi	r25, 0x0D	; 13
    3c56:	39 f0       	breq	.+14     	; 0x3c66 <find_key_val+0xb4>
    3c58:	96 32       	cpi	r25, 0x26	; 38
    3c5a:	29 f0       	breq	.+10     	; 0x3c66 <find_key_val+0xb4>
    3c5c:	c2 2f       	mov	r28, r18
    3c5e:	d0 e0       	ldi	r29, 0x00	; 0
    3c60:	c4 17       	cp	r28, r20
    3c62:	d5 07       	cpc	r29, r21
    3c64:	84 f3       	brlt	.-32     	; 0x3c46 <find_key_val+0x94>
    3c66:	fb 01       	movw	r30, r22
    3c68:	10 82       	st	Z, r1
    3c6a:	12 c0       	rjmp	.+36     	; 0x3c90 <find_key_val+0xde>
    3c6c:	80 e0       	ldi	r24, 0x00	; 0
    3c6e:	10 c0       	rjmp	.+32     	; 0x3c90 <find_key_val+0xde>
    3c70:	80 e0       	ldi	r24, 0x00	; 0
    3c72:	0e c0       	rjmp	.+28     	; 0x3c90 <find_key_val+0xde>
    3c74:	96 32       	cpi	r25, 0x26	; 38
    3c76:	f1 f6       	brne	.-68     	; 0x3c34 <find_key_val+0x82>
    3c78:	f6 cf       	rjmp	.-20     	; 0x3c66 <find_key_val+0xb4>
    3c7a:	81 30       	cpi	r24, 0x01	; 1
    3c7c:	d9 f3       	breq	.-10     	; 0x3c74 <find_key_val+0xc2>
    3c7e:	08 c0       	rjmp	.+16     	; 0x3c90 <find_key_val+0xde>
    3c80:	81 30       	cpi	r24, 0x01	; 1
    3c82:	31 f4       	brne	.+12     	; 0x3c90 <find_key_val+0xde>
    3c84:	f0 cf       	rjmp	.-32     	; 0x3c66 <find_key_val+0xb4>
    3c86:	81 30       	cpi	r24, 0x01	; 1
    3c88:	19 f4       	brne	.+6      	; 0x3c90 <find_key_val+0xde>
    3c8a:	ed cf       	rjmp	.-38     	; 0x3c66 <find_key_val+0xb4>
    3c8c:	81 30       	cpi	r24, 0x01	; 1
    3c8e:	59 f3       	breq	.-42     	; 0x3c66 <find_key_val+0xb4>
    3c90:	df 91       	pop	r29
    3c92:	cf 91       	pop	r28
    3c94:	1f 91       	pop	r17
    3c96:	08 95       	ret

00003c98 <parse_ip>:

#endif // URLENCODE_websrv_help

// parse a string that is an IP address and extract the IP to ip_byte_str
uint8_t parse_ip(uint8_t *ip_byte_str,const char *str)
{
    3c98:	af 92       	push	r10
    3c9a:	bf 92       	push	r11
    3c9c:	df 92       	push	r13
    3c9e:	ef 92       	push	r14
    3ca0:	ff 92       	push	r15
    3ca2:	0f 93       	push	r16
    3ca4:	1f 93       	push	r17
    3ca6:	cf 93       	push	r28
    3ca8:	df 93       	push	r29
    3caa:	00 d0       	rcall	.+0      	; 0x3cac <parse_ip+0x14>
    3cac:	00 d0       	rcall	.+0      	; 0x3cae <parse_ip+0x16>
    3cae:	cd b7       	in	r28, 0x3d	; 61
    3cb0:	de b7       	in	r29, 0x3e	; 62
    3cb2:	fc 01       	movw	r30, r24
        char strbuf[4];
        uint8_t bufpos=0;
        uint8_t i=0;
        while(i<4){
                ip_byte_str[i]=0;
    3cb4:	10 82       	st	Z, r1
    3cb6:	11 82       	std	Z+1, r1	; 0x01
    3cb8:	12 82       	std	Z+2, r1	; 0x02
    3cba:	13 82       	std	Z+3, r1	; 0x03
                i++;
        }
        i=0;
        while(*str && i<4){
    3cbc:	db 01       	movw	r26, r22
    3cbe:	9c 91       	ld	r25, X
    3cc0:	99 23       	and	r25, r25
    3cc2:	09 f4       	brne	.+2      	; 0x3cc6 <parse_ip+0x2e>
    3cc4:	48 c0       	rjmp	.+144    	; 0x3d56 <parse_ip+0xbe>
    3cc6:	7f 01       	movw	r14, r30
    3cc8:	8b 01       	movw	r16, r22
    3cca:	0f 5f       	subi	r16, 0xFF	; 255
    3ccc:	1f 4f       	sbci	r17, 0xFF	; 255
    3cce:	d1 2c       	mov	r13, r1
    3cd0:	20 e0       	ldi	r18, 0x00	; 0
                // if a number then start
                if (bufpos < 3 && isdigit(*str)){
    3cd2:	23 30       	cpi	r18, 0x03	; 3
    3cd4:	78 f4       	brcc	.+30     	; 0x3cf4 <parse_ip+0x5c>
    3cd6:	49 2f       	mov	r20, r25
    3cd8:	50 e0       	ldi	r21, 0x00	; 0
    3cda:	40 53       	subi	r20, 0x30	; 48
    3cdc:	51 09       	sbc	r21, r1
    3cde:	4a 30       	cpi	r20, 0x0A	; 10
    3ce0:	51 05       	cpc	r21, r1
    3ce2:	40 f4       	brcc	.+16     	; 0x3cf4 <parse_ip+0x5c>
                        strbuf[bufpos]=*str; // copy
    3ce4:	e1 e0       	ldi	r30, 0x01	; 1
    3ce6:	f0 e0       	ldi	r31, 0x00	; 0
    3ce8:	ec 0f       	add	r30, r28
    3cea:	fd 1f       	adc	r31, r29
    3cec:	e2 0f       	add	r30, r18
    3cee:	f1 1d       	adc	r31, r1
    3cf0:	90 83       	st	Z, r25
                        bufpos++;
    3cf2:	2f 5f       	subi	r18, 0xFF	; 255
                }
                if (bufpos && *str == '.'){
    3cf4:	22 23       	and	r18, r18
    3cf6:	a1 f0       	breq	.+40     	; 0x3d20 <parse_ip+0x88>
    3cf8:	9e 32       	cpi	r25, 0x2E	; 46
    3cfa:	91 f4       	brne	.+36     	; 0x3d20 <parse_ip+0x88>
                        strbuf[bufpos]='\0';
    3cfc:	e1 e0       	ldi	r30, 0x01	; 1
    3cfe:	f0 e0       	ldi	r31, 0x00	; 0
    3d00:	ec 0f       	add	r30, r28
    3d02:	fd 1f       	adc	r31, r29
    3d04:	e2 0f       	add	r30, r18
    3d06:	f1 1d       	adc	r31, r1
    3d08:	10 82       	st	Z, r1
                        ip_byte_str[i]=(atoi(strbuf)&0xff);
    3d0a:	57 01       	movw	r10, r14
    3d0c:	ad 0c       	add	r10, r13
    3d0e:	b1 1c       	adc	r11, r1
    3d10:	ce 01       	movw	r24, r28
    3d12:	01 96       	adiw	r24, 0x01	; 1
    3d14:	0e 94 1e 44 	call	0x883c	; 0x883c <atoi>
    3d18:	f5 01       	movw	r30, r10
    3d1a:	80 83       	st	Z, r24
                        i++;
    3d1c:	d3 94       	inc	r13
                        bufpos=0;
    3d1e:	20 e0       	ldi	r18, 0x00	; 0
        while(i<4){
                ip_byte_str[i]=0;
                i++;
        }
        i=0;
        while(*str && i<4){
    3d20:	d8 01       	movw	r26, r16
    3d22:	9d 91       	ld	r25, X+
    3d24:	8d 01       	movw	r16, r26
    3d26:	99 23       	and	r25, r25
    3d28:	19 f0       	breq	.+6      	; 0x3d30 <parse_ip+0x98>
    3d2a:	b3 e0       	ldi	r27, 0x03	; 3
    3d2c:	bd 15       	cp	r27, r13
    3d2e:	88 f6       	brcc	.-94     	; 0x3cd2 <parse_ip+0x3a>
                        i++;
                        bufpos=0;
                }
                str++;
        }
        if (i==3){ // must have read the first componets of the IP
    3d30:	e3 e0       	ldi	r30, 0x03	; 3
    3d32:	de 12       	cpse	r13, r30
    3d34:	12 c0       	rjmp	.+36     	; 0x3d5a <parse_ip+0xc2>
                strbuf[bufpos]='\0';
    3d36:	e1 e0       	ldi	r30, 0x01	; 1
    3d38:	f0 e0       	ldi	r31, 0x00	; 0
    3d3a:	ec 0f       	add	r30, r28
    3d3c:	fd 1f       	adc	r31, r29
    3d3e:	e2 0f       	add	r30, r18
    3d40:	f1 1d       	adc	r31, r1
    3d42:	10 82       	st	Z, r1
                ip_byte_str[i]=(atoi(strbuf)&0xff);
    3d44:	ce 01       	movw	r24, r28
    3d46:	01 96       	adiw	r24, 0x01	; 1
    3d48:	0e 94 1e 44 	call	0x883c	; 0x883c <atoi>
    3d4c:	d7 01       	movw	r26, r14
    3d4e:	13 96       	adiw	r26, 0x03	; 3
    3d50:	8c 93       	st	X, r24
                return(0);
    3d52:	80 e0       	ldi	r24, 0x00	; 0
    3d54:	03 c0       	rjmp	.+6      	; 0x3d5c <parse_ip+0xc4>
        }
        return(1);
    3d56:	81 e0       	ldi	r24, 0x01	; 1
    3d58:	01 c0       	rjmp	.+2      	; 0x3d5c <parse_ip+0xc4>
    3d5a:	81 e0       	ldi	r24, 0x01	; 1
}
    3d5c:	0f 90       	pop	r0
    3d5e:	0f 90       	pop	r0
    3d60:	0f 90       	pop	r0
    3d62:	0f 90       	pop	r0
    3d64:	df 91       	pop	r29
    3d66:	cf 91       	pop	r28
    3d68:	1f 91       	pop	r17
    3d6a:	0f 91       	pop	r16
    3d6c:	ff 90       	pop	r15
    3d6e:	ef 90       	pop	r14
    3d70:	df 90       	pop	r13
    3d72:	bf 90       	pop	r11
    3d74:	af 90       	pop	r10
    3d76:	08 95       	ret

00003d78 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    3d78:	cf 93       	push	r28
    3d7a:	df 93       	push	r29
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

#if _WORD_ACCESS == 1
	while (cnt >= sizeof (int)) {
    3d7c:	42 30       	cpi	r20, 0x02	; 2
    3d7e:	51 05       	cpc	r21, r1
    3d80:	c0 f0       	brcs	.+48     	; 0x3db2 <mem_cpy+0x3a>
    3d82:	db 01       	movw	r26, r22
    3d84:	fc 01       	movw	r30, r24
    3d86:	9a 01       	movw	r18, r20
		*(int*)d = *(int*)s;
    3d88:	cd 91       	ld	r28, X+
    3d8a:	dd 91       	ld	r29, X+
    3d8c:	c1 93       	st	Z+, r28
    3d8e:	d1 93       	st	Z+, r29
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
    3d90:	22 50       	subi	r18, 0x02	; 2
    3d92:	31 09       	sbc	r19, r1
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

#if _WORD_ACCESS == 1
	while (cnt >= sizeof (int)) {
    3d94:	22 30       	cpi	r18, 0x02	; 2
    3d96:	31 05       	cpc	r19, r1
    3d98:	b8 f7       	brcc	.-18     	; 0x3d88 <mem_cpy+0x10>
    3d9a:	9a 01       	movw	r18, r20
    3d9c:	22 50       	subi	r18, 0x02	; 2
    3d9e:	31 09       	sbc	r19, r1
    3da0:	2e 7f       	andi	r18, 0xFE	; 254
    3da2:	2e 5f       	subi	r18, 0xFE	; 254
    3da4:	3f 4f       	sbci	r19, 0xFF	; 255
    3da6:	82 0f       	add	r24, r18
    3da8:	93 1f       	adc	r25, r19
    3daa:	62 0f       	add	r22, r18
    3dac:	73 1f       	adc	r23, r19
    3dae:	41 70       	andi	r20, 0x01	; 1
    3db0:	55 27       	eor	r21, r21
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
    3db2:	41 15       	cp	r20, r1
    3db4:	51 05       	cpc	r21, r1
    3db6:	49 f0       	breq	.+18     	; 0x3dca <mem_cpy+0x52>
    3db8:	db 01       	movw	r26, r22
    3dba:	fc 01       	movw	r30, r24
    3dbc:	48 0f       	add	r20, r24
    3dbe:	59 1f       	adc	r21, r25
		*d++ = *s++;
    3dc0:	9d 91       	ld	r25, X+
    3dc2:	91 93       	st	Z+, r25
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
    3dc4:	e4 17       	cp	r30, r20
    3dc6:	f5 07       	cpc	r31, r21
    3dc8:	d9 f7       	brne	.-10     	; 0x3dc0 <mem_cpy+0x48>
		*d++ = *s++;
}
    3dca:	df 91       	pop	r29
    3dcc:	cf 91       	pop	r28
    3dce:	08 95       	ret

00003dd0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
    3dd0:	cf 93       	push	r28
    3dd2:	df 93       	push	r29
    3dd4:	ec 01       	movw	r28, r24
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
    3dd6:	a8 81       	ld	r26, Y
    3dd8:	b9 81       	ldd	r27, Y+1	; 0x01
    3dda:	10 97       	sbiw	r26, 0x00	; 0
    3ddc:	f9 f0       	breq	.+62     	; 0x3e1c <get_ldnumber+0x4c>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
    3dde:	4c 91       	ld	r20, X
    3de0:	41 32       	cpi	r20, 0x21	; 33
    3de2:	58 f0       	brcs	.+22     	; 0x3dfa <get_ldnumber+0x2a>
    3de4:	4a 33       	cpi	r20, 0x3A	; 58
    3de6:	31 f1       	breq	.+76     	; 0x3e34 <get_ldnumber+0x64>
    3de8:	fd 01       	movw	r30, r26
    3dea:	31 96       	adiw	r30, 0x01	; 1
    3dec:	9f 01       	movw	r18, r30
    3dee:	91 91       	ld	r25, Z+
    3df0:	91 32       	cpi	r25, 0x21	; 33
    3df2:	28 f0       	brcs	.+10     	; 0x3dfe <get_ldnumber+0x2e>
    3df4:	9a 33       	cpi	r25, 0x3A	; 58
    3df6:	d1 f7       	brne	.-12     	; 0x3dec <get_ldnumber+0x1c>
    3df8:	04 c0       	rjmp	.+8      	; 0x3e02 <get_ldnumber+0x32>
    3dfa:	94 2f       	mov	r25, r20
    3dfc:	9d 01       	movw	r18, r26
		if (*tt == ':') {	/* If a ':' is exist in the path name */
    3dfe:	9a 33       	cpi	r25, 0x3A	; 58
    3e00:	81 f4       	brne	.+32     	; 0x3e22 <get_ldnumber+0x52>
			tp = *path;
			i = *tp++ - '0'; 
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
    3e02:	cd 01       	movw	r24, r26
    3e04:	01 96       	adiw	r24, 0x01	; 1
    3e06:	28 17       	cp	r18, r24
    3e08:	39 07       	cpc	r19, r25
    3e0a:	71 f4       	brne	.+28     	; 0x3e28 <get_ldnumber+0x58>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
    3e0c:	40 33       	cpi	r20, 0x30	; 48
    3e0e:	79 f4       	brne	.+30     	; 0x3e2e <get_ldnumber+0x5e>
					vol = (int)i;
					*path = ++tt;
    3e10:	12 96       	adiw	r26, 0x02	; 2
    3e12:	b9 83       	std	Y+1, r27	; 0x01
    3e14:	a8 83       	st	Y, r26
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
					vol = (int)i;
    3e16:	80 e0       	ldi	r24, 0x00	; 0
    3e18:	90 e0       	ldi	r25, 0x00	; 0
    3e1a:	0e c0       	rjmp	.+28     	; 0x3e38 <get_ldnumber+0x68>
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
    3e1c:	8f ef       	ldi	r24, 0xFF	; 255
    3e1e:	9f ef       	ldi	r25, 0xFF	; 255
    3e20:	0b c0       	rjmp	.+22     	; 0x3e38 <get_ldnumber+0x68>
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
    3e22:	80 e0       	ldi	r24, 0x00	; 0
    3e24:	90 e0       	ldi	r25, 0x00	; 0
    3e26:	08 c0       	rjmp	.+16     	; 0x3e38 <get_ldnumber+0x68>
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
    3e28:	8f ef       	ldi	r24, 0xFF	; 255
    3e2a:	9f ef       	ldi	r25, 0xFF	; 255
    3e2c:	05 c0       	rjmp	.+10     	; 0x3e38 <get_ldnumber+0x68>
    3e2e:	8f ef       	ldi	r24, 0xFF	; 255
    3e30:	9f ef       	ldi	r25, 0xFF	; 255
    3e32:	02 c0       	rjmp	.+4      	; 0x3e38 <get_ldnumber+0x68>
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
    3e34:	9d 01       	movw	r18, r26
    3e36:	e5 cf       	rjmp	.-54     	; 0x3e02 <get_ldnumber+0x32>
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
    3e38:	df 91       	pop	r29
    3e3a:	cf 91       	pop	r28
    3e3c:	08 95       	ret

00003e3e <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
    3e3e:	8f 92       	push	r8
    3e40:	9f 92       	push	r9
    3e42:	af 92       	push	r10
    3e44:	bf 92       	push	r11
    3e46:	cf 92       	push	r12
    3e48:	df 92       	push	r13
    3e4a:	ef 92       	push	r14
    3e4c:	ff 92       	push	r15
    3e4e:	0f 93       	push	r16
    3e50:	1f 93       	push	r17
    3e52:	cf 93       	push	r28
    3e54:	df 93       	push	r29
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;


	if (fs->wflag) {	/* Write back the sector if it is dirty */
    3e56:	fc 01       	movw	r30, r24
    3e58:	24 81       	ldd	r18, Z+4	; 0x04
    3e5a:	22 23       	and	r18, r18
    3e5c:	09 f4       	brne	.+2      	; 0x3e60 <sync_window+0x22>
    3e5e:	46 c0       	rjmp	.+140    	; 0x3eec <sync_window+0xae>
    3e60:	ec 01       	movw	r28, r24
		wsect = fs->winsect;	/* Current sector number */
    3e62:	c2 a4       	ldd	r12, Z+42	; 0x2a
    3e64:	d3 a4       	ldd	r13, Z+43	; 0x2b
    3e66:	e4 a4       	ldd	r14, Z+44	; 0x2c
    3e68:	f5 a4       	ldd	r15, Z+45	; 0x2d
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
    3e6a:	5c 01       	movw	r10, r24
    3e6c:	fe e2       	ldi	r31, 0x2E	; 46
    3e6e:	af 0e       	add	r10, r31
    3e70:	b1 1c       	adc	r11, r1
    3e72:	01 e0       	ldi	r16, 0x01	; 1
    3e74:	10 e0       	ldi	r17, 0x00	; 0
    3e76:	a7 01       	movw	r20, r14
    3e78:	96 01       	movw	r18, r12
    3e7a:	b5 01       	movw	r22, r10
    3e7c:	89 81       	ldd	r24, Y+1	; 0x01
    3e7e:	0e 94 be 31 	call	0x637c	; 0x637c <disk_write>
    3e82:	81 11       	cpse	r24, r1
    3e84:	35 c0       	rjmp	.+106    	; 0x3ef0 <sync_window+0xb2>
			res = FR_DISK_ERR;
		} else {
			fs->wflag = 0;
    3e86:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
    3e88:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3e8a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3e8c:	a8 a1       	ldd	r26, Y+32	; 0x20
    3e8e:	b9 a1       	ldd	r27, Y+33	; 0x21
    3e90:	b7 01       	movw	r22, r14
    3e92:	a6 01       	movw	r20, r12
    3e94:	48 1b       	sub	r20, r24
    3e96:	59 0b       	sbc	r21, r25
    3e98:	6a 0b       	sbc	r22, r26
    3e9a:	7b 0b       	sbc	r23, r27
    3e9c:	8e 89       	ldd	r24, Y+22	; 0x16
    3e9e:	9f 89       	ldd	r25, Y+23	; 0x17
    3ea0:	a8 8d       	ldd	r26, Y+24	; 0x18
    3ea2:	b9 8d       	ldd	r27, Y+25	; 0x19
    3ea4:	48 17       	cp	r20, r24
    3ea6:	59 07       	cpc	r21, r25
    3ea8:	6a 07       	cpc	r22, r26
    3eaa:	7b 07       	cpc	r23, r27
    3eac:	18 f5       	brcc	.+70     	; 0x3ef4 <sync_window+0xb6>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
    3eae:	8b 80       	ldd	r8, Y+3	; 0x03
    3eb0:	91 2c       	mov	r9, r1
    3eb2:	82 e0       	ldi	r24, 0x02	; 2
    3eb4:	88 16       	cp	r8, r24
    3eb6:	91 04       	cpc	r9, r1
    3eb8:	f8 f0       	brcs	.+62     	; 0x3ef8 <sync_window+0xba>
					wsect += fs->fsize;
    3eba:	8e 89       	ldd	r24, Y+22	; 0x16
    3ebc:	9f 89       	ldd	r25, Y+23	; 0x17
    3ebe:	a8 8d       	ldd	r26, Y+24	; 0x18
    3ec0:	b9 8d       	ldd	r27, Y+25	; 0x19
    3ec2:	c8 0e       	add	r12, r24
    3ec4:	d9 1e       	adc	r13, r25
    3ec6:	ea 1e       	adc	r14, r26
    3ec8:	fb 1e       	adc	r15, r27
					disk_write(fs->drv, fs->win, wsect, 1);
    3eca:	01 e0       	ldi	r16, 0x01	; 1
    3ecc:	10 e0       	ldi	r17, 0x00	; 0
    3ece:	a7 01       	movw	r20, r14
    3ed0:	96 01       	movw	r18, r12
    3ed2:	b5 01       	movw	r22, r10
    3ed4:	89 81       	ldd	r24, Y+1	; 0x01
    3ed6:	0e 94 be 31 	call	0x637c	; 0x637c <disk_write>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
			res = FR_DISK_ERR;
		} else {
			fs->wflag = 0;
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
    3eda:	e1 e0       	ldi	r30, 0x01	; 1
    3edc:	8e 1a       	sub	r8, r30
    3ede:	91 08       	sbc	r9, r1
    3ee0:	f1 e0       	ldi	r31, 0x01	; 1
    3ee2:	8f 16       	cp	r8, r31
    3ee4:	91 04       	cpc	r9, r1
    3ee6:	49 f7       	brne	.-46     	; 0x3eba <sync_window+0x7c>
	FATFS* fs		/* File system object */
)
{
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
    3ee8:	80 e0       	ldi	r24, 0x00	; 0
    3eea:	07 c0       	rjmp	.+14     	; 0x3efa <sync_window+0xbc>
    3eec:	80 e0       	ldi	r24, 0x00	; 0
    3eee:	05 c0       	rjmp	.+10     	; 0x3efa <sync_window+0xbc>


	if (fs->wflag) {	/* Write back the sector if it is dirty */
		wsect = fs->winsect;	/* Current sector number */
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
			res = FR_DISK_ERR;
    3ef0:	81 e0       	ldi	r24, 0x01	; 1
    3ef2:	03 c0       	rjmp	.+6      	; 0x3efa <sync_window+0xbc>
	FATFS* fs		/* File system object */
)
{
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
    3ef4:	80 e0       	ldi	r24, 0x00	; 0
    3ef6:	01 c0       	rjmp	.+2      	; 0x3efa <sync_window+0xbc>
    3ef8:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		}
	}
	return res;
}
    3efa:	df 91       	pop	r29
    3efc:	cf 91       	pop	r28
    3efe:	1f 91       	pop	r17
    3f00:	0f 91       	pop	r16
    3f02:	ff 90       	pop	r15
    3f04:	ef 90       	pop	r14
    3f06:	df 90       	pop	r13
    3f08:	cf 90       	pop	r12
    3f0a:	bf 90       	pop	r11
    3f0c:	af 90       	pop	r10
    3f0e:	9f 90       	pop	r9
    3f10:	8f 90       	pop	r8
    3f12:	08 95       	ret

00003f14 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)
{
    3f14:	8f 92       	push	r8
    3f16:	9f 92       	push	r9
    3f18:	af 92       	push	r10
    3f1a:	bf 92       	push	r11
    3f1c:	ff 92       	push	r15
    3f1e:	0f 93       	push	r16
    3f20:	1f 93       	push	r17
    3f22:	cf 93       	push	r28
    3f24:	df 93       	push	r29
    3f26:	ec 01       	movw	r28, r24
    3f28:	4a 01       	movw	r8, r20
    3f2a:	5b 01       	movw	r10, r22
	FRESULT res = FR_OK;


	if (sector != fs->winsect) {	/* Window offset changed? */
    3f2c:	8a a5       	ldd	r24, Y+42	; 0x2a
    3f2e:	9b a5       	ldd	r25, Y+43	; 0x2b
    3f30:	ac a5       	ldd	r26, Y+44	; 0x2c
    3f32:	bd a5       	ldd	r27, Y+45	; 0x2d
    3f34:	84 17       	cp	r24, r20
    3f36:	95 07       	cpc	r25, r21
    3f38:	a6 07       	cpc	r26, r22
    3f3a:	b7 07       	cpc	r27, r23
    3f3c:	e1 f0       	breq	.+56     	; 0x3f76 <move_window+0x62>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
    3f3e:	ce 01       	movw	r24, r28
    3f40:	7e df       	rcall	.-260    	; 0x3e3e <sync_window>
    3f42:	f8 2e       	mov	r15, r24
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
    3f44:	81 11       	cpse	r24, r1
    3f46:	18 c0       	rjmp	.+48     	; 0x3f78 <move_window+0x64>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
    3f48:	01 e0       	ldi	r16, 0x01	; 1
    3f4a:	10 e0       	ldi	r17, 0x00	; 0
    3f4c:	a5 01       	movw	r20, r10
    3f4e:	94 01       	movw	r18, r8
    3f50:	be 01       	movw	r22, r28
    3f52:	62 5d       	subi	r22, 0xD2	; 210
    3f54:	7f 4f       	sbci	r23, 0xFF	; 255
    3f56:	89 81       	ldd	r24, Y+1	; 0x01
    3f58:	0e 94 6c 31 	call	0x62d8	; 0x62d8 <disk_read>
    3f5c:	88 23       	and	r24, r24
    3f5e:	31 f0       	breq	.+12     	; 0x3f6c <move_window+0x58>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
				res = FR_DISK_ERR;
    3f60:	ff 24       	eor	r15, r15
    3f62:	f3 94       	inc	r15
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
    3f64:	88 24       	eor	r8, r8
    3f66:	8a 94       	dec	r8
    3f68:	98 2c       	mov	r9, r8
    3f6a:	54 01       	movw	r10, r8
				res = FR_DISK_ERR;
			}
			fs->winsect = sector;
    3f6c:	8a a6       	std	Y+42, r8	; 0x2a
    3f6e:	9b a6       	std	Y+43, r9	; 0x2b
    3f70:	ac a6       	std	Y+44, r10	; 0x2c
    3f72:	bd a6       	std	Y+45, r11	; 0x2d
    3f74:	01 c0       	rjmp	.+2      	; 0x3f78 <move_window+0x64>
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)
{
	FRESULT res = FR_OK;
    3f76:	f1 2c       	mov	r15, r1
			}
			fs->winsect = sector;
		}
	}
	return res;
}
    3f78:	8f 2d       	mov	r24, r15
    3f7a:	df 91       	pop	r29
    3f7c:	cf 91       	pop	r28
    3f7e:	1f 91       	pop	r17
    3f80:	0f 91       	pop	r16
    3f82:	ff 90       	pop	r15
    3f84:	bf 90       	pop	r11
    3f86:	af 90       	pop	r10
    3f88:	9f 90       	pop	r9
    3f8a:	8f 90       	pop	r8
    3f8c:	08 95       	ret

00003f8e <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    3f8e:	cf 93       	push	r28
    3f90:	df 93       	push	r29
    3f92:	ec 01       	movw	r28, r24
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
    3f94:	1c 82       	std	Y+4, r1	; 0x04
    3f96:	8f ef       	ldi	r24, 0xFF	; 255
    3f98:	9f ef       	ldi	r25, 0xFF	; 255
    3f9a:	dc 01       	movw	r26, r24
    3f9c:	8a a7       	std	Y+42, r24	; 0x2a
    3f9e:	9b a7       	std	Y+43, r25	; 0x2b
    3fa0:	ac a7       	std	Y+44, r26	; 0x2c
    3fa2:	bd a7       	std	Y+45, r27	; 0x2d
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
    3fa4:	ce 01       	movw	r24, r28
    3fa6:	b6 df       	rcall	.-148    	; 0x3f14 <move_window>
    3fa8:	81 11       	cpse	r24, r1
    3faa:	23 c0       	rjmp	.+70     	; 0x3ff2 <check_fs+0x64>
		return 3;

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
    3fac:	fe 01       	movw	r30, r28
    3fae:	e4 5d       	subi	r30, 0xD4	; 212
    3fb0:	fd 4f       	sbci	r31, 0xFD	; 253
    3fb2:	80 81       	ld	r24, Z
    3fb4:	91 81       	ldd	r25, Z+1	; 0x01
    3fb6:	85 35       	cpi	r24, 0x55	; 85
    3fb8:	9a 4a       	sbci	r25, 0xAA	; 170
    3fba:	e9 f4       	brne	.+58     	; 0x3ff6 <check_fs+0x68>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
    3fbc:	e8 5c       	subi	r30, 0xC8	; 200
    3fbe:	f1 40       	sbci	r31, 0x01	; 1
    3fc0:	80 81       	ld	r24, Z
    3fc2:	91 81       	ldd	r25, Z+1	; 0x01
    3fc4:	a2 81       	ldd	r26, Z+2	; 0x02
    3fc6:	b3 81       	ldd	r27, Z+3	; 0x03
    3fc8:	bb 27       	eor	r27, r27
    3fca:	86 34       	cpi	r24, 0x46	; 70
    3fcc:	91 44       	sbci	r25, 0x41	; 65
    3fce:	a4 45       	sbci	r26, 0x54	; 84
    3fd0:	b1 05       	cpc	r27, r1
    3fd2:	99 f0       	breq	.+38     	; 0x3ffa <check_fs+0x6c>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    3fd4:	c0 58       	subi	r28, 0x80	; 128
    3fd6:	df 4f       	sbci	r29, 0xFF	; 255
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
		return 3;
    3fd8:	48 81       	ld	r20, Y
    3fda:	59 81       	ldd	r21, Y+1	; 0x01
    3fdc:	6a 81       	ldd	r22, Y+2	; 0x02
    3fde:	7b 81       	ldd	r23, Y+3	; 0x03
    3fe0:	77 27       	eor	r23, r23
    3fe2:	81 e0       	ldi	r24, 0x01	; 1
    3fe4:	46 34       	cpi	r20, 0x46	; 70
    3fe6:	51 44       	sbci	r21, 0x41	; 65
    3fe8:	64 45       	sbci	r22, 0x54	; 84
    3fea:	71 05       	cpc	r23, r1
    3fec:	39 f4       	brne	.+14     	; 0x3ffc <check_fs+0x6e>
    3fee:	80 e0       	ldi	r24, 0x00	; 0
    3ff0:	05 c0       	rjmp	.+10     	; 0x3ffc <check_fs+0x6e>
    3ff2:	83 e0       	ldi	r24, 0x03	; 3
    3ff4:	03 c0       	rjmp	.+6      	; 0x3ffc <check_fs+0x6e>

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
    3ff6:	82 e0       	ldi	r24, 0x02	; 2
    3ff8:	01 c0       	rjmp	.+2      	; 0x3ffc <check_fs+0x6e>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
		return 0;
    3ffa:	80 e0       	ldi	r24, 0x00	; 0
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
		return 0;

	return 1;
}
    3ffc:	df 91       	pop	r29
    3ffe:	cf 91       	pop	r28
    4000:	08 95       	ret

00004002 <validate>:
)
{
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
    4002:	00 97       	sbiw	r24, 0x00	; 0
    4004:	c9 f0       	breq	.+50     	; 0x4038 <validate+0x36>
    4006:	dc 01       	movw	r26, r24
    4008:	ed 91       	ld	r30, X+
    400a:	fc 91       	ld	r31, X
    400c:	11 97       	sbiw	r26, 0x01	; 1
    400e:	30 97       	sbiw	r30, 0x00	; 0
    4010:	a9 f0       	breq	.+42     	; 0x403c <validate+0x3a>
    4012:	20 81       	ld	r18, Z
    4014:	22 23       	and	r18, r18
    4016:	a1 f0       	breq	.+40     	; 0x4040 <validate+0x3e>
    4018:	26 81       	ldd	r18, Z+6	; 0x06
    401a:	37 81       	ldd	r19, Z+7	; 0x07
    401c:	12 96       	adiw	r26, 0x02	; 2
    401e:	8d 91       	ld	r24, X+
    4020:	9c 91       	ld	r25, X
    4022:	13 97       	sbiw	r26, 0x03	; 3
    4024:	28 17       	cp	r18, r24
    4026:	39 07       	cpc	r19, r25
    4028:	69 f4       	brne	.+26     	; 0x4044 <validate+0x42>
		return FR_INVALID_OBJECT;

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
    402a:	81 81       	ldd	r24, Z+1	; 0x01
    402c:	0e 94 65 31 	call	0x62ca	; 0x62ca <disk_status>
    4030:	80 fd       	sbrc	r24, 0
    4032:	0a c0       	rjmp	.+20     	; 0x4048 <validate+0x46>
		return FR_NOT_READY;

	return FR_OK;
    4034:	80 e0       	ldi	r24, 0x00	; 0
    4036:	08 95       	ret
{
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
		return FR_INVALID_OBJECT;
    4038:	89 e0       	ldi	r24, 0x09	; 9
    403a:	08 95       	ret
    403c:	89 e0       	ldi	r24, 0x09	; 9
    403e:	08 95       	ret
    4040:	89 e0       	ldi	r24, 0x09	; 9
    4042:	08 95       	ret
    4044:	89 e0       	ldi	r24, 0x09	; 9
    4046:	08 95       	ret

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
		return FR_NOT_READY;
    4048:	83 e0       	ldi	r24, 0x03	; 3

	return FR_OK;
}
    404a:	08 95       	ret

0000404c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
    404c:	2f 92       	push	r2
    404e:	3f 92       	push	r3
    4050:	4f 92       	push	r4
    4052:	5f 92       	push	r5
    4054:	6f 92       	push	r6
    4056:	7f 92       	push	r7
    4058:	8f 92       	push	r8
    405a:	9f 92       	push	r9
    405c:	af 92       	push	r10
    405e:	bf 92       	push	r11
    4060:	cf 92       	push	r12
    4062:	df 92       	push	r13
    4064:	ef 92       	push	r14
    4066:	ff 92       	push	r15
    4068:	0f 93       	push	r16
    406a:	1f 93       	push	r17
    406c:	cf 93       	push	r28
    406e:	df 93       	push	r29
    4070:	cd b7       	in	r28, 0x3d	; 61
    4072:	de b7       	in	r29, 0x3e	; 62
    4074:	6d 97       	sbiw	r28, 0x1d	; 29
    4076:	0f b6       	in	r0, 0x3f	; 63
    4078:	f8 94       	cli
    407a:	de bf       	out	0x3e, r29	; 62
    407c:	0f be       	out	0x3f, r0	; 63
    407e:	cd bf       	out	0x3d, r28	; 61
    4080:	6c 01       	movw	r12, r24
    4082:	cb 01       	movw	r24, r22
    4084:	b4 2e       	mov	r11, r20
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
    4086:	d6 01       	movw	r26, r12
    4088:	1d 92       	st	X+, r1
    408a:	1c 92       	st	X, r1
	vol = get_ldnumber(path);
    408c:	a1 de       	rcall	.-702    	; 0x3dd0 <get_ldnumber>
    408e:	7c 01       	movw	r14, r24
	if (vol < 0) return FR_INVALID_DRIVE;
    4090:	99 23       	and	r25, r25
    4092:	0c f4       	brge	.+2      	; 0x4096 <find_volume+0x4a>
    4094:	02 c2       	rjmp	.+1028   	; 0x449a <__stack+0x39b>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
    4096:	fc 01       	movw	r30, r24
    4098:	ee 0f       	add	r30, r30
    409a:	ff 1f       	adc	r31, r31
    409c:	eb 5f       	subi	r30, 0xFB	; 251
    409e:	fe 4e       	sbci	r31, 0xEE	; 238
    40a0:	00 81       	ld	r16, Z
    40a2:	11 81       	ldd	r17, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    40a4:	01 15       	cp	r16, r1
    40a6:	11 05       	cpc	r17, r1
    40a8:	09 f4       	brne	.+2      	; 0x40ac <find_volume+0x60>
    40aa:	f9 c1       	rjmp	.+1010   	; 0x449e <__stack+0x39f>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
    40ac:	f6 01       	movw	r30, r12
    40ae:	11 83       	std	Z+1, r17	; 0x01
    40b0:	00 83       	st	Z, r16

	if (fs->fs_type) {					/* If the volume has been mounted */
    40b2:	d8 01       	movw	r26, r16
    40b4:	8c 91       	ld	r24, X
    40b6:	88 23       	and	r24, r24
    40b8:	69 f0       	breq	.+26     	; 0x40d4 <find_volume+0x88>
		stat = disk_status(fs->drv);
    40ba:	11 96       	adiw	r26, 0x01	; 1
    40bc:	8c 91       	ld	r24, X
    40be:	0e 94 65 31 	call	0x62ca	; 0x62ca <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
    40c2:	80 fd       	sbrc	r24, 0
    40c4:	07 c0       	rjmp	.+14     	; 0x40d4 <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
    40c6:	bb 20       	and	r11, r11
    40c8:	09 f4       	brne	.+2      	; 0x40cc <find_volume+0x80>
    40ca:	eb c1       	rjmp	.+982    	; 0x44a2 <__stack+0x3a3>
    40cc:	82 ff       	sbrs	r24, 2
    40ce:	eb c1       	rjmp	.+982    	; 0x44a6 <__stack+0x3a7>
				return FR_WRITE_PROTECTED;
    40d0:	8a e0       	ldi	r24, 0x0A	; 10
    40d2:	8b c2       	rjmp	.+1302   	; 0x45ea <__stack+0x4eb>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    40d4:	f8 01       	movw	r30, r16
    40d6:	10 82       	st	Z, r1
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    40d8:	e1 82       	std	Z+1, r14	; 0x01
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
    40da:	8e 2d       	mov	r24, r14
    40dc:	0e 94 ae 30 	call	0x615c	; 0x615c <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    40e0:	80 fd       	sbrc	r24, 0
    40e2:	e3 c1       	rjmp	.+966    	; 0x44aa <__stack+0x3ab>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    40e4:	bb 20       	and	r11, r11
    40e6:	09 f4       	brne	.+2      	; 0x40ea <find_volume+0x9e>
    40e8:	00 c2       	rjmp	.+1024   	; 0x44ea <__stack+0x3eb>
    40ea:	82 fd       	sbrc	r24, 2
    40ec:	e0 c1       	rjmp	.+960    	; 0x44ae <__stack+0x3af>
    40ee:	fd c1       	rjmp	.+1018   	; 0x44ea <__stack+0x3eb>
	bsect = 0;
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
		for (i = 0; i < 4; i++) {			/* Get partition offset */
			pt = fs->win + MBR_Table + i * SZ_PTE;
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
    40f0:	80 81       	ld	r24, Z
    40f2:	88 23       	and	r24, r24
    40f4:	29 f0       	breq	.+10     	; 0x4100 <__stack+0x1>
    40f6:	44 80       	ldd	r4, Z+4	; 0x04
    40f8:	55 80       	ldd	r5, Z+5	; 0x05
    40fa:	66 80       	ldd	r6, Z+6	; 0x06
    40fc:	77 80       	ldd	r7, Z+7	; 0x07
    40fe:	04 c0       	rjmp	.+8      	; 0x4108 <__stack+0x9>
    4100:	4e 2c       	mov	r4, r14
    4102:	5f 2c       	mov	r5, r15
    4104:	67 2e       	mov	r6, r23
    4106:	76 2e       	mov	r7, r22
    4108:	d9 01       	movw	r26, r18
    410a:	4d 92       	st	X+, r4
    410c:	5d 92       	st	X+, r5
    410e:	6d 92       	st	X+, r6
    4110:	7d 92       	st	X+, r7
    4112:	9d 01       	movw	r18, r26
    4114:	70 96       	adiw	r30, 0x10	; 16
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
		for (i = 0; i < 4; i++) {			/* Get partition offset */
    4116:	4e 17       	cp	r20, r30
    4118:	5f 07       	cpc	r21, r31
    411a:	51 f7       	brne	.-44     	; 0x40f0 <find_volume+0xa4>
    411c:	4e 01       	movw	r8, r28
    411e:	b1 e1       	ldi	r27, 0x11	; 17
    4120:	8b 0e       	add	r8, r27
    4122:	91 1c       	adc	r9, r1
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
    4124:	68 94       	set
    4126:	77 24       	eor	r7, r7
    4128:	71 f8       	bld	r7, 1
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
    412a:	f5 01       	movw	r30, r10
    412c:	c1 90       	ld	r12, Z+
    412e:	d1 90       	ld	r13, Z+
    4130:	e1 90       	ld	r14, Z+
    4132:	f1 90       	ld	r15, Z+
    4134:	5f 01       	movw	r10, r30
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
    4136:	c1 14       	cp	r12, r1
    4138:	d1 04       	cpc	r13, r1
    413a:	e1 04       	cpc	r14, r1
    413c:	f1 04       	cpc	r15, r1
    413e:	39 f0       	breq	.+14     	; 0x414e <__stack+0x4f>
    4140:	b7 01       	movw	r22, r14
    4142:	a6 01       	movw	r20, r12
    4144:	c8 01       	movw	r24, r16
    4146:	23 df       	rcall	.-442    	; 0x3f8e <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
    4148:	81 11       	cpse	r24, r1
    414a:	02 c0       	rjmp	.+4      	; 0x4150 <__stack+0x51>
    414c:	0d c0       	rjmp	.+26     	; 0x4168 <__stack+0x69>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
    414e:	87 2d       	mov	r24, r7
		} while (!LD2PT(vol) && fmt && ++i < 4);
    4150:	a8 14       	cp	r10, r8
    4152:	b9 04       	cpc	r11, r9
    4154:	51 f7       	brne	.-44     	; 0x412a <__stack+0x2b>
    4156:	03 c0       	rjmp	.+6      	; 0x415e <__stack+0x5f>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
    4158:	c1 2c       	mov	r12, r1
    415a:	d1 2c       	mov	r13, r1
    415c:	76 01       	movw	r14, r12
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
		} while (!LD2PT(vol) && fmt && ++i < 4);
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
    415e:	83 30       	cpi	r24, 0x03	; 3
    4160:	09 f4       	brne	.+2      	; 0x4164 <__stack+0x65>
    4162:	a7 c1       	rjmp	.+846    	; 0x44b2 <__stack+0x3b3>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    4164:	81 11       	cpse	r24, r1
    4166:	a7 c1       	rjmp	.+846    	; 0x44b6 <__stack+0x3b7>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
    4168:	d8 01       	movw	r26, r16
    416a:	d9 96       	adiw	r26, 0x39	; 57
    416c:	8d 91       	ld	r24, X+
    416e:	9c 91       	ld	r25, X
    4170:	da 97       	sbiw	r26, 0x3a	; 58
    4172:	81 15       	cp	r24, r1
    4174:	92 40       	sbci	r25, 0x02	; 2
    4176:	09 f0       	breq	.+2      	; 0x417a <__stack+0x7b>
    4178:	a0 c1       	rjmp	.+832    	; 0x44ba <__stack+0x3bb>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
    417a:	f8 01       	movw	r30, r16
    417c:	ec 5b       	subi	r30, 0xBC	; 188
    417e:	ff 4f       	sbci	r31, 0xFF	; 255
    4180:	40 80       	ld	r4, Z
    4182:	51 80       	ldd	r5, Z+1	; 0x01
    4184:	61 2c       	mov	r6, r1
    4186:	71 2c       	mov	r7, r1
	if (!fasize) fasize = LD_DWORD(fs->win + BPB_FATSz32);
    4188:	41 14       	cp	r4, r1
    418a:	51 04       	cpc	r5, r1
    418c:	61 04       	cpc	r6, r1
    418e:	71 04       	cpc	r7, r1
    4190:	29 f4       	brne	.+10     	; 0x419c <__stack+0x9d>
    4192:	3e 96       	adiw	r30, 0x0e	; 14
    4194:	40 80       	ld	r4, Z
    4196:	51 80       	ldd	r5, Z+1	; 0x01
    4198:	62 80       	ldd	r6, Z+2	; 0x02
    419a:	73 80       	ldd	r7, Z+3	; 0x03
	fs->fsize = fasize;
    419c:	f8 01       	movw	r30, r16
    419e:	46 8a       	std	Z+22, r4	; 0x16
    41a0:	57 8a       	std	Z+23, r5	; 0x17
    41a2:	60 8e       	std	Z+24, r6	; 0x18
    41a4:	71 8e       	std	Z+25, r7	; 0x19

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
    41a6:	a6 ad       	ldd	r26, Z+62	; 0x3e
    41a8:	a3 83       	std	Z+3, r26	; 0x03
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
    41aa:	8f ef       	ldi	r24, 0xFF	; 255
    41ac:	8a 0f       	add	r24, r26
    41ae:	82 30       	cpi	r24, 0x02	; 2
    41b0:	08 f0       	brcs	.+2      	; 0x41b4 <__stack+0xb5>
    41b2:	85 c1       	rjmp	.+778    	; 0x44be <__stack+0x3bf>
		return FR_NO_FILESYSTEM;
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */

	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
    41b4:	f3 ad       	ldd	r31, Z+59	; 0x3b
    41b6:	f9 8b       	std	Y+17, r31	; 0x11
    41b8:	2f 2f       	mov	r18, r31
    41ba:	f8 01       	movw	r30, r16
    41bc:	22 83       	std	Z+2, r18	; 0x02
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
    41be:	22 23       	and	r18, r18
    41c0:	09 f4       	brne	.+2      	; 0x41c4 <__stack+0xc5>
    41c2:	7f c1       	rjmp	.+766    	; 0x44c2 <__stack+0x3c3>
    41c4:	82 2f       	mov	r24, r18
    41c6:	90 e0       	ldi	r25, 0x00	; 0
    41c8:	9c 01       	movw	r18, r24
    41ca:	21 50       	subi	r18, 0x01	; 1
    41cc:	31 09       	sbc	r19, r1
    41ce:	82 23       	and	r24, r18
    41d0:	93 23       	and	r25, r19
    41d2:	89 2b       	or	r24, r25
    41d4:	09 f0       	breq	.+2      	; 0x41d8 <__stack+0xd9>
    41d6:	77 c1       	rjmp	.+750    	; 0x44c6 <__stack+0x3c7>
		return FR_NO_FILESYSTEM;

	fs->n_rootdir = LD_WORD(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
    41d8:	ff 96       	adiw	r30, 0x3f	; 63
    41da:	20 80       	ld	r2, Z
    41dc:	31 80       	ldd	r3, Z+1	; 0x01
    41de:	f8 01       	movw	r30, r16
    41e0:	31 86       	std	Z+9, r3	; 0x09
    41e2:	20 86       	std	Z+8, r2	; 0x08
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
    41e4:	c1 01       	movw	r24, r2
    41e6:	8f 70       	andi	r24, 0x0F	; 15
    41e8:	99 27       	eor	r25, r25
    41ea:	89 2b       	or	r24, r25
    41ec:	09 f0       	breq	.+2      	; 0x41f0 <__stack+0xf1>
    41ee:	6d c1       	rjmp	.+730    	; 0x44ca <__stack+0x3cb>
		return FR_NO_FILESYSTEM;

	tsect = LD_WORD(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
    41f0:	ef 5b       	subi	r30, 0xBF	; 191
    41f2:	ff 4f       	sbci	r31, 0xFF	; 255
    41f4:	80 80       	ld	r8, Z
    41f6:	91 80       	ldd	r9, Z+1	; 0x01
    41f8:	a1 2c       	mov	r10, r1
    41fa:	b1 2c       	mov	r11, r1
	if (!tsect) tsect = LD_DWORD(fs->win + BPB_TotSec32);
    41fc:	81 14       	cp	r8, r1
    41fe:	91 04       	cpc	r9, r1
    4200:	a1 04       	cpc	r10, r1
    4202:	b1 04       	cpc	r11, r1
    4204:	29 f4       	brne	.+10     	; 0x4210 <__stack+0x111>
    4206:	3d 96       	adiw	r30, 0x0d	; 13
    4208:	80 80       	ld	r8, Z
    420a:	91 80       	ldd	r9, Z+1	; 0x01
    420c:	a2 80       	ldd	r10, Z+2	; 0x02
    420e:	b3 80       	ldd	r11, Z+3	; 0x03

	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
    4210:	f8 01       	movw	r30, r16
    4212:	04 ac       	ldd	r0, Z+60	; 0x3c
    4214:	f5 ad       	ldd	r31, Z+61	; 0x3d
    4216:	e0 2d       	mov	r30, r0
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
    4218:	30 97       	sbiw	r30, 0x00	; 0
    421a:	09 f4       	brne	.+2      	; 0x421e <__stack+0x11f>
    421c:	58 c1       	rjmp	.+688    	; 0x44ce <__stack+0x3cf>
	fs->fsize = fasize;

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
		return FR_NO_FILESYSTEM;
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
    421e:	b0 e0       	ldi	r27, 0x00	; 0
    4220:	a3 01       	movw	r20, r6
    4222:	92 01       	movw	r18, r4
    4224:	0e 94 e4 40 	call	0x81c8	; 0x81c8 <__muluhisi3>
    4228:	6a 8f       	std	Y+26, r22	; 0x1a
    422a:	7b 8f       	std	Y+27, r23	; 0x1b
    422c:	8c 8f       	std	Y+28, r24	; 0x1c
    422e:	9d 8f       	std	Y+29, r25	; 0x1d

	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
    4230:	9f 01       	movw	r18, r30
    4232:	40 e0       	ldi	r20, 0x00	; 0
    4234:	50 e0       	ldi	r21, 0x00	; 0
    4236:	2e 8b       	std	Y+22, r18	; 0x16
    4238:	3f 8b       	std	Y+23, r19	; 0x17
    423a:	48 8f       	std	Y+24, r20	; 0x18
    423c:	59 8f       	std	Y+25, r21	; 0x19
    423e:	c1 01       	movw	r24, r2
    4240:	92 95       	swap	r25
    4242:	82 95       	swap	r24
    4244:	8f 70       	andi	r24, 0x0F	; 15
    4246:	89 27       	eor	r24, r25
    4248:	9f 70       	andi	r25, 0x0F	; 15
    424a:	89 27       	eor	r24, r25
    424c:	28 0f       	add	r18, r24
    424e:	39 1f       	adc	r19, r25
    4250:	41 1d       	adc	r20, r1
    4252:	51 1d       	adc	r21, r1
    4254:	da 01       	movw	r26, r20
    4256:	c9 01       	movw	r24, r18
    4258:	2a 8d       	ldd	r18, Y+26	; 0x1a
    425a:	3b 8d       	ldd	r19, Y+27	; 0x1b
    425c:	4c 8d       	ldd	r20, Y+28	; 0x1c
    425e:	5d 8d       	ldd	r21, Y+29	; 0x1d
    4260:	28 0f       	add	r18, r24
    4262:	39 1f       	adc	r19, r25
    4264:	4a 1f       	adc	r20, r26
    4266:	5b 1f       	adc	r21, r27
    4268:	2a 8b       	std	Y+18, r18	; 0x12
    426a:	3b 8b       	std	Y+19, r19	; 0x13
    426c:	4c 8b       	std	Y+20, r20	; 0x14
    426e:	5d 8b       	std	Y+21, r21	; 0x15
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    4270:	82 16       	cp	r8, r18
    4272:	93 06       	cpc	r9, r19
    4274:	a4 06       	cpc	r10, r20
    4276:	b5 06       	cpc	r11, r21
    4278:	08 f4       	brcc	.+2      	; 0x427c <__stack+0x17d>
    427a:	2b c1       	rjmp	.+598    	; 0x44d2 <__stack+0x3d3>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    427c:	c5 01       	movw	r24, r10
    427e:	b4 01       	movw	r22, r8
    4280:	62 1b       	sub	r22, r18
    4282:	73 0b       	sbc	r23, r19
    4284:	84 0b       	sbc	r24, r20
    4286:	95 0b       	sbc	r25, r21
    4288:	e9 89       	ldd	r30, Y+17	; 0x11
    428a:	2e 2f       	mov	r18, r30
    428c:	30 e0       	ldi	r19, 0x00	; 0
    428e:	40 e0       	ldi	r20, 0x00	; 0
    4290:	50 e0       	ldi	r21, 0x00	; 0
    4292:	0e 94 aa 40 	call	0x8154	; 0x8154 <__udivmodsi4>
    4296:	da 01       	movw	r26, r20
    4298:	c9 01       	movw	r24, r18
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    429a:	21 15       	cp	r18, r1
    429c:	31 05       	cpc	r19, r1
    429e:	41 05       	cpc	r20, r1
    42a0:	51 05       	cpc	r21, r1
    42a2:	09 f4       	brne	.+2      	; 0x42a6 <__stack+0x1a7>
    42a4:	18 c1       	rjmp	.+560    	; 0x44d6 <__stack+0x3d7>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    42a6:	26 3f       	cpi	r18, 0xF6	; 246
    42a8:	ff e0       	ldi	r31, 0x0F	; 15
    42aa:	3f 07       	cpc	r19, r31
    42ac:	41 05       	cpc	r20, r1
    42ae:	51 05       	cpc	r21, r1
    42b0:	18 f0       	brcs	.+6      	; 0x42b8 <__stack+0x1b9>
    42b2:	e2 e0       	ldi	r30, 0x02	; 2
    42b4:	e9 8b       	std	Y+17, r30	; 0x11
    42b6:	02 c0       	rjmp	.+4      	; 0x42bc <__stack+0x1bd>
	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
    42b8:	f1 e0       	ldi	r31, 0x01	; 1
    42ba:	f9 8b       	std	Y+17, r31	; 0x11
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    42bc:	86 3f       	cpi	r24, 0xF6	; 246
    42be:	9f 4f       	sbci	r25, 0xFF	; 255
    42c0:	a1 05       	cpc	r26, r1
    42c2:	b1 05       	cpc	r27, r1
    42c4:	08 f0       	brcs	.+2      	; 0x42c8 <__stack+0x1c9>
    42c6:	28 c1       	rjmp	.+592    	; 0x4518 <__stack+0x419>

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    42c8:	49 01       	movw	r8, r18
    42ca:	5a 01       	movw	r10, r20
    42cc:	82 e0       	ldi	r24, 0x02	; 2
    42ce:	88 0e       	add	r8, r24
    42d0:	91 1c       	adc	r9, r1
    42d2:	a1 1c       	adc	r10, r1
    42d4:	b1 1c       	adc	r11, r1
    42d6:	d8 01       	movw	r26, r16
    42d8:	52 96       	adiw	r26, 0x12	; 18
    42da:	8d 92       	st	X+, r8
    42dc:	9d 92       	st	X+, r9
    42de:	ad 92       	st	X+, r10
    42e0:	bc 92       	st	X, r11
    42e2:	55 97       	sbiw	r26, 0x15	; 21
	fs->volbase = bsect;								/* Volume start sector */
    42e4:	f8 01       	movw	r30, r16
    42e6:	c2 8e       	std	Z+26, r12	; 0x1a
    42e8:	d3 8e       	std	Z+27, r13	; 0x1b
    42ea:	e4 8e       	std	Z+28, r14	; 0x1c
    42ec:	f5 8e       	std	Z+29, r15	; 0x1d
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    42ee:	8e 89       	ldd	r24, Y+22	; 0x16
    42f0:	9f 89       	ldd	r25, Y+23	; 0x17
    42f2:	a8 8d       	ldd	r26, Y+24	; 0x18
    42f4:	b9 8d       	ldd	r27, Y+25	; 0x19
    42f6:	8c 0d       	add	r24, r12
    42f8:	9d 1d       	adc	r25, r13
    42fa:	ae 1d       	adc	r26, r14
    42fc:	bf 1d       	adc	r27, r15
    42fe:	86 8f       	std	Z+30, r24	; 0x1e
    4300:	97 8f       	std	Z+31, r25	; 0x1f
    4302:	a0 a3       	std	Z+32, r26	; 0x20
    4304:	b1 a3       	std	Z+33, r27	; 0x21
	fs->database = bsect + sysect;						/* Data start sector */
    4306:	4a 89       	ldd	r20, Y+18	; 0x12
    4308:	5b 89       	ldd	r21, Y+19	; 0x13
    430a:	6c 89       	ldd	r22, Y+20	; 0x14
    430c:	7d 89       	ldd	r23, Y+21	; 0x15
    430e:	4c 0d       	add	r20, r12
    4310:	5d 1d       	adc	r21, r13
    4312:	6e 1d       	adc	r22, r14
    4314:	7f 1d       	adc	r23, r15
    4316:	46 a3       	std	Z+38, r20	; 0x26
    4318:	57 a3       	std	Z+39, r21	; 0x27
    431a:	60 a7       	std	Z+40, r22	; 0x28
    431c:	71 a7       	std	Z+41, r23	; 0x29
	if (fmt == FS_FAT32) {
    431e:	f9 89       	ldd	r31, Y+17	; 0x11
    4320:	f3 30       	cpi	r31, 0x03	; 3
    4322:	69 f5       	brne	.+90     	; 0x437e <__stack+0x27f>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    4324:	23 28       	or	r2, r3
    4326:	09 f0       	breq	.+2      	; 0x432a <__stack+0x22b>
    4328:	d8 c0       	rjmp	.+432    	; 0x44da <__stack+0x3db>
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
    432a:	f8 01       	movw	r30, r16
    432c:	e6 5a       	subi	r30, 0xA6	; 166
    432e:	ff 4f       	sbci	r31, 0xFF	; 255
    4330:	80 81       	ld	r24, Z
    4332:	91 81       	ldd	r25, Z+1	; 0x01
    4334:	a2 81       	ldd	r26, Z+2	; 0x02
    4336:	b3 81       	ldd	r27, Z+3	; 0x03
    4338:	f8 01       	movw	r30, r16
    433a:	82 a3       	std	Z+34, r24	; 0x22
    433c:	93 a3       	std	Z+35, r25	; 0x23
    433e:	a4 a3       	std	Z+36, r26	; 0x24
    4340:	b5 a3       	std	Z+37, r27	; 0x25
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
    4342:	88 0c       	add	r8, r8
    4344:	99 1c       	adc	r9, r9
    4346:	aa 1c       	adc	r10, r10
    4348:	bb 1c       	adc	r11, r11
    434a:	88 0c       	add	r8, r8
    434c:	99 1c       	adc	r9, r9
    434e:	aa 1c       	adc	r10, r10
    4350:	bb 1c       	adc	r11, r11
    4352:	ff ef       	ldi	r31, 0xFF	; 255
    4354:	8f 0e       	add	r8, r31
    4356:	f1 e0       	ldi	r31, 0x01	; 1
    4358:	9f 1e       	adc	r9, r31
    435a:	a1 1c       	adc	r10, r1
    435c:	b1 1c       	adc	r11, r1
    435e:	07 2e       	mov	r0, r23
    4360:	79 e0       	ldi	r23, 0x09	; 9
    4362:	b6 94       	lsr	r11
    4364:	a7 94       	ror	r10
    4366:	97 94       	ror	r9
    4368:	87 94       	ror	r8
    436a:	7a 95       	dec	r23
    436c:	d1 f7       	brne	.-12     	; 0x4362 <__stack+0x263>
    436e:	70 2d       	mov	r23, r0
    4370:	48 14       	cp	r4, r8
    4372:	59 04       	cpc	r5, r9
    4374:	6a 04       	cpc	r6, r10
    4376:	7b 04       	cpc	r7, r11
    4378:	08 f4       	brcc	.+2      	; 0x437c <__stack+0x27d>
    437a:	b1 c0       	rjmp	.+354    	; 0x44de <__stack+0x3df>
    437c:	f9 c0       	rjmp	.+498    	; 0x4570 <__stack+0x471>
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    437e:	23 28       	or	r2, r3
    4380:	09 f4       	brne	.+2      	; 0x4384 <__stack+0x285>
    4382:	af c0       	rjmp	.+350    	; 0x44e2 <__stack+0x3e3>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    4384:	2a 8d       	ldd	r18, Y+26	; 0x1a
    4386:	3b 8d       	ldd	r19, Y+27	; 0x1b
    4388:	4c 8d       	ldd	r20, Y+28	; 0x1c
    438a:	5d 8d       	ldd	r21, Y+29	; 0x1d
    438c:	82 0f       	add	r24, r18
    438e:	93 1f       	adc	r25, r19
    4390:	a4 1f       	adc	r26, r20
    4392:	b5 1f       	adc	r27, r21
    4394:	f8 01       	movw	r30, r16
    4396:	82 a3       	std	Z+34, r24	; 0x22
    4398:	93 a3       	std	Z+35, r25	; 0x23
    439a:	a4 a3       	std	Z+36, r26	; 0x24
    439c:	b5 a3       	std	Z+37, r27	; 0x25
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    439e:	f9 89       	ldd	r31, Y+17	; 0x11
    43a0:	f2 30       	cpi	r31, 0x02	; 2
    43a2:	29 f4       	brne	.+10     	; 0x43ae <__stack+0x2af>
    43a4:	88 0c       	add	r8, r8
    43a6:	99 1c       	adc	r9, r9
    43a8:	aa 1c       	adc	r10, r10
    43aa:	bb 1c       	adc	r11, r11
    43ac:	08 c1       	rjmp	.+528    	; 0x45be <__stack+0x4bf>
    43ae:	a3 e0       	ldi	r26, 0x03	; 3
    43b0:	b0 e0       	ldi	r27, 0x00	; 0
    43b2:	a5 01       	movw	r20, r10
    43b4:	94 01       	movw	r18, r8
    43b6:	0e 94 e4 40 	call	0x81c8	; 0x81c8 <__muluhisi3>
    43ba:	dc 01       	movw	r26, r24
    43bc:	cb 01       	movw	r24, r22
    43be:	b6 95       	lsr	r27
    43c0:	a7 95       	ror	r26
    43c2:	97 95       	ror	r25
    43c4:	87 95       	ror	r24
    43c6:	21 e0       	ldi	r18, 0x01	; 1
    43c8:	82 22       	and	r8, r18
    43ca:	99 24       	eor	r9, r9
    43cc:	aa 24       	eor	r10, r10
    43ce:	bb 24       	eor	r11, r11
    43d0:	88 0e       	add	r8, r24
    43d2:	99 1e       	adc	r9, r25
    43d4:	aa 1e       	adc	r10, r26
    43d6:	bb 1e       	adc	r11, r27
    43d8:	f2 c0       	rjmp	.+484    	; 0x45be <__stack+0x4bf>
	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
		&& LD_WORD(fs->win + BPB_FSInfo) == 1
		&& move_window(fs, bsect + 1) == FR_OK)
    43da:	b7 01       	movw	r22, r14
    43dc:	a6 01       	movw	r20, r12
    43de:	4f 5f       	subi	r20, 0xFF	; 255
    43e0:	5f 4f       	sbci	r21, 0xFF	; 255
    43e2:	6f 4f       	sbci	r22, 0xFF	; 255
    43e4:	7f 4f       	sbci	r23, 0xFF	; 255
    43e6:	c8 01       	movw	r24, r16
    43e8:	95 dd       	rcall	.-1238   	; 0x3f14 <move_window>
    43ea:	81 11       	cpse	r24, r1
    43ec:	39 c0       	rjmp	.+114    	; 0x4460 <__stack+0x361>
	{
		fs->fsi_flag = 0;
    43ee:	d8 01       	movw	r26, r16
    43f0:	15 96       	adiw	r26, 0x05	; 5
    43f2:	1c 92       	st	X, r1
		if (LD_WORD(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
    43f4:	f8 01       	movw	r30, r16
    43f6:	e4 5d       	subi	r30, 0xD4	; 212
    43f8:	fd 4f       	sbci	r31, 0xFD	; 253
    43fa:	80 81       	ld	r24, Z
    43fc:	91 81       	ldd	r25, Z+1	; 0x01
    43fe:	85 35       	cpi	r24, 0x55	; 85
    4400:	9a 4a       	sbci	r25, 0xAA	; 170
    4402:	89 f5       	brne	.+98     	; 0x4466 <__stack+0x367>
			&& LD_DWORD(fs->win + FSI_LeadSig) == 0x41615252
    4404:	f8 01       	movw	r30, r16
    4406:	86 a5       	ldd	r24, Z+46	; 0x2e
    4408:	97 a5       	ldd	r25, Z+47	; 0x2f
    440a:	a0 a9       	ldd	r26, Z+48	; 0x30
    440c:	b1 a9       	ldd	r27, Z+49	; 0x31
    440e:	82 35       	cpi	r24, 0x52	; 82
    4410:	92 45       	sbci	r25, 0x52	; 82
    4412:	a1 46       	sbci	r26, 0x61	; 97
    4414:	b1 44       	sbci	r27, 0x41	; 65
    4416:	51 f5       	brne	.+84     	; 0x446c <__stack+0x36d>
			&& LD_DWORD(fs->win + FSI_StrucSig) == 0x61417272)
    4418:	f8 01       	movw	r30, r16
    441a:	ee 5e       	subi	r30, 0xEE	; 238
    441c:	fd 4f       	sbci	r31, 0xFD	; 253
    441e:	80 81       	ld	r24, Z
    4420:	91 81       	ldd	r25, Z+1	; 0x01
    4422:	a2 81       	ldd	r26, Z+2	; 0x02
    4424:	b3 81       	ldd	r27, Z+3	; 0x03
    4426:	82 37       	cpi	r24, 0x72	; 114
    4428:	92 47       	sbci	r25, 0x72	; 114
    442a:	a1 44       	sbci	r26, 0x41	; 65
    442c:	b1 46       	sbci	r27, 0x61	; 97
    442e:	09 f5       	brne	.+66     	; 0x4472 <__stack+0x373>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win + FSI_Free_Count);
    4430:	34 96       	adiw	r30, 0x04	; 4
    4432:	80 81       	ld	r24, Z
    4434:	91 81       	ldd	r25, Z+1	; 0x01
    4436:	a2 81       	ldd	r26, Z+2	; 0x02
    4438:	b3 81       	ldd	r27, Z+3	; 0x03
    443a:	f8 01       	movw	r30, r16
    443c:	86 87       	std	Z+14, r24	; 0x0e
    443e:	97 87       	std	Z+15, r25	; 0x0f
    4440:	a0 8b       	std	Z+16, r26	; 0x10
    4442:	b1 8b       	std	Z+17, r27	; 0x11
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win + FSI_Nxt_Free);
    4444:	e6 5e       	subi	r30, 0xE6	; 230
    4446:	fd 4f       	sbci	r31, 0xFD	; 253
    4448:	80 81       	ld	r24, Z
    444a:	91 81       	ldd	r25, Z+1	; 0x01
    444c:	a2 81       	ldd	r26, Z+2	; 0x02
    444e:	b3 81       	ldd	r27, Z+3	; 0x03
    4450:	f8 01       	movw	r30, r16
    4452:	82 87       	std	Z+10, r24	; 0x0a
    4454:	93 87       	std	Z+11, r25	; 0x0b
    4456:	a4 87       	std	Z+12, r26	; 0x0c
    4458:	b5 87       	std	Z+13, r27	; 0x0d
    445a:	f3 e0       	ldi	r31, 0x03	; 3
    445c:	f9 8b       	std	Y+17, r31	; 0x11
    445e:	0b c0       	rjmp	.+22     	; 0x4476 <__stack+0x377>
    4460:	e3 e0       	ldi	r30, 0x03	; 3
    4462:	e9 8b       	std	Y+17, r30	; 0x11
    4464:	08 c0       	rjmp	.+16     	; 0x4476 <__stack+0x377>
    4466:	f3 e0       	ldi	r31, 0x03	; 3
    4468:	f9 8b       	std	Y+17, r31	; 0x11
    446a:	05 c0       	rjmp	.+10     	; 0x4476 <__stack+0x377>
    446c:	e3 e0       	ldi	r30, 0x03	; 3
    446e:	e9 8b       	std	Y+17, r30	; 0x11
    4470:	02 c0       	rjmp	.+4      	; 0x4476 <__stack+0x377>
    4472:	f3 e0       	ldi	r31, 0x03	; 3
    4474:	f9 8b       	std	Y+17, r31	; 0x11
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
    4476:	e9 89       	ldd	r30, Y+17	; 0x11
    4478:	d8 01       	movw	r26, r16
    447a:	ec 93       	st	X, r30
	fs->id = ++Fsid;	/* File system mount ID */
    447c:	80 91 03 11 	lds	r24, 0x1103	; 0x801103 <Fsid>
    4480:	90 91 04 11 	lds	r25, 0x1104	; 0x801104 <Fsid+0x1>
    4484:	01 96       	adiw	r24, 0x01	; 1
    4486:	90 93 04 11 	sts	0x1104, r25	; 0x801104 <Fsid+0x1>
    448a:	80 93 03 11 	sts	0x1103, r24	; 0x801103 <Fsid>
    448e:	17 96       	adiw	r26, 0x07	; 7
    4490:	9c 93       	st	X, r25
    4492:	8e 93       	st	-X, r24
    4494:	16 97       	sbiw	r26, 0x06	; 6
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
    4496:	80 e0       	ldi	r24, 0x00	; 0
    4498:	a8 c0       	rjmp	.+336    	; 0x45ea <__stack+0x4eb>


	/* Get logical drive number from the path name */
	*rfs = 0;
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
    449a:	8b e0       	ldi	r24, 0x0B	; 11
    449c:	a6 c0       	rjmp	.+332    	; 0x45ea <__stack+0x4eb>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    449e:	8c e0       	ldi	r24, 0x0C	; 12
    44a0:	a4 c0       	rjmp	.+328    	; 0x45ea <__stack+0x4eb>
	if (fs->fs_type) {					/* If the volume has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
    44a2:	80 e0       	ldi	r24, 0x00	; 0
    44a4:	a2 c0       	rjmp	.+324    	; 0x45ea <__stack+0x4eb>
    44a6:	80 e0       	ldi	r24, 0x00	; 0
    44a8:	a0 c0       	rjmp	.+320    	; 0x45ea <__stack+0x4eb>

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
    44aa:	83 e0       	ldi	r24, 0x03	; 3
    44ac:	9e c0       	rjmp	.+316    	; 0x45ea <__stack+0x4eb>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
    44ae:	8a e0       	ldi	r24, 0x0A	; 10
    44b0:	9c c0       	rjmp	.+312    	; 0x45ea <__stack+0x4eb>
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
		} while (!LD2PT(vol) && fmt && ++i < 4);
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
    44b2:	81 e0       	ldi	r24, 0x01	; 1
    44b4:	9a c0       	rjmp	.+308    	; 0x45ea <__stack+0x4eb>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    44b6:	8d e0       	ldi	r24, 0x0D	; 13
    44b8:	98 c0       	rjmp	.+304    	; 0x45ea <__stack+0x4eb>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
		return FR_NO_FILESYSTEM;
    44ba:	8d e0       	ldi	r24, 0x0D	; 13
    44bc:	96 c0       	rjmp	.+300    	; 0x45ea <__stack+0x4eb>
	if (!fasize) fasize = LD_DWORD(fs->win + BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
		return FR_NO_FILESYSTEM;
    44be:	8d e0       	ldi	r24, 0x0D	; 13
    44c0:	94 c0       	rjmp	.+296    	; 0x45ea <__stack+0x4eb>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */

	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
		return FR_NO_FILESYSTEM;
    44c2:	8d e0       	ldi	r24, 0x0D	; 13
    44c4:	92 c0       	rjmp	.+292    	; 0x45ea <__stack+0x4eb>
    44c6:	8d e0       	ldi	r24, 0x0D	; 13
    44c8:	90 c0       	rjmp	.+288    	; 0x45ea <__stack+0x4eb>

	fs->n_rootdir = LD_WORD(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
		return FR_NO_FILESYSTEM;
    44ca:	8d e0       	ldi	r24, 0x0D	; 13
    44cc:	8e c0       	rjmp	.+284    	; 0x45ea <__stack+0x4eb>

	tsect = LD_WORD(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
	if (!tsect) tsect = LD_DWORD(fs->win + BPB_TotSec32);

	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
    44ce:	8d e0       	ldi	r24, 0x0D	; 13
    44d0:	8c c0       	rjmp	.+280    	; 0x45ea <__stack+0x4eb>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    44d2:	8d e0       	ldi	r24, 0x0D	; 13
    44d4:	8a c0       	rjmp	.+276    	; 0x45ea <__stack+0x4eb>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    44d6:	8d e0       	ldi	r24, 0x0D	; 13
    44d8:	88 c0       	rjmp	.+272    	; 0x45ea <__stack+0x4eb>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
	fs->volbase = bsect;								/* Volume start sector */
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
	fs->database = bsect + sysect;						/* Data start sector */
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    44da:	8d e0       	ldi	r24, 0x0D	; 13
    44dc:	86 c0       	rjmp	.+268    	; 0x45ea <__stack+0x4eb>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
		return FR_NO_FILESYSTEM;
    44de:	8d e0       	ldi	r24, 0x0D	; 13
    44e0:	84 c0       	rjmp	.+264    	; 0x45ea <__stack+0x4eb>
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    44e2:	8d e0       	ldi	r24, 0x0D	; 13
    44e4:	82 c0       	rjmp	.+260    	; 0x45ea <__stack+0x4eb>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
		return FR_NO_FILESYSTEM;
    44e6:	8d e0       	ldi	r24, 0x0D	; 13
    44e8:	80 c0       	rjmp	.+256    	; 0x45ea <__stack+0x4eb>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
    44ea:	40 e0       	ldi	r20, 0x00	; 0
    44ec:	50 e0       	ldi	r21, 0x00	; 0
    44ee:	ba 01       	movw	r22, r20
    44f0:	c8 01       	movw	r24, r16
    44f2:	4d dd       	rcall	.-1382   	; 0x3f8e <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
    44f4:	81 30       	cpi	r24, 0x01	; 1
    44f6:	09 f0       	breq	.+2      	; 0x44fa <__stack+0x3fb>
    44f8:	2f ce       	rjmp	.-930    	; 0x4158 <__stack+0x59>
    44fa:	f8 01       	movw	r30, r16
    44fc:	e0 51       	subi	r30, 0x10	; 16
    44fe:	fe 4f       	sbci	r31, 0xFE	; 254
    4500:	9e 01       	movw	r18, r28
    4502:	2f 5f       	subi	r18, 0xFF	; 255
    4504:	3f 4f       	sbci	r19, 0xFF	; 255
    4506:	59 01       	movw	r10, r18
    4508:	a8 01       	movw	r20, r16
    450a:	40 5d       	subi	r20, 0xD0	; 208
    450c:	5d 4f       	sbci	r21, 0xFD	; 253
		for (i = 0; i < 4; i++) {			/* Get partition offset */
			pt = fs->win + MBR_Table + i * SZ_PTE;
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
    450e:	e1 2c       	mov	r14, r1
    4510:	f1 2c       	mov	r15, r1
    4512:	70 e0       	ldi	r23, 0x00	; 0
    4514:	60 e0       	ldi	r22, 0x00	; 0
    4516:	ec cd       	rjmp	.-1064   	; 0x40f0 <find_volume+0xa4>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    4518:	49 01       	movw	r8, r18
    451a:	5a 01       	movw	r10, r20
    451c:	62 e0       	ldi	r22, 0x02	; 2
    451e:	86 0e       	add	r8, r22
    4520:	91 1c       	adc	r9, r1
    4522:	a1 1c       	adc	r10, r1
    4524:	b1 1c       	adc	r11, r1
    4526:	d8 01       	movw	r26, r16
    4528:	52 96       	adiw	r26, 0x12	; 18
    452a:	8d 92       	st	X+, r8
    452c:	9d 92       	st	X+, r9
    452e:	ad 92       	st	X+, r10
    4530:	bc 92       	st	X, r11
    4532:	55 97       	sbiw	r26, 0x15	; 21
	fs->volbase = bsect;								/* Volume start sector */
    4534:	f8 01       	movw	r30, r16
    4536:	c2 8e       	std	Z+26, r12	; 0x1a
    4538:	d3 8e       	std	Z+27, r13	; 0x1b
    453a:	e4 8e       	std	Z+28, r14	; 0x1c
    453c:	f5 8e       	std	Z+29, r15	; 0x1d
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    453e:	8e 89       	ldd	r24, Y+22	; 0x16
    4540:	9f 89       	ldd	r25, Y+23	; 0x17
    4542:	a8 8d       	ldd	r26, Y+24	; 0x18
    4544:	b9 8d       	ldd	r27, Y+25	; 0x19
    4546:	8c 0d       	add	r24, r12
    4548:	9d 1d       	adc	r25, r13
    454a:	ae 1d       	adc	r26, r14
    454c:	bf 1d       	adc	r27, r15
    454e:	86 8f       	std	Z+30, r24	; 0x1e
    4550:	97 8f       	std	Z+31, r25	; 0x1f
    4552:	a0 a3       	std	Z+32, r26	; 0x20
    4554:	b1 a3       	std	Z+33, r27	; 0x21
	fs->database = bsect + sysect;						/* Data start sector */
    4556:	8a 89       	ldd	r24, Y+18	; 0x12
    4558:	9b 89       	ldd	r25, Y+19	; 0x13
    455a:	ac 89       	ldd	r26, Y+20	; 0x14
    455c:	bd 89       	ldd	r27, Y+21	; 0x15
    455e:	8c 0d       	add	r24, r12
    4560:	9d 1d       	adc	r25, r13
    4562:	ae 1d       	adc	r26, r14
    4564:	bf 1d       	adc	r27, r15
    4566:	86 a3       	std	Z+38, r24	; 0x26
    4568:	97 a3       	std	Z+39, r25	; 0x27
    456a:	a0 a7       	std	Z+40, r26	; 0x28
    456c:	b1 a7       	std	Z+41, r27	; 0x29
    456e:	da ce       	rjmp	.-588    	; 0x4324 <__stack+0x225>
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
    4570:	8f ef       	ldi	r24, 0xFF	; 255
    4572:	9f ef       	ldi	r25, 0xFF	; 255
    4574:	dc 01       	movw	r26, r24
    4576:	f8 01       	movw	r30, r16
    4578:	86 87       	std	Z+14, r24	; 0x0e
    457a:	97 87       	std	Z+15, r25	; 0x0f
    457c:	a0 8b       	std	Z+16, r26	; 0x10
    457e:	b1 8b       	std	Z+17, r27	; 0x11
    4580:	82 87       	std	Z+10, r24	; 0x0a
    4582:	93 87       	std	Z+11, r25	; 0x0b
    4584:	a4 87       	std	Z+12, r26	; 0x0c
    4586:	b5 87       	std	Z+13, r27	; 0x0d

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
    4588:	80 e8       	ldi	r24, 0x80	; 128
    458a:	85 83       	std	Z+5, r24	; 0x05
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
		&& LD_WORD(fs->win + BPB_FSInfo) == 1
    458c:	e2 5a       	subi	r30, 0xA2	; 162
    458e:	ff 4f       	sbci	r31, 0xFF	; 255
    4590:	80 81       	ld	r24, Z
    4592:	91 81       	ldd	r25, Z+1	; 0x01
    4594:	01 97       	sbiw	r24, 0x01	; 1
    4596:	09 f4       	brne	.+2      	; 0x459a <__stack+0x49b>
    4598:	20 cf       	rjmp	.-448    	; 0x43da <__stack+0x2db>
    459a:	f3 e0       	ldi	r31, 0x03	; 3
    459c:	f9 8b       	std	Y+17, r31	; 0x11
    459e:	6b cf       	rjmp	.-298    	; 0x4476 <__stack+0x377>
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
    45a0:	8f ef       	ldi	r24, 0xFF	; 255
    45a2:	9f ef       	ldi	r25, 0xFF	; 255
    45a4:	dc 01       	movw	r26, r24
    45a6:	f8 01       	movw	r30, r16
    45a8:	86 87       	std	Z+14, r24	; 0x0e
    45aa:	97 87       	std	Z+15, r25	; 0x0f
    45ac:	a0 8b       	std	Z+16, r26	; 0x10
    45ae:	b1 8b       	std	Z+17, r27	; 0x11
    45b0:	82 87       	std	Z+10, r24	; 0x0a
    45b2:	93 87       	std	Z+11, r25	; 0x0b
    45b4:	a4 87       	std	Z+12, r26	; 0x0c
    45b6:	b5 87       	std	Z+13, r27	; 0x0d

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
    45b8:	80 e8       	ldi	r24, 0x80	; 128
    45ba:	85 83       	std	Z+5, r24	; 0x05
    45bc:	5c cf       	rjmp	.-328    	; 0x4476 <__stack+0x377>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
    45be:	ff ef       	ldi	r31, 0xFF	; 255
    45c0:	8f 0e       	add	r8, r31
    45c2:	f1 e0       	ldi	r31, 0x01	; 1
    45c4:	9f 1e       	adc	r9, r31
    45c6:	a1 1c       	adc	r10, r1
    45c8:	b1 1c       	adc	r11, r1
    45ca:	07 2e       	mov	r0, r23
    45cc:	79 e0       	ldi	r23, 0x09	; 9
    45ce:	b6 94       	lsr	r11
    45d0:	a7 94       	ror	r10
    45d2:	97 94       	ror	r9
    45d4:	87 94       	ror	r8
    45d6:	7a 95       	dec	r23
    45d8:	d1 f7       	brne	.-12     	; 0x45ce <__stack+0x4cf>
    45da:	70 2d       	mov	r23, r0
    45dc:	48 14       	cp	r4, r8
    45de:	59 04       	cpc	r5, r9
    45e0:	6a 04       	cpc	r6, r10
    45e2:	7b 04       	cpc	r7, r11
    45e4:	08 f4       	brcc	.+2      	; 0x45e8 <__stack+0x4e9>
    45e6:	7f cf       	rjmp	.-258    	; 0x44e6 <__stack+0x3e7>
    45e8:	db cf       	rjmp	.-74     	; 0x45a0 <__stack+0x4a1>
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
}
    45ea:	6d 96       	adiw	r28, 0x1d	; 29
    45ec:	0f b6       	in	r0, 0x3f	; 63
    45ee:	f8 94       	cli
    45f0:	de bf       	out	0x3e, r29	; 62
    45f2:	0f be       	out	0x3f, r0	; 63
    45f4:	cd bf       	out	0x3d, r28	; 61
    45f6:	df 91       	pop	r29
    45f8:	cf 91       	pop	r28
    45fa:	1f 91       	pop	r17
    45fc:	0f 91       	pop	r16
    45fe:	ff 90       	pop	r15
    4600:	ef 90       	pop	r14
    4602:	df 90       	pop	r13
    4604:	cf 90       	pop	r12
    4606:	bf 90       	pop	r11
    4608:	af 90       	pop	r10
    460a:	9f 90       	pop	r9
    460c:	8f 90       	pop	r8
    460e:	7f 90       	pop	r7
    4610:	6f 90       	pop	r6
    4612:	5f 90       	pop	r5
    4614:	4f 90       	pop	r4
    4616:	3f 90       	pop	r3
    4618:	2f 90       	pop	r2
    461a:	08 95       	ret

0000461c <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    461c:	0f 93       	push	r16
    461e:	1f 93       	push	r17
    4620:	fc 01       	movw	r30, r24
	clst -= 2;
    4622:	9a 01       	movw	r18, r20
    4624:	ab 01       	movw	r20, r22
    4626:	22 50       	subi	r18, 0x02	; 2
    4628:	31 09       	sbc	r19, r1
    462a:	41 09       	sbc	r20, r1
    462c:	51 09       	sbc	r21, r1
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    462e:	82 89       	ldd	r24, Z+18	; 0x12
    4630:	93 89       	ldd	r25, Z+19	; 0x13
    4632:	a4 89       	ldd	r26, Z+20	; 0x14
    4634:	b5 89       	ldd	r27, Z+21	; 0x15
    4636:	02 97       	sbiw	r24, 0x02	; 2
    4638:	a1 09       	sbc	r26, r1
    463a:	b1 09       	sbc	r27, r1
    463c:	28 17       	cp	r18, r24
    463e:	39 07       	cpc	r19, r25
    4640:	4a 07       	cpc	r20, r26
    4642:	5b 07       	cpc	r21, r27
    4644:	68 f4       	brcc	.+26     	; 0x4660 <clust2sect+0x44>
	return clst * fs->csize + fs->database;
    4646:	a2 81       	ldd	r26, Z+2	; 0x02
    4648:	b0 e0       	ldi	r27, 0x00	; 0
    464a:	0e 94 e4 40 	call	0x81c8	; 0x81c8 <__muluhisi3>
    464e:	06 a1       	ldd	r16, Z+38	; 0x26
    4650:	17 a1       	ldd	r17, Z+39	; 0x27
    4652:	20 a5       	ldd	r18, Z+40	; 0x28
    4654:	31 a5       	ldd	r19, Z+41	; 0x29
    4656:	60 0f       	add	r22, r16
    4658:	71 1f       	adc	r23, r17
    465a:	82 1f       	adc	r24, r18
    465c:	93 1f       	adc	r25, r19
    465e:	03 c0       	rjmp	.+6      	; 0x4666 <clust2sect+0x4a>
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    4660:	60 e0       	ldi	r22, 0x00	; 0
    4662:	70 e0       	ldi	r23, 0x00	; 0
    4664:	cb 01       	movw	r24, r22
	return clst * fs->csize + fs->database;
}
    4666:	1f 91       	pop	r17
    4668:	0f 91       	pop	r16
    466a:	08 95       	ret

0000466c <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
    466c:	af 92       	push	r10
    466e:	bf 92       	push	r11
    4670:	cf 92       	push	r12
    4672:	df 92       	push	r13
    4674:	ef 92       	push	r14
    4676:	ff 92       	push	r15
    4678:	0f 93       	push	r16
    467a:	1f 93       	push	r17
    467c:	cf 93       	push	r28
    467e:	df 93       	push	r29
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    4680:	42 30       	cpi	r20, 0x02	; 2
    4682:	51 05       	cpc	r21, r1
    4684:	61 05       	cpc	r22, r1
    4686:	71 05       	cpc	r23, r1
    4688:	08 f4       	brcc	.+2      	; 0x468c <get_fat+0x20>
    468a:	aa c0       	rjmp	.+340    	; 0x47e0 <get_fat+0x174>
    468c:	fc 01       	movw	r30, r24
    468e:	c2 88       	ldd	r12, Z+18	; 0x12
    4690:	d3 88       	ldd	r13, Z+19	; 0x13
    4692:	e4 88       	ldd	r14, Z+20	; 0x14
    4694:	f5 88       	ldd	r15, Z+21	; 0x15
    4696:	4c 15       	cp	r20, r12
    4698:	5d 05       	cpc	r21, r13
    469a:	6e 05       	cpc	r22, r14
    469c:	7f 05       	cpc	r23, r15
    469e:	08 f0       	brcs	.+2      	; 0x46a2 <get_fat+0x36>
    46a0:	a4 c0       	rjmp	.+328    	; 0x47ea <get_fat+0x17e>
    46a2:	6a 01       	movw	r12, r20
    46a4:	7b 01       	movw	r14, r22
    46a6:	ec 01       	movw	r28, r24
		val = 1;	/* Internal error */

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */

		switch (fs->fs_type) {
    46a8:	80 81       	ld	r24, Z
    46aa:	82 30       	cpi	r24, 0x02	; 2
    46ac:	09 f4       	brne	.+2      	; 0x46b0 <get_fat+0x44>
    46ae:	4b c0       	rjmp	.+150    	; 0x4746 <get_fat+0xda>
    46b0:	83 30       	cpi	r24, 0x03	; 3
    46b2:	09 f4       	brne	.+2      	; 0x46b6 <get_fat+0x4a>
    46b4:	69 c0       	rjmp	.+210    	; 0x4788 <get_fat+0x11c>
    46b6:	81 30       	cpi	r24, 0x01	; 1
    46b8:	09 f0       	breq	.+2      	; 0x46bc <get_fat+0x50>
    46ba:	9c c0       	rjmp	.+312    	; 0x47f4 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
    46bc:	8a 01       	movw	r16, r20
    46be:	16 95       	lsr	r17
    46c0:	07 95       	ror	r16
    46c2:	04 0f       	add	r16, r20
    46c4:	15 1f       	adc	r17, r21
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    46c6:	c8 01       	movw	r24, r16
    46c8:	89 2f       	mov	r24, r25
    46ca:	99 27       	eor	r25, r25
    46cc:	86 95       	lsr	r24
    46ce:	46 8d       	ldd	r20, Z+30	; 0x1e
    46d0:	57 8d       	ldd	r21, Z+31	; 0x1f
    46d2:	60 a1       	ldd	r22, Z+32	; 0x20
    46d4:	71 a1       	ldd	r23, Z+33	; 0x21
    46d6:	48 0f       	add	r20, r24
    46d8:	59 1f       	adc	r21, r25
    46da:	61 1d       	adc	r22, r1
    46dc:	71 1d       	adc	r23, r1
    46de:	cf 01       	movw	r24, r30
    46e0:	19 dc       	rcall	.-1998   	; 0x3f14 <move_window>
    46e2:	81 11       	cpse	r24, r1
    46e4:	8c c0       	rjmp	.+280    	; 0x47fe <get_fat+0x192>
			wc = fs->win[bc++ % SS(fs)];
    46e6:	58 01       	movw	r10, r16
    46e8:	ff ef       	ldi	r31, 0xFF	; 255
    46ea:	af 1a       	sub	r10, r31
    46ec:	bf 0a       	sbc	r11, r31
    46ee:	11 70       	andi	r17, 0x01	; 1
    46f0:	fe 01       	movw	r30, r28
    46f2:	e0 0f       	add	r30, r16
    46f4:	f1 1f       	adc	r31, r17
    46f6:	16 a5       	ldd	r17, Z+46	; 0x2e
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    46f8:	c5 01       	movw	r24, r10
    46fa:	89 2f       	mov	r24, r25
    46fc:	99 27       	eor	r25, r25
    46fe:	86 95       	lsr	r24
    4700:	4e 8d       	ldd	r20, Y+30	; 0x1e
    4702:	5f 8d       	ldd	r21, Y+31	; 0x1f
    4704:	68 a1       	ldd	r22, Y+32	; 0x20
    4706:	79 a1       	ldd	r23, Y+33	; 0x21
    4708:	48 0f       	add	r20, r24
    470a:	59 1f       	adc	r21, r25
    470c:	61 1d       	adc	r22, r1
    470e:	71 1d       	adc	r23, r1
    4710:	ce 01       	movw	r24, r28
    4712:	00 dc       	rcall	.-2048   	; 0x3f14 <move_window>
    4714:	81 11       	cpse	r24, r1
    4716:	77 c0       	rjmp	.+238    	; 0x4806 <get_fat+0x19a>
			wc |= fs->win[bc % SS(fs)] << 8;
    4718:	81 e0       	ldi	r24, 0x01	; 1
    471a:	b8 22       	and	r11, r24
    471c:	ca 0d       	add	r28, r10
    471e:	db 1d       	adc	r29, r11
    4720:	8e a5       	ldd	r24, Y+46	; 0x2e
    4722:	61 2f       	mov	r22, r17
    4724:	70 e0       	ldi	r23, 0x00	; 0
    4726:	78 2b       	or	r23, r24
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
    4728:	c0 fe       	sbrs	r12, 0
    472a:	09 c0       	rjmp	.+18     	; 0x473e <get_fat+0xd2>
    472c:	72 95       	swap	r23
    472e:	62 95       	swap	r22
    4730:	6f 70       	andi	r22, 0x0F	; 15
    4732:	67 27       	eor	r22, r23
    4734:	7f 70       	andi	r23, 0x0F	; 15
    4736:	67 27       	eor	r22, r23
    4738:	80 e0       	ldi	r24, 0x00	; 0
    473a:	90 e0       	ldi	r25, 0x00	; 0
    473c:	6f c0       	rjmp	.+222    	; 0x481c <get_fat+0x1b0>
    473e:	7f 70       	andi	r23, 0x0F	; 15
    4740:	80 e0       	ldi	r24, 0x00	; 0
    4742:	90 e0       	ldi	r25, 0x00	; 0
    4744:	6b c0       	rjmp	.+214    	; 0x481c <get_fat+0x1b0>
			break;

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
    4746:	45 2f       	mov	r20, r21
    4748:	56 2f       	mov	r21, r22
    474a:	67 2f       	mov	r22, r23
    474c:	77 27       	eor	r23, r23
    474e:	86 8d       	ldd	r24, Z+30	; 0x1e
    4750:	97 8d       	ldd	r25, Z+31	; 0x1f
    4752:	a0 a1       	ldd	r26, Z+32	; 0x20
    4754:	b1 a1       	ldd	r27, Z+33	; 0x21
    4756:	48 0f       	add	r20, r24
    4758:	59 1f       	adc	r21, r25
    475a:	6a 1f       	adc	r22, r26
    475c:	7b 1f       	adc	r23, r27
    475e:	cf 01       	movw	r24, r30
    4760:	d9 db       	rcall	.-2126   	; 0x3f14 <move_window>
    4762:	81 11       	cpse	r24, r1
    4764:	54 c0       	rjmp	.+168    	; 0x480e <get_fat+0x1a2>
			p = &fs->win[clst * 2 % SS(fs)];
    4766:	b7 01       	movw	r22, r14
    4768:	a6 01       	movw	r20, r12
    476a:	44 0f       	add	r20, r20
    476c:	55 1f       	adc	r21, r21
    476e:	66 1f       	adc	r22, r22
    4770:	77 1f       	adc	r23, r23
    4772:	4e 7f       	andi	r20, 0xFE	; 254
    4774:	51 70       	andi	r21, 0x01	; 1
    4776:	66 27       	eor	r22, r22
    4778:	77 27       	eor	r23, r23
			val = LD_WORD(p);
    477a:	c4 0f       	add	r28, r20
    477c:	d5 1f       	adc	r29, r21
    477e:	6e a5       	ldd	r22, Y+46	; 0x2e
    4780:	7f a5       	ldd	r23, Y+47	; 0x2f
    4782:	80 e0       	ldi	r24, 0x00	; 0
    4784:	90 e0       	ldi	r25, 0x00	; 0
			break;
    4786:	4a c0       	rjmp	.+148    	; 0x481c <get_fat+0x1b0>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
    4788:	86 8d       	ldd	r24, Z+30	; 0x1e
    478a:	97 8d       	ldd	r25, Z+31	; 0x1f
    478c:	a0 a1       	ldd	r26, Z+32	; 0x20
    478e:	b1 a1       	ldd	r27, Z+33	; 0x21
    4790:	68 94       	set
    4792:	16 f8       	bld	r1, 6
    4794:	76 95       	lsr	r23
    4796:	67 95       	ror	r22
    4798:	57 95       	ror	r21
    479a:	47 95       	ror	r20
    479c:	16 94       	lsr	r1
    479e:	d1 f7       	brne	.-12     	; 0x4794 <get_fat+0x128>
    47a0:	48 0f       	add	r20, r24
    47a2:	59 1f       	adc	r21, r25
    47a4:	6a 1f       	adc	r22, r26
    47a6:	7b 1f       	adc	r23, r27
    47a8:	cf 01       	movw	r24, r30
    47aa:	b4 db       	rcall	.-2200   	; 0x3f14 <move_window>
    47ac:	81 11       	cpse	r24, r1
    47ae:	33 c0       	rjmp	.+102    	; 0x4816 <get_fat+0x1aa>
			p = &fs->win[clst * 4 % SS(fs)];
    47b0:	b7 01       	movw	r22, r14
    47b2:	a6 01       	movw	r20, r12
    47b4:	44 0f       	add	r20, r20
    47b6:	55 1f       	adc	r21, r21
    47b8:	66 1f       	adc	r22, r22
    47ba:	77 1f       	adc	r23, r23
    47bc:	44 0f       	add	r20, r20
    47be:	55 1f       	adc	r21, r21
    47c0:	66 1f       	adc	r22, r22
    47c2:	77 1f       	adc	r23, r23
    47c4:	4c 7f       	andi	r20, 0xFC	; 252
    47c6:	51 70       	andi	r21, 0x01	; 1
    47c8:	66 27       	eor	r22, r22
    47ca:	77 27       	eor	r23, r23
			val = LD_DWORD(p) & 0x0FFFFFFF;
    47cc:	c4 0f       	add	r28, r20
    47ce:	d5 1f       	adc	r29, r21
    47d0:	8e a5       	ldd	r24, Y+46	; 0x2e
    47d2:	9f a5       	ldd	r25, Y+47	; 0x2f
    47d4:	a8 a9       	ldd	r26, Y+48	; 0x30
    47d6:	b9 a9       	ldd	r27, Y+49	; 0x31
    47d8:	bc 01       	movw	r22, r24
    47da:	cd 01       	movw	r24, r26
    47dc:	9f 70       	andi	r25, 0x0F	; 15
			break;
    47de:	1e c0       	rjmp	.+60     	; 0x481c <get_fat+0x1b0>
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		val = 1;	/* Internal error */
    47e0:	61 e0       	ldi	r22, 0x01	; 1
    47e2:	70 e0       	ldi	r23, 0x00	; 0
    47e4:	80 e0       	ldi	r24, 0x00	; 0
    47e6:	90 e0       	ldi	r25, 0x00	; 0
    47e8:	19 c0       	rjmp	.+50     	; 0x481c <get_fat+0x1b0>
    47ea:	61 e0       	ldi	r22, 0x01	; 1
    47ec:	70 e0       	ldi	r23, 0x00	; 0
    47ee:	80 e0       	ldi	r24, 0x00	; 0
    47f0:	90 e0       	ldi	r25, 0x00	; 0
    47f2:	14 c0       	rjmp	.+40     	; 0x481c <get_fat+0x1b0>
			p = &fs->win[clst * 4 % SS(fs)];
			val = LD_DWORD(p) & 0x0FFFFFFF;
			break;

		default:
			val = 1;	/* Internal error */
    47f4:	61 e0       	ldi	r22, 0x01	; 1
    47f6:	70 e0       	ldi	r23, 0x00	; 0
    47f8:	80 e0       	ldi	r24, 0x00	; 0
    47fa:	90 e0       	ldi	r25, 0x00	; 0
    47fc:	0f c0       	rjmp	.+30     	; 0x481c <get_fat+0x1b0>

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		val = 1;	/* Internal error */

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    47fe:	6f ef       	ldi	r22, 0xFF	; 255
    4800:	7f ef       	ldi	r23, 0xFF	; 255
    4802:	cb 01       	movw	r24, r22
    4804:	0b c0       	rjmp	.+22     	; 0x481c <get_fat+0x1b0>
    4806:	6f ef       	ldi	r22, 0xFF	; 255
    4808:	7f ef       	ldi	r23, 0xFF	; 255
    480a:	cb 01       	movw	r24, r22
    480c:	07 c0       	rjmp	.+14     	; 0x481c <get_fat+0x1b0>
    480e:	6f ef       	ldi	r22, 0xFF	; 255
    4810:	7f ef       	ldi	r23, 0xFF	; 255
    4812:	cb 01       	movw	r24, r22
    4814:	03 c0       	rjmp	.+6      	; 0x481c <get_fat+0x1b0>
    4816:	6f ef       	ldi	r22, 0xFF	; 255
    4818:	7f ef       	ldi	r23, 0xFF	; 255
    481a:	cb 01       	movw	r24, r22
			val = 1;	/* Internal error */
		}
	}

	return val;
}
    481c:	df 91       	pop	r29
    481e:	cf 91       	pop	r28
    4820:	1f 91       	pop	r17
    4822:	0f 91       	pop	r16
    4824:	ff 90       	pop	r15
    4826:	ef 90       	pop	r14
    4828:	df 90       	pop	r13
    482a:	cf 90       	pop	r12
    482c:	bf 90       	pop	r11
    482e:	af 90       	pop	r10
    4830:	08 95       	ret

00004832 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
    4832:	af 92       	push	r10
    4834:	bf 92       	push	r11
    4836:	cf 92       	push	r12
    4838:	df 92       	push	r13
    483a:	ef 92       	push	r14
    483c:	ff 92       	push	r15
    483e:	0f 93       	push	r16
    4840:	1f 93       	push	r17
    4842:	cf 93       	push	r28
    4844:	df 93       	push	r29
    4846:	ec 01       	movw	r28, r24
    4848:	8b 01       	movw	r16, r22
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
    484a:	7d 83       	std	Y+5, r23	; 0x05
    484c:	6c 83       	std	Y+4, r22	; 0x04
	clst = dp->sclust;		/* Table start cluster (0:root) */
    484e:	ce 80       	ldd	r12, Y+6	; 0x06
    4850:	df 80       	ldd	r13, Y+7	; 0x07
    4852:	e8 84       	ldd	r14, Y+8	; 0x08
    4854:	f9 84       	ldd	r15, Y+9	; 0x09
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
    4856:	81 e0       	ldi	r24, 0x01	; 1
    4858:	c8 16       	cp	r12, r24
    485a:	d1 04       	cpc	r13, r1
    485c:	e1 04       	cpc	r14, r1
    485e:	f1 04       	cpc	r15, r1
    4860:	09 f4       	brne	.+2      	; 0x4864 <dir_sdi+0x32>
    4862:	89 c0       	rjmp	.+274    	; 0x4976 <dir_sdi+0x144>
    4864:	e8 81       	ld	r30, Y
    4866:	f9 81       	ldd	r31, Y+1	; 0x01
    4868:	82 89       	ldd	r24, Z+18	; 0x12
    486a:	93 89       	ldd	r25, Z+19	; 0x13
    486c:	a4 89       	ldd	r26, Z+20	; 0x14
    486e:	b5 89       	ldd	r27, Z+21	; 0x15
    4870:	c8 16       	cp	r12, r24
    4872:	d9 06       	cpc	r13, r25
    4874:	ea 06       	cpc	r14, r26
    4876:	fb 06       	cpc	r15, r27
    4878:	08 f0       	brcs	.+2      	; 0x487c <dir_sdi+0x4a>
    487a:	7f c0       	rjmp	.+254    	; 0x497a <dir_sdi+0x148>
		return FR_INT_ERR;
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    487c:	c1 14       	cp	r12, r1
    487e:	d1 04       	cpc	r13, r1
    4880:	e1 04       	cpc	r14, r1
    4882:	f1 04       	cpc	r15, r1
    4884:	c1 f4       	brne	.+48     	; 0x48b6 <dir_sdi+0x84>
    4886:	80 81       	ld	r24, Z
    4888:	83 30       	cpi	r24, 0x03	; 3
    488a:	41 f4       	brne	.+16     	; 0x489c <dir_sdi+0x6a>
		clst = dp->fs->dirbase;
    488c:	82 a1       	ldd	r24, Z+34	; 0x22
    488e:	93 a1       	ldd	r25, Z+35	; 0x23
    4890:	a4 a1       	ldd	r26, Z+36	; 0x24
    4892:	b5 a1       	ldd	r27, Z+37	; 0x25

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
    4894:	00 97       	sbiw	r24, 0x00	; 0
    4896:	a1 05       	cpc	r26, r1
    4898:	b1 05       	cpc	r27, r1
    489a:	59 f4       	brne	.+22     	; 0x48b2 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
    489c:	80 85       	ldd	r24, Z+8	; 0x08
    489e:	91 85       	ldd	r25, Z+9	; 0x09
    48a0:	08 17       	cp	r16, r24
    48a2:	19 07       	cpc	r17, r25
    48a4:	08 f0       	brcs	.+2      	; 0x48a8 <dir_sdi+0x76>
    48a6:	6b c0       	rjmp	.+214    	; 0x497e <dir_sdi+0x14c>
			return FR_INT_ERR;
		sect = dp->fs->dirbase;
    48a8:	62 a1       	ldd	r22, Z+34	; 0x22
    48aa:	73 a1       	ldd	r23, Z+35	; 0x23
    48ac:	84 a1       	ldd	r24, Z+36	; 0x24
    48ae:	95 a1       	ldd	r25, Z+37	; 0x25
    48b0:	35 c0       	rjmp	.+106    	; 0x491c <dir_sdi+0xea>
	dp->index = (WORD)idx;	/* Current index */
	clst = dp->sclust;		/* Table start cluster (0:root) */
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
		return FR_INT_ERR;
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = dp->fs->dirbase;
    48b2:	6c 01       	movw	r12, r24
    48b4:	7d 01       	movw	r14, r26
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
			return FR_INT_ERR;
		sect = dp->fs->dirbase;
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
    48b6:	a2 80       	ldd	r10, Z+2	; 0x02
    48b8:	80 e1       	ldi	r24, 0x10	; 16
    48ba:	a8 9e       	mul	r10, r24
    48bc:	50 01       	movw	r10, r0
    48be:	11 24       	eor	r1, r1
		while (idx >= ic) {	/* Follow cluster chain */
    48c0:	0a 15       	cp	r16, r10
    48c2:	1b 05       	cpc	r17, r11
    48c4:	30 f1       	brcs	.+76     	; 0x4912 <dir_sdi+0xe0>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
    48c6:	b7 01       	movw	r22, r14
    48c8:	a6 01       	movw	r20, r12
    48ca:	88 81       	ld	r24, Y
    48cc:	99 81       	ldd	r25, Y+1	; 0x01
    48ce:	ce de       	rcall	.-612    	; 0x466c <get_fat>
    48d0:	6b 01       	movw	r12, r22
    48d2:	7c 01       	movw	r14, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    48d4:	8f ef       	ldi	r24, 0xFF	; 255
    48d6:	c8 16       	cp	r12, r24
    48d8:	d8 06       	cpc	r13, r24
    48da:	e8 06       	cpc	r14, r24
    48dc:	f8 06       	cpc	r15, r24
    48de:	09 f4       	brne	.+2      	; 0x48e2 <dir_sdi+0xb0>
    48e0:	50 c0       	rjmp	.+160    	; 0x4982 <dir_sdi+0x150>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
    48e2:	82 e0       	ldi	r24, 0x02	; 2
    48e4:	c8 16       	cp	r12, r24
    48e6:	d1 04       	cpc	r13, r1
    48e8:	e1 04       	cpc	r14, r1
    48ea:	f1 04       	cpc	r15, r1
    48ec:	08 f4       	brcc	.+2      	; 0x48f0 <dir_sdi+0xbe>
    48ee:	4b c0       	rjmp	.+150    	; 0x4986 <dir_sdi+0x154>
    48f0:	e8 81       	ld	r30, Y
    48f2:	f9 81       	ldd	r31, Y+1	; 0x01
    48f4:	82 89       	ldd	r24, Z+18	; 0x12
    48f6:	93 89       	ldd	r25, Z+19	; 0x13
    48f8:	a4 89       	ldd	r26, Z+20	; 0x14
    48fa:	b5 89       	ldd	r27, Z+21	; 0x15
    48fc:	c8 16       	cp	r12, r24
    48fe:	d9 06       	cpc	r13, r25
    4900:	ea 06       	cpc	r14, r26
    4902:	fb 06       	cpc	r15, r27
    4904:	08 f0       	brcs	.+2      	; 0x4908 <dir_sdi+0xd6>
    4906:	41 c0       	rjmp	.+130    	; 0x498a <dir_sdi+0x158>
				return FR_INT_ERR;
			idx -= ic;
    4908:	0a 19       	sub	r16, r10
    490a:	1b 09       	sbc	r17, r11
			return FR_INT_ERR;
		sect = dp->fs->dirbase;
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    490c:	0a 15       	cp	r16, r10
    490e:	1b 05       	cpc	r17, r11
    4910:	d0 f6       	brcc	.-76     	; 0x48c6 <dir_sdi+0x94>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
				return FR_INT_ERR;
			idx -= ic;
		}
		sect = clust2sect(dp->fs, clst);
    4912:	b7 01       	movw	r22, r14
    4914:	a6 01       	movw	r20, r12
    4916:	88 81       	ld	r24, Y
    4918:	99 81       	ldd	r25, Y+1	; 0x01
    491a:	80 de       	rcall	.-768    	; 0x461c <clust2sect>
	}
	dp->clust = clst;	/* Current cluster# */
    491c:	ca 86       	std	Y+10, r12	; 0x0a
    491e:	db 86       	std	Y+11, r13	; 0x0b
    4920:	ec 86       	std	Y+12, r14	; 0x0c
    4922:	fd 86       	std	Y+13, r15	; 0x0d
	if (!sect) return FR_INT_ERR;
    4924:	61 15       	cp	r22, r1
    4926:	71 05       	cpc	r23, r1
    4928:	81 05       	cpc	r24, r1
    492a:	91 05       	cpc	r25, r1
    492c:	81 f1       	breq	.+96     	; 0x498e <dir_sdi+0x15c>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
    492e:	98 01       	movw	r18, r16
    4930:	32 95       	swap	r19
    4932:	22 95       	swap	r18
    4934:	2f 70       	andi	r18, 0x0F	; 15
    4936:	23 27       	eor	r18, r19
    4938:	3f 70       	andi	r19, 0x0F	; 15
    493a:	23 27       	eor	r18, r19
    493c:	dc 01       	movw	r26, r24
    493e:	cb 01       	movw	r24, r22
    4940:	82 0f       	add	r24, r18
    4942:	93 1f       	adc	r25, r19
    4944:	a1 1d       	adc	r26, r1
    4946:	b1 1d       	adc	r27, r1
    4948:	8e 87       	std	Y+14, r24	; 0x0e
    494a:	9f 87       	std	Y+15, r25	; 0x0f
    494c:	a8 8b       	std	Y+16, r26	; 0x10
    494e:	b9 8b       	std	Y+17, r27	; 0x11
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
    4950:	88 81       	ld	r24, Y
    4952:	99 81       	ldd	r25, Y+1	; 0x01
    4954:	8e 96       	adiw	r24, 0x2e	; 46
    4956:	0f 70       	andi	r16, 0x0F	; 15
    4958:	11 27       	eor	r17, r17
    495a:	00 0f       	add	r16, r16
    495c:	11 1f       	adc	r17, r17
    495e:	02 95       	swap	r16
    4960:	12 95       	swap	r17
    4962:	10 7f       	andi	r17, 0xF0	; 240
    4964:	10 27       	eor	r17, r16
    4966:	00 7f       	andi	r16, 0xF0	; 240
    4968:	10 27       	eor	r17, r16
    496a:	08 0f       	add	r16, r24
    496c:	19 1f       	adc	r17, r25
    496e:	1b 8b       	std	Y+19, r17	; 0x13
    4970:	0a 8b       	std	Y+18, r16	; 0x12

	return FR_OK;
    4972:	80 e0       	ldi	r24, 0x00	; 0
    4974:	0d c0       	rjmp	.+26     	; 0x4990 <dir_sdi+0x15e>


	dp->index = (WORD)idx;	/* Current index */
	clst = dp->sclust;		/* Table start cluster (0:root) */
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
		return FR_INT_ERR;
    4976:	82 e0       	ldi	r24, 0x02	; 2
    4978:	0b c0       	rjmp	.+22     	; 0x4990 <dir_sdi+0x15e>
    497a:	82 e0       	ldi	r24, 0x02	; 2
    497c:	09 c0       	rjmp	.+18     	; 0x4990 <dir_sdi+0x15e>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = dp->fs->dirbase;

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
			return FR_INT_ERR;
    497e:	82 e0       	ldi	r24, 0x02	; 2
    4980:	07 c0       	rjmp	.+14     	; 0x4990 <dir_sdi+0x15e>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    4982:	81 e0       	ldi	r24, 0x01	; 1
    4984:	05 c0       	rjmp	.+10     	; 0x4990 <dir_sdi+0x15e>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
				return FR_INT_ERR;
    4986:	82 e0       	ldi	r24, 0x02	; 2
    4988:	03 c0       	rjmp	.+6      	; 0x4990 <dir_sdi+0x15e>
    498a:	82 e0       	ldi	r24, 0x02	; 2
    498c:	01 c0       	rjmp	.+2      	; 0x4990 <dir_sdi+0x15e>
			idx -= ic;
		}
		sect = clust2sect(dp->fs, clst);
	}
	dp->clust = clst;	/* Current cluster# */
	if (!sect) return FR_INT_ERR;
    498e:	82 e0       	ldi	r24, 0x02	; 2
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */

	return FR_OK;
}
    4990:	df 91       	pop	r29
    4992:	cf 91       	pop	r28
    4994:	1f 91       	pop	r17
    4996:	0f 91       	pop	r16
    4998:	ff 90       	pop	r15
    499a:	ef 90       	pop	r14
    499c:	df 90       	pop	r13
    499e:	cf 90       	pop	r12
    49a0:	bf 90       	pop	r11
    49a2:	af 90       	pop	r10
    49a4:	08 95       	ret

000049a6 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
    49a6:	4f 92       	push	r4
    49a8:	5f 92       	push	r5
    49aa:	6f 92       	push	r6
    49ac:	7f 92       	push	r7
    49ae:	9f 92       	push	r9
    49b0:	af 92       	push	r10
    49b2:	bf 92       	push	r11
    49b4:	cf 92       	push	r12
    49b6:	df 92       	push	r13
    49b8:	ef 92       	push	r14
    49ba:	ff 92       	push	r15
    49bc:	0f 93       	push	r16
    49be:	1f 93       	push	r17
    49c0:	cf 93       	push	r28
    49c2:	df 93       	push	r29
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    49c4:	42 30       	cpi	r20, 0x02	; 2
    49c6:	51 05       	cpc	r21, r1
    49c8:	61 05       	cpc	r22, r1
    49ca:	71 05       	cpc	r23, r1
    49cc:	08 f4       	brcc	.+2      	; 0x49d0 <put_fat+0x2a>
    49ce:	d6 c0       	rjmp	.+428    	; 0x4b7c <put_fat+0x1d6>
    49d0:	fc 01       	movw	r30, r24
    49d2:	c2 88       	ldd	r12, Z+18	; 0x12
    49d4:	d3 88       	ldd	r13, Z+19	; 0x13
    49d6:	e4 88       	ldd	r14, Z+20	; 0x14
    49d8:	f5 88       	ldd	r15, Z+21	; 0x15
    49da:	4c 15       	cp	r20, r12
    49dc:	5d 05       	cpc	r21, r13
    49de:	6e 05       	cpc	r22, r14
    49e0:	7f 05       	cpc	r23, r15
    49e2:	08 f0       	brcs	.+2      	; 0x49e6 <put_fat+0x40>
    49e4:	cf c0       	rjmp	.+414    	; 0x4b84 <put_fat+0x1de>
    49e6:	68 01       	movw	r12, r16
    49e8:	79 01       	movw	r14, r18
    49ea:	2a 01       	movw	r4, r20
    49ec:	3b 01       	movw	r6, r22
    49ee:	ec 01       	movw	r28, r24
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
    49f0:	80 81       	ld	r24, Z
    49f2:	82 30       	cpi	r24, 0x02	; 2
    49f4:	09 f4       	brne	.+2      	; 0x49f8 <put_fat+0x52>
    49f6:	62 c0       	rjmp	.+196    	; 0x4abc <put_fat+0x116>
    49f8:	83 30       	cpi	r24, 0x03	; 3
    49fa:	09 f4       	brne	.+2      	; 0x49fe <put_fat+0x58>
    49fc:	84 c0       	rjmp	.+264    	; 0x4b06 <put_fat+0x160>
    49fe:	81 30       	cpi	r24, 0x01	; 1
    4a00:	09 f0       	breq	.+2      	; 0x4a04 <put_fat+0x5e>
    4a02:	c4 c0       	rjmp	.+392    	; 0x4b8c <put_fat+0x1e6>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
    4a04:	8a 01       	movw	r16, r20
    4a06:	16 95       	lsr	r17
    4a08:	07 95       	ror	r16
    4a0a:	04 0f       	add	r16, r20
    4a0c:	15 1f       	adc	r17, r21
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    4a0e:	c8 01       	movw	r24, r16
    4a10:	89 2f       	mov	r24, r25
    4a12:	99 27       	eor	r25, r25
    4a14:	86 95       	lsr	r24
    4a16:	46 8d       	ldd	r20, Z+30	; 0x1e
    4a18:	57 8d       	ldd	r21, Z+31	; 0x1f
    4a1a:	60 a1       	ldd	r22, Z+32	; 0x20
    4a1c:	71 a1       	ldd	r23, Z+33	; 0x21
    4a1e:	48 0f       	add	r20, r24
    4a20:	59 1f       	adc	r21, r25
    4a22:	61 1d       	adc	r22, r1
    4a24:	71 1d       	adc	r23, r1
    4a26:	cf 01       	movw	r24, r30
    4a28:	75 da       	rcall	.-2838   	; 0x3f14 <move_window>
    4a2a:	98 2e       	mov	r9, r24
			if (res != FR_OK) break;
    4a2c:	81 11       	cpse	r24, r1
    4a2e:	cd c0       	rjmp	.+410    	; 0x4bca <put_fat+0x224>
			p = &fs->win[bc++ % SS(fs)];
    4a30:	58 01       	movw	r10, r16
    4a32:	ff ef       	ldi	r31, 0xFF	; 255
    4a34:	af 1a       	sub	r10, r31
    4a36:	bf 0a       	sbc	r11, r31
    4a38:	11 70       	andi	r17, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    4a3a:	40 fe       	sbrs	r4, 0
    4a3c:	20 c0       	rjmp	.+64     	; 0x4a7e <put_fat+0xd8>
    4a3e:	fe 01       	movw	r30, r28
    4a40:	e0 0f       	add	r30, r16
    4a42:	f1 1f       	adc	r31, r17
    4a44:	86 a5       	ldd	r24, Z+46	; 0x2e
    4a46:	28 2f       	mov	r18, r24
    4a48:	2f 70       	andi	r18, 0x0F	; 15
    4a4a:	30 e1       	ldi	r19, 0x10	; 16
    4a4c:	c3 9e       	mul	r12, r19
    4a4e:	c0 01       	movw	r24, r0
    4a50:	11 24       	eor	r1, r1
    4a52:	82 2b       	or	r24, r18
    4a54:	86 a7       	std	Z+46, r24	; 0x2e
			fs->wflag = 1;
    4a56:	81 e0       	ldi	r24, 0x01	; 1
    4a58:	8c 83       	std	Y+4, r24	; 0x04
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    4a5a:	4e 8d       	ldd	r20, Y+30	; 0x1e
    4a5c:	5f 8d       	ldd	r21, Y+31	; 0x1f
    4a5e:	68 a1       	ldd	r22, Y+32	; 0x20
    4a60:	79 a1       	ldd	r23, Y+33	; 0x21
    4a62:	c5 01       	movw	r24, r10
    4a64:	89 2f       	mov	r24, r25
    4a66:	99 27       	eor	r25, r25
    4a68:	86 95       	lsr	r24
    4a6a:	48 0f       	add	r20, r24
    4a6c:	59 1f       	adc	r21, r25
    4a6e:	61 1d       	adc	r22, r1
    4a70:	71 1d       	adc	r23, r1
    4a72:	ce 01       	movw	r24, r28
    4a74:	4f da       	rcall	.-2914   	; 0x3f14 <move_window>
			if (res != FR_OK) break;
    4a76:	88 23       	and	r24, r24
    4a78:	09 f4       	brne	.+2      	; 0x4a7c <put_fat+0xd6>
    4a7a:	90 c0       	rjmp	.+288    	; 0x4b9c <put_fat+0x1f6>
    4a7c:	8b c0       	rjmp	.+278    	; 0x4b94 <put_fat+0x1ee>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc++ % SS(fs)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    4a7e:	fe 01       	movw	r30, r28
    4a80:	e0 0f       	add	r30, r16
    4a82:	f1 1f       	adc	r31, r17
    4a84:	c6 a6       	std	Z+46, r12	; 0x2e
			fs->wflag = 1;
    4a86:	81 e0       	ldi	r24, 0x01	; 1
    4a88:	8c 83       	std	Y+4, r24	; 0x04
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    4a8a:	4e 8d       	ldd	r20, Y+30	; 0x1e
    4a8c:	5f 8d       	ldd	r21, Y+31	; 0x1f
    4a8e:	68 a1       	ldd	r22, Y+32	; 0x20
    4a90:	79 a1       	ldd	r23, Y+33	; 0x21
    4a92:	c5 01       	movw	r24, r10
    4a94:	89 2f       	mov	r24, r25
    4a96:	99 27       	eor	r25, r25
    4a98:	86 95       	lsr	r24
    4a9a:	48 0f       	add	r20, r24
    4a9c:	59 1f       	adc	r21, r25
    4a9e:	61 1d       	adc	r22, r1
    4aa0:	71 1d       	adc	r23, r1
    4aa2:	ce 01       	movw	r24, r28
    4aa4:	37 da       	rcall	.-2962   	; 0x3f14 <move_window>
			if (res != FR_OK) break;
    4aa6:	88 23       	and	r24, r24
    4aa8:	09 f4       	brne	.+2      	; 0x4aac <put_fat+0x106>
    4aaa:	83 c0       	rjmp	.+262    	; 0x4bb2 <put_fat+0x20c>
    4aac:	75 c0       	rjmp	.+234    	; 0x4b98 <put_fat+0x1f2>
			p = &fs->win[bc % SS(fs)];
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    4aae:	fe 01       	movw	r30, r28
    4ab0:	ea 0d       	add	r30, r10
    4ab2:	fb 1d       	adc	r31, r11
    4ab4:	c6 a6       	std	Z+46, r12	; 0x2e
			fs->wflag = 1;
    4ab6:	81 e0       	ldi	r24, 0x01	; 1
    4ab8:	8c 83       	std	Y+4, r24	; 0x04
			break;
    4aba:	87 c0       	rjmp	.+270    	; 0x4bca <put_fat+0x224>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    4abc:	45 2f       	mov	r20, r21
    4abe:	56 2f       	mov	r21, r22
    4ac0:	67 2f       	mov	r22, r23
    4ac2:	77 27       	eor	r23, r23
    4ac4:	86 8d       	ldd	r24, Z+30	; 0x1e
    4ac6:	97 8d       	ldd	r25, Z+31	; 0x1f
    4ac8:	a0 a1       	ldd	r26, Z+32	; 0x20
    4aca:	b1 a1       	ldd	r27, Z+33	; 0x21
    4acc:	48 0f       	add	r20, r24
    4ace:	59 1f       	adc	r21, r25
    4ad0:	6a 1f       	adc	r22, r26
    4ad2:	7b 1f       	adc	r23, r27
    4ad4:	cf 01       	movw	r24, r30
    4ad6:	1e da       	rcall	.-3012   	; 0x3f14 <move_window>
    4ad8:	98 2e       	mov	r9, r24
			if (res != FR_OK) break;
    4ada:	81 11       	cpse	r24, r1
    4adc:	76 c0       	rjmp	.+236    	; 0x4bca <put_fat+0x224>
			p = &fs->win[clst * 2 % SS(fs)];
    4ade:	b3 01       	movw	r22, r6
    4ae0:	a2 01       	movw	r20, r4
    4ae2:	44 0f       	add	r20, r20
    4ae4:	55 1f       	adc	r21, r21
    4ae6:	66 1f       	adc	r22, r22
    4ae8:	77 1f       	adc	r23, r23
    4aea:	4e 7f       	andi	r20, 0xFE	; 254
    4aec:	51 70       	andi	r21, 0x01	; 1
    4aee:	66 27       	eor	r22, r22
    4af0:	77 27       	eor	r23, r23
    4af2:	42 5d       	subi	r20, 0xD2	; 210
    4af4:	5f 4f       	sbci	r21, 0xFF	; 255
			ST_WORD(p, (WORD)val);
    4af6:	fe 01       	movw	r30, r28
    4af8:	e4 0f       	add	r30, r20
    4afa:	f5 1f       	adc	r31, r21
    4afc:	d1 82       	std	Z+1, r13	; 0x01
    4afe:	c0 82       	st	Z, r12
			fs->wflag = 1;
    4b00:	81 e0       	ldi	r24, 0x01	; 1
    4b02:	8c 83       	std	Y+4, r24	; 0x04
			break;
    4b04:	62 c0       	rjmp	.+196    	; 0x4bca <put_fat+0x224>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    4b06:	86 8d       	ldd	r24, Z+30	; 0x1e
    4b08:	97 8d       	ldd	r25, Z+31	; 0x1f
    4b0a:	a0 a1       	ldd	r26, Z+32	; 0x20
    4b0c:	b1 a1       	ldd	r27, Z+33	; 0x21
    4b0e:	68 94       	set
    4b10:	16 f8       	bld	r1, 6
    4b12:	76 95       	lsr	r23
    4b14:	67 95       	ror	r22
    4b16:	57 95       	ror	r21
    4b18:	47 95       	ror	r20
    4b1a:	16 94       	lsr	r1
    4b1c:	d1 f7       	brne	.-12     	; 0x4b12 <put_fat+0x16c>
    4b1e:	48 0f       	add	r20, r24
    4b20:	59 1f       	adc	r21, r25
    4b22:	6a 1f       	adc	r22, r26
    4b24:	7b 1f       	adc	r23, r27
    4b26:	cf 01       	movw	r24, r30
    4b28:	f5 d9       	rcall	.-3094   	; 0x3f14 <move_window>
    4b2a:	98 2e       	mov	r9, r24
			if (res != FR_OK) break;
    4b2c:	81 11       	cpse	r24, r1
    4b2e:	4d c0       	rjmp	.+154    	; 0x4bca <put_fat+0x224>
			p = &fs->win[clst * 4 % SS(fs)];
    4b30:	b3 01       	movw	r22, r6
    4b32:	a2 01       	movw	r20, r4
    4b34:	44 0f       	add	r20, r20
    4b36:	55 1f       	adc	r21, r21
    4b38:	66 1f       	adc	r22, r22
    4b3a:	77 1f       	adc	r23, r23
    4b3c:	44 0f       	add	r20, r20
    4b3e:	55 1f       	adc	r21, r21
    4b40:	66 1f       	adc	r22, r22
    4b42:	77 1f       	adc	r23, r23
    4b44:	4c 7f       	andi	r20, 0xFC	; 252
    4b46:	51 70       	andi	r21, 0x01	; 1
    4b48:	66 27       	eor	r22, r22
    4b4a:	77 27       	eor	r23, r23
    4b4c:	42 5d       	subi	r20, 0xD2	; 210
    4b4e:	5f 4f       	sbci	r21, 0xFF	; 255
    4b50:	fe 01       	movw	r30, r28
    4b52:	e4 0f       	add	r30, r20
    4b54:	f5 1f       	adc	r31, r21
			val |= LD_DWORD(p) & 0xF0000000;
			ST_DWORD(p, val);
    4b56:	00 81       	ld	r16, Z
    4b58:	11 81       	ldd	r17, Z+1	; 0x01
    4b5a:	22 81       	ldd	r18, Z+2	; 0x02
    4b5c:	33 81       	ldd	r19, Z+3	; 0x03
    4b5e:	00 27       	eor	r16, r16
    4b60:	11 27       	eor	r17, r17
    4b62:	22 27       	eor	r18, r18
    4b64:	30 7f       	andi	r19, 0xF0	; 240
    4b66:	c0 2a       	or	r12, r16
    4b68:	d1 2a       	or	r13, r17
    4b6a:	e2 2a       	or	r14, r18
    4b6c:	f3 2a       	or	r15, r19
    4b6e:	c0 82       	st	Z, r12
    4b70:	d1 82       	std	Z+1, r13	; 0x01
    4b72:	e2 82       	std	Z+2, r14	; 0x02
    4b74:	f3 82       	std	Z+3, r15	; 0x03
			fs->wflag = 1;
    4b76:	81 e0       	ldi	r24, 0x01	; 1
    4b78:	8c 83       	std	Y+4, r24	; 0x04
			break;
    4b7a:	27 c0       	rjmp	.+78     	; 0x4bca <put_fat+0x224>
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
    4b7c:	68 94       	set
    4b7e:	99 24       	eor	r9, r9
    4b80:	91 f8       	bld	r9, 1
    4b82:	23 c0       	rjmp	.+70     	; 0x4bca <put_fat+0x224>
    4b84:	68 94       	set
    4b86:	99 24       	eor	r9, r9
    4b88:	91 f8       	bld	r9, 1
    4b8a:	1f c0       	rjmp	.+62     	; 0x4bca <put_fat+0x224>
			ST_DWORD(p, val);
			fs->wflag = 1;
			break;

		default :
			res = FR_INT_ERR;
    4b8c:	68 94       	set
    4b8e:	99 24       	eor	r9, r9
    4b90:	91 f8       	bld	r9, 1
    4b92:	1b c0       	rjmp	.+54     	; 0x4bca <put_fat+0x224>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc++ % SS(fs)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    4b94:	98 2e       	mov	r9, r24
    4b96:	19 c0       	rjmp	.+50     	; 0x4bca <put_fat+0x224>
    4b98:	98 2e       	mov	r9, r24
		default :
			res = FR_INT_ERR;
		}
	}

	return res;
    4b9a:	17 c0       	rjmp	.+46     	; 0x4bca <put_fat+0x224>
			p = &fs->win[bc++ % SS(fs)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc % SS(fs)];
    4b9c:	81 e0       	ldi	r24, 0x01	; 1
    4b9e:	b8 22       	and	r11, r24
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    4ba0:	68 94       	set
    4ba2:	13 f8       	bld	r1, 3
    4ba4:	f6 94       	lsr	r15
    4ba6:	e7 94       	ror	r14
    4ba8:	d7 94       	ror	r13
    4baa:	c7 94       	ror	r12
    4bac:	16 94       	lsr	r1
    4bae:	d1 f7       	brne	.-12     	; 0x4ba4 <put_fat+0x1fe>
    4bb0:	7e cf       	rjmp	.-260    	; 0x4aae <put_fat+0x108>
			p = &fs->win[bc++ % SS(fs)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc % SS(fs)];
    4bb2:	e1 e0       	ldi	r30, 0x01	; 1
    4bb4:	be 22       	and	r11, r30
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    4bb6:	fe 01       	movw	r30, r28
    4bb8:	ea 0d       	add	r30, r10
    4bba:	fb 1d       	adc	r31, r11
    4bbc:	96 a5       	ldd	r25, Z+46	; 0x2e
    4bbe:	90 7f       	andi	r25, 0xF0	; 240
    4bc0:	8d 2d       	mov	r24, r13
    4bc2:	8f 70       	andi	r24, 0x0F	; 15
    4bc4:	c9 2e       	mov	r12, r25
    4bc6:	c8 2a       	or	r12, r24
    4bc8:	72 cf       	rjmp	.-284    	; 0x4aae <put_fat+0x108>
			res = FR_INT_ERR;
		}
	}

	return res;
}
    4bca:	89 2d       	mov	r24, r9
    4bcc:	df 91       	pop	r29
    4bce:	cf 91       	pop	r28
    4bd0:	1f 91       	pop	r17
    4bd2:	0f 91       	pop	r16
    4bd4:	ff 90       	pop	r15
    4bd6:	ef 90       	pop	r14
    4bd8:	df 90       	pop	r13
    4bda:	cf 90       	pop	r12
    4bdc:	bf 90       	pop	r11
    4bde:	af 90       	pop	r10
    4be0:	9f 90       	pop	r9
    4be2:	7f 90       	pop	r7
    4be4:	6f 90       	pop	r6
    4be6:	5f 90       	pop	r5
    4be8:	4f 90       	pop	r4
    4bea:	08 95       	ret

00004bec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    4bec:	4f 92       	push	r4
    4bee:	5f 92       	push	r5
    4bf0:	6f 92       	push	r6
    4bf2:	7f 92       	push	r7
    4bf4:	8f 92       	push	r8
    4bf6:	9f 92       	push	r9
    4bf8:	af 92       	push	r10
    4bfa:	bf 92       	push	r11
    4bfc:	cf 92       	push	r12
    4bfe:	df 92       	push	r13
    4c00:	ef 92       	push	r14
    4c02:	ff 92       	push	r15
    4c04:	0f 93       	push	r16
    4c06:	1f 93       	push	r17
    4c08:	cf 93       	push	r28
    4c0a:	df 93       	push	r29
    4c0c:	ec 01       	movw	r28, r24
    4c0e:	2a 01       	movw	r4, r20
    4c10:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    4c12:	41 15       	cp	r20, r1
    4c14:	51 05       	cpc	r21, r1
    4c16:	61 05       	cpc	r22, r1
    4c18:	71 05       	cpc	r23, r1
    4c1a:	b9 f4       	brne	.+46     	; 0x4c4a <create_chain+0x5e>
		scl = fs->last_clust;			/* Get suggested start point */
    4c1c:	8a 84       	ldd	r8, Y+10	; 0x0a
    4c1e:	9b 84       	ldd	r9, Y+11	; 0x0b
    4c20:	ac 84       	ldd	r10, Y+12	; 0x0c
    4c22:	bd 84       	ldd	r11, Y+13	; 0x0d
		if (!scl || scl >= fs->n_fatent) scl = 1;
    4c24:	81 14       	cp	r8, r1
    4c26:	91 04       	cpc	r9, r1
    4c28:	a1 04       	cpc	r10, r1
    4c2a:	b1 04       	cpc	r11, r1
    4c2c:	59 f1       	breq	.+86     	; 0x4c84 <create_chain+0x98>
    4c2e:	8a 89       	ldd	r24, Y+18	; 0x12
    4c30:	9b 89       	ldd	r25, Y+19	; 0x13
    4c32:	ac 89       	ldd	r26, Y+20	; 0x14
    4c34:	bd 89       	ldd	r27, Y+21	; 0x15
    4c36:	88 16       	cp	r8, r24
    4c38:	99 06       	cpc	r9, r25
    4c3a:	aa 06       	cpc	r10, r26
    4c3c:	bb 06       	cpc	r11, r27
    4c3e:	30 f1       	brcs	.+76     	; 0x4c8c <create_chain+0xa0>
    4c40:	81 2c       	mov	r8, r1
    4c42:	91 2c       	mov	r9, r1
    4c44:	54 01       	movw	r10, r8
    4c46:	83 94       	inc	r8
    4c48:	21 c0       	rjmp	.+66     	; 0x4c8c <create_chain+0xa0>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    4c4a:	10 dd       	rcall	.-1504   	; 0x466c <get_fat>
    4c4c:	6b 01       	movw	r12, r22
    4c4e:	7c 01       	movw	r14, r24
		if (cs < 2) return 1;			/* Invalid value */
    4c50:	62 30       	cpi	r22, 0x02	; 2
    4c52:	71 05       	cpc	r23, r1
    4c54:	81 05       	cpc	r24, r1
    4c56:	91 05       	cpc	r25, r1
    4c58:	08 f4       	brcc	.+2      	; 0x4c5c <create_chain+0x70>
    4c5a:	8b c0       	rjmp	.+278    	; 0x4d72 <create_chain+0x186>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
    4c5c:	8f ef       	ldi	r24, 0xFF	; 255
    4c5e:	c8 16       	cp	r12, r24
    4c60:	d8 06       	cpc	r13, r24
    4c62:	e8 06       	cpc	r14, r24
    4c64:	f8 06       	cpc	r15, r24
    4c66:	09 f4       	brne	.+2      	; 0x4c6a <create_chain+0x7e>
    4c68:	89 c0       	rjmp	.+274    	; 0x4d7c <create_chain+0x190>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    4c6a:	8a 89       	ldd	r24, Y+18	; 0x12
    4c6c:	9b 89       	ldd	r25, Y+19	; 0x13
    4c6e:	ac 89       	ldd	r26, Y+20	; 0x14
    4c70:	bd 89       	ldd	r27, Y+21	; 0x15
    4c72:	c8 16       	cp	r12, r24
    4c74:	d9 06       	cpc	r13, r25
    4c76:	ea 06       	cpc	r14, r26
    4c78:	fb 06       	cpc	r15, r27
    4c7a:	08 f4       	brcc	.+2      	; 0x4c7e <create_chain+0x92>
    4c7c:	84 c0       	rjmp	.+264    	; 0x4d86 <create_chain+0x19a>
		scl = clst;
    4c7e:	53 01       	movw	r10, r6
    4c80:	42 01       	movw	r8, r4
    4c82:	04 c0       	rjmp	.+8      	; 0x4c8c <create_chain+0xa0>
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
    4c84:	81 2c       	mov	r8, r1
    4c86:	91 2c       	mov	r9, r1
    4c88:	54 01       	movw	r10, r8
    4c8a:	83 94       	inc	r8
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
    4c8c:	75 01       	movw	r14, r10
    4c8e:	64 01       	movw	r12, r8
	for (;;) {
		ncl++;							/* Next cluster */
    4c90:	2f ef       	ldi	r18, 0xFF	; 255
    4c92:	c2 1a       	sub	r12, r18
    4c94:	d2 0a       	sbc	r13, r18
    4c96:	e2 0a       	sbc	r14, r18
    4c98:	f2 0a       	sbc	r15, r18
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
    4c9a:	8a 89       	ldd	r24, Y+18	; 0x12
    4c9c:	9b 89       	ldd	r25, Y+19	; 0x13
    4c9e:	ac 89       	ldd	r26, Y+20	; 0x14
    4ca0:	bd 89       	ldd	r27, Y+21	; 0x15
    4ca2:	c8 16       	cp	r12, r24
    4ca4:	d9 06       	cpc	r13, r25
    4ca6:	ea 06       	cpc	r14, r26
    4ca8:	fb 06       	cpc	r15, r27
    4caa:	60 f0       	brcs	.+24     	; 0x4cc4 <create_chain+0xd8>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    4cac:	82 e0       	ldi	r24, 0x02	; 2
    4cae:	88 16       	cp	r8, r24
    4cb0:	91 04       	cpc	r9, r1
    4cb2:	a1 04       	cpc	r10, r1
    4cb4:	b1 04       	cpc	r11, r1
    4cb6:	08 f4       	brcc	.+2      	; 0x4cba <create_chain+0xce>
    4cb8:	6b c0       	rjmp	.+214    	; 0x4d90 <create_chain+0x1a4>

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
			ncl = 2;
    4cba:	c1 2c       	mov	r12, r1
    4cbc:	d1 2c       	mov	r13, r1
    4cbe:	76 01       	movw	r14, r12
    4cc0:	68 94       	set
    4cc2:	c1 f8       	bld	r12, 1
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    4cc4:	b7 01       	movw	r22, r14
    4cc6:	a6 01       	movw	r20, r12
    4cc8:	ce 01       	movw	r24, r28
    4cca:	d0 dc       	rcall	.-1632   	; 0x466c <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
    4ccc:	61 15       	cp	r22, r1
    4cce:	71 05       	cpc	r23, r1
    4cd0:	81 05       	cpc	r24, r1
    4cd2:	91 05       	cpc	r25, r1
    4cd4:	99 f0       	breq	.+38     	; 0x4cfc <create_chain+0x110>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    4cd6:	6f 3f       	cpi	r22, 0xFF	; 255
    4cd8:	2f ef       	ldi	r18, 0xFF	; 255
    4cda:	72 07       	cpc	r23, r18
    4cdc:	82 07       	cpc	r24, r18
    4cde:	92 07       	cpc	r25, r18
    4ce0:	09 f4       	brne	.+2      	; 0x4ce4 <create_chain+0xf8>
    4ce2:	5b c0       	rjmp	.+182    	; 0x4d9a <create_chain+0x1ae>
    4ce4:	61 30       	cpi	r22, 0x01	; 1
    4ce6:	71 05       	cpc	r23, r1
    4ce8:	81 05       	cpc	r24, r1
    4cea:	91 05       	cpc	r25, r1
    4cec:	09 f4       	brne	.+2      	; 0x4cf0 <create_chain+0x104>
    4cee:	5a c0       	rjmp	.+180    	; 0x4da4 <create_chain+0x1b8>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    4cf0:	c8 14       	cp	r12, r8
    4cf2:	d9 04       	cpc	r13, r9
    4cf4:	ea 04       	cpc	r14, r10
    4cf6:	fb 04       	cpc	r15, r11
    4cf8:	59 f6       	brne	.-106    	; 0x4c90 <create_chain+0xa4>
    4cfa:	59 c0       	rjmp	.+178    	; 0x4dae <create_chain+0x1c2>
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    4cfc:	0f ef       	ldi	r16, 0xFF	; 255
    4cfe:	1f ef       	ldi	r17, 0xFF	; 255
    4d00:	2f ef       	ldi	r18, 0xFF	; 255
    4d02:	3f e0       	ldi	r19, 0x0F	; 15
    4d04:	b7 01       	movw	r22, r14
    4d06:	a6 01       	movw	r20, r12
    4d08:	ce 01       	movw	r24, r28
    4d0a:	4d de       	rcall	.-870    	; 0x49a6 <put_fat>
	if (res == FR_OK && clst != 0) {
    4d0c:	81 11       	cpse	r24, r1
    4d0e:	2a c0       	rjmp	.+84     	; 0x4d64 <create_chain+0x178>
    4d10:	41 14       	cp	r4, r1
    4d12:	51 04       	cpc	r5, r1
    4d14:	61 04       	cpc	r6, r1
    4d16:	71 04       	cpc	r7, r1
    4d18:	41 f0       	breq	.+16     	; 0x4d2a <create_chain+0x13e>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    4d1a:	97 01       	movw	r18, r14
    4d1c:	86 01       	movw	r16, r12
    4d1e:	b3 01       	movw	r22, r6
    4d20:	a2 01       	movw	r20, r4
    4d22:	ce 01       	movw	r24, r28
    4d24:	40 de       	rcall	.-896    	; 0x49a6 <put_fat>
	}
	if (res == FR_OK) {
    4d26:	81 11       	cpse	r24, r1
    4d28:	1d c0       	rjmp	.+58     	; 0x4d64 <create_chain+0x178>
		fs->last_clust = ncl;			/* Update FSINFO */
    4d2a:	ca 86       	std	Y+10, r12	; 0x0a
    4d2c:	db 86       	std	Y+11, r13	; 0x0b
    4d2e:	ec 86       	std	Y+12, r14	; 0x0c
    4d30:	fd 86       	std	Y+13, r15	; 0x0d
		if (fs->free_clust != 0xFFFFFFFF) {
    4d32:	8e 85       	ldd	r24, Y+14	; 0x0e
    4d34:	9f 85       	ldd	r25, Y+15	; 0x0f
    4d36:	a8 89       	ldd	r26, Y+16	; 0x10
    4d38:	b9 89       	ldd	r27, Y+17	; 0x11
    4d3a:	8f 3f       	cpi	r24, 0xFF	; 255
    4d3c:	2f ef       	ldi	r18, 0xFF	; 255
    4d3e:	92 07       	cpc	r25, r18
    4d40:	a2 07       	cpc	r26, r18
    4d42:	b2 07       	cpc	r27, r18
    4d44:	c9 f1       	breq	.+114    	; 0x4db8 <create_chain+0x1cc>
			fs->free_clust--;
    4d46:	01 97       	sbiw	r24, 0x01	; 1
    4d48:	a1 09       	sbc	r26, r1
    4d4a:	b1 09       	sbc	r27, r1
    4d4c:	8e 87       	std	Y+14, r24	; 0x0e
    4d4e:	9f 87       	std	Y+15, r25	; 0x0f
    4d50:	a8 8b       	std	Y+16, r26	; 0x10
    4d52:	b9 8b       	std	Y+17, r27	; 0x11
			fs->fsi_flag |= 1;
    4d54:	8d 81       	ldd	r24, Y+5	; 0x05
    4d56:	81 60       	ori	r24, 0x01	; 1
    4d58:	8d 83       	std	Y+5, r24	; 0x05
    4d5a:	6c 2d       	mov	r22, r12
    4d5c:	7d 2d       	mov	r23, r13
    4d5e:	8e 2d       	mov	r24, r14
    4d60:	9f 2d       	mov	r25, r15
    4d62:	33 c0       	rjmp	.+102    	; 0x4dca <create_chain+0x1de>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    4d64:	81 30       	cpi	r24, 0x01	; 1
    4d66:	69 f1       	breq	.+90     	; 0x4dc2 <create_chain+0x1d6>
    4d68:	61 e0       	ldi	r22, 0x01	; 1
    4d6a:	70 e0       	ldi	r23, 0x00	; 0
    4d6c:	80 e0       	ldi	r24, 0x00	; 0
    4d6e:	90 e0       	ldi	r25, 0x00	; 0
    4d70:	2c c0       	rjmp	.+88     	; 0x4dca <create_chain+0x1de>
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
		if (cs < 2) return 1;			/* Invalid value */
    4d72:	61 e0       	ldi	r22, 0x01	; 1
    4d74:	70 e0       	ldi	r23, 0x00	; 0
    4d76:	80 e0       	ldi	r24, 0x00	; 0
    4d78:	90 e0       	ldi	r25, 0x00	; 0
    4d7a:	27 c0       	rjmp	.+78     	; 0x4dca <create_chain+0x1de>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
    4d7c:	6f ef       	ldi	r22, 0xFF	; 255
    4d7e:	7f ef       	ldi	r23, 0xFF	; 255
    4d80:	8f ef       	ldi	r24, 0xFF	; 255
    4d82:	9f ef       	ldi	r25, 0xFF	; 255
    4d84:	22 c0       	rjmp	.+68     	; 0x4dca <create_chain+0x1de>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    4d86:	6c 2d       	mov	r22, r12
    4d88:	7d 2d       	mov	r23, r13
    4d8a:	8e 2d       	mov	r24, r14
    4d8c:	9f 2d       	mov	r25, r15
    4d8e:	1d c0       	rjmp	.+58     	; 0x4dca <create_chain+0x1de>
	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    4d90:	60 e0       	ldi	r22, 0x00	; 0
    4d92:	70 e0       	ldi	r23, 0x00	; 0
    4d94:	80 e0       	ldi	r24, 0x00	; 0
    4d96:	90 e0       	ldi	r25, 0x00	; 0
    4d98:	18 c0       	rjmp	.+48     	; 0x4dca <create_chain+0x1de>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
    4d9a:	6f ef       	ldi	r22, 0xFF	; 255
    4d9c:	7f ef       	ldi	r23, 0xFF	; 255
    4d9e:	8f ef       	ldi	r24, 0xFF	; 255
    4da0:	9f ef       	ldi	r25, 0xFF	; 255
    4da2:	13 c0       	rjmp	.+38     	; 0x4dca <create_chain+0x1de>
    4da4:	61 e0       	ldi	r22, 0x01	; 1
    4da6:	70 e0       	ldi	r23, 0x00	; 0
    4da8:	80 e0       	ldi	r24, 0x00	; 0
    4daa:	90 e0       	ldi	r25, 0x00	; 0
    4dac:	0e c0       	rjmp	.+28     	; 0x4dca <create_chain+0x1de>
		if (ncl == scl) return 0;		/* No free cluster */
    4dae:	60 e0       	ldi	r22, 0x00	; 0
    4db0:	70 e0       	ldi	r23, 0x00	; 0
    4db2:	80 e0       	ldi	r24, 0x00	; 0
    4db4:	90 e0       	ldi	r25, 0x00	; 0
    4db6:	09 c0       	rjmp	.+18     	; 0x4dca <create_chain+0x1de>
    4db8:	6c 2d       	mov	r22, r12
    4dba:	7d 2d       	mov	r23, r13
    4dbc:	8e 2d       	mov	r24, r14
    4dbe:	9f 2d       	mov	r25, r15
    4dc0:	04 c0       	rjmp	.+8      	; 0x4dca <create_chain+0x1de>
		if (fs->free_clust != 0xFFFFFFFF) {
			fs->free_clust--;
			fs->fsi_flag |= 1;
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    4dc2:	6f ef       	ldi	r22, 0xFF	; 255
    4dc4:	7f ef       	ldi	r23, 0xFF	; 255
    4dc6:	8f ef       	ldi	r24, 0xFF	; 255
    4dc8:	9f ef       	ldi	r25, 0xFF	; 255
	}

	return ncl;		/* Return new cluster number or error code */
}
    4dca:	df 91       	pop	r29
    4dcc:	cf 91       	pop	r28
    4dce:	1f 91       	pop	r17
    4dd0:	0f 91       	pop	r16
    4dd2:	ff 90       	pop	r15
    4dd4:	ef 90       	pop	r14
    4dd6:	df 90       	pop	r13
    4dd8:	cf 90       	pop	r12
    4dda:	bf 90       	pop	r11
    4ddc:	af 90       	pop	r10
    4dde:	9f 90       	pop	r9
    4de0:	8f 90       	pop	r8
    4de2:	7f 90       	pop	r7
    4de4:	6f 90       	pop	r6
    4de6:	5f 90       	pop	r5
    4de8:	4f 90       	pop	r4
    4dea:	08 95       	ret

00004dec <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    4dec:	7f 92       	push	r7
    4dee:	8f 92       	push	r8
    4df0:	9f 92       	push	r9
    4df2:	af 92       	push	r10
    4df4:	bf 92       	push	r11
    4df6:	cf 92       	push	r12
    4df8:	df 92       	push	r13
    4dfa:	ef 92       	push	r14
    4dfc:	ff 92       	push	r15
    4dfe:	0f 93       	push	r16
    4e00:	1f 93       	push	r17
    4e02:	cf 93       	push	r28
    4e04:	df 93       	push	r29
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
    4e06:	dc 01       	movw	r26, r24
    4e08:	14 96       	adiw	r26, 0x04	; 4
    4e0a:	cd 91       	ld	r28, X+
    4e0c:	dc 91       	ld	r29, X
    4e0e:	15 97       	sbiw	r26, 0x05	; 5
    4e10:	21 96       	adiw	r28, 0x01	; 1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
    4e12:	09 f4       	brne	.+2      	; 0x4e16 <dir_next+0x2a>
    4e14:	fd c0       	rjmp	.+506    	; 0x5010 <dir_next+0x224>
    4e16:	1e 96       	adiw	r26, 0x0e	; 14
    4e18:	8d 90       	ld	r8, X+
    4e1a:	9d 90       	ld	r9, X+
    4e1c:	ad 90       	ld	r10, X+
    4e1e:	bc 90       	ld	r11, X
    4e20:	51 97       	sbiw	r26, 0x11	; 17
    4e22:	81 14       	cp	r8, r1
    4e24:	91 04       	cpc	r9, r1
    4e26:	a1 04       	cpc	r10, r1
    4e28:	b1 04       	cpc	r11, r1
    4e2a:	09 f4       	brne	.+2      	; 0x4e2e <dir_next+0x42>
    4e2c:	f3 c0       	rjmp	.+486    	; 0x5014 <dir_next+0x228>
    4e2e:	7b 01       	movw	r14, r22
    4e30:	8c 01       	movw	r16, r24
		return FR_NO_FILE;

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
    4e32:	6e 01       	movw	r12, r28
    4e34:	bf e0       	ldi	r27, 0x0F	; 15
    4e36:	cb 22       	and	r12, r27
    4e38:	dd 24       	eor	r13, r13
    4e3a:	c1 14       	cp	r12, r1
    4e3c:	d1 04       	cpc	r13, r1
    4e3e:	09 f0       	breq	.+2      	; 0x4e42 <dir_next+0x56>
    4e40:	d1 c0       	rjmp	.+418    	; 0x4fe4 <dir_next+0x1f8>
		dp->sect++;					/* Next sector */
    4e42:	ef ef       	ldi	r30, 0xFF	; 255
    4e44:	8e 1a       	sub	r8, r30
    4e46:	9e 0a       	sbc	r9, r30
    4e48:	ae 0a       	sbc	r10, r30
    4e4a:	be 0a       	sbc	r11, r30
    4e4c:	dc 01       	movw	r26, r24
    4e4e:	1e 96       	adiw	r26, 0x0e	; 14
    4e50:	8d 92       	st	X+, r8
    4e52:	9d 92       	st	X+, r9
    4e54:	ad 92       	st	X+, r10
    4e56:	bc 92       	st	X, r11
    4e58:	51 97       	sbiw	r26, 0x11	; 17

		if (!dp->clust) {		/* Static table */
    4e5a:	1a 96       	adiw	r26, 0x0a	; 10
    4e5c:	4d 91       	ld	r20, X+
    4e5e:	5d 91       	ld	r21, X+
    4e60:	6d 91       	ld	r22, X+
    4e62:	7c 91       	ld	r23, X
    4e64:	1d 97       	sbiw	r26, 0x0d	; 13
    4e66:	41 15       	cp	r20, r1
    4e68:	51 05       	cpc	r21, r1
    4e6a:	61 05       	cpc	r22, r1
    4e6c:	71 05       	cpc	r23, r1
    4e6e:	49 f4       	brne	.+18     	; 0x4e82 <dir_next+0x96>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
    4e70:	ed 91       	ld	r30, X+
    4e72:	fc 91       	ld	r31, X
    4e74:	80 85       	ldd	r24, Z+8	; 0x08
    4e76:	91 85       	ldd	r25, Z+9	; 0x09
    4e78:	c8 17       	cp	r28, r24
    4e7a:	d9 07       	cpc	r29, r25
    4e7c:	08 f0       	brcs	.+2      	; 0x4e80 <dir_next+0x94>
    4e7e:	cc c0       	rjmp	.+408    	; 0x5018 <dir_next+0x22c>
    4e80:	b1 c0       	rjmp	.+354    	; 0x4fe4 <dir_next+0x1f8>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
    4e82:	dc 01       	movw	r26, r24
    4e84:	ed 91       	ld	r30, X+
    4e86:	fc 91       	ld	r31, X
    4e88:	22 81       	ldd	r18, Z+2	; 0x02
    4e8a:	30 e0       	ldi	r19, 0x00	; 0
    4e8c:	21 50       	subi	r18, 0x01	; 1
    4e8e:	31 09       	sbc	r19, r1
    4e90:	ce 01       	movw	r24, r28
    4e92:	92 95       	swap	r25
    4e94:	82 95       	swap	r24
    4e96:	8f 70       	andi	r24, 0x0F	; 15
    4e98:	89 27       	eor	r24, r25
    4e9a:	9f 70       	andi	r25, 0x0F	; 15
    4e9c:	89 27       	eor	r24, r25
    4e9e:	28 23       	and	r18, r24
    4ea0:	39 23       	and	r19, r25
    4ea2:	23 2b       	or	r18, r19
    4ea4:	09 f0       	breq	.+2      	; 0x4ea8 <dir_next+0xbc>
    4ea6:	9e c0       	rjmp	.+316    	; 0x4fe4 <dir_next+0x1f8>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
    4ea8:	cf 01       	movw	r24, r30
    4eaa:	e0 db       	rcall	.-2112   	; 0x466c <get_fat>
    4eac:	4b 01       	movw	r8, r22
    4eae:	5c 01       	movw	r10, r24
				if (clst <= 1) return FR_INT_ERR;
    4eb0:	62 30       	cpi	r22, 0x02	; 2
    4eb2:	71 05       	cpc	r23, r1
    4eb4:	81 05       	cpc	r24, r1
    4eb6:	91 05       	cpc	r25, r1
    4eb8:	08 f4       	brcc	.+2      	; 0x4ebc <dir_next+0xd0>
    4eba:	b0 c0       	rjmp	.+352    	; 0x501c <dir_next+0x230>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    4ebc:	6f 3f       	cpi	r22, 0xFF	; 255
    4ebe:	7f 4f       	sbci	r23, 0xFF	; 255
    4ec0:	8f 4f       	sbci	r24, 0xFF	; 255
    4ec2:	9f 4f       	sbci	r25, 0xFF	; 255
    4ec4:	09 f4       	brne	.+2      	; 0x4ec8 <dir_next+0xdc>
    4ec6:	ac c0       	rjmp	.+344    	; 0x5020 <dir_next+0x234>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
    4ec8:	d8 01       	movw	r26, r16
    4eca:	ed 91       	ld	r30, X+
    4ecc:	fc 91       	ld	r31, X
    4ece:	82 89       	ldd	r24, Z+18	; 0x12
    4ed0:	93 89       	ldd	r25, Z+19	; 0x13
    4ed2:	a4 89       	ldd	r26, Z+20	; 0x14
    4ed4:	b5 89       	ldd	r27, Z+21	; 0x15
    4ed6:	88 16       	cp	r8, r24
    4ed8:	99 06       	cpc	r9, r25
    4eda:	aa 06       	cpc	r10, r26
    4edc:	bb 06       	cpc	r11, r27
    4ede:	08 f4       	brcc	.+2      	; 0x4ee2 <dir_next+0xf6>
    4ee0:	70 c0       	rjmp	.+224    	; 0x4fc2 <dir_next+0x1d6>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
    4ee2:	ef 28       	or	r14, r15
    4ee4:	09 f4       	brne	.+2      	; 0x4ee8 <dir_next+0xfc>
    4ee6:	9e c0       	rjmp	.+316    	; 0x5024 <dir_next+0x238>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
    4ee8:	d8 01       	movw	r26, r16
    4eea:	1a 96       	adiw	r26, 0x0a	; 10
    4eec:	4d 91       	ld	r20, X+
    4eee:	5d 91       	ld	r21, X+
    4ef0:	6d 91       	ld	r22, X+
    4ef2:	7c 91       	ld	r23, X
    4ef4:	1d 97       	sbiw	r26, 0x0d	; 13
    4ef6:	cf 01       	movw	r24, r30
    4ef8:	79 de       	rcall	.-782    	; 0x4bec <create_chain>
    4efa:	4b 01       	movw	r8, r22
    4efc:	5c 01       	movw	r10, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    4efe:	61 15       	cp	r22, r1
    4f00:	71 05       	cpc	r23, r1
    4f02:	81 05       	cpc	r24, r1
    4f04:	91 05       	cpc	r25, r1
    4f06:	09 f4       	brne	.+2      	; 0x4f0a <dir_next+0x11e>
    4f08:	8f c0       	rjmp	.+286    	; 0x5028 <dir_next+0x23c>
					if (clst == 1) return FR_INT_ERR;
    4f0a:	61 30       	cpi	r22, 0x01	; 1
    4f0c:	71 05       	cpc	r23, r1
    4f0e:	81 05       	cpc	r24, r1
    4f10:	91 05       	cpc	r25, r1
    4f12:	09 f4       	brne	.+2      	; 0x4f16 <dir_next+0x12a>
    4f14:	8b c0       	rjmp	.+278    	; 0x502c <dir_next+0x240>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    4f16:	6f 3f       	cpi	r22, 0xFF	; 255
    4f18:	7f 4f       	sbci	r23, 0xFF	; 255
    4f1a:	8f 4f       	sbci	r24, 0xFF	; 255
    4f1c:	9f 4f       	sbci	r25, 0xFF	; 255
    4f1e:	09 f4       	brne	.+2      	; 0x4f22 <dir_next+0x136>
    4f20:	87 c0       	rjmp	.+270    	; 0x5030 <dir_next+0x244>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
    4f22:	d8 01       	movw	r26, r16
    4f24:	8d 91       	ld	r24, X+
    4f26:	9c 91       	ld	r25, X
    4f28:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <sync_window>
    4f2c:	81 11       	cpse	r24, r1
    4f2e:	82 c0       	rjmp	.+260    	; 0x5034 <dir_next+0x248>
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
    4f30:	f8 01       	movw	r30, r16
    4f32:	80 81       	ld	r24, Z
    4f34:	91 81       	ldd	r25, Z+1	; 0x01
    4f36:	fc 01       	movw	r30, r24
    4f38:	be 96       	adiw	r30, 0x2e	; 46
    4f3a:	82 5d       	subi	r24, 0xD2	; 210
    4f3c:	9d 4f       	sbci	r25, 0xFD	; 253
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    4f3e:	11 92       	st	Z+, r1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    4f40:	e8 17       	cp	r30, r24
    4f42:	f9 07       	cpc	r31, r25
    4f44:	e1 f7       	brne	.-8      	; 0x4f3e <dir_next+0x152>
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
    4f46:	d8 01       	movw	r26, r16
    4f48:	ed 90       	ld	r14, X+
    4f4a:	fc 90       	ld	r15, X
    4f4c:	b5 01       	movw	r22, r10
    4f4e:	a4 01       	movw	r20, r8
    4f50:	c7 01       	movw	r24, r14
    4f52:	64 db       	rcall	.-2360   	; 0x461c <clust2sect>
    4f54:	f7 01       	movw	r30, r14
    4f56:	62 a7       	std	Z+42, r22	; 0x2a
    4f58:	73 a7       	std	Z+43, r23	; 0x2b
    4f5a:	84 a7       	std	Z+44, r24	; 0x2c
    4f5c:	95 a7       	std	Z+45, r25	; 0x2d
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
    4f5e:	e1 2c       	mov	r14, r1
    4f60:	f1 2c       	mov	r15, r1
						dp->fs->wflag = 1;
    4f62:	77 24       	eor	r7, r7
    4f64:	73 94       	inc	r7
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
    4f66:	19 c0       	rjmp	.+50     	; 0x4f9a <dir_next+0x1ae>
						dp->fs->wflag = 1;
    4f68:	74 82       	std	Z+4, r7	; 0x04
						if (sync_window(dp->fs)) return FR_DISK_ERR;
    4f6a:	d8 01       	movw	r26, r16
    4f6c:	8d 91       	ld	r24, X+
    4f6e:	9c 91       	ld	r25, X
    4f70:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <sync_window>
    4f74:	81 11       	cpse	r24, r1
    4f76:	60 c0       	rjmp	.+192    	; 0x5038 <dir_next+0x24c>
						dp->fs->winsect++;
    4f78:	d8 01       	movw	r26, r16
    4f7a:	ed 91       	ld	r30, X+
    4f7c:	fc 91       	ld	r31, X
    4f7e:	82 a5       	ldd	r24, Z+42	; 0x2a
    4f80:	93 a5       	ldd	r25, Z+43	; 0x2b
    4f82:	a4 a5       	ldd	r26, Z+44	; 0x2c
    4f84:	b5 a5       	ldd	r27, Z+45	; 0x2d
    4f86:	01 96       	adiw	r24, 0x01	; 1
    4f88:	a1 1d       	adc	r26, r1
    4f8a:	b1 1d       	adc	r27, r1
    4f8c:	82 a7       	std	Z+42, r24	; 0x2a
    4f8e:	93 a7       	std	Z+43, r25	; 0x2b
    4f90:	a4 a7       	std	Z+44, r26	; 0x2c
    4f92:	b5 a7       	std	Z+45, r27	; 0x2d
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
    4f94:	bf ef       	ldi	r27, 0xFF	; 255
    4f96:	eb 1a       	sub	r14, r27
    4f98:	fb 0a       	sbc	r15, r27
    4f9a:	d8 01       	movw	r26, r16
    4f9c:	ed 91       	ld	r30, X+
    4f9e:	fc 91       	ld	r31, X
    4fa0:	82 81       	ldd	r24, Z+2	; 0x02
    4fa2:	90 e0       	ldi	r25, 0x00	; 0
    4fa4:	e8 16       	cp	r14, r24
    4fa6:	f9 06       	cpc	r15, r25
    4fa8:	f8 f2       	brcs	.-66     	; 0x4f68 <dir_next+0x17c>
						dp->fs->wflag = 1;
						if (sync_window(dp->fs)) return FR_DISK_ERR;
						dp->fs->winsect++;
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
    4faa:	82 a5       	ldd	r24, Z+42	; 0x2a
    4fac:	93 a5       	ldd	r25, Z+43	; 0x2b
    4fae:	a4 a5       	ldd	r26, Z+44	; 0x2c
    4fb0:	b5 a5       	ldd	r27, Z+45	; 0x2d
    4fb2:	8e 19       	sub	r24, r14
    4fb4:	9f 09       	sbc	r25, r15
    4fb6:	a1 09       	sbc	r26, r1
    4fb8:	b1 09       	sbc	r27, r1
    4fba:	82 a7       	std	Z+42, r24	; 0x2a
    4fbc:	93 a7       	std	Z+43, r25	; 0x2b
    4fbe:	a4 a7       	std	Z+44, r26	; 0x2c
    4fc0:	b5 a7       	std	Z+45, r27	; 0x2d
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
    4fc2:	f8 01       	movw	r30, r16
    4fc4:	82 86       	std	Z+10, r8	; 0x0a
    4fc6:	93 86       	std	Z+11, r9	; 0x0b
    4fc8:	a4 86       	std	Z+12, r10	; 0x0c
    4fca:	b5 86       	std	Z+13, r11	; 0x0d
				dp->sect = clust2sect(dp->fs, clst);
    4fcc:	b5 01       	movw	r22, r10
    4fce:	a4 01       	movw	r20, r8
    4fd0:	80 81       	ld	r24, Z
    4fd2:	91 81       	ldd	r25, Z+1	; 0x01
    4fd4:	23 db       	rcall	.-2490   	; 0x461c <clust2sect>
    4fd6:	d8 01       	movw	r26, r16
    4fd8:	1e 96       	adiw	r26, 0x0e	; 14
    4fda:	6d 93       	st	X+, r22
    4fdc:	7d 93       	st	X+, r23
    4fde:	8d 93       	st	X+, r24
    4fe0:	9c 93       	st	X, r25
    4fe2:	51 97       	sbiw	r26, 0x11	; 17
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
    4fe4:	f8 01       	movw	r30, r16
    4fe6:	d5 83       	std	Z+5, r29	; 0x05
    4fe8:	c4 83       	std	Z+4, r28	; 0x04
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
    4fea:	80 81       	ld	r24, Z
    4fec:	91 81       	ldd	r25, Z+1	; 0x01
    4fee:	8e 96       	adiw	r24, 0x2e	; 46
    4ff0:	cc 0c       	add	r12, r12
    4ff2:	dd 1c       	adc	r13, r13
    4ff4:	cc 0c       	add	r12, r12
    4ff6:	dd 1c       	adc	r13, r13
    4ff8:	cc 0c       	add	r12, r12
    4ffa:	dd 1c       	adc	r13, r13
    4ffc:	cc 0c       	add	r12, r12
    4ffe:	dd 1c       	adc	r13, r13
    5000:	cc 0c       	add	r12, r12
    5002:	dd 1c       	adc	r13, r13
    5004:	c8 0e       	add	r12, r24
    5006:	d9 1e       	adc	r13, r25
    5008:	d3 8a       	std	Z+19, r13	; 0x13
    500a:	c2 8a       	std	Z+18, r12	; 0x12

	return FR_OK;
    500c:	80 e0       	ldi	r24, 0x00	; 0
    500e:	15 c0       	rjmp	.+42     	; 0x503a <dir_next+0x24e>
#endif


	i = dp->index + 1;
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;
    5010:	84 e0       	ldi	r24, 0x04	; 4
    5012:	13 c0       	rjmp	.+38     	; 0x503a <dir_next+0x24e>
    5014:	84 e0       	ldi	r24, 0x04	; 4
    5016:	11 c0       	rjmp	.+34     	; 0x503a <dir_next+0x24e>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
		dp->sect++;					/* Next sector */

		if (!dp->clust) {		/* Static table */
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
				return FR_NO_FILE;
    5018:	84 e0       	ldi	r24, 0x04	; 4
    501a:	0f c0       	rjmp	.+30     	; 0x503a <dir_next+0x24e>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;
    501c:	82 e0       	ldi	r24, 0x02	; 2
    501e:	0d c0       	rjmp	.+26     	; 0x503a <dir_next+0x24e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    5020:	81 e0       	ldi	r24, 0x01	; 1
    5022:	0b c0       	rjmp	.+22     	; 0x503a <dir_next+0x24e>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
    5024:	84 e0       	ldi	r24, 0x04	; 4
    5026:	09 c0       	rjmp	.+18     	; 0x503a <dir_next+0x24e>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    5028:	87 e0       	ldi	r24, 0x07	; 7
    502a:	07 c0       	rjmp	.+14     	; 0x503a <dir_next+0x24e>
					if (clst == 1) return FR_INT_ERR;
    502c:	82 e0       	ldi	r24, 0x02	; 2
    502e:	05 c0       	rjmp	.+10     	; 0x503a <dir_next+0x24e>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    5030:	81 e0       	ldi	r24, 0x01	; 1
    5032:	03 c0       	rjmp	.+6      	; 0x503a <dir_next+0x24e>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
    5034:	81 e0       	ldi	r24, 0x01	; 1
    5036:	01 c0       	rjmp	.+2      	; 0x503a <dir_next+0x24e>
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dp->fs->wflag = 1;
						if (sync_window(dp->fs)) return FR_DISK_ERR;
    5038:	81 e0       	ldi	r24, 0x01	; 1

	dp->index = (WORD)i;	/* Current index */
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */

	return FR_OK;
}
    503a:	df 91       	pop	r29
    503c:	cf 91       	pop	r28
    503e:	1f 91       	pop	r17
    5040:	0f 91       	pop	r16
    5042:	ff 90       	pop	r15
    5044:	ef 90       	pop	r14
    5046:	df 90       	pop	r13
    5048:	cf 90       	pop	r12
    504a:	bf 90       	pop	r11
    504c:	af 90       	pop	r10
    504e:	9f 90       	pop	r9
    5050:	8f 90       	pop	r8
    5052:	7f 90       	pop	r7
    5054:	08 95       	ret

00005056 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
    5056:	1f 93       	push	r17
    5058:	cf 93       	push	r28
    505a:	df 93       	push	r29
    505c:	00 d0       	rcall	.+0      	; 0x505e <f_mount+0x8>
    505e:	00 d0       	rcall	.+0      	; 0x5060 <f_mount+0xa>
    5060:	00 d0       	rcall	.+0      	; 0x5062 <f_mount+0xc>
    5062:	cd b7       	in	r28, 0x3d	; 61
    5064:	de b7       	in	r29, 0x3e	; 62
    5066:	9c 83       	std	Y+4, r25	; 0x04
    5068:	8b 83       	std	Y+3, r24	; 0x03
    506a:	7e 83       	std	Y+6, r23	; 0x06
    506c:	6d 83       	std	Y+5, r22	; 0x05
    506e:	14 2f       	mov	r17, r20
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
    5070:	7a 83       	std	Y+2, r23	; 0x02
    5072:	69 83       	std	Y+1, r22	; 0x01

	vol = get_ldnumber(&rp);
    5074:	ce 01       	movw	r24, r28
    5076:	01 96       	adiw	r24, 0x01	; 1
    5078:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
    507c:	99 23       	and	r25, r25
    507e:	34 f1       	brlt	.+76     	; 0x50cc <f_mount+0x76>
	cfs = FatFs[vol];					/* Pointer to fs object */
    5080:	fc 01       	movw	r30, r24
    5082:	ee 0f       	add	r30, r30
    5084:	ff 1f       	adc	r31, r31
    5086:	eb 5f       	subi	r30, 0xFB	; 251
    5088:	fe 4e       	sbci	r31, 0xEE	; 238
    508a:	01 90       	ld	r0, Z+
    508c:	f0 81       	ld	r31, Z
    508e:	e0 2d       	mov	r30, r0

	if (cfs) {
    5090:	30 97       	sbiw	r30, 0x00	; 0
    5092:	09 f0       	breq	.+2      	; 0x5096 <f_mount+0x40>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
    5094:	10 82       	st	Z, r1
	}

	if (fs) {
    5096:	eb 81       	ldd	r30, Y+3	; 0x03
    5098:	fc 81       	ldd	r31, Y+4	; 0x04
    509a:	30 97       	sbiw	r30, 0x00	; 0
    509c:	e9 f0       	breq	.+58     	; 0x50d8 <f_mount+0x82>
		fs->fs_type = 0;				/* Clear new fs object */
    509e:	10 82       	st	Z, r1
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    50a0:	2b 81       	ldd	r18, Y+3	; 0x03
    50a2:	3c 81       	ldd	r19, Y+4	; 0x04
    50a4:	88 0f       	add	r24, r24
    50a6:	99 1f       	adc	r25, r25
    50a8:	fc 01       	movw	r30, r24
    50aa:	eb 5f       	subi	r30, 0xFB	; 251
    50ac:	fe 4e       	sbci	r31, 0xEE	; 238
    50ae:	31 83       	std	Z+1, r19	; 0x01
    50b0:	20 83       	st	Z, r18

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    50b2:	23 2b       	or	r18, r19
    50b4:	69 f0       	breq	.+26     	; 0x50d0 <f_mount+0x7a>
    50b6:	11 30       	cpi	r17, 0x01	; 1
    50b8:	69 f4       	brne	.+26     	; 0x50d4 <f_mount+0x7e>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
    50ba:	40 e0       	ldi	r20, 0x00	; 0
    50bc:	be 01       	movw	r22, r28
    50be:	6b 5f       	subi	r22, 0xFB	; 251
    50c0:	7f 4f       	sbci	r23, 0xFF	; 255
    50c2:	ce 01       	movw	r24, r28
    50c4:	03 96       	adiw	r24, 0x03	; 3
    50c6:	0e 94 26 20 	call	0x404c	; 0x404c <find_volume>
	LEAVE_FF(fs, res);
    50ca:	0e c0       	rjmp	.+28     	; 0x50e8 <f_mount+0x92>
	int vol;
	FRESULT res;
	const TCHAR *rp = path;

	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
    50cc:	8b e0       	ldi	r24, 0x0B	; 11
    50ce:	0c c0       	rjmp	.+24     	; 0x50e8 <f_mount+0x92>
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    50d0:	80 e0       	ldi	r24, 0x00	; 0
    50d2:	0a c0       	rjmp	.+20     	; 0x50e8 <f_mount+0x92>
    50d4:	80 e0       	ldi	r24, 0x00	; 0
    50d6:	08 c0       	rjmp	.+16     	; 0x50e8 <f_mount+0x92>
		fs->fs_type = 0;				/* Clear new fs object */
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    50d8:	88 0f       	add	r24, r24
    50da:	99 1f       	adc	r25, r25
    50dc:	fc 01       	movw	r30, r24
    50de:	eb 5f       	subi	r30, 0xFB	; 251
    50e0:	fe 4e       	sbci	r31, 0xEE	; 238
    50e2:	11 82       	std	Z+1, r1	; 0x01
    50e4:	10 82       	st	Z, r1

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    50e6:	80 e0       	ldi	r24, 0x00	; 0

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
    50e8:	26 96       	adiw	r28, 0x06	; 6
    50ea:	0f b6       	in	r0, 0x3f	; 63
    50ec:	f8 94       	cli
    50ee:	de bf       	out	0x3e, r29	; 62
    50f0:	0f be       	out	0x3f, r0	; 63
    50f2:	cd bf       	out	0x3d, r28	; 61
    50f4:	df 91       	pop	r29
    50f6:	cf 91       	pop	r28
    50f8:	1f 91       	pop	r17
    50fa:	08 95       	ret

000050fc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    50fc:	2f 92       	push	r2
    50fe:	3f 92       	push	r3
    5100:	4f 92       	push	r4
    5102:	5f 92       	push	r5
    5104:	6f 92       	push	r6
    5106:	7f 92       	push	r7
    5108:	8f 92       	push	r8
    510a:	9f 92       	push	r9
    510c:	af 92       	push	r10
    510e:	bf 92       	push	r11
    5110:	cf 92       	push	r12
    5112:	df 92       	push	r13
    5114:	ef 92       	push	r14
    5116:	ff 92       	push	r15
    5118:	0f 93       	push	r16
    511a:	1f 93       	push	r17
    511c:	cf 93       	push	r28
    511e:	df 93       	push	r29
    5120:	cd b7       	in	r28, 0x3d	; 61
    5122:	de b7       	in	r29, 0x3e	; 62
    5124:	ae 97       	sbiw	r28, 0x2e	; 46
    5126:	0f b6       	in	r0, 0x3f	; 63
    5128:	f8 94       	cli
    512a:	de bf       	out	0x3e, r29	; 62
    512c:	0f be       	out	0x3f, r0	; 63
    512e:	cd bf       	out	0x3d, r28	; 61
    5130:	7c a3       	std	Y+36, r23	; 0x24
    5132:	6b a3       	std	Y+35, r22	; 0x23
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
    5134:	00 97       	sbiw	r24, 0x00	; 0
    5136:	09 f4       	brne	.+2      	; 0x513a <f_open+0x3e>
    5138:	92 c2       	rjmp	.+1316   	; 0x565e <f_open+0x562>
    513a:	84 2e       	mov	r8, r20
    513c:	1c 01       	movw	r2, r24
	fp->fs = 0;			/* Clear file object */
    513e:	dc 01       	movw	r26, r24
    5140:	1d 92       	st	X+, r1
    5142:	1c 92       	st	X, r1

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
    5144:	4e 71       	andi	r20, 0x1E	; 30
    5146:	be 01       	movw	r22, r28
    5148:	6d 5d       	subi	r22, 0xDD	; 221
    514a:	7f 4f       	sbci	r23, 0xFF	; 255
    514c:	ce 01       	movw	r24, r28
    514e:	01 96       	adiw	r24, 0x01	; 1
    5150:	0e 94 26 20 	call	0x404c	; 0x404c <find_volume>
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
    5154:	81 11       	cpse	r24, r1
    5156:	ec c2       	rjmp	.+1496   	; 0x5730 <f_open+0x634>
		INIT_BUF(dj);
    5158:	ce 01       	movw	r24, r28
    515a:	47 96       	adiw	r24, 0x17	; 23
    515c:	9e 8b       	std	Y+22, r25	; 0x16
    515e:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);	/* Follow the file path */
    5160:	cb a0       	ldd	r12, Y+35	; 0x23
    5162:	dc a0       	ldd	r13, Y+36	; 0x24
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
    5164:	f6 01       	movw	r30, r12
    5166:	80 81       	ld	r24, Z
    5168:	8f 32       	cpi	r24, 0x2F	; 47
    516a:	11 f0       	breq	.+4      	; 0x5170 <f_open+0x74>
    516c:	8c 35       	cpi	r24, 0x5C	; 92
    516e:	19 f4       	brne	.+6      	; 0x5176 <f_open+0x7a>
		path++;
    5170:	ff ef       	ldi	r31, 0xFF	; 255
    5172:	cf 1a       	sub	r12, r31
    5174:	df 0a       	sbc	r13, r31
	if (!fp) return FR_INVALID_OBJECT;
	fp->fs = 0;			/* Clear file object */

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    5176:	28 2d       	mov	r18, r8
    5178:	2f 71       	andi	r18, 0x1F	; 31
    517a:	2d a7       	std	Y+45, r18	; 0x2d
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
		path++;
	dp->sclust = 0;							/* Always start from the root directory */
    517c:	1f 82       	std	Y+7, r1	; 0x07
    517e:	18 86       	std	Y+8, r1	; 0x08
    5180:	19 86       	std	Y+9, r1	; 0x09
    5182:	1a 86       	std	Y+10, r1	; 0x0a
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
    5184:	d6 01       	movw	r26, r12
    5186:	8c 91       	ld	r24, X
    5188:	80 32       	cpi	r24, 0x20	; 32
    518a:	68 f4       	brcc	.+26     	; 0x51a6 <f_open+0xaa>
		res = dir_sdi(dp, 0);
    518c:	60 e0       	ldi	r22, 0x00	; 0
    518e:	70 e0       	ldi	r23, 0x00	; 0
    5190:	ce 01       	movw	r24, r28
    5192:	01 96       	adiw	r24, 0x01	; 1
    5194:	4e db       	rcall	.-2404   	; 0x4832 <dir_sdi>
		dp->dir = 0;
    5196:	1c 8a       	std	Y+20, r1	; 0x14
    5198:	1b 8a       	std	Y+19, r1	; 0x13
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);	/* Follow the file path */
		dir = dj.dir;
    519a:	e1 2c       	mov	r14, r1
    519c:	f1 2c       	mov	r15, r1
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
    519e:	88 23       	and	r24, r24
    51a0:	09 f4       	brne	.+2      	; 0x51a4 <f_open+0xa8>
    51a2:	92 c2       	rjmp	.+1316   	; 0x56c8 <f_open+0x5cc>
    51a4:	98 c2       	rjmp	.+1328   	; 0x56d6 <f_open+0x5da>
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    51a6:	68 94       	set
    51a8:	bb 24       	eor	r11, r11
    51aa:	b5 f8       	bld	r11, 5
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    51ac:	a1 2c       	mov	r10, r1
    51ae:	71 2c       	mov	r7, r1
    51b0:	68 94       	set
    51b2:	66 24       	eor	r6, r6
    51b4:	63 f8       	bld	r6, 3
    51b6:	41 2c       	mov	r4, r1
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    51b8:	56 2c       	mov	r5, r6
    51ba:	4e a6       	std	Y+46, r4	; 0x2e
    51bc:	f6 01       	movw	r30, r12
    51be:	03 c0       	rjmp	.+6      	; 0x51c6 <f_open+0xca>
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    51c0:	fd 01       	movw	r30, r26
    51c2:	01 c0       	rjmp	.+2      	; 0x51c6 <f_open+0xca>
    51c4:	fd 01       	movw	r30, r26
    51c6:	9f 01       	movw	r18, r30
    51c8:	df 01       	movw	r26, r30
    51ca:	8d 91       	ld	r24, X+
    51cc:	8f 32       	cpi	r24, 0x2F	; 47
    51ce:	c1 f3       	breq	.-16     	; 0x51c0 <f_open+0xc4>
    51d0:	8c 35       	cpi	r24, 0x5C	; 92
    51d2:	c1 f3       	breq	.-16     	; 0x51c4 <f_open+0xc8>
	sfn = dp->fn;
    51d4:	6d 89       	ldd	r22, Y+21	; 0x15
    51d6:	7e 89       	ldd	r23, Y+22	; 0x16
    51d8:	db 01       	movw	r26, r22
    51da:	cb 01       	movw	r24, r22
    51dc:	0b 96       	adiw	r24, 0x0b	; 11
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    51de:	bd 92       	st	X+, r11
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    51e0:	a8 17       	cp	r26, r24
    51e2:	b9 07       	cpc	r27, r25
    51e4:	e1 f7       	brne	.-8      	; 0x51de <f_open+0xe2>
    51e6:	4a 2d       	mov	r20, r10
    51e8:	57 2d       	mov	r21, r7
    51ea:	c1 2c       	mov	r12, r1
    51ec:	d1 2c       	mov	r13, r1
    51ee:	e6 2c       	mov	r14, r6
    51f0:	f4 2c       	mov	r15, r4
    51f2:	91 2c       	mov	r9, r1
    51f4:	3a a7       	std	Y+42, r19	; 0x2a
    51f6:	29 a7       	std	Y+41, r18	; 0x29
    51f8:	7e a3       	std	Y+38, r23	; 0x26
    51fa:	6d a3       	std	Y+37, r22	; 0x25
    51fc:	39 2d       	mov	r19, r9
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    51fe:	bf ef       	ldi	r27, 0xFF	; 255
    5200:	cb 1a       	sub	r12, r27
    5202:	db 0a       	sbc	r13, r27
    5204:	71 91       	ld	r23, Z+
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    5206:	71 32       	cpi	r23, 0x21	; 33
    5208:	08 f4       	brcc	.+2      	; 0x520c <f_open+0x110>
    520a:	3a c2       	rjmp	.+1140   	; 0x5680 <f_open+0x584>
    520c:	7f 32       	cpi	r23, 0x2F	; 47
    520e:	09 f4       	brne	.+2      	; 0x5212 <f_open+0x116>
    5210:	2e c2       	rjmp	.+1116   	; 0x566e <f_open+0x572>
    5212:	7c 35       	cpi	r23, 0x5C	; 92
    5214:	09 f4       	brne	.+2      	; 0x5218 <f_open+0x11c>
    5216:	2b c2       	rjmp	.+1110   	; 0x566e <f_open+0x572>
		if (c == '.' || i >= ni) {
    5218:	7e 32       	cpi	r23, 0x2E	; 46
    521a:	19 f0       	breq	.+6      	; 0x5222 <f_open+0x126>
    521c:	4e 15       	cp	r20, r14
    521e:	5f 05       	cpc	r21, r15
    5220:	90 f0       	brcs	.+36     	; 0x5246 <f_open+0x14a>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    5222:	28 e0       	ldi	r18, 0x08	; 8
    5224:	e2 16       	cp	r14, r18
    5226:	f1 04       	cpc	r15, r1
    5228:	09 f0       	breq	.+2      	; 0x522c <f_open+0x130>
    522a:	6e c2       	rjmp	.+1244   	; 0x5708 <f_open+0x60c>
    522c:	7e 32       	cpi	r23, 0x2E	; 46
    522e:	09 f0       	breq	.+2      	; 0x5232 <f_open+0x136>
    5230:	6b c2       	rjmp	.+1238   	; 0x5708 <f_open+0x60c>
			i = 8; ni = 11;
			b <<= 2; continue;
    5232:	33 0f       	add	r19, r19
    5234:	33 0f       	add	r19, r19
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    5236:	45 2d       	mov	r20, r5
    5238:	5e a5       	ldd	r21, Y+46	; 0x2e
    523a:	0f 2e       	mov	r0, r31
    523c:	fb e0       	ldi	r31, 0x0B	; 11
    523e:	ef 2e       	mov	r14, r31
    5240:	f0 2d       	mov	r31, r0
    5242:	f1 2c       	mov	r15, r1
    5244:	dc cf       	rjmp	.-72     	; 0x51fe <f_open+0x102>
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended character? */
    5246:	77 23       	and	r23, r23
    5248:	0c f4       	brge	.+2      	; 0x524c <f_open+0x150>
    524a:	5e c2       	rjmp	.+1212   	; 0x5708 <f_open+0x60c>
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
    524c:	07 2f       	mov	r16, r23
    524e:	10 e0       	ldi	r17, 0x00	; 0
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    5250:	02 32       	cpi	r16, 0x22	; 34
    5252:	11 05       	cpc	r17, r1
    5254:	09 f4       	brne	.+2      	; 0x5258 <f_open+0x15c>
    5256:	2c c2       	rjmp	.+1112   	; 0x56b0 <f_open+0x5b4>
    5258:	ab ed       	ldi	r26, 0xDB	; 219
    525a:	b1 e0       	ldi	r27, 0x01	; 1
    525c:	8d 91       	ld	r24, X+
    525e:	88 23       	and	r24, r24
    5260:	09 f4       	brne	.+2      	; 0x5264 <f_open+0x168>
    5262:	ff c1       	rjmp	.+1022   	; 0x5662 <f_open+0x566>
    5264:	90 e0       	ldi	r25, 0x00	; 0
    5266:	08 17       	cp	r16, r24
    5268:	19 07       	cpc	r17, r25
    526a:	c1 f7       	brne	.-16     	; 0x525c <f_open+0x160>
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
    526c:	86 e0       	ldi	r24, 0x06	; 6
    526e:	25 c2       	rjmp	.+1098   	; 0x56ba <f_open+0x5be>
			if (IsUpper(c)) {			/* ASCII large capital? */
				b |= 2;
    5270:	32 60       	ori	r19, 0x02	; 2
    5272:	06 c0       	rjmp	.+12     	; 0x5280 <f_open+0x184>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    5274:	8f e9       	ldi	r24, 0x9F	; 159
    5276:	87 0f       	add	r24, r23
    5278:	8a 31       	cpi	r24, 0x1A	; 26
    527a:	10 f4       	brcc	.+4      	; 0x5280 <f_open+0x184>
					b |= 1; c -= 0x20;
    527c:	31 60       	ori	r19, 0x01	; 1
    527e:	70 52       	subi	r23, 0x20	; 32
				}
			}
			sfn[i++] = c;
    5280:	ad a1       	ldd	r26, Y+37	; 0x25
    5282:	be a1       	ldd	r27, Y+38	; 0x26
    5284:	a4 0f       	add	r26, r20
    5286:	b5 1f       	adc	r27, r21
    5288:	7c 93       	st	X, r23
    528a:	4f 5f       	subi	r20, 0xFF	; 255
    528c:	5f 4f       	sbci	r21, 0xFF	; 255
    528e:	b7 cf       	rjmp	.-146    	; 0x51fe <f_open+0x102>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    5290:	45 2b       	or	r20, r21
    5292:	09 f4       	brne	.+2      	; 0x5296 <f_open+0x19a>
    5294:	39 c2       	rjmp	.+1138   	; 0x5708 <f_open+0x60c>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
    5296:	db 01       	movw	r26, r22
    5298:	9c 91       	ld	r25, X
    529a:	95 3e       	cpi	r25, 0xE5	; 229
    529c:	11 f4       	brne	.+4      	; 0x52a2 <f_open+0x1a6>
    529e:	e5 e0       	ldi	r30, 0x05	; 5
    52a0:	ec 93       	st	X, r30

	if (ni == 8) b <<= 2;
    52a2:	f8 e0       	ldi	r31, 0x08	; 8
    52a4:	ef 16       	cp	r14, r31
    52a6:	f1 04       	cpc	r15, r1
    52a8:	11 f4       	brne	.+4      	; 0x52ae <f_open+0x1b2>
    52aa:	99 0c       	add	r9, r9
    52ac:	99 0c       	add	r9, r9
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    52ae:	99 2d       	mov	r25, r9
    52b0:	93 70       	andi	r25, 0x03	; 3
    52b2:	91 30       	cpi	r25, 0x01	; 1
    52b4:	09 f4       	brne	.+2      	; 0x52b8 <f_open+0x1bc>
    52b6:	80 61       	ori	r24, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    52b8:	99 2d       	mov	r25, r9
    52ba:	9c 70       	andi	r25, 0x0C	; 12
    52bc:	94 30       	cpi	r25, 0x04	; 4
    52be:	09 f4       	brne	.+2      	; 0x52c2 <f_open+0x1c6>
    52c0:	88 60       	ori	r24, 0x08	; 8

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
    52c2:	db 01       	movw	r26, r22
    52c4:	1b 96       	adiw	r26, 0x0b	; 11
    52c6:	8c 93       	st	X, r24
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
    52c8:	6a 2d       	mov	r22, r10
    52ca:	77 2d       	mov	r23, r7
    52cc:	ce 01       	movw	r24, r28
    52ce:	01 96       	adiw	r24, 0x01	; 1
    52d0:	b0 da       	rcall	.-2720   	; 0x4832 <dir_sdi>
	if (res != FR_OK) return res;
    52d2:	81 11       	cpse	r24, r1
    52d4:	e3 c1       	rjmp	.+966    	; 0x569c <f_open+0x5a0>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
    52d6:	4f 85       	ldd	r20, Y+15	; 0x0f
    52d8:	58 89       	ldd	r21, Y+16	; 0x10
    52da:	69 89       	ldd	r22, Y+17	; 0x11
    52dc:	7a 89       	ldd	r23, Y+18	; 0x12
    52de:	89 81       	ldd	r24, Y+1	; 0x01
    52e0:	9a 81       	ldd	r25, Y+2	; 0x02
    52e2:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <move_window>
		if (res != FR_OK) break;
    52e6:	81 11       	cpse	r24, r1
    52e8:	d9 c1       	rjmp	.+946    	; 0x569c <f_open+0x5a0>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
    52ea:	eb 88       	ldd	r14, Y+19	; 0x13
    52ec:	fc 88       	ldd	r15, Y+20	; 0x14
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    52ee:	f7 01       	movw	r30, r14
    52f0:	80 81       	ld	r24, Z
    52f2:	88 23       	and	r24, r24
    52f4:	d1 f0       	breq	.+52     	; 0x532a <f_open+0x22e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
    52f6:	63 85       	ldd	r22, Z+11	; 0x0b
    52f8:	63 fd       	sbrc	r22, 3
    52fa:	0f c0       	rjmp	.+30     	; 0x531a <f_open+0x21e>
    52fc:	4d 89       	ldd	r20, Y+21	; 0x15
    52fe:	5e 89       	ldd	r21, Y+22	; 0x16
    5300:	da 01       	movw	r26, r20
    5302:	97 01       	movw	r18, r14
    5304:	25 5f       	subi	r18, 0xF5	; 245
    5306:	3f 4f       	sbci	r19, 0xFF	; 255
    5308:	04 c0       	rjmp	.+8      	; 0x5312 <f_open+0x216>
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    530a:	2e 17       	cp	r18, r30
    530c:	3f 07       	cpc	r19, r31
    530e:	09 f4       	brne	.+2      	; 0x5312 <f_open+0x216>
    5310:	c0 c1       	rjmp	.+896    	; 0x5692 <f_open+0x596>
    5312:	91 91       	ld	r25, Z+
    5314:	8d 91       	ld	r24, X+
    5316:	98 17       	cp	r25, r24
    5318:	c1 f3       	breq	.-16     	; 0x530a <f_open+0x20e>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
    531a:	6a 2d       	mov	r22, r10
    531c:	77 2d       	mov	r23, r7
    531e:	ce 01       	movw	r24, r28
    5320:	01 96       	adiw	r24, 0x01	; 1
    5322:	64 dd       	rcall	.-1336   	; 0x4dec <dir_next>
	} while (res == FR_OK);
    5324:	88 23       	and	r24, r24
    5326:	b9 f2       	breq	.-82     	; 0x52d6 <f_open+0x1da>
    5328:	b9 c1       	rjmp	.+882    	; 0x569c <f_open+0x5a0>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the sagment name */
			ns = dp->fn[NSFLAG];
    532a:	ed 89       	ldd	r30, Y+21	; 0x15
    532c:	fe 89       	ldd	r31, Y+22	; 0x16
    532e:	93 85       	ldd	r25, Z+11	; 0x0b
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    5330:	92 fd       	sbrc	r25, 2
    5332:	c0 c1       	rjmp	.+896    	; 0x56b4 <f_open+0x5b8>
    5334:	85 e0       	ldi	r24, 0x05	; 5
    5336:	c1 c1       	rjmp	.+898    	; 0x56ba <f_open+0x5be>
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			dir = dp->dir;						/* Follow the sub-directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
    5338:	64 ff       	sbrs	r22, 4
    533a:	be c1       	rjmp	.+892    	; 0x56b8 <f_open+0x5bc>
	BYTE* dir	/* Pointer to the directory entry */
)
{
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
    533c:	d7 01       	movw	r26, r14
    533e:	5a 96       	adiw	r26, 0x1a	; 26
    5340:	8d 91       	ld	r24, X+
    5342:	9c 91       	ld	r25, X
    5344:	5b 97       	sbiw	r26, 0x1b	; 27
    5346:	a0 e0       	ldi	r26, 0x00	; 0
    5348:	b0 e0       	ldi	r27, 0x00	; 0
	if (fs->fs_type == FS_FAT32)
    534a:	e9 81       	ldd	r30, Y+1	; 0x01
    534c:	fa 81       	ldd	r31, Y+2	; 0x02
    534e:	20 81       	ld	r18, Z
    5350:	23 30       	cpi	r18, 0x03	; 3
    5352:	61 f4       	brne	.+24     	; 0x536c <f_open+0x270>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
    5354:	f7 01       	movw	r30, r14
    5356:	44 89       	ldd	r20, Z+20	; 0x14
    5358:	55 89       	ldd	r21, Z+21	; 0x15
    535a:	60 e0       	ldi	r22, 0x00	; 0
    535c:	70 e0       	ldi	r23, 0x00	; 0
    535e:	ba 01       	movw	r22, r20
    5360:	55 27       	eor	r21, r21
    5362:	44 27       	eor	r20, r20
    5364:	84 2b       	or	r24, r20
    5366:	95 2b       	or	r25, r21
    5368:	a6 2b       	or	r26, r22
    536a:	b7 2b       	or	r27, r23
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			dir = dp->dir;						/* Follow the sub-directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
				res = FR_NO_PATH; break;
			}
			dp->sclust = ld_clust(dp->fs, dir);
    536c:	8f 83       	std	Y+7, r24	; 0x07
    536e:	98 87       	std	Y+8, r25	; 0x08
    5370:	a9 87       	std	Y+9, r26	; 0x09
    5372:	ba 87       	std	Y+10, r27	; 0x0a
    5374:	23 cf       	rjmp	.-442    	; 0x51bc <f_open+0xc0>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
			if (res != FR_OK) {					/* No file, create new */
    5376:	88 23       	and	r24, r24
    5378:	09 f4       	brne	.+2      	; 0x537c <f_open+0x280>
    537a:	53 c0       	rjmp	.+166    	; 0x5422 <f_open+0x326>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    537c:	84 30       	cpi	r24, 0x04	; 4
    537e:	09 f0       	breq	.+2      	; 0x5382 <f_open+0x286>
    5380:	48 c0       	rjmp	.+144    	; 0x5412 <f_open+0x316>
{
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
    5382:	60 e0       	ldi	r22, 0x00	; 0
    5384:	70 e0       	ldi	r23, 0x00	; 0
    5386:	ce 01       	movw	r24, r28
    5388:	01 96       	adiw	r24, 0x01	; 1
    538a:	53 da       	rcall	.-2906   	; 0x4832 <dir_sdi>
	if (res == FR_OK) {
    538c:	81 11       	cpse	r24, r1
    538e:	18 c0       	rjmp	.+48     	; 0x53c0 <f_open+0x2c4>
		n = 0;
		do {
			res = move_window(dp->fs, dp->sect);
    5390:	4f 85       	ldd	r20, Y+15	; 0x0f
    5392:	58 89       	ldd	r21, Y+16	; 0x10
    5394:	69 89       	ldd	r22, Y+17	; 0x11
    5396:	7a 89       	ldd	r23, Y+18	; 0x12
    5398:	89 81       	ldd	r24, Y+1	; 0x01
    539a:	9a 81       	ldd	r25, Y+2	; 0x02
    539c:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <move_window>
			if (res != FR_OK) break;
    53a0:	81 11       	cpse	r24, r1
    53a2:	0e c0       	rjmp	.+28     	; 0x53c0 <f_open+0x2c4>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
    53a4:	eb 89       	ldd	r30, Y+19	; 0x13
    53a6:	fc 89       	ldd	r31, Y+20	; 0x14
    53a8:	80 81       	ld	r24, Z
    53aa:	85 3e       	cpi	r24, 0xE5	; 229
    53ac:	71 f0       	breq	.+28     	; 0x53ca <f_open+0x2ce>
    53ae:	88 23       	and	r24, r24
    53b0:	61 f0       	breq	.+24     	; 0x53ca <f_open+0x2ce>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
    53b2:	61 e0       	ldi	r22, 0x01	; 1
    53b4:	70 e0       	ldi	r23, 0x00	; 0
    53b6:	ce 01       	movw	r24, r28
    53b8:	01 96       	adiw	r24, 0x01	; 1
    53ba:	18 dd       	rcall	.-1488   	; 0x4dec <dir_next>
		} while (res == FR_OK);
    53bc:	88 23       	and	r24, r24
    53be:	41 f3       	breq	.-48     	; 0x5390 <f_open+0x294>
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    53c0:	84 30       	cpi	r24, 0x04	; 4
    53c2:	09 f4       	brne	.+2      	; 0x53c6 <f_open+0x2ca>
    53c4:	a5 c1       	rjmp	.+842    	; 0x5710 <f_open+0x614>
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
    53c6:	81 11       	cpse	r24, r1
    53c8:	a6 c1       	rjmp	.+844    	; 0x5716 <f_open+0x61a>
		res = move_window(dp->fs, dp->sect);
    53ca:	4f 85       	ldd	r20, Y+15	; 0x0f
    53cc:	58 89       	ldd	r21, Y+16	; 0x10
    53ce:	69 89       	ldd	r22, Y+17	; 0x11
    53d0:	7a 89       	ldd	r23, Y+18	; 0x12
    53d2:	89 81       	ldd	r24, Y+1	; 0x01
    53d4:	9a 81       	ldd	r25, Y+2	; 0x02
    53d6:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <move_window>
		if (res == FR_OK) {
    53da:	81 11       	cpse	r24, r1
    53dc:	9c c1       	rjmp	.+824    	; 0x5716 <f_open+0x61a>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
    53de:	eb 89       	ldd	r30, Y+19	; 0x13
    53e0:	fc 89       	ldd	r31, Y+20	; 0x14
    53e2:	cf 01       	movw	r24, r30
    53e4:	80 96       	adiw	r24, 0x20	; 32
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    53e6:	11 92       	st	Z+, r1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    53e8:	e8 17       	cp	r30, r24
    53ea:	f9 07       	cpc	r31, r25
    53ec:	e1 f7       	brne	.-8      	; 0x53e6 <f_open+0x2ea>

	if (res == FR_OK) {				/* Set SFN entry */
		res = move_window(dp->fs, dp->sect);
		if (res == FR_OK) {
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
    53ee:	6d 89       	ldd	r22, Y+21	; 0x15
    53f0:	7e 89       	ldd	r23, Y+22	; 0x16
    53f2:	4b e0       	ldi	r20, 0x0B	; 11
    53f4:	50 e0       	ldi	r21, 0x00	; 0
    53f6:	8b 89       	ldd	r24, Y+19	; 0x13
    53f8:	9c 89       	ldd	r25, Y+20	; 0x14
    53fa:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
    53fe:	e9 81       	ldd	r30, Y+1	; 0x01
    5400:	fa 81       	ldd	r31, Y+2	; 0x02
    5402:	81 e0       	ldi	r24, 0x01	; 1
    5404:	84 83       	std	Z+4, r24	; 0x04
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    5406:	fd a5       	ldd	r31, Y+45	; 0x2d
    5408:	f8 60       	ori	r31, 0x08	; 8
    540a:	fd a7       	std	Y+45, r31	; 0x2d
				dir = dj.dir;					/* New entry */
    540c:	eb 88       	ldd	r14, Y+19	; 0x13
    540e:	fc 88       	ldd	r15, Y+20	; 0x14
    5410:	10 c0       	rjmp	.+32     	; 0x5432 <f_open+0x336>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    5412:	2d a5       	ldd	r18, Y+45	; 0x2d
    5414:	28 60       	ori	r18, 0x08	; 8
    5416:	2d a7       	std	Y+45, r18	; 0x2d
				dir = dj.dir;					/* New entry */
    5418:	eb 88       	ldd	r14, Y+19	; 0x13
    541a:	fc 88       	ldd	r15, Y+20	; 0x14
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    541c:	88 23       	and	r24, r24
    541e:	49 f0       	breq	.+18     	; 0x5432 <f_open+0x336>
    5420:	87 c1       	rjmp	.+782    	; 0x5730 <f_open+0x634>
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
				dir = dj.dir;					/* New entry */
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    5422:	d7 01       	movw	r26, r14
    5424:	1b 96       	adiw	r26, 0x0b	; 11
    5426:	8c 91       	ld	r24, X
    5428:	81 71       	andi	r24, 0x11	; 17
    542a:	09 f0       	breq	.+2      	; 0x542e <f_open+0x332>
    542c:	7a c1       	rjmp	.+756    	; 0x5722 <f_open+0x626>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    542e:	82 fc       	sbrc	r8, 2
    5430:	7a c1       	rjmp	.+756    	; 0x5726 <f_open+0x62a>
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    5432:	bd a5       	ldd	r27, Y+45	; 0x2d
    5434:	b3 ff       	sbrs	r27, 3
    5436:	c4 c0       	rjmp	.+392    	; 0x55c0 <f_open+0x4c4>
				dw = GET_FATTIME();				/* Created time */
				ST_DWORD(dir + DIR_CrtTime, dw);
    5438:	80 e0       	ldi	r24, 0x00	; 0
    543a:	90 e0       	ldi	r25, 0x00	; 0
    543c:	a0 ef       	ldi	r26, 0xF0	; 240
    543e:	be e4       	ldi	r27, 0x4E	; 78
    5440:	f7 01       	movw	r30, r14
    5442:	86 87       	std	Z+14, r24	; 0x0e
    5444:	97 87       	std	Z+15, r25	; 0x0f
    5446:	a0 8b       	std	Z+16, r26	; 0x10
    5448:	b1 8b       	std	Z+17, r27	; 0x11
				dir[DIR_Attr] = 0;				/* Reset attribute */
    544a:	13 86       	std	Z+11, r1	; 0x0b
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
    544c:	d7 01       	movw	r26, r14
    544e:	14 8e       	std	Z+28, r1	; 0x1c
    5450:	15 8e       	std	Z+29, r1	; 0x1d
    5452:	16 8e       	std	Z+30, r1	; 0x1e
    5454:	17 8e       	std	Z+31, r1	; 0x1f
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
    5456:	c9 80       	ldd	r12, Y+1	; 0x01
    5458:	da 80       	ldd	r13, Y+2	; 0x02
	BYTE* dir	/* Pointer to the directory entry */
)
{
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
    545a:	82 8c       	ldd	r8, Z+26	; 0x1a
    545c:	93 8c       	ldd	r9, Z+27	; 0x1b
    545e:	a1 2c       	mov	r10, r1
    5460:	b1 2c       	mov	r11, r1
	if (fs->fs_type == FS_FAT32)
    5462:	f6 01       	movw	r30, r12
    5464:	80 81       	ld	r24, Z
    5466:	83 30       	cpi	r24, 0x03	; 3
    5468:	69 f4       	brne	.+26     	; 0x5484 <f_open+0x388>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
    546a:	54 96       	adiw	r26, 0x14	; 20
    546c:	8d 91       	ld	r24, X+
    546e:	9c 91       	ld	r25, X
    5470:	55 97       	sbiw	r26, 0x15	; 21
    5472:	a0 e0       	ldi	r26, 0x00	; 0
    5474:	b0 e0       	ldi	r27, 0x00	; 0
    5476:	dc 01       	movw	r26, r24
    5478:	99 27       	eor	r25, r25
    547a:	88 27       	eor	r24, r24
    547c:	88 2a       	or	r8, r24
    547e:	99 2a       	or	r9, r25
    5480:	aa 2a       	or	r10, r26
    5482:	bb 2a       	or	r11, r27
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir + DIR_FstClusLO, cl);
    5484:	d7 01       	movw	r26, r14
    5486:	5b 96       	adiw	r26, 0x1b	; 27
    5488:	1c 92       	st	X, r1
    548a:	1e 92       	st	-X, r1
    548c:	5a 97       	sbiw	r26, 0x1a	; 26
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
    548e:	55 96       	adiw	r26, 0x15	; 21
    5490:	1c 92       	st	X, r1
    5492:	1e 92       	st	-X, r1
    5494:	54 97       	sbiw	r26, 0x14	; 20
				ST_DWORD(dir + DIR_CrtTime, dw);
				dir[DIR_Attr] = 0;				/* Reset attribute */
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
				st_clust(dir, 0);				/* cluster = 0 */
				dj.fs->wflag = 1;
    5496:	81 e0       	ldi	r24, 0x01	; 1
    5498:	f6 01       	movw	r30, r12
    549a:	84 83       	std	Z+4, r24	; 0x04
				if (cl) {						/* Remove the cluster chain if exist */
    549c:	81 14       	cp	r8, r1
    549e:	91 04       	cpc	r9, r1
    54a0:	a1 04       	cpc	r10, r1
    54a2:	b1 04       	cpc	r11, r1
    54a4:	09 f4       	brne	.+2      	; 0x54a8 <f_open+0x3ac>
    54a6:	89 c0       	rjmp	.+274    	; 0x55ba <f_open+0x4be>
					dw = dj.fs->winsect;
    54a8:	22 a5       	ldd	r18, Z+42	; 0x2a
    54aa:	33 a5       	ldd	r19, Z+43	; 0x2b
    54ac:	44 a5       	ldd	r20, Z+44	; 0x2c
    54ae:	55 a5       	ldd	r21, Z+45	; 0x2d
    54b0:	29 a7       	std	Y+41, r18	; 0x29
    54b2:	3a a7       	std	Y+42, r19	; 0x2a
    54b4:	4b a7       	std	Y+43, r20	; 0x2b
    54b6:	5c a7       	std	Y+44, r21	; 0x2c
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    54b8:	b2 e0       	ldi	r27, 0x02	; 2
    54ba:	8b 16       	cp	r8, r27
    54bc:	91 04       	cpc	r9, r1
    54be:	a1 04       	cpc	r10, r1
    54c0:	b1 04       	cpc	r11, r1
    54c2:	08 f4       	brcc	.+2      	; 0x54c6 <f_open+0x3ca>
    54c4:	12 c1       	rjmp	.+548    	; 0x56ea <f_open+0x5ee>
    54c6:	82 89       	ldd	r24, Z+18	; 0x12
    54c8:	93 89       	ldd	r25, Z+19	; 0x13
    54ca:	a4 89       	ldd	r26, Z+20	; 0x14
    54cc:	b5 89       	ldd	r27, Z+21	; 0x15
    54ce:	88 16       	cp	r8, r24
    54d0:	99 06       	cpc	r9, r25
    54d2:	aa 06       	cpc	r10, r26
    54d4:	bb 06       	cpc	r11, r27
    54d6:	08 f0       	brcs	.+2      	; 0x54da <f_open+0x3de>
    54d8:	0a c1       	rjmp	.+532    	; 0x56ee <f_open+0x5f2>
    54da:	8d a2       	std	Y+37, r8	; 0x25
    54dc:	9e a2       	std	Y+38, r9	; 0x26
    54de:	af a2       	std	Y+39, r10	; 0x27
    54e0:	b8 a6       	std	Y+40, r11	; 0x28
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    54e2:	4d a1       	ldd	r20, Y+37	; 0x25
    54e4:	5e a1       	ldd	r21, Y+38	; 0x26
    54e6:	6f a1       	ldd	r22, Y+39	; 0x27
    54e8:	78 a5       	ldd	r23, Y+40	; 0x28
    54ea:	c6 01       	movw	r24, r12
    54ec:	bf d8       	rcall	.-3714   	; 0x466c <get_fat>
    54ee:	2b 01       	movw	r4, r22
    54f0:	3c 01       	movw	r6, r24
			if (nxt == 0) break;				/* Empty cluster? */
    54f2:	61 15       	cp	r22, r1
    54f4:	71 05       	cpc	r23, r1
    54f6:	81 05       	cpc	r24, r1
    54f8:	91 05       	cpc	r25, r1
    54fa:	e1 f1       	breq	.+120    	; 0x5574 <f_open+0x478>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    54fc:	61 30       	cpi	r22, 0x01	; 1
    54fe:	71 05       	cpc	r23, r1
    5500:	81 05       	cpc	r24, r1
    5502:	91 05       	cpc	r25, r1
    5504:	09 f4       	brne	.+2      	; 0x5508 <f_open+0x40c>
    5506:	f5 c0       	rjmp	.+490    	; 0x56f2 <f_open+0x5f6>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    5508:	6f 3f       	cpi	r22, 0xFF	; 255
    550a:	7f 4f       	sbci	r23, 0xFF	; 255
    550c:	8f 4f       	sbci	r24, 0xFF	; 255
    550e:	9f 4f       	sbci	r25, 0xFF	; 255
    5510:	09 f4       	brne	.+2      	; 0x5514 <f_open+0x418>
    5512:	f1 c0       	rjmp	.+482    	; 0x56f6 <f_open+0x5fa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    5514:	00 e0       	ldi	r16, 0x00	; 0
    5516:	10 e0       	ldi	r17, 0x00	; 0
    5518:	98 01       	movw	r18, r16
    551a:	4d a1       	ldd	r20, Y+37	; 0x25
    551c:	5e a1       	ldd	r21, Y+38	; 0x26
    551e:	6f a1       	ldd	r22, Y+39	; 0x27
    5520:	78 a5       	ldd	r23, Y+40	; 0x28
    5522:	c6 01       	movw	r24, r12
    5524:	40 da       	rcall	.-2944   	; 0x49a6 <put_fat>
			if (res != FR_OK) break;
    5526:	81 11       	cpse	r24, r1
    5528:	e7 c0       	rjmp	.+462    	; 0x56f8 <f_open+0x5fc>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
    552a:	f6 01       	movw	r30, r12
    552c:	86 85       	ldd	r24, Z+14	; 0x0e
    552e:	97 85       	ldd	r25, Z+15	; 0x0f
    5530:	a0 89       	ldd	r26, Z+16	; 0x10
    5532:	b1 89       	ldd	r27, Z+17	; 0x11
    5534:	8f 3f       	cpi	r24, 0xFF	; 255
    5536:	ff ef       	ldi	r31, 0xFF	; 255
    5538:	9f 07       	cpc	r25, r31
    553a:	af 07       	cpc	r26, r31
    553c:	bf 07       	cpc	r27, r31
    553e:	59 f0       	breq	.+22     	; 0x5556 <f_open+0x45a>
				fs->free_clust++;
    5540:	01 96       	adiw	r24, 0x01	; 1
    5542:	a1 1d       	adc	r26, r1
    5544:	b1 1d       	adc	r27, r1
    5546:	f6 01       	movw	r30, r12
    5548:	86 87       	std	Z+14, r24	; 0x0e
    554a:	97 87       	std	Z+15, r25	; 0x0f
    554c:	a0 8b       	std	Z+16, r26	; 0x10
    554e:	b1 8b       	std	Z+17, r27	; 0x11
				fs->fsi_flag |= 1;
    5550:	85 81       	ldd	r24, Z+5	; 0x05
    5552:	81 60       	ori	r24, 0x01	; 1
    5554:	85 83       	std	Z+5, r24	; 0x05
    5556:	4d a2       	std	Y+37, r4	; 0x25
    5558:	5e a2       	std	Y+38, r5	; 0x26
    555a:	6f a2       	std	Y+39, r6	; 0x27
    555c:	78 a6       	std	Y+40, r7	; 0x28
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    555e:	f6 01       	movw	r30, r12
    5560:	82 89       	ldd	r24, Z+18	; 0x12
    5562:	93 89       	ldd	r25, Z+19	; 0x13
    5564:	a4 89       	ldd	r26, Z+20	; 0x14
    5566:	b5 89       	ldd	r27, Z+21	; 0x15
    5568:	48 16       	cp	r4, r24
    556a:	59 06       	cpc	r5, r25
    556c:	6a 06       	cpc	r6, r26
    556e:	7b 06       	cpc	r7, r27
    5570:	08 f4       	brcc	.+2      	; 0x5574 <f_open+0x478>
    5572:	b7 cf       	rjmp	.-146    	; 0x54e2 <f_open+0x3e6>
				dj.fs->wflag = 1;
				if (cl) {						/* Remove the cluster chain if exist */
					dw = dj.fs->winsect;
					res = remove_chain(dj.fs, cl);
					if (res == FR_OK) {
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    5574:	89 81       	ldd	r24, Y+1	; 0x01
    5576:	9a 81       	ldd	r25, Y+2	; 0x02
    5578:	f1 e0       	ldi	r31, 0x01	; 1
    557a:	8f 1a       	sub	r8, r31
    557c:	91 08       	sbc	r9, r1
    557e:	a1 08       	sbc	r10, r1
    5580:	b1 08       	sbc	r11, r1
    5582:	dc 01       	movw	r26, r24
    5584:	1a 96       	adiw	r26, 0x0a	; 10
    5586:	8d 92       	st	X+, r8
    5588:	9d 92       	st	X+, r9
    558a:	ad 92       	st	X+, r10
    558c:	bc 92       	st	X, r11
    558e:	1d 97       	sbiw	r26, 0x0d	; 13
						res = move_window(dj.fs, dw);
    5590:	49 a5       	ldd	r20, Y+41	; 0x29
    5592:	5a a5       	ldd	r21, Y+42	; 0x2a
    5594:	6b a5       	ldd	r22, Y+43	; 0x2b
    5596:	7c a5       	ldd	r23, Y+44	; 0x2c
    5598:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <move_window>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
    559c:	88 23       	and	r24, r24
    559e:	69 f0       	breq	.+26     	; 0x55ba <f_open+0x4be>
    55a0:	c7 c0       	rjmp	.+398    	; 0x5730 <f_open+0x634>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
    55a2:	81 11       	cpse	r24, r1
    55a4:	c5 c0       	rjmp	.+394    	; 0x5730 <f_open+0x634>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
    55a6:	f7 01       	movw	r30, r14
    55a8:	83 85       	ldd	r24, Z+11	; 0x0b
    55aa:	84 fd       	sbrc	r24, 4
    55ac:	be c0       	rjmp	.+380    	; 0x572a <f_open+0x62e>
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    55ae:	81 fe       	sbrs	r8, 1
    55b0:	02 c0       	rjmp	.+4      	; 0x55b6 <f_open+0x4ba>
    55b2:	80 fd       	sbrc	r24, 0
    55b4:	bc c0       	rjmp	.+376    	; 0x572e <f_open+0x632>
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
    55b6:	83 fe       	sbrs	r8, 3
    55b8:	03 c0       	rjmp	.+6      	; 0x55c0 <f_open+0x4c4>
				mode |= FA__WRITTEN;
    55ba:	fd a5       	ldd	r31, Y+45	; 0x2d
    55bc:	f0 62       	ori	r31, 0x20	; 32
    55be:	fd a7       	std	Y+45, r31	; 0x2d
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    55c0:	e9 81       	ldd	r30, Y+1	; 0x01
    55c2:	fa 81       	ldd	r31, Y+2	; 0x02
    55c4:	82 a5       	ldd	r24, Z+42	; 0x2a
    55c6:	93 a5       	ldd	r25, Z+43	; 0x2b
    55c8:	a4 a5       	ldd	r26, Z+44	; 0x2c
    55ca:	b5 a5       	ldd	r27, Z+45	; 0x2d
    55cc:	f1 01       	movw	r30, r2
    55ce:	82 8f       	std	Z+26, r24	; 0x1a
    55d0:	93 8f       	std	Z+27, r25	; 0x1b
    55d2:	a4 8f       	std	Z+28, r26	; 0x1c
    55d4:	b5 8f       	std	Z+29, r27	; 0x1d
			fp->dir_ptr = dir;
    55d6:	f7 8e       	std	Z+31, r15	; 0x1f
    55d8:	e6 8e       	std	Z+30, r14	; 0x1e
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
    55da:	ed a5       	ldd	r30, Y+45	; 0x2d
    55dc:	d1 01       	movw	r26, r2
    55de:	14 96       	adiw	r26, 0x04	; 4
    55e0:	ec 93       	st	X, r30
    55e2:	14 97       	sbiw	r26, 0x04	; 4
			fp->err = 0;						/* Clear error flag */
    55e4:	15 96       	adiw	r26, 0x05	; 5
    55e6:	1c 92       	st	X, r1
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
    55e8:	09 81       	ldd	r16, Y+1	; 0x01
    55ea:	1a 81       	ldd	r17, Y+2	; 0x02
	BYTE* dir	/* Pointer to the directory entry */
)
{
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
    55ec:	d7 01       	movw	r26, r14
    55ee:	5a 96       	adiw	r26, 0x1a	; 26
    55f0:	8d 91       	ld	r24, X+
    55f2:	9c 91       	ld	r25, X
    55f4:	5b 97       	sbiw	r26, 0x1b	; 27
    55f6:	a0 e0       	ldi	r26, 0x00	; 0
    55f8:	b0 e0       	ldi	r27, 0x00	; 0
	if (fs->fs_type == FS_FAT32)
    55fa:	f8 01       	movw	r30, r16
    55fc:	20 81       	ld	r18, Z
    55fe:	23 30       	cpi	r18, 0x03	; 3
    5600:	61 f4       	brne	.+24     	; 0x561a <f_open+0x51e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
    5602:	f7 01       	movw	r30, r14
    5604:	44 89       	ldd	r20, Z+20	; 0x14
    5606:	55 89       	ldd	r21, Z+21	; 0x15
    5608:	60 e0       	ldi	r22, 0x00	; 0
    560a:	70 e0       	ldi	r23, 0x00	; 0
    560c:	ba 01       	movw	r22, r20
    560e:	55 27       	eor	r21, r21
    5610:	44 27       	eor	r20, r20
    5612:	84 2b       	or	r24, r20
    5614:	95 2b       	or	r25, r21
    5616:	a6 2b       	or	r26, r22
    5618:	b7 2b       	or	r27, r23
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
			fp->err = 0;						/* Clear error flag */
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
    561a:	f1 01       	movw	r30, r2
    561c:	86 87       	std	Z+14, r24	; 0x0e
    561e:	97 87       	std	Z+15, r25	; 0x0f
    5620:	a0 8b       	std	Z+16, r26	; 0x10
    5622:	b1 8b       	std	Z+17, r27	; 0x11
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
    5624:	f7 01       	movw	r30, r14
    5626:	84 8d       	ldd	r24, Z+28	; 0x1c
    5628:	95 8d       	ldd	r25, Z+29	; 0x1d
    562a:	a6 8d       	ldd	r26, Z+30	; 0x1e
    562c:	b7 8d       	ldd	r27, Z+31	; 0x1f
    562e:	f1 01       	movw	r30, r2
    5630:	82 87       	std	Z+10, r24	; 0x0a
    5632:	93 87       	std	Z+11, r25	; 0x0b
    5634:	a4 87       	std	Z+12, r26	; 0x0c
    5636:	b5 87       	std	Z+13, r27	; 0x0d
			fp->fptr = 0;						/* File pointer */
    5638:	16 82       	std	Z+6, r1	; 0x06
    563a:	17 82       	std	Z+7, r1	; 0x07
    563c:	10 86       	std	Z+8, r1	; 0x08
    563e:	11 86       	std	Z+9, r1	; 0x09
			fp->dsect = 0;
    5640:	16 8a       	std	Z+22, r1	; 0x16
    5642:	17 8a       	std	Z+23, r1	; 0x17
    5644:	10 8e       	std	Z+24, r1	; 0x18
    5646:	11 8e       	std	Z+25, r1	; 0x19
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
    5648:	11 83       	std	Z+1, r17	; 0x01
    564a:	00 83       	st	Z, r16
			fp->id = fp->fs->id;
    564c:	d8 01       	movw	r26, r16
    564e:	16 96       	adiw	r26, 0x06	; 6
    5650:	8d 91       	ld	r24, X+
    5652:	9c 91       	ld	r25, X
    5654:	17 97       	sbiw	r26, 0x07	; 7
    5656:	93 83       	std	Z+3, r25	; 0x03
    5658:	82 83       	std	Z+2, r24	; 0x02
    565a:	80 e0       	ldi	r24, 0x00	; 0
    565c:	69 c0       	rjmp	.+210    	; 0x5730 <f_open+0x634>
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
    565e:	89 e0       	ldi	r24, 0x09	; 9
    5660:	67 c0       	rjmp	.+206    	; 0x5730 <f_open+0x634>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    5662:	8f eb       	ldi	r24, 0xBF	; 191
    5664:	87 0f       	add	r24, r23
    5666:	8a 31       	cpi	r24, 0x1A	; 26
    5668:	08 f4       	brcc	.+2      	; 0x566c <f_open+0x570>
    566a:	02 ce       	rjmp	.-1020   	; 0x5270 <f_open+0x174>
    566c:	03 ce       	rjmp	.-1018   	; 0x5274 <f_open+0x178>
    566e:	6d a1       	ldd	r22, Y+37	; 0x25
    5670:	7e a1       	ldd	r23, Y+38	; 0x26
    5672:	93 2e       	mov	r9, r19
    5674:	29 a5       	ldd	r18, Y+41	; 0x29
    5676:	3a a5       	ldd	r19, Y+42	; 0x2a
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    5678:	c2 0e       	add	r12, r18
    567a:	d3 1e       	adc	r13, r19
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    567c:	80 e0       	ldi	r24, 0x00	; 0
    567e:	08 ce       	rjmp	.-1008   	; 0x5290 <f_open+0x194>
    5680:	6d a1       	ldd	r22, Y+37	; 0x25
    5682:	7e a1       	ldd	r23, Y+38	; 0x26
    5684:	93 2e       	mov	r9, r19
    5686:	29 a5       	ldd	r18, Y+41	; 0x29
    5688:	3a a5       	ldd	r19, Y+42	; 0x2a
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    568a:	c2 0e       	add	r12, r18
    568c:	d3 1e       	adc	r13, r19
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    568e:	84 e0       	ldi	r24, 0x04	; 4
    5690:	ff cd       	rjmp	.-1026   	; 0x5290 <f_open+0x194>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
    5692:	fa 01       	movw	r30, r20
    5694:	83 85       	ldd	r24, Z+11	; 0x0b
    5696:	82 ff       	sbrs	r24, 2
    5698:	4f ce       	rjmp	.-866    	; 0x5338 <f_open+0x23c>
    569a:	06 c0       	rjmp	.+12     	; 0x56a8 <f_open+0x5ac>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the sagment name */
			ns = dp->fn[NSFLAG];
    569c:	ed 89       	ldd	r30, Y+21	; 0x15
    569e:	fe 89       	ldd	r31, Y+22	; 0x16
    56a0:	93 85       	ldd	r25, Z+11	; 0x0b
			if (res != FR_OK) {				/* Failed to find the object */
				if (res == FR_NO_FILE) {	/* Object is not found */
    56a2:	84 30       	cpi	r24, 0x04	; 4
    56a4:	51 f4       	brne	.+20     	; 0x56ba <f_open+0x5be>
    56a6:	44 ce       	rjmp	.-888    	; 0x5330 <f_open+0x234>
		INIT_BUF(dj);
		res = follow_path(&dj, path);	/* Follow the file path */
		dir = dj.dir;
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
			if (!dir)	/* Default directory itself */
    56a8:	e1 14       	cp	r14, r1
    56aa:	f1 04       	cpc	r15, r1
    56ac:	c9 f4       	brne	.+50     	; 0x56e0 <f_open+0x5e4>
    56ae:	0c c0       	rjmp	.+24     	; 0x56c8 <f_open+0x5cc>
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
    56b0:	86 e0       	ldi	r24, 0x06	; 6
    56b2:	03 c0       	rjmp	.+6      	; 0x56ba <f_open+0x5be>
		dp->dir = 0;
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the sagment name */
    56b4:	84 e0       	ldi	r24, 0x04	; 4
    56b6:	01 c0       	rjmp	.+2      	; 0x56ba <f_open+0x5be>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			dir = dp->dir;						/* Follow the sub-directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
				res = FR_NO_PATH; break;
    56b8:	85 e0       	ldi	r24, 0x05	; 5
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);	/* Follow the file path */
		dir = dj.dir;
    56ba:	eb 88       	ldd	r14, Y+19	; 0x13
    56bc:	fc 88       	ldd	r15, Y+20	; 0x14
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    56be:	98 2d       	mov	r25, r8
    56c0:	9c 71       	andi	r25, 0x1C	; 28
    56c2:	09 f0       	breq	.+2      	; 0x56c6 <f_open+0x5ca>
    56c4:	58 ce       	rjmp	.-848    	; 0x5376 <f_open+0x27a>
    56c6:	6d cf       	rjmp	.-294    	; 0x55a2 <f_open+0x4a6>
    56c8:	18 2d       	mov	r17, r8
    56ca:	1c 71       	andi	r17, 0x1C	; 28
    56cc:	19 f5       	brne	.+70     	; 0x5714 <f_open+0x618>
    56ce:	e1 2c       	mov	r14, r1
    56d0:	f1 2c       	mov	r15, r1
		res = follow_path(&dj, path);	/* Follow the file path */
		dir = dj.dir;
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
			if (!dir)	/* Default directory itself */
				res = FR_INVALID_NAME;
    56d2:	86 e0       	ldi	r24, 0x06	; 6
    56d4:	15 c0       	rjmp	.+42     	; 0x5700 <f_open+0x604>
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    56d6:	18 2d       	mov	r17, r8
    56d8:	1c 71       	andi	r17, 0x1C	; 28
    56da:	09 f0       	breq	.+2      	; 0x56de <f_open+0x5e2>
    56dc:	4f ce       	rjmp	.-866    	; 0x537c <f_open+0x280>
    56de:	10 c0       	rjmp	.+32     	; 0x5700 <f_open+0x604>
    56e0:	88 2d       	mov	r24, r8
    56e2:	8c 71       	andi	r24, 0x1C	; 28
    56e4:	09 f0       	breq	.+2      	; 0x56e8 <f_open+0x5ec>
    56e6:	9d ce       	rjmp	.-710    	; 0x5422 <f_open+0x326>
    56e8:	5e cf       	rjmp	.-324    	; 0x55a6 <f_open+0x4aa>
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
    56ea:	82 e0       	ldi	r24, 0x02	; 2
    56ec:	05 c0       	rjmp	.+10     	; 0x56f8 <f_open+0x5fc>
    56ee:	82 e0       	ldi	r24, 0x02	; 2
    56f0:	03 c0       	rjmp	.+6      	; 0x56f8 <f_open+0x5fc>
	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    56f2:	82 e0       	ldi	r24, 0x02	; 2
    56f4:	01 c0       	rjmp	.+2      	; 0x56f8 <f_open+0x5fc>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    56f6:	81 e0       	ldi	r24, 0x01	; 1
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
    56f8:	88 23       	and	r24, r24
    56fa:	09 f4       	brne	.+2      	; 0x56fe <f_open+0x602>
    56fc:	5e cf       	rjmp	.-324    	; 0x55ba <f_open+0x4be>
    56fe:	18 c0       	rjmp	.+48     	; 0x5730 <f_open+0x634>
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
    5700:	88 23       	and	r24, r24
    5702:	09 f4       	brne	.+2      	; 0x5706 <f_open+0x60a>
    5704:	6a cf       	rjmp	.-300    	; 0x55da <f_open+0x4de>
    5706:	14 c0       	rjmp	.+40     	; 0x5730 <f_open+0x634>
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);	/* Follow the file path */
		dir = dj.dir;
    5708:	eb 88       	ldd	r14, Y+19	; 0x13
    570a:	fc 88       	ldd	r15, Y+20	; 0x14
    570c:	86 e0       	ldi	r24, 0x06	; 6
    570e:	e3 cf       	rjmp	.-58     	; 0x56d6 <f_open+0x5da>
				n = 0;					/* Not a blank entry. Restart to search */
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
		} while (res == FR_OK);
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    5710:	87 e0       	ldi	r24, 0x07	; 7
    5712:	01 c0       	rjmp	.+2      	; 0x5716 <f_open+0x61a>
		res = follow_path(&dj, path);	/* Follow the file path */
		dir = dj.dir;
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
			if (!dir)	/* Default directory itself */
				res = FR_INVALID_NAME;
    5714:	86 e0       	ldi	r24, 0x06	; 6
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    5716:	fd a5       	ldd	r31, Y+45	; 0x2d
    5718:	f8 60       	ori	r31, 0x08	; 8
    571a:	fd a7       	std	Y+45, r31	; 0x2d
				dir = dj.dir;					/* New entry */
    571c:	eb 88       	ldd	r14, Y+19	; 0x13
    571e:	fc 88       	ldd	r15, Y+20	; 0x14
    5720:	ef cf       	rjmp	.-34     	; 0x5700 <f_open+0x604>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
					res = FR_DENIED;
    5722:	87 e0       	ldi	r24, 0x07	; 7
    5724:	05 c0       	rjmp	.+10     	; 0x5730 <f_open+0x634>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
    5726:	88 e0       	ldi	r24, 0x08	; 8
    5728:	03 c0       	rjmp	.+6      	; 0x5730 <f_open+0x634>
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
					res = FR_NO_FILE;
    572a:	84 e0       	ldi	r24, 0x04	; 4
    572c:	01 c0       	rjmp	.+2      	; 0x5730 <f_open+0x634>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
    572e:	87 e0       	ldi	r24, 0x07	; 7
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
    5730:	ae 96       	adiw	r28, 0x2e	; 46
    5732:	0f b6       	in	r0, 0x3f	; 63
    5734:	f8 94       	cli
    5736:	de bf       	out	0x3e, r29	; 62
    5738:	0f be       	out	0x3f, r0	; 63
    573a:	cd bf       	out	0x3d, r28	; 61
    573c:	df 91       	pop	r29
    573e:	cf 91       	pop	r28
    5740:	1f 91       	pop	r17
    5742:	0f 91       	pop	r16
    5744:	ff 90       	pop	r15
    5746:	ef 90       	pop	r14
    5748:	df 90       	pop	r13
    574a:	cf 90       	pop	r12
    574c:	bf 90       	pop	r11
    574e:	af 90       	pop	r10
    5750:	9f 90       	pop	r9
    5752:	8f 90       	pop	r8
    5754:	7f 90       	pop	r7
    5756:	6f 90       	pop	r6
    5758:	5f 90       	pop	r5
    575a:	4f 90       	pop	r4
    575c:	3f 90       	pop	r3
    575e:	2f 90       	pop	r2
    5760:	08 95       	ret

00005762 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
    5762:	2f 92       	push	r2
    5764:	3f 92       	push	r3
    5766:	4f 92       	push	r4
    5768:	5f 92       	push	r5
    576a:	6f 92       	push	r6
    576c:	7f 92       	push	r7
    576e:	8f 92       	push	r8
    5770:	9f 92       	push	r9
    5772:	af 92       	push	r10
    5774:	bf 92       	push	r11
    5776:	cf 92       	push	r12
    5778:	df 92       	push	r13
    577a:	ef 92       	push	r14
    577c:	ff 92       	push	r15
    577e:	0f 93       	push	r16
    5780:	1f 93       	push	r17
    5782:	cf 93       	push	r28
    5784:	df 93       	push	r29
    5786:	ec 01       	movw	r28, r24
    5788:	4b 01       	movw	r8, r22
    578a:	6a 01       	movw	r12, r20
    578c:	59 01       	movw	r10, r18
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
    578e:	f9 01       	movw	r30, r18
    5790:	11 82       	std	Z+1, r1	; 0x01
    5792:	10 82       	st	Z, r1

	res = validate(fp);						/* Check validity */
    5794:	0e 94 01 20 	call	0x4002	; 0x4002 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    5798:	81 11       	cpse	r24, r1
    579a:	6a c1       	rjmp	.+724    	; 0x5a70 <f_write+0x30e>
	if (fp->err)							/* Check error */
    579c:	8d 81       	ldd	r24, Y+5	; 0x05
    579e:	81 11       	cpse	r24, r1
    57a0:	67 c1       	rjmp	.+718    	; 0x5a70 <f_write+0x30e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    57a2:	8c 81       	ldd	r24, Y+4	; 0x04
    57a4:	81 ff       	sbrs	r24, 1
    57a6:	63 c1       	rjmp	.+710    	; 0x5a6e <f_write+0x30c>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
    57a8:	8e 81       	ldd	r24, Y+6	; 0x06
    57aa:	9f 81       	ldd	r25, Y+7	; 0x07
    57ac:	a8 85       	ldd	r26, Y+8	; 0x08
    57ae:	b9 85       	ldd	r27, Y+9	; 0x09
    57b0:	ac 01       	movw	r20, r24
    57b2:	bd 01       	movw	r22, r26
    57b4:	4c 0d       	add	r20, r12
    57b6:	5d 1d       	adc	r21, r13
    57b8:	61 1d       	adc	r22, r1
    57ba:	71 1d       	adc	r23, r1
    57bc:	48 17       	cp	r20, r24
    57be:	59 07       	cpc	r21, r25
    57c0:	6a 07       	cpc	r22, r26
    57c2:	7b 07       	cpc	r23, r27
    57c4:	08 f4       	brcc	.+2      	; 0x57c8 <f_write+0x66>
    57c6:	3d c1       	rjmp	.+634    	; 0x5a42 <f_write+0x2e0>

	for ( ;  btw;							/* Repeat until all data written */
    57c8:	c1 14       	cp	r12, r1
    57ca:	d1 04       	cpc	r13, r1
    57cc:	09 f4       	brne	.+2      	; 0x57d0 <f_write+0x6e>
    57ce:	39 c1       	rjmp	.+626    	; 0x5a42 <f_write+0x2e0>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    57d0:	4e 81       	ldd	r20, Y+6	; 0x06
    57d2:	5f 81       	ldd	r21, Y+7	; 0x07
    57d4:	68 85       	ldd	r22, Y+8	; 0x08
    57d6:	79 85       	ldd	r23, Y+9	; 0x09
    57d8:	db 01       	movw	r26, r22
    57da:	ca 01       	movw	r24, r20
    57dc:	91 70       	andi	r25, 0x01	; 1
    57de:	aa 27       	eor	r26, r26
    57e0:	bb 27       	eor	r27, r27
    57e2:	89 2b       	or	r24, r25
    57e4:	8a 2b       	or	r24, r26
    57e6:	8b 2b       	or	r24, r27
    57e8:	09 f0       	breq	.+2      	; 0x57ec <f_write+0x8a>
    57ea:	e5 c0       	rjmp	.+458    	; 0x59b6 <f_write+0x254>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    57ec:	e8 81       	ld	r30, Y
    57ee:	f9 81       	ldd	r31, Y+1	; 0x01
    57f0:	12 81       	ldd	r17, Z+2	; 0x02
    57f2:	11 50       	subi	r17, 0x01	; 1
    57f4:	db 01       	movw	r26, r22
    57f6:	ca 01       	movw	r24, r20
    57f8:	07 2e       	mov	r0, r23
    57fa:	79 e0       	ldi	r23, 0x09	; 9
    57fc:	b6 95       	lsr	r27
    57fe:	a7 95       	ror	r26
    5800:	97 95       	ror	r25
    5802:	87 95       	ror	r24
    5804:	7a 95       	dec	r23
    5806:	d1 f7       	brne	.-12     	; 0x57fc <f_write+0x9a>
    5808:	70 2d       	mov	r23, r0
    580a:	18 23       	and	r17, r24
			if (!csect) {					/* On the cluster boundary? */
    580c:	09 f0       	breq	.+2      	; 0x5810 <f_write+0xae>
    580e:	40 c0       	rjmp	.+128    	; 0x5890 <f_write+0x12e>
				if (fp->fptr == 0) {		/* On the top of the file? */
    5810:	45 2b       	or	r20, r21
    5812:	46 2b       	or	r20, r22
    5814:	47 2b       	or	r20, r23
    5816:	79 f4       	brne	.+30     	; 0x5836 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
    5818:	6e 85       	ldd	r22, Y+14	; 0x0e
    581a:	7f 85       	ldd	r23, Y+15	; 0x0f
    581c:	88 89       	ldd	r24, Y+16	; 0x10
    581e:	99 89       	ldd	r25, Y+17	; 0x11
					if (clst == 0)			/* When no cluster is allocated, */
    5820:	61 15       	cp	r22, r1
    5822:	71 05       	cpc	r23, r1
    5824:	81 05       	cpc	r24, r1
    5826:	91 05       	cpc	r25, r1
    5828:	91 f4       	brne	.+36     	; 0x584e <f_write+0xec>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    582a:	40 e0       	ldi	r20, 0x00	; 0
    582c:	50 e0       	ldi	r21, 0x00	; 0
    582e:	ba 01       	movw	r22, r20
    5830:	cf 01       	movw	r24, r30
    5832:	dc d9       	rcall	.-3144   	; 0x4bec <create_chain>
    5834:	06 c0       	rjmp	.+12     	; 0x5842 <f_write+0xe0>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    5836:	4a 89       	ldd	r20, Y+18	; 0x12
    5838:	5b 89       	ldd	r21, Y+19	; 0x13
    583a:	6c 89       	ldd	r22, Y+20	; 0x14
    583c:	7d 89       	ldd	r23, Y+21	; 0x15
    583e:	cf 01       	movw	r24, r30
    5840:	d5 d9       	rcall	.-3158   	; 0x4bec <create_chain>
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    5842:	61 15       	cp	r22, r1
    5844:	71 05       	cpc	r23, r1
    5846:	81 05       	cpc	r24, r1
    5848:	91 05       	cpc	r25, r1
    584a:	09 f4       	brne	.+2      	; 0x584e <f_write+0xec>
    584c:	fa c0       	rjmp	.+500    	; 0x5a42 <f_write+0x2e0>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    584e:	61 30       	cpi	r22, 0x01	; 1
    5850:	71 05       	cpc	r23, r1
    5852:	81 05       	cpc	r24, r1
    5854:	91 05       	cpc	r25, r1
    5856:	19 f4       	brne	.+6      	; 0x585e <f_write+0xfc>
    5858:	82 e0       	ldi	r24, 0x02	; 2
    585a:	8d 83       	std	Y+5, r24	; 0x05
    585c:	09 c1       	rjmp	.+530    	; 0x5a70 <f_write+0x30e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    585e:	6f 3f       	cpi	r22, 0xFF	; 255
    5860:	ff ef       	ldi	r31, 0xFF	; 255
    5862:	7f 07       	cpc	r23, r31
    5864:	8f 07       	cpc	r24, r31
    5866:	9f 07       	cpc	r25, r31
    5868:	19 f4       	brne	.+6      	; 0x5870 <f_write+0x10e>
    586a:	81 e0       	ldi	r24, 0x01	; 1
    586c:	8d 83       	std	Y+5, r24	; 0x05
    586e:	00 c1       	rjmp	.+512    	; 0x5a70 <f_write+0x30e>
				fp->clust = clst;			/* Update current cluster */
    5870:	6a 8b       	std	Y+18, r22	; 0x12
    5872:	7b 8b       	std	Y+19, r23	; 0x13
    5874:	8c 8b       	std	Y+20, r24	; 0x14
    5876:	9d 8b       	std	Y+21, r25	; 0x15
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
    5878:	4e 84       	ldd	r4, Y+14	; 0x0e
    587a:	5f 84       	ldd	r5, Y+15	; 0x0f
    587c:	68 88       	ldd	r6, Y+16	; 0x10
    587e:	79 88       	ldd	r7, Y+17	; 0x11
    5880:	45 28       	or	r4, r5
    5882:	46 28       	or	r4, r6
    5884:	47 28       	or	r4, r7
    5886:	21 f4       	brne	.+8      	; 0x5890 <f_write+0x12e>
    5888:	6e 87       	std	Y+14, r22	; 0x0e
    588a:	7f 87       	std	Y+15, r23	; 0x0f
    588c:	88 8b       	std	Y+16, r24	; 0x10
    588e:	99 8b       	std	Y+17, r25	; 0x11
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
    5890:	e8 81       	ld	r30, Y
    5892:	f9 81       	ldd	r31, Y+1	; 0x01
    5894:	42 a5       	ldd	r20, Z+42	; 0x2a
    5896:	53 a5       	ldd	r21, Z+43	; 0x2b
    5898:	64 a5       	ldd	r22, Z+44	; 0x2c
    589a:	75 a5       	ldd	r23, Z+45	; 0x2d
    589c:	8e 89       	ldd	r24, Y+22	; 0x16
    589e:	9f 89       	ldd	r25, Y+23	; 0x17
    58a0:	a8 8d       	ldd	r26, Y+24	; 0x18
    58a2:	b9 8d       	ldd	r27, Y+25	; 0x19
    58a4:	48 17       	cp	r20, r24
    58a6:	59 07       	cpc	r21, r25
    58a8:	6a 07       	cpc	r22, r26
    58aa:	7b 07       	cpc	r23, r27
    58ac:	41 f4       	brne	.+16     	; 0x58be <f_write+0x15c>
    58ae:	cf 01       	movw	r24, r30
    58b0:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <sync_window>
    58b4:	88 23       	and	r24, r24
    58b6:	19 f0       	breq	.+6      	; 0x58be <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
    58b8:	81 e0       	ldi	r24, 0x01	; 1
    58ba:	8d 83       	std	Y+5, r24	; 0x05
    58bc:	d9 c0       	rjmp	.+434    	; 0x5a70 <f_write+0x30e>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    58be:	28 80       	ld	r2, Y
    58c0:	39 80       	ldd	r3, Y+1	; 0x01
    58c2:	4a 89       	ldd	r20, Y+18	; 0x12
    58c4:	5b 89       	ldd	r21, Y+19	; 0x13
    58c6:	6c 89       	ldd	r22, Y+20	; 0x14
    58c8:	7d 89       	ldd	r23, Y+21	; 0x15
    58ca:	c1 01       	movw	r24, r2
    58cc:	0e 94 0e 23 	call	0x461c	; 0x461c <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    58d0:	61 15       	cp	r22, r1
    58d2:	71 05       	cpc	r23, r1
    58d4:	81 05       	cpc	r24, r1
    58d6:	91 05       	cpc	r25, r1
    58d8:	19 f4       	brne	.+6      	; 0x58e0 <f_write+0x17e>
    58da:	82 e0       	ldi	r24, 0x02	; 2
    58dc:	8d 83       	std	Y+5, r24	; 0x05
    58de:	c8 c0       	rjmp	.+400    	; 0x5a70 <f_write+0x30e>
			sect += csect;
    58e0:	2b 01       	movw	r4, r22
    58e2:	3c 01       	movw	r6, r24
    58e4:	41 0e       	add	r4, r17
    58e6:	51 1c       	adc	r5, r1
    58e8:	61 1c       	adc	r6, r1
    58ea:	71 1c       	adc	r7, r1
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    58ec:	76 01       	movw	r14, r12
    58ee:	ef 2c       	mov	r14, r15
    58f0:	ff 24       	eor	r15, r15
    58f2:	e6 94       	lsr	r14
			if (cc) {						/* Write maximum contiguous sectors directly */
    58f4:	e1 14       	cp	r14, r1
    58f6:	f1 04       	cpc	r15, r1
    58f8:	09 f4       	brne	.+2      	; 0x58fc <f_write+0x19a>
    58fa:	3e c0       	rjmp	.+124    	; 0x5978 <f_write+0x216>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    58fc:	f1 01       	movw	r30, r2
    58fe:	42 81       	ldd	r20, Z+2	; 0x02
    5900:	24 2f       	mov	r18, r20
    5902:	30 e0       	ldi	r19, 0x00	; 0
    5904:	c7 01       	movw	r24, r14
    5906:	81 0f       	add	r24, r17
    5908:	91 1d       	adc	r25, r1
    590a:	28 17       	cp	r18, r24
    590c:	39 07       	cpc	r19, r25
    590e:	18 f4       	brcc	.+6      	; 0x5916 <f_write+0x1b4>
					cc = fp->fs->csize - csect;
    5910:	79 01       	movw	r14, r18
    5912:	e1 1a       	sub	r14, r17
    5914:	f1 08       	sbc	r15, r1
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
    5916:	87 01       	movw	r16, r14
    5918:	a3 01       	movw	r20, r6
    591a:	92 01       	movw	r18, r4
    591c:	b4 01       	movw	r22, r8
    591e:	f1 01       	movw	r30, r2
    5920:	81 81       	ldd	r24, Z+1	; 0x01
    5922:	2c d5       	rcall	.+2648   	; 0x637c <disk_write>
    5924:	88 23       	and	r24, r24
    5926:	19 f0       	breq	.+6      	; 0x592e <f_write+0x1cc>
					ABORT(fp->fs, FR_DISK_ERR);
    5928:	81 e0       	ldi	r24, 0x01	; 1
    592a:	8d 83       	std	Y+5, r24	; 0x05
    592c:	a1 c0       	rjmp	.+322    	; 0x5a70 <f_write+0x30e>
#if _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    592e:	e8 81       	ld	r30, Y
    5930:	f9 81       	ldd	r31, Y+1	; 0x01
    5932:	82 a5       	ldd	r24, Z+42	; 0x2a
    5934:	93 a5       	ldd	r25, Z+43	; 0x2b
    5936:	a4 a5       	ldd	r26, Z+44	; 0x2c
    5938:	b5 a5       	ldd	r27, Z+45	; 0x2d
    593a:	84 19       	sub	r24, r4
    593c:	95 09       	sbc	r25, r5
    593e:	a6 09       	sbc	r26, r6
    5940:	b7 09       	sbc	r27, r7
    5942:	a7 01       	movw	r20, r14
    5944:	60 e0       	ldi	r22, 0x00	; 0
    5946:	70 e0       	ldi	r23, 0x00	; 0
    5948:	84 17       	cp	r24, r20
    594a:	95 07       	cpc	r25, r21
    594c:	a6 07       	cpc	r26, r22
    594e:	b7 07       	cpc	r27, r23
    5950:	78 f4       	brcc	.+30     	; 0x5970 <f_write+0x20e>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    5952:	98 2f       	mov	r25, r24
    5954:	88 27       	eor	r24, r24
    5956:	99 0f       	add	r25, r25
    5958:	b4 01       	movw	r22, r8
    595a:	68 0f       	add	r22, r24
    595c:	79 1f       	adc	r23, r25
    595e:	40 e0       	ldi	r20, 0x00	; 0
    5960:	52 e0       	ldi	r21, 0x02	; 2
    5962:	cf 01       	movw	r24, r30
    5964:	8e 96       	adiw	r24, 0x2e	; 46
    5966:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <mem_cpy>
					fp->fs->wflag = 0;
    596a:	e8 81       	ld	r30, Y
    596c:	f9 81       	ldd	r31, Y+1	; 0x01
    596e:	14 82       	std	Z+4, r1	; 0x04
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    5970:	fe 2c       	mov	r15, r14
    5972:	ee 24       	eor	r14, r14
    5974:	ff 0c       	add	r15, r15
				continue;
    5976:	4c c0       	rjmp	.+152    	; 0x5a10 <f_write+0x2ae>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    5978:	4e 81       	ldd	r20, Y+6	; 0x06
    597a:	5f 81       	ldd	r21, Y+7	; 0x07
    597c:	68 85       	ldd	r22, Y+8	; 0x08
    597e:	79 85       	ldd	r23, Y+9	; 0x09
    5980:	8a 85       	ldd	r24, Y+10	; 0x0a
    5982:	9b 85       	ldd	r25, Y+11	; 0x0b
    5984:	ac 85       	ldd	r26, Y+12	; 0x0c
    5986:	bd 85       	ldd	r27, Y+13	; 0x0d
    5988:	48 17       	cp	r20, r24
    598a:	59 07       	cpc	r21, r25
    598c:	6a 07       	cpc	r22, r26
    598e:	7b 07       	cpc	r23, r27
    5990:	70 f0       	brcs	.+28     	; 0x59ae <f_write+0x24c>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
    5992:	c1 01       	movw	r24, r2
    5994:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <sync_window>
    5998:	88 23       	and	r24, r24
    599a:	19 f0       	breq	.+6      	; 0x59a2 <f_write+0x240>
    599c:	81 e0       	ldi	r24, 0x01	; 1
    599e:	8d 83       	std	Y+5, r24	; 0x05
    59a0:	67 c0       	rjmp	.+206    	; 0x5a70 <f_write+0x30e>
				fp->fs->winsect = sect;
    59a2:	e8 81       	ld	r30, Y
    59a4:	f9 81       	ldd	r31, Y+1	; 0x01
    59a6:	42 a6       	std	Z+42, r4	; 0x2a
    59a8:	53 a6       	std	Z+43, r5	; 0x2b
    59aa:	64 a6       	std	Z+44, r6	; 0x2c
    59ac:	75 a6       	std	Z+45, r7	; 0x2d
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    59ae:	4e 8a       	std	Y+22, r4	; 0x16
    59b0:	5f 8a       	std	Y+23, r5	; 0x17
    59b2:	68 8e       	std	Y+24, r6	; 0x18
    59b4:	79 8e       	std	Y+25, r7	; 0x19
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    59b6:	8e 81       	ldd	r24, Y+6	; 0x06
    59b8:	9f 81       	ldd	r25, Y+7	; 0x07
    59ba:	91 70       	andi	r25, 0x01	; 1
    59bc:	20 e0       	ldi	r18, 0x00	; 0
    59be:	32 e0       	ldi	r19, 0x02	; 2
    59c0:	79 01       	movw	r14, r18
    59c2:	e8 1a       	sub	r14, r24
    59c4:	f9 0a       	sbc	r15, r25
    59c6:	ce 14       	cp	r12, r14
    59c8:	df 04       	cpc	r13, r15
    59ca:	08 f4       	brcc	.+2      	; 0x59ce <f_write+0x26c>
    59cc:	76 01       	movw	r14, r12
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
    59ce:	4e 89       	ldd	r20, Y+22	; 0x16
    59d0:	5f 89       	ldd	r21, Y+23	; 0x17
    59d2:	68 8d       	ldd	r22, Y+24	; 0x18
    59d4:	79 8d       	ldd	r23, Y+25	; 0x19
    59d6:	88 81       	ld	r24, Y
    59d8:	99 81       	ldd	r25, Y+1	; 0x01
    59da:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <move_window>
    59de:	88 23       	and	r24, r24
    59e0:	19 f0       	breq	.+6      	; 0x59e8 <f_write+0x286>
			ABORT(fp->fs, FR_DISK_ERR);
    59e2:	81 e0       	ldi	r24, 0x01	; 1
    59e4:	8d 83       	std	Y+5, r24	; 0x05
    59e6:	44 c0       	rjmp	.+136    	; 0x5a70 <f_write+0x30e>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    59e8:	8e 81       	ldd	r24, Y+6	; 0x06
    59ea:	9f 81       	ldd	r25, Y+7	; 0x07
    59ec:	a8 85       	ldd	r26, Y+8	; 0x08
    59ee:	b9 85       	ldd	r27, Y+9	; 0x09
    59f0:	91 70       	andi	r25, 0x01	; 1
    59f2:	aa 27       	eor	r26, r26
    59f4:	bb 27       	eor	r27, r27
    59f6:	8e 96       	adiw	r24, 0x2e	; 46
    59f8:	28 81       	ld	r18, Y
    59fa:	39 81       	ldd	r19, Y+1	; 0x01
    59fc:	a7 01       	movw	r20, r14
    59fe:	b4 01       	movw	r22, r8
    5a00:	82 0f       	add	r24, r18
    5a02:	93 1f       	adc	r25, r19
    5a04:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <mem_cpy>
		fp->fs->wflag = 1;
    5a08:	e8 81       	ld	r30, Y
    5a0a:	f9 81       	ldd	r31, Y+1	; 0x01
    5a0c:	21 e0       	ldi	r18, 0x01	; 1
    5a0e:	24 83       	std	Z+4, r18	; 0x04
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    5a10:	8e 0c       	add	r8, r14
    5a12:	9f 1c       	adc	r9, r15
    5a14:	8e 81       	ldd	r24, Y+6	; 0x06
    5a16:	9f 81       	ldd	r25, Y+7	; 0x07
    5a18:	a8 85       	ldd	r26, Y+8	; 0x08
    5a1a:	b9 85       	ldd	r27, Y+9	; 0x09
    5a1c:	8e 0d       	add	r24, r14
    5a1e:	9f 1d       	adc	r25, r15
    5a20:	a1 1d       	adc	r26, r1
    5a22:	b1 1d       	adc	r27, r1
    5a24:	8e 83       	std	Y+6, r24	; 0x06
    5a26:	9f 83       	std	Y+7, r25	; 0x07
    5a28:	a8 87       	std	Y+8, r26	; 0x08
    5a2a:	b9 87       	std	Y+9, r27	; 0x09
    5a2c:	f5 01       	movw	r30, r10
    5a2e:	80 81       	ld	r24, Z
    5a30:	91 81       	ldd	r25, Z+1	; 0x01
    5a32:	8e 0d       	add	r24, r14
    5a34:	9f 1d       	adc	r25, r15
    5a36:	91 83       	std	Z+1, r25	; 0x01
    5a38:	80 83       	st	Z, r24
    5a3a:	ce 18       	sub	r12, r14
    5a3c:	df 08       	sbc	r13, r15
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
    5a3e:	09 f0       	breq	.+2      	; 0x5a42 <f_write+0x2e0>
    5a40:	c7 ce       	rjmp	.-626    	; 0x57d0 <f_write+0x6e>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    5a42:	8e 81       	ldd	r24, Y+6	; 0x06
    5a44:	9f 81       	ldd	r25, Y+7	; 0x07
    5a46:	a8 85       	ldd	r26, Y+8	; 0x08
    5a48:	b9 85       	ldd	r27, Y+9	; 0x09
    5a4a:	4a 85       	ldd	r20, Y+10	; 0x0a
    5a4c:	5b 85       	ldd	r21, Y+11	; 0x0b
    5a4e:	6c 85       	ldd	r22, Y+12	; 0x0c
    5a50:	7d 85       	ldd	r23, Y+13	; 0x0d
    5a52:	48 17       	cp	r20, r24
    5a54:	59 07       	cpc	r21, r25
    5a56:	6a 07       	cpc	r22, r26
    5a58:	7b 07       	cpc	r23, r27
    5a5a:	20 f4       	brcc	.+8      	; 0x5a64 <f_write+0x302>
    5a5c:	8a 87       	std	Y+10, r24	; 0x0a
    5a5e:	9b 87       	std	Y+11, r25	; 0x0b
    5a60:	ac 87       	std	Y+12, r26	; 0x0c
    5a62:	bd 87       	std	Y+13, r27	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    5a64:	8c 81       	ldd	r24, Y+4	; 0x04
    5a66:	80 62       	ori	r24, 0x20	; 32
    5a68:	8c 83       	std	Y+4, r24	; 0x04

	LEAVE_FF(fp->fs, FR_OK);
    5a6a:	80 e0       	ldi	r24, 0x00	; 0
    5a6c:	01 c0       	rjmp	.+2      	; 0x5a70 <f_write+0x30e>
	res = validate(fp);						/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->err)							/* Check error */
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    5a6e:	87 e0       	ldi	r24, 0x07	; 7

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    5a70:	df 91       	pop	r29
    5a72:	cf 91       	pop	r28
    5a74:	1f 91       	pop	r17
    5a76:	0f 91       	pop	r16
    5a78:	ff 90       	pop	r15
    5a7a:	ef 90       	pop	r14
    5a7c:	df 90       	pop	r13
    5a7e:	cf 90       	pop	r12
    5a80:	bf 90       	pop	r11
    5a82:	af 90       	pop	r10
    5a84:	9f 90       	pop	r9
    5a86:	8f 90       	pop	r8
    5a88:	7f 90       	pop	r7
    5a8a:	6f 90       	pop	r6
    5a8c:	5f 90       	pop	r5
    5a8e:	4f 90       	pop	r4
    5a90:	3f 90       	pop	r3
    5a92:	2f 90       	pop	r2
    5a94:	08 95       	ret

00005a96 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
    5a96:	0f 93       	push	r16
    5a98:	1f 93       	push	r17
    5a9a:	cf 93       	push	r28
    5a9c:	df 93       	push	r29
    5a9e:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
    5aa0:	0e 94 01 20 	call	0x4002	; 0x4002 <validate>
    5aa4:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    5aa6:	81 11       	cpse	r24, r1
    5aa8:	96 c0       	rjmp	.+300    	; 0x5bd6 <f_sync+0x140>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    5aaa:	8c 81       	ldd	r24, Y+4	; 0x04
    5aac:	85 ff       	sbrs	r24, 5
    5aae:	93 c0       	rjmp	.+294    	; 0x5bd6 <f_sync+0x140>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    5ab0:	4a 8d       	ldd	r20, Y+26	; 0x1a
    5ab2:	5b 8d       	ldd	r21, Y+27	; 0x1b
    5ab4:	6c 8d       	ldd	r22, Y+28	; 0x1c
    5ab6:	7d 8d       	ldd	r23, Y+29	; 0x1d
    5ab8:	88 81       	ld	r24, Y
    5aba:	99 81       	ldd	r25, Y+1	; 0x01
    5abc:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <move_window>
    5ac0:	98 2f       	mov	r25, r24
			if (res == FR_OK) {
    5ac2:	81 11       	cpse	r24, r1
    5ac4:	88 c0       	rjmp	.+272    	; 0x5bd6 <f_sync+0x140>
				dir = fp->dir_ptr;
    5ac6:	ee 8d       	ldd	r30, Y+30	; 0x1e
    5ac8:	ff 8d       	ldd	r31, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    5aca:	83 85       	ldd	r24, Z+11	; 0x0b
    5acc:	80 62       	ori	r24, 0x20	; 32
    5ace:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
    5ad0:	8a 85       	ldd	r24, Y+10	; 0x0a
    5ad2:	9b 85       	ldd	r25, Y+11	; 0x0b
    5ad4:	ac 85       	ldd	r26, Y+12	; 0x0c
    5ad6:	bd 85       	ldd	r27, Y+13	; 0x0d
    5ad8:	84 8f       	std	Z+28, r24	; 0x1c
    5ada:	95 8f       	std	Z+29, r25	; 0x1d
    5adc:	a6 8f       	std	Z+30, r26	; 0x1e
    5ade:	b7 8f       	std	Z+31, r27	; 0x1f
				st_clust(dir, fp->sclust);					/* Update start cluster */
    5ae0:	8e 85       	ldd	r24, Y+14	; 0x0e
    5ae2:	9f 85       	ldd	r25, Y+15	; 0x0f
    5ae4:	a8 89       	ldd	r26, Y+16	; 0x10
    5ae6:	b9 89       	ldd	r27, Y+17	; 0x11
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir + DIR_FstClusLO, cl);
    5ae8:	93 8f       	std	Z+27, r25	; 0x1b
    5aea:	82 8f       	std	Z+26, r24	; 0x1a
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
    5aec:	b5 8b       	std	Z+21, r27	; 0x15
    5aee:	a4 8b       	std	Z+20, r26	; 0x14
				dir = fp->dir_ptr;
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
				st_clust(dir, fp->sclust);					/* Update start cluster */
				tm = GET_FATTIME();							/* Update updated time */
				ST_DWORD(dir + DIR_WrtTime, tm);
    5af0:	80 e0       	ldi	r24, 0x00	; 0
    5af2:	90 e0       	ldi	r25, 0x00	; 0
    5af4:	a0 ef       	ldi	r26, 0xF0	; 240
    5af6:	be e4       	ldi	r27, 0x4E	; 78
    5af8:	86 8b       	std	Z+22, r24	; 0x16
    5afa:	97 8b       	std	Z+23, r25	; 0x17
    5afc:	a0 8f       	std	Z+24, r26	; 0x18
    5afe:	b1 8f       	std	Z+25, r27	; 0x19
				ST_WORD(dir + DIR_LstAccDate, 0);
    5b00:	13 8a       	std	Z+19, r1	; 0x13
    5b02:	12 8a       	std	Z+18, r1	; 0x12
				fp->flag &= ~FA__WRITTEN;
    5b04:	8c 81       	ldd	r24, Y+4	; 0x04
    5b06:	8f 7d       	andi	r24, 0xDF	; 223
    5b08:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    5b0a:	e8 81       	ld	r30, Y
    5b0c:	f9 81       	ldd	r31, Y+1	; 0x01
    5b0e:	81 e0       	ldi	r24, 0x01	; 1
    5b10:	84 83       	std	Z+4, r24	; 0x04
				res = sync_fs(fp->fs);
    5b12:	09 90       	ld	r0, Y+
    5b14:	d8 81       	ld	r29, Y
    5b16:	c0 2d       	mov	r28, r0
)
{
	FRESULT res;


	res = sync_window(fs);
    5b18:	ce 01       	movw	r24, r28
    5b1a:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <sync_window>
    5b1e:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    5b20:	81 11       	cpse	r24, r1
    5b22:	59 c0       	rjmp	.+178    	; 0x5bd6 <f_sync+0x140>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
    5b24:	88 81       	ld	r24, Y
    5b26:	83 30       	cpi	r24, 0x03	; 3
    5b28:	09 f0       	breq	.+2      	; 0x5b2c <f_sync+0x96>
    5b2a:	4c c0       	rjmp	.+152    	; 0x5bc4 <f_sync+0x12e>
    5b2c:	8d 81       	ldd	r24, Y+5	; 0x05
    5b2e:	81 30       	cpi	r24, 0x01	; 1
    5b30:	09 f0       	breq	.+2      	; 0x5b34 <f_sync+0x9e>
    5b32:	48 c0       	rjmp	.+144    	; 0x5bc4 <f_sync+0x12e>
			/* Create FSINFO structure */
			mem_set(fs->win, 0, SS(fs));
    5b34:	be 01       	movw	r22, r28
    5b36:	62 5d       	subi	r22, 0xD2	; 210
    5b38:	7f 4f       	sbci	r23, 0xFF	; 255
    5b3a:	fb 01       	movw	r30, r22
    5b3c:	ce 01       	movw	r24, r28
    5b3e:	82 5d       	subi	r24, 0xD2	; 210
    5b40:	9d 4f       	sbci	r25, 0xFD	; 253
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    5b42:	11 92       	st	Z+, r1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    5b44:	e8 17       	cp	r30, r24
    5b46:	f9 07       	cpc	r31, r25
    5b48:	e1 f7       	brne	.-8      	; 0x5b42 <f_sync+0xac>
	if (res == FR_OK) {
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
			/* Create FSINFO structure */
			mem_set(fs->win, 0, SS(fs));
			ST_WORD(fs->win + BS_55AA, 0xAA55);
    5b4a:	85 e5       	ldi	r24, 0x55	; 85
    5b4c:	9a ea       	ldi	r25, 0xAA	; 170
    5b4e:	fe 01       	movw	r30, r28
    5b50:	e4 5d       	subi	r30, 0xD4	; 212
    5b52:	fd 4f       	sbci	r31, 0xFD	; 253
    5b54:	91 83       	std	Z+1, r25	; 0x01
    5b56:	80 83       	st	Z, r24
			ST_DWORD(fs->win + FSI_LeadSig, 0x41615252);
    5b58:	82 e5       	ldi	r24, 0x52	; 82
    5b5a:	92 e5       	ldi	r25, 0x52	; 82
    5b5c:	a1 e6       	ldi	r26, 0x61	; 97
    5b5e:	b1 e4       	ldi	r27, 0x41	; 65
    5b60:	8e a7       	std	Y+46, r24	; 0x2e
    5b62:	9f a7       	std	Y+47, r25	; 0x2f
    5b64:	a8 ab       	std	Y+48, r26	; 0x30
    5b66:	b9 ab       	std	Y+49, r27	; 0x31
			ST_DWORD(fs->win + FSI_StrucSig, 0x61417272);
    5b68:	82 e7       	ldi	r24, 0x72	; 114
    5b6a:	92 e7       	ldi	r25, 0x72	; 114
    5b6c:	a1 e4       	ldi	r26, 0x41	; 65
    5b6e:	b1 e6       	ldi	r27, 0x61	; 97
    5b70:	7a 97       	sbiw	r30, 0x1a	; 26
    5b72:	80 83       	st	Z, r24
    5b74:	91 83       	std	Z+1, r25	; 0x01
    5b76:	a2 83       	std	Z+2, r26	; 0x02
    5b78:	b3 83       	std	Z+3, r27	; 0x03
			ST_DWORD(fs->win + FSI_Free_Count, fs->free_clust);
    5b7a:	8e 85       	ldd	r24, Y+14	; 0x0e
    5b7c:	9f 85       	ldd	r25, Y+15	; 0x0f
    5b7e:	a8 89       	ldd	r26, Y+16	; 0x10
    5b80:	b9 89       	ldd	r27, Y+17	; 0x11
    5b82:	34 96       	adiw	r30, 0x04	; 4
    5b84:	80 83       	st	Z, r24
    5b86:	91 83       	std	Z+1, r25	; 0x01
    5b88:	a2 83       	std	Z+2, r26	; 0x02
    5b8a:	b3 83       	std	Z+3, r27	; 0x03
			ST_DWORD(fs->win + FSI_Nxt_Free, fs->last_clust);
    5b8c:	8a 85       	ldd	r24, Y+10	; 0x0a
    5b8e:	9b 85       	ldd	r25, Y+11	; 0x0b
    5b90:	ac 85       	ldd	r26, Y+12	; 0x0c
    5b92:	bd 85       	ldd	r27, Y+13	; 0x0d
    5b94:	34 96       	adiw	r30, 0x04	; 4
    5b96:	80 83       	st	Z, r24
    5b98:	91 83       	std	Z+1, r25	; 0x01
    5b9a:	a2 83       	std	Z+2, r26	; 0x02
    5b9c:	b3 83       	std	Z+3, r27	; 0x03
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
    5b9e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5ba0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5ba2:	ac 8d       	ldd	r26, Y+28	; 0x1c
    5ba4:	bd 8d       	ldd	r27, Y+29	; 0x1d
    5ba6:	9c 01       	movw	r18, r24
    5ba8:	ad 01       	movw	r20, r26
    5baa:	2f 5f       	subi	r18, 0xFF	; 255
    5bac:	3f 4f       	sbci	r19, 0xFF	; 255
    5bae:	4f 4f       	sbci	r20, 0xFF	; 255
    5bb0:	5f 4f       	sbci	r21, 0xFF	; 255
    5bb2:	2a a7       	std	Y+42, r18	; 0x2a
    5bb4:	3b a7       	std	Y+43, r19	; 0x2b
    5bb6:	4c a7       	std	Y+44, r20	; 0x2c
    5bb8:	5d a7       	std	Y+45, r21	; 0x2d
			disk_write(fs->drv, fs->win, fs->winsect, 1);
    5bba:	01 e0       	ldi	r16, 0x01	; 1
    5bbc:	10 e0       	ldi	r17, 0x00	; 0
    5bbe:	89 81       	ldd	r24, Y+1	; 0x01
    5bc0:	dd d3       	rcall	.+1978   	; 0x637c <disk_write>
			fs->fsi_flag = 0;
    5bc2:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    5bc4:	40 e0       	ldi	r20, 0x00	; 0
    5bc6:	50 e0       	ldi	r21, 0x00	; 0
    5bc8:	60 e0       	ldi	r22, 0x00	; 0
    5bca:	89 81       	ldd	r24, Y+1	; 0x01
    5bcc:	45 d4       	rcall	.+2186   	; 0x6458 <disk_ioctl>
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
    5bce:	91 e0       	ldi	r25, 0x01	; 1
    5bd0:	81 11       	cpse	r24, r1
    5bd2:	01 c0       	rjmp	.+2      	; 0x5bd6 <f_sync+0x140>
    5bd4:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    5bd6:	89 2f       	mov	r24, r25
    5bd8:	df 91       	pop	r29
    5bda:	cf 91       	pop	r28
    5bdc:	1f 91       	pop	r17
    5bde:	0f 91       	pop	r16
    5be0:	08 95       	ret

00005be2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    5be2:	cf 93       	push	r28
    5be4:	df 93       	push	r29
    5be6:	ec 01       	movw	r28, r24
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    5be8:	56 df       	rcall	.-340    	; 0x5a96 <f_sync>
	if (res == FR_OK)
    5bea:	81 11       	cpse	r24, r1
    5bec:	07 c0       	rjmp	.+14     	; 0x5bfc <f_close+0x1a>
#endif
	{
		res = validate(fp);				/* Lock volume */
    5bee:	ce 01       	movw	r24, r28
    5bf0:	0e 94 01 20 	call	0x4002	; 0x4002 <validate>
		if (res == FR_OK) {
    5bf4:	81 11       	cpse	r24, r1
    5bf6:	02 c0       	rjmp	.+4      	; 0x5bfc <f_close+0x1a>
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
				fp->fs = 0;				/* Invalidate file object */
    5bf8:	19 82       	std	Y+1, r1	; 0x01
    5bfa:	18 82       	st	Y, r1
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    5bfc:	df 91       	pop	r29
    5bfe:	cf 91       	pop	r28
    5c00:	08 95       	ret

00005c02 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    5c02:	4f 92       	push	r4
    5c04:	5f 92       	push	r5
    5c06:	6f 92       	push	r6
    5c08:	7f 92       	push	r7
    5c0a:	8f 92       	push	r8
    5c0c:	9f 92       	push	r9
    5c0e:	af 92       	push	r10
    5c10:	bf 92       	push	r11
    5c12:	cf 92       	push	r12
    5c14:	df 92       	push	r13
    5c16:	ef 92       	push	r14
    5c18:	ff 92       	push	r15
    5c1a:	0f 93       	push	r16
    5c1c:	1f 93       	push	r17
    5c1e:	cf 93       	push	r28
    5c20:	df 93       	push	r29
    5c22:	00 d0       	rcall	.+0      	; 0x5c24 <f_lseek+0x22>
    5c24:	00 d0       	rcall	.+0      	; 0x5c26 <f_lseek+0x24>
    5c26:	00 d0       	rcall	.+0      	; 0x5c28 <f_lseek+0x26>
    5c28:	cd b7       	in	r28, 0x3d	; 61
    5c2a:	de b7       	in	r29, 0x3e	; 62
    5c2c:	9e 83       	std	Y+6, r25	; 0x06
    5c2e:	8d 83       	std	Y+5, r24	; 0x05
    5c30:	6a 01       	movw	r12, r20
    5c32:	7b 01       	movw	r14, r22
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
    5c34:	0e 94 01 20 	call	0x4002	; 0x4002 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    5c38:	81 11       	cpse	r24, r1
    5c3a:	93 c1       	rjmp	.+806    	; 0x5f62 <f_lseek+0x360>
	if (fp->err)						/* Check error */
    5c3c:	ad 81       	ldd	r26, Y+5	; 0x05
    5c3e:	be 81       	ldd	r27, Y+6	; 0x06
    5c40:	15 96       	adiw	r26, 0x05	; 5
    5c42:	8c 91       	ld	r24, X
    5c44:	15 97       	sbiw	r26, 0x05	; 5
    5c46:	81 11       	cpse	r24, r1
    5c48:	8c c1       	rjmp	.+792    	; 0x5f62 <f_lseek+0x360>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    5c4a:	1a 96       	adiw	r26, 0x0a	; 10
    5c4c:	8d 91       	ld	r24, X+
    5c4e:	9d 91       	ld	r25, X+
    5c50:	0d 90       	ld	r0, X+
    5c52:	bc 91       	ld	r27, X
    5c54:	a0 2d       	mov	r26, r0
    5c56:	8c 15       	cp	r24, r12
    5c58:	9d 05       	cpc	r25, r13
    5c5a:	ae 05       	cpc	r26, r14
    5c5c:	bf 05       	cpc	r27, r15
    5c5e:	38 f4       	brcc	.+14     	; 0x5c6e <f_lseek+0x6c>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    5c60:	ed 81       	ldd	r30, Y+5	; 0x05
    5c62:	fe 81       	ldd	r31, Y+6	; 0x06
    5c64:	24 81       	ldd	r18, Z+4	; 0x04
    5c66:	21 fd       	sbrc	r18, 1
    5c68:	02 c0       	rjmp	.+4      	; 0x5c6e <f_lseek+0x6c>
#endif
			) ofs = fp->fsize;
    5c6a:	6c 01       	movw	r12, r24
    5c6c:	7d 01       	movw	r14, r26

		ifptr = fp->fptr;
    5c6e:	ad 81       	ldd	r26, Y+5	; 0x05
    5c70:	be 81       	ldd	r27, Y+6	; 0x06
    5c72:	16 96       	adiw	r26, 0x06	; 6
    5c74:	4d 90       	ld	r4, X+
    5c76:	5d 90       	ld	r5, X+
    5c78:	6d 90       	ld	r6, X+
    5c7a:	7c 90       	ld	r7, X
    5c7c:	19 97       	sbiw	r26, 0x09	; 9
		fp->fptr = nsect = 0;
    5c7e:	fd 01       	movw	r30, r26
    5c80:	16 82       	std	Z+6, r1	; 0x06
    5c82:	17 82       	std	Z+7, r1	; 0x07
    5c84:	10 86       	std	Z+8, r1	; 0x08
    5c86:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    5c88:	c1 14       	cp	r12, r1
    5c8a:	d1 04       	cpc	r13, r1
    5c8c:	e1 04       	cpc	r14, r1
    5c8e:	f1 04       	cpc	r15, r1
    5c90:	09 f4       	brne	.+2      	; 0x5c94 <f_lseek+0x92>
    5c92:	64 c1       	rjmp	.+712    	; 0x5f5c <f_lseek+0x35a>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    5c94:	00 81       	ld	r16, Z
    5c96:	11 81       	ldd	r17, Z+1	; 0x01
    5c98:	d8 01       	movw	r26, r16
    5c9a:	12 96       	adiw	r26, 0x02	; 2
    5c9c:	8c 90       	ld	r8, X
    5c9e:	91 2c       	mov	r9, r1
    5ca0:	a1 2c       	mov	r10, r1
    5ca2:	b1 2c       	mov	r11, r1
    5ca4:	07 2e       	mov	r0, r23
    5ca6:	79 e0       	ldi	r23, 0x09	; 9
    5ca8:	88 0c       	add	r8, r8
    5caa:	99 1c       	adc	r9, r9
    5cac:	aa 1c       	adc	r10, r10
    5cae:	bb 1c       	adc	r11, r11
    5cb0:	7a 95       	dec	r23
    5cb2:	d1 f7       	brne	.-12     	; 0x5ca8 <f_lseek+0xa6>
    5cb4:	70 2d       	mov	r23, r0
			if (ifptr > 0 &&
    5cb6:	41 14       	cp	r4, r1
    5cb8:	51 04       	cpc	r5, r1
    5cba:	61 04       	cpc	r6, r1
    5cbc:	71 04       	cpc	r7, r1
    5cbe:	09 f4       	brne	.+2      	; 0x5cc2 <f_lseek+0xc0>
    5cc0:	40 c0       	rjmp	.+128    	; 0x5d42 <f_lseek+0x140>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    5cc2:	b1 e0       	ldi	r27, 0x01	; 1
    5cc4:	4b 1a       	sub	r4, r27
    5cc6:	51 08       	sbc	r5, r1
    5cc8:	61 08       	sbc	r6, r1
    5cca:	71 08       	sbc	r7, r1

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    5ccc:	c7 01       	movw	r24, r14
    5cce:	b6 01       	movw	r22, r12
    5cd0:	61 50       	subi	r22, 0x01	; 1
    5cd2:	71 09       	sbc	r23, r1
    5cd4:	81 09       	sbc	r24, r1
    5cd6:	91 09       	sbc	r25, r1
    5cd8:	a5 01       	movw	r20, r10
    5cda:	94 01       	movw	r18, r8
    5cdc:	0e 94 aa 40 	call	0x8154	; 0x8154 <__udivmodsi4>
    5ce0:	29 83       	std	Y+1, r18	; 0x01
    5ce2:	3a 83       	std	Y+2, r19	; 0x02
    5ce4:	4b 83       	std	Y+3, r20	; 0x03
    5ce6:	5c 83       	std	Y+4, r21	; 0x04
    5ce8:	c3 01       	movw	r24, r6
    5cea:	b2 01       	movw	r22, r4
    5cec:	a5 01       	movw	r20, r10
    5cee:	94 01       	movw	r18, r8
    5cf0:	0e 94 aa 40 	call	0x8154	; 0x8154 <__udivmodsi4>
    5cf4:	89 81       	ldd	r24, Y+1	; 0x01
    5cf6:	9a 81       	ldd	r25, Y+2	; 0x02
    5cf8:	ab 81       	ldd	r26, Y+3	; 0x03
    5cfa:	bc 81       	ldd	r27, Y+4	; 0x04
    5cfc:	82 17       	cp	r24, r18
    5cfe:	93 07       	cpc	r25, r19
    5d00:	a4 07       	cpc	r26, r20
    5d02:	b5 07       	cpc	r27, r21
    5d04:	f0 f0       	brcs	.+60     	; 0x5d42 <f_lseek+0x140>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    5d06:	88 27       	eor	r24, r24
    5d08:	99 27       	eor	r25, r25
    5d0a:	dc 01       	movw	r26, r24
    5d0c:	88 19       	sub	r24, r8
    5d0e:	99 09       	sbc	r25, r9
    5d10:	aa 09       	sbc	r26, r10
    5d12:	bb 09       	sbc	r27, r11
    5d14:	48 22       	and	r4, r24
    5d16:	59 22       	and	r5, r25
    5d18:	6a 22       	and	r6, r26
    5d1a:	7b 22       	and	r7, r27
    5d1c:	ad 81       	ldd	r26, Y+5	; 0x05
    5d1e:	be 81       	ldd	r27, Y+6	; 0x06
    5d20:	16 96       	adiw	r26, 0x06	; 6
    5d22:	4d 92       	st	X+, r4
    5d24:	5d 92       	st	X+, r5
    5d26:	6d 92       	st	X+, r6
    5d28:	7c 92       	st	X, r7
    5d2a:	19 97       	sbiw	r26, 0x09	; 9
				ofs -= fp->fptr;
    5d2c:	c4 18       	sub	r12, r4
    5d2e:	d5 08       	sbc	r13, r5
    5d30:	e6 08       	sbc	r14, r6
    5d32:	f7 08       	sbc	r15, r7
				clst = fp->clust;
    5d34:	52 96       	adiw	r26, 0x12	; 18
    5d36:	4d 91       	ld	r20, X+
    5d38:	5d 91       	ld	r21, X+
    5d3a:	6d 91       	ld	r22, X+
    5d3c:	7c 91       	ld	r23, X
    5d3e:	55 97       	sbiw	r26, 0x15	; 21
    5d40:	37 c0       	rjmp	.+110    	; 0x5db0 <f_lseek+0x1ae>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    5d42:	ed 81       	ldd	r30, Y+5	; 0x05
    5d44:	fe 81       	ldd	r31, Y+6	; 0x06
    5d46:	46 85       	ldd	r20, Z+14	; 0x0e
    5d48:	57 85       	ldd	r21, Z+15	; 0x0f
    5d4a:	60 89       	ldd	r22, Z+16	; 0x10
    5d4c:	71 89       	ldd	r23, Z+17	; 0x11
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    5d4e:	41 15       	cp	r20, r1
    5d50:	51 05       	cpc	r21, r1
    5d52:	61 05       	cpc	r22, r1
    5d54:	71 05       	cpc	r23, r1
    5d56:	31 f5       	brne	.+76     	; 0x5da4 <f_lseek+0x1a2>
					clst = create_chain(fp->fs, 0);
    5d58:	40 e0       	ldi	r20, 0x00	; 0
    5d5a:	50 e0       	ldi	r21, 0x00	; 0
    5d5c:	ba 01       	movw	r22, r20
    5d5e:	c8 01       	movw	r24, r16
    5d60:	0e 94 f6 25 	call	0x4bec	; 0x4bec <create_chain>
    5d64:	ab 01       	movw	r20, r22
    5d66:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    5d68:	41 30       	cpi	r20, 0x01	; 1
    5d6a:	51 05       	cpc	r21, r1
    5d6c:	61 05       	cpc	r22, r1
    5d6e:	71 05       	cpc	r23, r1
    5d70:	31 f4       	brne	.+12     	; 0x5d7e <f_lseek+0x17c>
    5d72:	82 e0       	ldi	r24, 0x02	; 2
    5d74:	ad 81       	ldd	r26, Y+5	; 0x05
    5d76:	be 81       	ldd	r27, Y+6	; 0x06
    5d78:	15 96       	adiw	r26, 0x05	; 5
    5d7a:	8c 93       	st	X, r24
    5d7c:	f2 c0       	rjmp	.+484    	; 0x5f62 <f_lseek+0x360>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    5d7e:	4f 3f       	cpi	r20, 0xFF	; 255
    5d80:	bf ef       	ldi	r27, 0xFF	; 255
    5d82:	5b 07       	cpc	r21, r27
    5d84:	6b 07       	cpc	r22, r27
    5d86:	7b 07       	cpc	r23, r27
    5d88:	29 f4       	brne	.+10     	; 0x5d94 <f_lseek+0x192>
    5d8a:	81 e0       	ldi	r24, 0x01	; 1
    5d8c:	ed 81       	ldd	r30, Y+5	; 0x05
    5d8e:	fe 81       	ldd	r31, Y+6	; 0x06
    5d90:	85 83       	std	Z+5, r24	; 0x05
    5d92:	e7 c0       	rjmp	.+462    	; 0x5f62 <f_lseek+0x360>
					fp->sclust = clst;
    5d94:	ad 81       	ldd	r26, Y+5	; 0x05
    5d96:	be 81       	ldd	r27, Y+6	; 0x06
    5d98:	1e 96       	adiw	r26, 0x0e	; 14
    5d9a:	4d 93       	st	X+, r20
    5d9c:	5d 93       	st	X+, r21
    5d9e:	6d 93       	st	X+, r22
    5da0:	7c 93       	st	X, r23
    5da2:	51 97       	sbiw	r26, 0x11	; 17
				}
#endif
				fp->clust = clst;
    5da4:	ed 81       	ldd	r30, Y+5	; 0x05
    5da6:	fe 81       	ldd	r31, Y+6	; 0x06
    5da8:	42 8b       	std	Z+18, r20	; 0x12
    5daa:	53 8b       	std	Z+19, r21	; 0x13
    5dac:	64 8b       	std	Z+20, r22	; 0x14
    5dae:	75 8b       	std	Z+21, r23	; 0x15
			}
			if (clst != 0) {
    5db0:	41 15       	cp	r20, r1
    5db2:	51 05       	cpc	r21, r1
    5db4:	61 05       	cpc	r22, r1
    5db6:	71 05       	cpc	r23, r1
    5db8:	09 f4       	brne	.+2      	; 0x5dbc <f_lseek+0x1ba>
    5dba:	99 c0       	rjmp	.+306    	; 0x5eee <f_lseek+0x2ec>
				while (ofs > bcs) {						/* Cluster following loop */
    5dbc:	8c 14       	cp	r8, r12
    5dbe:	9d 04       	cpc	r9, r13
    5dc0:	ae 04       	cpc	r10, r14
    5dc2:	bf 04       	cpc	r11, r15
    5dc4:	08 f0       	brcs	.+2      	; 0x5dc8 <f_lseek+0x1c6>
    5dc6:	5f c0       	rjmp	.+190    	; 0x5e86 <f_lseek+0x284>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    5dc8:	ad 81       	ldd	r26, Y+5	; 0x05
    5dca:	be 81       	ldd	r27, Y+6	; 0x06
    5dcc:	14 96       	adiw	r26, 0x04	; 4
    5dce:	8c 91       	ld	r24, X
    5dd0:	14 97       	sbiw	r26, 0x04	; 4
    5dd2:	81 ff       	sbrs	r24, 1
    5dd4:	0c c0       	rjmp	.+24     	; 0x5dee <f_lseek+0x1ec>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    5dd6:	8d 91       	ld	r24, X+
    5dd8:	9c 91       	ld	r25, X
    5dda:	0e 94 f6 25 	call	0x4bec	; 0x4bec <create_chain>
    5dde:	ab 01       	movw	r20, r22
    5de0:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    5de2:	41 15       	cp	r20, r1
    5de4:	51 05       	cpc	r21, r1
    5de6:	61 05       	cpc	r22, r1
    5de8:	71 05       	cpc	r23, r1
    5dea:	49 f4       	brne	.+18     	; 0x5dfe <f_lseek+0x1fc>
    5dec:	4a c0       	rjmp	.+148    	; 0x5e82 <f_lseek+0x280>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    5dee:	ad 81       	ldd	r26, Y+5	; 0x05
    5df0:	be 81       	ldd	r27, Y+6	; 0x06
    5df2:	8d 91       	ld	r24, X+
    5df4:	9c 91       	ld	r25, X
    5df6:	0e 94 36 23 	call	0x466c	; 0x466c <get_fat>
    5dfa:	ab 01       	movw	r20, r22
    5dfc:	bc 01       	movw	r22, r24
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    5dfe:	4f 3f       	cpi	r20, 0xFF	; 255
    5e00:	bf ef       	ldi	r27, 0xFF	; 255
    5e02:	5b 07       	cpc	r21, r27
    5e04:	6b 07       	cpc	r22, r27
    5e06:	7b 07       	cpc	r23, r27
    5e08:	29 f4       	brne	.+10     	; 0x5e14 <f_lseek+0x212>
    5e0a:	ed 81       	ldd	r30, Y+5	; 0x05
    5e0c:	fe 81       	ldd	r31, Y+6	; 0x06
    5e0e:	81 e0       	ldi	r24, 0x01	; 1
    5e10:	85 83       	std	Z+5, r24	; 0x05
    5e12:	a7 c0       	rjmp	.+334    	; 0x5f62 <f_lseek+0x360>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    5e14:	42 30       	cpi	r20, 0x02	; 2
    5e16:	51 05       	cpc	r21, r1
    5e18:	61 05       	cpc	r22, r1
    5e1a:	71 05       	cpc	r23, r1
    5e1c:	68 f0       	brcs	.+26     	; 0x5e38 <f_lseek+0x236>
    5e1e:	ad 81       	ldd	r26, Y+5	; 0x05
    5e20:	be 81       	ldd	r27, Y+6	; 0x06
    5e22:	ed 91       	ld	r30, X+
    5e24:	fc 91       	ld	r31, X
    5e26:	82 89       	ldd	r24, Z+18	; 0x12
    5e28:	93 89       	ldd	r25, Z+19	; 0x13
    5e2a:	a4 89       	ldd	r26, Z+20	; 0x14
    5e2c:	b5 89       	ldd	r27, Z+21	; 0x15
    5e2e:	48 17       	cp	r20, r24
    5e30:	59 07       	cpc	r21, r25
    5e32:	6a 07       	cpc	r22, r26
    5e34:	7b 07       	cpc	r23, r27
    5e36:	28 f0       	brcs	.+10     	; 0x5e42 <f_lseek+0x240>
    5e38:	ed 81       	ldd	r30, Y+5	; 0x05
    5e3a:	fe 81       	ldd	r31, Y+6	; 0x06
    5e3c:	82 e0       	ldi	r24, 0x02	; 2
    5e3e:	85 83       	std	Z+5, r24	; 0x05
    5e40:	90 c0       	rjmp	.+288    	; 0x5f62 <f_lseek+0x360>
					fp->clust = clst;
    5e42:	ad 81       	ldd	r26, Y+5	; 0x05
    5e44:	be 81       	ldd	r27, Y+6	; 0x06
    5e46:	52 96       	adiw	r26, 0x12	; 18
    5e48:	4d 93       	st	X+, r20
    5e4a:	5d 93       	st	X+, r21
    5e4c:	6d 93       	st	X+, r22
    5e4e:	7c 93       	st	X, r23
    5e50:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    5e52:	fd 01       	movw	r30, r26
    5e54:	86 81       	ldd	r24, Z+6	; 0x06
    5e56:	97 81       	ldd	r25, Z+7	; 0x07
    5e58:	a0 85       	ldd	r26, Z+8	; 0x08
    5e5a:	b1 85       	ldd	r27, Z+9	; 0x09
    5e5c:	88 0d       	add	r24, r8
    5e5e:	99 1d       	adc	r25, r9
    5e60:	aa 1d       	adc	r26, r10
    5e62:	bb 1d       	adc	r27, r11
    5e64:	86 83       	std	Z+6, r24	; 0x06
    5e66:	97 83       	std	Z+7, r25	; 0x07
    5e68:	a0 87       	std	Z+8, r26	; 0x08
    5e6a:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    5e6c:	c8 18       	sub	r12, r8
    5e6e:	d9 08       	sbc	r13, r9
    5e70:	ea 08       	sbc	r14, r10
    5e72:	fb 08       	sbc	r15, r11
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    5e74:	8c 14       	cp	r8, r12
    5e76:	9d 04       	cpc	r9, r13
    5e78:	ae 04       	cpc	r10, r14
    5e7a:	bf 04       	cpc	r11, r15
    5e7c:	08 f4       	brcc	.+2      	; 0x5e80 <f_lseek+0x27e>
    5e7e:	a4 cf       	rjmp	.-184    	; 0x5dc8 <f_lseek+0x1c6>
    5e80:	02 c0       	rjmp	.+4      	; 0x5e86 <f_lseek+0x284>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
    5e82:	75 01       	movw	r14, r10
    5e84:	64 01       	movw	r12, r8
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    5e86:	ed 81       	ldd	r30, Y+5	; 0x05
    5e88:	fe 81       	ldd	r31, Y+6	; 0x06
    5e8a:	86 81       	ldd	r24, Z+6	; 0x06
    5e8c:	97 81       	ldd	r25, Z+7	; 0x07
    5e8e:	a0 85       	ldd	r26, Z+8	; 0x08
    5e90:	b1 85       	ldd	r27, Z+9	; 0x09
    5e92:	8c 0d       	add	r24, r12
    5e94:	9d 1d       	adc	r25, r13
    5e96:	ae 1d       	adc	r26, r14
    5e98:	bf 1d       	adc	r27, r15
    5e9a:	86 83       	std	Z+6, r24	; 0x06
    5e9c:	97 83       	std	Z+7, r25	; 0x07
    5e9e:	a0 87       	std	Z+8, r26	; 0x08
    5ea0:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    5ea2:	d7 01       	movw	r26, r14
    5ea4:	c6 01       	movw	r24, r12
    5ea6:	91 70       	andi	r25, 0x01	; 1
    5ea8:	aa 27       	eor	r26, r26
    5eaa:	bb 27       	eor	r27, r27
    5eac:	89 2b       	or	r24, r25
    5eae:	8a 2b       	or	r24, r26
    5eb0:	8b 2b       	or	r24, r27
    5eb2:	09 f1       	breq	.+66     	; 0x5ef6 <f_lseek+0x2f4>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    5eb4:	80 81       	ld	r24, Z
    5eb6:	91 81       	ldd	r25, Z+1	; 0x01
    5eb8:	0e 94 0e 23 	call	0x461c	; 0x461c <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    5ebc:	61 15       	cp	r22, r1
    5ebe:	71 05       	cpc	r23, r1
    5ec0:	81 05       	cpc	r24, r1
    5ec2:	91 05       	cpc	r25, r1
    5ec4:	31 f4       	brne	.+12     	; 0x5ed2 <f_lseek+0x2d0>
    5ec6:	82 e0       	ldi	r24, 0x02	; 2
    5ec8:	ad 81       	ldd	r26, Y+5	; 0x05
    5eca:	be 81       	ldd	r27, Y+6	; 0x06
    5ecc:	15 96       	adiw	r26, 0x05	; 5
    5ece:	8c 93       	st	X, r24
    5ed0:	48 c0       	rjmp	.+144    	; 0x5f62 <f_lseek+0x360>
					nsect += ofs / SS(fp->fs);
    5ed2:	0b 2e       	mov	r0, r27
    5ed4:	b9 e0       	ldi	r27, 0x09	; 9
    5ed6:	f6 94       	lsr	r15
    5ed8:	e7 94       	ror	r14
    5eda:	d7 94       	ror	r13
    5edc:	c7 94       	ror	r12
    5ede:	ba 95       	dec	r27
    5ee0:	d1 f7       	brne	.-12     	; 0x5ed6 <f_lseek+0x2d4>
    5ee2:	b0 2d       	mov	r27, r0
    5ee4:	c6 0e       	add	r12, r22
    5ee6:	d7 1e       	adc	r13, r23
    5ee8:	e8 1e       	adc	r14, r24
    5eea:	f9 1e       	adc	r15, r25
    5eec:	07 c0       	rjmp	.+14     	; 0x5efc <f_lseek+0x2fa>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    5eee:	c1 2c       	mov	r12, r1
    5ef0:	d1 2c       	mov	r13, r1
    5ef2:	76 01       	movw	r14, r12
    5ef4:	03 c0       	rjmp	.+6      	; 0x5efc <f_lseek+0x2fa>
    5ef6:	c1 2c       	mov	r12, r1
    5ef8:	d1 2c       	mov	r13, r1
    5efa:	76 01       	movw	r14, r12
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    5efc:	ed 81       	ldd	r30, Y+5	; 0x05
    5efe:	fe 81       	ldd	r31, Y+6	; 0x06
    5f00:	86 81       	ldd	r24, Z+6	; 0x06
    5f02:	97 81       	ldd	r25, Z+7	; 0x07
    5f04:	a0 85       	ldd	r26, Z+8	; 0x08
    5f06:	b1 85       	ldd	r27, Z+9	; 0x09
    5f08:	ac 01       	movw	r20, r24
    5f0a:	bd 01       	movw	r22, r26
    5f0c:	51 70       	andi	r21, 0x01	; 1
    5f0e:	66 27       	eor	r22, r22
    5f10:	77 27       	eor	r23, r23
    5f12:	45 2b       	or	r20, r21
    5f14:	46 2b       	or	r20, r22
    5f16:	47 2b       	or	r20, r23
    5f18:	69 f0       	breq	.+26     	; 0x5f34 <f_lseek+0x332>
    5f1a:	46 89       	ldd	r20, Z+22	; 0x16
    5f1c:	57 89       	ldd	r21, Z+23	; 0x17
    5f1e:	60 8d       	ldd	r22, Z+24	; 0x18
    5f20:	71 8d       	ldd	r23, Z+25	; 0x19
    5f22:	c4 16       	cp	r12, r20
    5f24:	d5 06       	cpc	r13, r21
    5f26:	e6 06       	cpc	r14, r22
    5f28:	f7 06       	cpc	r15, r23
    5f2a:	21 f0       	breq	.+8      	; 0x5f34 <f_lseek+0x332>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    5f2c:	c6 8a       	std	Z+22, r12	; 0x16
    5f2e:	d7 8a       	std	Z+23, r13	; 0x17
    5f30:	e0 8e       	std	Z+24, r14	; 0x18
    5f32:	f1 8e       	std	Z+25, r15	; 0x19
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    5f34:	ed 81       	ldd	r30, Y+5	; 0x05
    5f36:	fe 81       	ldd	r31, Y+6	; 0x06
    5f38:	42 85       	ldd	r20, Z+10	; 0x0a
    5f3a:	53 85       	ldd	r21, Z+11	; 0x0b
    5f3c:	64 85       	ldd	r22, Z+12	; 0x0c
    5f3e:	75 85       	ldd	r23, Z+13	; 0x0d
    5f40:	48 17       	cp	r20, r24
    5f42:	59 07       	cpc	r21, r25
    5f44:	6a 07       	cpc	r22, r26
    5f46:	7b 07       	cpc	r23, r27
    5f48:	58 f4       	brcc	.+22     	; 0x5f60 <f_lseek+0x35e>
			fp->fsize = fp->fptr;
    5f4a:	82 87       	std	Z+10, r24	; 0x0a
    5f4c:	93 87       	std	Z+11, r25	; 0x0b
    5f4e:	a4 87       	std	Z+12, r26	; 0x0c
    5f50:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA__WRITTEN;
    5f52:	84 81       	ldd	r24, Z+4	; 0x04
    5f54:	80 62       	ori	r24, 0x20	; 32
    5f56:	84 83       	std	Z+4, r24	; 0x04
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
    5f58:	80 e0       	ldi	r24, 0x00	; 0
    5f5a:	03 c0       	rjmp	.+6      	; 0x5f62 <f_lseek+0x360>
    5f5c:	80 e0       	ldi	r24, 0x00	; 0
    5f5e:	01 c0       	rjmp	.+2      	; 0x5f62 <f_lseek+0x360>
    5f60:	80 e0       	ldi	r24, 0x00	; 0
}
    5f62:	26 96       	adiw	r28, 0x06	; 6
    5f64:	0f b6       	in	r0, 0x3f	; 63
    5f66:	f8 94       	cli
    5f68:	de bf       	out	0x3e, r29	; 62
    5f6a:	0f be       	out	0x3f, r0	; 63
    5f6c:	cd bf       	out	0x3d, r28	; 61
    5f6e:	df 91       	pop	r29
    5f70:	cf 91       	pop	r28
    5f72:	1f 91       	pop	r17
    5f74:	0f 91       	pop	r16
    5f76:	ff 90       	pop	r15
    5f78:	ef 90       	pop	r14
    5f7a:	df 90       	pop	r13
    5f7c:	cf 90       	pop	r12
    5f7e:	bf 90       	pop	r11
    5f80:	af 90       	pop	r10
    5f82:	9f 90       	pop	r9
    5f84:	8f 90       	pop	r8
    5f86:	7f 90       	pop	r7
    5f88:	6f 90       	pop	r6
    5f8a:	5f 90       	pop	r5
    5f8c:	4f 90       	pop	r4
    5f8e:	08 95       	ret

00005f90 <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
    5f90:	29 9a       	sbi	0x05, 1	; 5
	spi_rwSPI(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    5f92:	8f ef       	ldi	r24, 0xFF	; 255
    5f94:	33 c7       	rjmp	.+3686   	; 0x6dfc <spi_rwSPI>
    5f96:	08 95       	ret

00005f98 <select>:

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	//PORTB = (0 << 1) | (0 << 2) | (0 << 3);
	CS_LOW();		/* Set CS# low */
    5f98:	29 98       	cbi	0x05, 1	; 5
	spi_rwSPI(0xFF);	/* Dummy clock (force DO enabled) */
    5f9a:	8f ef       	ldi	r24, 0xFF	; 255
    5f9c:	2f d7       	rcall	.+3678   	; 0x6dfc <spi_rwSPI>
)
{
	BYTE d;


	Timer2 = wt / 10;
    5f9e:	82 e3       	ldi	r24, 0x32	; 50
    5fa0:	80 93 08 11 	sts	0x1108, r24	; 0x801108 <Timer2>
	do
		d = spi_rwSPI(0xFF);
    5fa4:	8f ef       	ldi	r24, 0xFF	; 255
    5fa6:	2a d7       	rcall	.+3668   	; 0x6dfc <spi_rwSPI>
	while (d != 0xFF && Timer2);
    5fa8:	8f 3f       	cpi	r24, 0xFF	; 255
    5faa:	41 f0       	breq	.+16     	; 0x5fbc <select+0x24>
    5fac:	80 91 08 11 	lds	r24, 0x1108	; 0x801108 <Timer2>
    5fb0:	81 11       	cpse	r24, r1
	//PORTB = (0 << 1) | (0 << 2) | (0 << 3);
	CS_LOW();		/* Set CS# low */
	spi_rwSPI(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */

	deselect();
    5fb2:	f8 cf       	rjmp	.-16     	; 0x5fa4 <select+0xc>
    5fb4:	ed df       	rcall	.-38     	; 0x5f90 <deselect>
	return 0;	/* Timeout */
    5fb6:	80 e0       	ldi	r24, 0x00	; 0
    5fb8:	90 e0       	ldi	r25, 0x00	; 0
    5fba:	08 95       	ret
int select (void)	/* 1:Successful, 0:Timeout */
{
	//PORTB = (0 << 1) | (0 << 2) | (0 << 3);
	CS_LOW();		/* Set CS# low */
	spi_rwSPI(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */
    5fbc:	81 e0       	ldi	r24, 0x01	; 1
    5fbe:	90 e0       	ldi	r25, 0x00	; 0

	deselect();
	return 0;	/* Timeout */
}
    5fc0:	08 95       	ret

00005fc2 <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    5fc2:	ff 92       	push	r15
    5fc4:	0f 93       	push	r16
    5fc6:	1f 93       	push	r17
    5fc8:	cf 93       	push	r28
    5fca:	df 93       	push	r29
    5fcc:	c8 2f       	mov	r28, r24
    5fce:	d4 2f       	mov	r29, r20
    5fd0:	15 2f       	mov	r17, r21
    5fd2:	06 2f       	mov	r16, r22
    5fd4:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    5fd6:	88 23       	and	r24, r24
    5fd8:	4c f4       	brge	.+18     	; 0x5fec <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    5fda:	40 e0       	ldi	r20, 0x00	; 0
    5fdc:	50 e0       	ldi	r21, 0x00	; 0
    5fde:	ba 01       	movw	r22, r20
    5fe0:	87 e3       	ldi	r24, 0x37	; 55
    5fe2:	ef df       	rcall	.-34     	; 0x5fc2 <send_cmd>
		if (res > 1) return res;
    5fe4:	82 30       	cpi	r24, 0x02	; 2
    5fe6:	08 f0       	brcs	.+2      	; 0x5fea <send_cmd+0x28>
    5fe8:	3c c0       	rjmp	.+120    	; 0x6062 <send_cmd+0xa0>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    5fea:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    5fec:	cc 30       	cpi	r28, 0x0C	; 12
		deselect();
    5fee:	f1 f0       	breq	.+60     	; 0x602c <send_cmd+0x6a>
		if (!select()) return 0xFF;
    5ff0:	cf df       	rcall	.-98     	; 0x5f90 <deselect>
    5ff2:	d2 df       	rcall	.-92     	; 0x5f98 <select>
    5ff4:	89 2b       	or	r24, r25
	}

	/* Send command packet */
	spi_rwSPI(0x40 | cmd);				/* Start + Command index */
    5ff6:	c1 f0       	breq	.+48     	; 0x6028 <send_cmd+0x66>
    5ff8:	8c 2f       	mov	r24, r28
    5ffa:	80 64       	ori	r24, 0x40	; 64
	spi_rwSPI((BYTE)(arg >> 24));		/* Argument[31..24] */
    5ffc:	ff d6       	rcall	.+3582   	; 0x6dfc <spi_rwSPI>
    5ffe:	8f 2d       	mov	r24, r15
	spi_rwSPI((BYTE)(arg >> 16));		/* Argument[23..16] */
    6000:	fd d6       	rcall	.+3578   	; 0x6dfc <spi_rwSPI>
    6002:	80 2f       	mov	r24, r16
	spi_rwSPI((BYTE)(arg >> 8));			/* Argument[15..8] */
    6004:	fb d6       	rcall	.+3574   	; 0x6dfc <spi_rwSPI>
    6006:	81 2f       	mov	r24, r17
	spi_rwSPI((BYTE)arg);				/* Argument[7..0] */
    6008:	f9 d6       	rcall	.+3570   	; 0x6dfc <spi_rwSPI>
    600a:	8d 2f       	mov	r24, r29
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
    600c:	f7 d6       	rcall	.+3566   	; 0x6dfc <spi_rwSPI>
    600e:	cc 23       	and	r28, r28
    6010:	29 f1       	breq	.+74     	; 0x605c <send_cmd+0x9a>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	spi_rwSPI(n);

	/* Receive command response */
	if (cmd == CMD12) spi_rwSPI(0xFF);		/* Skip a stuff byte when stop reading */
    6012:	21 c0       	rjmp	.+66     	; 0x6056 <send_cmd+0x94>
    6014:	8f ef       	ldi	r24, 0xFF	; 255
    6016:	f2 d6       	rcall	.+3556   	; 0x6dfc <spi_rwSPI>
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    6018:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) spi_rwSPI(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = spi_rwSPI(0xFF);
    601a:	8f ef       	ldi	r24, 0xFF	; 255
    601c:	ef d6       	rcall	.+3550   	; 0x6dfc <spi_rwSPI>
	while ((res & 0x80) && --n);
    601e:	88 23       	and	r24, r24
    6020:	04 f5       	brge	.+64     	; 0x6062 <send_cmd+0xa0>
    6022:	c1 50       	subi	r28, 0x01	; 1
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
    6024:	d1 f7       	brne	.-12     	; 0x601a <send_cmd+0x58>
	}

	/* Send command packet */
	spi_rwSPI(0x40 | cmd);				/* Start + Command index */
    6026:	1d c0       	rjmp	.+58     	; 0x6062 <send_cmd+0xa0>
    6028:	8f ef       	ldi	r24, 0xFF	; 255
	spi_rwSPI((BYTE)(arg >> 24));		/* Argument[31..24] */
    602a:	1b c0       	rjmp	.+54     	; 0x6062 <send_cmd+0xa0>
    602c:	8c e4       	ldi	r24, 0x4C	; 76
    602e:	e6 d6       	rcall	.+3532   	; 0x6dfc <spi_rwSPI>
	spi_rwSPI((BYTE)(arg >> 16));		/* Argument[23..16] */
    6030:	8f 2d       	mov	r24, r15
    6032:	e4 d6       	rcall	.+3528   	; 0x6dfc <spi_rwSPI>
	spi_rwSPI((BYTE)(arg >> 8));			/* Argument[15..8] */
    6034:	80 2f       	mov	r24, r16
    6036:	e2 d6       	rcall	.+3524   	; 0x6dfc <spi_rwSPI>
	spi_rwSPI((BYTE)arg);				/* Argument[7..0] */
    6038:	81 2f       	mov	r24, r17
    603a:	e0 d6       	rcall	.+3520   	; 0x6dfc <spi_rwSPI>
    603c:	8d 2f       	mov	r24, r29
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	spi_rwSPI(n);
    603e:	de d6       	rcall	.+3516   	; 0x6dfc <spi_rwSPI>
    6040:	81 e0       	ldi	r24, 0x01	; 1

	/* Receive command response */
	if (cmd == CMD12) spi_rwSPI(0xFF);		/* Skip a stuff byte when stop reading */
    6042:	dc d6       	rcall	.+3512   	; 0x6dfc <spi_rwSPI>
    6044:	cc 30       	cpi	r28, 0x0C	; 12
    6046:	31 f3       	breq	.-52     	; 0x6014 <send_cmd+0x52>
	spi_rwSPI((BYTE)(arg >> 8));			/* Argument[15..8] */
	spi_rwSPI((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	spi_rwSPI(n);
    6048:	e7 cf       	rjmp	.-50     	; 0x6018 <send_cmd+0x56>
    604a:	87 e8       	ldi	r24, 0x87	; 135
    604c:	d7 d6       	rcall	.+3502   	; 0x6dfc <spi_rwSPI>
    604e:	e4 cf       	rjmp	.-56     	; 0x6018 <send_cmd+0x56>
    6050:	81 e0       	ldi	r24, 0x01	; 1
    6052:	d4 d6       	rcall	.+3496   	; 0x6dfc <spi_rwSPI>
    6054:	e1 cf       	rjmp	.-62     	; 0x6018 <send_cmd+0x56>
    6056:	c8 30       	cpi	r28, 0x08	; 8
	spi_rwSPI((BYTE)(arg >> 16));		/* Argument[23..16] */
	spi_rwSPI((BYTE)(arg >> 8));			/* Argument[15..8] */
	spi_rwSPI((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    6058:	c1 f3       	breq	.-16     	; 0x604a <send_cmd+0x88>
    605a:	fa cf       	rjmp	.-12     	; 0x6050 <send_cmd+0x8e>
    605c:	85 e9       	ldi	r24, 0x95	; 149
	spi_rwSPI(n);
    605e:	ce d6       	rcall	.+3484   	; 0x6dfc <spi_rwSPI>
    6060:	db cf       	rjmp	.-74     	; 0x6018 <send_cmd+0x56>
    6062:	df 91       	pop	r29
    6064:	cf 91       	pop	r28
	do
		res = spi_rwSPI(0xFF);
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
    6066:	1f 91       	pop	r17
    6068:	0f 91       	pop	r16
    606a:	ff 90       	pop	r15
    606c:	08 95       	ret

0000606e <rcvr_datablock>:
    606e:	0f 93       	push	r16
    6070:	1f 93       	push	r17
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    6072:	cf 93       	push	r28
    6074:	df 93       	push	r29
    6076:	08 2f       	mov	r16, r24
    6078:	19 2f       	mov	r17, r25
    607a:	eb 01       	movw	r28, r22
	BYTE token;


	Timer1 = 20;
    607c:	84 e1       	ldi	r24, 0x14	; 20
    607e:	80 93 09 11 	sts	0x1109, r24	; 0x801109 <Timer1>
	do {							/* Wait for data packet in timeout of 200ms */
		token = spi_rwSPI(0xFF);
    6082:	8f ef       	ldi	r24, 0xFF	; 255
    6084:	bb d6       	rcall	.+3446   	; 0x6dfc <spi_rwSPI>
	} while ((token == 0xFF) && Timer1);
    6086:	8f 3f       	cpi	r24, 0xFF	; 255
    6088:	39 f4       	brne	.+14     	; 0x6098 <rcvr_datablock+0x2a>
    608a:	80 91 09 11 	lds	r24, 0x1109	; 0x801109 <Timer1>
    608e:	81 11       	cpse	r24, r1
    6090:	f8 cf       	rjmp	.-16     	; 0x6082 <rcvr_datablock+0x14>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    6092:	80 e0       	ldi	r24, 0x00	; 0
    6094:	90 e0       	ldi	r25, 0x00	; 0
    6096:	20 c0       	rjmp	.+64     	; 0x60d8 <rcvr_datablock+0x6a>
    6098:	8e 3f       	cpi	r24, 0xFE	; 254
    609a:	e1 f4       	brne	.+56     	; 0x60d4 <rcvr_datablock+0x66>
    609c:	e0 2f       	mov	r30, r16
    609e:	f1 2f       	mov	r31, r17
	BYTE *p,	/* Data buffer */
	UINT cnt	/* Size of data block (must be multiple of 2) */
)
{
	do {
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
    60a0:	8f ef       	ldi	r24, 0xFF	; 255
    60a2:	8e bd       	out	0x2e, r24	; 46
    60a4:	0d b4       	in	r0, 0x2d	; 45
    60a6:	07 fe       	sbrs	r0, 7
    60a8:	fd cf       	rjmp	.-6      	; 0x60a4 <rcvr_datablock+0x36>
    60aa:	9e b5       	in	r25, 0x2e	; 46
    60ac:	df 01       	movw	r26, r30
    60ae:	90 83       	st	Z, r25
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
    60b0:	8e bd       	out	0x2e, r24	; 46
    60b2:	0d b4       	in	r0, 0x2d	; 45
    60b4:	07 fe       	sbrs	r0, 7
    60b6:	fd cf       	rjmp	.-6      	; 0x60b2 <rcvr_datablock+0x44>
    60b8:	9e b5       	in	r25, 0x2e	; 46
    60ba:	11 96       	adiw	r26, 0x01	; 1
    60bc:	9c 93       	st	X, r25
	} while (cnt -= 2);
    60be:	22 97       	sbiw	r28, 0x02	; 2
    60c0:	32 96       	adiw	r30, 0x02	; 2
    60c2:	20 97       	sbiw	r28, 0x00	; 0
    60c4:	71 f7       	brne	.-36     	; 0x60a2 <rcvr_datablock+0x34>
		token = spi_rwSPI(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	spi_rwSPI(0xFF);					/* Discard CRC */
    60c6:	8f ef       	ldi	r24, 0xFF	; 255
    60c8:	99 d6       	rcall	.+3378   	; 0x6dfc <spi_rwSPI>
	spi_rwSPI(0xFF);
    60ca:	8f ef       	ldi	r24, 0xFF	; 255
    60cc:	97 d6       	rcall	.+3374   	; 0x6dfc <spi_rwSPI>
    60ce:	81 e0       	ldi	r24, 0x01	; 1

	return 1;						/* Return with success */
    60d0:	90 e0       	ldi	r25, 0x00	; 0
    60d2:	02 c0       	rjmp	.+4      	; 0x60d8 <rcvr_datablock+0x6a>
    60d4:	80 e0       	ldi	r24, 0x00	; 0

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = spi_rwSPI(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    60d6:	90 e0       	ldi	r25, 0x00	; 0
    60d8:	df 91       	pop	r29
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	spi_rwSPI(0xFF);					/* Discard CRC */
	spi_rwSPI(0xFF);

	return 1;						/* Return with success */
}
    60da:	cf 91       	pop	r28
    60dc:	1f 91       	pop	r17
    60de:	0f 91       	pop	r16
    60e0:	08 95       	ret

000060e2 <xmit_datablock>:
    60e2:	1f 93       	push	r17
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    60e4:	cf 93       	push	r28
    60e6:	df 93       	push	r29
    60e8:	ec 01       	movw	r28, r24
    60ea:	16 2f       	mov	r17, r22
)
{
	BYTE d;


	Timer2 = wt / 10;
    60ec:	82 e3       	ldi	r24, 0x32	; 50
    60ee:	80 93 08 11 	sts	0x1108, r24	; 0x801108 <Timer2>
	do
		d = spi_rwSPI(0xFF);
    60f2:	8f ef       	ldi	r24, 0xFF	; 255
    60f4:	83 d6       	rcall	.+3334   	; 0x6dfc <spi_rwSPI>
	while (d != 0xFF && Timer2);
    60f6:	8f 3f       	cpi	r24, 0xFF	; 255
    60f8:	31 f0       	breq	.+12     	; 0x6106 <xmit_datablock+0x24>
    60fa:	80 91 08 11 	lds	r24, 0x1108	; 0x801108 <Timer2>
    60fe:	81 11       	cpse	r24, r1
    6100:	f8 cf       	rjmp	.-16     	; 0x60f2 <xmit_datablock+0x10>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
    6102:	90 e0       	ldi	r25, 0x00	; 0
    6104:	27 c0       	rjmp	.+78     	; 0x6154 <xmit_datablock+0x72>

	spi_rwSPI(token);					/* Xmit data token */
    6106:	81 2f       	mov	r24, r17
    6108:	79 d6       	rcall	.+3314   	; 0x6dfc <spi_rwSPI>
	if (token != 0xFD) {	/* Is data token */
    610a:	1d 3f       	cpi	r17, 0xFD	; 253
    610c:	09 f1       	breq	.+66     	; 0x6150 <xmit_datablock+0x6e>
    610e:	fe 01       	movw	r30, r28
    6110:	9e 01       	movw	r18, r28
    6112:	3e 5f       	subi	r19, 0xFE	; 254
    6114:	df 01       	movw	r26, r30
	const BYTE *p,	/* Data block to be sent */
	UINT cnt		/* Size of data block (must be multiple of 2) */
)
{
	do {
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
    6116:	90 81       	ld	r25, Z
    6118:	9e bd       	out	0x2e, r25	; 46
    611a:	0d b4       	in	r0, 0x2d	; 45
    611c:	07 fe       	sbrs	r0, 7
    611e:	fd cf       	rjmp	.-6      	; 0x611a <xmit_datablock+0x38>
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
    6120:	11 96       	adiw	r26, 0x01	; 1
    6122:	9c 91       	ld	r25, X
    6124:	9e bd       	out	0x2e, r25	; 46
    6126:	0d b4       	in	r0, 0x2d	; 45
    6128:	07 fe       	sbrs	r0, 7
    612a:	fd cf       	rjmp	.-6      	; 0x6126 <xmit_datablock+0x44>
    612c:	32 96       	adiw	r30, 0x02	; 2
	} while (cnt -= 2);
    612e:	e2 17       	cp	r30, r18
    6130:	f3 07       	cpc	r31, r19
	if (!wait_ready(500)) return 0;

	spi_rwSPI(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, 512);		/* Xmit the data block to the MMC */
		spi_rwSPI(0xFF);					/* CRC (Dummy) */
    6132:	81 f7       	brne	.-32     	; 0x6114 <xmit_datablock+0x32>
    6134:	8f ef       	ldi	r24, 0xFF	; 255
		spi_rwSPI(0xFF);
    6136:	62 d6       	rcall	.+3268   	; 0x6dfc <spi_rwSPI>
    6138:	8f ef       	ldi	r24, 0xFF	; 255
		resp = spi_rwSPI(0xFF);			/* Reveive data response */
    613a:	60 d6       	rcall	.+3264   	; 0x6dfc <spi_rwSPI>
    613c:	8f ef       	ldi	r24, 0xFF	; 255
    613e:	5e d6       	rcall	.+3260   	; 0x6dfc <spi_rwSPI>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
    6140:	28 2f       	mov	r18, r24
    6142:	2f 71       	andi	r18, 0x1F	; 31
    6144:	81 e0       	ldi	r24, 0x01	; 1
    6146:	90 e0       	ldi	r25, 0x00	; 0
    6148:	25 30       	cpi	r18, 0x05	; 5
    614a:	21 f0       	breq	.+8      	; 0x6154 <xmit_datablock+0x72>
    614c:	80 e0       	ldi	r24, 0x00	; 0
    614e:	02 c0       	rjmp	.+4      	; 0x6154 <xmit_datablock+0x72>
		resp = spi_rwSPI(0xFF);			/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return 0;
	}

	return 1;
    6150:	81 e0       	ldi	r24, 0x01	; 1
    6152:	90 e0       	ldi	r25, 0x00	; 0
}
    6154:	df 91       	pop	r29
    6156:	cf 91       	pop	r28
    6158:	1f 91       	pop	r17
    615a:	08 95       	ret

0000615c <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
    615c:	cf 92       	push	r12
    615e:	df 92       	push	r13
    6160:	ef 92       	push	r14
    6162:	ff 92       	push	r15
    6164:	0f 93       	push	r16
    6166:	1f 93       	push	r17
    6168:	cf 93       	push	r28
    616a:	df 93       	push	r29
    616c:	00 d0       	rcall	.+0      	; 0x616e <disk_initialize+0x12>
    616e:	00 d0       	rcall	.+0      	; 0x6170 <disk_initialize+0x14>
    6170:	cd b7       	in	r28, 0x3d	; 61
    6172:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    6174:	81 11       	cpse	r24, r1
    6176:	91 c0       	rjmp	.+290    	; 0x629a <disk_initialize+0x13e>
	//power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    6178:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <Stat>
    617c:	81 ff       	sbrs	r24, 1
    617e:	03 c0       	rjmp	.+6      	; 0x6186 <disk_initialize+0x2a>
    6180:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <Stat>
    6184:	95 c0       	rjmp	.+298    	; 0x62b0 <disk_initialize+0x154>
	//power_on();							/* Turn on the socket power */
	FCLK_SLOW();
    6186:	82 e5       	ldi	r24, 0x52	; 82
    6188:	8c bd       	out	0x2c, r24	; 44
    618a:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) spi_rwSPI(0xFF);	/* 80 dummy clocks */
    618c:	8f ef       	ldi	r24, 0xFF	; 255
    618e:	36 d6       	rcall	.+3180   	; 0x6dfc <spi_rwSPI>
    6190:	11 50       	subi	r17, 0x01	; 1
    6192:	e1 f7       	brne	.-8      	; 0x618c <disk_initialize+0x30>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    6194:	40 e0       	ldi	r20, 0x00	; 0
    6196:	50 e0       	ldi	r21, 0x00	; 0
    6198:	ba 01       	movw	r22, r20
    619a:	80 e0       	ldi	r24, 0x00	; 0
    619c:	12 df       	rcall	.-476    	; 0x5fc2 <send_cmd>
    619e:	81 30       	cpi	r24, 0x01	; 1
    61a0:	09 f0       	breq	.+2      	; 0x61a4 <disk_initialize+0x48>
    61a2:	82 c0       	rjmp	.+260    	; 0x62a8 <disk_initialize+0x14c>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    61a4:	84 e6       	ldi	r24, 0x64	; 100
    61a6:	80 93 09 11 	sts	0x1109, r24	; 0x801109 <Timer1>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    61aa:	4a ea       	ldi	r20, 0xAA	; 170
    61ac:	51 e0       	ldi	r21, 0x01	; 1
    61ae:	60 e0       	ldi	r22, 0x00	; 0
    61b0:	70 e0       	ldi	r23, 0x00	; 0
    61b2:	88 e0       	ldi	r24, 0x08	; 8
    61b4:	06 df       	rcall	.-500    	; 0x5fc2 <send_cmd>
    61b6:	81 30       	cpi	r24, 0x01	; 1
    61b8:	09 f0       	breq	.+2      	; 0x61bc <disk_initialize+0x60>
    61ba:	3d c0       	rjmp	.+122    	; 0x6236 <disk_initialize+0xda>
    61bc:	ce 01       	movw	r24, r28
    61be:	01 96       	adiw	r24, 0x01	; 1
    61c0:	6c 01       	movw	r12, r24
    61c2:	7e 01       	movw	r14, r28
    61c4:	95 e0       	ldi	r25, 0x05	; 5
    61c6:	e9 0e       	add	r14, r25
    61c8:	f1 1c       	adc	r15, r1
			for (n = 0; n < 4; n++) ocr[n] = spi_rwSPI(0xFF);		/* Get trailing return value of R7 resp */
    61ca:	86 01       	movw	r16, r12
    61cc:	8f ef       	ldi	r24, 0xFF	; 255
    61ce:	16 d6       	rcall	.+3116   	; 0x6dfc <spi_rwSPI>
    61d0:	f8 01       	movw	r30, r16
    61d2:	81 93       	st	Z+, r24
    61d4:	8f 01       	movw	r16, r30
    61d6:	ee 16       	cp	r14, r30
    61d8:	ff 06       	cpc	r15, r31
    61da:	c1 f7       	brne	.-16     	; 0x61cc <disk_initialize+0x70>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    61dc:	8b 81       	ldd	r24, Y+3	; 0x03
    61de:	81 30       	cpi	r24, 0x01	; 1
    61e0:	09 f0       	breq	.+2      	; 0x61e4 <disk_initialize+0x88>
    61e2:	62 c0       	rjmp	.+196    	; 0x62a8 <disk_initialize+0x14c>
    61e4:	8c 81       	ldd	r24, Y+4	; 0x04
    61e6:	8a 3a       	cpi	r24, 0xAA	; 170
    61e8:	09 f0       	breq	.+2      	; 0x61ec <disk_initialize+0x90>
    61ea:	5e c0       	rjmp	.+188    	; 0x62a8 <disk_initialize+0x14c>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    61ec:	80 91 09 11 	lds	r24, 0x1109	; 0x801109 <Timer1>
    61f0:	88 23       	and	r24, r24
    61f2:	41 f0       	breq	.+16     	; 0x6204 <disk_initialize+0xa8>
    61f4:	40 e0       	ldi	r20, 0x00	; 0
    61f6:	50 e0       	ldi	r21, 0x00	; 0
    61f8:	60 e0       	ldi	r22, 0x00	; 0
    61fa:	70 e4       	ldi	r23, 0x40	; 64
    61fc:	89 ea       	ldi	r24, 0xA9	; 169
    61fe:	e1 de       	rcall	.-574    	; 0x5fc2 <send_cmd>
    6200:	81 11       	cpse	r24, r1
    6202:	f4 cf       	rjmp	.-24     	; 0x61ec <disk_initialize+0x90>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    6204:	80 91 09 11 	lds	r24, 0x1109	; 0x801109 <Timer1>
    6208:	88 23       	and	r24, r24
    620a:	09 f4       	brne	.+2      	; 0x620e <disk_initialize+0xb2>
    620c:	4d c0       	rjmp	.+154    	; 0x62a8 <disk_initialize+0x14c>
    620e:	40 e0       	ldi	r20, 0x00	; 0
    6210:	50 e0       	ldi	r21, 0x00	; 0
    6212:	ba 01       	movw	r22, r20
    6214:	8a e3       	ldi	r24, 0x3A	; 58
    6216:	d5 de       	rcall	.-598    	; 0x5fc2 <send_cmd>
    6218:	81 11       	cpse	r24, r1
					for (n = 0; n < 4; n++) ocr[n] = spi_rwSPI(0xFF);
    621a:	46 c0       	rjmp	.+140    	; 0x62a8 <disk_initialize+0x14c>
    621c:	8f ef       	ldi	r24, 0xFF	; 255
    621e:	ee d5       	rcall	.+3036   	; 0x6dfc <spi_rwSPI>
    6220:	f6 01       	movw	r30, r12
    6222:	81 93       	st	Z+, r24
    6224:	6f 01       	movw	r12, r30
    6226:	ee 16       	cp	r14, r30
    6228:	ff 06       	cpc	r15, r31
    622a:	c1 f7       	brne	.-16     	; 0x621c <disk_initialize+0xc0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    622c:	89 81       	ldd	r24, Y+1	; 0x01
    622e:	86 fd       	sbrc	r24, 6
    6230:	36 c0       	rjmp	.+108    	; 0x629e <disk_initialize+0x142>
    6232:	84 e0       	ldi	r24, 0x04	; 4
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    6234:	35 c0       	rjmp	.+106    	; 0x62a0 <disk_initialize+0x144>
    6236:	40 e0       	ldi	r20, 0x00	; 0
    6238:	50 e0       	ldi	r21, 0x00	; 0
    623a:	ba 01       	movw	r22, r20
    623c:	89 ea       	ldi	r24, 0xA9	; 169
    623e:	c1 de       	rcall	.-638    	; 0x5fc2 <send_cmd>
    6240:	82 30       	cpi	r24, 0x02	; 2
    6242:	18 f0       	brcs	.+6      	; 0x624a <disk_initialize+0xee>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    6244:	01 e0       	ldi	r16, 0x01	; 1
    6246:	11 e0       	ldi	r17, 0x01	; 1
    6248:	02 c0       	rjmp	.+4      	; 0x624e <disk_initialize+0xf2>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    624a:	02 e0       	ldi	r16, 0x02	; 2
    624c:	19 ea       	ldi	r17, 0xA9	; 169
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    624e:	80 91 09 11 	lds	r24, 0x1109	; 0x801109 <Timer1>
    6252:	88 23       	and	r24, r24
    6254:	39 f0       	breq	.+14     	; 0x6264 <disk_initialize+0x108>
    6256:	40 e0       	ldi	r20, 0x00	; 0
    6258:	50 e0       	ldi	r21, 0x00	; 0
    625a:	ba 01       	movw	r22, r20
    625c:	81 2f       	mov	r24, r17
    625e:	b1 de       	rcall	.-670    	; 0x5fc2 <send_cmd>
    6260:	81 11       	cpse	r24, r1
    6262:	f5 cf       	rjmp	.-22     	; 0x624e <disk_initialize+0xf2>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    6264:	80 91 09 11 	lds	r24, 0x1109	; 0x801109 <Timer1>
    6268:	88 23       	and	r24, r24
    626a:	f1 f0       	breq	.+60     	; 0x62a8 <disk_initialize+0x14c>
    626c:	40 e0       	ldi	r20, 0x00	; 0
    626e:	52 e0       	ldi	r21, 0x02	; 2
    6270:	60 e0       	ldi	r22, 0x00	; 0
    6272:	70 e0       	ldi	r23, 0x00	; 0
    6274:	80 e1       	ldi	r24, 0x10	; 16
    6276:	a5 de       	rcall	.-694    	; 0x5fc2 <send_cmd>
    6278:	81 11       	cpse	r24, r1
				ty = 0;
		}
	}
	CardType = ty;
    627a:	16 c0       	rjmp	.+44     	; 0x62a8 <disk_initialize+0x14c>
    627c:	00 93 07 11 	sts	0x1107, r16	; 0x801107 <CardType>
	deselect();
    6280:	87 de       	rcall	.-754    	; 0x5f90 <deselect>

	if (ty) {			/* Initialization succeded */
    6282:	00 23       	and	r16, r16
    6284:	39 f0       	breq	.+14     	; 0x6294 <disk_initialize+0x138>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    6286:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <Stat>
    628a:	8e 7f       	andi	r24, 0xFE	; 254
    628c:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <Stat>
		FCLK_FAST();
    6290:	80 e5       	ldi	r24, 0x50	; 80
	} else {			/* Initialization failed */
		//power_off();
	}

	return Stat;
    6292:	8c bd       	out	0x2c, r24	; 44
    6294:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <Stat>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    6298:	0b c0       	rjmp	.+22     	; 0x62b0 <disk_initialize+0x154>
			for (n = 0; n < 4; n++) ocr[n] = spi_rwSPI(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = spi_rwSPI(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    629a:	81 e0       	ldi	r24, 0x01	; 1
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    629c:	09 c0       	rjmp	.+18     	; 0x62b0 <disk_initialize+0x154>
    629e:	8c e0       	ldi	r24, 0x0C	; 12
	deselect();
    62a0:	80 93 07 11 	sts	0x1107, r24	; 0x801107 <CardType>
    62a4:	75 de       	rcall	.-790    	; 0x5f90 <deselect>
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    62a6:	ef cf       	rjmp	.-34     	; 0x6286 <disk_initialize+0x12a>
    62a8:	10 92 07 11 	sts	0x1107, r1	; 0x801107 <CardType>
	deselect();
    62ac:	71 de       	rcall	.-798    	; 0x5f90 <deselect>
    62ae:	f2 cf       	rjmp	.-28     	; 0x6294 <disk_initialize+0x138>
	} else {			/* Initialization failed */
		//power_off();
	}

	return Stat;
}
    62b0:	0f 90       	pop	r0
    62b2:	0f 90       	pop	r0
    62b4:	0f 90       	pop	r0
    62b6:	0f 90       	pop	r0
    62b8:	df 91       	pop	r29
    62ba:	cf 91       	pop	r28
    62bc:	1f 91       	pop	r17
    62be:	0f 91       	pop	r16
    62c0:	ff 90       	pop	r15
    62c2:	ef 90       	pop	r14
    62c4:	df 90       	pop	r13
    62c6:	cf 90       	pop	r12
    62c8:	08 95       	ret

000062ca <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    62ca:	81 11       	cpse	r24, r1
    62cc:	03 c0       	rjmp	.+6      	; 0x62d4 <disk_status+0xa>
	return Stat;
    62ce:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <Stat>
    62d2:	08 95       	ret

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    62d4:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
    62d6:	08 95       	ret

000062d8 <disk_read>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    62d8:	ff 92       	push	r15
    62da:	0f 93       	push	r16
    62dc:	1f 93       	push	r17
    62de:	cf 93       	push	r28
    62e0:	df 93       	push	r29
    62e2:	eb 01       	movw	r28, r22
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    62e4:	81 11       	cpse	r24, r1
    62e6:	3f c0       	rjmp	.+126    	; 0x6366 <disk_read+0x8e>
    62e8:	01 15       	cp	r16, r1
    62ea:	11 05       	cpc	r17, r1
    62ec:	09 f4       	brne	.+2      	; 0x62f0 <disk_read+0x18>
    62ee:	3d c0       	rjmp	.+122    	; 0x636a <disk_read+0x92>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    62f0:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <Stat>
    62f4:	80 fd       	sbrc	r24, 0
    62f6:	3b c0       	rjmp	.+118    	; 0x636e <disk_read+0x96>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    62f8:	80 91 07 11 	lds	r24, 0x1107	; 0x801107 <CardType>
    62fc:	83 fd       	sbrc	r24, 3
    62fe:	09 c0       	rjmp	.+18     	; 0x6312 <disk_read+0x3a>
    6300:	01 2e       	mov	r0, r17
    6302:	19 e0       	ldi	r17, 0x09	; 9
    6304:	22 0f       	add	r18, r18
    6306:	33 1f       	adc	r19, r19
    6308:	44 1f       	adc	r20, r20
    630a:	55 1f       	adc	r21, r21
    630c:	1a 95       	dec	r17
    630e:	d1 f7       	brne	.-12     	; 0x6304 <disk_read+0x2c>
    6310:	10 2d       	mov	r17, r0

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    6312:	02 30       	cpi	r16, 0x02	; 2
    6314:	11 05       	cpc	r17, r1
    6316:	28 f4       	brcc	.+10     	; 0x6322 <disk_read+0x4a>
    6318:	0f 2e       	mov	r0, r31
    631a:	f1 e1       	ldi	r31, 0x11	; 17
    631c:	ff 2e       	mov	r15, r31
    631e:	f0 2d       	mov	r31, r0
    6320:	04 c0       	rjmp	.+8      	; 0x632a <disk_read+0x52>
    6322:	0f 2e       	mov	r0, r31
    6324:	f2 e1       	ldi	r31, 0x12	; 18
    6326:	ff 2e       	mov	r15, r31
    6328:	f0 2d       	mov	r31, r0
	if (send_cmd(cmd, sector) == 0) {
    632a:	ba 01       	movw	r22, r20
    632c:	a9 01       	movw	r20, r18
    632e:	8f 2d       	mov	r24, r15
    6330:	48 de       	rcall	.-880    	; 0x5fc2 <send_cmd>
    6332:	81 11       	cpse	r24, r1
    6334:	12 c0       	rjmp	.+36     	; 0x635a <disk_read+0x82>
		do {
			if (!rcvr_datablock(buff, 512)) break;
    6336:	60 e0       	ldi	r22, 0x00	; 0
    6338:	72 e0       	ldi	r23, 0x02	; 2
    633a:	ce 01       	movw	r24, r28
    633c:	98 de       	rcall	.-720    	; 0x606e <rcvr_datablock>
    633e:	89 2b       	or	r24, r25
    6340:	21 f0       	breq	.+8      	; 0x634a <disk_read+0x72>
			buff += 512;
    6342:	de 5f       	subi	r29, 0xFE	; 254
		} while (--count);
    6344:	01 50       	subi	r16, 0x01	; 1
    6346:	11 09       	sbc	r17, r1
    6348:	b1 f7       	brne	.-20     	; 0x6336 <disk_read+0x5e>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    634a:	82 e1       	ldi	r24, 0x12	; 18
    634c:	f8 12       	cpse	r15, r24
    634e:	05 c0       	rjmp	.+10     	; 0x635a <disk_read+0x82>
    6350:	40 e0       	ldi	r20, 0x00	; 0
    6352:	50 e0       	ldi	r21, 0x00	; 0
    6354:	ba 01       	movw	r22, r20
    6356:	8c e0       	ldi	r24, 0x0C	; 12
	}
	deselect();
    6358:	34 de       	rcall	.-920    	; 0x5fc2 <send_cmd>
    635a:	1a de       	rcall	.-972    	; 0x5f90 <deselect>

	return count ? RES_ERROR : RES_OK;
    635c:	81 e0       	ldi	r24, 0x01	; 1
    635e:	01 2b       	or	r16, r17
    6360:	39 f4       	brne	.+14     	; 0x6370 <disk_read+0x98>
    6362:	80 e0       	ldi	r24, 0x00	; 0
    6364:	05 c0       	rjmp	.+10     	; 0x6370 <disk_read+0x98>
)
{
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    6366:	84 e0       	ldi	r24, 0x04	; 4
    6368:	03 c0       	rjmp	.+6      	; 0x6370 <disk_read+0x98>
    636a:	84 e0       	ldi	r24, 0x04	; 4
    636c:	01 c0       	rjmp	.+2      	; 0x6370 <disk_read+0x98>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    636e:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    6370:	df 91       	pop	r29
    6372:	cf 91       	pop	r28
    6374:	1f 91       	pop	r17
    6376:	0f 91       	pop	r16
    6378:	ff 90       	pop	r15
    637a:	08 95       	ret

0000637c <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    637c:	cf 92       	push	r12
    637e:	df 92       	push	r13
    6380:	ef 92       	push	r14
    6382:	ff 92       	push	r15
    6384:	0f 93       	push	r16
    6386:	1f 93       	push	r17
    6388:	cf 93       	push	r28
    638a:	df 93       	push	r29
    638c:	eb 01       	movw	r28, r22
    638e:	69 01       	movw	r12, r18
    6390:	7a 01       	movw	r14, r20
	if (pdrv || !count) return RES_PARERR;
    6392:	81 11       	cpse	r24, r1
    6394:	51 c0       	rjmp	.+162    	; 0x6438 <disk_write+0xbc>
    6396:	01 15       	cp	r16, r1
    6398:	11 05       	cpc	r17, r1
    639a:	09 f4       	brne	.+2      	; 0x639e <disk_write+0x22>
    639c:	4f c0       	rjmp	.+158    	; 0x643c <disk_write+0xc0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    639e:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <Stat>
    63a2:	80 fd       	sbrc	r24, 0
    63a4:	4d c0       	rjmp	.+154    	; 0x6440 <disk_write+0xc4>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    63a6:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <Stat>
    63aa:	82 fd       	sbrc	r24, 2
    63ac:	4b c0       	rjmp	.+150    	; 0x6444 <disk_write+0xc8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    63ae:	80 91 07 11 	lds	r24, 0x1107	; 0x801107 <CardType>
    63b2:	83 fd       	sbrc	r24, 3
    63b4:	09 c0       	rjmp	.+18     	; 0x63c8 <disk_write+0x4c>
    63b6:	0b 2e       	mov	r0, r27
    63b8:	b9 e0       	ldi	r27, 0x09	; 9
    63ba:	cc 0c       	add	r12, r12
    63bc:	dd 1c       	adc	r13, r13
    63be:	ee 1c       	adc	r14, r14
    63c0:	ff 1c       	adc	r15, r15
    63c2:	ba 95       	dec	r27
    63c4:	d1 f7       	brne	.-12     	; 0x63ba <disk_write+0x3e>
    63c6:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
    63c8:	01 30       	cpi	r16, 0x01	; 1
    63ca:	11 05       	cpc	r17, r1
    63cc:	89 f4       	brne	.+34     	; 0x63f0 <disk_write+0x74>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    63ce:	b7 01       	movw	r22, r14
    63d0:	a6 01       	movw	r20, r12
    63d2:	88 e1       	ldi	r24, 0x18	; 24
    63d4:	f6 dd       	rcall	.-1044   	; 0x5fc2 <send_cmd>
    63d6:	81 11       	cpse	r24, r1
    63d8:	29 c0       	rjmp	.+82     	; 0x642c <disk_write+0xb0>
			&& xmit_datablock(buff, 0xFE))
    63da:	6e ef       	ldi	r22, 0xFE	; 254
    63dc:	ce 01       	movw	r24, r28
    63de:	81 de       	rcall	.-766    	; 0x60e2 <xmit_datablock>
    63e0:	31 e0       	ldi	r19, 0x01	; 1
    63e2:	20 e0       	ldi	r18, 0x00	; 0
    63e4:	89 2b       	or	r24, r25
    63e6:	09 f0       	breq	.+2      	; 0x63ea <disk_write+0x6e>
    63e8:	30 e0       	ldi	r19, 0x00	; 0
    63ea:	03 2f       	mov	r16, r19
    63ec:	12 2f       	mov	r17, r18
    63ee:	1e c0       	rjmp	.+60     	; 0x642c <disk_write+0xb0>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    63f0:	86 70       	andi	r24, 0x06	; 6
    63f2:	29 f0       	breq	.+10     	; 0x63fe <disk_write+0x82>
    63f4:	a8 01       	movw	r20, r16
    63f6:	60 e0       	ldi	r22, 0x00	; 0
    63f8:	70 e0       	ldi	r23, 0x00	; 0
    63fa:	87 e9       	ldi	r24, 0x97	; 151
    63fc:	e2 dd       	rcall	.-1084   	; 0x5fc2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    63fe:	b7 01       	movw	r22, r14
    6400:	a6 01       	movw	r20, r12
    6402:	89 e1       	ldi	r24, 0x19	; 25
    6404:	de dd       	rcall	.-1092   	; 0x5fc2 <send_cmd>
    6406:	81 11       	cpse	r24, r1
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    6408:	11 c0       	rjmp	.+34     	; 0x642c <disk_write+0xb0>
    640a:	6c ef       	ldi	r22, 0xFC	; 252
    640c:	ce 01       	movw	r24, r28
    640e:	69 de       	rcall	.-814    	; 0x60e2 <xmit_datablock>
    6410:	89 2b       	or	r24, r25
    6412:	21 f0       	breq	.+8      	; 0x641c <disk_write+0xa0>
				buff += 512;
    6414:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    6416:	01 50       	subi	r16, 0x01	; 1
    6418:	11 09       	sbc	r17, r1
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    641a:	b9 f7       	brne	.-18     	; 0x640a <disk_write+0x8e>
    641c:	6d ef       	ldi	r22, 0xFD	; 253
    641e:	80 e0       	ldi	r24, 0x00	; 0
    6420:	90 e0       	ldi	r25, 0x00	; 0
    6422:	5f de       	rcall	.-834    	; 0x60e2 <xmit_datablock>
    6424:	89 2b       	or	r24, r25
				count = 1;
    6426:	11 f4       	brne	.+4      	; 0x642c <disk_write+0xb0>
    6428:	01 e0       	ldi	r16, 0x01	; 1
		}
	}
	deselect();
    642a:	10 e0       	ldi	r17, 0x00	; 0
    642c:	b1 dd       	rcall	.-1182   	; 0x5f90 <deselect>

	return count ? RES_ERROR : RES_OK;
    642e:	81 e0       	ldi	r24, 0x01	; 1
    6430:	01 2b       	or	r16, r17
    6432:	49 f4       	brne	.+18     	; 0x6446 <disk_write+0xca>
    6434:	80 e0       	ldi	r24, 0x00	; 0
    6436:	07 c0       	rjmp	.+14     	; 0x6446 <disk_write+0xca>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (pdrv || !count) return RES_PARERR;
    6438:	84 e0       	ldi	r24, 0x04	; 4
    643a:	05 c0       	rjmp	.+10     	; 0x6446 <disk_write+0xca>
    643c:	84 e0       	ldi	r24, 0x04	; 4
    643e:	03 c0       	rjmp	.+6      	; 0x6446 <disk_write+0xca>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    6440:	83 e0       	ldi	r24, 0x03	; 3
    6442:	01 c0       	rjmp	.+2      	; 0x6446 <disk_write+0xca>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    6444:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    6446:	df 91       	pop	r29
    6448:	cf 91       	pop	r28
    644a:	1f 91       	pop	r17
    644c:	0f 91       	pop	r16
    644e:	ff 90       	pop	r15
    6450:	ef 90       	pop	r14
    6452:	df 90       	pop	r13
    6454:	cf 90       	pop	r12
    6456:	08 95       	ret

00006458 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    6458:	ef 92       	push	r14
    645a:	ff 92       	push	r15
    645c:	0f 93       	push	r16
    645e:	1f 93       	push	r17
    6460:	cf 93       	push	r28
    6462:	df 93       	push	r29
    6464:	cd b7       	in	r28, 0x3d	; 61
    6466:	de b7       	in	r29, 0x3e	; 62
    6468:	60 97       	sbiw	r28, 0x10	; 16
    646a:	0f b6       	in	r0, 0x3f	; 63
    646c:	f8 94       	cli
    646e:	de bf       	out	0x3e, r29	; 62
    6470:	0f be       	out	0x3f, r0	; 63
    6472:	cd bf       	out	0x3d, r28	; 61
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    6474:	81 11       	cpse	r24, r1
    6476:	81 c1       	rjmp	.+770    	; 0x677a <disk_ioctl+0x322>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    6478:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <Stat>
    647c:	80 fd       	sbrc	r24, 0
    647e:	7f c1       	rjmp	.+766    	; 0x677e <disk_ioctl+0x326>
    6480:	8a 01       	movw	r16, r20

	switch (cmd) {
    6482:	86 2f       	mov	r24, r22
    6484:	90 e0       	ldi	r25, 0x00	; 0
    6486:	87 33       	cpi	r24, 0x37	; 55
    6488:	91 05       	cpc	r25, r1
    648a:	08 f0       	brcs	.+2      	; 0x648e <disk_ioctl+0x36>
    648c:	5e c1       	rjmp	.+700    	; 0x674a <disk_ioctl+0x2f2>
    648e:	fc 01       	movw	r30, r24
    6490:	ea 5b       	subi	r30, 0xBA	; 186
    6492:	ff 4f       	sbci	r31, 0xFF	; 255
    6494:	0c 94 cc 40 	jmp	0x8198	; 0x8198 <__tablejump2__>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    6498:	7f dd       	rcall	.-1282   	; 0x5f98 <select>
    649a:	11 e0       	ldi	r17, 0x01	; 1
    649c:	89 2b       	or	r24, r25
    649e:	09 f4       	brne	.+2      	; 0x64a2 <disk_ioctl+0x4a>
    64a0:	69 c1       	rjmp	.+722    	; 0x6774 <disk_ioctl+0x31c>
    64a2:	10 e0       	ldi	r17, 0x00	; 0
    64a4:	67 c1       	rjmp	.+718    	; 0x6774 <disk_ioctl+0x31c>
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    64a6:	40 e0       	ldi	r20, 0x00	; 0
    64a8:	50 e0       	ldi	r21, 0x00	; 0
    64aa:	ba 01       	movw	r22, r20
    64ac:	89 e0       	ldi	r24, 0x09	; 9
    64ae:	89 dd       	rcall	.-1262   	; 0x5fc2 <send_cmd>
    64b0:	81 11       	cpse	r24, r1
    64b2:	4d c1       	rjmp	.+666    	; 0x674e <disk_ioctl+0x2f6>
    64b4:	60 e1       	ldi	r22, 0x10	; 16
    64b6:	70 e0       	ldi	r23, 0x00	; 0
    64b8:	ce 01       	movw	r24, r28
    64ba:	01 96       	adiw	r24, 0x01	; 1
    64bc:	d8 dd       	rcall	.-1104   	; 0x606e <rcvr_datablock>
    64be:	89 2b       	or	r24, r25
    64c0:	09 f4       	brne	.+2      	; 0x64c4 <disk_ioctl+0x6c>
    64c2:	47 c1       	rjmp	.+654    	; 0x6752 <disk_ioctl+0x2fa>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    64c4:	89 81       	ldd	r24, Y+1	; 0x01
    64c6:	82 95       	swap	r24
    64c8:	86 95       	lsr	r24
    64ca:	86 95       	lsr	r24
    64cc:	83 70       	andi	r24, 0x03	; 3
    64ce:	81 30       	cpi	r24, 0x01	; 1
    64d0:	31 f5       	brne	.+76     	; 0x651e <disk_ioctl+0xc6>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
    64d2:	29 85       	ldd	r18, Y+9	; 0x09
    64d4:	30 e0       	ldi	r19, 0x00	; 0
    64d6:	32 2f       	mov	r19, r18
    64d8:	22 27       	eor	r18, r18
    64da:	8a 85       	ldd	r24, Y+10	; 0x0a
    64dc:	28 0f       	add	r18, r24
    64de:	31 1d       	adc	r19, r1
    64e0:	88 85       	ldd	r24, Y+8	; 0x08
    64e2:	8f 73       	andi	r24, 0x3F	; 63
    64e4:	90 e0       	ldi	r25, 0x00	; 0
    64e6:	a0 e0       	ldi	r26, 0x00	; 0
    64e8:	b0 e0       	ldi	r27, 0x00	; 0
    64ea:	dc 01       	movw	r26, r24
    64ec:	99 27       	eor	r25, r25
    64ee:	88 27       	eor	r24, r24
    64f0:	01 96       	adiw	r24, 0x01	; 1
    64f2:	a1 1d       	adc	r26, r1
    64f4:	b1 1d       	adc	r27, r1
    64f6:	82 0f       	add	r24, r18
    64f8:	93 1f       	adc	r25, r19
    64fa:	a1 1d       	adc	r26, r1
    64fc:	b1 1d       	adc	r27, r1
    64fe:	07 2e       	mov	r0, r23
    6500:	7a e0       	ldi	r23, 0x0A	; 10
    6502:	88 0f       	add	r24, r24
    6504:	99 1f       	adc	r25, r25
    6506:	aa 1f       	adc	r26, r26
    6508:	bb 1f       	adc	r27, r27
    650a:	7a 95       	dec	r23
    650c:	d1 f7       	brne	.-12     	; 0x6502 <disk_ioctl+0xaa>
    650e:	70 2d       	mov	r23, r0
    6510:	f8 01       	movw	r30, r16
    6512:	80 83       	st	Z, r24
    6514:	91 83       	std	Z+1, r25	; 0x01
    6516:	a2 83       	std	Z+2, r26	; 0x02
    6518:	b3 83       	std	Z+3, r27	; 0x03
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
			}
			res = RES_OK;
    651a:	10 e0       	ldi	r17, 0x00	; 0
    651c:	2b c1       	rjmp	.+598    	; 0x6774 <disk_ioctl+0x31c>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
    651e:	89 85       	ldd	r24, Y+9	; 0x09
    6520:	82 95       	swap	r24
    6522:	86 95       	lsr	r24
    6524:	86 95       	lsr	r24
    6526:	83 70       	andi	r24, 0x03	; 3
    6528:	28 85       	ldd	r18, Y+8	; 0x08
    652a:	90 e0       	ldi	r25, 0x00	; 0
    652c:	f4 e0       	ldi	r31, 0x04	; 4
    652e:	2f 9f       	mul	r18, r31
    6530:	80 0d       	add	r24, r0
    6532:	91 1d       	adc	r25, r1
    6534:	11 24       	eor	r1, r1
    6536:	9c 01       	movw	r18, r24
    6538:	2f 5f       	subi	r18, 0xFF	; 255
    653a:	3f 4f       	sbci	r19, 0xFF	; 255
    653c:	8f 81       	ldd	r24, Y+7	; 0x07
    653e:	83 70       	andi	r24, 0x03	; 3
    6540:	90 e0       	ldi	r25, 0x00	; 0
    6542:	98 2f       	mov	r25, r24
    6544:	88 27       	eor	r24, r24
    6546:	99 0f       	add	r25, r25
    6548:	99 0f       	add	r25, r25
    654a:	82 0f       	add	r24, r18
    654c:	93 1f       	adc	r25, r19
    654e:	a0 e0       	ldi	r26, 0x00	; 0
    6550:	b0 e0       	ldi	r27, 0x00	; 0
    6552:	3e 81       	ldd	r19, Y+6	; 0x06
    6554:	3f 70       	andi	r19, 0x0F	; 15
    6556:	2b 85       	ldd	r18, Y+11	; 0x0b
    6558:	22 1f       	adc	r18, r18
    655a:	22 27       	eor	r18, r18
    655c:	22 1f       	adc	r18, r18
    655e:	32 0f       	add	r19, r18
    6560:	2a 85       	ldd	r18, Y+10	; 0x0a
    6562:	23 70       	andi	r18, 0x03	; 3
    6564:	22 0f       	add	r18, r18
    6566:	23 0f       	add	r18, r19
    6568:	27 50       	subi	r18, 0x07	; 7
    656a:	04 c0       	rjmp	.+8      	; 0x6574 <disk_ioctl+0x11c>
    656c:	88 0f       	add	r24, r24
    656e:	99 1f       	adc	r25, r25
    6570:	aa 1f       	adc	r26, r26
    6572:	bb 1f       	adc	r27, r27
    6574:	2a 95       	dec	r18
    6576:	d2 f7       	brpl	.-12     	; 0x656c <disk_ioctl+0x114>
    6578:	f8 01       	movw	r30, r16
    657a:	80 83       	st	Z, r24
    657c:	91 83       	std	Z+1, r25	; 0x01
    657e:	a2 83       	std	Z+2, r26	; 0x02
    6580:	b3 83       	std	Z+3, r27	; 0x03
			}
			res = RES_OK;
    6582:	10 e0       	ldi	r17, 0x00	; 0
    6584:	f7 c0       	rjmp	.+494    	; 0x6774 <disk_ioctl+0x31c>
		}
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
    6586:	80 91 07 11 	lds	r24, 0x1107	; 0x801107 <CardType>
    658a:	82 ff       	sbrs	r24, 2
    658c:	2f c0       	rjmp	.+94     	; 0x65ec <disk_ioctl+0x194>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    658e:	40 e0       	ldi	r20, 0x00	; 0
    6590:	50 e0       	ldi	r21, 0x00	; 0
    6592:	ba 01       	movw	r22, r20
    6594:	8d e8       	ldi	r24, 0x8D	; 141
    6596:	15 dd       	rcall	.-1494   	; 0x5fc2 <send_cmd>
    6598:	81 11       	cpse	r24, r1
				spi_rwSPI(0xFF);
    659a:	dd c0       	rjmp	.+442    	; 0x6756 <disk_ioctl+0x2fe>
    659c:	8f ef       	ldi	r24, 0xFF	; 255
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    659e:	2e d4       	rcall	.+2140   	; 0x6dfc <spi_rwSPI>
    65a0:	60 e1       	ldi	r22, 0x10	; 16
    65a2:	70 e0       	ldi	r23, 0x00	; 0
    65a4:	ce 01       	movw	r24, r28
    65a6:	01 96       	adiw	r24, 0x01	; 1
    65a8:	62 dd       	rcall	.-1340   	; 0x606e <rcvr_datablock>
    65aa:	89 2b       	or	r24, r25
    65ac:	09 f4       	brne	.+2      	; 0x65b0 <disk_ioctl+0x158>
    65ae:	d5 c0       	rjmp	.+426    	; 0x675a <disk_ioctl+0x302>
    65b0:	0f 2e       	mov	r0, r31
    65b2:	f0 e3       	ldi	r31, 0x30	; 48
    65b4:	ff 2e       	mov	r15, r31
					for (n = 64 - 16; n; n--) spi_rwSPI(0xFF);	/* Purge trailing data */
    65b6:	f0 2d       	mov	r31, r0
    65b8:	8f ef       	ldi	r24, 0xFF	; 255
    65ba:	20 d4       	rcall	.+2112   	; 0x6dfc <spi_rwSPI>
    65bc:	fa 94       	dec	r15
    65be:	f1 10       	cpse	r15, r1
    65c0:	fb cf       	rjmp	.-10     	; 0x65b8 <disk_ioctl+0x160>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
    65c2:	2b 85       	ldd	r18, Y+11	; 0x0b
    65c4:	22 95       	swap	r18
    65c6:	2f 70       	andi	r18, 0x0F	; 15
    65c8:	80 e1       	ldi	r24, 0x10	; 16
    65ca:	90 e0       	ldi	r25, 0x00	; 0
    65cc:	a0 e0       	ldi	r26, 0x00	; 0
    65ce:	b0 e0       	ldi	r27, 0x00	; 0
    65d0:	04 c0       	rjmp	.+8      	; 0x65da <disk_ioctl+0x182>
    65d2:	88 0f       	add	r24, r24
    65d4:	99 1f       	adc	r25, r25
    65d6:	aa 1f       	adc	r26, r26
    65d8:	bb 1f       	adc	r27, r27
    65da:	2a 95       	dec	r18
    65dc:	d2 f7       	brpl	.-12     	; 0x65d2 <disk_ioctl+0x17a>
    65de:	f8 01       	movw	r30, r16
    65e0:	80 83       	st	Z, r24
    65e2:	91 83       	std	Z+1, r25	; 0x01
    65e4:	a2 83       	std	Z+2, r26	; 0x02
					res = RES_OK;
    65e6:	b3 83       	std	Z+3, r27	; 0x03
    65e8:	10 e0       	ldi	r17, 0x00	; 0
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    65ea:	c4 c0       	rjmp	.+392    	; 0x6774 <disk_ioctl+0x31c>
    65ec:	40 e0       	ldi	r20, 0x00	; 0
    65ee:	50 e0       	ldi	r21, 0x00	; 0
    65f0:	ba 01       	movw	r22, r20
    65f2:	89 e0       	ldi	r24, 0x09	; 9
    65f4:	e6 dc       	rcall	.-1588   	; 0x5fc2 <send_cmd>
    65f6:	81 11       	cpse	r24, r1
    65f8:	b2 c0       	rjmp	.+356    	; 0x675e <disk_ioctl+0x306>
    65fa:	60 e1       	ldi	r22, 0x10	; 16
    65fc:	70 e0       	ldi	r23, 0x00	; 0
    65fe:	ce 01       	movw	r24, r28
    6600:	01 96       	adiw	r24, 0x01	; 1
    6602:	35 dd       	rcall	.-1430   	; 0x606e <rcvr_datablock>
    6604:	89 2b       	or	r24, r25
    6606:	09 f4       	brne	.+2      	; 0x660a <disk_ioctl+0x1b2>
    6608:	ac c0       	rjmp	.+344    	; 0x6762 <disk_ioctl+0x30a>
				if (CardType & CT_SD1) {	/* SDv1 */
    660a:	80 91 07 11 	lds	r24, 0x1107	; 0x801107 <CardType>
    660e:	81 ff       	sbrs	r24, 1
    6610:	20 c0       	rjmp	.+64     	; 0x6652 <disk_ioctl+0x1fa>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    6612:	2b 85       	ldd	r18, Y+11	; 0x0b
    6614:	2f 73       	andi	r18, 0x3F	; 63
    6616:	8c 85       	ldd	r24, Y+12	; 0x0c
    6618:	88 1f       	adc	r24, r24
    661a:	88 27       	eor	r24, r24
    661c:	88 1f       	adc	r24, r24
    661e:	90 e0       	ldi	r25, 0x00	; 0
    6620:	01 96       	adiw	r24, 0x01	; 1
    6622:	82 0f       	add	r24, r18
    6624:	91 1d       	adc	r25, r1
    6626:	82 0f       	add	r24, r18
    6628:	91 1d       	adc	r25, r1
    662a:	2e 85       	ldd	r18, Y+14	; 0x0e
    662c:	22 95       	swap	r18
    662e:	26 95       	lsr	r18
    6630:	26 95       	lsr	r18
    6632:	23 70       	andi	r18, 0x03	; 3
    6634:	21 50       	subi	r18, 0x01	; 1
    6636:	02 c0       	rjmp	.+4      	; 0x663c <disk_ioctl+0x1e4>
    6638:	88 0f       	add	r24, r24
    663a:	99 1f       	adc	r25, r25
    663c:	2a 95       	dec	r18
    663e:	e2 f7       	brpl	.-8      	; 0x6638 <disk_ioctl+0x1e0>
    6640:	a0 e0       	ldi	r26, 0x00	; 0
    6642:	b0 e0       	ldi	r27, 0x00	; 0
    6644:	f8 01       	movw	r30, r16
    6646:	80 83       	st	Z, r24
    6648:	91 83       	std	Z+1, r25	; 0x01
    664a:	a2 83       	std	Z+2, r26	; 0x02
    664c:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
    664e:	10 e0       	ldi	r17, 0x00	; 0
    6650:	91 c0       	rjmp	.+290    	; 0x6774 <disk_ioctl+0x31c>
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
				if (CardType & CT_SD1) {	/* SDv1 */
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    6652:	8c 85       	ldd	r24, Y+12	; 0x0c
    6654:	28 2f       	mov	r18, r24
    6656:	23 70       	andi	r18, 0x03	; 3
    6658:	82 95       	swap	r24
    665a:	86 95       	lsr	r24
    665c:	87 70       	andi	r24, 0x07	; 7
    665e:	90 e0       	ldi	r25, 0x00	; 0
    6660:	f8 e0       	ldi	r31, 0x08	; 8
    6662:	2f 9f       	mul	r18, r31
    6664:	80 0d       	add	r24, r0
    6666:	91 1d       	adc	r25, r1
    6668:	11 24       	eor	r1, r1
    666a:	01 96       	adiw	r24, 0x01	; 1
    666c:	2b 85       	ldd	r18, Y+11	; 0x0b
    666e:	2c 77       	andi	r18, 0x7C	; 124
    6670:	30 e0       	ldi	r19, 0x00	; 0
    6672:	35 95       	asr	r19
    6674:	27 95       	ror	r18
    6676:	35 95       	asr	r19
    6678:	27 95       	ror	r18
    667a:	2f 5f       	subi	r18, 0xFF	; 255
    667c:	3f 4f       	sbci	r19, 0xFF	; 255
    667e:	82 9f       	mul	r24, r18
    6680:	a0 01       	movw	r20, r0
    6682:	83 9f       	mul	r24, r19
    6684:	50 0d       	add	r21, r0
    6686:	92 9f       	mul	r25, r18
    6688:	50 0d       	add	r21, r0
    668a:	11 24       	eor	r1, r1
    668c:	ca 01       	movw	r24, r20
    668e:	a0 e0       	ldi	r26, 0x00	; 0
    6690:	b0 e0       	ldi	r27, 0x00	; 0
    6692:	f8 01       	movw	r30, r16
    6694:	80 83       	st	Z, r24
    6696:	91 83       	std	Z+1, r25	; 0x01
    6698:	a2 83       	std	Z+2, r26	; 0x02
    669a:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
    669c:	10 e0       	ldi	r17, 0x00	; 0
    669e:	6a c0       	rjmp	.+212    	; 0x6774 <disk_ioctl+0x31c>
		break;

	/* Following commands are never used by FatFs module */

	case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
		*ptr = CardType;
    66a0:	80 91 07 11 	lds	r24, 0x1107	; 0x801107 <CardType>
    66a4:	fa 01       	movw	r30, r20
		res = RES_OK;
    66a6:	80 83       	st	Z, r24
		break;
    66a8:	10 e0       	ldi	r17, 0x00	; 0

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    66aa:	64 c0       	rjmp	.+200    	; 0x6774 <disk_ioctl+0x31c>
    66ac:	40 e0       	ldi	r20, 0x00	; 0
    66ae:	50 e0       	ldi	r21, 0x00	; 0
    66b0:	ba 01       	movw	r22, r20
    66b2:	89 e0       	ldi	r24, 0x09	; 9
    66b4:	86 dc       	rcall	.-1780   	; 0x5fc2 <send_cmd>
    66b6:	81 11       	cpse	r24, r1
			&& rcvr_datablock(ptr, 16))
    66b8:	56 c0       	rjmp	.+172    	; 0x6766 <disk_ioctl+0x30e>
    66ba:	60 e1       	ldi	r22, 0x10	; 16
    66bc:	70 e0       	ldi	r23, 0x00	; 0
    66be:	c8 01       	movw	r24, r16

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	switch (cmd) {
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    66c0:	d6 dc       	rcall	.-1620   	; 0x606e <rcvr_datablock>
    66c2:	11 e0       	ldi	r17, 0x01	; 1
    66c4:	89 2b       	or	r24, r25
    66c6:	09 f4       	brne	.+2      	; 0x66ca <disk_ioctl+0x272>
    66c8:	55 c0       	rjmp	.+170    	; 0x6774 <disk_ioctl+0x31c>
			&& rcvr_datablock(ptr, 16))
			res = RES_OK;
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    66ca:	10 e0       	ldi	r17, 0x00	; 0
    66cc:	53 c0       	rjmp	.+166    	; 0x6774 <disk_ioctl+0x31c>
    66ce:	40 e0       	ldi	r20, 0x00	; 0
    66d0:	50 e0       	ldi	r21, 0x00	; 0
    66d2:	ba 01       	movw	r22, r20
    66d4:	8a e0       	ldi	r24, 0x0A	; 10
    66d6:	75 dc       	rcall	.-1814   	; 0x5fc2 <send_cmd>
    66d8:	81 11       	cpse	r24, r1
			&& rcvr_datablock(ptr, 16))
    66da:	47 c0       	rjmp	.+142    	; 0x676a <disk_ioctl+0x312>
    66dc:	60 e1       	ldi	r22, 0x10	; 16
    66de:	70 e0       	ldi	r23, 0x00	; 0
    66e0:	c8 01       	movw	r24, r16

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	switch (cmd) {
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    66e2:	c5 dc       	rcall	.-1654   	; 0x606e <rcvr_datablock>
    66e4:	11 e0       	ldi	r17, 0x01	; 1
    66e6:	89 2b       	or	r24, r25
    66e8:	09 f4       	brne	.+2      	; 0x66ec <disk_ioctl+0x294>
    66ea:	44 c0       	rjmp	.+136    	; 0x6774 <disk_ioctl+0x31c>
			&& rcvr_datablock(ptr, 16))
			res = RES_OK;
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    66ec:	10 e0       	ldi	r17, 0x00	; 0
    66ee:	42 c0       	rjmp	.+132    	; 0x6774 <disk_ioctl+0x31c>
    66f0:	40 e0       	ldi	r20, 0x00	; 0
    66f2:	50 e0       	ldi	r21, 0x00	; 0
    66f4:	ba 01       	movw	r22, r20
    66f6:	8a e3       	ldi	r24, 0x3A	; 58
    66f8:	64 dc       	rcall	.-1848   	; 0x5fc2 <send_cmd>
    66fa:	81 11       	cpse	r24, r1
    66fc:	38 c0       	rjmp	.+112    	; 0x676e <disk_ioctl+0x316>
    66fe:	78 01       	movw	r14, r16
    6700:	0c 5f       	subi	r16, 0xFC	; 252
			for (n = 4; n; n--) *ptr++ = spi_rwSPI(0xFF);
    6702:	1f 4f       	sbci	r17, 0xFF	; 255
    6704:	8f ef       	ldi	r24, 0xFF	; 255
    6706:	7a d3       	rcall	.+1780   	; 0x6dfc <spi_rwSPI>
    6708:	f7 01       	movw	r30, r14
    670a:	81 93       	st	Z+, r24
    670c:	7f 01       	movw	r14, r30
    670e:	0e 17       	cp	r16, r30
			res = RES_OK;
    6710:	1f 07       	cpc	r17, r31
    6712:	c1 f7       	brne	.-16     	; 0x6704 <disk_ioctl+0x2ac>
		}
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    6714:	10 e0       	ldi	r17, 0x00	; 0
    6716:	2e c0       	rjmp	.+92     	; 0x6774 <disk_ioctl+0x31c>
    6718:	40 e0       	ldi	r20, 0x00	; 0
    671a:	50 e0       	ldi	r21, 0x00	; 0
    671c:	ba 01       	movw	r22, r20
    671e:	8d e8       	ldi	r24, 0x8D	; 141
    6720:	50 dc       	rcall	.-1888   	; 0x5fc2 <send_cmd>
    6722:	81 11       	cpse	r24, r1
			spi_rwSPI(0xFF);
    6724:	26 c0       	rjmp	.+76     	; 0x6772 <disk_ioctl+0x31a>
    6726:	8f ef       	ldi	r24, 0xFF	; 255
    6728:	69 d3       	rcall	.+1746   	; 0x6dfc <spi_rwSPI>
			if (rcvr_datablock(ptr, 64))
    672a:	60 e4       	ldi	r22, 0x40	; 64
    672c:	70 e0       	ldi	r23, 0x00	; 0
    672e:	c8 01       	movw	r24, r16
    6730:	9e dc       	rcall	.-1732   	; 0x606e <rcvr_datablock>
    6732:	11 e0       	ldi	r17, 0x01	; 1

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	switch (cmd) {
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    6734:	89 2b       	or	r24, r25
    6736:	f1 f0       	breq	.+60     	; 0x6774 <disk_ioctl+0x31c>
    6738:	10 e0       	ldi	r17, 0x00	; 0
    673a:	1c c0       	rjmp	.+56     	; 0x6774 <disk_ioctl+0x31c>
    673c:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <Stat>
				res = RES_OK;
		}
		break;

	case CTRL_POWER_OFF :	/* Power off */
		Stat |= STA_NOINIT;
    6740:	81 60       	ori	r24, 0x01	; 1
    6742:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <Stat>
    6746:	10 e0       	ldi	r17, 0x00	; 0
		res = RES_OK;
    6748:	15 c0       	rjmp	.+42     	; 0x6774 <disk_ioctl+0x31c>
		break;
    674a:	14 e0       	ldi	r17, 0x04	; 4

	default:
		res = RES_PARERR;
    674c:	13 c0       	rjmp	.+38     	; 0x6774 <disk_ioctl+0x31c>
    674e:	11 e0       	ldi	r17, 0x01	; 1
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    6750:	11 c0       	rjmp	.+34     	; 0x6774 <disk_ioctl+0x31c>
    6752:	11 e0       	ldi	r17, 0x01	; 1
    6754:	0f c0       	rjmp	.+30     	; 0x6774 <disk_ioctl+0x31c>
    6756:	11 e0       	ldi	r17, 0x01	; 1
    6758:	0d c0       	rjmp	.+26     	; 0x6774 <disk_ioctl+0x31c>
    675a:	11 e0       	ldi	r17, 0x01	; 1
    675c:	0b c0       	rjmp	.+22     	; 0x6774 <disk_ioctl+0x31c>
    675e:	11 e0       	ldi	r17, 0x01	; 1
    6760:	09 c0       	rjmp	.+18     	; 0x6774 <disk_ioctl+0x31c>
    6762:	11 e0       	ldi	r17, 0x01	; 1
    6764:	07 c0       	rjmp	.+14     	; 0x6774 <disk_ioctl+0x31c>
    6766:	11 e0       	ldi	r17, 0x01	; 1
    6768:	05 c0       	rjmp	.+10     	; 0x6774 <disk_ioctl+0x31c>
    676a:	11 e0       	ldi	r17, 0x01	; 1
    676c:	03 c0       	rjmp	.+6      	; 0x6774 <disk_ioctl+0x31c>
    676e:	11 e0       	ldi	r17, 0x01	; 1
    6770:	01 c0       	rjmp	.+2      	; 0x6774 <disk_ioctl+0x31c>
    6772:	11 e0       	ldi	r17, 0x01	; 1

	default:
		res = RES_PARERR;
	}

	deselect();
    6774:	0d dc       	rcall	.-2022   	; 0x5f90 <deselect>
    6776:	81 2f       	mov	r24, r17

	return res;
    6778:	03 c0       	rjmp	.+6      	; 0x6780 <disk_ioctl+0x328>
    677a:	84 e0       	ldi	r24, 0x04	; 4
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    677c:	01 c0       	rjmp	.+2      	; 0x6780 <disk_ioctl+0x328>
    677e:	83 e0       	ldi	r24, 0x03	; 3

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    6780:	60 96       	adiw	r28, 0x10	; 16
	}

	deselect();

	return res;
}
    6782:	0f b6       	in	r0, 0x3f	; 63
    6784:	f8 94       	cli
    6786:	de bf       	out	0x3e, r29	; 62
    6788:	0f be       	out	0x3f, r0	; 63
    678a:	cd bf       	out	0x3d, r28	; 61
    678c:	df 91       	pop	r29
    678e:	cf 91       	pop	r28
    6790:	1f 91       	pop	r17
    6792:	0f 91       	pop	r16
    6794:	ff 90       	pop	r15
    6796:	ef 90       	pop	r14
    6798:	08 95       	ret

0000679a <hih8120_measure>:

float hih8120_humidity = 1;
float hih8120_temperature_C = 1;

void hih8120_measure()
{
    679a:	0f 93       	push	r16
    679c:	1f 93       	push	r17
    679e:	cf 93       	push	r28
    67a0:	df 93       	push	r29
	PORT_CS &= ~(1<<HIH_CS);
    67a2:	2c 98       	cbi	0x05, 4	; 5
	uint8_t humidity_hi = spi_rwSPI(0x00);
    67a4:	80 e0       	ldi	r24, 0x00	; 0
    67a6:	2a d3       	rcall	.+1620   	; 0x6dfc <spi_rwSPI>
    67a8:	18 2f       	mov	r17, r24
	uint8_t humidity_lo = spi_rwSPI(0x00);
    67aa:	80 e0       	ldi	r24, 0x00	; 0
    67ac:	27 d3       	rcall	.+1614   	; 0x6dfc <spi_rwSPI>
    67ae:	d8 2f       	mov	r29, r24
	uint8_t temp_hi = spi_rwSPI(0x00);
    67b0:	80 e0       	ldi	r24, 0x00	; 0
    67b2:	24 d3       	rcall	.+1608   	; 0x6dfc <spi_rwSPI>
    67b4:	08 2f       	mov	r16, r24
	uint8_t temp_lo = spi_rwSPI(0x00);
    67b6:	80 e0       	ldi	r24, 0x00	; 0
    67b8:	21 d3       	rcall	.+1602   	; 0x6dfc <spi_rwSPI>
    67ba:	c8 2f       	mov	r28, r24
	PORT_CS |= (1<<HIH_CS);
    67bc:	2c 9a       	sbi	0x05, 4	; 5
	PORT_CS &= ~(1<<HIH_CS);
    67be:	2c 98       	cbi	0x05, 4	; 5
	spi_rwSPI(0x00);
    67c0:	80 e0       	ldi	r24, 0x00	; 0
    67c2:	1c d3       	rcall	.+1592   	; 0x6dfc <spi_rwSPI>
    67c4:	2c 9a       	sbi	0x05, 4	; 5
	PORT_CS |= (1<<HIH_CS);
    67c6:	1f 73       	andi	r17, 0x3F	; 63

	
 	// Calculate Relative Humidity
 	hih8120_humidity = (float)((((humidity_hi & 0x3f) << 8) | humidity_lo) / ((pow(2,14) - 2)) * 100);
    67c8:	6d 2f       	mov	r22, r29
    67ca:	70 e0       	ldi	r23, 0x00	; 0
    67cc:	71 2b       	or	r23, r17
    67ce:	07 2e       	mov	r0, r23
    67d0:	00 0c       	add	r0, r0
    67d2:	88 0b       	sbc	r24, r24
    67d4:	99 0b       	sbc	r25, r25
    67d6:	0e 94 23 3f 	call	0x7e46	; 0x7e46 <__floatsisf>
    67da:	20 e0       	ldi	r18, 0x00	; 0
    67dc:	38 ef       	ldi	r19, 0xF8	; 248
    67de:	4f e7       	ldi	r20, 0x7F	; 127
    67e0:	56 e4       	ldi	r21, 0x46	; 70
    67e2:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <__divsf3>
    67e6:	20 e0       	ldi	r18, 0x00	; 0
    67e8:	30 e0       	ldi	r19, 0x00	; 0
    67ea:	48 ec       	ldi	r20, 0xC8	; 200
    67ec:	52 e4       	ldi	r21, 0x42	; 66
    67ee:	0e 94 25 40 	call	0x804a	; 0x804a <__mulsf3>
    67f2:	60 93 31 01 	sts	0x0131, r22	; 0x800131 <hih8120_humidity>
    67f6:	70 93 32 01 	sts	0x0132, r23	; 0x800132 <hih8120_humidity+0x1>
    67fa:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <hih8120_humidity+0x2>
    67fe:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <hih8120_humidity+0x3>
    6802:	c6 95       	lsr	r28
 
 	// Calculate Temperature
 	hih8120_temperature_C = (float) ((((temp_hi << 6) + (temp_lo >> 2)) / (pow(2, 14) - 2)) * 165 - 40);
    6804:	c6 95       	lsr	r28
    6806:	6c 2f       	mov	r22, r28
    6808:	70 e0       	ldi	r23, 0x00	; 0
    680a:	80 e4       	ldi	r24, 0x40	; 64
    680c:	08 9f       	mul	r16, r24
    680e:	60 0d       	add	r22, r0
    6810:	71 1d       	adc	r23, r1
    6812:	11 24       	eor	r1, r1
    6814:	07 2e       	mov	r0, r23
    6816:	00 0c       	add	r0, r0
    6818:	88 0b       	sbc	r24, r24
    681a:	99 0b       	sbc	r25, r25
    681c:	0e 94 23 3f 	call	0x7e46	; 0x7e46 <__floatsisf>
    6820:	20 e0       	ldi	r18, 0x00	; 0
    6822:	38 ef       	ldi	r19, 0xF8	; 248
    6824:	4f e7       	ldi	r20, 0x7F	; 127
    6826:	56 e4       	ldi	r21, 0x46	; 70
    6828:	0e 94 84 3e 	call	0x7d08	; 0x7d08 <__divsf3>
    682c:	20 e0       	ldi	r18, 0x00	; 0
    682e:	30 e0       	ldi	r19, 0x00	; 0
    6830:	45 e2       	ldi	r20, 0x25	; 37
    6832:	53 e4       	ldi	r21, 0x43	; 67
    6834:	0e 94 25 40 	call	0x804a	; 0x804a <__mulsf3>
    6838:	20 e0       	ldi	r18, 0x00	; 0
    683a:	30 e0       	ldi	r19, 0x00	; 0
    683c:	40 e2       	ldi	r20, 0x20	; 32
    683e:	52 e4       	ldi	r21, 0x42	; 66
    6840:	0e 94 1b 3e 	call	0x7c36	; 0x7c36 <__subsf3>
    6844:	60 93 2d 01 	sts	0x012D, r22	; 0x80012d <hih8120_temperature_C>
    6848:	70 93 2e 01 	sts	0x012E, r23	; 0x80012e <hih8120_temperature_C+0x1>
    684c:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <hih8120_temperature_C+0x2>
    6850:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <hih8120_temperature_C+0x3>
    6854:	df 91       	pop	r29
	 
	 
}
    6856:	cf 91       	pop	r28
    6858:	1f 91       	pop	r17
    685a:	0f 91       	pop	r16
    685c:	08 95       	ret

0000685e <i2c_init>:
    685e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    6862:	88 e4       	ldi	r24, 0x48	; 72
    6864:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    6868:	84 e0       	ldi	r24, 0x04	; 4
    686a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    686e:	08 95       	ret

00006870 <rtc_I2C_Start>:

void rtc_I2C_Start()
{
	TWCR = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));
    6870:	84 ea       	ldi	r24, 0xA4	; 164
    6872:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & (1<<TWINT)));
    6876:	ec eb       	ldi	r30, 0xBC	; 188
    6878:	f0 e0       	ldi	r31, 0x00	; 0
    687a:	80 81       	ld	r24, Z
    687c:	88 23       	and	r24, r24
    687e:	ec f7       	brge	.-6      	; 0x687a <rtc_I2C_Start+0xa>
}
    6880:	08 95       	ret

00006882 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    6882:	84 e9       	ldi	r24, 0x94	; 148
    6884:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    6888:	ec eb       	ldi	r30, 0xBC	; 188
    688a:	f0 e0       	ldi	r31, 0x00	; 0
    688c:	80 81       	ld	r24, Z
    688e:	84 fd       	sbrc	r24, 4
    6890:	fd cf       	rjmp	.-6      	; 0x688c <i2c_stop+0xa>

}/* i2c_stop */
    6892:	08 95       	ret

00006894 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    6894:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    6898:	84 e8       	ldi	r24, 0x84	; 132
    689a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    689e:	ec eb       	ldi	r30, 0xBC	; 188
    68a0:	f0 e0       	ldi	r31, 0x00	; 0
    68a2:	80 81       	ld	r24, Z
    68a4:	88 23       	and	r24, r24
    68a6:	ec f7       	brge	.-6      	; 0x68a2 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    68a8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    68ac:	98 7f       	andi	r25, 0xF8	; 248
    68ae:	81 e0       	ldi	r24, 0x01	; 1
    68b0:	98 32       	cpi	r25, 0x28	; 40
    68b2:	09 f4       	brne	.+2      	; 0x68b6 <i2c_write+0x22>
    68b4:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    68b6:	08 95       	ret

000068b8 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    68b8:	84 ec       	ldi	r24, 0xC4	; 196
    68ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));    
    68be:	ec eb       	ldi	r30, 0xBC	; 188
    68c0:	f0 e0       	ldi	r31, 0x00	; 0
    68c2:	80 81       	ld	r24, Z
    68c4:	88 23       	and	r24, r24
    68c6:	ec f7       	brge	.-6      	; 0x68c2 <i2c_readAck+0xa>

    return TWDR;
    68c8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readAck */
    68cc:	08 95       	ret

000068ce <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    68ce:	84 e8       	ldi	r24, 0x84	; 132
    68d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
    68d4:	ec eb       	ldi	r30, 0xBC	; 188
    68d6:	f0 e0       	ldi	r31, 0x00	; 0
    68d8:	80 81       	ld	r24, Z
    68da:	88 23       	and	r24, r24
    68dc:	ec f7       	brge	.-6      	; 0x68d8 <i2c_readNak+0xa>
	
    return TWDR;
    68de:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readNak */
    68e2:	08 95       	ret

000068e4 <N5110_Cmnd>:
#include "../../Options.h"
#include <avr/pgmspace.h>

void N5110_Cmnd(char DATA)
{
	PORT_LCD &= ~(1<<LCD_DC);				/* make DC pin to logic zero for command operation */
    68e4:	43 98       	cbi	0x08, 3	; 8
	PORT_LCD &= ~(1<<LCD_SCE);				/* enable SS pin to slave selection */
    68e6:	45 98       	cbi	0x08, 5	; 8
	spi_rwSPI(DATA);				/* send data on data register */
    68e8:	89 d2       	rcall	.+1298   	; 0x6dfc <spi_rwSPI>
	PORT_LCD |= (1<<LCD_DC);				/* make DC pin to logic high for data operation */
    68ea:	43 9a       	sbi	0x08, 3	; 8
	PORT_LCD |= (1<<LCD_SCE);	
    68ec:	45 9a       	sbi	0x08, 5	; 8
    68ee:	08 95       	ret

000068f0 <N5110_Data>:
}

void N5110_Data(char *DATA)
{
    68f0:	ef 92       	push	r14
    68f2:	ff 92       	push	r15
    68f4:	0f 93       	push	r16
    68f6:	1f 93       	push	r17
    68f8:	cf 93       	push	r28
    68fa:	df 93       	push	r29
	PORT_LCD |= (1<<LCD_DC);									/* make DC pin to logic high for data operation */
    68fc:	43 9a       	sbi	0x08, 3	; 8
	PORT_LCD &= ~(1<<LCD_SCE);									/* enable SS pin to slave selection */
    68fe:	45 98       	cbi	0x08, 5	; 8
	int lenan = strlen(DATA);							/* measure the length of data */
    6900:	fc 01       	movw	r30, r24
    6902:	01 90       	ld	r0, Z+
    6904:	00 20       	and	r0, r0
    6906:	e9 f7       	brne	.-6      	; 0x6902 <N5110_Data+0x12>
    6908:	31 97       	sbiw	r30, 0x01	; 1
    690a:	e8 1b       	sub	r30, r24
    690c:	f9 0b       	sbc	r31, r25
	for (int g=0; g<lenan; g++)
    690e:	1e 16       	cp	r1, r30
    6910:	1f 06       	cpc	r1, r31
    6912:	2c f5       	brge	.+74     	; 0x695e <N5110_Data+0x6e>
    6914:	ec 01       	movw	r28, r24
    6916:	8c 01       	movw	r16, r24
    6918:	0e 0f       	add	r16, r30
    691a:	1f 1f       	adc	r17, r31
    691c:	1d c0       	rjmp	.+58     	; 0x6958 <N5110_Data+0x68>
	{
		for (int index=0; index<5; index++)
		{
			spi_rwSPI(ASCII[DATA[g] - 0x20][index]);	/* send the data on data register */
    691e:	88 81       	ld	r24, Y
    6920:	90 e0       	ldi	r25, 0x00	; 0
    6922:	80 97       	sbiw	r24, 0x20	; 32
    6924:	fc 01       	movw	r30, r24
    6926:	ee 0f       	add	r30, r30
    6928:	ff 1f       	adc	r31, r31
    692a:	ee 0f       	add	r30, r30
    692c:	ff 1f       	adc	r31, r31
    692e:	e8 0f       	add	r30, r24
    6930:	f9 1f       	adc	r31, r25
    6932:	e5 5b       	subi	r30, 0xB5	; 181
    6934:	fd 4f       	sbci	r31, 0xFD	; 253
    6936:	ee 0d       	add	r30, r14
    6938:	ff 1d       	adc	r31, r15
    693a:	80 81       	ld	r24, Z
    693c:	5f d2       	rcall	.+1214   	; 0x6dfc <spi_rwSPI>
	PORT_LCD |= (1<<LCD_DC);									/* make DC pin to logic high for data operation */
	PORT_LCD &= ~(1<<LCD_SCE);									/* enable SS pin to slave selection */
	int lenan = strlen(DATA);							/* measure the length of data */
	for (int g=0; g<lenan; g++)
	{
		for (int index=0; index<5; index++)
    693e:	8f ef       	ldi	r24, 0xFF	; 255
    6940:	e8 1a       	sub	r14, r24
    6942:	f8 0a       	sbc	r15, r24
    6944:	85 e0       	ldi	r24, 0x05	; 5
    6946:	e8 16       	cp	r14, r24
    6948:	f1 04       	cpc	r15, r1
    694a:	49 f7       	brne	.-46     	; 0x691e <N5110_Data+0x2e>
		{
			spi_rwSPI(ASCII[DATA[g] - 0x20][index]);	/* send the data on data register */
		}
		spi_rwSPI(0x00);
    694c:	80 e0       	ldi	r24, 0x00	; 0
    694e:	56 d2       	rcall	.+1196   	; 0x6dfc <spi_rwSPI>
    6950:	21 96       	adiw	r28, 0x01	; 1
void N5110_Data(char *DATA)
{
	PORT_LCD |= (1<<LCD_DC);									/* make DC pin to logic high for data operation */
	PORT_LCD &= ~(1<<LCD_SCE);									/* enable SS pin to slave selection */
	int lenan = strlen(DATA);							/* measure the length of data */
	for (int g=0; g<lenan; g++)
    6952:	0c 17       	cp	r16, r28
    6954:	1d 07       	cpc	r17, r29
    6956:	19 f0       	breq	.+6      	; 0x695e <N5110_Data+0x6e>
	PORT_LCD |= (1<<LCD_DC);				/* make DC pin to logic high for data operation */
	PORT_LCD |= (1<<LCD_SCE);	
}

void N5110_Data(char *DATA)
{
    6958:	e1 2c       	mov	r14, r1
    695a:	f1 2c       	mov	r15, r1
    695c:	e0 cf       	rjmp	.-64     	; 0x691e <N5110_Data+0x2e>
		{
			spi_rwSPI(ASCII[DATA[g] - 0x20][index]);	/* send the data on data register */
		}
		spi_rwSPI(0x00);
	}
	PORT_LCD |= (1<<LCD_SCE);
    695e:	45 9a       	sbi	0x08, 5	; 8
}
    6960:	df 91       	pop	r29
    6962:	cf 91       	pop	r28
    6964:	1f 91       	pop	r17
    6966:	0f 91       	pop	r16
    6968:	ff 90       	pop	r15
    696a:	ef 90       	pop	r14
    696c:	08 95       	ret

0000696e <N5110_Reset>:

void N5110_Reset()					/* reset the Display at the beginning of initialization */
{
	PORT_LCD &= ~(1<<LCD_RST);
    696e:	42 98       	cbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    6970:	2f ef       	ldi	r18, 0xFF	; 255
    6972:	81 ee       	ldi	r24, 0xE1	; 225
    6974:	94 e0       	ldi	r25, 0x04	; 4
    6976:	21 50       	subi	r18, 0x01	; 1
    6978:	80 40       	sbci	r24, 0x00	; 0
    697a:	90 40       	sbci	r25, 0x00	; 0
    697c:	e1 f7       	brne	.-8      	; 0x6976 <N5110_Reset+0x8>
    697e:	00 c0       	rjmp	.+0      	; 0x6980 <N5110_Reset+0x12>
    6980:	00 00       	nop
	_delay_ms(100);
	PORT_LCD |= (1<<LCD_RST);
    6982:	42 9a       	sbi	0x08, 2	; 8
    6984:	08 95       	ret

00006986 <N5110_init>:
}

void N5110_init()
{
    6986:	cf 93       	push	r28
    6988:	df 93       	push	r29
	DDR_LCD |= (1 << LCD_SCE);
    698a:	3d 9a       	sbi	0x07, 5	; 7
	DDR_LCD |= (1 << LCD_RST);
    698c:	3a 9a       	sbi	0x07, 2	; 7
	DDR_LCD |= (1 << LCD_DC);
    698e:	3b 9a       	sbi	0x07, 3	; 7
    6990:	8f e3       	ldi	r24, 0x3F	; 63
    6992:	9c e9       	ldi	r25, 0x9C	; 156
    6994:	01 97       	sbiw	r24, 0x01	; 1
    6996:	f1 f7       	brne	.-4      	; 0x6994 <N5110_init+0xe>
    6998:	00 c0       	rjmp	.+0      	; 0x699a <N5110_init+0x14>
    699a:	00 00       	nop
	
 	_delay_ms(10);
 	N5110_Reset();					/* reset the display */
    699c:	e8 df       	rcall	.-48     	; 0x696e <N5110_Reset>
 	N5110_Cmnd(0x21);				/* command set in addition mode */
    699e:	81 e2       	ldi	r24, 0x21	; 33
    69a0:	a1 df       	rcall	.-190    	; 0x68e4 <N5110_Cmnd>
	N5110_Cmnd(0xC2);				/* set the voltage by sending C0 means VOP = 5V */
    69a2:	82 ec       	ldi	r24, 0xC2	; 194
    69a4:	9f df       	rcall	.-194    	; 0x68e4 <N5110_Cmnd>
	N5110_Cmnd(0x06);				/* set the temp. coefficient to 3 */
    69a6:	86 e0       	ldi	r24, 0x06	; 6
    69a8:	9d df       	rcall	.-198    	; 0x68e4 <N5110_Cmnd>
	N5110_Cmnd(0x13);				/* set value of Voltage Bias System */
    69aa:	83 e1       	ldi	r24, 0x13	; 19
    69ac:	9b df       	rcall	.-202    	; 0x68e4 <N5110_Cmnd>
	N5110_Cmnd(0x20);				/* command set in basic mode */
    69ae:	80 e2       	ldi	r24, 0x20	; 32
    69b0:	99 df       	rcall	.-206    	; 0x68e4 <N5110_Cmnd>
	
	/* LCD in normal mode */
	N5110_Cmnd(0x09);
    69b2:	89 e0       	ldi	r24, 0x09	; 9
    69b4:	97 df       	rcall	.-210    	; 0x68e4 <N5110_Cmnd>
    69b6:	80 e8       	ldi	r24, 0x80	; 128

	/* Clear LCD RAM */
 	N5110_Cmnd(0x80);
    69b8:	95 df       	rcall	.-214    	; 0x68e4 <N5110_Cmnd>
    69ba:	80 e4       	ldi	r24, 0x40	; 64
	N5110_Cmnd(0x40);
    69bc:	93 df       	rcall	.-218    	; 0x68e4 <N5110_Cmnd>
    69be:	c8 ef       	ldi	r28, 0xF8	; 248
    69c0:	d1 e0       	ldi	r29, 0x01	; 1
	for (int i = 0; i < 504; i++)
		N5110_Cmnd(0x00);
    69c2:	80 e0       	ldi	r24, 0x00	; 0
    69c4:	8f df       	rcall	.-226    	; 0x68e4 <N5110_Cmnd>
    69c6:	21 97       	sbiw	r28, 0x01	; 1
    69c8:	e1 f7       	brne	.-8      	; 0x69c2 <N5110_init+0x3c>
	N5110_Cmnd(0x09);

	/* Clear LCD RAM */
 	N5110_Cmnd(0x80);
	N5110_Cmnd(0x40);
	for (int i = 0; i < 504; i++)
    69ca:	88 e0       	ldi	r24, 0x08	; 8
		N5110_Cmnd(0x00);

	/* Activate LCD */
	N5110_Cmnd(0x08);
    69cc:	8b df       	rcall	.-234    	; 0x68e4 <N5110_Cmnd>
    69ce:	8c e0       	ldi	r24, 0x0C	; 12
    69d0:	89 df       	rcall	.-238    	; 0x68e4 <N5110_Cmnd>
 	N5110_Cmnd(0x0C);				/* display result in normal mode */
    69d2:	df 91       	pop	r29
    69d4:	cf 91       	pop	r28
    69d6:	08 95       	ret

000069d8 <lcd_setXY>:
}
    69d8:	cf 93       	push	r28
    69da:	c6 2f       	mov	r28, r22
    69dc:	83 df       	rcall	.-250    	; 0x68e4 <N5110_Cmnd>

void lcd_setXY(char x, char y)		/* set the column and row */
{
	N5110_Cmnd(x);
	N5110_Cmnd(y);
    69de:	8c 2f       	mov	r24, r28
    69e0:	81 df       	rcall	.-254    	; 0x68e4 <N5110_Cmnd>
}
    69e2:	cf 91       	pop	r28
    69e4:	08 95       	ret

000069e6 <N5110_clear>:

void N5110_clear()					/* clear the Display */
{
    69e6:	cf 93       	push	r28
    69e8:	df 93       	push	r29
	PORT_LCD &= ~(1<<LCD_SCE);
    69ea:	45 98       	cbi	0x08, 5	; 8
	PORT_LCD |= (1<<LCD_DC);
    69ec:	43 9a       	sbi	0x08, 3	; 8
    69ee:	c8 ef       	ldi	r28, 0xF8	; 248
    69f0:	d1 e0       	ldi	r29, 0x01	; 1
	for (int k=0; k<=503; k++)
	{
		spi_rwSPI(0x00);
    69f2:	80 e0       	ldi	r24, 0x00	; 0
    69f4:	03 d2       	rcall	.+1030   	; 0x6dfc <spi_rwSPI>
    69f6:	21 97       	sbiw	r28, 0x01	; 1

void N5110_clear()					/* clear the Display */
{
	PORT_LCD &= ~(1<<LCD_SCE);
	PORT_LCD |= (1<<LCD_DC);
	for (int k=0; k<=503; k++)
    69f8:	e1 f7       	brne	.-8      	; 0x69f2 <N5110_clear+0xc>
	{
		spi_rwSPI(0x00);
	}
	PORT_LCD &= ~(1<<LCD_DC);
    69fa:	43 98       	cbi	0x08, 3	; 8
	PORT_LCD |= (1<<LCD_SCE);
    69fc:	45 9a       	sbi	0x08, 5	; 8
}
    69fe:	df 91       	pop	r29
    6a00:	cf 91       	pop	r28
    6a02:	08 95       	ret

00006a04 <N5110_image>:
#include "../SpaceInvaders/SplashScreen.h"
void N5110_image(const unsigned char *image_data, int8_t inverted)		/* clear the Display */
{
    6a04:	0f 93       	push	r16
    6a06:	1f 93       	push	r17
    6a08:	cf 93       	push	r28
    6a0a:	df 93       	push	r29
	PORT_LCD &= ~(1<<LCD_SCE);
    6a0c:	45 98       	cbi	0x08, 5	; 8
	PORT_LCD |= (1<<LCD_DC);
    6a0e:	43 9a       	sbi	0x08, 3	; 8
	if(inverted == 1)
    6a10:	61 30       	cpi	r22, 0x01	; 1
    6a12:	61 f4       	brne	.+24     	; 0x6a2c <N5110_image+0x28>
    6a14:	ce e0       	ldi	r28, 0x0E	; 14
    6a16:	d2 e1       	ldi	r29, 0x12	; 18
    6a18:	06 e0       	ldi	r16, 0x06	; 6
    6a1a:	14 e1       	ldi	r17, 0x14	; 20
	{
		for (int k=0; k<=503; k++)
		{
			spi_rwSPI(pgm_read_byte(SplashScreen + k));
    6a1c:	fe 01       	movw	r30, r28
    6a1e:	84 91       	lpm	r24, Z
    6a20:	ed d1       	rcall	.+986    	; 0x6dfc <spi_rwSPI>
    6a22:	21 96       	adiw	r28, 0x01	; 1
{
	PORT_LCD &= ~(1<<LCD_SCE);
	PORT_LCD |= (1<<LCD_DC);
	if(inverted == 1)
	{
		for (int k=0; k<=503; k++)
    6a24:	0c 17       	cp	r16, r28
    6a26:	1d 07       	cpc	r17, r29
    6a28:	c9 f7       	brne	.-14     	; 0x6a1c <N5110_image+0x18>
    6a2a:	09 c0       	rjmp	.+18     	; 0x6a3e <N5110_image+0x3a>
    6a2c:	ec 01       	movw	r28, r24
    6a2e:	8c 01       	movw	r16, r24
    6a30:	08 50       	subi	r16, 0x08	; 8
    6a32:	1e 4f       	sbci	r17, 0xFE	; 254
	}
	else
	{
		for (int k=0; k<=503; k++)
		{
			spi_rwSPI(image_data[k]);
    6a34:	89 91       	ld	r24, Y+
    6a36:	e2 d1       	rcall	.+964    	; 0x6dfc <spi_rwSPI>
			spi_rwSPI(pgm_read_byte(SplashScreen + k));
		}
	}
	else
	{
		for (int k=0; k<=503; k++)
    6a38:	c0 17       	cp	r28, r16
    6a3a:	d1 07       	cpc	r29, r17
    6a3c:	d9 f7       	brne	.-10     	; 0x6a34 <N5110_image+0x30>
		{
			spi_rwSPI(image_data[k]);
		}
	}
	
	PORT_LCD &= ~(1<<LCD_DC);
    6a3e:	43 98       	cbi	0x08, 3	; 8
	PORT_LCD |= (1<<LCD_SCE);
    6a40:	45 9a       	sbi	0x08, 5	; 8
}
    6a42:	df 91       	pop	r29
    6a44:	cf 91       	pop	r28
    6a46:	1f 91       	pop	r17
    6a48:	0f 91       	pop	r16
    6a4a:	08 95       	ret

00006a4c <printPage>:

void printPage(int page)
{
    6a4c:	ef 92       	push	r14
    6a4e:	ff 92       	push	r15
    6a50:	0f 93       	push	r16
    6a52:	1f 93       	push	r17
    6a54:	cf 93       	push	r28
    6a56:	df 93       	push	r29
    6a58:	cd b7       	in	r28, 0x3d	; 61
    6a5a:	de b7       	in	r29, 0x3e	; 62
    6a5c:	a0 97       	sbiw	r28, 0x20	; 32
    6a5e:	0f b6       	in	r0, 0x3f	; 63
    6a60:	f8 94       	cli
    6a62:	de bf       	out	0x3e, r29	; 62
    6a64:	0f be       	out	0x3f, r0	; 63
    6a66:	cd bf       	out	0x3d, r28	; 61
    6a68:	8c 01       	movw	r16, r24
	char charMyIP[16], charGWIP[16];
	N5110_clear();
    6a6a:	bd df       	rcall	.-134    	; 0x69e6 <N5110_clear>
	switch(page)
    6a6c:	02 30       	cpi	r16, 0x02	; 2
    6a6e:	11 05       	cpc	r17, r1
    6a70:	09 f4       	brne	.+2      	; 0x6a74 <printPage+0x28>
    6a72:	36 c0       	rjmp	.+108    	; 0x6ae0 <printPage+0x94>
    6a74:	03 30       	cpi	r16, 0x03	; 3
    6a76:	11 05       	cpc	r17, r1
    6a78:	09 f4       	brne	.+2      	; 0x6a7c <printPage+0x30>
    6a7a:	4e c0       	rjmp	.+156    	; 0x6b18 <printPage+0xcc>
    6a7c:	01 30       	cpi	r16, 0x01	; 1
    6a7e:	11 05       	cpc	r17, r1
    6a80:	09 f0       	breq	.+2      	; 0x6a84 <printPage+0x38>
    6a82:	a1 c0       	rjmp	.+322    	; 0x6bc6 <printPage+0x17a>
	{
		case (1):
			lcd_setXY(0x40,0x80);
    6a84:	60 e8       	ldi	r22, 0x80	; 128
    6a86:	80 e4       	ldi	r24, 0x40	; 64
    6a88:	a7 df       	rcall	.-178    	; 0x69d8 <lcd_setXY>
			N5110_Data("Temperature:");
    6a8a:	89 ee       	ldi	r24, 0xE9	; 233
    6a8c:	91 e0       	ldi	r25, 0x01	; 1
    6a8e:	30 df       	rcall	.-416    	; 0x68f0 <N5110_Data>
			lcd_setXY(0x41,0x80);
    6a90:	60 e8       	ldi	r22, 0x80	; 128
    6a92:	81 e4       	ldi	r24, 0x41	; 65
    6a94:	a1 df       	rcall	.-190    	; 0x69d8 <lcd_setXY>
			N5110_Data(tempChar);
    6a96:	81 e9       	ldi	r24, 0x91	; 145
    6a98:	95 e1       	ldi	r25, 0x15	; 21
    6a9a:	2a df       	rcall	.-428    	; 0x68f0 <N5110_Data>
			N5110_Data(" C");
    6a9c:	86 ef       	ldi	r24, 0xF6	; 246
    6a9e:	91 e0       	ldi	r25, 0x01	; 1
    6aa0:	27 df       	rcall	.-434    	; 0x68f0 <N5110_Data>
			lcd_setXY(0x42,0x80);
    6aa2:	60 e8       	ldi	r22, 0x80	; 128
    6aa4:	82 e4       	ldi	r24, 0x42	; 66
    6aa6:	98 df       	rcall	.-208    	; 0x69d8 <lcd_setXY>
			N5110_Data("Humidity:");
    6aa8:	89 ef       	ldi	r24, 0xF9	; 249
    6aaa:	91 e0       	ldi	r25, 0x01	; 1
    6aac:	21 df       	rcall	.-446    	; 0x68f0 <N5110_Data>
			lcd_setXY(0x43,0x80);
    6aae:	60 e8       	ldi	r22, 0x80	; 128
    6ab0:	83 e4       	ldi	r24, 0x43	; 67
    6ab2:	92 df       	rcall	.-220    	; 0x69d8 <lcd_setXY>
			N5110_Data(humidChar);
    6ab4:	85 e8       	ldi	r24, 0x85	; 133
    6ab6:	95 e1       	ldi	r25, 0x15	; 21
    6ab8:	1b df       	rcall	.-458    	; 0x68f0 <N5110_Data>
			N5110_Data(" %");
    6aba:	83 e0       	ldi	r24, 0x03	; 3
    6abc:	92 e0       	ldi	r25, 0x02	; 2
    6abe:	18 df       	rcall	.-464    	; 0x68f0 <N5110_Data>
			lcd_setXY(0x44,0x80);
    6ac0:	60 e8       	ldi	r22, 0x80	; 128
    6ac2:	84 e4       	ldi	r24, 0x44	; 68
    6ac4:	89 df       	rcall	.-238    	; 0x69d8 <lcd_setXY>
			N5110_Data("Pressure:");
    6ac6:	86 e0       	ldi	r24, 0x06	; 6
    6ac8:	92 e0       	ldi	r25, 0x02	; 2
    6aca:	12 df       	rcall	.-476    	; 0x68f0 <N5110_Data>
			lcd_setXY(0x45,0x80);
    6acc:	60 e8       	ldi	r22, 0x80	; 128
    6ace:	85 e4       	ldi	r24, 0x45	; 69
    6ad0:	83 df       	rcall	.-250    	; 0x69d8 <lcd_setXY>
			N5110_Data(pressChar);
    6ad2:	87 ea       	ldi	r24, 0xA7	; 167
    6ad4:	95 e1       	ldi	r25, 0x15	; 21
    6ad6:	0c df       	rcall	.-488    	; 0x68f0 <N5110_Data>
			N5110_Data(" Pa");
    6ad8:	83 e6       	ldi	r24, 0x63	; 99
    6ada:	94 e0       	ldi	r25, 0x04	; 4
    6adc:	09 df       	rcall	.-494    	; 0x68f0 <N5110_Data>
			break;
    6ade:	73 c0       	rjmp	.+230    	; 0x6bc6 <printPage+0x17a>
		case (2):
			lcd_setXY(0x40,0x80);
    6ae0:	60 e8       	ldi	r22, 0x80	; 128
    6ae2:	80 e4       	ldi	r24, 0x40	; 64
    6ae4:	79 df       	rcall	.-270    	; 0x69d8 <lcd_setXY>
			N5110_Data("Wind Speed:");
    6ae6:	80 e1       	ldi	r24, 0x10	; 16
    6ae8:	92 e0       	ldi	r25, 0x02	; 2
    6aea:	02 df       	rcall	.-508    	; 0x68f0 <N5110_Data>
			lcd_setXY(0x41,0x80);
    6aec:	60 e8       	ldi	r22, 0x80	; 128
    6aee:	81 e4       	ldi	r24, 0x41	; 65
    6af0:	73 df       	rcall	.-282    	; 0x69d8 <lcd_setXY>
			N5110_Data(speedChar);
    6af2:	81 e0       	ldi	r24, 0x01	; 1
    6af4:	96 e1       	ldi	r25, 0x16	; 22
    6af6:	fc de       	rcall	.-520    	; 0x68f0 <N5110_Data>
			N5110_Data(" m/s");
    6af8:	85 e8       	ldi	r24, 0x85	; 133
    6afa:	94 e0       	ldi	r25, 0x04	; 4
    6afc:	f9 de       	rcall	.-526    	; 0x68f0 <N5110_Data>
			lcd_setXY(0x43,0x80);
    6afe:	60 e8       	ldi	r22, 0x80	; 128
    6b00:	83 e4       	ldi	r24, 0x43	; 67
    6b02:	6a df       	rcall	.-300    	; 0x69d8 <lcd_setXY>
			N5110_Data("Wind Angle:");
    6b04:	8c e1       	ldi	r24, 0x1C	; 28
    6b06:	92 e0       	ldi	r25, 0x02	; 2
    6b08:	f3 de       	rcall	.-538    	; 0x68f0 <N5110_Data>
			lcd_setXY(0x44,0x80);
    6b0a:	60 e8       	ldi	r22, 0x80	; 128
    6b0c:	84 e4       	ldi	r24, 0x44	; 68
    6b0e:	64 df       	rcall	.-312    	; 0x69d8 <lcd_setXY>
			N5110_Data(anglChar);
    6b10:	8e e6       	ldi	r24, 0x6E	; 110
    6b12:	95 e1       	ldi	r25, 0x15	; 21
    6b14:	ed de       	rcall	.-550    	; 0x68f0 <N5110_Data>
			break;
    6b16:	57 c0       	rjmp	.+174    	; 0x6bc6 <printPage+0x17a>
		case (3):
			lcd_setXY(0x40,0x80);
    6b18:	60 e8       	ldi	r22, 0x80	; 128
    6b1a:	80 e4       	ldi	r24, 0x40	; 64
    6b1c:	5d df       	rcall	.-326    	; 0x69d8 <lcd_setXY>
    6b1e:	88 e2       	ldi	r24, 0x28	; 40
			N5110_Data("Server IP:");
    6b20:	92 e0       	ldi	r25, 0x02	; 2
    6b22:	e6 de       	rcall	.-564    	; 0x68f0 <N5110_Data>
    6b24:	60 e8       	ldi	r22, 0x80	; 128
    6b26:	81 e4       	ldi	r24, 0x41	; 65
			lcd_setXY(0x41,0x80);
    6b28:	57 df       	rcall	.-338    	; 0x69d8 <lcd_setXY>
    6b2a:	82 e1       	ldi	r24, 0x12	; 18
    6b2c:	91 e0       	ldi	r25, 0x01	; 1
    6b2e:	e0 de       	rcall	.-576    	; 0x68f0 <N5110_Data>
			N5110_Data(serverip);
    6b30:	60 e8       	ldi	r22, 0x80	; 128
    6b32:	82 e4       	ldi	r24, 0x42	; 66
    6b34:	51 df       	rcall	.-350    	; 0x69d8 <lcd_setXY>
    6b36:	83 e3       	ldi	r24, 0x33	; 51
			lcd_setXY(0x42,0x80);
    6b38:	92 e0       	ldi	r25, 0x02	; 2
    6b3a:	da de       	rcall	.-588    	; 0x68f0 <N5110_Data>
    6b3c:	60 e8       	ldi	r22, 0x80	; 128
    6b3e:	83 e4       	ldi	r24, 0x43	; 67
			N5110_Data("Station IP:");
    6b40:	4b df       	rcall	.-362    	; 0x69d8 <lcd_setXY>
    6b42:	e2 e2       	ldi	r30, 0x22	; 34
    6b44:	f1 e0       	ldi	r31, 0x01	; 1
			lcd_setXY(0x43,0x80);
    6b46:	83 81       	ldd	r24, Z+3	; 0x03
    6b48:	1f 92       	push	r1
    6b4a:	8f 93       	push	r24
			sprintf(charMyIP, "%d.%d.%d.%d", myip[0], myip[1], myip[2], myip[3]);
    6b4c:	82 81       	ldd	r24, Z+2	; 0x02
    6b4e:	1f 92       	push	r1
    6b50:	8f 93       	push	r24
    6b52:	81 81       	ldd	r24, Z+1	; 0x01
    6b54:	1f 92       	push	r1
    6b56:	8f 93       	push	r24
    6b58:	80 81       	ld	r24, Z
    6b5a:	1f 92       	push	r1
    6b5c:	8f 93       	push	r24
    6b5e:	0c e3       	ldi	r16, 0x3C	; 60
    6b60:	11 e0       	ldi	r17, 0x01	; 1
    6b62:	1f 93       	push	r17
    6b64:	0f 93       	push	r16
    6b66:	ce 01       	movw	r24, r28
    6b68:	01 96       	adiw	r24, 0x01	; 1
    6b6a:	7c 01       	movw	r14, r24
    6b6c:	9f 93       	push	r25
    6b6e:	8f 93       	push	r24
    6b70:	0e 94 72 45 	call	0x8ae4	; 0x8ae4 <sprintf>
    6b74:	c7 01       	movw	r24, r14
    6b76:	bc de       	rcall	.-648    	; 0x68f0 <N5110_Data>
    6b78:	60 e8       	ldi	r22, 0x80	; 128
			N5110_Data(charMyIP);
    6b7a:	84 e4       	ldi	r24, 0x44	; 68
    6b7c:	2d df       	rcall	.-422    	; 0x69d8 <lcd_setXY>
    6b7e:	8f e3       	ldi	r24, 0x3F	; 63
			lcd_setXY(0x44,0x80);
    6b80:	92 e0       	ldi	r25, 0x02	; 2
    6b82:	b6 de       	rcall	.-660    	; 0x68f0 <N5110_Data>
    6b84:	60 e8       	ldi	r22, 0x80	; 128
			N5110_Data("Gateway IP:");
    6b86:	85 e4       	ldi	r24, 0x45	; 69
    6b88:	27 df       	rcall	.-434    	; 0x69d8 <lcd_setXY>
    6b8a:	ee e0       	ldi	r30, 0x0E	; 14
    6b8c:	f1 e0       	ldi	r31, 0x01	; 1
			lcd_setXY(0x45,0x80);
    6b8e:	83 81       	ldd	r24, Z+3	; 0x03
    6b90:	1f 92       	push	r1
    6b92:	8f 93       	push	r24
    6b94:	82 81       	ldd	r24, Z+2	; 0x02
			sprintf(charGWIP, "%d.%d.%d.%d", gwip[0], gwip[1], gwip[2], gwip[3]);
    6b96:	1f 92       	push	r1
    6b98:	8f 93       	push	r24
    6b9a:	81 81       	ldd	r24, Z+1	; 0x01
    6b9c:	1f 92       	push	r1
    6b9e:	8f 93       	push	r24
    6ba0:	80 81       	ld	r24, Z
    6ba2:	1f 92       	push	r1
    6ba4:	8f 93       	push	r24
    6ba6:	1f 93       	push	r17
    6ba8:	0f 93       	push	r16
    6baa:	8e 01       	movw	r16, r28
    6bac:	0f 5e       	subi	r16, 0xEF	; 239
    6bae:	1f 4f       	sbci	r17, 0xFF	; 255
    6bb0:	1f 93       	push	r17
    6bb2:	0f 93       	push	r16
    6bb4:	0e 94 72 45 	call	0x8ae4	; 0x8ae4 <sprintf>
    6bb8:	c8 01       	movw	r24, r16
    6bba:	9a de       	rcall	.-716    	; 0x68f0 <N5110_Data>
    6bbc:	0f b6       	in	r0, 0x3f	; 63
    6bbe:	f8 94       	cli
    6bc0:	de bf       	out	0x3e, r29	; 62
    6bc2:	0f be       	out	0x3f, r0	; 63
			N5110_Data(charGWIP);
    6bc4:	cd bf       	out	0x3d, r28	; 61
    6bc6:	45 9a       	sbi	0x08, 5	; 8
    6bc8:	a0 96       	adiw	r28, 0x20	; 32
			break;
    6bca:	0f b6       	in	r0, 0x3f	; 63
    6bcc:	f8 94       	cli
    6bce:	de bf       	out	0x3e, r29	; 62
    6bd0:	0f be       	out	0x3f, r0	; 63
    6bd2:	cd bf       	out	0x3d, r28	; 61
	}
	PORT_LCD |= (1<<LCD_SCE);
    6bd4:	df 91       	pop	r29
    6bd6:	cf 91       	pop	r28
    6bd8:	1f 91       	pop	r17
    6bda:	0f 91       	pop	r16
    6bdc:	ff 90       	pop	r15
    6bde:	ef 90       	pop	r14
    6be0:	08 95       	ret

00006be2 <RTC_SetDateTime>:
    6be2:	0f 93       	push	r16
    6be4:	1f 93       	push	r17
    6be6:	cf 93       	push	r28
    6be8:	8c 01       	movw	r16, r24
    6bea:	42 de       	rcall	.-892    	; 0x6870 <rtc_I2C_Start>
    6bec:	80 ed       	ldi	r24, 0xD0	; 208
    6bee:	52 de       	rcall	.-860    	; 0x6894 <i2c_write>
    rtc_I2C_Start();                          // Start I2C communication
	
	//i2c_write(0x00);
	//i2c_write(0x80);
    i2c_write(C_Ds1307WriteMode_U8);      // connect to DS1307 by sending its ID on I2c Bus
    i2c_write(C_Ds1307SecondRegAddress_U8); // Request sec RAM address at 00H
    6bf0:	80 e0       	ldi	r24, 0x00	; 0
    6bf2:	50 de       	rcall	.-864    	; 0x6894 <i2c_write>
    6bf4:	f8 01       	movw	r30, r16
// 	i2c_write(rtc->weekDay);                // Write weekDay on RAM address 03H
// 	i2c_write(rtc->date);                    // Write date on RAM address 04H
// 	i2c_write(rtc->month);                    // Write month on RAM address 05H
// 	i2c_write(rtc->year);

    i2c_write(dec2bcd(rtc->sec));                    // Write sec from RAM address 00H
    6bf6:	80 81       	ld	r24, Z
    6bf8:	cd ec       	ldi	r28, 0xCD	; 205
    6bfa:	8c 9f       	mul	r24, r28
    6bfc:	91 2d       	mov	r25, r1
    6bfe:	11 24       	eor	r1, r1
    6c00:	96 95       	lsr	r25
    6c02:	96 95       	lsr	r25
    6c04:	96 95       	lsr	r25
    6c06:	39 2f       	mov	r19, r25
    6c08:	33 0f       	add	r19, r19
    6c0a:	23 2f       	mov	r18, r19
    6c0c:	22 0f       	add	r18, r18
    6c0e:	22 0f       	add	r18, r18
    6c10:	23 0f       	add	r18, r19
    6c12:	82 1b       	sub	r24, r18
    6c14:	f0 e1       	ldi	r31, 0x10	; 16
    6c16:	9f 9f       	mul	r25, r31
    6c18:	80 0d       	add	r24, r0
    6c1a:	11 24       	eor	r1, r1
    6c1c:	3b de       	rcall	.-906    	; 0x6894 <i2c_write>
    6c1e:	f8 01       	movw	r30, r16
    i2c_write(dec2bcd(rtc->min));                    // Write min from RAM address 01H
    6c20:	81 81       	ldd	r24, Z+1	; 0x01
    6c22:	8c 9f       	mul	r24, r28
    6c24:	91 2d       	mov	r25, r1
    6c26:	11 24       	eor	r1, r1
    6c28:	96 95       	lsr	r25
    6c2a:	96 95       	lsr	r25
    6c2c:	96 95       	lsr	r25
    6c2e:	39 2f       	mov	r19, r25
    6c30:	33 0f       	add	r19, r19
    6c32:	23 2f       	mov	r18, r19
    6c34:	22 0f       	add	r18, r18
    6c36:	22 0f       	add	r18, r18
    6c38:	23 0f       	add	r18, r19
    6c3a:	82 1b       	sub	r24, r18
    6c3c:	f0 e1       	ldi	r31, 0x10	; 16
    6c3e:	9f 9f       	mul	r25, r31
    6c40:	80 0d       	add	r24, r0
    6c42:	11 24       	eor	r1, r1
    6c44:	27 de       	rcall	.-946    	; 0x6894 <i2c_write>
    6c46:	f8 01       	movw	r30, r16
    i2c_write(dec2bcd(rtc->hour));                    // Write hour from RAM address 02H
    6c48:	82 81       	ldd	r24, Z+2	; 0x02
    6c4a:	8c 9f       	mul	r24, r28
    6c4c:	91 2d       	mov	r25, r1
    6c4e:	11 24       	eor	r1, r1
    6c50:	96 95       	lsr	r25
    6c52:	96 95       	lsr	r25
    6c54:	96 95       	lsr	r25
    6c56:	39 2f       	mov	r19, r25
    6c58:	33 0f       	add	r19, r19
    6c5a:	23 2f       	mov	r18, r19
    6c5c:	22 0f       	add	r18, r18
    6c5e:	22 0f       	add	r18, r18
    6c60:	23 0f       	add	r18, r19
    6c62:	82 1b       	sub	r24, r18
    6c64:	f0 e1       	ldi	r31, 0x10	; 16
    6c66:	9f 9f       	mul	r25, r31
    6c68:	80 0d       	add	r24, r0
    6c6a:	11 24       	eor	r1, r1
    6c6c:	13 de       	rcall	.-986    	; 0x6894 <i2c_write>
    6c6e:	f8 01       	movw	r30, r16
    i2c_write(dec2bcd(rtc->weekDay));                // Write weekDay on RAM address 03H
    6c70:	83 81       	ldd	r24, Z+3	; 0x03
    6c72:	8c 9f       	mul	r24, r28
    6c74:	91 2d       	mov	r25, r1
    6c76:	11 24       	eor	r1, r1
    6c78:	96 95       	lsr	r25
    6c7a:	96 95       	lsr	r25
    6c7c:	96 95       	lsr	r25
    6c7e:	39 2f       	mov	r19, r25
    6c80:	33 0f       	add	r19, r19
    6c82:	23 2f       	mov	r18, r19
    6c84:	22 0f       	add	r18, r18
    6c86:	22 0f       	add	r18, r18
    6c88:	23 0f       	add	r18, r19
    6c8a:	82 1b       	sub	r24, r18
    6c8c:	f0 e1       	ldi	r31, 0x10	; 16
    6c8e:	9f 9f       	mul	r25, r31
    6c90:	80 0d       	add	r24, r0
    6c92:	11 24       	eor	r1, r1
    6c94:	ff dd       	rcall	.-1026   	; 0x6894 <i2c_write>
    6c96:	f8 01       	movw	r30, r16
    i2c_write(dec2bcd(rtc->date));                    // Write date on RAM address 04H
    6c98:	84 81       	ldd	r24, Z+4	; 0x04
    6c9a:	8c 9f       	mul	r24, r28
    6c9c:	91 2d       	mov	r25, r1
    6c9e:	11 24       	eor	r1, r1
    6ca0:	96 95       	lsr	r25
    6ca2:	96 95       	lsr	r25
    6ca4:	96 95       	lsr	r25
    6ca6:	39 2f       	mov	r19, r25
    6ca8:	33 0f       	add	r19, r19
    6caa:	23 2f       	mov	r18, r19
    6cac:	22 0f       	add	r18, r18
    6cae:	22 0f       	add	r18, r18
    6cb0:	23 0f       	add	r18, r19
    6cb2:	82 1b       	sub	r24, r18
    6cb4:	f0 e1       	ldi	r31, 0x10	; 16
    6cb6:	9f 9f       	mul	r25, r31
    6cb8:	80 0d       	add	r24, r0
    6cba:	11 24       	eor	r1, r1
    6cbc:	eb dd       	rcall	.-1066   	; 0x6894 <i2c_write>
    6cbe:	f8 01       	movw	r30, r16
    i2c_write(dec2bcd(rtc->month));                    // Write month on RAM address 05H
    6cc0:	85 81       	ldd	r24, Z+5	; 0x05
    6cc2:	8c 9f       	mul	r24, r28
    6cc4:	91 2d       	mov	r25, r1
    6cc6:	11 24       	eor	r1, r1
    6cc8:	96 95       	lsr	r25
    6cca:	96 95       	lsr	r25
    6ccc:	96 95       	lsr	r25
    6cce:	39 2f       	mov	r19, r25
    6cd0:	33 0f       	add	r19, r19
    6cd2:	23 2f       	mov	r18, r19
    6cd4:	22 0f       	add	r18, r18
    6cd6:	22 0f       	add	r18, r18
    6cd8:	23 0f       	add	r18, r19
    6cda:	82 1b       	sub	r24, r18
    6cdc:	f0 e1       	ldi	r31, 0x10	; 16
    6cde:	9f 9f       	mul	r25, r31
    6ce0:	80 0d       	add	r24, r0
    6ce2:	11 24       	eor	r1, r1
    6ce4:	d7 dd       	rcall	.-1106   	; 0x6894 <i2c_write>
    6ce6:	f8 01       	movw	r30, r16
    i2c_write(dec2bcd(rtc->year));                    // Write year on RAM address 06h*/
    6ce8:	86 81       	ldd	r24, Z+6	; 0x06
    6cea:	8c 9f       	mul	r24, r28
    6cec:	c1 2d       	mov	r28, r1
    6cee:	11 24       	eor	r1, r1
    6cf0:	c6 95       	lsr	r28
    6cf2:	c6 95       	lsr	r28
    6cf4:	c6 95       	lsr	r28
    6cf6:	2c 2f       	mov	r18, r28
    6cf8:	22 0f       	add	r18, r18
    6cfa:	92 2f       	mov	r25, r18
    6cfc:	99 0f       	add	r25, r25
    6cfe:	99 0f       	add	r25, r25
    6d00:	92 0f       	add	r25, r18
    6d02:	89 1b       	sub	r24, r25
    6d04:	f0 e1       	ldi	r31, 0x10	; 16
    6d06:	cf 9f       	mul	r28, r31
    6d08:	80 0d       	add	r24, r0
    6d0a:	11 24       	eor	r1, r1
    6d0c:	c3 dd       	rcall	.-1146   	; 0x6894 <i2c_write>

    i2c_stop();                              // Stop I2C communication after Setting the Date
    6d0e:	b9 dd       	rcall	.-1166   	; 0x6882 <i2c_stop>
    6d10:	cf 91       	pop	r28
}
    6d12:	1f 91       	pop	r17
    6d14:	0f 91       	pop	r16
    6d16:	08 95       	ret

00006d18 <RTC_GetDateTime>:
    6d18:	cf 93       	push	r28
    Note: The date and time read from Ds1307 will be of BCD format, 
          like 0x12,0x39,0x26 for 12hr,39min and 26sec.    
               0x15,0x08,0x47 for 15th day,8th month and 47th year.              
***************************************************************************************************/
void RTC_GetDateTime(rtc_t *rtc)
{
    6d1a:	df 93       	push	r29
    6d1c:	ec 01       	movw	r28, r24
    rtc_I2C_Start();                            // Start I2C communication
    6d1e:	a8 dd       	rcall	.-1200   	; 0x6870 <rtc_I2C_Start>

    i2c_write(C_Ds1307WriteMode_U8);        // connect to DS1307 by sending its ID on I2c Bus
    6d20:	80 ed       	ldi	r24, 0xD0	; 208
    6d22:	b8 dd       	rcall	.-1168   	; 0x6894 <i2c_write>
    i2c_write(C_Ds1307SecondRegAddress_U8); // Request Sec RAM address at 00H
    6d24:	80 e0       	ldi	r24, 0x00	; 0
    6d26:	b6 dd       	rcall	.-1172   	; 0x6894 <i2c_write>

    i2c_stop();                                // Stop I2C communication after selecting Sec Register
    6d28:	ac dd       	rcall	.-1192   	; 0x6882 <i2c_stop>
    6d2a:	2f ef       	ldi	r18, 0xFF	; 255
    6d2c:	81 ee       	ldi	r24, 0xE1	; 225
    6d2e:	94 e0       	ldi	r25, 0x04	; 4
    6d30:	21 50       	subi	r18, 0x01	; 1
    6d32:	80 40       	sbci	r24, 0x00	; 0
    6d34:	90 40       	sbci	r25, 0x00	; 0
    6d36:	e1 f7       	brne	.-8      	; 0x6d30 <RTC_GetDateTime+0x18>
    6d38:	00 c0       	rjmp	.+0      	; 0x6d3a <RTC_GetDateTime+0x22>
	_delay_ms(100);
    rtc_I2C_Start();                            // Start I2C communication
    6d3a:	00 00       	nop
    6d3c:	99 dd       	rcall	.-1230   	; 0x6870 <rtc_I2C_Start>
    i2c_write(C_Ds1307ReadMode_U8);            // connect to DS1307(Read mode) by sending its ID
    6d3e:	81 ed       	ldi	r24, 0xD1	; 209
    6d40:	a9 dd       	rcall	.-1198   	; 0x6894 <i2c_write>
    6d42:	ba dd       	rcall	.-1164   	; 0x68b8 <i2c_readAck>

    rtc->sec = bcd2dec(i2c_readAck());                // read second and return Positive ACK
    6d44:	98 2f       	mov	r25, r24
    6d46:	92 95       	swap	r25
    6d48:	9f 70       	andi	r25, 0x0F	; 15
    6d4a:	99 0f       	add	r25, r25
    6d4c:	29 2f       	mov	r18, r25
    6d4e:	22 0f       	add	r18, r18
    6d50:	22 0f       	add	r18, r18
    6d52:	92 0f       	add	r25, r18
    6d54:	8f 70       	andi	r24, 0x0F	; 15
    6d56:	89 0f       	add	r24, r25
    6d58:	88 83       	st	Y, r24
    6d5a:	ae dd       	rcall	.-1188   	; 0x68b8 <i2c_readAck>
    rtc->min = bcd2dec(i2c_readAck());                   // read minute and return Positive ACK
    6d5c:	98 2f       	mov	r25, r24
    6d5e:	92 95       	swap	r25
    6d60:	9f 70       	andi	r25, 0x0F	; 15
    6d62:	99 0f       	add	r25, r25
    6d64:	29 2f       	mov	r18, r25
    6d66:	22 0f       	add	r18, r18
    6d68:	22 0f       	add	r18, r18
    6d6a:	92 0f       	add	r25, r18
    6d6c:	8f 70       	andi	r24, 0x0F	; 15
    6d6e:	89 0f       	add	r24, r25
    6d70:	89 83       	std	Y+1, r24	; 0x01
    6d72:	a2 dd       	rcall	.-1212   	; 0x68b8 <i2c_readAck>
    rtc->hour= bcd2dec(i2c_readAck());                  // read hour and return Negative/No ACK
    6d74:	98 2f       	mov	r25, r24
    6d76:	92 95       	swap	r25
    6d78:	9f 70       	andi	r25, 0x0F	; 15
    6d7a:	99 0f       	add	r25, r25
    6d7c:	29 2f       	mov	r18, r25
    6d7e:	22 0f       	add	r18, r18
    6d80:	22 0f       	add	r18, r18
    6d82:	92 0f       	add	r25, r18
    6d84:	8f 70       	andi	r24, 0x0F	; 15
    6d86:	89 0f       	add	r24, r25
    6d88:	8a 83       	std	Y+2, r24	; 0x02
    6d8a:	96 dd       	rcall	.-1236   	; 0x68b8 <i2c_readAck>
    rtc->weekDay = bcd2dec(i2c_readAck());              // read weekDay and return Positive ACK
    6d8c:	98 2f       	mov	r25, r24
    6d8e:	92 95       	swap	r25
    6d90:	9f 70       	andi	r25, 0x0F	; 15
    6d92:	99 0f       	add	r25, r25
    6d94:	29 2f       	mov	r18, r25
    6d96:	22 0f       	add	r18, r18
    6d98:	22 0f       	add	r18, r18
    6d9a:	92 0f       	add	r25, r18
    6d9c:	8f 70       	andi	r24, 0x0F	; 15
    6d9e:	89 0f       	add	r24, r25
    6da0:	8b 83       	std	Y+3, r24	; 0x03
    6da2:	8a dd       	rcall	.-1260   	; 0x68b8 <i2c_readAck>
    rtc->date= bcd2dec(i2c_readAck());                // read Date and return Positive ACK
    6da4:	98 2f       	mov	r25, r24
    6da6:	92 95       	swap	r25
    6da8:	9f 70       	andi	r25, 0x0F	; 15
    6daa:	99 0f       	add	r25, r25
    6dac:	29 2f       	mov	r18, r25
    6dae:	22 0f       	add	r18, r18
    6db0:	22 0f       	add	r18, r18
    6db2:	92 0f       	add	r25, r18
    6db4:	8f 70       	andi	r24, 0x0F	; 15
    6db6:	89 0f       	add	r24, r25
    6db8:	8c 83       	std	Y+4, r24	; 0x04
    6dba:	7e dd       	rcall	.-1284   	; 0x68b8 <i2c_readAck>
    rtc->month=bcd2dec(i2c_readAck());               // read Month and return Positive ACK
    6dbc:	98 2f       	mov	r25, r24
    6dbe:	92 95       	swap	r25
    6dc0:	9f 70       	andi	r25, 0x0F	; 15
    6dc2:	99 0f       	add	r25, r25
    6dc4:	29 2f       	mov	r18, r25
    6dc6:	22 0f       	add	r18, r18
    6dc8:	22 0f       	add	r18, r18
    6dca:	92 0f       	add	r25, r18
    6dcc:	8f 70       	andi	r24, 0x0F	; 15
    6dce:	89 0f       	add	r24, r25
    6dd0:	8d 83       	std	Y+5, r24	; 0x05
    6dd2:	7d dd       	rcall	.-1286   	; 0x68ce <i2c_readNak>
    rtc->year =bcd2dec(i2c_readNak());                // read Year and return Negative/No ACK
    6dd4:	98 2f       	mov	r25, r24
    6dd6:	92 95       	swap	r25
    6dd8:	9f 70       	andi	r25, 0x0F	; 15
    6dda:	99 0f       	add	r25, r25
    6ddc:	29 2f       	mov	r18, r25
    6dde:	22 0f       	add	r18, r18
    6de0:	22 0f       	add	r18, r18
    6de2:	92 0f       	add	r25, r18
    6de4:	8f 70       	andi	r24, 0x0F	; 15
    6de6:	89 0f       	add	r24, r25
    6de8:	8e 83       	std	Y+6, r24	; 0x06
    6dea:	4b dd       	rcall	.-1386   	; 0x6882 <i2c_stop>

    i2c_stop();                             // Stop I2C communication after reading the Date
    6dec:	df 91       	pop	r29
    6dee:	cf 91       	pop	r28
}
    6df0:	08 95       	ret

00006df2 <spi_init_master>:
// 	DDRB &= ~(1<<MISO);
// 	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0);
// 	PORTB |= (1<<MISO);
// 	PORTB &= ~(1<<MISO);
	/*SET MOSI, SCK AND CS AS OUTPUT, REST OF REGISTER INPUT*/
	DDRB = (1<<DDB5) | (1<<DDB7) | (1<<DDB4);
    6df2:	80 eb       	ldi	r24, 0xB0	; 176
    6df4:	84 b9       	out	0x04, r24	; 4
	/*ENABLE SPI, MASTER, SET CLOCK RATE FCK/128 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0);
    6df6:	83 e5       	ldi	r24, 0x53	; 83
    6df8:	8c bd       	out	0x2c, r24	; 44
    6dfa:	08 95       	ret

00006dfc <spi_rwSPI>:
SPI READ/WRITE
********************************************/

uint8_t spi_rwSPI( uint8_t byteword)
{
	SPDR = byteword; // put the byteword into data register
    6dfc:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    6dfe:	0d b4       	in	r0, 0x2d	; 45
    6e00:	07 fe       	sbrs	r0, 7
    6e02:	fd cf       	rjmp	.-6      	; 0x6dfe <spi_rwSPI+0x2>
	return SPDR;
    6e04:	8e b5       	in	r24, 0x2e	; 46
}
    6e06:	08 95       	ret

00006e08 <spi_BurstRead>:

/********************************************
BURST READ
********************************************/

void spi_BurstRead(uint8_t addr, uint8_t buffer[], uint8_t countdown, int pin) {
    6e08:	df 92       	push	r13
    6e0a:	ef 92       	push	r14
    6e0c:	ff 92       	push	r15
    6e0e:	0f 93       	push	r16
    6e10:	1f 93       	push	r17
    6e12:	cf 93       	push	r28
    6e14:	df 93       	push	r29
    6e16:	8b 01       	movw	r16, r22
    6e18:	d4 2e       	mov	r13, r20

	PORT_CS &= ~(1<<pin);
    6e1a:	95 b1       	in	r25, 0x05	; 5
    6e1c:	41 e0       	ldi	r20, 0x01	; 1
    6e1e:	50 e0       	ldi	r21, 0x00	; 0
    6e20:	7a 01       	movw	r14, r20
    6e22:	02 c0       	rjmp	.+4      	; 0x6e28 <spi_BurstRead+0x20>
    6e24:	ee 0c       	add	r14, r14
    6e26:	ff 1c       	adc	r15, r15
    6e28:	2a 95       	dec	r18
    6e2a:	e2 f7       	brpl	.-8      	; 0x6e24 <spi_BurstRead+0x1c>
    6e2c:	2e 2d       	mov	r18, r14
    6e2e:	20 95       	com	r18
    6e30:	92 23       	and	r25, r18
    6e32:	95 b9       	out	0x05, r25	; 5
	spi_rwSPI(addr);
    6e34:	e3 df       	rcall	.-58     	; 0x6dfc <spi_rwSPI>
	for (int i = 0; i < countdown; i++) {
    6e36:	dd 20       	and	r13, r13
    6e38:	49 f0       	breq	.+18     	; 0x6e4c <spi_BurstRead+0x44>
    6e3a:	e8 01       	movw	r28, r16
    6e3c:	0d 0d       	add	r16, r13
    6e3e:	11 1d       	adc	r17, r1
		*buffer++ = spi_rwSPI(0x00);
    6e40:	80 e0       	ldi	r24, 0x00	; 0
    6e42:	dc df       	rcall	.-72     	; 0x6dfc <spi_rwSPI>
    6e44:	89 93       	st	Y+, r24

void spi_BurstRead(uint8_t addr, uint8_t buffer[], uint8_t countdown, int pin) {

	PORT_CS &= ~(1<<pin);
	spi_rwSPI(addr);
	for (int i = 0; i < countdown; i++) {
    6e46:	c0 17       	cp	r28, r16
    6e48:	d1 07       	cpc	r29, r17
    6e4a:	d1 f7       	brne	.-12     	; 0x6e40 <spi_BurstRead+0x38>
		*buffer++ = spi_rwSPI(0x00);
	}
	PORT_CS |= (1<<pin);
    6e4c:	85 b1       	in	r24, 0x05	; 5
    6e4e:	e8 2a       	or	r14, r24
    6e50:	e5 b8       	out	0x05, r14	; 5
}
    6e52:	df 91       	pop	r29
    6e54:	cf 91       	pop	r28
    6e56:	1f 91       	pop	r17
    6e58:	0f 91       	pop	r16
    6e5a:	ff 90       	pop	r15
    6e5c:	ef 90       	pop	r14
    6e5e:	df 90       	pop	r13
    6e60:	08 95       	ret

00006e62 <spi_read16>:

uint16_t spi_read16(uint8_t addr, int pin)
{
    6e62:	cf 93       	push	r28
    6e64:	df 93       	push	r29
	PORT_CS &= ~(1<<pin);
    6e66:	95 b1       	in	r25, 0x05	; 5
    6e68:	c1 e0       	ldi	r28, 0x01	; 1
    6e6a:	d0 e0       	ldi	r29, 0x00	; 0
    6e6c:	02 c0       	rjmp	.+4      	; 0x6e72 <spi_read16+0x10>
    6e6e:	cc 0f       	add	r28, r28
    6e70:	dd 1f       	adc	r29, r29
    6e72:	6a 95       	dec	r22
    6e74:	e2 f7       	brpl	.-8      	; 0x6e6e <spi_read16+0xc>
    6e76:	2c 2f       	mov	r18, r28
    6e78:	20 95       	com	r18
    6e7a:	92 23       	and	r25, r18
    6e7c:	95 b9       	out	0x05, r25	; 5
	spi_rwSPI(addr);
    6e7e:	be df       	rcall	.-132    	; 0x6dfc <spi_rwSPI>
	uint8_t buffer[2];
	buffer[0] = spi_rwSPI(0x00);
    6e80:	80 e0       	ldi	r24, 0x00	; 0
    6e82:	bc df       	rcall	.-136    	; 0x6dfc <spi_rwSPI>
    6e84:	d8 2f       	mov	r29, r24
	buffer[1] = spi_rwSPI(0x00);
    6e86:	80 e0       	ldi	r24, 0x00	; 0
    6e88:	b9 df       	rcall	.-142    	; 0x6dfc <spi_rwSPI>
    6e8a:	95 b1       	in	r25, 0x05	; 5
	uint16_t receivedVal = (buffer[1] << 8) | buffer[0];
	PORT_CS |= (1<<pin);
    6e8c:	c9 2b       	or	r28, r25
    6e8e:	c5 b9       	out	0x05, r28	; 5
    6e90:	2d 2f       	mov	r18, r29
	return receivedVal;
    6e92:	30 e0       	ldi	r19, 0x00	; 0
    6e94:	a9 01       	movw	r20, r18
}
    6e96:	58 2b       	or	r21, r24
    6e98:	ca 01       	movw	r24, r20
    6e9a:	df 91       	pop	r29
    6e9c:	cf 91       	pop	r28
    6e9e:	08 95       	ret

00006ea0 <spi_readS16>:
    6ea0:	e0 cf       	rjmp	.-64     	; 0x6e62 <spi_read16>

int16_t spi_readS16(uint8_t addr, int pin)
{
	return (int16_t)spi_read16(addr, pin);
}
    6ea2:	08 95       	ret

00006ea4 <wind_initWindSpeed>:

static void timer1_init()
{
	
	// Starting timer 1 in normal mode
	TCCR1B= 0x00;
    6ea4:	e1 e8       	ldi	r30, 0x81	; 129
    6ea6:	f0 e0       	ldi	r31, 0x00	; 0
    6ea8:	10 82       	st	Z, r1
	TCCR1A= 0x00;
    6eaa:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	// setting interrupt flag register to 0.
	TIFR1=0x00;
    6eae:	16 ba       	out	0x16, r1	; 22
	// timer 1 setup with a pre-scalar of 256
	TCCR1B |=(1<<CS12);
    6eb0:	80 81       	ld	r24, Z
    6eb2:	84 60       	ori	r24, 0x04	; 4
    6eb4:	80 83       	st	Z, r24
	//Input capture on rising edge
	TCCR1B|=(1<<ICES1);
    6eb6:	80 81       	ld	r24, Z
    6eb8:	80 64       	ori	r24, 0x40	; 64
    6eba:	80 83       	st	Z, r24
	
	// setting the timer/counter i/o locations to 0.
	TCNT1H=0x00;
    6ebc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	TCNT1L=0x00;
    6ec0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	// enabling input capture
	TIMSK1=(1<<ICIE1);
    6ec4:	80 e2       	ldi	r24, 0x20	; 32
    6ec6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	// enabling global interrupt
	sei();
    6eca:	78 94       	sei
{
	// initialize timer
	timer1_init();

	// setting PB0 as input for
	DDRD |= (0<<PORTD5);
    6ecc:	8a b1       	in	r24, 0x0a	; 10
    6ece:	8a b9       	out	0x0a, r24	; 10
	//Enable PB0 pull up resistor
	PORTD |= (1<<5);
    6ed0:	5d 9a       	sbi	0x0b, 5	; 11
    6ed2:	08 95       	ret

00006ed4 <wind_measureFrequency>:
}

float wind_measureFrequency()
{
	if (flag>=2)
    6ed4:	80 91 3b 13 	lds	r24, 0x133B	; 0x80133b <flag>
    6ed8:	82 30       	cpi	r24, 0x02	; 2
    6eda:	08 f1       	brcs	.+66     	; 0x6f1e <wind_measureFrequency+0x4a>
	{
		flag =0;
    6edc:	10 92 3b 13 	sts	0x133B, r1	; 0x80133b <flag>
		period= (t_2-t_1);
    6ee0:	80 91 0c 11 	lds	r24, 0x110C	; 0x80110c <t_2>
    6ee4:	90 91 0d 11 	lds	r25, 0x110D	; 0x80110d <t_2+0x1>
    6ee8:	20 91 0e 11 	lds	r18, 0x110E	; 0x80110e <t_1>
    6eec:	30 91 0f 11 	lds	r19, 0x110F	; 0x80110f <t_1+0x1>
    6ef0:	82 1b       	sub	r24, r18
    6ef2:	93 0b       	sbc	r25, r19
    6ef4:	90 93 0b 11 	sts	0x110B, r25	; 0x80110b <period+0x1>
    6ef8:	80 93 0a 11 	sts	0x110A, r24	; 0x80110a <period>
		TIFR1=(1<<ICF1);
    6efc:	80 e2       	ldi	r24, 0x20	; 32
    6efe:	86 bb       	out	0x16, r24	; 22
		
		return (16000000UL/period)/256;
    6f00:	20 91 0a 11 	lds	r18, 0x110A	; 0x80110a <period>
    6f04:	30 91 0b 11 	lds	r19, 0x110B	; 0x80110b <period+0x1>
    6f08:	40 e0       	ldi	r20, 0x00	; 0
    6f0a:	50 e0       	ldi	r21, 0x00	; 0
    6f0c:	64 e2       	ldi	r22, 0x24	; 36
    6f0e:	74 ef       	ldi	r23, 0xF4	; 244
    6f10:	80 e0       	ldi	r24, 0x00	; 0
    6f12:	90 e0       	ldi	r25, 0x00	; 0
    6f14:	0e 94 aa 40 	call	0x8154	; 0x8154 <__udivmodsi4>
    6f18:	ca 01       	movw	r24, r20
    6f1a:	b9 01       	movw	r22, r18
    6f1c:	92 c7       	rjmp	.+3876   	; 0x7e42 <__floatunsisf>
	}
	return -1;
    6f1e:	60 e0       	ldi	r22, 0x00	; 0
    6f20:	70 e0       	ldi	r23, 0x00	; 0
    6f22:	80 e8       	ldi	r24, 0x80	; 128
    6f24:	9f eb       	ldi	r25, 0xBF	; 191
}
    6f26:	08 95       	ret

00006f28 <__vector_12>:

ISR (TIMER1_CAPT_vect)
{
    6f28:	1f 92       	push	r1
    6f2a:	0f 92       	push	r0
    6f2c:	0f b6       	in	r0, 0x3f	; 63
    6f2e:	0f 92       	push	r0
    6f30:	11 24       	eor	r1, r1
    6f32:	8f 93       	push	r24
    6f34:	9f 93       	push	r25
	if (flag==0)
    6f36:	80 91 3b 13 	lds	r24, 0x133B	; 0x80133b <flag>
    6f3a:	81 11       	cpse	r24, r1
    6f3c:	0b c0       	rjmp	.+22     	; 0x6f54 <__vector_12+0x2c>
	{
		t_1=ICR1;
    6f3e:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    6f42:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    6f46:	90 93 0f 11 	sts	0x110F, r25	; 0x80110f <t_1+0x1>
    6f4a:	80 93 0e 11 	sts	0x110E, r24	; 0x80110e <t_1>
		TIFR1=(1<<ICF1);
    6f4e:	80 e2       	ldi	r24, 0x20	; 32
    6f50:	86 bb       	out	0x16, r24	; 22
    6f52:	0e c0       	rjmp	.+28     	; 0x6f70 <__vector_12+0x48>

	}
	else if (flag==1)
    6f54:	80 91 3b 13 	lds	r24, 0x133B	; 0x80133b <flag>
    6f58:	81 30       	cpi	r24, 0x01	; 1
    6f5a:	51 f4       	brne	.+20     	; 0x6f70 <__vector_12+0x48>
	{
		t_2= ICR1;
    6f5c:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    6f60:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    6f64:	90 93 0d 11 	sts	0x110D, r25	; 0x80110d <t_2+0x1>
    6f68:	80 93 0c 11 	sts	0x110C, r24	; 0x80110c <t_2>
		TIFR1=(1<<ICF1);
    6f6c:	80 e2       	ldi	r24, 0x20	; 32
    6f6e:	86 bb       	out	0x16, r24	; 22
		
	}
	flag ++;
    6f70:	80 91 3b 13 	lds	r24, 0x133B	; 0x80133b <flag>
    6f74:	8f 5f       	subi	r24, 0xFF	; 255
    6f76:	80 93 3b 13 	sts	0x133B, r24	; 0x80133b <flag>
    6f7a:	9f 91       	pop	r25
    6f7c:	8f 91       	pop	r24
    6f7e:	0f 90       	pop	r0
    6f80:	0f be       	out	0x3f, r0	; 63
    6f82:	0f 90       	pop	r0
    6f84:	1f 90       	pop	r1
    6f86:	18 95       	reti

00006f88 <resetEnemy>:
		return;
	}
}

static void resetEnemy()
{
    6f88:	e7 eb       	ldi	r30, 0xB7	; 183
    6f8a:	f5 e1       	ldi	r31, 0x15	; 21
    6f8c:	21 ee       	ldi	r18, 0xE1	; 225
    6f8e:	35 e1       	ldi	r19, 0x15	; 21
    6f90:	09 c0       	rjmp	.+18     	; 0x6fa4 <resetEnemy+0x1c>
	for(int r=0; r < 3; r++)
	{
		for(int i=0; i < 7; i++)
		{
			enemy[(r*7)+i] = 0;
    6f92:	11 92       	st	Z+, r1
    6f94:	11 92       	st	Z+, r1

static void resetEnemy()
{
	for(int r=0; r < 3; r++)
	{
		for(int i=0; i < 7; i++)
    6f96:	e8 17       	cp	r30, r24
    6f98:	f9 07       	cpc	r31, r25
    6f9a:	d9 f7       	brne	.-10     	; 0x6f92 <resetEnemy+0xa>
    6f9c:	fc 01       	movw	r30, r24
	}
}

static void resetEnemy()
{
	for(int r=0; r < 3; r++)
    6f9e:	28 17       	cp	r18, r24
    6fa0:	39 07       	cpc	r19, r25
    6fa2:	19 f0       	breq	.+6      	; 0x6faa <resetEnemy+0x22>
    6fa4:	cf 01       	movw	r24, r30
    6fa6:	0e 96       	adiw	r24, 0x0e	; 14
    6fa8:	f4 cf       	rjmp	.-24     	; 0x6f92 <resetEnemy+0xa>
		for(int i=0; i < 7; i++)
		{
			enemy[(r*7)+i] = 0;
		}
	}
	enemyPos = 0;
    6faa:	10 92 1a 11 	sts	0x111A, r1	; 0x80111a <enemyPos>
	sec = 0;
    6fae:	10 92 3f 05 	sts	0x053F, r1	; 0x80053f <sec>
    6fb2:	08 95       	ret

00006fb4 <gameover>:
}

static void gameover()
{
    6fb4:	cf 93       	push	r28
    6fb6:	df 93       	push	r29
    6fb8:	cd b7       	in	r28, 0x3d	; 61
    6fba:	de b7       	in	r29, 0x3e	; 62
    6fbc:	2a 97       	sbiw	r28, 0x0a	; 10
    6fbe:	0f b6       	in	r0, 0x3f	; 63
    6fc0:	f8 94       	cli
    6fc2:	de bf       	out	0x3e, r29	; 62
    6fc4:	0f be       	out	0x3f, r0	; 63
    6fc6:	cd bf       	out	0x3d, r28	; 61
	N5110_clear();
    6fc8:	0e dd       	rcall	.-1508   	; 0x69e6 <N5110_clear>
	if(score > highscore)
    6fca:	80 91 14 11 	lds	r24, 0x1114	; 0x801114 <score>
    6fce:	90 91 15 11 	lds	r25, 0x1115	; 0x801115 <score+0x1>
    6fd2:	20 91 12 11 	lds	r18, 0x1112	; 0x801112 <highscore>
    6fd6:	30 91 13 11 	lds	r19, 0x1113	; 0x801113 <highscore+0x1>
    6fda:	28 17       	cp	r18, r24
    6fdc:	39 07       	cpc	r19, r25
    6fde:	20 f4       	brcc	.+8      	; 0x6fe8 <gameover+0x34>
	{
		highscore = score;
    6fe0:	90 93 13 11 	sts	0x1113, r25	; 0x801113 <highscore+0x1>
    6fe4:	80 93 12 11 	sts	0x1112, r24	; 0x801112 <highscore>
	}
	eeprom_write_word((uint16_t*)0x50, highscore);
    6fe8:	60 91 12 11 	lds	r22, 0x1112	; 0x801112 <highscore>
    6fec:	70 91 13 11 	lds	r23, 0x1113	; 0x801113 <highscore+0x1>
    6ff0:	80 e5       	ldi	r24, 0x50	; 80
    6ff2:	90 e0       	ldi	r25, 0x00	; 0
    6ff4:	0e 94 1d 4e 	call	0x9c3a	; 0x9c3a <eeprom_write_word>
	lcd_setXY(0x41,0x90);
    6ff8:	60 e9       	ldi	r22, 0x90	; 144
    6ffa:	81 e4       	ldi	r24, 0x41	; 65
    6ffc:	ed dc       	rcall	.-1574   	; 0x69d8 <lcd_setXY>
	N5110_Data("GAME OVER");
    6ffe:	8b e2       	ldi	r24, 0x2B	; 43
    7000:	94 e0       	ldi	r25, 0x04	; 4
    7002:	76 dc       	rcall	.-1812   	; 0x68f0 <N5110_Data>
	lcd_setXY(0x43,0x89);
    7004:	69 e8       	ldi	r22, 0x89	; 137
    7006:	83 e4       	ldi	r24, 0x43	; 67
    7008:	e7 dc       	rcall	.-1586   	; 0x69d8 <lcd_setXY>
	N5110_Data("High Score");
    700a:	85 e3       	ldi	r24, 0x35	; 53
    700c:	94 e0       	ldi	r25, 0x04	; 4
    700e:	70 dc       	rcall	.-1824   	; 0x68f0 <N5110_Data>
	lcd_setXY(0x44,0xA1);
    7010:	61 ea       	ldi	r22, 0xA1	; 161
    7012:	84 e4       	ldi	r24, 0x44	; 68
    7014:	e1 dc       	rcall	.-1598   	; 0x69d8 <lcd_setXY>
    7016:	4a e0       	ldi	r20, 0x0A	; 10
    7018:	be 01       	movw	r22, r28
    701a:	6f 5f       	subi	r22, 0xFF	; 255
    701c:	7f 4f       	sbci	r23, 0xFF	; 255
    701e:	80 91 12 11 	lds	r24, 0x1112	; 0x801112 <highscore>
    7022:	90 91 13 11 	lds	r25, 0x1113	; 0x801113 <highscore+0x1>
    7026:	0e 94 6f 44 	call	0x88de	; 0x88de <__itoa_ncheck>
	char scoreChar[10];
	itoa(highscore,scoreChar,10);
	N5110_Data(scoreChar);
    702a:	ce 01       	movw	r24, r28
    702c:	01 96       	adiw	r24, 0x01	; 1
    702e:	60 dc       	rcall	.-1856   	; 0x68f0 <N5110_Data>
    7030:	2f ef       	ldi	r18, 0xFF	; 255
    7032:	83 e2       	ldi	r24, 0x23	; 35
    7034:	94 ef       	ldi	r25, 0xF4	; 244
    7036:	21 50       	subi	r18, 0x01	; 1
    7038:	80 40       	sbci	r24, 0x00	; 0
    703a:	90 40       	sbci	r25, 0x00	; 0
    703c:	e1 f7       	brne	.-8      	; 0x7036 <gameover+0x82>
    703e:	00 c0       	rjmp	.+0      	; 0x7040 <gameover+0x8c>
    7040:	00 00       	nop
	
	_delay_ms(5000);
	score = 0;
    7042:	10 92 15 11 	sts	0x1115, r1	; 0x801115 <score+0x1>
    7046:	10 92 14 11 	sts	0x1114, r1	; 0x801114 <score>
	resetEnemy();
    704a:	9e df       	rcall	.-196    	; 0x6f88 <resetEnemy>
    704c:	2a 96       	adiw	r28, 0x0a	; 10
}
    704e:	0f b6       	in	r0, 0x3f	; 63
    7050:	f8 94       	cli
    7052:	de bf       	out	0x3e, r29	; 62
    7054:	0f be       	out	0x3f, r0	; 63
    7056:	cd bf       	out	0x3d, r28	; 61
    7058:	df 91       	pop	r29
    705a:	cf 91       	pop	r28
    705c:	08 95       	ret

0000705e <adc_read>:
    705e:	80 64       	ori	r24, 0x40	; 64
}

#define REF_AVCC (1<<REFS0)  // reference = AVCC = 3.3 V
uint16_t adc_read(uint8_t channel)
{
	ADMUX = REF_AVCC | channel;  // set reference and channel
    7060:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1<<ADSC);         // start conversion
    7064:	ea e7       	ldi	r30, 0x7A	; 122
    7066:	f0 e0       	ldi	r31, 0x00	; 0
    7068:	80 81       	ld	r24, Z
    706a:	80 64       	ori	r24, 0x40	; 64
    706c:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC)); // wait for conversion complete
    706e:	80 81       	ld	r24, Z
    7070:	86 fd       	sbrc	r24, 6
    7072:	fd cf       	rjmp	.-6      	; 0x706e <adc_read+0x10>
	return ADC;
    7074:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    7078:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
    707c:	08 95       	ret

0000707e <stringToIntArray>:
	eeprom_write_float(0x00, LargestDirectionValue);
	printf_P(PSTR("Calibration complete!\n"));
}

void stringToIntArray(uint8_t * array, char * string, uint8_t * eepromAddr)
{
    707e:	8f 92       	push	r8
    7080:	9f 92       	push	r9
    7082:	af 92       	push	r10
    7084:	bf 92       	push	r11
    7086:	df 92       	push	r13
    7088:	ef 92       	push	r14
    708a:	ff 92       	push	r15
    708c:	0f 93       	push	r16
    708e:	1f 93       	push	r17
    7090:	cf 93       	push	r28
    7092:	df 93       	push	r29
    7094:	00 d0       	rcall	.+0      	; 0x7096 <stringToIntArray+0x18>
    7096:	cd b7       	in	r28, 0x3d	; 61
    7098:	de b7       	in	r29, 0x3e	; 62
    709a:	7c 01       	movw	r14, r24
    709c:	8a 01       	movw	r16, r20
	uint8_t i = 0;
	char * p = string;
    709e:	7a 83       	std	Y+2, r23	; 0x02
    70a0:	69 83       	std	Y+1, r22	; 0x01
	printf_P(PSTR("Calibration complete!\n"));
}

void stringToIntArray(uint8_t * array, char * string, uint8_t * eepromAddr)
{
	uint8_t i = 0;
    70a2:	d1 2c       	mov	r13, r1
	char * p = string;
	while(*p) {
    70a4:	29 c0       	rjmp	.+82     	; 0x70f8 <stringToIntArray+0x7a>
		if ( isdigit(*p) || ( (*p=='-'||*p=='+') && isdigit(*(p+1)) )) {
    70a6:	28 2f       	mov	r18, r24
    70a8:	30 e0       	ldi	r19, 0x00	; 0
    70aa:	20 53       	subi	r18, 0x30	; 48
    70ac:	31 09       	sbc	r19, r1
    70ae:	2a 30       	cpi	r18, 0x0A	; 10
    70b0:	31 05       	cpc	r19, r1
    70b2:	48 f0       	brcs	.+18     	; 0x70c6 <stringToIntArray+0x48>
    70b4:	8d 32       	cpi	r24, 0x2D	; 45
    70b6:	11 f0       	breq	.+4      	; 0x70bc <stringToIntArray+0x3e>
    70b8:	8b 32       	cpi	r24, 0x2B	; 43
    70ba:	d9 f4       	brne	.+54     	; 0x70f2 <stringToIntArray+0x74>
    70bc:	81 81       	ldd	r24, Z+1	; 0x01
    70be:	90 e0       	ldi	r25, 0x00	; 0
    70c0:	c0 97       	sbiw	r24, 0x30	; 48
    70c2:	0a 97       	sbiw	r24, 0x0a	; 10
    70c4:	b0 f4       	brcc	.+44     	; 0x70f2 <stringToIntArray+0x74>
			array[i] = strtol(p, &p, 10);
    70c6:	8d 2c       	mov	r8, r13
    70c8:	91 2c       	mov	r9, r1
    70ca:	57 01       	movw	r10, r14
    70cc:	a8 0c       	add	r10, r8
    70ce:	b9 1c       	adc	r11, r9
    70d0:	4a e0       	ldi	r20, 0x0A	; 10
    70d2:	50 e0       	ldi	r21, 0x00	; 0
    70d4:	be 01       	movw	r22, r28
    70d6:	6f 5f       	subi	r22, 0xFF	; 255
    70d8:	7f 4f       	sbci	r23, 0xFF	; 255
    70da:	cf 01       	movw	r24, r30
    70dc:	0e 94 f3 42 	call	0x85e6	; 0x85e6 <strtol>
    70e0:	f5 01       	movw	r30, r10
    70e2:	60 83       	st	Z, r22
			eeprom_write_byte((uint8_t*)eepromAddr+i, array[i]);
    70e4:	c8 01       	movw	r24, r16
    70e6:	88 0d       	add	r24, r8
    70e8:	99 1d       	adc	r25, r9
    70ea:	0e 94 0a 4e 	call	0x9c14	; 0x9c14 <eeprom_write_byte>
			i++;
    70ee:	d3 94       	inc	r13
    70f0:	03 c0       	rjmp	.+6      	; 0x70f8 <stringToIntArray+0x7a>
			} else {
			p++;
    70f2:	31 96       	adiw	r30, 0x01	; 1
    70f4:	fa 83       	std	Y+2, r31	; 0x02
    70f6:	e9 83       	std	Y+1, r30	; 0x01

void stringToIntArray(uint8_t * array, char * string, uint8_t * eepromAddr)
{
	uint8_t i = 0;
	char * p = string;
	while(*p) {
    70f8:	e9 81       	ldd	r30, Y+1	; 0x01
    70fa:	fa 81       	ldd	r31, Y+2	; 0x02
    70fc:	80 81       	ld	r24, Z
    70fe:	81 11       	cpse	r24, r1
    7100:	d2 cf       	rjmp	.-92     	; 0x70a6 <stringToIntArray+0x28>
			i++;
			} else {
			p++;
		}
	}
}
    7102:	0f 90       	pop	r0
    7104:	0f 90       	pop	r0
    7106:	df 91       	pop	r29
    7108:	cf 91       	pop	r28
    710a:	1f 91       	pop	r17
    710c:	0f 91       	pop	r16
    710e:	ff 90       	pop	r15
    7110:	ef 90       	pop	r14
    7112:	df 90       	pop	r13
    7114:	bf 90       	pop	r11
    7116:	af 90       	pop	r10
    7118:	9f 90       	pop	r9
    711a:	8f 90       	pop	r8
    711c:	08 95       	ret

0000711e <__vector_6>:
uint8_t runOnce = 0;
char humidChar[10],tempChar[10],pressChar[16],anglChar[10],speedChar[10];
int page = 1;

ISR(PCINT2_vect)
{
    711e:	1f 92       	push	r1
    7120:	0f 92       	push	r0
    7122:	0f b6       	in	r0, 0x3f	; 63
    7124:	0f 92       	push	r0
    7126:	11 24       	eor	r1, r1
    7128:	0b b6       	in	r0, 0x3b	; 59
    712a:	0f 92       	push	r0
    712c:	2f 93       	push	r18
    712e:	3f 93       	push	r19
    7130:	4f 93       	push	r20
    7132:	5f 93       	push	r21
    7134:	6f 93       	push	r22
    7136:	7f 93       	push	r23
    7138:	8f 93       	push	r24
    713a:	9f 93       	push	r25
    713c:	af 93       	push	r26
    713e:	bf 93       	push	r27
    7140:	ef 93       	push	r30
    7142:	ff 93       	push	r31
	if((PINC&(1 << PINC4)) == 0)
    7144:	34 99       	sbic	0x06, 4	; 6
    7146:	41 c0       	rjmp	.+130    	; 0x71ca <__vector_6+0xac>
	{
		if((PINC&(1 << PINC7)) == 0)
    7148:	37 99       	sbic	0x06, 7	; 6
    714a:	15 c0       	rjmp	.+42     	; 0x7176 <__vector_6+0x58>
		{
			if(brightness + 25 > 255)
    714c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <brightness>
    7150:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <brightness+0x1>
    7154:	49 96       	adiw	r24, 0x19	; 25
    7156:	8f 3f       	cpi	r24, 0xFF	; 255
    7158:	91 05       	cpc	r25, r1
    715a:	41 f0       	breq	.+16     	; 0x716c <__vector_6+0x4e>
    715c:	3c f0       	brlt	.+14     	; 0x716c <__vector_6+0x4e>
			{
				brightness = 255;
    715e:	8f ef       	ldi	r24, 0xFF	; 255
    7160:	90 e0       	ldi	r25, 0x00	; 0
    7162:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <brightness+0x1>
    7166:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <brightness>
    716a:	2f c0       	rjmp	.+94     	; 0x71ca <__vector_6+0xac>
			}
			else
			{
				brightness += 25;
    716c:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <brightness+0x1>
    7170:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <brightness>
    7174:	2a c0       	rjmp	.+84     	; 0x71ca <__vector_6+0xac>
			}
		}
		else if((PINC&(1 << PINC6)) == 0)
    7176:	36 99       	sbic	0x06, 6	; 6
    7178:	10 c0       	rjmp	.+32     	; 0x719a <__vector_6+0x7c>
		{
			if(brightness - 25 < 0)
    717a:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <brightness>
    717e:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <brightness+0x1>
    7182:	49 97       	sbiw	r24, 0x19	; 25
    7184:	2a f4       	brpl	.+10     	; 0x7190 <__vector_6+0x72>
			{
				brightness = 0;
    7186:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <brightness+0x1>
    718a:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <brightness>
    718e:	1d c0       	rjmp	.+58     	; 0x71ca <__vector_6+0xac>
			}
			else
			{
				brightness -= 25;
    7190:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <brightness+0x1>
    7194:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <brightness>
    7198:	18 c0       	rjmp	.+48     	; 0x71ca <__vector_6+0xac>
			}
		}
		else
		{
			page++;
    719a:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <page>
    719e:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <page+0x1>
    71a2:	01 96       	adiw	r24, 0x01	; 1
			if(page >= 4) page = 1;
    71a4:	84 30       	cpi	r24, 0x04	; 4
    71a6:	91 05       	cpc	r25, r1
    71a8:	2c f4       	brge	.+10     	; 0x71b4 <__vector_6+0x96>
				brightness -= 25;
			}
		}
		else
		{
			page++;
    71aa:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <page+0x1>
    71ae:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <page>
    71b2:	06 c0       	rjmp	.+12     	; 0x71c0 <__vector_6+0xa2>
			if(page >= 4) page = 1;
    71b4:	81 e0       	ldi	r24, 0x01	; 1
    71b6:	90 e0       	ldi	r25, 0x00	; 0
    71b8:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <page+0x1>
    71bc:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <page>
		
			printPage(page);
    71c0:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <page>
    71c4:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <page+0x1>
    71c8:	41 dc       	rcall	.-1918   	; 0x6a4c <printPage>
		}
	}
}
    71ca:	ff 91       	pop	r31
    71cc:	ef 91       	pop	r30
    71ce:	bf 91       	pop	r27
    71d0:	af 91       	pop	r26
    71d2:	9f 91       	pop	r25
    71d4:	8f 91       	pop	r24
    71d6:	7f 91       	pop	r23
    71d8:	6f 91       	pop	r22
    71da:	5f 91       	pop	r21
    71dc:	4f 91       	pop	r20
    71de:	3f 91       	pop	r19
    71e0:	2f 91       	pop	r18
    71e2:	0f 90       	pop	r0
    71e4:	0b be       	out	0x3b, r0	; 59
    71e6:	0f 90       	pop	r0
    71e8:	0f be       	out	0x3f, r0	; 63
    71ea:	0f 90       	pop	r0
    71ec:	1f 90       	pop	r1
    71ee:	18 95       	reti

000071f0 <main>:
	}
	count++;
}

int main(void)
{	
    71f0:	cf 93       	push	r28
    71f2:	df 93       	push	r29
    71f4:	cd b7       	in	r28, 0x3d	; 61
    71f6:	de b7       	in	r29, 0x3e	; 62
    71f8:	68 97       	sbiw	r28, 0x18	; 24
    71fa:	0f b6       	in	r0, 0x3f	; 63
    71fc:	f8 94       	cli
    71fe:	de bf       	out	0x3e, r29	; 62
    7200:	0f be       	out	0x3f, r0	; 63
    7202:	cd bf       	out	0x3d, r28	; 61
	// init arrays
	//memset(bullets, 0, 32);
	//
	DDRD = 0b10111100;
    7204:	8c eb       	ldi	r24, 0xBC	; 188
    7206:	8a b9       	out	0x0a, r24	; 10
	DDRA |= (1 << PINA1);
    7208:	09 9a       	sbi	0x01, 1	; 1
	PORTA |= (1 << PINA1);
    720a:	11 9a       	sbi	0x02, 1	; 2
	PORTD = 0b00111100;
    720c:	8c e3       	ldi	r24, 0x3C	; 60
    720e:	8b b9       	out	0x0b, r24	; 11
    7210:	2f ef       	ldi	r18, 0xFF	; 255
    7212:	39 e6       	ldi	r19, 0x69	; 105
    7214:	68 e1       	ldi	r22, 0x18	; 24
    7216:	21 50       	subi	r18, 0x01	; 1
    7218:	30 40       	sbci	r19, 0x00	; 0
    721a:	60 40       	sbci	r22, 0x00	; 0
    721c:	e1 f7       	brne	.-8      	; 0x7216 <main+0x26>
    721e:	00 c0       	rjmp	.+0      	; 0x7220 <main+0x30>
    7220:	00 00       	nop
	_delay_ms(500);
	PORTD &= 0b11000111;
    7222:	8b b1       	in	r24, 0x0b	; 11
    7224:	87 7c       	andi	r24, 0xC7	; 199
    7226:	8b b9       	out	0x0b, r24	; 11
	PORTA &= ~(1 << PINA1);
    7228:	11 98       	cbi	0x02, 1	; 2
	PORTD &= ~(1 << PIND5);
    722a:	5d 98       	cbi	0x0b, 5	; 11

// 	uart_init();
// 	stdout = &uart_output;
// 	stdin  = &uart_input;
// 	puts_P(PSTR("Initializing"));
 	DDRC |= (0 << PINC6);
    722c:	87 b1       	in	r24, 0x07	; 7
    722e:	87 b9       	out	0x07, r24	; 7
 	PORTC |= (1 << PINC6);
    7230:	46 9a       	sbi	0x08, 6	; 8
	DDRC |= (0 << PINC7);
    7232:	87 b1       	in	r24, 0x07	; 7
    7234:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PINC7);
    7236:	47 9a       	sbi	0x08, 7	; 8
	DDRC |= (0 << PINC4);
    7238:	87 b1       	in	r24, 0x07	; 7
    723a:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PINC4);
    723c:	44 9a       	sbi	0x08, 4	; 8
	
	 DDRD |= (1 << DDD7);
    723e:	57 9a       	sbi	0x0a, 7	; 10
	 // PD6 is now an output

	 OCR2A = brightness;
    7240:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <brightness>
    7244:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	 // set PWM for 50% duty cycle


	 TCCR2A |= (1 << COM2A1);
    7248:	e0 eb       	ldi	r30, 0xB0	; 176
    724a:	f0 e0       	ldi	r31, 0x00	; 0
    724c:	80 81       	ld	r24, Z
    724e:	80 68       	ori	r24, 0x80	; 128
    7250:	80 83       	st	Z, r24
	 // set none-inverting mode

	 TCCR2A |= (1 << WGM21) | (1 << WGM20);
    7252:	80 81       	ld	r24, Z
    7254:	83 60       	ori	r24, 0x03	; 3
    7256:	80 83       	st	Z, r24
	 // set fast PWM Mode

	 TCCR2B |= (1 << CS21);
    7258:	e1 eb       	ldi	r30, 0xB1	; 177
    725a:	f0 e0       	ldi	r31, 0x00	; 0
    725c:	80 81       	ld	r24, Z
    725e:	82 60       	ori	r24, 0x02	; 2
    7260:	80 83       	st	Z, r24
	 // set prescaler to 8 and starts PWM
	 
	spi_init_master();
    7262:	c7 dd       	rcall	.-1138   	; 0x6df2 <spi_init_master>
 	N5110_init();
    7264:	90 db       	rcall	.-2272   	; 0x6986 <N5110_init>
	N5110_clear();
    7266:	bf db       	rcall	.-2178   	; 0x69e6 <N5110_clear>
    7268:	57 9a       	sbi	0x0a, 7	; 10
	
	DDRD |= (1 << PIND7);
    726a:	34 99       	sbic	0x06, 4	; 6
	if((PINC&(1 << PINC4)) == 0 && (PINC&(1 << PINC6)) == 0) // Check for both calibration buttons pressed
    726c:	1c c0       	rjmp	.+56     	; 0x72a6 <main+0xb6>
    726e:	36 99       	sbic	0x06, 6	; 6
    7270:	1a c0       	rjmp	.+52     	; 0x72a6 <main+0xb6>
    7272:	0e 94 7e 17 	call	0x2efc	; 0x2efc <init_cnt2>
	{
		init_cnt2();
    7276:	78 94       	sei
		sei();
    7278:	83 e3       	ldi	r24, 0x33	; 51
		puts_P(PSTR("Space Invaders activated!"));
    727a:	94 e1       	ldi	r25, 0x14	; 20
    727c:	0e 94 05 45 	call	0x8a0a	; 0x8a0a <puts_P>
    7280:	61 e0       	ldi	r22, 0x01	; 1
		N5110_image("", 1);
    7282:	87 ef       	ldi	r24, 0xF7	; 247
    7284:	94 e0       	ldi	r25, 0x04	; 4
    7286:	be db       	rcall	.-2180   	; 0x6a04 <N5110_image>
    7288:	8f ef       	ldi	r24, 0xFF	; 255
    728a:	93 e2       	ldi	r25, 0x23	; 35
    728c:	e4 ef       	ldi	r30, 0xF4	; 244
    728e:	81 50       	subi	r24, 0x01	; 1
    7290:	90 40       	sbci	r25, 0x00	; 0
    7292:	e0 40       	sbci	r30, 0x00	; 0
    7294:	e1 f7       	brne	.-8      	; 0x728e <main+0x9e>
    7296:	00 c0       	rjmp	.+0      	; 0x7298 <main+0xa8>
    7298:	00 00       	nop
    729a:	81 e0       	ldi	r24, 0x01	; 1
		_delay_ms(5000);
		gameMode = 1;
    729c:	80 93 1b 11 	sts	0x111B, r24	; 0x80111b <gameMode>
    72a0:	10 92 3f 05 	sts	0x053F, r1	; 0x80053f <sec>
		sec = 0;
    72a4:	cf c0       	rjmp	.+414    	; 0x7444 <main+0x254>
    72a6:	10 92 1b 11 	sts	0x111B, r1	; 0x80111b <gameMode>
	}
	else
	{
		gameMode = 0;
    72aa:	a8 95       	wdr
	}
	
	if(gameMode == 0)
	{
		wdt_reset();
    72ac:	9f e0       	ldi	r25, 0x0F	; 15
    72ae:	88 e1       	ldi	r24, 0x18	; 24
    72b0:	0f b6       	in	r0, 0x3f	; 63
    72b2:	f8 94       	cli
    72b4:	a8 95       	wdr
    72b6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    72ba:	0f be       	out	0x3f, r0	; 63
    72bc:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    72c0:	21 9a       	sbi	0x04, 1	; 4
		wdt_enable(WDTO_2S);
		
		DDRB |= (1 << SD_CS);
		PORT_CS |= (1<<HIH_CS);
    72c2:	2c 9a       	sbi	0x05, 4	; 5
		PORT_CS |= (1<<BMP_CS);
    72c4:	2b 9a       	sbi	0x05, 3	; 5
		PORT_CS |= (1<<SD_CS);
 		i2c_init();
    72c6:	29 9a       	sbi	0x05, 1	; 5
    72c8:	ca da       	rcall	.-2668   	; 0x685e <i2c_init>
 		bmp280_init();
    72ca:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <bmp280_init>
		wind_initWindSpeed();
    72ce:	ea dd       	rcall	.-1068   	; 0x6ea4 <wind_initWindSpeed>
    72d0:	ea e7       	ldi	r30, 0x7A	; 122

int brightness = 128;

static void initADC()
{
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
    72d2:	f0 e0       	ldi	r31, 0x00	; 0
    72d4:	80 81       	ld	r24, Z
    72d6:	87 68       	ori	r24, 0x87	; 135
    72d8:	80 83       	st	Z, r24
    72da:	ec e7       	ldi	r30, 0x7C	; 124
	ADMUX |= (1 << REFS0) | (1 << MUX1);
    72dc:	f0 e0       	ldi	r31, 0x00	; 0
    72de:	80 81       	ld	r24, Z
    72e0:	82 64       	ori	r24, 0x42	; 66
    72e2:	80 83       	st	Z, r24
    72e4:	a8 95       	wdr
// 		}
// 		eeprom_read_block((void*)serverip, (const void*)0x30, 16);
		//

		// calibration
		wdt_reset();
    72e6:	36 99       	sbic	0x06, 6	; 6
		if((PINC&(1 << PINC6)) == 0)
    72e8:	6f c0       	rjmp	.+222    	; 0x73c8 <main+0x1d8>
    72ea:	0f b6       	in	r0, 0x3f	; 63
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    72ec:	f8 94       	cli
    72ee:	a8 95       	wdr
    72f0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    72f4:	88 61       	ori	r24, 0x18	; 24
    72f6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    72fa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    72fe:	0f be       	out	0x3f, r0	; 63
    7300:	8d e1       	ldi	r24, 0x1D	; 29
}

int16_t LargestDirectionValue;
static void calibration()
{
	printf_P(PSTR("Calibration started!\n"));
    7302:	94 e1       	ldi	r25, 0x14	; 20
    7304:	9f 93       	push	r25
    7306:	8f 93       	push	r24
    7308:	0e 94 ae 44 	call	0x895c	; 0x895c <printf_P>
	lcd_setXY(0x40,0x80);
    730c:	60 e8       	ldi	r22, 0x80	; 128
    730e:	80 e4       	ldi	r24, 0x40	; 64
    7310:	63 db       	rcall	.-2362   	; 0x69d8 <lcd_setXY>
	N5110_Data("Calibration");
    7312:	80 e4       	ldi	r24, 0x40	; 64
    7314:	94 e0       	ldi	r25, 0x04	; 4
    7316:	ec da       	rcall	.-2600   	; 0x68f0 <N5110_Data>
 	lcd_setXY(0x41,0x80);
    7318:	60 e8       	ldi	r22, 0x80	; 128
    731a:	81 e4       	ldi	r24, 0x41	; 65
    731c:	5d db       	rcall	.-2374   	; 0x69d8 <lcd_setXY>
 	N5110_Data("Started");
    731e:	8c e4       	ldi	r24, 0x4C	; 76
    7320:	94 e0       	ldi	r25, 0x04	; 4
    7322:	e6 da       	rcall	.-2612   	; 0x68f0 <N5110_Data>
    7324:	0f 90       	pop	r0
    7326:	0f 90       	pop	r0
    7328:	27 c0       	rjmp	.+78     	; 0x7378 <main+0x188>
    732a:	80 e0       	ldi	r24, 0x00	; 0
	while(adc_read(0)+50 >= LargestDirectionValue)
	{
		if(adc_read(0) > LargestDirectionValue)
    732c:	98 de       	rcall	.-720    	; 0x705e <adc_read>
    732e:	20 91 7c 15 	lds	r18, 0x157C	; 0x80157c <LargestDirectionValue>
    7332:	30 91 7d 15 	lds	r19, 0x157D	; 0x80157d <LargestDirectionValue+0x1>
    7336:	28 17       	cp	r18, r24
    7338:	39 07       	cpc	r19, r25
    733a:	b8 f4       	brcc	.+46     	; 0x736a <main+0x17a>
    733c:	5b 9a       	sbi	0x0b, 3	; 11
		{
			PORTD |= (1 << PIND3);
			LargestDirectionValue = adc_read(0);
    733e:	80 e0       	ldi	r24, 0x00	; 0
    7340:	8e de       	rcall	.-740    	; 0x705e <adc_read>
    7342:	90 93 7d 15 	sts	0x157D, r25	; 0x80157d <LargestDirectionValue+0x1>
    7346:	80 93 7c 15 	sts	0x157C, r24	; 0x80157c <LargestDirectionValue>
    734a:	bc 01       	movw	r22, r24
			dtostrf(LargestDirectionValue,1,2,pressChar);
    734c:	99 0f       	add	r25, r25
    734e:	88 0b       	sbc	r24, r24
    7350:	99 0b       	sbc	r25, r25
    7352:	79 d5       	rcall	.+2802   	; 0x7e46 <__floatsisf>
    7354:	07 ea       	ldi	r16, 0xA7	; 167
    7356:	15 e1       	ldi	r17, 0x15	; 21
    7358:	22 e0       	ldi	r18, 0x02	; 2
    735a:	41 e0       	ldi	r20, 0x01	; 1
    735c:	0e 94 7e 42 	call	0x84fc	; 0x84fc <dtostrf>
			lcd_setXY(0x43,0x80);
    7360:	60 e8       	ldi	r22, 0x80	; 128
    7362:	83 e4       	ldi	r24, 0x43	; 67
    7364:	39 db       	rcall	.-2446   	; 0x69d8 <lcd_setXY>
			N5110_Data(pressChar);
    7366:	c8 01       	movw	r24, r16
    7368:	c3 da       	rcall	.-2682   	; 0x68f0 <N5110_Data>
    736a:	87 ee       	ldi	r24, 0xE7	; 231
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    736c:	93 e0       	ldi	r25, 0x03	; 3
    736e:	01 97       	sbiw	r24, 0x01	; 1
    7370:	f1 f7       	brne	.-4      	; 0x736e <main+0x17e>
    7372:	00 c0       	rjmp	.+0      	; 0x7374 <main+0x184>
    7374:	00 00       	nop
    7376:	5b 98       	cbi	0x0b, 3	; 11
	printf_P(PSTR("Calibration started!\n"));
	lcd_setXY(0x40,0x80);
	N5110_Data("Calibration");
 	lcd_setXY(0x41,0x80);
 	N5110_Data("Started");
	while(adc_read(0)+50 >= LargestDirectionValue)
    7378:	80 e0       	ldi	r24, 0x00	; 0
    737a:	71 de       	rcall	.-798    	; 0x705e <adc_read>
    737c:	60 91 7c 15 	lds	r22, 0x157C	; 0x80157c <LargestDirectionValue>
    7380:	70 91 7d 15 	lds	r23, 0x157D	; 0x80157d <LargestDirectionValue+0x1>
    7384:	c2 96       	adiw	r24, 0x32	; 50
    7386:	86 17       	cp	r24, r22
    7388:	97 07       	cpc	r25, r23
    738a:	78 f6       	brcc	.-98     	; 0x732a <main+0x13a>
    738c:	07 2e       	mov	r0, r23
			N5110_Data(pressChar);
		}
		_delay_us(250);
		PORTD &= ~(1 << PIND3);
	}
	eeprom_write_float(0x00, LargestDirectionValue);
    738e:	00 0c       	add	r0, r0
    7390:	88 0b       	sbc	r24, r24
    7392:	99 0b       	sbc	r25, r25
    7394:	58 d5       	rcall	.+2736   	; 0x7e46 <__floatsisf>
    7396:	ab 01       	movw	r20, r22
    7398:	bc 01       	movw	r22, r24
    739a:	80 e0       	ldi	r24, 0x00	; 0
    739c:	90 e0       	ldi	r25, 0x00	; 0
    739e:	0e 94 18 4e 	call	0x9c30	; 0x9c30 <eeprom_write_dword>
    73a2:	86 e0       	ldi	r24, 0x06	; 6
    73a4:	94 e1       	ldi	r25, 0x14	; 20
	printf_P(PSTR("Calibration complete!\n"));
    73a6:	9f 93       	push	r25
    73a8:	8f 93       	push	r24
    73aa:	0e 94 ae 44 	call	0x895c	; 0x895c <printf_P>
    73ae:	9f e0       	ldi	r25, 0x0F	; 15
    73b0:	88 e1       	ldi	r24, 0x18	; 24
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    73b2:	0f b6       	in	r0, 0x3f	; 63
    73b4:	f8 94       	cli
    73b6:	a8 95       	wdr
    73b8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    73bc:	0f be       	out	0x3f, r0	; 63
    73be:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    73c2:	0f 90       	pop	r0
    73c4:	0f 90       	pop	r0
    73c6:	09 c0       	rjmp	.+18     	; 0x73da <main+0x1ea>
    73c8:	80 e0       	ldi	r24, 0x00	; 0
			wdt_disable();
			calibration();
			wdt_enable(WDTO_2S);
		}
		else {
			LargestDirectionValue = eeprom_read_float(0x00);
    73ca:	90 e0       	ldi	r25, 0x00	; 0
    73cc:	0e 94 f7 4d 	call	0x9bee	; 0x9bee <eeprom_read_dword>
    73d0:	03 d5       	rcall	.+2566   	; 0x7dd8 <__fixsfsi>
    73d2:	70 93 7d 15 	sts	0x157D, r23	; 0x80157d <LargestDirectionValue+0x1>
    73d6:	60 93 7c 15 	sts	0x157C, r22	; 0x80157c <LargestDirectionValue>
    73da:	80 e1       	ldi	r24, 0x10	; 16
    73dc:	90 e0       	ldi	r25, 0x00	; 0
//			wdt_disable();
// 			ipconfig();
//			wdt_enable(WDTO_2S);
// 		}
// 		//
 		timeout = eeprom_read_word((uint16_t*)0x10);
    73de:	0e 94 fc 4d 	call	0x9bf8	; 0x9bf8 <eeprom_read_word>
    73e2:	90 93 90 15 	sts	0x1590, r25	; 0x801590 <timeout+0x1>
    73e6:	80 93 8f 15 	sts	0x158F, r24	; 0x80158f <timeout>
    73ea:	a8 95       	wdr
    73ec:	5d 9a       	sbi	0x0b, 5	; 11
		wdt_reset();
    73ee:	40 e0       	ldi	r20, 0x00	; 0
		PORTD |= (1 << PIND5);
    73f0:	67 ef       	ldi	r22, 0xF7	; 247
	 	f_mount(&FatFs, "", 0);
    73f2:	74 e0       	ldi	r23, 0x04	; 4
    73f4:	80 e4       	ldi	r24, 0x40	; 64
    73f6:	93 e1       	ldi	r25, 0x13	; 19
    73f8:	0e 94 2b 28 	call	0x5056	; 0x5056 <f_mount>
    73fc:	29 9a       	sbi	0x05, 1	; 5
    73fe:	5d 98       	cbi	0x0b, 5	; 11
		PORT_CS |= (1<<SD_CS);
    7400:	a8 95       	wdr
		PORTD &= ~(1 << PIND5);
    7402:	11 9a       	sbi	0x02, 1	; 2

		wdt_reset();
    7404:	2a 9a       	sbi	0x05, 2	; 5
		PORTA |= (1 << PINA1);
    7406:	80 91 8f 15 	lds	r24, 0x158F	; 0x80158f <timeout>
		PORTB |= (1 << ETHER_CS);
		if(timeout < 3 || timeout > 1000)
    740a:	90 91 90 15 	lds	r25, 0x1590	; 0x801590 <timeout+0x1>
    740e:	03 97       	sbiw	r24, 0x03	; 3
    7410:	86 3e       	cpi	r24, 0xE6	; 230
    7412:	93 40       	sbci	r25, 0x03	; 3
    7414:	30 f0       	brcs	.+12     	; 0x7422 <main+0x232>
    7416:	83 e0       	ldi	r24, 0x03	; 3
    7418:	90 e0       	ldi	r25, 0x00	; 0
		{
			timeout = 3;
    741a:	90 93 90 15 	sts	0x1590, r25	; 0x801590 <timeout+0x1>
    741e:	80 93 8f 15 	sts	0x158F, r24	; 0x80158f <timeout>
    7422:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <Ether_init>
		}
		Ether_init();
    7426:	11 98       	cbi	0x02, 1	; 2
    7428:	87 b1       	in	r24, 0x07	; 7
		PORTA &= ~(1 << PINA1);
    742a:	87 b9       	out	0x07, r24	; 7
		
	 	DDRC |= (0 << PINC4);
    742c:	44 9a       	sbi	0x08, 4	; 8
    742e:	ed e6       	ldi	r30, 0x6D	; 109
	 	PORTC |= (1 << PINC4);
    7430:	f0 e0       	ldi	r31, 0x00	; 0
	 
		PCMSK2 |= (1 << PCINT20);
    7432:	80 81       	ld	r24, Z
    7434:	80 61       	ori	r24, 0x10	; 16
    7436:	80 83       	st	Z, r24
    7438:	e8 e6       	ldi	r30, 0x68	; 104
    743a:	f0 e0       	ldi	r31, 0x00	; 0
		PCICR |= (1 << PCIE2);
    743c:	80 81       	ld	r24, Z
    743e:	84 60       	ori	r24, 0x04	; 4
    7440:	80 83       	st	Z, r24
    7442:	78 94       	sei
	 	
	 	sei();
    7444:	5b 9a       	sbi	0x0b, 3	; 11
	}
	PORTD |= (1 << PIND3);
    7446:	0f 2e       	mov	r0, r31
static void drawEnemy()
{
	tempPos = cursorPos;
	for(int i=0; i < sizeof(invader); i++)
	{
		Level[i+tempPos] = invader[i];
    7448:	f8 e1       	ldi	r31, 0x18	; 24
    744a:	4f 2e       	mov	r4, r31
    744c:	f0 2d       	mov	r31, r0
    744e:	68 94       	set
    7450:	55 24       	eor	r5, r5
    7452:	52 f8       	bld	r5, 2
    7454:	80 91 1b 11 	lds	r24, 0x111B	; 0x80111b <gameMode>
	 	
	 	sei();
	}
	PORTD |= (1 << PIND3);
	while(1) {	
		if(gameMode == 1)
    7458:	81 30       	cpi	r24, 0x01	; 1
    745a:	09 f0       	breq	.+2      	; 0x745e <main+0x26e>
    745c:	6d c1       	rjmp	.+730    	; 0x7738 <main+0x548>
    745e:	60 e8       	ldi	r22, 0x80	; 128
		{
			lcd_setXY(0x40,0x80);
    7460:	80 e4       	ldi	r24, 0x40	; 64
    7462:	ba da       	rcall	.-2700   	; 0x69d8 <lcd_setXY>
    7464:	ec e1       	ldi	r30, 0x1C	; 28
    7466:	f1 e1       	ldi	r31, 0x11	; 17
    7468:	84 e1       	ldi	r24, 0x14	; 20
    746a:	93 e1       	ldi	r25, 0x13	; 19
    746c:	11 92       	st	Z+, r1
    746e:	e8 17       	cp	r30, r24
		
			//N5110_clear();
			for(int i=0; i < sizeof(Level); i++)
			{
				Level[i] = 0x00;
    7470:	f9 07       	cpc	r31, r25
		if(gameMode == 1)
		{
			lcd_setXY(0x40,0x80);
		
			//N5110_clear();
			for(int i=0; i < sizeof(Level); i++)
    7472:	e1 f7       	brne	.-8      	; 0x746c <main+0x27c>
    7474:	40 91 7a 15 	lds	r20, 0x157A	; 0x80157a <bullets>
}

int count = 0;
static void updateBullets()
{
	if(bullets != 0)
    7478:	50 91 7b 15 	lds	r21, 0x157B	; 0x80157b <bullets+0x1>
    747c:	41 15       	cp	r20, r1
    747e:	51 05       	cpc	r21, r1
    7480:	09 f4       	brne	.+2      	; 0x7484 <main+0x294>
    7482:	3f c3       	rjmp	.+1662   	; 0x7b02 <main+0x912>
    7484:	44 55       	subi	r20, 0x54	; 84
    7486:	51 09       	sbc	r21, r1
	{
		bullets -= 84;
    7488:	50 93 7b 15 	sts	0x157B, r21	; 0x80157b <bullets+0x1>
    748c:	40 93 7a 15 	sts	0x157A, r20	; 0x80157a <bullets>
    7490:	e3 ee       	ldi	r30, 0xE3	; 227
    7492:	f5 e1       	ldi	r31, 0x15	; 21
    7494:	25 e1       	ldi	r18, 0x15	; 21
    7496:	30 e0       	ldi	r19, 0x00	; 0
		for(int e=21; e >= 0; e--)
    7498:	92 91       	ld	r25, -Z
    749a:	82 91       	ld	r24, -Z
		{
			if(enemy[e] == -1) continue;
    749c:	8f 3f       	cpi	r24, 0xFF	; 255
    749e:	6f ef       	ldi	r22, 0xFF	; 255
    74a0:	96 07       	cpc	r25, r22
    74a2:	d1 f0       	breq	.+52     	; 0x74d8 <main+0x2e8>
    74a4:	84 17       	cp	r24, r20
    74a6:	95 07       	cpc	r25, r21
			//printf("BulletPos %d  |  EnemyPos %d\n", bullets[i], enemy[e]);
			if(bullets > enemy[e] && bullets < enemy[e]+10)
    74a8:	bc f4       	brge	.+46     	; 0x74d8 <main+0x2e8>
    74aa:	0a 96       	adiw	r24, 0x0a	; 10
    74ac:	48 17       	cp	r20, r24
    74ae:	59 07       	cpc	r21, r25
    74b0:	9c f4       	brge	.+38     	; 0x74d8 <main+0x2e8>
    74b2:	80 91 14 11 	lds	r24, 0x1114	; 0x801114 <score>
			{
				score++;
    74b6:	90 91 15 11 	lds	r25, 0x1115	; 0x801115 <score+0x1>
    74ba:	01 96       	adiw	r24, 0x01	; 1
    74bc:	90 93 15 11 	sts	0x1115, r25	; 0x801115 <score+0x1>
    74c0:	80 93 14 11 	sts	0x1114, r24	; 0x801114 <score>
    74c4:	22 0f       	add	r18, r18
    74c6:	33 1f       	adc	r19, r19
				enemy[e] = -1;
    74c8:	f9 01       	movw	r30, r18
    74ca:	e9 54       	subi	r30, 0x49	; 73
    74cc:	fa 4e       	sbci	r31, 0xEA	; 234
    74ce:	8f ef       	ldi	r24, 0xFF	; 255
    74d0:	9f ef       	ldi	r25, 0xFF	; 255
    74d2:	91 83       	std	Z+1, r25	; 0x01
    74d4:	80 83       	st	Z, r24
    74d6:	06 c0       	rjmp	.+12     	; 0x74e4 <main+0x2f4>
    74d8:	21 50       	subi	r18, 0x01	; 1
    74da:	31 09       	sbc	r19, r1
static void updateBullets()
{
	if(bullets != 0)
	{
		bullets -= 84;
		for(int e=21; e >= 0; e--)
    74dc:	e8 f6       	brcc	.-70     	; 0x7498 <main+0x2a8>
    74de:	43 30       	cpi	r20, 0x03	; 3
    74e0:	51 05       	cpc	r21, r1
				bullets = 0;
				break;
			}
		}
			
		if(bullets <= 2)
    74e2:	3c f4       	brge	.+14     	; 0x74f2 <main+0x302>
    74e4:	10 92 7b 15 	sts	0x157B, r1	; 0x80157b <bullets+0x1>
		{
			bullets = 0;
    74e8:	10 92 7a 15 	sts	0x157A, r1	; 0x80157a <bullets>
    74ec:	37 9b       	sbis	0x06, 7	; 6
    74ee:	58 c0       	rjmp	.+176    	; 0x75a0 <main+0x3b0>
			for(int i=0; i < sizeof(Level); i++)
			{
				Level[i] = 0x00;
			}
			updateBullets();
			if((PINC&(1 << PINC7)) == 0)
    74f0:	6c c0       	rjmp	.+216    	; 0x75ca <main+0x3da>
    74f2:	fa 01       	movw	r30, r20
    74f4:	e4 5e       	subi	r30, 0xE4	; 228
		if(bullets <= 2)
		{
			bullets = 0;
			return;
		}
		Level[bullets] = bullet;
    74f6:	fe 4e       	sbci	r31, 0xEE	; 238
    74f8:	80 ec       	ldi	r24, 0xC0	; 192
    74fa:	80 83       	st	Z, r24
    74fc:	02 c3       	rjmp	.+1540   	; 0x7b02 <main+0x912>
    74fe:	68 01       	movw	r12, r16
    7500:	f8 01       	movw	r30, r16
    7502:	20 81       	ld	r18, Z
	}
	if(count >= 5)
	{
		for(int i=0; i < 5; i++)
		{
			if(invaderBullet[i] != 0)
    7504:	31 81       	ldd	r19, Z+1	; 0x01
    7506:	21 15       	cp	r18, r1
    7508:	31 05       	cpc	r19, r1
    750a:	01 f1       	breq	.+64     	; 0x754c <main+0x35c>
    750c:	2c 5a       	subi	r18, 0xAC	; 172
    750e:	3f 4f       	sbci	r19, 0xFF	; 255
			{
				invaderBullet[i] += 84;
    7510:	31 83       	std	Z+1, r19	; 0x01
    7512:	20 83       	st	Z, r18
    7514:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <playerPos>
				if(invaderBullet[i] > 408 + (4 * playerPos) && invaderBullet[i] < 408 + (4 * playerPos) + 10)
    7518:	08 2e       	mov	r0, r24
    751a:	00 0c       	add	r0, r0
    751c:	99 0b       	sbc	r25, r25
    751e:	8a 59       	subi	r24, 0x9A	; 154
    7520:	9f 4f       	sbci	r25, 0xFF	; 255
    7522:	88 0f       	add	r24, r24
    7524:	99 1f       	adc	r25, r25
    7526:	88 0f       	add	r24, r24
    7528:	99 1f       	adc	r25, r25
    752a:	82 17       	cp	r24, r18
    752c:	93 07       	cpc	r25, r19
    752e:	2c f4       	brge	.+10     	; 0x753a <main+0x34a>
    7530:	0a 96       	adiw	r24, 0x0a	; 10
    7532:	28 17       	cp	r18, r24
    7534:	39 07       	cpc	r19, r25
    7536:	0c f4       	brge	.+2      	; 0x753a <main+0x34a>
    7538:	3d dd       	rcall	.-1414   	; 0x6fb4 <gameover>
				{
					gameover();
    753a:	f6 01       	movw	r30, r12
    753c:	80 81       	ld	r24, Z
				}
				if(invaderBullet[i] >= 504)
    753e:	91 81       	ldd	r25, Z+1	; 0x01
    7540:	88 3f       	cpi	r24, 0xF8	; 248
    7542:	91 40       	sbci	r25, 0x01	; 1
    7544:	1c f0       	brlt	.+6      	; 0x754c <main+0x35c>
    7546:	f6 01       	movw	r30, r12
    7548:	11 82       	std	Z+1, r1	; 0x01
				{
					invaderBullet[i] = 0;
    754a:	10 82       	st	Z, r1
    754c:	0e 5f       	subi	r16, 0xFE	; 254
    754e:	1f 4f       	sbci	r17, 0xFF	; 255
    7550:	0e 15       	cp	r16, r14
    7552:	1f 05       	cpc	r17, r15
		Level[bullets] = bullet;
			
	}
	if(count >= 5)
	{
		for(int i=0; i < 5; i++)
    7554:	a1 f6       	brne	.-88     	; 0x74fe <main+0x30e>
    7556:	10 92 11 11 	sts	0x1111, r1	; 0x801111 <count+0x1>
					invaderBullet[i] = 0;
					continue;
				}
			}
		}
		count = 0;
    755a:	10 92 10 11 	sts	0x1110, r1	; 0x801110 <count>
    755e:	ed e9       	ldi	r30, 0x9D	; 157
    7560:	f5 e1       	ldi	r31, 0x15	; 21
    7562:	27 ea       	ldi	r18, 0xA7	; 167
    7564:	35 e1       	ldi	r19, 0x15	; 21
    7566:	40 ec       	ldi	r20, 0xC0	; 192
    7568:	81 91       	ld	r24, Z+
	}
	for(int i=0; i < 5; i++)
	{
		if(invaderBullet[i] != 0)
		{
			Level[invaderBullet[i]] = bullet;
    756a:	91 91       	ld	r25, Z+
		}
		count = 0;
	}
	for(int i=0; i < 5; i++)
	{
		if(invaderBullet[i] != 0)
    756c:	00 97       	sbiw	r24, 0x00	; 0
    756e:	21 f0       	breq	.+8      	; 0x7578 <main+0x388>
    7570:	dc 01       	movw	r26, r24
    7572:	a4 5e       	subi	r26, 0xE4	; 228
		{
			Level[invaderBullet[i]] = bullet;
    7574:	be 4e       	sbci	r27, 0xEE	; 238
    7576:	4c 93       	st	X, r20
    7578:	e2 17       	cp	r30, r18
    757a:	f3 07       	cpc	r31, r19
				}
			}
		}
		count = 0;
	}
	for(int i=0; i < 5; i++)
    757c:	a9 f7       	brne	.-22     	; 0x7568 <main+0x378>
    757e:	80 91 10 11 	lds	r24, 0x1110	; 0x801110 <count>
		if(invaderBullet[i] != 0)
		{
			Level[invaderBullet[i]] = bullet;
		}
	}
	count++;
    7582:	90 91 11 11 	lds	r25, 0x1111	; 0x801111 <count+0x1>
    7586:	01 96       	adiw	r24, 0x01	; 1
    7588:	90 93 11 11 	sts	0x1111, r25	; 0x801111 <count+0x1>
    758c:	80 93 10 11 	sts	0x1110, r24	; 0x801110 <count>
    7590:	37 99       	sbic	0x06, 7	; 6
    7592:	1b c0       	rjmp	.+54     	; 0x75ca <main+0x3da>
			for(int i=0; i < sizeof(Level); i++)
			{
				Level[i] = 0x00;
			}
			updateBullets();
			if((PINC&(1 << PINC7)) == 0)
    7594:	80 91 7a 15 	lds	r24, 0x157A	; 0x80157a <bullets>
	}
}

static void shoot()
{
	if(bullets == 0)
    7598:	90 91 7b 15 	lds	r25, 0x157B	; 0x80157b <bullets+0x1>
    759c:	89 2b       	or	r24, r25
    759e:	a9 f4       	brne	.+42     	; 0x75ca <main+0x3da>
    75a0:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <playerPos>
	{
		cursorPos = 408 + (4 * playerPos) + 5;
    75a4:	f4 e0       	ldi	r31, 0x04	; 4
    75a6:	8f 02       	muls	r24, r31
    75a8:	c0 01       	movw	r24, r0
    75aa:	11 24       	eor	r1, r1
    75ac:	83 56       	subi	r24, 0x63	; 99
    75ae:	9e 4f       	sbci	r25, 0xFE	; 254
    75b0:	90 93 19 11 	sts	0x1119, r25	; 0x801119 <cursorPos+0x1>
    75b4:	80 93 18 11 	sts	0x1118, r24	; 0x801118 <cursorPos>
    75b8:	fc 01       	movw	r30, r24
    75ba:	e4 5e       	subi	r30, 0xE4	; 228
		Level[cursorPos] = bullet;
    75bc:	fe 4e       	sbci	r31, 0xEE	; 238
    75be:	20 ec       	ldi	r18, 0xC0	; 192
    75c0:	20 83       	st	Z, r18
    75c2:	90 93 7b 15 	sts	0x157B, r25	; 0x80157b <bullets+0x1>
		bullets = cursorPos;
    75c6:	80 93 7a 15 	sts	0x157A, r24	; 0x80157a <bullets>
    75ca:	36 99       	sbic	0x06, 6	; 6
    75cc:	13 c0       	rjmp	.+38     	; 0x75f4 <main+0x404>
			updateBullets();
			if((PINC&(1 << PINC7)) == 0)
			{
				shoot();
			}
			if((PINC&(1 << PINC6)) == 0)
    75ce:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <playerPos>
			{
				if(408 + (4 * playerPos) < 492) playerPos++;	
    75d2:	82 2f       	mov	r24, r18
    75d4:	02 2e       	mov	r0, r18
    75d6:	00 0c       	add	r0, r0
    75d8:	99 0b       	sbc	r25, r25
    75da:	8a 59       	subi	r24, 0x9A	; 154
    75dc:	9f 4f       	sbci	r25, 0xFF	; 255
    75de:	88 0f       	add	r24, r24
    75e0:	99 1f       	adc	r25, r25
    75e2:	88 0f       	add	r24, r24
    75e4:	99 1f       	adc	r25, r25
    75e6:	8c 3e       	cpi	r24, 0xEC	; 236
    75e8:	91 40       	sbci	r25, 0x01	; 1
    75ea:	c4 f4       	brge	.+48     	; 0x761c <main+0x42c>
    75ec:	2f 5f       	subi	r18, 0xFF	; 255
    75ee:	20 93 35 01 	sts	0x0135, r18	; 0x800135 <playerPos>
    75f2:	14 c0       	rjmp	.+40     	; 0x761c <main+0x42c>
    75f4:	34 99       	sbic	0x06, 4	; 6
    75f6:	12 c0       	rjmp	.+36     	; 0x761c <main+0x42c>
			}
			else if((PINC&(1 << PINC4)) == 0)
    75f8:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <playerPos>
			{
				if(408 + (4 * playerPos) > 420) playerPos--;
    75fc:	82 2f       	mov	r24, r18
    75fe:	02 2e       	mov	r0, r18
    7600:	00 0c       	add	r0, r0
    7602:	99 0b       	sbc	r25, r25
    7604:	8a 59       	subi	r24, 0x9A	; 154
    7606:	9f 4f       	sbci	r25, 0xFF	; 255
    7608:	88 0f       	add	r24, r24
    760a:	99 1f       	adc	r25, r25
    760c:	88 0f       	add	r24, r24
    760e:	99 1f       	adc	r25, r25
    7610:	85 3a       	cpi	r24, 0xA5	; 165
    7612:	91 40       	sbci	r25, 0x01	; 1
    7614:	1c f0       	brlt	.+6      	; 0x761c <main+0x42c>
    7616:	21 50       	subi	r18, 0x01	; 1
    7618:	20 93 35 01 	sts	0x0135, r18	; 0x800135 <playerPos>
    761c:	40 91 3f 05 	lds	r20, 0x053F	; 0x80053f <sec>
			}
			int timer = 10 - (score / 10);
			if(sec >= timer)
    7620:	20 91 14 11 	lds	r18, 0x1114	; 0x801114 <score>
    7624:	30 91 15 11 	lds	r19, 0x1115	; 0x801115 <score+0x1>
    7628:	ad ec       	ldi	r26, 0xCD	; 205
    762a:	bc ec       	ldi	r27, 0xCC	; 204
    762c:	be d5       	rcall	.+2940   	; 0x81aa <__umulhisi3>
    762e:	96 95       	lsr	r25
    7630:	87 95       	ror	r24
    7632:	96 95       	lsr	r25
    7634:	87 95       	ror	r24
    7636:	96 95       	lsr	r25
    7638:	87 95       	ror	r24
    763a:	2a e0       	ldi	r18, 0x0A	; 10
    763c:	30 e0       	ldi	r19, 0x00	; 0
    763e:	28 1b       	sub	r18, r24
    7640:	39 0b       	sbc	r19, r25
    7642:	84 2f       	mov	r24, r20
    7644:	90 e0       	ldi	r25, 0x00	; 0
    7646:	82 17       	cp	r24, r18
    7648:	93 07       	cpc	r25, r19
    764a:	3c f0       	brlt	.+14     	; 0x765a <main+0x46a>
    764c:	10 92 3f 05 	sts	0x053F, r1	; 0x80053f <sec>
			{
				sec = 0;
    7650:	80 91 1a 11 	lds	r24, 0x111A	; 0x80111a <enemyPos>
				enemyPos++;
    7654:	8f 5f       	subi	r24, 0xFF	; 255
    7656:	80 93 1a 11 	sts	0x111A, r24	; 0x80111a <enemyPos>
    765a:	80 91 1a 11 	lds	r24, 0x111A	; 0x80111a <enemyPos>
			}
			cursorPos = enemyPos * 84;
    765e:	e4 e5       	ldi	r30, 0x54	; 84
    7660:	8e 02       	muls	r24, r30
    7662:	c0 01       	movw	r24, r0
    7664:	11 24       	eor	r1, r1
    7666:	90 93 19 11 	sts	0x1119, r25	; 0x801119 <cursorPos+0x1>
    766a:	80 93 18 11 	sts	0x1118, r24	; 0x801118 <cursorPos>
    766e:	07 eb       	ldi	r16, 0xB7	; 183
    7670:	15 e1       	ldi	r17, 0x15	; 21
    7672:	0f 2e       	mov	r0, r31
    7674:	f3 ed       	ldi	r31, 0xD3	; 211
    7676:	8f 2e       	mov	r8, r31
    7678:	f5 e1       	ldi	r31, 0x15	; 21
    767a:	9f 2e       	mov	r9, r31
    767c:	f0 2d       	mov	r31, r0
    767e:	c1 2c       	mov	r12, r1
    7680:	d1 2c       	mov	r13, r1
			int full = 0;
    7682:	0f 2e       	mov	r0, r31
    7684:	fd e3       	ldi	r31, 0x3D	; 61
static void drawEnemy()
{
	tempPos = cursorPos;
	for(int i=0; i < sizeof(invader); i++)
	{
		Level[i+tempPos] = invader[i];
    7686:	3f 2e       	mov	r3, r31
    7688:	f0 2d       	mov	r31, r0
    768a:	0f 2e       	mov	r0, r31
    768c:	fa e5       	ldi	r31, 0x5A	; 90
    768e:	6f 2e       	mov	r6, r31
    7690:	f0 2d       	mov	r31, r0
    7692:	0f 2e       	mov	r0, r31
    7694:	fe e1       	ldi	r31, 0x1E	; 30
    7696:	7f 2e       	mov	r7, r31
    7698:	f0 2d       	mov	r31, r0
    769a:	40 c0       	rjmp	.+128    	; 0x771c <main+0x52c>
    769c:	78 01       	movw	r14, r16
    769e:	f8 01       	movw	r30, r16
    76a0:	80 81       	ld	r24, Z
			int full = 0;
			for(int r=0; r < 2; r++)
			{
				for(int i=0; i < 7; i++)
				{
					if(enemy[(r*7)+i] == -1)
    76a2:	91 81       	ldd	r25, Z+1	; 0x01
    76a4:	01 96       	adiw	r24, 0x01	; 1
    76a6:	51 f4       	brne	.+20     	; 0x76bc <main+0x4cc>
    76a8:	80 91 18 11 	lds	r24, 0x1118	; 0x801118 <cursorPos>
					{
						cursorPos += 12;
    76ac:	90 91 19 11 	lds	r25, 0x1119	; 0x801119 <cursorPos+0x1>
    76b0:	0c 96       	adiw	r24, 0x0c	; 12
    76b2:	90 93 19 11 	sts	0x1119, r25	; 0x801119 <cursorPos+0x1>
    76b6:	80 93 18 11 	sts	0x1118, r24	; 0x801118 <cursorPos>
    76ba:	27 c0       	rjmp	.+78     	; 0x770a <main+0x51a>
						continue;
    76bc:	80 91 18 11 	lds	r24, 0x1118	; 0x801118 <cursorPos>
					}
					if(cursorPos > 408)
    76c0:	90 91 19 11 	lds	r25, 0x1119	; 0x801119 <cursorPos+0x1>
    76c4:	89 39       	cpi	r24, 0x99	; 153
    76c6:	91 40       	sbci	r25, 0x01	; 1
    76c8:	0c f4       	brge	.+2      	; 0x76cc <main+0x4dc>
    76ca:	2b c2       	rjmp	.+1110   	; 0x7b22 <main+0x932>
    76cc:	73 dc       	rcall	.-1818   	; 0x6fb4 <gameover>
					{
						gameover();
    76ce:	29 c2       	rjmp	.+1106   	; 0x7b22 <main+0x932>
    76d0:	21 91       	ld	r18, Z+
    76d2:	31 91       	ld	r19, Z+

static void invaderShoot()
{
	for(int i=0; i < 5; i++)
	{
		if(invaderBullet[i] == 0)
    76d4:	23 2b       	or	r18, r19
    76d6:	a9 f4       	brne	.+42     	; 0x7702 <main+0x512>
    76d8:	02 c0       	rjmp	.+4      	; 0x76de <main+0x4ee>
    76da:	80 e0       	ldi	r24, 0x00	; 0
    76dc:	90 e0       	ldi	r25, 0x00	; 0
    76de:	20 91 18 11 	lds	r18, 0x1118	; 0x801118 <cursorPos>
		{
			cursorPos -= 7;
    76e2:	30 91 19 11 	lds	r19, 0x1119	; 0x801119 <cursorPos+0x1>
    76e6:	27 50       	subi	r18, 0x07	; 7
    76e8:	31 09       	sbc	r19, r1
    76ea:	f9 01       	movw	r30, r18
    76ec:	e4 5e       	subi	r30, 0xE4	; 228
			Level[cursorPos] = bullet;
    76ee:	fe 4e       	sbci	r31, 0xEE	; 238
    76f0:	20 82       	st	Z, r2
    76f2:	88 0f       	add	r24, r24
    76f4:	99 1f       	adc	r25, r25
			invaderBullet[i] = cursorPos;
    76f6:	fc 01       	movw	r30, r24
    76f8:	e3 56       	subi	r30, 0x63	; 99
    76fa:	fa 4e       	sbci	r31, 0xEA	; 234
    76fc:	31 83       	std	Z+1, r19	; 0x01
    76fe:	20 83       	st	Z, r18
    7700:	04 c0       	rjmp	.+8      	; 0x770a <main+0x51a>
    7702:	01 96       	adiw	r24, 0x01	; 1
    7704:	85 30       	cpi	r24, 0x05	; 5
	cursorPos += 3;
}

static void invaderShoot()
{
	for(int i=0; i < 5; i++)
    7706:	91 05       	cpc	r25, r1
    7708:	19 f7       	brne	.-58     	; 0x76d0 <main+0x4e0>
    770a:	0e 5f       	subi	r16, 0xFE	; 254
    770c:	1f 4f       	sbci	r17, 0xFF	; 255
    770e:	0a 15       	cp	r16, r10
			}
			cursorPos = enemyPos * 84;
			int full = 0;
			for(int r=0; r < 2; r++)
			{
				for(int i=0; i < 7; i++)
    7710:	1b 05       	cpc	r17, r11
    7712:	21 f6       	brne	.-120    	; 0x769c <main+0x4ac>
    7714:	85 01       	movw	r16, r10
				sec = 0;
				enemyPos++;
			}
			cursorPos = enemyPos * 84;
			int full = 0;
			for(int r=0; r < 2; r++)
    7716:	8a 14       	cp	r8, r10
    7718:	9b 04       	cpc	r9, r11
    771a:	49 f0       	breq	.+18     	; 0x772e <main+0x53e>
    771c:	58 01       	movw	r10, r16
    771e:	3e e0       	ldi	r19, 0x0E	; 14
    7720:	a3 0e       	add	r10, r19
    7722:	b1 1c       	adc	r11, r1
	for(int i=0; i < 5; i++)
	{
		if(invaderBullet[i] == 0)
		{
			cursorPos -= 7;
			Level[cursorPos] = bullet;
    7724:	0f 2e       	mov	r0, r31
    7726:	f0 ec       	ldi	r31, 0xC0	; 192
    7728:	2f 2e       	mov	r2, r31
    772a:	f0 2d       	mov	r31, r0
    772c:	b7 cf       	rjmp	.-146    	; 0x769c <main+0x4ac>
					{
						invaderShoot();
					}
				}
			}
			if(full == 0)
    772e:	cd 28       	or	r12, r13
    7730:	09 f0       	breq	.+2      	; 0x7734 <main+0x544>
    7732:	31 c2       	rjmp	.+1122   	; 0x7b96 <main+0x9a6>
			{
				resetEnemy();
    7734:	29 dc       	rcall	.-1966   	; 0x6f88 <resetEnemy>
    7736:	2f c2       	rjmp	.+1118   	; 0x7b96 <main+0x9a6>
    7738:	a8 95       	wdr
			_delay_ms(100);
		}
		
		if(gameMode == 1) continue; // Don't take measurements if in game mode.
		
		wdt_reset();
    773a:	82 e0       	ldi	r24, 0x02	; 2
		float wind_speed;
		magnetVal = adc_read(2);
    773c:	90 dc       	rcall	.-1760   	; 0x705e <adc_read>
    773e:	90 93 79 15 	sts	0x1579, r25	; 0x801579 <magnetVal+0x1>
    7742:	80 93 78 15 	sts	0x1578, r24	; 0x801578 <magnetVal>
    7746:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <halleff>
		if(magnetVal >= halleff)
    774a:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <halleff+0x1>
    774e:	82 17       	cp	r24, r18
    7750:	93 07       	cpc	r25, r19
    7752:	88 f0       	brcs	.+34     	; 0x7776 <main+0x586>
    7754:	8f ef       	ldi	r24, 0xFF	; 255
    7756:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
		{
			OCR2A = 255;
    775a:	e0 eb       	ldi	r30, 0xB0	; 176
    775c:	f0 e0       	ldi	r31, 0x00	; 0
			TCCR2A |= (1 << COM2A1);
    775e:	80 81       	ld	r24, Z
    7760:	80 68       	ori	r24, 0x80	; 128
    7762:	80 83       	st	Z, r24
    7764:	80 81       	ld	r24, Z
    7766:	83 60       	ori	r24, 0x03	; 3
			// set none-inverting mode

			TCCR2A |= (1 << WGM21) | (1 << WGM20);
    7768:	80 83       	st	Z, r24
    776a:	e1 eb       	ldi	r30, 0xB1	; 177
    776c:	f0 e0       	ldi	r31, 0x00	; 0
			// set fast PWM Mode

			TCCR2B |= (1 << CS21);
    776e:	80 81       	ld	r24, Z
    7770:	82 60       	ori	r24, 0x02	; 2
    7772:	80 83       	st	Z, r24
    7774:	11 c0       	rjmp	.+34     	; 0x7798 <main+0x5a8>
    7776:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <brightness>
			// set prescaler to 8 and starts PWM
		}
		else
		{
			OCR2A = brightness;
    777a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    777e:	e0 eb       	ldi	r30, 0xB0	; 176
    7780:	f0 e0       	ldi	r31, 0x00	; 0
			TCCR2A |= (1 << COM2A1);
    7782:	80 81       	ld	r24, Z
    7784:	80 68       	ori	r24, 0x80	; 128
    7786:	80 83       	st	Z, r24
    7788:	80 81       	ld	r24, Z
			// set none-inverting mode

			TCCR2A |= (1 << WGM21) | (1 << WGM20);
    778a:	83 60       	ori	r24, 0x03	; 3
    778c:	80 83       	st	Z, r24
			// set fast PWM Mode

			TCCR2B |= (1 << CS21);
    778e:	e1 eb       	ldi	r30, 0xB1	; 177
    7790:	f0 e0       	ldi	r31, 0x00	; 0
    7792:	80 81       	ld	r24, Z
    7794:	82 60       	ori	r24, 0x02	; 2
			// set prescaler to 8 and starts PWM
		}
		//OCR2A = 0x00;
		wdt_reset();
    7796:	80 83       	st	Z, r24
		if(sendingPacket == 1)
    7798:	a8 95       	wdr
    779a:	80 91 3d 05 	lds	r24, 0x053D	; 0x80053d <sendingPacket>
    779e:	81 30       	cpi	r24, 0x01	; 1
		{
			PORTA |= (1 << PINA1);
    77a0:	31 f4       	brne	.+12     	; 0x77ae <main+0x5be>
			Ether_SendPacket(packetStr);
    77a2:	11 9a       	sbi	0x02, 1	; 2
    77a4:	8b e0       	ldi	r24, 0x0B	; 11
    77a6:	96 e1       	ldi	r25, 0x16	; 22
			continue;
    77a8:	0e 94 27 1c 	call	0x384e	; 0x384e <Ether_SendPacket>
		}
		PORTA &= ~(1<<PINA1);
		PORTD |= (1 << PIND4);
    77ac:	53 ce       	rjmp	.-858    	; 0x7454 <main+0x264>
// 		if(flag < 2 && sec < 2) {
// 			continue;
// 		}
// 		runOnce = 0;
		//wind_speed = wind_measureFrequency();
		wind_speed = 0.765 * wind_measureFrequency() + 0.35;
    77ae:	11 98       	cbi	0x02, 1	; 2
    77b0:	5c 9a       	sbi	0x0b, 4	; 11
    77b2:	90 db       	rcall	.-2272   	; 0x6ed4 <wind_measureFrequency>
    77b4:	2a e0       	ldi	r18, 0x0A	; 10
    77b6:	37 ed       	ldi	r19, 0xD7	; 215
    77b8:	43 e4       	ldi	r20, 0x43	; 67
    77ba:	5f e3       	ldi	r21, 0x3F	; 63
    77bc:	46 d4       	rcall	.+2188   	; 0x804a <__mulsf3>
    77be:	23 e3       	ldi	r18, 0x33	; 51
    77c0:	33 e3       	ldi	r19, 0x33	; 51
    77c2:	43 eb       	ldi	r20, 0xB3	; 179
    77c4:	5e e3       	ldi	r21, 0x3E	; 62
    77c6:	38 d2       	rcall	.+1136   	; 0x7c38 <__addsf3>
    77c8:	69 8b       	std	Y+17, r22	; 0x11
    77ca:	7a 8b       	std	Y+18, r23	; 0x12
    77cc:	8b 8b       	std	Y+19, r24	; 0x13
    77ce:	9c 8b       	std	Y+20, r25	; 0x14
		if(wind_speed < 0 || wind_speed > 1000)
    77d0:	20 e0       	ldi	r18, 0x00	; 0
    77d2:	30 e0       	ldi	r19, 0x00	; 0
    77d4:	a9 01       	movw	r20, r18
    77d6:	94 d2       	rcall	.+1320   	; 0x7d00 <__cmpsf2>
    77d8:	88 23       	and	r24, r24
    77da:	84 f0       	brlt	.+32     	; 0x77fc <main+0x60c>
    77dc:	20 e0       	ldi	r18, 0x00	; 0
    77de:	30 e0       	ldi	r19, 0x00	; 0
    77e0:	4a e7       	ldi	r20, 0x7A	; 122
    77e2:	54 e4       	ldi	r21, 0x44	; 68
    77e4:	69 89       	ldd	r22, Y+17	; 0x11
    77e6:	7a 89       	ldd	r23, Y+18	; 0x12
    77e8:	8b 89       	ldd	r24, Y+19	; 0x13
    77ea:	9c 89       	ldd	r25, Y+20	; 0x14
    77ec:	2a d4       	rcall	.+2132   	; 0x8042 <__gesf2>
    77ee:	18 16       	cp	r1, r24
			wind_speed = 0;
    77f0:	4c f4       	brge	.+18     	; 0x7804 <main+0x614>
    77f2:	19 8a       	std	Y+17, r1	; 0x11
    77f4:	1a 8a       	std	Y+18, r1	; 0x12
    77f6:	1b 8a       	std	Y+19, r1	; 0x13
    77f8:	1c 8a       	std	Y+20, r1	; 0x14
    77fa:	04 c0       	rjmp	.+8      	; 0x7804 <main+0x614>
    77fc:	19 8a       	std	Y+17, r1	; 0x11
		
 		RTC_GetDateTime(&rtc);
    77fe:	1a 8a       	std	Y+18, r1	; 0x12
    7800:	1b 8a       	std	Y+19, r1	; 0x13
    7802:	1c 8a       	std	Y+20, r1	; 0x14

		wdt_reset();
    7804:	8e e7       	ldi	r24, 0x7E	; 126
		
		float angle = ((float)adc_read(0) / (float)LargestDirectionValue) * 360.0;
    7806:	95 e1       	ldi	r25, 0x15	; 21
    7808:	87 da       	rcall	.-2802   	; 0x6d18 <RTC_GetDateTime>
    780a:	a8 95       	wdr
    780c:	80 e0       	ldi	r24, 0x00	; 0
    780e:	27 dc       	rcall	.-1970   	; 0x705e <adc_read>
    7810:	bc 01       	movw	r22, r24
    7812:	80 e0       	ldi	r24, 0x00	; 0
    7814:	90 e0       	ldi	r25, 0x00	; 0
    7816:	15 d3       	rcall	.+1578   	; 0x7e42 <__floatunsisf>
    7818:	6b 01       	movw	r12, r22
    781a:	7c 01       	movw	r14, r24
    781c:	60 91 7c 15 	lds	r22, 0x157C	; 0x80157c <LargestDirectionValue>
    7820:	70 91 7d 15 	lds	r23, 0x157D	; 0x80157d <LargestDirectionValue+0x1>
    7824:	07 2e       	mov	r0, r23
    7826:	00 0c       	add	r0, r0
    7828:	88 0b       	sbc	r24, r24
    782a:	99 0b       	sbc	r25, r25
    782c:	0c d3       	rcall	.+1560   	; 0x7e46 <__floatsisf>
    782e:	9b 01       	movw	r18, r22
    7830:	ac 01       	movw	r20, r24
    7832:	c7 01       	movw	r24, r14
    7834:	b6 01       	movw	r22, r12
    7836:	68 d2       	rcall	.+1232   	; 0x7d08 <__divsf3>
    7838:	20 e0       	ldi	r18, 0x00	; 0
    783a:	30 e0       	ldi	r19, 0x00	; 0
    783c:	44 eb       	ldi	r20, 0xB4	; 180
    783e:	53 e4       	ldi	r21, 0x43	; 67
    7840:	04 d4       	rcall	.+2056   	; 0x804a <__mulsf3>
    7842:	4b 01       	movw	r8, r22
    7844:	5c 01       	movw	r10, r24
		if(angle > 360)
    7846:	20 e0       	ldi	r18, 0x00	; 0
    7848:	30 e0       	ldi	r19, 0x00	; 0
    784a:	44 eb       	ldi	r20, 0xB4	; 180
    784c:	53 e4       	ldi	r21, 0x43	; 67
    784e:	f9 d3       	rcall	.+2034   	; 0x8042 <__gesf2>
    7850:	18 16       	cp	r1, r24
    7852:	44 f4       	brge	.+16     	; 0x7864 <main+0x674>
			angle = 360;
    7854:	0f 2e       	mov	r0, r31
    7856:	81 2c       	mov	r8, r1
    7858:	91 2c       	mov	r9, r1
    785a:	f4 eb       	ldi	r31, 0xB4	; 180
    785c:	af 2e       	mov	r10, r31
    785e:	f3 e4       	ldi	r31, 0x43	; 67
    7860:	bf 2e       	mov	r11, r31
    7862:	f0 2d       	mov	r31, r0
		
		hih8120_measure();
    7864:	0e 94 cd 33 	call	0x679a	; 0x679a <hih8120_measure>
		dtostrf(hih8120_humidity,1,2,humidChar);
    7868:	60 91 31 01 	lds	r22, 0x0131	; 0x800131 <hih8120_humidity>
    786c:	70 91 32 01 	lds	r23, 0x0132	; 0x800132 <hih8120_humidity+0x1>
    7870:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <hih8120_humidity+0x2>
    7874:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <hih8120_humidity+0x3>
    7878:	05 e8       	ldi	r16, 0x85	; 133
    787a:	15 e1       	ldi	r17, 0x15	; 21
    787c:	22 e0       	ldi	r18, 0x02	; 2
    787e:	41 e0       	ldi	r20, 0x01	; 1
    7880:	3d d6       	rcall	.+3194   	; 0x84fc <dtostrf>
		dtostrf(hih8120_temperature_C,1,2,tempChar);
    7882:	60 91 2d 01 	lds	r22, 0x012D	; 0x80012d <hih8120_temperature_C>
    7886:	70 91 2e 01 	lds	r23, 0x012E	; 0x80012e <hih8120_temperature_C+0x1>
    788a:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <hih8120_temperature_C+0x2>
    788e:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <hih8120_temperature_C+0x3>
    7892:	01 e9       	ldi	r16, 0x91	; 145
    7894:	15 e1       	ldi	r17, 0x15	; 21
    7896:	22 e0       	ldi	r18, 0x02	; 2
    7898:	41 e0       	ldi	r20, 0x01	; 1
    789a:	30 d6       	rcall	.+3168   	; 0x84fc <dtostrf>
    789c:	85 e8       	ldi	r24, 0x85	; 133
		
		printf("%s\n", humidChar);
    789e:	95 e1       	ldi	r25, 0x15	; 21
    78a0:	0e 94 d5 44 	call	0x89aa	; 0x89aa <puts>
    78a4:	68 01       	movw	r12, r16
		printf("%s C\n", tempChar);
    78a6:	df 92       	push	r13
    78a8:	0f 93       	push	r16
    78aa:	84 e5       	ldi	r24, 0x54	; 84
    78ac:	94 e0       	ldi	r25, 0x04	; 4
    78ae:	9f 93       	push	r25
    78b0:	8f 93       	push	r24
    78b2:	0e 94 9b 44 	call	0x8936	; 0x8936 <printf>
 		dtostrf(bmp280_readPressure(),1,2,pressChar);
    78b6:	0e 94 be 0a 	call	0x157c	; 0x157c <bmp280_readPressure>
    78ba:	07 ea       	ldi	r16, 0xA7	; 167
    78bc:	15 e1       	ldi	r17, 0x15	; 21
    78be:	22 e0       	ldi	r18, 0x02	; 2
    78c0:	41 e0       	ldi	r20, 0x01	; 1
    78c2:	1c d6       	rcall	.+3128   	; 0x84fc <dtostrf>
		printf("%s Pa\n", pressChar);
    78c4:	78 01       	movw	r14, r16
    78c6:	ff 92       	push	r15
    78c8:	0f 93       	push	r16
    78ca:	8a e5       	ldi	r24, 0x5A	; 90
    78cc:	94 e0       	ldi	r25, 0x04	; 4
    78ce:	9f 93       	push	r25
    78d0:	8f 93       	push	r24
    78d2:	0e 94 9b 44 	call	0x8936	; 0x8936 <printf>
		 
		
		printf("%s Pa", pressChar);
    78d6:	ff 92       	push	r15
    78d8:	0f 93       	push	r16
    78da:	81 e6       	ldi	r24, 0x61	; 97
    78dc:	94 e0       	ldi	r25, 0x04	; 4
    78de:	9f 93       	push	r25
    78e0:	8f 93       	push	r24
    78e2:	0e 94 9b 44 	call	0x8936	; 0x8936 <printf>
		dtostrf(angle,1,2,anglChar);
    78e6:	0e e6       	ldi	r16, 0x6E	; 110
    78e8:	15 e1       	ldi	r17, 0x15	; 21
    78ea:	22 e0       	ldi	r18, 0x02	; 2
    78ec:	41 e0       	ldi	r20, 0x01	; 1
    78ee:	c5 01       	movw	r24, r10
    78f0:	b4 01       	movw	r22, r8
    78f2:	04 d6       	rcall	.+3080   	; 0x84fc <dtostrf>
		dtostrf(wind_speed,1,2,speedChar);
    78f4:	01 e0       	ldi	r16, 0x01	; 1
    78f6:	16 e1       	ldi	r17, 0x16	; 22
    78f8:	22 e0       	ldi	r18, 0x02	; 2
    78fa:	41 e0       	ldi	r20, 0x01	; 1
    78fc:	69 89       	ldd	r22, Y+17	; 0x11
    78fe:	7a 89       	ldd	r23, Y+18	; 0x12
    7900:	8b 89       	ldd	r24, Y+19	; 0x13
    7902:	9c 89       	ldd	r25, Y+20	; 0x14
    7904:	fb d5       	rcall	.+3062   	; 0x84fc <dtostrf>
    7906:	c8 01       	movw	r24, r16
		sprintf(packetStr, "%s C , %s %% , %s Pa , %s , %s m/s", tempChar, humidChar, pressChar, anglChar, speedChar);
    7908:	9f 93       	push	r25
    790a:	0f 93       	push	r16
    790c:	8e e6       	ldi	r24, 0x6E	; 110
    790e:	95 e1       	ldi	r25, 0x15	; 21
    7910:	9f 93       	push	r25
    7912:	8f 93       	push	r24
    7914:	ff 92       	push	r15
    7916:	ef 92       	push	r14
    7918:	85 e8       	ldi	r24, 0x85	; 133
    791a:	95 e1       	ldi	r25, 0x15	; 21
    791c:	9f 93       	push	r25
    791e:	8f 93       	push	r24
    7920:	df 92       	push	r13
    7922:	cf 92       	push	r12
    7924:	87 e6       	ldi	r24, 0x67	; 103
    7926:	94 e0       	ldi	r25, 0x04	; 4
    7928:	9f 93       	push	r25
    792a:	8f 93       	push	r24
    792c:	8b e0       	ldi	r24, 0x0B	; 11
    792e:	96 e1       	ldi	r25, 0x16	; 22
    7930:	9f 93       	push	r25
    7932:	8f 93       	push	r24
    7934:	0e 94 72 45 	call	0x8ae4	; 0x8ae4 <sprintf>
    7938:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <page>
		printPage(page);
    793c:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <page+0x1>
    7940:	85 d8       	rcall	.-3830   	; 0x6a4c <printPage>
    7942:	a8 95       	wdr
    7944:	5c 98       	cbi	0x0b, 4	; 11
		
		wdt_reset();
    7946:	5d 9a       	sbi	0x0b, 5	; 11
		
		PORTD &= ~(1<<PIND4);
    7948:	ee e7       	ldi	r30, 0x7E	; 126
		PORTD |= (1 << PIND5);
    794a:	f5 e1       	ldi	r31, 0x15	; 21
		char fileName[16];
		sprintf(fileName, "%02d-%02d-%02d.CSV", rtc.date, rtc.month, rtc.year);
    794c:	86 81       	ldd	r24, Z+6	; 0x06
    794e:	1f 92       	push	r1
    7950:	8f 93       	push	r24
    7952:	85 81       	ldd	r24, Z+5	; 0x05
    7954:	1f 92       	push	r1
    7956:	8f 93       	push	r24
    7958:	84 81       	ldd	r24, Z+4	; 0x04
    795a:	1f 92       	push	r1
    795c:	8f 93       	push	r24
    795e:	8a e8       	ldi	r24, 0x8A	; 138
    7960:	94 e0       	ldi	r25, 0x04	; 4
    7962:	9f 93       	push	r25
    7964:	8f 93       	push	r24
    7966:	81 e0       	ldi	r24, 0x01	; 1
    7968:	90 e0       	ldi	r25, 0x00	; 0
    796a:	8c 0f       	add	r24, r28
    796c:	9d 1f       	adc	r25, r29
    796e:	9f 93       	push	r25
    7970:	8f 93       	push	r24
    7972:	0e 94 72 45 	call	0x8ae4	; 0x8ae4 <sprintf>
    7976:	ed b7       	in	r30, 0x3d	; 61
    7978:	fe b7       	in	r31, 0x3e	; 62

		if(f_open(&Fil, fileName, FA_WRITE) == FR_OK)
    797a:	b4 96       	adiw	r30, 0x24	; 36
    797c:	0f b6       	in	r0, 0x3f	; 63
    797e:	f8 94       	cli
    7980:	fe bf       	out	0x3e, r31	; 62
    7982:	0f be       	out	0x3f, r0	; 63
    7984:	ed bf       	out	0x3d, r30	; 61
    7986:	42 e0       	ldi	r20, 0x02	; 2
    7988:	be 01       	movw	r22, r28
    798a:	6f 5f       	subi	r22, 0xFF	; 255
    798c:	7f 4f       	sbci	r23, 0xFF	; 255
    798e:	81 ee       	ldi	r24, 0xE1	; 225
    7990:	95 e1       	ldi	r25, 0x15	; 21
    7992:	0e 94 7e 28 	call	0x50fc	; 0x50fc <f_open>
    7996:	81 11       	cpse	r24, r1
    7998:	92 c0       	rjmp	.+292    	; 0x7abe <main+0x8ce>
    799a:	2d b7       	in	r18, 0x3d	; 61
    799c:	3e b7       	in	r19, 0x3e	; 62
		{
    799e:	38 8f       	std	Y+24, r19	; 0x18
    79a0:	2f 8b       	std	Y+23, r18	; 0x17
    79a2:	40 91 eb 15 	lds	r20, 0x15EB	; 0x8015eb <Fil+0xa>
			f_lseek(&Fil, Fil.fsize);
    79a6:	50 91 ec 15 	lds	r21, 0x15EC	; 0x8015ec <Fil+0xb>
    79aa:	60 91 ed 15 	lds	r22, 0x15ED	; 0x8015ed <Fil+0xc>
    79ae:	70 91 ee 15 	lds	r23, 0x15EE	; 0x8015ee <Fil+0xd>
    79b2:	81 ee       	ldi	r24, 0xE1	; 225
    79b4:	95 e1       	ldi	r25, 0x15	; 21
    79b6:	0e 94 01 2e 	call	0x5c02	; 0x5c02 <f_lseek>
    79ba:	76 01       	movw	r14, r12
    79bc:	ff 92       	push	r15
			char sdData[snprintf(NULL,0,"%02d:%02d:%02d,%s,%s,%s,%s,%s\r\n", rtc.hour, rtc.min, rtc.sec, pressChar, anglChar, speedChar, humidChar, tempChar)];
    79be:	cf 92       	push	r12
    79c0:	0f 2e       	mov	r0, r31
    79c2:	f5 e8       	ldi	r31, 0x85	; 133
    79c4:	cf 2e       	mov	r12, r31
    79c6:	f5 e1       	ldi	r31, 0x15	; 21
    79c8:	df 2e       	mov	r13, r31
    79ca:	f0 2d       	mov	r31, r0
    79cc:	df 92       	push	r13
    79ce:	cf 92       	push	r12
    79d0:	58 01       	movw	r10, r16
    79d2:	bf 92       	push	r11
    79d4:	0f 93       	push	r16
    79d6:	0f 2e       	mov	r0, r31
    79d8:	fe e6       	ldi	r31, 0x6E	; 110
    79da:	8f 2e       	mov	r8, r31
    79dc:	f5 e1       	ldi	r31, 0x15	; 21
    79de:	9f 2e       	mov	r9, r31
    79e0:	f0 2d       	mov	r31, r0
    79e2:	9f 92       	push	r9
    79e4:	8f 92       	push	r8
    79e6:	0f 2e       	mov	r0, r31
    79e8:	f7 ea       	ldi	r31, 0xA7	; 167
    79ea:	6f 2e       	mov	r6, r31
    79ec:	f5 e1       	ldi	r31, 0x15	; 21
    79ee:	7f 2e       	mov	r7, r31
    79f0:	f0 2d       	mov	r31, r0
    79f2:	7f 92       	push	r7
    79f4:	6f 92       	push	r6
    79f6:	0e e7       	ldi	r16, 0x7E	; 126
    79f8:	15 e1       	ldi	r17, 0x15	; 21
    79fa:	f8 01       	movw	r30, r16
    79fc:	80 81       	ld	r24, Z
    79fe:	1f 92       	push	r1
    7a00:	8f 93       	push	r24
    7a02:	81 81       	ldd	r24, Z+1	; 0x01
    7a04:	1f 92       	push	r1
    7a06:	8f 93       	push	r24
    7a08:	82 81       	ldd	r24, Z+2	; 0x02
    7a0a:	1f 92       	push	r1
    7a0c:	8f 93       	push	r24
    7a0e:	0f 2e       	mov	r0, r31
    7a10:	fd e9       	ldi	r31, 0x9D	; 157
    7a12:	2f 2e       	mov	r2, r31
    7a14:	f4 e0       	ldi	r31, 0x04	; 4
    7a16:	3f 2e       	mov	r3, r31
    7a18:	f0 2d       	mov	r31, r0
    7a1a:	3f 92       	push	r3
    7a1c:	2f 92       	push	r2
    7a1e:	1f 92       	push	r1
    7a20:	1f 92       	push	r1
    7a22:	1f 92       	push	r1
    7a24:	1f 92       	push	r1
    7a26:	0e 94 36 45 	call	0x8a6c	; 0x8a6c <snprintf>
    7a2a:	9e 8b       	std	Y+22, r25	; 0x16
    7a2c:	8d 8b       	std	Y+21, r24	; 0x15
    7a2e:	2d b7       	in	r18, 0x3d	; 61
    7a30:	3e b7       	in	r19, 0x3e	; 62
    7a32:	2a 5e       	subi	r18, 0xEA	; 234
    7a34:	3f 4f       	sbci	r19, 0xFF	; 255
    7a36:	0f b6       	in	r0, 0x3f	; 63
    7a38:	f8 94       	cli
    7a3a:	3e bf       	out	0x3e, r19	; 62
    7a3c:	0f be       	out	0x3f, r0	; 63
    7a3e:	2d bf       	out	0x3d, r18	; 61
    7a40:	ed b7       	in	r30, 0x3d	; 61
    7a42:	fe b7       	in	r31, 0x3e	; 62
    7a44:	e8 1b       	sub	r30, r24
    7a46:	f9 0b       	sbc	r31, r25
    7a48:	0f b6       	in	r0, 0x3f	; 63
    7a4a:	f8 94       	cli
    7a4c:	fe bf       	out	0x3e, r31	; 62
    7a4e:	0f be       	out	0x3f, r0	; 63
    7a50:	ed bf       	out	0x3d, r30	; 61
    7a52:	2d b7       	in	r18, 0x3d	; 61
    7a54:	3e b7       	in	r19, 0x3e	; 62
    7a56:	2f 5f       	subi	r18, 0xFF	; 255
    7a58:	3f 4f       	sbci	r19, 0xFF	; 255
    7a5a:	3a 8b       	std	Y+18, r19	; 0x12
    7a5c:	29 8b       	std	Y+17, r18	; 0x11
    7a5e:	ff 92       	push	r15
    7a60:	ef 92       	push	r14
			sprintf(sdData, "%02d:%02d:%02d,%s,%s,%s,%s,%s\r\n", rtc.hour, rtc.min, rtc.sec, pressChar, anglChar, speedChar, humidChar, tempChar);
    7a62:	df 92       	push	r13
    7a64:	cf 92       	push	r12
    7a66:	bf 92       	push	r11
    7a68:	af 92       	push	r10
    7a6a:	9f 92       	push	r9
    7a6c:	8f 92       	push	r8
    7a6e:	7f 92       	push	r7
    7a70:	6f 92       	push	r6
    7a72:	f8 01       	movw	r30, r16
    7a74:	80 81       	ld	r24, Z
    7a76:	1f 92       	push	r1
    7a78:	8f 93       	push	r24
    7a7a:	81 81       	ldd	r24, Z+1	; 0x01
    7a7c:	1f 92       	push	r1
    7a7e:	8f 93       	push	r24
    7a80:	82 81       	ldd	r24, Z+2	; 0x02
    7a82:	1f 92       	push	r1
    7a84:	8f 93       	push	r24
    7a86:	3f 92       	push	r3
    7a88:	2f 92       	push	r2
    7a8a:	3f 93       	push	r19
    7a8c:	2f 93       	push	r18
    7a8e:	0e 94 72 45 	call	0x8ae4	; 0x8ae4 <sprintf>
    7a92:	2b e9       	ldi	r18, 0x9B	; 155
    7a94:	35 e1       	ldi	r19, 0x15	; 21
			f_write(&Fil, sdData, sizeof(sdData), &bw);	// Write Data to the file
    7a96:	4d 89       	ldd	r20, Y+21	; 0x15
    7a98:	5e 89       	ldd	r21, Y+22	; 0x16
    7a9a:	69 89       	ldd	r22, Y+17	; 0x11
    7a9c:	7a 89       	ldd	r23, Y+18	; 0x12
    7a9e:	81 ee       	ldi	r24, 0xE1	; 225
    7aa0:	95 e1       	ldi	r25, 0x15	; 21
    7aa2:	0e 94 b1 2b 	call	0x5762	; 0x5762 <f_write>
    7aa6:	81 ee       	ldi	r24, 0xE1	; 225
    7aa8:	95 e1       	ldi	r25, 0x15	; 21
			f_close(&Fil);
    7aaa:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <f_close>
    7aae:	2f 89       	ldd	r18, Y+23	; 0x17
    7ab0:	38 8d       	ldd	r19, Y+24	; 0x18
    7ab2:	0f b6       	in	r0, 0x3f	; 63
    7ab4:	f8 94       	cli
    7ab6:	3e bf       	out	0x3e, r19	; 62
    7ab8:	0f be       	out	0x3f, r0	; 63
    7aba:	2d bf       	out	0x3d, r18	; 61
    7abc:	18 c0       	rjmp	.+48     	; 0x7aee <main+0x8fe>
    7abe:	4a e0       	ldi	r20, 0x0A	; 10
    7ac0:	be 01       	movw	r22, r28
		}
		else
		{
			if (f_open(&Fil, fileName, FA_WRITE | FA_CREATE_ALWAYS) == FR_OK) {	/* Create a file */
    7ac2:	6f 5f       	subi	r22, 0xFF	; 255
    7ac4:	7f 4f       	sbci	r23, 0xFF	; 255
    7ac6:	81 ee       	ldi	r24, 0xE1	; 225
    7ac8:	95 e1       	ldi	r25, 0x15	; 21
    7aca:	0e 94 7e 28 	call	0x50fc	; 0x50fc <f_open>
    7ace:	81 11       	cpse	r24, r1
    7ad0:	0e c0       	rjmp	.+28     	; 0x7aee <main+0x8fe>
    7ad2:	2b e9       	ldi	r18, 0x9B	; 155
    7ad4:	35 e1       	ldi	r19, 0x15	; 21
				f_write(&Fil, "Time,Pressure,Wind Angle,Wind Speed,Humidity,Temperature\r\n", 58, &bw);	// Create CSV header
    7ad6:	4a e3       	ldi	r20, 0x3A	; 58
    7ad8:	50 e0       	ldi	r21, 0x00	; 0
    7ada:	6d eb       	ldi	r22, 0xBD	; 189
    7adc:	74 e0       	ldi	r23, 0x04	; 4
    7ade:	81 ee       	ldi	r24, 0xE1	; 225
    7ae0:	95 e1       	ldi	r25, 0x15	; 21
    7ae2:	0e 94 b1 2b 	call	0x5762	; 0x5762 <f_write>
    7ae6:	81 ee       	ldi	r24, 0xE1	; 225
    7ae8:	95 e1       	ldi	r25, 0x15	; 21
				f_close(&Fil);								/* Close the file */
    7aea:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <f_close>
    7aee:	5d 98       	cbi	0x0b, 5	; 11
    7af0:	a8 95       	wdr
			}
		}
		PORTD &= ~(1<<PIND5);
    7af2:	11 9a       	sbi	0x02, 1	; 2
		
		wdt_reset();
    7af4:	10 92 3f 05 	sts	0x053F, r1	; 0x80053f <sec>
		
		PORTA |= (1 << PINA1);
		sec = 0;
    7af8:	8b e0       	ldi	r24, 0x0B	; 11
    7afa:	96 e1       	ldi	r25, 0x16	; 22
		Ether_SendPacket(packetStr);
    7afc:	0e 94 27 1c 	call	0x384e	; 0x384e <Ether_SendPacket>
    7b00:	a9 cc       	rjmp	.-1710   	; 0x7454 <main+0x264>
    7b02:	80 91 10 11 	lds	r24, 0x1110	; 0x801110 <count>
			return;
		}
		Level[bullets] = bullet;
			
	}
	if(count >= 5)
    7b06:	90 91 11 11 	lds	r25, 0x1111	; 0x801111 <count+0x1>
    7b0a:	05 97       	sbiw	r24, 0x05	; 5
    7b0c:	0c f4       	brge	.+2      	; 0x7b10 <main+0x920>
    7b0e:	27 cd       	rjmp	.-1458   	; 0x755e <main+0x36e>
    7b10:	0d e9       	ldi	r16, 0x9D	; 157
    7b12:	15 e1       	ldi	r17, 0x15	; 21
    7b14:	0f 2e       	mov	r0, r31
    7b16:	f7 ea       	ldi	r31, 0xA7	; 167
    7b18:	ef 2e       	mov	r14, r31
    7b1a:	f5 e1       	ldi	r31, 0x15	; 21
    7b1c:	ff 2e       	mov	r15, r31
    7b1e:	f0 2d       	mov	r31, r0
    7b20:	ee cc       	rjmp	.-1572   	; 0x74fe <main+0x30e>
    7b22:	3f ef       	ldi	r19, 0xFF	; 255
					}
					if(cursorPos > 408)
					{
						gameover();
					}
					full++;
    7b24:	c3 1a       	sub	r12, r19
    7b26:	d3 0a       	sbc	r13, r19
					enemy[(r*7)+i] = cursorPos;
    7b28:	80 91 18 11 	lds	r24, 0x1118	; 0x801118 <cursorPos>
    7b2c:	90 91 19 11 	lds	r25, 0x1119	; 0x801119 <cursorPos+0x1>
    7b30:	f7 01       	movw	r30, r14
    7b32:	91 83       	std	Z+1, r25	; 0x01
    7b34:	80 83       	st	Z, r24
static void drawEnemy()
{
	tempPos = cursorPos;
	for(int i=0; i < sizeof(invader); i++)
	{
		Level[i+tempPos] = invader[i];
    7b36:	fc 01       	movw	r30, r24
    7b38:	e4 5e       	subi	r30, 0xE4	; 228
    7b3a:	fe 4e       	sbci	r31, 0xEE	; 238
    7b3c:	40 82       	st	Z, r4
    7b3e:	51 82       	std	Z+1, r5	; 0x01
    7b40:	32 82       	std	Z+2, r3	; 0x02
    7b42:	63 82       	std	Z+3, r6	; 0x03
    7b44:	9c 01       	movw	r18, r24
    7b46:	2c 5f       	subi	r18, 0xFC	; 252
    7b48:	3f 4f       	sbci	r19, 0xFF	; 255
    7b4a:	d9 01       	movw	r26, r18
    7b4c:	a4 5e       	subi	r26, 0xE4	; 228
    7b4e:	be 4e       	sbci	r27, 0xEE	; 238
    7b50:	7c 92       	st	X, r7
		cursorPos = tempPos + i;
	}
	tempPos = cursorPos;
    7b52:	30 93 17 11 	sts	0x1117, r19	; 0x801117 <tempPos+0x1>
    7b56:	20 93 16 11 	sts	0x1116, r18	; 0x801116 <tempPos>
	for(int i=1; i <= sizeof(invader); i++)
	{
		Level[i+tempPos] = invader[sizeof(invader) - i];
    7b5a:	75 82       	std	Z+5, r7	; 0x05
    7b5c:	66 82       	std	Z+6, r6	; 0x06
    7b5e:	37 82       	std	Z+7, r3	; 0x07
    7b60:	50 86       	std	Z+8, r5	; 0x08
    7b62:	41 86       	std	Z+9, r4	; 0x09
		cursorPos = tempPos + i;
	}
	cursorPos += 3;
    7b64:	0c 96       	adiw	r24, 0x0c	; 12
    7b66:	90 93 19 11 	sts	0x1119, r25	; 0x801119 <cursorPos+0x1>
    7b6a:	80 93 18 11 	sts	0x1118, r24	; 0x801118 <cursorPos>
						gameover();
					}
					full++;
					enemy[(r*7)+i] = cursorPos;
					drawEnemy();
					if(rand() % 50 < 1)
    7b6e:	2d d5       	rcall	.+2650   	; 0x85ca <rand>
    7b70:	62 e3       	ldi	r22, 0x32	; 50
    7b72:	70 e0       	ldi	r23, 0x00	; 0
    7b74:	dc d2       	rcall	.+1464   	; 0x812e <__divmodhi4>
    7b76:	18 16       	cp	r1, r24
    7b78:	19 06       	cpc	r1, r25
    7b7a:	0c f4       	brge	.+2      	; 0x7b7e <main+0x98e>
    7b7c:	c6 cd       	rjmp	.-1140   	; 0x770a <main+0x51a>
    7b7e:	ed e9       	ldi	r30, 0x9D	; 157
    7b80:	f5 e1       	ldi	r31, 0x15	; 21

static void invaderShoot()
{
	for(int i=0; i < 5; i++)
	{
		if(invaderBullet[i] == 0)
    7b82:	80 81       	ld	r24, Z
    7b84:	91 81       	ldd	r25, Z+1	; 0x01
    7b86:	89 2b       	or	r24, r25
    7b88:	09 f4       	brne	.+2      	; 0x7b8c <main+0x99c>
    7b8a:	a7 cd       	rjmp	.-1202   	; 0x76da <main+0x4ea>
    7b8c:	ef e9       	ldi	r30, 0x9F	; 159
    7b8e:	f5 e1       	ldi	r31, 0x15	; 21
    7b90:	81 e0       	ldi	r24, 0x01	; 1
    7b92:	90 e0       	ldi	r25, 0x00	; 0
	cursorPos += 3;
}

static void invaderShoot()
{
	for(int i=0; i < 5; i++)
    7b94:	9d cd       	rjmp	.-1222   	; 0x76d0 <main+0x4e0>
    7b96:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <playerPos>
			}
			if(full == 0)
			{
				resetEnemy();
			}
			cursorPos = 408 + (4 * playerPos);
    7b9a:	08 2e       	mov	r0, r24
    7b9c:	00 0c       	add	r0, r0
    7b9e:	99 0b       	sbc	r25, r25
    7ba0:	8a 59       	subi	r24, 0x9A	; 154
    7ba2:	9f 4f       	sbci	r25, 0xFF	; 255
    7ba4:	88 0f       	add	r24, r24
    7ba6:	99 1f       	adc	r25, r25
    7ba8:	88 0f       	add	r24, r24
    7baa:	99 1f       	adc	r25, r25
    7bac:	fc 01       	movw	r30, r24
    7bae:	e4 5e       	subi	r30, 0xE4	; 228
static void drawPlayer()
{
	tempPos = cursorPos;
	for(int i=0; i < sizeof(player); i++)
	{
		Level[i+tempPos] = player[i];
    7bb0:	fe 4e       	sbci	r31, 0xEE	; 238
    7bb2:	10 82       	st	Z, r1
    7bb4:	28 e7       	ldi	r18, 0x78	; 120
    7bb6:	21 83       	std	Z+1, r18	; 0x01
    7bb8:	30 e6       	ldi	r19, 0x60	; 96
    7bba:	32 83       	std	Z+2, r19	; 0x02
    7bbc:	6e e7       	ldi	r22, 0x7E	; 126
    7bbe:	63 83       	std	Z+3, r22	; 0x03
    7bc0:	ac 01       	movw	r20, r24
    7bc2:	4c 5f       	subi	r20, 0xFC	; 252
    7bc4:	5f 4f       	sbci	r21, 0xFF	; 255
    7bc6:	da 01       	movw	r26, r20
    7bc8:	a4 5e       	subi	r26, 0xE4	; 228
    7bca:	be 4e       	sbci	r27, 0xEE	; 238
    7bcc:	7f e7       	ldi	r23, 0x7F	; 127
    7bce:	7c 93       	st	X, r23
    7bd0:	50 93 17 11 	sts	0x1117, r21	; 0x801117 <tempPos+0x1>
		cursorPos = tempPos + i;
	}
	tempPos = cursorPos;
    7bd4:	40 93 16 11 	sts	0x1116, r20	; 0x801116 <tempPos>
    7bd8:	75 83       	std	Z+5, r23	; 0x05
	for(int i=1; i <= sizeof(player); i++)
	{
		Level[i+tempPos] = player[sizeof(player) - i];
    7bda:	66 83       	std	Z+6, r22	; 0x06
    7bdc:	37 83       	std	Z+7, r19	; 0x07
    7bde:	20 87       	std	Z+8, r18	; 0x08
    7be0:	11 86       	std	Z+9, r1	; 0x09
    7be2:	0c 96       	adiw	r24, 0x0c	; 12
		cursorPos = tempPos + i;
	}
	cursorPos += 3;
    7be4:	90 93 19 11 	sts	0x1119, r25	; 0x801119 <cursorPos+0x1>
    7be8:	80 93 18 11 	sts	0x1118, r24	; 0x801118 <cursorPos>
    7bec:	60 e0       	ldi	r22, 0x00	; 0
			}
			cursorPos = 408 + (4 * playerPos);
			drawPlayer();
			
		
			N5110_image(Level, 0);
    7bee:	8c e1       	ldi	r24, 0x1C	; 28
    7bf0:	91 e1       	ldi	r25, 0x11	; 17
    7bf2:	0e 94 02 35 	call	0x6a04	; 0x6a04 <N5110_image>
    7bf6:	60 e8       	ldi	r22, 0x80	; 128
			lcd_setXY(0x44,0x80);
    7bf8:	84 e4       	ldi	r24, 0x44	; 68
    7bfa:	0e 94 ec 34 	call	0x69d8	; 0x69d8 <lcd_setXY>
    7bfe:	4a e0       	ldi	r20, 0x0A	; 10
    7c00:	be 01       	movw	r22, r28
    7c02:	6f 5f       	subi	r22, 0xFF	; 255
    7c04:	7f 4f       	sbci	r23, 0xFF	; 255
    7c06:	80 91 14 11 	lds	r24, 0x1114	; 0x801114 <score>
    7c0a:	90 91 15 11 	lds	r25, 0x1115	; 0x801115 <score+0x1>
    7c0e:	67 d6       	rcall	.+3278   	; 0x88de <__itoa_ncheck>
    7c10:	ce 01       	movw	r24, r28
    7c12:	01 96       	adiw	r24, 0x01	; 1
			char scoreChar[10];
			itoa(score,scoreChar,10);
			N5110_Data(scoreChar);
    7c14:	0e 94 78 34 	call	0x68f0	; 0x68f0 <N5110_Data>
    7c18:	ff ef       	ldi	r31, 0xFF	; 255
    7c1a:	21 ee       	ldi	r18, 0xE1	; 225
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    7c1c:	34 e0       	ldi	r19, 0x04	; 4
    7c1e:	f1 50       	subi	r31, 0x01	; 1
    7c20:	20 40       	sbci	r18, 0x00	; 0
    7c22:	30 40       	sbci	r19, 0x00	; 0
    7c24:	e1 f7       	brne	.-8      	; 0x7c1e <main+0xa2e>
    7c26:	00 c0       	rjmp	.+0      	; 0x7c28 <main+0xa38>
    7c28:	00 00       	nop
    7c2a:	80 91 1b 11 	lds	r24, 0x111B	; 0x80111b <gameMode>
		
			_delay_ms(100);
		}
		
		if(gameMode == 1) continue; // Don't take measurements if in game mode.
    7c2e:	81 30       	cpi	r24, 0x01	; 1
    7c30:	09 f4       	brne	.+2      	; 0x7c34 <main+0xa44>
    7c32:	10 cc       	rjmp	.-2016   	; 0x7454 <main+0x264>
    7c34:	81 cd       	rjmp	.-1278   	; 0x7738 <main+0x548>

00007c36 <__subsf3>:
    7c36:	50 58       	subi	r21, 0x80	; 128

00007c38 <__addsf3>:
    7c38:	bb 27       	eor	r27, r27
    7c3a:	aa 27       	eor	r26, r26
    7c3c:	0e d0       	rcall	.+28     	; 0x7c5a <__addsf3x>
    7c3e:	c7 c1       	rjmp	.+910    	; 0x7fce <__fp_round>
    7c40:	b8 d1       	rcall	.+880    	; 0x7fb2 <__fp_pscA>
    7c42:	30 f0       	brcs	.+12     	; 0x7c50 <__addsf3+0x18>
    7c44:	bd d1       	rcall	.+890    	; 0x7fc0 <__fp_pscB>
    7c46:	20 f0       	brcs	.+8      	; 0x7c50 <__addsf3+0x18>
    7c48:	31 f4       	brne	.+12     	; 0x7c56 <__addsf3+0x1e>
    7c4a:	9f 3f       	cpi	r25, 0xFF	; 255
    7c4c:	11 f4       	brne	.+4      	; 0x7c52 <__addsf3+0x1a>
    7c4e:	1e f4       	brtc	.+6      	; 0x7c56 <__addsf3+0x1e>
    7c50:	9d c1       	rjmp	.+826    	; 0x7f8c <__fp_nan>
    7c52:	0e f4       	brtc	.+2      	; 0x7c56 <__addsf3+0x1e>
    7c54:	e0 95       	com	r30
    7c56:	e7 fb       	bst	r30, 7
    7c58:	93 c1       	rjmp	.+806    	; 0x7f80 <__fp_inf>

00007c5a <__addsf3x>:
    7c5a:	e9 2f       	mov	r30, r25
    7c5c:	c9 d1       	rcall	.+914    	; 0x7ff0 <__fp_split3>
    7c5e:	80 f3       	brcs	.-32     	; 0x7c40 <__addsf3+0x8>
    7c60:	ba 17       	cp	r27, r26
    7c62:	62 07       	cpc	r22, r18
    7c64:	73 07       	cpc	r23, r19
    7c66:	84 07       	cpc	r24, r20
    7c68:	95 07       	cpc	r25, r21
    7c6a:	18 f0       	brcs	.+6      	; 0x7c72 <__addsf3x+0x18>
    7c6c:	71 f4       	brne	.+28     	; 0x7c8a <__addsf3x+0x30>
    7c6e:	9e f5       	brtc	.+102    	; 0x7cd6 <__addsf3x+0x7c>
    7c70:	e1 c1       	rjmp	.+962    	; 0x8034 <__fp_zero>
    7c72:	0e f4       	brtc	.+2      	; 0x7c76 <__addsf3x+0x1c>
    7c74:	e0 95       	com	r30
    7c76:	0b 2e       	mov	r0, r27
    7c78:	ba 2f       	mov	r27, r26
    7c7a:	a0 2d       	mov	r26, r0
    7c7c:	0b 01       	movw	r0, r22
    7c7e:	b9 01       	movw	r22, r18
    7c80:	90 01       	movw	r18, r0
    7c82:	0c 01       	movw	r0, r24
    7c84:	ca 01       	movw	r24, r20
    7c86:	a0 01       	movw	r20, r0
    7c88:	11 24       	eor	r1, r1
    7c8a:	ff 27       	eor	r31, r31
    7c8c:	59 1b       	sub	r21, r25
    7c8e:	99 f0       	breq	.+38     	; 0x7cb6 <__addsf3x+0x5c>
    7c90:	59 3f       	cpi	r21, 0xF9	; 249
    7c92:	50 f4       	brcc	.+20     	; 0x7ca8 <__addsf3x+0x4e>
    7c94:	50 3e       	cpi	r21, 0xE0	; 224
    7c96:	68 f1       	brcs	.+90     	; 0x7cf2 <__addsf3x+0x98>
    7c98:	1a 16       	cp	r1, r26
    7c9a:	f0 40       	sbci	r31, 0x00	; 0
    7c9c:	a2 2f       	mov	r26, r18
    7c9e:	23 2f       	mov	r18, r19
    7ca0:	34 2f       	mov	r19, r20
    7ca2:	44 27       	eor	r20, r20
    7ca4:	58 5f       	subi	r21, 0xF8	; 248
    7ca6:	f3 cf       	rjmp	.-26     	; 0x7c8e <__addsf3x+0x34>
    7ca8:	46 95       	lsr	r20
    7caa:	37 95       	ror	r19
    7cac:	27 95       	ror	r18
    7cae:	a7 95       	ror	r26
    7cb0:	f0 40       	sbci	r31, 0x00	; 0
    7cb2:	53 95       	inc	r21
    7cb4:	c9 f7       	brne	.-14     	; 0x7ca8 <__addsf3x+0x4e>
    7cb6:	7e f4       	brtc	.+30     	; 0x7cd6 <__addsf3x+0x7c>
    7cb8:	1f 16       	cp	r1, r31
    7cba:	ba 0b       	sbc	r27, r26
    7cbc:	62 0b       	sbc	r22, r18
    7cbe:	73 0b       	sbc	r23, r19
    7cc0:	84 0b       	sbc	r24, r20
    7cc2:	ba f0       	brmi	.+46     	; 0x7cf2 <__addsf3x+0x98>
    7cc4:	91 50       	subi	r25, 0x01	; 1
    7cc6:	a1 f0       	breq	.+40     	; 0x7cf0 <__addsf3x+0x96>
    7cc8:	ff 0f       	add	r31, r31
    7cca:	bb 1f       	adc	r27, r27
    7ccc:	66 1f       	adc	r22, r22
    7cce:	77 1f       	adc	r23, r23
    7cd0:	88 1f       	adc	r24, r24
    7cd2:	c2 f7       	brpl	.-16     	; 0x7cc4 <__addsf3x+0x6a>
    7cd4:	0e c0       	rjmp	.+28     	; 0x7cf2 <__addsf3x+0x98>
    7cd6:	ba 0f       	add	r27, r26
    7cd8:	62 1f       	adc	r22, r18
    7cda:	73 1f       	adc	r23, r19
    7cdc:	84 1f       	adc	r24, r20
    7cde:	48 f4       	brcc	.+18     	; 0x7cf2 <__addsf3x+0x98>
    7ce0:	87 95       	ror	r24
    7ce2:	77 95       	ror	r23
    7ce4:	67 95       	ror	r22
    7ce6:	b7 95       	ror	r27
    7ce8:	f7 95       	ror	r31
    7cea:	9e 3f       	cpi	r25, 0xFE	; 254
    7cec:	08 f0       	brcs	.+2      	; 0x7cf0 <__addsf3x+0x96>
    7cee:	b3 cf       	rjmp	.-154    	; 0x7c56 <__addsf3+0x1e>
    7cf0:	93 95       	inc	r25
    7cf2:	88 0f       	add	r24, r24
    7cf4:	08 f0       	brcs	.+2      	; 0x7cf8 <__addsf3x+0x9e>
    7cf6:	99 27       	eor	r25, r25
    7cf8:	ee 0f       	add	r30, r30
    7cfa:	97 95       	ror	r25
    7cfc:	87 95       	ror	r24
    7cfe:	08 95       	ret

00007d00 <__cmpsf2>:
    7d00:	1b d1       	rcall	.+566    	; 0x7f38 <__fp_cmp>
    7d02:	08 f4       	brcc	.+2      	; 0x7d06 <__cmpsf2+0x6>
    7d04:	81 e0       	ldi	r24, 0x01	; 1
    7d06:	08 95       	ret

00007d08 <__divsf3>:
    7d08:	0c d0       	rcall	.+24     	; 0x7d22 <__divsf3x>
    7d0a:	61 c1       	rjmp	.+706    	; 0x7fce <__fp_round>
    7d0c:	59 d1       	rcall	.+690    	; 0x7fc0 <__fp_pscB>
    7d0e:	40 f0       	brcs	.+16     	; 0x7d20 <__divsf3+0x18>
    7d10:	50 d1       	rcall	.+672    	; 0x7fb2 <__fp_pscA>
    7d12:	30 f0       	brcs	.+12     	; 0x7d20 <__divsf3+0x18>
    7d14:	21 f4       	brne	.+8      	; 0x7d1e <__divsf3+0x16>
    7d16:	5f 3f       	cpi	r21, 0xFF	; 255
    7d18:	19 f0       	breq	.+6      	; 0x7d20 <__divsf3+0x18>
    7d1a:	32 c1       	rjmp	.+612    	; 0x7f80 <__fp_inf>
    7d1c:	51 11       	cpse	r21, r1
    7d1e:	8b c1       	rjmp	.+790    	; 0x8036 <__fp_szero>
    7d20:	35 c1       	rjmp	.+618    	; 0x7f8c <__fp_nan>

00007d22 <__divsf3x>:
    7d22:	66 d1       	rcall	.+716    	; 0x7ff0 <__fp_split3>
    7d24:	98 f3       	brcs	.-26     	; 0x7d0c <__divsf3+0x4>

00007d26 <__divsf3_pse>:
    7d26:	99 23       	and	r25, r25
    7d28:	c9 f3       	breq	.-14     	; 0x7d1c <__divsf3+0x14>
    7d2a:	55 23       	and	r21, r21
    7d2c:	b1 f3       	breq	.-20     	; 0x7d1a <__divsf3+0x12>
    7d2e:	95 1b       	sub	r25, r21
    7d30:	55 0b       	sbc	r21, r21
    7d32:	bb 27       	eor	r27, r27
    7d34:	aa 27       	eor	r26, r26
    7d36:	62 17       	cp	r22, r18
    7d38:	73 07       	cpc	r23, r19
    7d3a:	84 07       	cpc	r24, r20
    7d3c:	38 f0       	brcs	.+14     	; 0x7d4c <__divsf3_pse+0x26>
    7d3e:	9f 5f       	subi	r25, 0xFF	; 255
    7d40:	5f 4f       	sbci	r21, 0xFF	; 255
    7d42:	22 0f       	add	r18, r18
    7d44:	33 1f       	adc	r19, r19
    7d46:	44 1f       	adc	r20, r20
    7d48:	aa 1f       	adc	r26, r26
    7d4a:	a9 f3       	breq	.-22     	; 0x7d36 <__divsf3_pse+0x10>
    7d4c:	33 d0       	rcall	.+102    	; 0x7db4 <__divsf3_pse+0x8e>
    7d4e:	0e 2e       	mov	r0, r30
    7d50:	3a f0       	brmi	.+14     	; 0x7d60 <__divsf3_pse+0x3a>
    7d52:	e0 e8       	ldi	r30, 0x80	; 128
    7d54:	30 d0       	rcall	.+96     	; 0x7db6 <__divsf3_pse+0x90>
    7d56:	91 50       	subi	r25, 0x01	; 1
    7d58:	50 40       	sbci	r21, 0x00	; 0
    7d5a:	e6 95       	lsr	r30
    7d5c:	00 1c       	adc	r0, r0
    7d5e:	ca f7       	brpl	.-14     	; 0x7d52 <__divsf3_pse+0x2c>
    7d60:	29 d0       	rcall	.+82     	; 0x7db4 <__divsf3_pse+0x8e>
    7d62:	fe 2f       	mov	r31, r30
    7d64:	27 d0       	rcall	.+78     	; 0x7db4 <__divsf3_pse+0x8e>
    7d66:	66 0f       	add	r22, r22
    7d68:	77 1f       	adc	r23, r23
    7d6a:	88 1f       	adc	r24, r24
    7d6c:	bb 1f       	adc	r27, r27
    7d6e:	26 17       	cp	r18, r22
    7d70:	37 07       	cpc	r19, r23
    7d72:	48 07       	cpc	r20, r24
    7d74:	ab 07       	cpc	r26, r27
    7d76:	b0 e8       	ldi	r27, 0x80	; 128
    7d78:	09 f0       	breq	.+2      	; 0x7d7c <__divsf3_pse+0x56>
    7d7a:	bb 0b       	sbc	r27, r27
    7d7c:	80 2d       	mov	r24, r0
    7d7e:	bf 01       	movw	r22, r30
    7d80:	ff 27       	eor	r31, r31
    7d82:	93 58       	subi	r25, 0x83	; 131
    7d84:	5f 4f       	sbci	r21, 0xFF	; 255
    7d86:	2a f0       	brmi	.+10     	; 0x7d92 <__divsf3_pse+0x6c>
    7d88:	9e 3f       	cpi	r25, 0xFE	; 254
    7d8a:	51 05       	cpc	r21, r1
    7d8c:	68 f0       	brcs	.+26     	; 0x7da8 <__divsf3_pse+0x82>
    7d8e:	f8 c0       	rjmp	.+496    	; 0x7f80 <__fp_inf>
    7d90:	52 c1       	rjmp	.+676    	; 0x8036 <__fp_szero>
    7d92:	5f 3f       	cpi	r21, 0xFF	; 255
    7d94:	ec f3       	brlt	.-6      	; 0x7d90 <__divsf3_pse+0x6a>
    7d96:	98 3e       	cpi	r25, 0xE8	; 232
    7d98:	dc f3       	brlt	.-10     	; 0x7d90 <__divsf3_pse+0x6a>
    7d9a:	86 95       	lsr	r24
    7d9c:	77 95       	ror	r23
    7d9e:	67 95       	ror	r22
    7da0:	b7 95       	ror	r27
    7da2:	f7 95       	ror	r31
    7da4:	9f 5f       	subi	r25, 0xFF	; 255
    7da6:	c9 f7       	brne	.-14     	; 0x7d9a <__divsf3_pse+0x74>
    7da8:	88 0f       	add	r24, r24
    7daa:	91 1d       	adc	r25, r1
    7dac:	96 95       	lsr	r25
    7dae:	87 95       	ror	r24
    7db0:	97 f9       	bld	r25, 7
    7db2:	08 95       	ret
    7db4:	e1 e0       	ldi	r30, 0x01	; 1
    7db6:	66 0f       	add	r22, r22
    7db8:	77 1f       	adc	r23, r23
    7dba:	88 1f       	adc	r24, r24
    7dbc:	bb 1f       	adc	r27, r27
    7dbe:	62 17       	cp	r22, r18
    7dc0:	73 07       	cpc	r23, r19
    7dc2:	84 07       	cpc	r24, r20
    7dc4:	ba 07       	cpc	r27, r26
    7dc6:	20 f0       	brcs	.+8      	; 0x7dd0 <__divsf3_pse+0xaa>
    7dc8:	62 1b       	sub	r22, r18
    7dca:	73 0b       	sbc	r23, r19
    7dcc:	84 0b       	sbc	r24, r20
    7dce:	ba 0b       	sbc	r27, r26
    7dd0:	ee 1f       	adc	r30, r30
    7dd2:	88 f7       	brcc	.-30     	; 0x7db6 <__divsf3_pse+0x90>
    7dd4:	e0 95       	com	r30
    7dd6:	08 95       	ret

00007dd8 <__fixsfsi>:
    7dd8:	04 d0       	rcall	.+8      	; 0x7de2 <__fixunssfsi>
    7dda:	68 94       	set
    7ddc:	b1 11       	cpse	r27, r1
    7dde:	2b c1       	rjmp	.+598    	; 0x8036 <__fp_szero>
    7de0:	08 95       	ret

00007de2 <__fixunssfsi>:
    7de2:	0e d1       	rcall	.+540    	; 0x8000 <__fp_splitA>
    7de4:	88 f0       	brcs	.+34     	; 0x7e08 <__fixunssfsi+0x26>
    7de6:	9f 57       	subi	r25, 0x7F	; 127
    7de8:	90 f0       	brcs	.+36     	; 0x7e0e <__fixunssfsi+0x2c>
    7dea:	b9 2f       	mov	r27, r25
    7dec:	99 27       	eor	r25, r25
    7dee:	b7 51       	subi	r27, 0x17	; 23
    7df0:	a0 f0       	brcs	.+40     	; 0x7e1a <__fixunssfsi+0x38>
    7df2:	d1 f0       	breq	.+52     	; 0x7e28 <__fixunssfsi+0x46>
    7df4:	66 0f       	add	r22, r22
    7df6:	77 1f       	adc	r23, r23
    7df8:	88 1f       	adc	r24, r24
    7dfa:	99 1f       	adc	r25, r25
    7dfc:	1a f0       	brmi	.+6      	; 0x7e04 <__fixunssfsi+0x22>
    7dfe:	ba 95       	dec	r27
    7e00:	c9 f7       	brne	.-14     	; 0x7df4 <__fixunssfsi+0x12>
    7e02:	12 c0       	rjmp	.+36     	; 0x7e28 <__fixunssfsi+0x46>
    7e04:	b1 30       	cpi	r27, 0x01	; 1
    7e06:	81 f0       	breq	.+32     	; 0x7e28 <__fixunssfsi+0x46>
    7e08:	15 d1       	rcall	.+554    	; 0x8034 <__fp_zero>
    7e0a:	b1 e0       	ldi	r27, 0x01	; 1
    7e0c:	08 95       	ret
    7e0e:	12 c1       	rjmp	.+548    	; 0x8034 <__fp_zero>
    7e10:	67 2f       	mov	r22, r23
    7e12:	78 2f       	mov	r23, r24
    7e14:	88 27       	eor	r24, r24
    7e16:	b8 5f       	subi	r27, 0xF8	; 248
    7e18:	39 f0       	breq	.+14     	; 0x7e28 <__fixunssfsi+0x46>
    7e1a:	b9 3f       	cpi	r27, 0xF9	; 249
    7e1c:	cc f3       	brlt	.-14     	; 0x7e10 <__fixunssfsi+0x2e>
    7e1e:	86 95       	lsr	r24
    7e20:	77 95       	ror	r23
    7e22:	67 95       	ror	r22
    7e24:	b3 95       	inc	r27
    7e26:	d9 f7       	brne	.-10     	; 0x7e1e <__fixunssfsi+0x3c>
    7e28:	3e f4       	brtc	.+14     	; 0x7e38 <__fixunssfsi+0x56>
    7e2a:	90 95       	com	r25
    7e2c:	80 95       	com	r24
    7e2e:	70 95       	com	r23
    7e30:	61 95       	neg	r22
    7e32:	7f 4f       	sbci	r23, 0xFF	; 255
    7e34:	8f 4f       	sbci	r24, 0xFF	; 255
    7e36:	9f 4f       	sbci	r25, 0xFF	; 255
    7e38:	08 95       	ret

00007e3a <__floatdisf>:
    7e3a:	97 fb       	bst	r25, 7
    7e3c:	0e f4       	brtc	.+2      	; 0x7e40 <__floatdisf+0x6>
    7e3e:	a9 d0       	rcall	.+338    	; 0x7f92 <__fp_negdi>
    7e40:	3e c0       	rjmp	.+124    	; 0x7ebe <__fp_di2sf>

00007e42 <__floatunsisf>:
    7e42:	e8 94       	clt
    7e44:	09 c0       	rjmp	.+18     	; 0x7e58 <__floatsisf+0x12>

00007e46 <__floatsisf>:
    7e46:	97 fb       	bst	r25, 7
    7e48:	3e f4       	brtc	.+14     	; 0x7e58 <__floatsisf+0x12>
    7e4a:	90 95       	com	r25
    7e4c:	80 95       	com	r24
    7e4e:	70 95       	com	r23
    7e50:	61 95       	neg	r22
    7e52:	7f 4f       	sbci	r23, 0xFF	; 255
    7e54:	8f 4f       	sbci	r24, 0xFF	; 255
    7e56:	9f 4f       	sbci	r25, 0xFF	; 255
    7e58:	99 23       	and	r25, r25
    7e5a:	a9 f0       	breq	.+42     	; 0x7e86 <__floatsisf+0x40>
    7e5c:	f9 2f       	mov	r31, r25
    7e5e:	96 e9       	ldi	r25, 0x96	; 150
    7e60:	bb 27       	eor	r27, r27
    7e62:	93 95       	inc	r25
    7e64:	f6 95       	lsr	r31
    7e66:	87 95       	ror	r24
    7e68:	77 95       	ror	r23
    7e6a:	67 95       	ror	r22
    7e6c:	b7 95       	ror	r27
    7e6e:	f1 11       	cpse	r31, r1
    7e70:	f8 cf       	rjmp	.-16     	; 0x7e62 <__floatsisf+0x1c>
    7e72:	fa f4       	brpl	.+62     	; 0x7eb2 <__floatsisf+0x6c>
    7e74:	bb 0f       	add	r27, r27
    7e76:	11 f4       	brne	.+4      	; 0x7e7c <__floatsisf+0x36>
    7e78:	60 ff       	sbrs	r22, 0
    7e7a:	1b c0       	rjmp	.+54     	; 0x7eb2 <__floatsisf+0x6c>
    7e7c:	6f 5f       	subi	r22, 0xFF	; 255
    7e7e:	7f 4f       	sbci	r23, 0xFF	; 255
    7e80:	8f 4f       	sbci	r24, 0xFF	; 255
    7e82:	9f 4f       	sbci	r25, 0xFF	; 255
    7e84:	16 c0       	rjmp	.+44     	; 0x7eb2 <__floatsisf+0x6c>
    7e86:	88 23       	and	r24, r24
    7e88:	11 f0       	breq	.+4      	; 0x7e8e <__floatsisf+0x48>
    7e8a:	96 e9       	ldi	r25, 0x96	; 150
    7e8c:	11 c0       	rjmp	.+34     	; 0x7eb0 <__floatsisf+0x6a>
    7e8e:	77 23       	and	r23, r23
    7e90:	21 f0       	breq	.+8      	; 0x7e9a <__floatsisf+0x54>
    7e92:	9e e8       	ldi	r25, 0x8E	; 142
    7e94:	87 2f       	mov	r24, r23
    7e96:	76 2f       	mov	r23, r22
    7e98:	05 c0       	rjmp	.+10     	; 0x7ea4 <__floatsisf+0x5e>
    7e9a:	66 23       	and	r22, r22
    7e9c:	71 f0       	breq	.+28     	; 0x7eba <__floatsisf+0x74>
    7e9e:	96 e8       	ldi	r25, 0x86	; 134
    7ea0:	86 2f       	mov	r24, r22
    7ea2:	70 e0       	ldi	r23, 0x00	; 0
    7ea4:	60 e0       	ldi	r22, 0x00	; 0
    7ea6:	2a f0       	brmi	.+10     	; 0x7eb2 <__floatsisf+0x6c>
    7ea8:	9a 95       	dec	r25
    7eaa:	66 0f       	add	r22, r22
    7eac:	77 1f       	adc	r23, r23
    7eae:	88 1f       	adc	r24, r24
    7eb0:	da f7       	brpl	.-10     	; 0x7ea8 <__floatsisf+0x62>
    7eb2:	88 0f       	add	r24, r24
    7eb4:	96 95       	lsr	r25
    7eb6:	87 95       	ror	r24
    7eb8:	97 f9       	bld	r25, 7
    7eba:	08 95       	ret

00007ebc <__floatundisf>:
    7ebc:	e8 94       	clt

00007ebe <__fp_di2sf>:
    7ebe:	f9 2f       	mov	r31, r25
    7ec0:	96 eb       	ldi	r25, 0xB6	; 182
    7ec2:	ff 23       	and	r31, r31
    7ec4:	81 f0       	breq	.+32     	; 0x7ee6 <__fp_di2sf+0x28>
    7ec6:	12 16       	cp	r1, r18
    7ec8:	13 06       	cpc	r1, r19
    7eca:	14 06       	cpc	r1, r20
    7ecc:	44 0b       	sbc	r20, r20
    7ece:	93 95       	inc	r25
    7ed0:	f6 95       	lsr	r31
    7ed2:	87 95       	ror	r24
    7ed4:	77 95       	ror	r23
    7ed6:	67 95       	ror	r22
    7ed8:	57 95       	ror	r21
    7eda:	40 40       	sbci	r20, 0x00	; 0
    7edc:	ff 23       	and	r31, r31
    7ede:	b9 f7       	brne	.-18     	; 0x7ece <__fp_di2sf+0x10>
    7ee0:	1b c0       	rjmp	.+54     	; 0x7f18 <__fp_di2sf+0x5a>
    7ee2:	99 27       	eor	r25, r25
    7ee4:	08 95       	ret
    7ee6:	88 23       	and	r24, r24
    7ee8:	51 f4       	brne	.+20     	; 0x7efe <__fp_di2sf+0x40>
    7eea:	98 50       	subi	r25, 0x08	; 8
    7eec:	d2 f7       	brpl	.-12     	; 0x7ee2 <__fp_di2sf+0x24>
    7eee:	87 2b       	or	r24, r23
    7ef0:	76 2f       	mov	r23, r22
    7ef2:	65 2f       	mov	r22, r21
    7ef4:	54 2f       	mov	r21, r20
    7ef6:	43 2f       	mov	r20, r19
    7ef8:	32 2f       	mov	r19, r18
    7efa:	20 e0       	ldi	r18, 0x00	; 0
    7efc:	b1 f3       	breq	.-20     	; 0x7eea <__fp_di2sf+0x2c>
    7efe:	12 16       	cp	r1, r18
    7f00:	13 06       	cpc	r1, r19
    7f02:	14 06       	cpc	r1, r20
    7f04:	44 0b       	sbc	r20, r20
    7f06:	88 23       	and	r24, r24
    7f08:	3a f0       	brmi	.+14     	; 0x7f18 <__fp_di2sf+0x5a>
    7f0a:	9a 95       	dec	r25
    7f0c:	44 0f       	add	r20, r20
    7f0e:	55 1f       	adc	r21, r21
    7f10:	66 1f       	adc	r22, r22
    7f12:	77 1f       	adc	r23, r23
    7f14:	88 1f       	adc	r24, r24
    7f16:	ca f7       	brpl	.-14     	; 0x7f0a <__fp_di2sf+0x4c>
    7f18:	55 23       	and	r21, r21
    7f1a:	4a f4       	brpl	.+18     	; 0x7f2e <__fp_di2sf+0x70>
    7f1c:	44 0f       	add	r20, r20
    7f1e:	55 1f       	adc	r21, r21
    7f20:	11 f4       	brne	.+4      	; 0x7f26 <__fp_di2sf+0x68>
    7f22:	60 ff       	sbrs	r22, 0
    7f24:	04 c0       	rjmp	.+8      	; 0x7f2e <__fp_di2sf+0x70>
    7f26:	6f 5f       	subi	r22, 0xFF	; 255
    7f28:	7f 4f       	sbci	r23, 0xFF	; 255
    7f2a:	8f 4f       	sbci	r24, 0xFF	; 255
    7f2c:	9f 4f       	sbci	r25, 0xFF	; 255
    7f2e:	88 0f       	add	r24, r24
    7f30:	96 95       	lsr	r25
    7f32:	87 95       	ror	r24
    7f34:	97 f9       	bld	r25, 7
    7f36:	08 95       	ret

00007f38 <__fp_cmp>:
    7f38:	99 0f       	add	r25, r25
    7f3a:	00 08       	sbc	r0, r0
    7f3c:	55 0f       	add	r21, r21
    7f3e:	aa 0b       	sbc	r26, r26
    7f40:	e0 e8       	ldi	r30, 0x80	; 128
    7f42:	fe ef       	ldi	r31, 0xFE	; 254
    7f44:	16 16       	cp	r1, r22
    7f46:	17 06       	cpc	r1, r23
    7f48:	e8 07       	cpc	r30, r24
    7f4a:	f9 07       	cpc	r31, r25
    7f4c:	c0 f0       	brcs	.+48     	; 0x7f7e <__fp_cmp+0x46>
    7f4e:	12 16       	cp	r1, r18
    7f50:	13 06       	cpc	r1, r19
    7f52:	e4 07       	cpc	r30, r20
    7f54:	f5 07       	cpc	r31, r21
    7f56:	98 f0       	brcs	.+38     	; 0x7f7e <__fp_cmp+0x46>
    7f58:	62 1b       	sub	r22, r18
    7f5a:	73 0b       	sbc	r23, r19
    7f5c:	84 0b       	sbc	r24, r20
    7f5e:	95 0b       	sbc	r25, r21
    7f60:	39 f4       	brne	.+14     	; 0x7f70 <__fp_cmp+0x38>
    7f62:	0a 26       	eor	r0, r26
    7f64:	61 f0       	breq	.+24     	; 0x7f7e <__fp_cmp+0x46>
    7f66:	23 2b       	or	r18, r19
    7f68:	24 2b       	or	r18, r20
    7f6a:	25 2b       	or	r18, r21
    7f6c:	21 f4       	brne	.+8      	; 0x7f76 <__fp_cmp+0x3e>
    7f6e:	08 95       	ret
    7f70:	0a 26       	eor	r0, r26
    7f72:	09 f4       	brne	.+2      	; 0x7f76 <__fp_cmp+0x3e>
    7f74:	a1 40       	sbci	r26, 0x01	; 1
    7f76:	a6 95       	lsr	r26
    7f78:	8f ef       	ldi	r24, 0xFF	; 255
    7f7a:	81 1d       	adc	r24, r1
    7f7c:	81 1d       	adc	r24, r1
    7f7e:	08 95       	ret

00007f80 <__fp_inf>:
    7f80:	97 f9       	bld	r25, 7
    7f82:	9f 67       	ori	r25, 0x7F	; 127
    7f84:	80 e8       	ldi	r24, 0x80	; 128
    7f86:	70 e0       	ldi	r23, 0x00	; 0
    7f88:	60 e0       	ldi	r22, 0x00	; 0
    7f8a:	08 95       	ret

00007f8c <__fp_nan>:
    7f8c:	9f ef       	ldi	r25, 0xFF	; 255
    7f8e:	80 ec       	ldi	r24, 0xC0	; 192
    7f90:	08 95       	ret

00007f92 <__fp_negdi>:
    7f92:	90 95       	com	r25
    7f94:	80 95       	com	r24
    7f96:	70 95       	com	r23
    7f98:	60 95       	com	r22
    7f9a:	50 95       	com	r21
    7f9c:	40 95       	com	r20
    7f9e:	30 95       	com	r19
    7fa0:	21 95       	neg	r18
    7fa2:	3f 4f       	sbci	r19, 0xFF	; 255
    7fa4:	4f 4f       	sbci	r20, 0xFF	; 255
    7fa6:	5f 4f       	sbci	r21, 0xFF	; 255
    7fa8:	6f 4f       	sbci	r22, 0xFF	; 255
    7faa:	7f 4f       	sbci	r23, 0xFF	; 255
    7fac:	8f 4f       	sbci	r24, 0xFF	; 255
    7fae:	9f 4f       	sbci	r25, 0xFF	; 255
    7fb0:	08 95       	ret

00007fb2 <__fp_pscA>:
    7fb2:	00 24       	eor	r0, r0
    7fb4:	0a 94       	dec	r0
    7fb6:	16 16       	cp	r1, r22
    7fb8:	17 06       	cpc	r1, r23
    7fba:	18 06       	cpc	r1, r24
    7fbc:	09 06       	cpc	r0, r25
    7fbe:	08 95       	ret

00007fc0 <__fp_pscB>:
    7fc0:	00 24       	eor	r0, r0
    7fc2:	0a 94       	dec	r0
    7fc4:	12 16       	cp	r1, r18
    7fc6:	13 06       	cpc	r1, r19
    7fc8:	14 06       	cpc	r1, r20
    7fca:	05 06       	cpc	r0, r21
    7fcc:	08 95       	ret

00007fce <__fp_round>:
    7fce:	09 2e       	mov	r0, r25
    7fd0:	03 94       	inc	r0
    7fd2:	00 0c       	add	r0, r0
    7fd4:	11 f4       	brne	.+4      	; 0x7fda <__fp_round+0xc>
    7fd6:	88 23       	and	r24, r24
    7fd8:	52 f0       	brmi	.+20     	; 0x7fee <__fp_round+0x20>
    7fda:	bb 0f       	add	r27, r27
    7fdc:	40 f4       	brcc	.+16     	; 0x7fee <__fp_round+0x20>
    7fde:	bf 2b       	or	r27, r31
    7fe0:	11 f4       	brne	.+4      	; 0x7fe6 <__fp_round+0x18>
    7fe2:	60 ff       	sbrs	r22, 0
    7fe4:	04 c0       	rjmp	.+8      	; 0x7fee <__fp_round+0x20>
    7fe6:	6f 5f       	subi	r22, 0xFF	; 255
    7fe8:	7f 4f       	sbci	r23, 0xFF	; 255
    7fea:	8f 4f       	sbci	r24, 0xFF	; 255
    7fec:	9f 4f       	sbci	r25, 0xFF	; 255
    7fee:	08 95       	ret

00007ff0 <__fp_split3>:
    7ff0:	57 fd       	sbrc	r21, 7
    7ff2:	90 58       	subi	r25, 0x80	; 128
    7ff4:	44 0f       	add	r20, r20
    7ff6:	55 1f       	adc	r21, r21
    7ff8:	59 f0       	breq	.+22     	; 0x8010 <__fp_splitA+0x10>
    7ffa:	5f 3f       	cpi	r21, 0xFF	; 255
    7ffc:	71 f0       	breq	.+28     	; 0x801a <__fp_splitA+0x1a>
    7ffe:	47 95       	ror	r20

00008000 <__fp_splitA>:
    8000:	88 0f       	add	r24, r24
    8002:	97 fb       	bst	r25, 7
    8004:	99 1f       	adc	r25, r25
    8006:	61 f0       	breq	.+24     	; 0x8020 <__fp_splitA+0x20>
    8008:	9f 3f       	cpi	r25, 0xFF	; 255
    800a:	79 f0       	breq	.+30     	; 0x802a <__fp_splitA+0x2a>
    800c:	87 95       	ror	r24
    800e:	08 95       	ret
    8010:	12 16       	cp	r1, r18
    8012:	13 06       	cpc	r1, r19
    8014:	14 06       	cpc	r1, r20
    8016:	55 1f       	adc	r21, r21
    8018:	f2 cf       	rjmp	.-28     	; 0x7ffe <__fp_split3+0xe>
    801a:	46 95       	lsr	r20
    801c:	f1 df       	rcall	.-30     	; 0x8000 <__fp_splitA>
    801e:	08 c0       	rjmp	.+16     	; 0x8030 <__fp_splitA+0x30>
    8020:	16 16       	cp	r1, r22
    8022:	17 06       	cpc	r1, r23
    8024:	18 06       	cpc	r1, r24
    8026:	99 1f       	adc	r25, r25
    8028:	f1 cf       	rjmp	.-30     	; 0x800c <__fp_splitA+0xc>
    802a:	86 95       	lsr	r24
    802c:	71 05       	cpc	r23, r1
    802e:	61 05       	cpc	r22, r1
    8030:	08 94       	sec
    8032:	08 95       	ret

00008034 <__fp_zero>:
    8034:	e8 94       	clt

00008036 <__fp_szero>:
    8036:	bb 27       	eor	r27, r27
    8038:	66 27       	eor	r22, r22
    803a:	77 27       	eor	r23, r23
    803c:	cb 01       	movw	r24, r22
    803e:	97 f9       	bld	r25, 7
    8040:	08 95       	ret

00008042 <__gesf2>:
    8042:	7a df       	rcall	.-268    	; 0x7f38 <__fp_cmp>
    8044:	08 f4       	brcc	.+2      	; 0x8048 <__gesf2+0x6>
    8046:	8f ef       	ldi	r24, 0xFF	; 255
    8048:	08 95       	ret

0000804a <__mulsf3>:
    804a:	0b d0       	rcall	.+22     	; 0x8062 <__mulsf3x>
    804c:	c0 cf       	rjmp	.-128    	; 0x7fce <__fp_round>
    804e:	b1 df       	rcall	.-158    	; 0x7fb2 <__fp_pscA>
    8050:	28 f0       	brcs	.+10     	; 0x805c <__mulsf3+0x12>
    8052:	b6 df       	rcall	.-148    	; 0x7fc0 <__fp_pscB>
    8054:	18 f0       	brcs	.+6      	; 0x805c <__mulsf3+0x12>
    8056:	95 23       	and	r25, r21
    8058:	09 f0       	breq	.+2      	; 0x805c <__mulsf3+0x12>
    805a:	92 cf       	rjmp	.-220    	; 0x7f80 <__fp_inf>
    805c:	97 cf       	rjmp	.-210    	; 0x7f8c <__fp_nan>
    805e:	11 24       	eor	r1, r1
    8060:	ea cf       	rjmp	.-44     	; 0x8036 <__fp_szero>

00008062 <__mulsf3x>:
    8062:	c6 df       	rcall	.-116    	; 0x7ff0 <__fp_split3>
    8064:	a0 f3       	brcs	.-24     	; 0x804e <__mulsf3+0x4>

00008066 <__mulsf3_pse>:
    8066:	95 9f       	mul	r25, r21
    8068:	d1 f3       	breq	.-12     	; 0x805e <__mulsf3+0x14>
    806a:	95 0f       	add	r25, r21
    806c:	50 e0       	ldi	r21, 0x00	; 0
    806e:	55 1f       	adc	r21, r21
    8070:	62 9f       	mul	r22, r18
    8072:	f0 01       	movw	r30, r0
    8074:	72 9f       	mul	r23, r18
    8076:	bb 27       	eor	r27, r27
    8078:	f0 0d       	add	r31, r0
    807a:	b1 1d       	adc	r27, r1
    807c:	63 9f       	mul	r22, r19
    807e:	aa 27       	eor	r26, r26
    8080:	f0 0d       	add	r31, r0
    8082:	b1 1d       	adc	r27, r1
    8084:	aa 1f       	adc	r26, r26
    8086:	64 9f       	mul	r22, r20
    8088:	66 27       	eor	r22, r22
    808a:	b0 0d       	add	r27, r0
    808c:	a1 1d       	adc	r26, r1
    808e:	66 1f       	adc	r22, r22
    8090:	82 9f       	mul	r24, r18
    8092:	22 27       	eor	r18, r18
    8094:	b0 0d       	add	r27, r0
    8096:	a1 1d       	adc	r26, r1
    8098:	62 1f       	adc	r22, r18
    809a:	73 9f       	mul	r23, r19
    809c:	b0 0d       	add	r27, r0
    809e:	a1 1d       	adc	r26, r1
    80a0:	62 1f       	adc	r22, r18
    80a2:	83 9f       	mul	r24, r19
    80a4:	a0 0d       	add	r26, r0
    80a6:	61 1d       	adc	r22, r1
    80a8:	22 1f       	adc	r18, r18
    80aa:	74 9f       	mul	r23, r20
    80ac:	33 27       	eor	r19, r19
    80ae:	a0 0d       	add	r26, r0
    80b0:	61 1d       	adc	r22, r1
    80b2:	23 1f       	adc	r18, r19
    80b4:	84 9f       	mul	r24, r20
    80b6:	60 0d       	add	r22, r0
    80b8:	21 1d       	adc	r18, r1
    80ba:	82 2f       	mov	r24, r18
    80bc:	76 2f       	mov	r23, r22
    80be:	6a 2f       	mov	r22, r26
    80c0:	11 24       	eor	r1, r1
    80c2:	9f 57       	subi	r25, 0x7F	; 127
    80c4:	50 40       	sbci	r21, 0x00	; 0
    80c6:	8a f0       	brmi	.+34     	; 0x80ea <__mulsf3_pse+0x84>
    80c8:	e1 f0       	breq	.+56     	; 0x8102 <__mulsf3_pse+0x9c>
    80ca:	88 23       	and	r24, r24
    80cc:	4a f0       	brmi	.+18     	; 0x80e0 <__mulsf3_pse+0x7a>
    80ce:	ee 0f       	add	r30, r30
    80d0:	ff 1f       	adc	r31, r31
    80d2:	bb 1f       	adc	r27, r27
    80d4:	66 1f       	adc	r22, r22
    80d6:	77 1f       	adc	r23, r23
    80d8:	88 1f       	adc	r24, r24
    80da:	91 50       	subi	r25, 0x01	; 1
    80dc:	50 40       	sbci	r21, 0x00	; 0
    80de:	a9 f7       	brne	.-22     	; 0x80ca <__mulsf3_pse+0x64>
    80e0:	9e 3f       	cpi	r25, 0xFE	; 254
    80e2:	51 05       	cpc	r21, r1
    80e4:	70 f0       	brcs	.+28     	; 0x8102 <__mulsf3_pse+0x9c>
    80e6:	4c cf       	rjmp	.-360    	; 0x7f80 <__fp_inf>
    80e8:	a6 cf       	rjmp	.-180    	; 0x8036 <__fp_szero>
    80ea:	5f 3f       	cpi	r21, 0xFF	; 255
    80ec:	ec f3       	brlt	.-6      	; 0x80e8 <__mulsf3_pse+0x82>
    80ee:	98 3e       	cpi	r25, 0xE8	; 232
    80f0:	dc f3       	brlt	.-10     	; 0x80e8 <__mulsf3_pse+0x82>
    80f2:	86 95       	lsr	r24
    80f4:	77 95       	ror	r23
    80f6:	67 95       	ror	r22
    80f8:	b7 95       	ror	r27
    80fa:	f7 95       	ror	r31
    80fc:	e7 95       	ror	r30
    80fe:	9f 5f       	subi	r25, 0xFF	; 255
    8100:	c1 f7       	brne	.-16     	; 0x80f2 <__mulsf3_pse+0x8c>
    8102:	fe 2b       	or	r31, r30
    8104:	88 0f       	add	r24, r24
    8106:	91 1d       	adc	r25, r1
    8108:	96 95       	lsr	r25
    810a:	87 95       	ror	r24
    810c:	97 f9       	bld	r25, 7
    810e:	08 95       	ret

00008110 <__mulsi3>:
    8110:	db 01       	movw	r26, r22
    8112:	8f 93       	push	r24
    8114:	9f 93       	push	r25
    8116:	58 d0       	rcall	.+176    	; 0x81c8 <__muluhisi3>
    8118:	bf 91       	pop	r27
    811a:	af 91       	pop	r26
    811c:	a2 9f       	mul	r26, r18
    811e:	80 0d       	add	r24, r0
    8120:	91 1d       	adc	r25, r1
    8122:	a3 9f       	mul	r26, r19
    8124:	90 0d       	add	r25, r0
    8126:	b2 9f       	mul	r27, r18
    8128:	90 0d       	add	r25, r0
    812a:	11 24       	eor	r1, r1
    812c:	08 95       	ret

0000812e <__divmodhi4>:
    812e:	97 fb       	bst	r25, 7
    8130:	07 2e       	mov	r0, r23
    8132:	16 f4       	brtc	.+4      	; 0x8138 <__divmodhi4+0xa>
    8134:	00 94       	com	r0
    8136:	06 d0       	rcall	.+12     	; 0x8144 <__divmodhi4_neg1>
    8138:	77 fd       	sbrc	r23, 7
    813a:	08 d0       	rcall	.+16     	; 0x814c <__divmodhi4_neg2>
    813c:	cb d1       	rcall	.+918    	; 0x84d4 <__udivmodhi4>
    813e:	07 fc       	sbrc	r0, 7
    8140:	05 d0       	rcall	.+10     	; 0x814c <__divmodhi4_neg2>
    8142:	3e f4       	brtc	.+14     	; 0x8152 <__divmodhi4_exit>

00008144 <__divmodhi4_neg1>:
    8144:	90 95       	com	r25
    8146:	81 95       	neg	r24
    8148:	9f 4f       	sbci	r25, 0xFF	; 255
    814a:	08 95       	ret

0000814c <__divmodhi4_neg2>:
    814c:	70 95       	com	r23
    814e:	61 95       	neg	r22
    8150:	7f 4f       	sbci	r23, 0xFF	; 255

00008152 <__divmodhi4_exit>:
    8152:	08 95       	ret

00008154 <__udivmodsi4>:
    8154:	a1 e2       	ldi	r26, 0x21	; 33
    8156:	1a 2e       	mov	r1, r26
    8158:	aa 1b       	sub	r26, r26
    815a:	bb 1b       	sub	r27, r27
    815c:	fd 01       	movw	r30, r26
    815e:	0d c0       	rjmp	.+26     	; 0x817a <__udivmodsi4_ep>

00008160 <__udivmodsi4_loop>:
    8160:	aa 1f       	adc	r26, r26
    8162:	bb 1f       	adc	r27, r27
    8164:	ee 1f       	adc	r30, r30
    8166:	ff 1f       	adc	r31, r31
    8168:	a2 17       	cp	r26, r18
    816a:	b3 07       	cpc	r27, r19
    816c:	e4 07       	cpc	r30, r20
    816e:	f5 07       	cpc	r31, r21
    8170:	20 f0       	brcs	.+8      	; 0x817a <__udivmodsi4_ep>
    8172:	a2 1b       	sub	r26, r18
    8174:	b3 0b       	sbc	r27, r19
    8176:	e4 0b       	sbc	r30, r20
    8178:	f5 0b       	sbc	r31, r21

0000817a <__udivmodsi4_ep>:
    817a:	66 1f       	adc	r22, r22
    817c:	77 1f       	adc	r23, r23
    817e:	88 1f       	adc	r24, r24
    8180:	99 1f       	adc	r25, r25
    8182:	1a 94       	dec	r1
    8184:	69 f7       	brne	.-38     	; 0x8160 <__udivmodsi4_loop>
    8186:	60 95       	com	r22
    8188:	70 95       	com	r23
    818a:	80 95       	com	r24
    818c:	90 95       	com	r25
    818e:	9b 01       	movw	r18, r22
    8190:	ac 01       	movw	r20, r24
    8192:	bd 01       	movw	r22, r26
    8194:	cf 01       	movw	r24, r30
    8196:	08 95       	ret

00008198 <__tablejump2__>:
    8198:	ee 0f       	add	r30, r30
    819a:	ff 1f       	adc	r31, r31
    819c:	00 24       	eor	r0, r0
    819e:	00 1c       	adc	r0, r0
    81a0:	0b be       	out	0x3b, r0	; 59
    81a2:	07 90       	elpm	r0, Z+
    81a4:	f6 91       	elpm	r31, Z
    81a6:	e0 2d       	mov	r30, r0
    81a8:	09 94       	ijmp

000081aa <__umulhisi3>:
    81aa:	a2 9f       	mul	r26, r18
    81ac:	b0 01       	movw	r22, r0
    81ae:	b3 9f       	mul	r27, r19
    81b0:	c0 01       	movw	r24, r0
    81b2:	a3 9f       	mul	r26, r19
    81b4:	70 0d       	add	r23, r0
    81b6:	81 1d       	adc	r24, r1
    81b8:	11 24       	eor	r1, r1
    81ba:	91 1d       	adc	r25, r1
    81bc:	b2 9f       	mul	r27, r18
    81be:	70 0d       	add	r23, r0
    81c0:	81 1d       	adc	r24, r1
    81c2:	11 24       	eor	r1, r1
    81c4:	91 1d       	adc	r25, r1
    81c6:	08 95       	ret

000081c8 <__muluhisi3>:
    81c8:	f0 df       	rcall	.-32     	; 0x81aa <__umulhisi3>
    81ca:	a5 9f       	mul	r26, r21
    81cc:	90 0d       	add	r25, r0
    81ce:	b4 9f       	mul	r27, r20
    81d0:	90 0d       	add	r25, r0
    81d2:	a4 9f       	mul	r26, r20
    81d4:	80 0d       	add	r24, r0
    81d6:	91 1d       	adc	r25, r1
    81d8:	11 24       	eor	r1, r1
    81da:	08 95       	ret

000081dc <__mulshisi3>:
    81dc:	b7 ff       	sbrs	r27, 7
    81de:	f4 cf       	rjmp	.-24     	; 0x81c8 <__muluhisi3>

000081e0 <__mulohisi3>:
    81e0:	f3 df       	rcall	.-26     	; 0x81c8 <__muluhisi3>
    81e2:	82 1b       	sub	r24, r18
    81e4:	93 0b       	sbc	r25, r19
    81e6:	08 95       	ret

000081e8 <__muldi3>:
    81e8:	df 93       	push	r29
    81ea:	cf 93       	push	r28
    81ec:	1f 93       	push	r17
    81ee:	0f 93       	push	r16
    81f0:	9a 9d       	mul	r25, r10
    81f2:	f0 2d       	mov	r31, r0
    81f4:	21 9f       	mul	r18, r17
    81f6:	f0 0d       	add	r31, r0
    81f8:	8b 9d       	mul	r24, r11
    81fa:	f0 0d       	add	r31, r0
    81fc:	8a 9d       	mul	r24, r10
    81fe:	e0 2d       	mov	r30, r0
    8200:	f1 0d       	add	r31, r1
    8202:	03 9f       	mul	r16, r19
    8204:	f0 0d       	add	r31, r0
    8206:	02 9f       	mul	r16, r18
    8208:	e0 0d       	add	r30, r0
    820a:	f1 1d       	adc	r31, r1
    820c:	4e 9d       	mul	r20, r14
    820e:	e0 0d       	add	r30, r0
    8210:	f1 1d       	adc	r31, r1
    8212:	5e 9d       	mul	r21, r14
    8214:	f0 0d       	add	r31, r0
    8216:	4f 9d       	mul	r20, r15
    8218:	f0 0d       	add	r31, r0
    821a:	7f 93       	push	r23
    821c:	6f 93       	push	r22
    821e:	bf 92       	push	r11
    8220:	af 92       	push	r10
    8222:	5f 93       	push	r21
    8224:	4f 93       	push	r20
    8226:	d5 01       	movw	r26, r10
    8228:	c0 df       	rcall	.-128    	; 0x81aa <__umulhisi3>
    822a:	8b 01       	movw	r16, r22
    822c:	ac 01       	movw	r20, r24
    822e:	d7 01       	movw	r26, r14
    8230:	bc df       	rcall	.-136    	; 0x81aa <__umulhisi3>
    8232:	eb 01       	movw	r28, r22
    8234:	e8 0f       	add	r30, r24
    8236:	f9 1f       	adc	r31, r25
    8238:	d6 01       	movw	r26, r12
    823a:	1f d0       	rcall	.+62     	; 0x827a <__muldi3_6>
    823c:	2f 91       	pop	r18
    823e:	3f 91       	pop	r19
    8240:	d6 01       	movw	r26, r12
    8242:	b3 df       	rcall	.-154    	; 0x81aa <__umulhisi3>
    8244:	c6 0f       	add	r28, r22
    8246:	d7 1f       	adc	r29, r23
    8248:	e8 1f       	adc	r30, r24
    824a:	f9 1f       	adc	r31, r25
    824c:	af 91       	pop	r26
    824e:	bf 91       	pop	r27
    8250:	14 d0       	rcall	.+40     	; 0x827a <__muldi3_6>
    8252:	2f 91       	pop	r18
    8254:	3f 91       	pop	r19
    8256:	a9 df       	rcall	.-174    	; 0x81aa <__umulhisi3>
    8258:	c6 0f       	add	r28, r22
    825a:	d7 1f       	adc	r29, r23
    825c:	e8 1f       	adc	r30, r24
    825e:	f9 1f       	adc	r31, r25
    8260:	d6 01       	movw	r26, r12
    8262:	a3 df       	rcall	.-186    	; 0x81aa <__umulhisi3>
    8264:	e6 0f       	add	r30, r22
    8266:	f7 1f       	adc	r31, r23
    8268:	98 01       	movw	r18, r16
    826a:	be 01       	movw	r22, r28
    826c:	cf 01       	movw	r24, r30
    826e:	11 24       	eor	r1, r1
    8270:	0f 91       	pop	r16
    8272:	1f 91       	pop	r17
    8274:	cf 91       	pop	r28
    8276:	df 91       	pop	r29
    8278:	08 95       	ret

0000827a <__muldi3_6>:
    827a:	97 df       	rcall	.-210    	; 0x81aa <__umulhisi3>
    827c:	46 0f       	add	r20, r22
    827e:	57 1f       	adc	r21, r23
    8280:	c8 1f       	adc	r28, r24
    8282:	d9 1f       	adc	r29, r25
    8284:	08 f4       	brcc	.+2      	; 0x8288 <__muldi3_6+0xe>
    8286:	31 96       	adiw	r30, 0x01	; 1
    8288:	08 95       	ret

0000828a <__moddi3>:
    828a:	68 94       	set
    828c:	01 c0       	rjmp	.+2      	; 0x8290 <__divdi3_moddi3>

0000828e <__divdi3>:
    828e:	e8 94       	clt

00008290 <__divdi3_moddi3>:
    8290:	f9 2f       	mov	r31, r25
    8292:	f1 2b       	or	r31, r17
    8294:	0a f0       	brmi	.+2      	; 0x8298 <__divdi3_moddi3+0x8>
    8296:	27 c0       	rjmp	.+78     	; 0x82e6 <__udivdi3_umoddi3>
    8298:	a0 e0       	ldi	r26, 0x00	; 0
    829a:	b0 e0       	ldi	r27, 0x00	; 0
    829c:	e1 e5       	ldi	r30, 0x51	; 81
    829e:	f1 e4       	ldi	r31, 0x41	; 65
    82a0:	93 c0       	rjmp	.+294    	; 0x83c8 <__prologue_saves__+0xc>
    82a2:	09 2e       	mov	r0, r25
    82a4:	05 94       	asr	r0
    82a6:	1a f4       	brpl	.+6      	; 0x82ae <__divdi3_moddi3+0x1e>
    82a8:	79 d0       	rcall	.+242    	; 0x839c <__negdi2>
    82aa:	11 23       	and	r17, r17
    82ac:	92 f4       	brpl	.+36     	; 0x82d2 <__divdi3_moddi3+0x42>
    82ae:	f0 e8       	ldi	r31, 0x80	; 128
    82b0:	0f 26       	eor	r0, r31
    82b2:	ff ef       	ldi	r31, 0xFF	; 255
    82b4:	e0 94       	com	r14
    82b6:	f0 94       	com	r15
    82b8:	00 95       	com	r16
    82ba:	10 95       	com	r17
    82bc:	b0 94       	com	r11
    82be:	c0 94       	com	r12
    82c0:	d0 94       	com	r13
    82c2:	a1 94       	neg	r10
    82c4:	bf 0a       	sbc	r11, r31
    82c6:	cf 0a       	sbc	r12, r31
    82c8:	df 0a       	sbc	r13, r31
    82ca:	ef 0a       	sbc	r14, r31
    82cc:	ff 0a       	sbc	r15, r31
    82ce:	0f 0b       	sbc	r16, r31
    82d0:	1f 0b       	sbc	r17, r31
    82d2:	13 d0       	rcall	.+38     	; 0x82fa <__udivmod64>
    82d4:	07 fc       	sbrc	r0, 7
    82d6:	62 d0       	rcall	.+196    	; 0x839c <__negdi2>
    82d8:	cd b7       	in	r28, 0x3d	; 61
    82da:	de b7       	in	r29, 0x3e	; 62
    82dc:	ec e0       	ldi	r30, 0x0C	; 12
    82de:	90 c0       	rjmp	.+288    	; 0x8400 <__epilogue_restores__+0xc>

000082e0 <__umoddi3>:
    82e0:	68 94       	set
    82e2:	01 c0       	rjmp	.+2      	; 0x82e6 <__udivdi3_umoddi3>

000082e4 <__udivdi3>:
    82e4:	e8 94       	clt

000082e6 <__udivdi3_umoddi3>:
    82e6:	8f 92       	push	r8
    82e8:	9f 92       	push	r9
    82ea:	cf 93       	push	r28
    82ec:	df 93       	push	r29
    82ee:	05 d0       	rcall	.+10     	; 0x82fa <__udivmod64>
    82f0:	df 91       	pop	r29
    82f2:	cf 91       	pop	r28
    82f4:	9f 90       	pop	r9
    82f6:	8f 90       	pop	r8
    82f8:	08 95       	ret

000082fa <__udivmod64>:
    82fa:	88 24       	eor	r8, r8
    82fc:	99 24       	eor	r9, r9
    82fe:	f4 01       	movw	r30, r8
    8300:	e4 01       	movw	r28, r8
    8302:	b0 e4       	ldi	r27, 0x40	; 64
    8304:	9f 93       	push	r25
    8306:	aa 27       	eor	r26, r26
    8308:	9a 15       	cp	r25, r10
    830a:	8b 04       	cpc	r8, r11
    830c:	9c 04       	cpc	r9, r12
    830e:	ed 05       	cpc	r30, r13
    8310:	fe 05       	cpc	r31, r14
    8312:	cf 05       	cpc	r28, r15
    8314:	d0 07       	cpc	r29, r16
    8316:	a1 07       	cpc	r26, r17
    8318:	98 f4       	brcc	.+38     	; 0x8340 <__udivmod64+0x46>
    831a:	ad 2f       	mov	r26, r29
    831c:	dc 2f       	mov	r29, r28
    831e:	cf 2f       	mov	r28, r31
    8320:	fe 2f       	mov	r31, r30
    8322:	e9 2d       	mov	r30, r9
    8324:	98 2c       	mov	r9, r8
    8326:	89 2e       	mov	r8, r25
    8328:	98 2f       	mov	r25, r24
    832a:	87 2f       	mov	r24, r23
    832c:	76 2f       	mov	r23, r22
    832e:	65 2f       	mov	r22, r21
    8330:	54 2f       	mov	r21, r20
    8332:	43 2f       	mov	r20, r19
    8334:	32 2f       	mov	r19, r18
    8336:	22 27       	eor	r18, r18
    8338:	b8 50       	subi	r27, 0x08	; 8
    833a:	31 f7       	brne	.-52     	; 0x8308 <__udivmod64+0xe>
    833c:	bf 91       	pop	r27
    833e:	27 c0       	rjmp	.+78     	; 0x838e <__udivmod64+0x94>
    8340:	1b 2e       	mov	r1, r27
    8342:	bf 91       	pop	r27
    8344:	bb 27       	eor	r27, r27
    8346:	22 0f       	add	r18, r18
    8348:	33 1f       	adc	r19, r19
    834a:	44 1f       	adc	r20, r20
    834c:	55 1f       	adc	r21, r21
    834e:	66 1f       	adc	r22, r22
    8350:	77 1f       	adc	r23, r23
    8352:	88 1f       	adc	r24, r24
    8354:	99 1f       	adc	r25, r25
    8356:	88 1c       	adc	r8, r8
    8358:	99 1c       	adc	r9, r9
    835a:	ee 1f       	adc	r30, r30
    835c:	ff 1f       	adc	r31, r31
    835e:	cc 1f       	adc	r28, r28
    8360:	dd 1f       	adc	r29, r29
    8362:	aa 1f       	adc	r26, r26
    8364:	bb 1f       	adc	r27, r27
    8366:	8a 14       	cp	r8, r10
    8368:	9b 04       	cpc	r9, r11
    836a:	ec 05       	cpc	r30, r12
    836c:	fd 05       	cpc	r31, r13
    836e:	ce 05       	cpc	r28, r14
    8370:	df 05       	cpc	r29, r15
    8372:	a0 07       	cpc	r26, r16
    8374:	b1 07       	cpc	r27, r17
    8376:	48 f0       	brcs	.+18     	; 0x838a <__udivmod64+0x90>
    8378:	8a 18       	sub	r8, r10
    837a:	9b 08       	sbc	r9, r11
    837c:	ec 09       	sbc	r30, r12
    837e:	fd 09       	sbc	r31, r13
    8380:	ce 09       	sbc	r28, r14
    8382:	df 09       	sbc	r29, r15
    8384:	a0 0b       	sbc	r26, r16
    8386:	b1 0b       	sbc	r27, r17
    8388:	21 60       	ori	r18, 0x01	; 1
    838a:	1a 94       	dec	r1
    838c:	e1 f6       	brne	.-72     	; 0x8346 <__udivmod64+0x4c>
    838e:	2e f4       	brtc	.+10     	; 0x839a <__udivmod64+0xa0>
    8390:	94 01       	movw	r18, r8
    8392:	af 01       	movw	r20, r30
    8394:	be 01       	movw	r22, r28
    8396:	cd 01       	movw	r24, r26
    8398:	00 0c       	add	r0, r0
    839a:	08 95       	ret

0000839c <__negdi2>:
    839c:	60 95       	com	r22
    839e:	70 95       	com	r23
    83a0:	80 95       	com	r24
    83a2:	90 95       	com	r25
    83a4:	30 95       	com	r19
    83a6:	40 95       	com	r20
    83a8:	50 95       	com	r21
    83aa:	21 95       	neg	r18
    83ac:	3f 4f       	sbci	r19, 0xFF	; 255
    83ae:	4f 4f       	sbci	r20, 0xFF	; 255
    83b0:	5f 4f       	sbci	r21, 0xFF	; 255
    83b2:	6f 4f       	sbci	r22, 0xFF	; 255
    83b4:	7f 4f       	sbci	r23, 0xFF	; 255
    83b6:	8f 4f       	sbci	r24, 0xFF	; 255
    83b8:	9f 4f       	sbci	r25, 0xFF	; 255
    83ba:	08 95       	ret

000083bc <__prologue_saves__>:
    83bc:	2f 92       	push	r2
    83be:	3f 92       	push	r3
    83c0:	4f 92       	push	r4
    83c2:	5f 92       	push	r5
    83c4:	6f 92       	push	r6
    83c6:	7f 92       	push	r7
    83c8:	8f 92       	push	r8
    83ca:	9f 92       	push	r9
    83cc:	af 92       	push	r10
    83ce:	bf 92       	push	r11
    83d0:	cf 92       	push	r12
    83d2:	df 92       	push	r13
    83d4:	ef 92       	push	r14
    83d6:	ff 92       	push	r15
    83d8:	0f 93       	push	r16
    83da:	1f 93       	push	r17
    83dc:	cf 93       	push	r28
    83de:	df 93       	push	r29
    83e0:	cd b7       	in	r28, 0x3d	; 61
    83e2:	de b7       	in	r29, 0x3e	; 62
    83e4:	ca 1b       	sub	r28, r26
    83e6:	db 0b       	sbc	r29, r27
    83e8:	0f b6       	in	r0, 0x3f	; 63
    83ea:	f8 94       	cli
    83ec:	de bf       	out	0x3e, r29	; 62
    83ee:	0f be       	out	0x3f, r0	; 63
    83f0:	cd bf       	out	0x3d, r28	; 61
    83f2:	09 94       	ijmp

000083f4 <__epilogue_restores__>:
    83f4:	2a 88       	ldd	r2, Y+18	; 0x12
    83f6:	39 88       	ldd	r3, Y+17	; 0x11
    83f8:	48 88       	ldd	r4, Y+16	; 0x10
    83fa:	5f 84       	ldd	r5, Y+15	; 0x0f
    83fc:	6e 84       	ldd	r6, Y+14	; 0x0e
    83fe:	7d 84       	ldd	r7, Y+13	; 0x0d
    8400:	8c 84       	ldd	r8, Y+12	; 0x0c
    8402:	9b 84       	ldd	r9, Y+11	; 0x0b
    8404:	aa 84       	ldd	r10, Y+10	; 0x0a
    8406:	b9 84       	ldd	r11, Y+9	; 0x09
    8408:	c8 84       	ldd	r12, Y+8	; 0x08
    840a:	df 80       	ldd	r13, Y+7	; 0x07
    840c:	ee 80       	ldd	r14, Y+6	; 0x06
    840e:	fd 80       	ldd	r15, Y+5	; 0x05
    8410:	0c 81       	ldd	r16, Y+4	; 0x04
    8412:	1b 81       	ldd	r17, Y+3	; 0x03
    8414:	aa 81       	ldd	r26, Y+2	; 0x02
    8416:	b9 81       	ldd	r27, Y+1	; 0x01
    8418:	ce 0f       	add	r28, r30
    841a:	d1 1d       	adc	r29, r1
    841c:	0f b6       	in	r0, 0x3f	; 63
    841e:	f8 94       	cli
    8420:	de bf       	out	0x3e, r29	; 62
    8422:	0f be       	out	0x3f, r0	; 63
    8424:	cd bf       	out	0x3d, r28	; 61
    8426:	ed 01       	movw	r28, r26
    8428:	08 95       	ret

0000842a <__ashldi3>:
    842a:	0f 93       	push	r16
    842c:	08 30       	cpi	r16, 0x08	; 8
    842e:	90 f0       	brcs	.+36     	; 0x8454 <__ashldi3+0x2a>
    8430:	98 2f       	mov	r25, r24
    8432:	87 2f       	mov	r24, r23
    8434:	76 2f       	mov	r23, r22
    8436:	65 2f       	mov	r22, r21
    8438:	54 2f       	mov	r21, r20
    843a:	43 2f       	mov	r20, r19
    843c:	32 2f       	mov	r19, r18
    843e:	22 27       	eor	r18, r18
    8440:	08 50       	subi	r16, 0x08	; 8
    8442:	f4 cf       	rjmp	.-24     	; 0x842c <__ashldi3+0x2>
    8444:	22 0f       	add	r18, r18
    8446:	33 1f       	adc	r19, r19
    8448:	44 1f       	adc	r20, r20
    844a:	55 1f       	adc	r21, r21
    844c:	66 1f       	adc	r22, r22
    844e:	77 1f       	adc	r23, r23
    8450:	88 1f       	adc	r24, r24
    8452:	99 1f       	adc	r25, r25
    8454:	0a 95       	dec	r16
    8456:	b2 f7       	brpl	.-20     	; 0x8444 <__ashldi3+0x1a>
    8458:	0f 91       	pop	r16
    845a:	08 95       	ret

0000845c <__ashrdi3>:
    845c:	97 fb       	bst	r25, 7
    845e:	10 f8       	bld	r1, 0

00008460 <__lshrdi3>:
    8460:	16 94       	lsr	r1
    8462:	00 08       	sbc	r0, r0
    8464:	0f 93       	push	r16
    8466:	08 30       	cpi	r16, 0x08	; 8
    8468:	98 f0       	brcs	.+38     	; 0x8490 <__lshrdi3+0x30>
    846a:	08 50       	subi	r16, 0x08	; 8
    846c:	23 2f       	mov	r18, r19
    846e:	34 2f       	mov	r19, r20
    8470:	45 2f       	mov	r20, r21
    8472:	56 2f       	mov	r21, r22
    8474:	67 2f       	mov	r22, r23
    8476:	78 2f       	mov	r23, r24
    8478:	89 2f       	mov	r24, r25
    847a:	90 2d       	mov	r25, r0
    847c:	f4 cf       	rjmp	.-24     	; 0x8466 <__lshrdi3+0x6>
    847e:	05 94       	asr	r0
    8480:	97 95       	ror	r25
    8482:	87 95       	ror	r24
    8484:	77 95       	ror	r23
    8486:	67 95       	ror	r22
    8488:	57 95       	ror	r21
    848a:	47 95       	ror	r20
    848c:	37 95       	ror	r19
    848e:	27 95       	ror	r18
    8490:	0a 95       	dec	r16
    8492:	aa f7       	brpl	.-22     	; 0x847e <__lshrdi3+0x1e>
    8494:	0f 91       	pop	r16
    8496:	08 95       	ret

00008498 <__adddi3>:
    8498:	2a 0d       	add	r18, r10
    849a:	3b 1d       	adc	r19, r11
    849c:	4c 1d       	adc	r20, r12
    849e:	5d 1d       	adc	r21, r13
    84a0:	6e 1d       	adc	r22, r14
    84a2:	7f 1d       	adc	r23, r15
    84a4:	80 1f       	adc	r24, r16
    84a6:	91 1f       	adc	r25, r17
    84a8:	08 95       	ret

000084aa <__subdi3>:
    84aa:	2a 19       	sub	r18, r10
    84ac:	3b 09       	sbc	r19, r11
    84ae:	4c 09       	sbc	r20, r12
    84b0:	5d 09       	sbc	r21, r13
    84b2:	6e 09       	sbc	r22, r14
    84b4:	7f 09       	sbc	r23, r15
    84b6:	80 0b       	sbc	r24, r16
    84b8:	91 0b       	sbc	r25, r17
    84ba:	08 95       	ret

000084bc <__cmpdi2_s8>:
    84bc:	00 24       	eor	r0, r0
    84be:	a7 fd       	sbrc	r26, 7
    84c0:	00 94       	com	r0
    84c2:	2a 17       	cp	r18, r26
    84c4:	30 05       	cpc	r19, r0
    84c6:	40 05       	cpc	r20, r0
    84c8:	50 05       	cpc	r21, r0
    84ca:	60 05       	cpc	r22, r0
    84cc:	70 05       	cpc	r23, r0
    84ce:	80 05       	cpc	r24, r0
    84d0:	90 05       	cpc	r25, r0
    84d2:	08 95       	ret

000084d4 <__udivmodhi4>:
    84d4:	aa 1b       	sub	r26, r26
    84d6:	bb 1b       	sub	r27, r27
    84d8:	51 e1       	ldi	r21, 0x11	; 17
    84da:	07 c0       	rjmp	.+14     	; 0x84ea <__udivmodhi4_ep>

000084dc <__udivmodhi4_loop>:
    84dc:	aa 1f       	adc	r26, r26
    84de:	bb 1f       	adc	r27, r27
    84e0:	a6 17       	cp	r26, r22
    84e2:	b7 07       	cpc	r27, r23
    84e4:	10 f0       	brcs	.+4      	; 0x84ea <__udivmodhi4_ep>
    84e6:	a6 1b       	sub	r26, r22
    84e8:	b7 0b       	sbc	r27, r23

000084ea <__udivmodhi4_ep>:
    84ea:	88 1f       	adc	r24, r24
    84ec:	99 1f       	adc	r25, r25
    84ee:	5a 95       	dec	r21
    84f0:	a9 f7       	brne	.-22     	; 0x84dc <__udivmodhi4_loop>
    84f2:	80 95       	com	r24
    84f4:	90 95       	com	r25
    84f6:	bc 01       	movw	r22, r24
    84f8:	cd 01       	movw	r24, r26
    84fa:	08 95       	ret

000084fc <dtostrf>:
    84fc:	ef 92       	push	r14
    84fe:	0f 93       	push	r16
    8500:	1f 93       	push	r17
    8502:	cf 93       	push	r28
    8504:	df 93       	push	r29
    8506:	e8 01       	movw	r28, r16
    8508:	47 fd       	sbrc	r20, 7
    850a:	02 c0       	rjmp	.+4      	; 0x8510 <dtostrf+0x14>
    850c:	34 e0       	ldi	r19, 0x04	; 4
    850e:	01 c0       	rjmp	.+2      	; 0x8512 <dtostrf+0x16>
    8510:	34 e1       	ldi	r19, 0x14	; 20
    8512:	04 2e       	mov	r0, r20
    8514:	00 0c       	add	r0, r0
    8516:	55 0b       	sbc	r21, r21
    8518:	57 ff       	sbrs	r21, 7
    851a:	03 c0       	rjmp	.+6      	; 0x8522 <dtostrf+0x26>
    851c:	51 95       	neg	r21
    851e:	41 95       	neg	r20
    8520:	51 09       	sbc	r21, r1
    8522:	e3 2e       	mov	r14, r19
    8524:	02 2f       	mov	r16, r18
    8526:	24 2f       	mov	r18, r20
    8528:	ae 01       	movw	r20, r28
    852a:	f1 d7       	rcall	.+4066   	; 0x950e <dtoa_prf>
    852c:	ce 01       	movw	r24, r28
    852e:	df 91       	pop	r29
    8530:	cf 91       	pop	r28
    8532:	1f 91       	pop	r17
    8534:	0f 91       	pop	r16
    8536:	ef 90       	pop	r14
    8538:	08 95       	ret

0000853a <do_rand>:
    853a:	8f 92       	push	r8
    853c:	9f 92       	push	r9
    853e:	af 92       	push	r10
    8540:	bf 92       	push	r11
    8542:	cf 92       	push	r12
    8544:	df 92       	push	r13
    8546:	ef 92       	push	r14
    8548:	ff 92       	push	r15
    854a:	cf 93       	push	r28
    854c:	df 93       	push	r29
    854e:	ec 01       	movw	r28, r24
    8550:	68 81       	ld	r22, Y
    8552:	79 81       	ldd	r23, Y+1	; 0x01
    8554:	8a 81       	ldd	r24, Y+2	; 0x02
    8556:	9b 81       	ldd	r25, Y+3	; 0x03
    8558:	61 15       	cp	r22, r1
    855a:	71 05       	cpc	r23, r1
    855c:	81 05       	cpc	r24, r1
    855e:	91 05       	cpc	r25, r1
    8560:	21 f4       	brne	.+8      	; 0x856a <do_rand+0x30>
    8562:	64 e2       	ldi	r22, 0x24	; 36
    8564:	79 ed       	ldi	r23, 0xD9	; 217
    8566:	8b e5       	ldi	r24, 0x5B	; 91
    8568:	97 e0       	ldi	r25, 0x07	; 7
    856a:	2d e1       	ldi	r18, 0x1D	; 29
    856c:	33 ef       	ldi	r19, 0xF3	; 243
    856e:	41 e0       	ldi	r20, 0x01	; 1
    8570:	50 e0       	ldi	r21, 0x00	; 0
    8572:	0e 94 30 4e 	call	0x9c60	; 0x9c60 <__divmodsi4>
    8576:	49 01       	movw	r8, r18
    8578:	5a 01       	movw	r10, r20
    857a:	9b 01       	movw	r18, r22
    857c:	ac 01       	movw	r20, r24
    857e:	a7 ea       	ldi	r26, 0xA7	; 167
    8580:	b1 e4       	ldi	r27, 0x41	; 65
    8582:	22 de       	rcall	.-956    	; 0x81c8 <__muluhisi3>
    8584:	6b 01       	movw	r12, r22
    8586:	7c 01       	movw	r14, r24
    8588:	ac ee       	ldi	r26, 0xEC	; 236
    858a:	b4 ef       	ldi	r27, 0xF4	; 244
    858c:	a5 01       	movw	r20, r10
    858e:	94 01       	movw	r18, r8
    8590:	27 de       	rcall	.-946    	; 0x81e0 <__mulohisi3>
    8592:	dc 01       	movw	r26, r24
    8594:	cb 01       	movw	r24, r22
    8596:	8c 0d       	add	r24, r12
    8598:	9d 1d       	adc	r25, r13
    859a:	ae 1d       	adc	r26, r14
    859c:	bf 1d       	adc	r27, r15
    859e:	b7 ff       	sbrs	r27, 7
    85a0:	03 c0       	rjmp	.+6      	; 0x85a8 <do_rand+0x6e>
    85a2:	01 97       	sbiw	r24, 0x01	; 1
    85a4:	a1 09       	sbc	r26, r1
    85a6:	b0 48       	sbci	r27, 0x80	; 128
    85a8:	88 83       	st	Y, r24
    85aa:	99 83       	std	Y+1, r25	; 0x01
    85ac:	aa 83       	std	Y+2, r26	; 0x02
    85ae:	bb 83       	std	Y+3, r27	; 0x03
    85b0:	9f 77       	andi	r25, 0x7F	; 127
    85b2:	df 91       	pop	r29
    85b4:	cf 91       	pop	r28
    85b6:	ff 90       	pop	r15
    85b8:	ef 90       	pop	r14
    85ba:	df 90       	pop	r13
    85bc:	cf 90       	pop	r12
    85be:	bf 90       	pop	r11
    85c0:	af 90       	pop	r10
    85c2:	9f 90       	pop	r9
    85c4:	8f 90       	pop	r8
    85c6:	08 95       	ret

000085c8 <rand_r>:
    85c8:	b8 cf       	rjmp	.-144    	; 0x853a <do_rand>

000085ca <rand>:
    85ca:	80 e0       	ldi	r24, 0x00	; 0
    85cc:	91 e0       	ldi	r25, 0x01	; 1
    85ce:	b5 cf       	rjmp	.-150    	; 0x853a <do_rand>

000085d0 <srand>:
    85d0:	a0 e0       	ldi	r26, 0x00	; 0
    85d2:	b0 e0       	ldi	r27, 0x00	; 0
    85d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    85d8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    85dc:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    85e0:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    85e4:	08 95       	ret

000085e6 <strtol>:
    85e6:	3f 92       	push	r3
    85e8:	4f 92       	push	r4
    85ea:	5f 92       	push	r5
    85ec:	6f 92       	push	r6
    85ee:	7f 92       	push	r7
    85f0:	8f 92       	push	r8
    85f2:	9f 92       	push	r9
    85f4:	af 92       	push	r10
    85f6:	bf 92       	push	r11
    85f8:	cf 92       	push	r12
    85fa:	df 92       	push	r13
    85fc:	ef 92       	push	r14
    85fe:	ff 92       	push	r15
    8600:	0f 93       	push	r16
    8602:	1f 93       	push	r17
    8604:	cf 93       	push	r28
    8606:	df 93       	push	r29
    8608:	5c 01       	movw	r10, r24
    860a:	6b 01       	movw	r12, r22
    860c:	7a 01       	movw	r14, r20
    860e:	61 15       	cp	r22, r1
    8610:	71 05       	cpc	r23, r1
    8612:	19 f0       	breq	.+6      	; 0x861a <strtol+0x34>
    8614:	fb 01       	movw	r30, r22
    8616:	91 83       	std	Z+1, r25	; 0x01
    8618:	80 83       	st	Z, r24
    861a:	e1 14       	cp	r14, r1
    861c:	f1 04       	cpc	r15, r1
    861e:	29 f0       	breq	.+10     	; 0x862a <strtol+0x44>
    8620:	c7 01       	movw	r24, r14
    8622:	02 97       	sbiw	r24, 0x02	; 2
    8624:	83 97       	sbiw	r24, 0x23	; 35
    8626:	08 f0       	brcs	.+2      	; 0x862a <strtol+0x44>
    8628:	e2 c0       	rjmp	.+452    	; 0x87ee <strtol+0x208>
    862a:	e5 01       	movw	r28, r10
    862c:	21 96       	adiw	r28, 0x01	; 1
    862e:	f5 01       	movw	r30, r10
    8630:	10 81       	ld	r17, Z
    8632:	81 2f       	mov	r24, r17
    8634:	90 e0       	ldi	r25, 0x00	; 0
    8636:	22 d1       	rcall	.+580    	; 0x887c <isspace>
    8638:	89 2b       	or	r24, r25
    863a:	11 f0       	breq	.+4      	; 0x8640 <strtol+0x5a>
    863c:	5e 01       	movw	r10, r28
    863e:	f5 cf       	rjmp	.-22     	; 0x862a <strtol+0x44>
    8640:	1d 32       	cpi	r17, 0x2D	; 45
    8642:	29 f4       	brne	.+10     	; 0x864e <strtol+0x68>
    8644:	21 96       	adiw	r28, 0x01	; 1
    8646:	f5 01       	movw	r30, r10
    8648:	11 81       	ldd	r17, Z+1	; 0x01
    864a:	01 e0       	ldi	r16, 0x01	; 1
    864c:	07 c0       	rjmp	.+14     	; 0x865c <strtol+0x76>
    864e:	1b 32       	cpi	r17, 0x2B	; 43
    8650:	21 f4       	brne	.+8      	; 0x865a <strtol+0x74>
    8652:	e5 01       	movw	r28, r10
    8654:	22 96       	adiw	r28, 0x02	; 2
    8656:	f5 01       	movw	r30, r10
    8658:	11 81       	ldd	r17, Z+1	; 0x01
    865a:	00 e0       	ldi	r16, 0x00	; 0
    865c:	e1 14       	cp	r14, r1
    865e:	f1 04       	cpc	r15, r1
    8660:	09 f1       	breq	.+66     	; 0x86a4 <strtol+0xbe>
    8662:	f0 e1       	ldi	r31, 0x10	; 16
    8664:	ef 16       	cp	r14, r31
    8666:	f1 04       	cpc	r15, r1
    8668:	29 f4       	brne	.+10     	; 0x8674 <strtol+0x8e>
    866a:	3e c0       	rjmp	.+124    	; 0x86e8 <strtol+0x102>
    866c:	10 e3       	ldi	r17, 0x30	; 48
    866e:	e1 14       	cp	r14, r1
    8670:	f1 04       	cpc	r15, r1
    8672:	21 f1       	breq	.+72     	; 0x86bc <strtol+0xd6>
    8674:	28 e0       	ldi	r18, 0x08	; 8
    8676:	e2 16       	cp	r14, r18
    8678:	f1 04       	cpc	r15, r1
    867a:	01 f1       	breq	.+64     	; 0x86bc <strtol+0xd6>
    867c:	54 f4       	brge	.+20     	; 0x8692 <strtol+0xac>
    867e:	e2 e0       	ldi	r30, 0x02	; 2
    8680:	ee 16       	cp	r14, r30
    8682:	f1 04       	cpc	r15, r1
    8684:	21 f5       	brne	.+72     	; 0x86ce <strtol+0xe8>
    8686:	81 2c       	mov	r8, r1
    8688:	91 2c       	mov	r9, r1
    868a:	a1 2c       	mov	r10, r1
    868c:	b0 e4       	ldi	r27, 0x40	; 64
    868e:	bb 2e       	mov	r11, r27
    8690:	3d c0       	rjmp	.+122    	; 0x870c <strtol+0x126>
    8692:	fa e0       	ldi	r31, 0x0A	; 10
    8694:	ef 16       	cp	r14, r31
    8696:	f1 04       	cpc	r15, r1
    8698:	39 f0       	breq	.+14     	; 0x86a8 <strtol+0xc2>
    869a:	20 e1       	ldi	r18, 0x10	; 16
    869c:	e2 16       	cp	r14, r18
    869e:	f1 04       	cpc	r15, r1
    86a0:	b1 f4       	brne	.+44     	; 0x86ce <strtol+0xe8>
    86a2:	2f c0       	rjmp	.+94     	; 0x8702 <strtol+0x11c>
    86a4:	10 33       	cpi	r17, 0x30	; 48
    86a6:	11 f1       	breq	.+68     	; 0x86ec <strtol+0x106>
    86a8:	fa e0       	ldi	r31, 0x0A	; 10
    86aa:	ef 2e       	mov	r14, r31
    86ac:	f1 2c       	mov	r15, r1
    86ae:	ac ec       	ldi	r26, 0xCC	; 204
    86b0:	8a 2e       	mov	r8, r26
    86b2:	98 2c       	mov	r9, r8
    86b4:	a8 2c       	mov	r10, r8
    86b6:	ac e0       	ldi	r26, 0x0C	; 12
    86b8:	ba 2e       	mov	r11, r26
    86ba:	28 c0       	rjmp	.+80     	; 0x870c <strtol+0x126>
    86bc:	78 e0       	ldi	r23, 0x08	; 8
    86be:	e7 2e       	mov	r14, r23
    86c0:	f1 2c       	mov	r15, r1
    86c2:	81 2c       	mov	r8, r1
    86c4:	91 2c       	mov	r9, r1
    86c6:	a1 2c       	mov	r10, r1
    86c8:	e0 e1       	ldi	r30, 0x10	; 16
    86ca:	be 2e       	mov	r11, r30
    86cc:	1f c0       	rjmp	.+62     	; 0x870c <strtol+0x126>
    86ce:	60 e0       	ldi	r22, 0x00	; 0
    86d0:	70 e0       	ldi	r23, 0x00	; 0
    86d2:	80 e0       	ldi	r24, 0x00	; 0
    86d4:	90 e8       	ldi	r25, 0x80	; 128
    86d6:	97 01       	movw	r18, r14
    86d8:	0f 2c       	mov	r0, r15
    86da:	00 0c       	add	r0, r0
    86dc:	44 0b       	sbc	r20, r20
    86de:	55 0b       	sbc	r21, r21
    86e0:	39 dd       	rcall	.-1422   	; 0x8154 <__udivmodsi4>
    86e2:	49 01       	movw	r8, r18
    86e4:	5a 01       	movw	r10, r20
    86e6:	12 c0       	rjmp	.+36     	; 0x870c <strtol+0x126>
    86e8:	10 33       	cpi	r17, 0x30	; 48
    86ea:	59 f4       	brne	.+22     	; 0x8702 <strtol+0x11c>
    86ec:	88 81       	ld	r24, Y
    86ee:	8f 7d       	andi	r24, 0xDF	; 223
    86f0:	88 35       	cpi	r24, 0x58	; 88
    86f2:	09 f0       	breq	.+2      	; 0x86f6 <strtol+0x110>
    86f4:	bb cf       	rjmp	.-138    	; 0x866c <strtol+0x86>
    86f6:	19 81       	ldd	r17, Y+1	; 0x01
    86f8:	22 96       	adiw	r28, 0x02	; 2
    86fa:	02 60       	ori	r16, 0x02	; 2
    86fc:	80 e1       	ldi	r24, 0x10	; 16
    86fe:	e8 2e       	mov	r14, r24
    8700:	f1 2c       	mov	r15, r1
    8702:	81 2c       	mov	r8, r1
    8704:	91 2c       	mov	r9, r1
    8706:	a1 2c       	mov	r10, r1
    8708:	68 e0       	ldi	r22, 0x08	; 8
    870a:	b6 2e       	mov	r11, r22
    870c:	40 e0       	ldi	r20, 0x00	; 0
    870e:	60 e0       	ldi	r22, 0x00	; 0
    8710:	70 e0       	ldi	r23, 0x00	; 0
    8712:	cb 01       	movw	r24, r22
    8714:	27 01       	movw	r4, r14
    8716:	0f 2c       	mov	r0, r15
    8718:	00 0c       	add	r0, r0
    871a:	66 08       	sbc	r6, r6
    871c:	77 08       	sbc	r7, r7
    871e:	fe 01       	movw	r30, r28
    8720:	50 ed       	ldi	r21, 0xD0	; 208
    8722:	35 2e       	mov	r3, r21
    8724:	31 0e       	add	r3, r17
    8726:	29 e0       	ldi	r18, 0x09	; 9
    8728:	23 15       	cp	r18, r3
    872a:	70 f4       	brcc	.+28     	; 0x8748 <strtol+0x162>
    872c:	2f eb       	ldi	r18, 0xBF	; 191
    872e:	21 0f       	add	r18, r17
    8730:	2a 31       	cpi	r18, 0x1A	; 26
    8732:	18 f4       	brcc	.+6      	; 0x873a <strtol+0x154>
    8734:	39 ec       	ldi	r19, 0xC9	; 201
    8736:	33 2e       	mov	r3, r19
    8738:	06 c0       	rjmp	.+12     	; 0x8746 <strtol+0x160>
    873a:	2f e9       	ldi	r18, 0x9F	; 159
    873c:	21 0f       	add	r18, r17
    873e:	2a 31       	cpi	r18, 0x1A	; 26
    8740:	10 f5       	brcc	.+68     	; 0x8786 <strtol+0x1a0>
    8742:	29 ea       	ldi	r18, 0xA9	; 169
    8744:	32 2e       	mov	r3, r18
    8746:	31 0e       	add	r3, r17
    8748:	23 2d       	mov	r18, r3
    874a:	30 e0       	ldi	r19, 0x00	; 0
    874c:	2e 15       	cp	r18, r14
    874e:	3f 05       	cpc	r19, r15
    8750:	d4 f4       	brge	.+52     	; 0x8786 <strtol+0x1a0>
    8752:	47 fd       	sbrc	r20, 7
    8754:	15 c0       	rjmp	.+42     	; 0x8780 <strtol+0x19a>
    8756:	86 16       	cp	r8, r22
    8758:	97 06       	cpc	r9, r23
    875a:	a8 06       	cpc	r10, r24
    875c:	b9 06       	cpc	r11, r25
    875e:	68 f0       	brcs	.+26     	; 0x877a <strtol+0x194>
    8760:	a3 01       	movw	r20, r6
    8762:	92 01       	movw	r18, r4
    8764:	d5 dc       	rcall	.-1622   	; 0x8110 <__mulsi3>
    8766:	63 0d       	add	r22, r3
    8768:	71 1d       	adc	r23, r1
    876a:	81 1d       	adc	r24, r1
    876c:	91 1d       	adc	r25, r1
    876e:	61 30       	cpi	r22, 0x01	; 1
    8770:	71 05       	cpc	r23, r1
    8772:	81 05       	cpc	r24, r1
    8774:	20 e8       	ldi	r18, 0x80	; 128
    8776:	92 07       	cpc	r25, r18
    8778:	10 f0       	brcs	.+4      	; 0x877e <strtol+0x198>
    877a:	4f ef       	ldi	r20, 0xFF	; 255
    877c:	01 c0       	rjmp	.+2      	; 0x8780 <strtol+0x19a>
    877e:	41 e0       	ldi	r20, 0x01	; 1
    8780:	21 96       	adiw	r28, 0x01	; 1
    8782:	10 81       	ld	r17, Z
    8784:	cc cf       	rjmp	.-104    	; 0x871e <strtol+0x138>
    8786:	20 2f       	mov	r18, r16
    8788:	21 70       	andi	r18, 0x01	; 1
    878a:	c1 14       	cp	r12, r1
    878c:	d1 04       	cpc	r13, r1
    878e:	71 f0       	breq	.+28     	; 0x87ac <strtol+0x1c6>
    8790:	44 23       	and	r20, r20
    8792:	29 f0       	breq	.+10     	; 0x879e <strtol+0x1b8>
    8794:	21 97       	sbiw	r28, 0x01	; 1
    8796:	f6 01       	movw	r30, r12
    8798:	d1 83       	std	Z+1, r29	; 0x01
    879a:	c0 83       	st	Z, r28
    879c:	07 c0       	rjmp	.+14     	; 0x87ac <strtol+0x1c6>
    879e:	01 ff       	sbrs	r16, 1
    87a0:	19 c0       	rjmp	.+50     	; 0x87d4 <strtol+0x1ee>
    87a2:	22 97       	sbiw	r28, 0x02	; 2
    87a4:	f6 01       	movw	r30, r12
    87a6:	d1 83       	std	Z+1, r29	; 0x01
    87a8:	c0 83       	st	Z, r28
    87aa:	14 c0       	rjmp	.+40     	; 0x87d4 <strtol+0x1ee>
    87ac:	47 ff       	sbrs	r20, 7
    87ae:	12 c0       	rjmp	.+36     	; 0x87d4 <strtol+0x1ee>
    87b0:	22 23       	and	r18, r18
    87b2:	29 f0       	breq	.+10     	; 0x87be <strtol+0x1d8>
    87b4:	60 e0       	ldi	r22, 0x00	; 0
    87b6:	70 e0       	ldi	r23, 0x00	; 0
    87b8:	80 e0       	ldi	r24, 0x00	; 0
    87ba:	90 e8       	ldi	r25, 0x80	; 128
    87bc:	04 c0       	rjmp	.+8      	; 0x87c6 <strtol+0x1e0>
    87be:	6f ef       	ldi	r22, 0xFF	; 255
    87c0:	7f ef       	ldi	r23, 0xFF	; 255
    87c2:	8f ef       	ldi	r24, 0xFF	; 255
    87c4:	9f e7       	ldi	r25, 0x7F	; 127
    87c6:	22 e2       	ldi	r18, 0x22	; 34
    87c8:	30 e0       	ldi	r19, 0x00	; 0
    87ca:	30 93 8c 16 	sts	0x168C, r19	; 0x80168c <errno+0x1>
    87ce:	20 93 8b 16 	sts	0x168B, r18	; 0x80168b <errno>
    87d2:	09 c0       	rjmp	.+18     	; 0x87e6 <strtol+0x200>
    87d4:	22 23       	and	r18, r18
    87d6:	81 f0       	breq	.+32     	; 0x87f8 <strtol+0x212>
    87d8:	90 95       	com	r25
    87da:	80 95       	com	r24
    87dc:	70 95       	com	r23
    87de:	61 95       	neg	r22
    87e0:	7f 4f       	sbci	r23, 0xFF	; 255
    87e2:	8f 4f       	sbci	r24, 0xFF	; 255
    87e4:	9f 4f       	sbci	r25, 0xFF	; 255
    87e6:	46 2f       	mov	r20, r22
    87e8:	37 2f       	mov	r19, r23
    87ea:	28 2f       	mov	r18, r24
    87ec:	12 c0       	rjmp	.+36     	; 0x8812 <strtol+0x22c>
    87ee:	40 e0       	ldi	r20, 0x00	; 0
    87f0:	30 e0       	ldi	r19, 0x00	; 0
    87f2:	20 e0       	ldi	r18, 0x00	; 0
    87f4:	90 e0       	ldi	r25, 0x00	; 0
    87f6:	0d c0       	rjmp	.+26     	; 0x8812 <strtol+0x22c>
    87f8:	97 ff       	sbrs	r25, 7
    87fa:	f5 cf       	rjmp	.-22     	; 0x87e6 <strtol+0x200>
    87fc:	82 e2       	ldi	r24, 0x22	; 34
    87fe:	90 e0       	ldi	r25, 0x00	; 0
    8800:	90 93 8c 16 	sts	0x168C, r25	; 0x80168c <errno+0x1>
    8804:	80 93 8b 16 	sts	0x168B, r24	; 0x80168b <errno>
    8808:	6f ef       	ldi	r22, 0xFF	; 255
    880a:	7f ef       	ldi	r23, 0xFF	; 255
    880c:	8f ef       	ldi	r24, 0xFF	; 255
    880e:	9f e7       	ldi	r25, 0x7F	; 127
    8810:	ea cf       	rjmp	.-44     	; 0x87e6 <strtol+0x200>
    8812:	64 2f       	mov	r22, r20
    8814:	73 2f       	mov	r23, r19
    8816:	82 2f       	mov	r24, r18
    8818:	df 91       	pop	r29
    881a:	cf 91       	pop	r28
    881c:	1f 91       	pop	r17
    881e:	0f 91       	pop	r16
    8820:	ff 90       	pop	r15
    8822:	ef 90       	pop	r14
    8824:	df 90       	pop	r13
    8826:	cf 90       	pop	r12
    8828:	bf 90       	pop	r11
    882a:	af 90       	pop	r10
    882c:	9f 90       	pop	r9
    882e:	8f 90       	pop	r8
    8830:	7f 90       	pop	r7
    8832:	6f 90       	pop	r6
    8834:	5f 90       	pop	r5
    8836:	4f 90       	pop	r4
    8838:	3f 90       	pop	r3
    883a:	08 95       	ret

0000883c <atoi>:
    883c:	fc 01       	movw	r30, r24
    883e:	88 27       	eor	r24, r24
    8840:	99 27       	eor	r25, r25
    8842:	e8 94       	clt
    8844:	21 91       	ld	r18, Z+
    8846:	20 32       	cpi	r18, 0x20	; 32
    8848:	e9 f3       	breq	.-6      	; 0x8844 <atoi+0x8>
    884a:	29 30       	cpi	r18, 0x09	; 9
    884c:	10 f0       	brcs	.+4      	; 0x8852 <atoi+0x16>
    884e:	2e 30       	cpi	r18, 0x0E	; 14
    8850:	c8 f3       	brcs	.-14     	; 0x8844 <atoi+0x8>
    8852:	2b 32       	cpi	r18, 0x2B	; 43
    8854:	39 f0       	breq	.+14     	; 0x8864 <atoi+0x28>
    8856:	2d 32       	cpi	r18, 0x2D	; 45
    8858:	31 f4       	brne	.+12     	; 0x8866 <atoi+0x2a>
    885a:	68 94       	set
    885c:	03 c0       	rjmp	.+6      	; 0x8864 <atoi+0x28>
    885e:	49 d0       	rcall	.+146    	; 0x88f2 <__mulhi_const_10>
    8860:	82 0f       	add	r24, r18
    8862:	91 1d       	adc	r25, r1
    8864:	21 91       	ld	r18, Z+
    8866:	20 53       	subi	r18, 0x30	; 48
    8868:	2a 30       	cpi	r18, 0x0A	; 10
    886a:	c8 f3       	brcs	.-14     	; 0x885e <atoi+0x22>
    886c:	1e f4       	brtc	.+6      	; 0x8874 <atoi+0x38>
    886e:	90 95       	com	r25
    8870:	81 95       	neg	r24
    8872:	9f 4f       	sbci	r25, 0xFF	; 255
    8874:	08 95       	ret

00008876 <__ctype_isfalse>:
    8876:	99 27       	eor	r25, r25
    8878:	88 27       	eor	r24, r24

0000887a <__ctype_istrue>:
    887a:	08 95       	ret

0000887c <isspace>:
    887c:	91 11       	cpse	r25, r1
    887e:	fb cf       	rjmp	.-10     	; 0x8876 <__ctype_isfalse>
    8880:	80 32       	cpi	r24, 0x20	; 32
    8882:	19 f0       	breq	.+6      	; 0x888a <isspace+0xe>
    8884:	89 50       	subi	r24, 0x09	; 9
    8886:	85 50       	subi	r24, 0x05	; 5
    8888:	d0 f7       	brcc	.-12     	; 0x887e <isspace+0x2>
    888a:	08 95       	ret

0000888c <isblank>:
    888c:	91 11       	cpse	r25, r1
    888e:	f3 cf       	rjmp	.-26     	; 0x8876 <__ctype_isfalse>
    8890:	80 32       	cpi	r24, 0x20	; 32
    8892:	11 f0       	breq	.+4      	; 0x8898 <isblank+0xc>
    8894:	89 30       	cpi	r24, 0x09	; 9
    8896:	d9 f7       	brne	.-10     	; 0x888e <isblank+0x2>
    8898:	08 95       	ret

0000889a <memcmp>:
    889a:	fb 01       	movw	r30, r22
    889c:	dc 01       	movw	r26, r24
    889e:	04 c0       	rjmp	.+8      	; 0x88a8 <memcmp+0xe>
    88a0:	8d 91       	ld	r24, X+
    88a2:	01 90       	ld	r0, Z+
    88a4:	80 19       	sub	r24, r0
    88a6:	21 f4       	brne	.+8      	; 0x88b0 <memcmp+0x16>
    88a8:	41 50       	subi	r20, 0x01	; 1
    88aa:	50 40       	sbci	r21, 0x00	; 0
    88ac:	c8 f7       	brcc	.-14     	; 0x88a0 <memcmp+0x6>
    88ae:	88 1b       	sub	r24, r24
    88b0:	99 0b       	sbc	r25, r25
    88b2:	08 95       	ret

000088b4 <strcpy>:
    88b4:	fb 01       	movw	r30, r22
    88b6:	dc 01       	movw	r26, r24
    88b8:	01 90       	ld	r0, Z+
    88ba:	0d 92       	st	X+, r0
    88bc:	00 20       	and	r0, r0
    88be:	e1 f7       	brne	.-8      	; 0x88b8 <strcpy+0x4>
    88c0:	08 95       	ret

000088c2 <strncmp>:
    88c2:	fb 01       	movw	r30, r22
    88c4:	dc 01       	movw	r26, r24
    88c6:	41 50       	subi	r20, 0x01	; 1
    88c8:	50 40       	sbci	r21, 0x00	; 0
    88ca:	30 f0       	brcs	.+12     	; 0x88d8 <strncmp+0x16>
    88cc:	8d 91       	ld	r24, X+
    88ce:	01 90       	ld	r0, Z+
    88d0:	80 19       	sub	r24, r0
    88d2:	19 f4       	brne	.+6      	; 0x88da <strncmp+0x18>
    88d4:	00 20       	and	r0, r0
    88d6:	b9 f7       	brne	.-18     	; 0x88c6 <strncmp+0x4>
    88d8:	88 1b       	sub	r24, r24
    88da:	99 0b       	sbc	r25, r25
    88dc:	08 95       	ret

000088de <__itoa_ncheck>:
    88de:	bb 27       	eor	r27, r27
    88e0:	4a 30       	cpi	r20, 0x0A	; 10
    88e2:	31 f4       	brne	.+12     	; 0x88f0 <__itoa_ncheck+0x12>
    88e4:	99 23       	and	r25, r25
    88e6:	22 f4       	brpl	.+8      	; 0x88f0 <__itoa_ncheck+0x12>
    88e8:	bd e2       	ldi	r27, 0x2D	; 45
    88ea:	90 95       	com	r25
    88ec:	81 95       	neg	r24
    88ee:	9f 4f       	sbci	r25, 0xFF	; 255
    88f0:	09 c0       	rjmp	.+18     	; 0x8904 <__utoa_common>

000088f2 <__mulhi_const_10>:
    88f2:	7a e0       	ldi	r23, 0x0A	; 10
    88f4:	97 9f       	mul	r25, r23
    88f6:	90 2d       	mov	r25, r0
    88f8:	87 9f       	mul	r24, r23
    88fa:	80 2d       	mov	r24, r0
    88fc:	91 0d       	add	r25, r1
    88fe:	11 24       	eor	r1, r1
    8900:	08 95       	ret

00008902 <__utoa_ncheck>:
    8902:	bb 27       	eor	r27, r27

00008904 <__utoa_common>:
    8904:	fb 01       	movw	r30, r22
    8906:	55 27       	eor	r21, r21
    8908:	aa 27       	eor	r26, r26
    890a:	88 0f       	add	r24, r24
    890c:	99 1f       	adc	r25, r25
    890e:	aa 1f       	adc	r26, r26
    8910:	a4 17       	cp	r26, r20
    8912:	10 f0       	brcs	.+4      	; 0x8918 <__utoa_common+0x14>
    8914:	a4 1b       	sub	r26, r20
    8916:	83 95       	inc	r24
    8918:	50 51       	subi	r21, 0x10	; 16
    891a:	b9 f7       	brne	.-18     	; 0x890a <__utoa_common+0x6>
    891c:	a0 5d       	subi	r26, 0xD0	; 208
    891e:	aa 33       	cpi	r26, 0x3A	; 58
    8920:	08 f0       	brcs	.+2      	; 0x8924 <__utoa_common+0x20>
    8922:	a9 5d       	subi	r26, 0xD9	; 217
    8924:	a1 93       	st	Z+, r26
    8926:	00 97       	sbiw	r24, 0x00	; 0
    8928:	79 f7       	brne	.-34     	; 0x8908 <__utoa_common+0x4>
    892a:	b1 11       	cpse	r27, r1
    892c:	b1 93       	st	Z+, r27
    892e:	11 92       	st	Z+, r1
    8930:	cb 01       	movw	r24, r22
    8932:	0c 94 f6 4c 	jmp	0x99ec	; 0x99ec <strrev>

00008936 <printf>:
    8936:	cf 93       	push	r28
    8938:	df 93       	push	r29
    893a:	cd b7       	in	r28, 0x3d	; 61
    893c:	de b7       	in	r29, 0x3e	; 62
    893e:	ae 01       	movw	r20, r28
    8940:	4b 5f       	subi	r20, 0xFB	; 251
    8942:	5f 4f       	sbci	r21, 0xFF	; 255
    8944:	fa 01       	movw	r30, r20
    8946:	61 91       	ld	r22, Z+
    8948:	71 91       	ld	r23, Z+
    894a:	af 01       	movw	r20, r30
    894c:	80 91 8f 16 	lds	r24, 0x168F	; 0x80168f <__iob+0x2>
    8950:	90 91 90 16 	lds	r25, 0x1690	; 0x801690 <__iob+0x3>
    8954:	16 d1       	rcall	.+556    	; 0x8b82 <vfprintf>
    8956:	df 91       	pop	r29
    8958:	cf 91       	pop	r28
    895a:	08 95       	ret

0000895c <printf_P>:
    895c:	0f 93       	push	r16
    895e:	1f 93       	push	r17
    8960:	cf 93       	push	r28
    8962:	df 93       	push	r29
    8964:	cd b7       	in	r28, 0x3d	; 61
    8966:	de b7       	in	r29, 0x3e	; 62
    8968:	ae 01       	movw	r20, r28
    896a:	49 5f       	subi	r20, 0xF9	; 249
    896c:	5f 4f       	sbci	r21, 0xFF	; 255
    896e:	da 01       	movw	r26, r20
    8970:	6d 91       	ld	r22, X+
    8972:	7d 91       	ld	r23, X+
    8974:	ad 01       	movw	r20, r26
    8976:	0d e8       	ldi	r16, 0x8D	; 141
    8978:	16 e1       	ldi	r17, 0x16	; 22
    897a:	f8 01       	movw	r30, r16
    897c:	82 81       	ldd	r24, Z+2	; 0x02
    897e:	93 81       	ldd	r25, Z+3	; 0x03
    8980:	dc 01       	movw	r26, r24
    8982:	13 96       	adiw	r26, 0x03	; 3
    8984:	2c 91       	ld	r18, X
    8986:	13 97       	sbiw	r26, 0x03	; 3
    8988:	28 60       	ori	r18, 0x08	; 8
    898a:	13 96       	adiw	r26, 0x03	; 3
    898c:	2c 93       	st	X, r18
    898e:	f9 d0       	rcall	.+498    	; 0x8b82 <vfprintf>
    8990:	d8 01       	movw	r26, r16
    8992:	12 96       	adiw	r26, 0x02	; 2
    8994:	ed 91       	ld	r30, X+
    8996:	fc 91       	ld	r31, X
    8998:	13 97       	sbiw	r26, 0x03	; 3
    899a:	23 81       	ldd	r18, Z+3	; 0x03
    899c:	27 7f       	andi	r18, 0xF7	; 247
    899e:	23 83       	std	Z+3, r18	; 0x03
    89a0:	df 91       	pop	r29
    89a2:	cf 91       	pop	r28
    89a4:	1f 91       	pop	r17
    89a6:	0f 91       	pop	r16
    89a8:	08 95       	ret

000089aa <puts>:
    89aa:	0f 93       	push	r16
    89ac:	1f 93       	push	r17
    89ae:	cf 93       	push	r28
    89b0:	df 93       	push	r29
    89b2:	e0 91 8f 16 	lds	r30, 0x168F	; 0x80168f <__iob+0x2>
    89b6:	f0 91 90 16 	lds	r31, 0x1690	; 0x801690 <__iob+0x3>
    89ba:	23 81       	ldd	r18, Z+3	; 0x03
    89bc:	21 ff       	sbrs	r18, 1
    89be:	1b c0       	rjmp	.+54     	; 0x89f6 <puts+0x4c>
    89c0:	8c 01       	movw	r16, r24
    89c2:	d0 e0       	ldi	r29, 0x00	; 0
    89c4:	c0 e0       	ldi	r28, 0x00	; 0
    89c6:	f8 01       	movw	r30, r16
    89c8:	81 91       	ld	r24, Z+
    89ca:	8f 01       	movw	r16, r30
    89cc:	60 91 8f 16 	lds	r22, 0x168F	; 0x80168f <__iob+0x2>
    89d0:	70 91 90 16 	lds	r23, 0x1690	; 0x801690 <__iob+0x3>
    89d4:	db 01       	movw	r26, r22
    89d6:	18 96       	adiw	r26, 0x08	; 8
    89d8:	ed 91       	ld	r30, X+
    89da:	fc 91       	ld	r31, X
    89dc:	19 97       	sbiw	r26, 0x09	; 9
    89de:	88 23       	and	r24, r24
    89e0:	31 f0       	breq	.+12     	; 0x89ee <puts+0x44>
    89e2:	09 95       	icall
    89e4:	89 2b       	or	r24, r25
    89e6:	79 f3       	breq	.-34     	; 0x89c6 <puts+0x1c>
    89e8:	df ef       	ldi	r29, 0xFF	; 255
    89ea:	cf ef       	ldi	r28, 0xFF	; 255
    89ec:	ec cf       	rjmp	.-40     	; 0x89c6 <puts+0x1c>
    89ee:	8a e0       	ldi	r24, 0x0A	; 10
    89f0:	09 95       	icall
    89f2:	89 2b       	or	r24, r25
    89f4:	19 f0       	breq	.+6      	; 0x89fc <puts+0x52>
    89f6:	8f ef       	ldi	r24, 0xFF	; 255
    89f8:	9f ef       	ldi	r25, 0xFF	; 255
    89fa:	02 c0       	rjmp	.+4      	; 0x8a00 <puts+0x56>
    89fc:	8d 2f       	mov	r24, r29
    89fe:	9c 2f       	mov	r25, r28
    8a00:	df 91       	pop	r29
    8a02:	cf 91       	pop	r28
    8a04:	1f 91       	pop	r17
    8a06:	0f 91       	pop	r16
    8a08:	08 95       	ret

00008a0a <puts_P>:
    8a0a:	0f 93       	push	r16
    8a0c:	1f 93       	push	r17
    8a0e:	cf 93       	push	r28
    8a10:	df 93       	push	r29
    8a12:	8c 01       	movw	r16, r24
    8a14:	e0 91 8f 16 	lds	r30, 0x168F	; 0x80168f <__iob+0x2>
    8a18:	f0 91 90 16 	lds	r31, 0x1690	; 0x801690 <__iob+0x3>
    8a1c:	83 81       	ldd	r24, Z+3	; 0x03
    8a1e:	81 ff       	sbrs	r24, 1
    8a20:	1b c0       	rjmp	.+54     	; 0x8a58 <puts_P+0x4e>
    8a22:	d0 e0       	ldi	r29, 0x00	; 0
    8a24:	c0 e0       	ldi	r28, 0x00	; 0
    8a26:	f8 01       	movw	r30, r16
    8a28:	84 91       	lpm	r24, Z
    8a2a:	60 91 8f 16 	lds	r22, 0x168F	; 0x80168f <__iob+0x2>
    8a2e:	70 91 90 16 	lds	r23, 0x1690	; 0x801690 <__iob+0x3>
    8a32:	db 01       	movw	r26, r22
    8a34:	18 96       	adiw	r26, 0x08	; 8
    8a36:	ed 91       	ld	r30, X+
    8a38:	fc 91       	ld	r31, X
    8a3a:	19 97       	sbiw	r26, 0x09	; 9
    8a3c:	88 23       	and	r24, r24
    8a3e:	41 f0       	breq	.+16     	; 0x8a50 <puts_P+0x46>
    8a40:	09 95       	icall
    8a42:	89 2b       	or	r24, r25
    8a44:	11 f0       	breq	.+4      	; 0x8a4a <puts_P+0x40>
    8a46:	df ef       	ldi	r29, 0xFF	; 255
    8a48:	cf ef       	ldi	r28, 0xFF	; 255
    8a4a:	0f 5f       	subi	r16, 0xFF	; 255
    8a4c:	1f 4f       	sbci	r17, 0xFF	; 255
    8a4e:	eb cf       	rjmp	.-42     	; 0x8a26 <puts_P+0x1c>
    8a50:	8a e0       	ldi	r24, 0x0A	; 10
    8a52:	09 95       	icall
    8a54:	89 2b       	or	r24, r25
    8a56:	19 f0       	breq	.+6      	; 0x8a5e <puts_P+0x54>
    8a58:	8f ef       	ldi	r24, 0xFF	; 255
    8a5a:	9f ef       	ldi	r25, 0xFF	; 255
    8a5c:	02 c0       	rjmp	.+4      	; 0x8a62 <puts_P+0x58>
    8a5e:	8d 2f       	mov	r24, r29
    8a60:	9c 2f       	mov	r25, r28
    8a62:	df 91       	pop	r29
    8a64:	cf 91       	pop	r28
    8a66:	1f 91       	pop	r17
    8a68:	0f 91       	pop	r16
    8a6a:	08 95       	ret

00008a6c <snprintf>:
    8a6c:	0f 93       	push	r16
    8a6e:	1f 93       	push	r17
    8a70:	cf 93       	push	r28
    8a72:	df 93       	push	r29
    8a74:	cd b7       	in	r28, 0x3d	; 61
    8a76:	de b7       	in	r29, 0x3e	; 62
    8a78:	2e 97       	sbiw	r28, 0x0e	; 14
    8a7a:	0f b6       	in	r0, 0x3f	; 63
    8a7c:	f8 94       	cli
    8a7e:	de bf       	out	0x3e, r29	; 62
    8a80:	0f be       	out	0x3f, r0	; 63
    8a82:	cd bf       	out	0x3d, r28	; 61
    8a84:	0d 89       	ldd	r16, Y+21	; 0x15
    8a86:	1e 89       	ldd	r17, Y+22	; 0x16
    8a88:	8f 89       	ldd	r24, Y+23	; 0x17
    8a8a:	98 8d       	ldd	r25, Y+24	; 0x18
    8a8c:	26 e0       	ldi	r18, 0x06	; 6
    8a8e:	2c 83       	std	Y+4, r18	; 0x04
    8a90:	1a 83       	std	Y+2, r17	; 0x02
    8a92:	09 83       	std	Y+1, r16	; 0x01
    8a94:	97 ff       	sbrs	r25, 7
    8a96:	02 c0       	rjmp	.+4      	; 0x8a9c <snprintf+0x30>
    8a98:	80 e0       	ldi	r24, 0x00	; 0
    8a9a:	90 e8       	ldi	r25, 0x80	; 128
    8a9c:	01 97       	sbiw	r24, 0x01	; 1
    8a9e:	9e 83       	std	Y+6, r25	; 0x06
    8aa0:	8d 83       	std	Y+5, r24	; 0x05
    8aa2:	ae 01       	movw	r20, r28
    8aa4:	45 5e       	subi	r20, 0xE5	; 229
    8aa6:	5f 4f       	sbci	r21, 0xFF	; 255
    8aa8:	69 8d       	ldd	r22, Y+25	; 0x19
    8aaa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    8aac:	ce 01       	movw	r24, r28
    8aae:	01 96       	adiw	r24, 0x01	; 1
    8ab0:	68 d0       	rcall	.+208    	; 0x8b82 <vfprintf>
    8ab2:	4d 81       	ldd	r20, Y+5	; 0x05
    8ab4:	5e 81       	ldd	r21, Y+6	; 0x06
    8ab6:	57 fd       	sbrc	r21, 7
    8ab8:	0a c0       	rjmp	.+20     	; 0x8ace <snprintf+0x62>
    8aba:	2f 81       	ldd	r18, Y+7	; 0x07
    8abc:	38 85       	ldd	r19, Y+8	; 0x08
    8abe:	42 17       	cp	r20, r18
    8ac0:	53 07       	cpc	r21, r19
    8ac2:	0c f4       	brge	.+2      	; 0x8ac6 <snprintf+0x5a>
    8ac4:	9a 01       	movw	r18, r20
    8ac6:	f8 01       	movw	r30, r16
    8ac8:	e2 0f       	add	r30, r18
    8aca:	f3 1f       	adc	r31, r19
    8acc:	10 82       	st	Z, r1
    8ace:	2e 96       	adiw	r28, 0x0e	; 14
    8ad0:	0f b6       	in	r0, 0x3f	; 63
    8ad2:	f8 94       	cli
    8ad4:	de bf       	out	0x3e, r29	; 62
    8ad6:	0f be       	out	0x3f, r0	; 63
    8ad8:	cd bf       	out	0x3d, r28	; 61
    8ada:	df 91       	pop	r29
    8adc:	cf 91       	pop	r28
    8ade:	1f 91       	pop	r17
    8ae0:	0f 91       	pop	r16
    8ae2:	08 95       	ret

00008ae4 <sprintf>:
    8ae4:	0f 93       	push	r16
    8ae6:	1f 93       	push	r17
    8ae8:	cf 93       	push	r28
    8aea:	df 93       	push	r29
    8aec:	cd b7       	in	r28, 0x3d	; 61
    8aee:	de b7       	in	r29, 0x3e	; 62
    8af0:	2e 97       	sbiw	r28, 0x0e	; 14
    8af2:	0f b6       	in	r0, 0x3f	; 63
    8af4:	f8 94       	cli
    8af6:	de bf       	out	0x3e, r29	; 62
    8af8:	0f be       	out	0x3f, r0	; 63
    8afa:	cd bf       	out	0x3d, r28	; 61
    8afc:	0d 89       	ldd	r16, Y+21	; 0x15
    8afe:	1e 89       	ldd	r17, Y+22	; 0x16
    8b00:	86 e0       	ldi	r24, 0x06	; 6
    8b02:	8c 83       	std	Y+4, r24	; 0x04
    8b04:	1a 83       	std	Y+2, r17	; 0x02
    8b06:	09 83       	std	Y+1, r16	; 0x01
    8b08:	8f ef       	ldi	r24, 0xFF	; 255
    8b0a:	9f e7       	ldi	r25, 0x7F	; 127
    8b0c:	9e 83       	std	Y+6, r25	; 0x06
    8b0e:	8d 83       	std	Y+5, r24	; 0x05
    8b10:	ae 01       	movw	r20, r28
    8b12:	47 5e       	subi	r20, 0xE7	; 231
    8b14:	5f 4f       	sbci	r21, 0xFF	; 255
    8b16:	6f 89       	ldd	r22, Y+23	; 0x17
    8b18:	78 8d       	ldd	r23, Y+24	; 0x18
    8b1a:	ce 01       	movw	r24, r28
    8b1c:	01 96       	adiw	r24, 0x01	; 1
    8b1e:	31 d0       	rcall	.+98     	; 0x8b82 <vfprintf>
    8b20:	ef 81       	ldd	r30, Y+7	; 0x07
    8b22:	f8 85       	ldd	r31, Y+8	; 0x08
    8b24:	e0 0f       	add	r30, r16
    8b26:	f1 1f       	adc	r31, r17
    8b28:	10 82       	st	Z, r1
    8b2a:	2e 96       	adiw	r28, 0x0e	; 14
    8b2c:	0f b6       	in	r0, 0x3f	; 63
    8b2e:	f8 94       	cli
    8b30:	de bf       	out	0x3e, r29	; 62
    8b32:	0f be       	out	0x3f, r0	; 63
    8b34:	cd bf       	out	0x3d, r28	; 61
    8b36:	df 91       	pop	r29
    8b38:	cf 91       	pop	r28
    8b3a:	1f 91       	pop	r17
    8b3c:	0f 91       	pop	r16
    8b3e:	08 95       	ret

00008b40 <sscanf>:
    8b40:	cf 93       	push	r28
    8b42:	df 93       	push	r29
    8b44:	cd b7       	in	r28, 0x3d	; 61
    8b46:	de b7       	in	r29, 0x3e	; 62
    8b48:	2e 97       	sbiw	r28, 0x0e	; 14
    8b4a:	0f b6       	in	r0, 0x3f	; 63
    8b4c:	f8 94       	cli
    8b4e:	de bf       	out	0x3e, r29	; 62
    8b50:	0f be       	out	0x3f, r0	; 63
    8b52:	cd bf       	out	0x3d, r28	; 61
    8b54:	85 e0       	ldi	r24, 0x05	; 5
    8b56:	8c 83       	std	Y+4, r24	; 0x04
    8b58:	8b 89       	ldd	r24, Y+19	; 0x13
    8b5a:	9c 89       	ldd	r25, Y+20	; 0x14
    8b5c:	9a 83       	std	Y+2, r25	; 0x02
    8b5e:	89 83       	std	Y+1, r24	; 0x01
    8b60:	ae 01       	movw	r20, r28
    8b62:	49 5e       	subi	r20, 0xE9	; 233
    8b64:	5f 4f       	sbci	r21, 0xFF	; 255
    8b66:	6d 89       	ldd	r22, Y+21	; 0x15
    8b68:	7e 89       	ldd	r23, Y+22	; 0x16
    8b6a:	ce 01       	movw	r24, r28
    8b6c:	01 96       	adiw	r24, 0x01	; 1
    8b6e:	b8 d3       	rcall	.+1904   	; 0x92e0 <vfscanf>
    8b70:	2e 96       	adiw	r28, 0x0e	; 14
    8b72:	0f b6       	in	r0, 0x3f	; 63
    8b74:	f8 94       	cli
    8b76:	de bf       	out	0x3e, r29	; 62
    8b78:	0f be       	out	0x3f, r0	; 63
    8b7a:	cd bf       	out	0x3d, r28	; 61
    8b7c:	df 91       	pop	r29
    8b7e:	cf 91       	pop	r28
    8b80:	08 95       	ret

00008b82 <vfprintf>:
    8b82:	2f 92       	push	r2
    8b84:	3f 92       	push	r3
    8b86:	4f 92       	push	r4
    8b88:	5f 92       	push	r5
    8b8a:	6f 92       	push	r6
    8b8c:	7f 92       	push	r7
    8b8e:	8f 92       	push	r8
    8b90:	9f 92       	push	r9
    8b92:	af 92       	push	r10
    8b94:	bf 92       	push	r11
    8b96:	cf 92       	push	r12
    8b98:	df 92       	push	r13
    8b9a:	ef 92       	push	r14
    8b9c:	ff 92       	push	r15
    8b9e:	0f 93       	push	r16
    8ba0:	1f 93       	push	r17
    8ba2:	cf 93       	push	r28
    8ba4:	df 93       	push	r29
    8ba6:	cd b7       	in	r28, 0x3d	; 61
    8ba8:	de b7       	in	r29, 0x3e	; 62
    8baa:	2b 97       	sbiw	r28, 0x0b	; 11
    8bac:	0f b6       	in	r0, 0x3f	; 63
    8bae:	f8 94       	cli
    8bb0:	de bf       	out	0x3e, r29	; 62
    8bb2:	0f be       	out	0x3f, r0	; 63
    8bb4:	cd bf       	out	0x3d, r28	; 61
    8bb6:	6c 01       	movw	r12, r24
    8bb8:	7b 01       	movw	r14, r22
    8bba:	8a 01       	movw	r16, r20
    8bbc:	fc 01       	movw	r30, r24
    8bbe:	17 82       	std	Z+7, r1	; 0x07
    8bc0:	16 82       	std	Z+6, r1	; 0x06
    8bc2:	83 81       	ldd	r24, Z+3	; 0x03
    8bc4:	81 ff       	sbrs	r24, 1
    8bc6:	bf c1       	rjmp	.+894    	; 0x8f46 <vfprintf+0x3c4>
    8bc8:	ce 01       	movw	r24, r28
    8bca:	01 96       	adiw	r24, 0x01	; 1
    8bcc:	3c 01       	movw	r6, r24
    8bce:	f6 01       	movw	r30, r12
    8bd0:	93 81       	ldd	r25, Z+3	; 0x03
    8bd2:	f7 01       	movw	r30, r14
    8bd4:	93 fd       	sbrc	r25, 3
    8bd6:	85 91       	lpm	r24, Z+
    8bd8:	93 ff       	sbrs	r25, 3
    8bda:	81 91       	ld	r24, Z+
    8bdc:	7f 01       	movw	r14, r30
    8bde:	88 23       	and	r24, r24
    8be0:	09 f4       	brne	.+2      	; 0x8be4 <vfprintf+0x62>
    8be2:	ad c1       	rjmp	.+858    	; 0x8f3e <vfprintf+0x3bc>
    8be4:	85 32       	cpi	r24, 0x25	; 37
    8be6:	39 f4       	brne	.+14     	; 0x8bf6 <vfprintf+0x74>
    8be8:	93 fd       	sbrc	r25, 3
    8bea:	85 91       	lpm	r24, Z+
    8bec:	93 ff       	sbrs	r25, 3
    8bee:	81 91       	ld	r24, Z+
    8bf0:	7f 01       	movw	r14, r30
    8bf2:	85 32       	cpi	r24, 0x25	; 37
    8bf4:	21 f4       	brne	.+8      	; 0x8bfe <vfprintf+0x7c>
    8bf6:	b6 01       	movw	r22, r12
    8bf8:	90 e0       	ldi	r25, 0x00	; 0
    8bfa:	46 d7       	rcall	.+3724   	; 0x9a88 <fputc>
    8bfc:	e8 cf       	rjmp	.-48     	; 0x8bce <vfprintf+0x4c>
    8bfe:	91 2c       	mov	r9, r1
    8c00:	21 2c       	mov	r2, r1
    8c02:	31 2c       	mov	r3, r1
    8c04:	ff e1       	ldi	r31, 0x1F	; 31
    8c06:	f3 15       	cp	r31, r3
    8c08:	d8 f0       	brcs	.+54     	; 0x8c40 <vfprintf+0xbe>
    8c0a:	8b 32       	cpi	r24, 0x2B	; 43
    8c0c:	79 f0       	breq	.+30     	; 0x8c2c <vfprintf+0xaa>
    8c0e:	38 f4       	brcc	.+14     	; 0x8c1e <vfprintf+0x9c>
    8c10:	80 32       	cpi	r24, 0x20	; 32
    8c12:	79 f0       	breq	.+30     	; 0x8c32 <vfprintf+0xb0>
    8c14:	83 32       	cpi	r24, 0x23	; 35
    8c16:	a1 f4       	brne	.+40     	; 0x8c40 <vfprintf+0xbe>
    8c18:	23 2d       	mov	r18, r3
    8c1a:	20 61       	ori	r18, 0x10	; 16
    8c1c:	1d c0       	rjmp	.+58     	; 0x8c58 <vfprintf+0xd6>
    8c1e:	8d 32       	cpi	r24, 0x2D	; 45
    8c20:	61 f0       	breq	.+24     	; 0x8c3a <vfprintf+0xb8>
    8c22:	80 33       	cpi	r24, 0x30	; 48
    8c24:	69 f4       	brne	.+26     	; 0x8c40 <vfprintf+0xbe>
    8c26:	23 2d       	mov	r18, r3
    8c28:	21 60       	ori	r18, 0x01	; 1
    8c2a:	16 c0       	rjmp	.+44     	; 0x8c58 <vfprintf+0xd6>
    8c2c:	83 2d       	mov	r24, r3
    8c2e:	82 60       	ori	r24, 0x02	; 2
    8c30:	38 2e       	mov	r3, r24
    8c32:	e3 2d       	mov	r30, r3
    8c34:	e4 60       	ori	r30, 0x04	; 4
    8c36:	3e 2e       	mov	r3, r30
    8c38:	2a c0       	rjmp	.+84     	; 0x8c8e <vfprintf+0x10c>
    8c3a:	f3 2d       	mov	r31, r3
    8c3c:	f8 60       	ori	r31, 0x08	; 8
    8c3e:	1d c0       	rjmp	.+58     	; 0x8c7a <vfprintf+0xf8>
    8c40:	37 fc       	sbrc	r3, 7
    8c42:	2d c0       	rjmp	.+90     	; 0x8c9e <vfprintf+0x11c>
    8c44:	20 ed       	ldi	r18, 0xD0	; 208
    8c46:	28 0f       	add	r18, r24
    8c48:	2a 30       	cpi	r18, 0x0A	; 10
    8c4a:	40 f0       	brcs	.+16     	; 0x8c5c <vfprintf+0xda>
    8c4c:	8e 32       	cpi	r24, 0x2E	; 46
    8c4e:	b9 f4       	brne	.+46     	; 0x8c7e <vfprintf+0xfc>
    8c50:	36 fc       	sbrc	r3, 6
    8c52:	75 c1       	rjmp	.+746    	; 0x8f3e <vfprintf+0x3bc>
    8c54:	23 2d       	mov	r18, r3
    8c56:	20 64       	ori	r18, 0x40	; 64
    8c58:	32 2e       	mov	r3, r18
    8c5a:	19 c0       	rjmp	.+50     	; 0x8c8e <vfprintf+0x10c>
    8c5c:	36 fe       	sbrs	r3, 6
    8c5e:	06 c0       	rjmp	.+12     	; 0x8c6c <vfprintf+0xea>
    8c60:	8a e0       	ldi	r24, 0x0A	; 10
    8c62:	98 9e       	mul	r9, r24
    8c64:	20 0d       	add	r18, r0
    8c66:	11 24       	eor	r1, r1
    8c68:	92 2e       	mov	r9, r18
    8c6a:	11 c0       	rjmp	.+34     	; 0x8c8e <vfprintf+0x10c>
    8c6c:	ea e0       	ldi	r30, 0x0A	; 10
    8c6e:	2e 9e       	mul	r2, r30
    8c70:	20 0d       	add	r18, r0
    8c72:	11 24       	eor	r1, r1
    8c74:	22 2e       	mov	r2, r18
    8c76:	f3 2d       	mov	r31, r3
    8c78:	f0 62       	ori	r31, 0x20	; 32
    8c7a:	3f 2e       	mov	r3, r31
    8c7c:	08 c0       	rjmp	.+16     	; 0x8c8e <vfprintf+0x10c>
    8c7e:	8c 36       	cpi	r24, 0x6C	; 108
    8c80:	21 f4       	brne	.+8      	; 0x8c8a <vfprintf+0x108>
    8c82:	83 2d       	mov	r24, r3
    8c84:	80 68       	ori	r24, 0x80	; 128
    8c86:	38 2e       	mov	r3, r24
    8c88:	02 c0       	rjmp	.+4      	; 0x8c8e <vfprintf+0x10c>
    8c8a:	88 36       	cpi	r24, 0x68	; 104
    8c8c:	41 f4       	brne	.+16     	; 0x8c9e <vfprintf+0x11c>
    8c8e:	f7 01       	movw	r30, r14
    8c90:	93 fd       	sbrc	r25, 3
    8c92:	85 91       	lpm	r24, Z+
    8c94:	93 ff       	sbrs	r25, 3
    8c96:	81 91       	ld	r24, Z+
    8c98:	7f 01       	movw	r14, r30
    8c9a:	81 11       	cpse	r24, r1
    8c9c:	b3 cf       	rjmp	.-154    	; 0x8c04 <vfprintf+0x82>
    8c9e:	98 2f       	mov	r25, r24
    8ca0:	9f 7d       	andi	r25, 0xDF	; 223
    8ca2:	95 54       	subi	r25, 0x45	; 69
    8ca4:	93 30       	cpi	r25, 0x03	; 3
    8ca6:	28 f4       	brcc	.+10     	; 0x8cb2 <vfprintf+0x130>
    8ca8:	0c 5f       	subi	r16, 0xFC	; 252
    8caa:	1f 4f       	sbci	r17, 0xFF	; 255
    8cac:	9f e3       	ldi	r25, 0x3F	; 63
    8cae:	99 83       	std	Y+1, r25	; 0x01
    8cb0:	0d c0       	rjmp	.+26     	; 0x8ccc <vfprintf+0x14a>
    8cb2:	83 36       	cpi	r24, 0x63	; 99
    8cb4:	31 f0       	breq	.+12     	; 0x8cc2 <vfprintf+0x140>
    8cb6:	83 37       	cpi	r24, 0x73	; 115
    8cb8:	71 f0       	breq	.+28     	; 0x8cd6 <vfprintf+0x154>
    8cba:	83 35       	cpi	r24, 0x53	; 83
    8cbc:	09 f0       	breq	.+2      	; 0x8cc0 <vfprintf+0x13e>
    8cbe:	55 c0       	rjmp	.+170    	; 0x8d6a <vfprintf+0x1e8>
    8cc0:	20 c0       	rjmp	.+64     	; 0x8d02 <vfprintf+0x180>
    8cc2:	f8 01       	movw	r30, r16
    8cc4:	80 81       	ld	r24, Z
    8cc6:	89 83       	std	Y+1, r24	; 0x01
    8cc8:	0e 5f       	subi	r16, 0xFE	; 254
    8cca:	1f 4f       	sbci	r17, 0xFF	; 255
    8ccc:	88 24       	eor	r8, r8
    8cce:	83 94       	inc	r8
    8cd0:	91 2c       	mov	r9, r1
    8cd2:	53 01       	movw	r10, r6
    8cd4:	12 c0       	rjmp	.+36     	; 0x8cfa <vfprintf+0x178>
    8cd6:	28 01       	movw	r4, r16
    8cd8:	f2 e0       	ldi	r31, 0x02	; 2
    8cda:	4f 0e       	add	r4, r31
    8cdc:	51 1c       	adc	r5, r1
    8cde:	f8 01       	movw	r30, r16
    8ce0:	a0 80       	ld	r10, Z
    8ce2:	b1 80       	ldd	r11, Z+1	; 0x01
    8ce4:	36 fe       	sbrs	r3, 6
    8ce6:	03 c0       	rjmp	.+6      	; 0x8cee <vfprintf+0x16c>
    8ce8:	69 2d       	mov	r22, r9
    8cea:	70 e0       	ldi	r23, 0x00	; 0
    8cec:	02 c0       	rjmp	.+4      	; 0x8cf2 <vfprintf+0x170>
    8cee:	6f ef       	ldi	r22, 0xFF	; 255
    8cf0:	7f ef       	ldi	r23, 0xFF	; 255
    8cf2:	c5 01       	movw	r24, r10
    8cf4:	70 d6       	rcall	.+3296   	; 0x99d6 <strnlen>
    8cf6:	4c 01       	movw	r8, r24
    8cf8:	82 01       	movw	r16, r4
    8cfa:	f3 2d       	mov	r31, r3
    8cfc:	ff 77       	andi	r31, 0x7F	; 127
    8cfe:	3f 2e       	mov	r3, r31
    8d00:	15 c0       	rjmp	.+42     	; 0x8d2c <vfprintf+0x1aa>
    8d02:	28 01       	movw	r4, r16
    8d04:	22 e0       	ldi	r18, 0x02	; 2
    8d06:	42 0e       	add	r4, r18
    8d08:	51 1c       	adc	r5, r1
    8d0a:	f8 01       	movw	r30, r16
    8d0c:	a0 80       	ld	r10, Z
    8d0e:	b1 80       	ldd	r11, Z+1	; 0x01
    8d10:	36 fe       	sbrs	r3, 6
    8d12:	03 c0       	rjmp	.+6      	; 0x8d1a <vfprintf+0x198>
    8d14:	69 2d       	mov	r22, r9
    8d16:	70 e0       	ldi	r23, 0x00	; 0
    8d18:	02 c0       	rjmp	.+4      	; 0x8d1e <vfprintf+0x19c>
    8d1a:	6f ef       	ldi	r22, 0xFF	; 255
    8d1c:	7f ef       	ldi	r23, 0xFF	; 255
    8d1e:	c5 01       	movw	r24, r10
    8d20:	4f d6       	rcall	.+3230   	; 0x99c0 <strnlen_P>
    8d22:	4c 01       	movw	r8, r24
    8d24:	f3 2d       	mov	r31, r3
    8d26:	f0 68       	ori	r31, 0x80	; 128
    8d28:	3f 2e       	mov	r3, r31
    8d2a:	82 01       	movw	r16, r4
    8d2c:	33 fc       	sbrc	r3, 3
    8d2e:	19 c0       	rjmp	.+50     	; 0x8d62 <vfprintf+0x1e0>
    8d30:	82 2d       	mov	r24, r2
    8d32:	90 e0       	ldi	r25, 0x00	; 0
    8d34:	88 16       	cp	r8, r24
    8d36:	99 06       	cpc	r9, r25
    8d38:	a0 f4       	brcc	.+40     	; 0x8d62 <vfprintf+0x1e0>
    8d3a:	b6 01       	movw	r22, r12
    8d3c:	80 e2       	ldi	r24, 0x20	; 32
    8d3e:	90 e0       	ldi	r25, 0x00	; 0
    8d40:	a3 d6       	rcall	.+3398   	; 0x9a88 <fputc>
    8d42:	2a 94       	dec	r2
    8d44:	f5 cf       	rjmp	.-22     	; 0x8d30 <vfprintf+0x1ae>
    8d46:	f5 01       	movw	r30, r10
    8d48:	37 fc       	sbrc	r3, 7
    8d4a:	85 91       	lpm	r24, Z+
    8d4c:	37 fe       	sbrs	r3, 7
    8d4e:	81 91       	ld	r24, Z+
    8d50:	5f 01       	movw	r10, r30
    8d52:	b6 01       	movw	r22, r12
    8d54:	90 e0       	ldi	r25, 0x00	; 0
    8d56:	98 d6       	rcall	.+3376   	; 0x9a88 <fputc>
    8d58:	21 10       	cpse	r2, r1
    8d5a:	2a 94       	dec	r2
    8d5c:	21 e0       	ldi	r18, 0x01	; 1
    8d5e:	82 1a       	sub	r8, r18
    8d60:	91 08       	sbc	r9, r1
    8d62:	81 14       	cp	r8, r1
    8d64:	91 04       	cpc	r9, r1
    8d66:	79 f7       	brne	.-34     	; 0x8d46 <vfprintf+0x1c4>
    8d68:	e1 c0       	rjmp	.+450    	; 0x8f2c <vfprintf+0x3aa>
    8d6a:	84 36       	cpi	r24, 0x64	; 100
    8d6c:	11 f0       	breq	.+4      	; 0x8d72 <vfprintf+0x1f0>
    8d6e:	89 36       	cpi	r24, 0x69	; 105
    8d70:	39 f5       	brne	.+78     	; 0x8dc0 <vfprintf+0x23e>
    8d72:	f8 01       	movw	r30, r16
    8d74:	37 fe       	sbrs	r3, 7
    8d76:	07 c0       	rjmp	.+14     	; 0x8d86 <vfprintf+0x204>
    8d78:	60 81       	ld	r22, Z
    8d7a:	71 81       	ldd	r23, Z+1	; 0x01
    8d7c:	82 81       	ldd	r24, Z+2	; 0x02
    8d7e:	93 81       	ldd	r25, Z+3	; 0x03
    8d80:	0c 5f       	subi	r16, 0xFC	; 252
    8d82:	1f 4f       	sbci	r17, 0xFF	; 255
    8d84:	08 c0       	rjmp	.+16     	; 0x8d96 <vfprintf+0x214>
    8d86:	60 81       	ld	r22, Z
    8d88:	71 81       	ldd	r23, Z+1	; 0x01
    8d8a:	07 2e       	mov	r0, r23
    8d8c:	00 0c       	add	r0, r0
    8d8e:	88 0b       	sbc	r24, r24
    8d90:	99 0b       	sbc	r25, r25
    8d92:	0e 5f       	subi	r16, 0xFE	; 254
    8d94:	1f 4f       	sbci	r17, 0xFF	; 255
    8d96:	f3 2d       	mov	r31, r3
    8d98:	ff 76       	andi	r31, 0x6F	; 111
    8d9a:	3f 2e       	mov	r3, r31
    8d9c:	97 ff       	sbrs	r25, 7
    8d9e:	09 c0       	rjmp	.+18     	; 0x8db2 <vfprintf+0x230>
    8da0:	90 95       	com	r25
    8da2:	80 95       	com	r24
    8da4:	70 95       	com	r23
    8da6:	61 95       	neg	r22
    8da8:	7f 4f       	sbci	r23, 0xFF	; 255
    8daa:	8f 4f       	sbci	r24, 0xFF	; 255
    8dac:	9f 4f       	sbci	r25, 0xFF	; 255
    8dae:	f0 68       	ori	r31, 0x80	; 128
    8db0:	3f 2e       	mov	r3, r31
    8db2:	2a e0       	ldi	r18, 0x0A	; 10
    8db4:	30 e0       	ldi	r19, 0x00	; 0
    8db6:	a3 01       	movw	r20, r6
    8db8:	bc d6       	rcall	.+3448   	; 0x9b32 <__ultoa_invert>
    8dba:	88 2e       	mov	r8, r24
    8dbc:	86 18       	sub	r8, r6
    8dbe:	44 c0       	rjmp	.+136    	; 0x8e48 <vfprintf+0x2c6>
    8dc0:	85 37       	cpi	r24, 0x75	; 117
    8dc2:	31 f4       	brne	.+12     	; 0x8dd0 <vfprintf+0x24e>
    8dc4:	23 2d       	mov	r18, r3
    8dc6:	2f 7e       	andi	r18, 0xEF	; 239
    8dc8:	b2 2e       	mov	r11, r18
    8dca:	2a e0       	ldi	r18, 0x0A	; 10
    8dcc:	30 e0       	ldi	r19, 0x00	; 0
    8dce:	25 c0       	rjmp	.+74     	; 0x8e1a <vfprintf+0x298>
    8dd0:	93 2d       	mov	r25, r3
    8dd2:	99 7f       	andi	r25, 0xF9	; 249
    8dd4:	b9 2e       	mov	r11, r25
    8dd6:	8f 36       	cpi	r24, 0x6F	; 111
    8dd8:	c1 f0       	breq	.+48     	; 0x8e0a <vfprintf+0x288>
    8dda:	18 f4       	brcc	.+6      	; 0x8de2 <vfprintf+0x260>
    8ddc:	88 35       	cpi	r24, 0x58	; 88
    8dde:	79 f0       	breq	.+30     	; 0x8dfe <vfprintf+0x27c>
    8de0:	ae c0       	rjmp	.+348    	; 0x8f3e <vfprintf+0x3bc>
    8de2:	80 37       	cpi	r24, 0x70	; 112
    8de4:	19 f0       	breq	.+6      	; 0x8dec <vfprintf+0x26a>
    8de6:	88 37       	cpi	r24, 0x78	; 120
    8de8:	21 f0       	breq	.+8      	; 0x8df2 <vfprintf+0x270>
    8dea:	a9 c0       	rjmp	.+338    	; 0x8f3e <vfprintf+0x3bc>
    8dec:	e9 2f       	mov	r30, r25
    8dee:	e0 61       	ori	r30, 0x10	; 16
    8df0:	be 2e       	mov	r11, r30
    8df2:	b4 fe       	sbrs	r11, 4
    8df4:	0d c0       	rjmp	.+26     	; 0x8e10 <vfprintf+0x28e>
    8df6:	fb 2d       	mov	r31, r11
    8df8:	f4 60       	ori	r31, 0x04	; 4
    8dfa:	bf 2e       	mov	r11, r31
    8dfc:	09 c0       	rjmp	.+18     	; 0x8e10 <vfprintf+0x28e>
    8dfe:	34 fe       	sbrs	r3, 4
    8e00:	0a c0       	rjmp	.+20     	; 0x8e16 <vfprintf+0x294>
    8e02:	29 2f       	mov	r18, r25
    8e04:	26 60       	ori	r18, 0x06	; 6
    8e06:	b2 2e       	mov	r11, r18
    8e08:	06 c0       	rjmp	.+12     	; 0x8e16 <vfprintf+0x294>
    8e0a:	28 e0       	ldi	r18, 0x08	; 8
    8e0c:	30 e0       	ldi	r19, 0x00	; 0
    8e0e:	05 c0       	rjmp	.+10     	; 0x8e1a <vfprintf+0x298>
    8e10:	20 e1       	ldi	r18, 0x10	; 16
    8e12:	30 e0       	ldi	r19, 0x00	; 0
    8e14:	02 c0       	rjmp	.+4      	; 0x8e1a <vfprintf+0x298>
    8e16:	20 e1       	ldi	r18, 0x10	; 16
    8e18:	32 e0       	ldi	r19, 0x02	; 2
    8e1a:	f8 01       	movw	r30, r16
    8e1c:	b7 fe       	sbrs	r11, 7
    8e1e:	07 c0       	rjmp	.+14     	; 0x8e2e <vfprintf+0x2ac>
    8e20:	60 81       	ld	r22, Z
    8e22:	71 81       	ldd	r23, Z+1	; 0x01
    8e24:	82 81       	ldd	r24, Z+2	; 0x02
    8e26:	93 81       	ldd	r25, Z+3	; 0x03
    8e28:	0c 5f       	subi	r16, 0xFC	; 252
    8e2a:	1f 4f       	sbci	r17, 0xFF	; 255
    8e2c:	06 c0       	rjmp	.+12     	; 0x8e3a <vfprintf+0x2b8>
    8e2e:	60 81       	ld	r22, Z
    8e30:	71 81       	ldd	r23, Z+1	; 0x01
    8e32:	80 e0       	ldi	r24, 0x00	; 0
    8e34:	90 e0       	ldi	r25, 0x00	; 0
    8e36:	0e 5f       	subi	r16, 0xFE	; 254
    8e38:	1f 4f       	sbci	r17, 0xFF	; 255
    8e3a:	a3 01       	movw	r20, r6
    8e3c:	7a d6       	rcall	.+3316   	; 0x9b32 <__ultoa_invert>
    8e3e:	88 2e       	mov	r8, r24
    8e40:	86 18       	sub	r8, r6
    8e42:	fb 2d       	mov	r31, r11
    8e44:	ff 77       	andi	r31, 0x7F	; 127
    8e46:	3f 2e       	mov	r3, r31
    8e48:	36 fe       	sbrs	r3, 6
    8e4a:	0d c0       	rjmp	.+26     	; 0x8e66 <vfprintf+0x2e4>
    8e4c:	23 2d       	mov	r18, r3
    8e4e:	2e 7f       	andi	r18, 0xFE	; 254
    8e50:	a2 2e       	mov	r10, r18
    8e52:	89 14       	cp	r8, r9
    8e54:	58 f4       	brcc	.+22     	; 0x8e6c <vfprintf+0x2ea>
    8e56:	34 fe       	sbrs	r3, 4
    8e58:	0b c0       	rjmp	.+22     	; 0x8e70 <vfprintf+0x2ee>
    8e5a:	32 fc       	sbrc	r3, 2
    8e5c:	09 c0       	rjmp	.+18     	; 0x8e70 <vfprintf+0x2ee>
    8e5e:	83 2d       	mov	r24, r3
    8e60:	8e 7e       	andi	r24, 0xEE	; 238
    8e62:	a8 2e       	mov	r10, r24
    8e64:	05 c0       	rjmp	.+10     	; 0x8e70 <vfprintf+0x2ee>
    8e66:	b8 2c       	mov	r11, r8
    8e68:	a3 2c       	mov	r10, r3
    8e6a:	03 c0       	rjmp	.+6      	; 0x8e72 <vfprintf+0x2f0>
    8e6c:	b8 2c       	mov	r11, r8
    8e6e:	01 c0       	rjmp	.+2      	; 0x8e72 <vfprintf+0x2f0>
    8e70:	b9 2c       	mov	r11, r9
    8e72:	a4 fe       	sbrs	r10, 4
    8e74:	0f c0       	rjmp	.+30     	; 0x8e94 <vfprintf+0x312>
    8e76:	fe 01       	movw	r30, r28
    8e78:	e8 0d       	add	r30, r8
    8e7a:	f1 1d       	adc	r31, r1
    8e7c:	80 81       	ld	r24, Z
    8e7e:	80 33       	cpi	r24, 0x30	; 48
    8e80:	21 f4       	brne	.+8      	; 0x8e8a <vfprintf+0x308>
    8e82:	9a 2d       	mov	r25, r10
    8e84:	99 7e       	andi	r25, 0xE9	; 233
    8e86:	a9 2e       	mov	r10, r25
    8e88:	09 c0       	rjmp	.+18     	; 0x8e9c <vfprintf+0x31a>
    8e8a:	a2 fe       	sbrs	r10, 2
    8e8c:	06 c0       	rjmp	.+12     	; 0x8e9a <vfprintf+0x318>
    8e8e:	b3 94       	inc	r11
    8e90:	b3 94       	inc	r11
    8e92:	04 c0       	rjmp	.+8      	; 0x8e9c <vfprintf+0x31a>
    8e94:	8a 2d       	mov	r24, r10
    8e96:	86 78       	andi	r24, 0x86	; 134
    8e98:	09 f0       	breq	.+2      	; 0x8e9c <vfprintf+0x31a>
    8e9a:	b3 94       	inc	r11
    8e9c:	a3 fc       	sbrc	r10, 3
    8e9e:	10 c0       	rjmp	.+32     	; 0x8ec0 <vfprintf+0x33e>
    8ea0:	a0 fe       	sbrs	r10, 0
    8ea2:	06 c0       	rjmp	.+12     	; 0x8eb0 <vfprintf+0x32e>
    8ea4:	b2 14       	cp	r11, r2
    8ea6:	80 f4       	brcc	.+32     	; 0x8ec8 <vfprintf+0x346>
    8ea8:	28 0c       	add	r2, r8
    8eaa:	92 2c       	mov	r9, r2
    8eac:	9b 18       	sub	r9, r11
    8eae:	0d c0       	rjmp	.+26     	; 0x8eca <vfprintf+0x348>
    8eb0:	b2 14       	cp	r11, r2
    8eb2:	58 f4       	brcc	.+22     	; 0x8eca <vfprintf+0x348>
    8eb4:	b6 01       	movw	r22, r12
    8eb6:	80 e2       	ldi	r24, 0x20	; 32
    8eb8:	90 e0       	ldi	r25, 0x00	; 0
    8eba:	e6 d5       	rcall	.+3020   	; 0x9a88 <fputc>
    8ebc:	b3 94       	inc	r11
    8ebe:	f8 cf       	rjmp	.-16     	; 0x8eb0 <vfprintf+0x32e>
    8ec0:	b2 14       	cp	r11, r2
    8ec2:	18 f4       	brcc	.+6      	; 0x8eca <vfprintf+0x348>
    8ec4:	2b 18       	sub	r2, r11
    8ec6:	02 c0       	rjmp	.+4      	; 0x8ecc <vfprintf+0x34a>
    8ec8:	98 2c       	mov	r9, r8
    8eca:	21 2c       	mov	r2, r1
    8ecc:	a4 fe       	sbrs	r10, 4
    8ece:	0f c0       	rjmp	.+30     	; 0x8eee <vfprintf+0x36c>
    8ed0:	b6 01       	movw	r22, r12
    8ed2:	80 e3       	ldi	r24, 0x30	; 48
    8ed4:	90 e0       	ldi	r25, 0x00	; 0
    8ed6:	d8 d5       	rcall	.+2992   	; 0x9a88 <fputc>
    8ed8:	a2 fe       	sbrs	r10, 2
    8eda:	16 c0       	rjmp	.+44     	; 0x8f08 <vfprintf+0x386>
    8edc:	a1 fc       	sbrc	r10, 1
    8ede:	03 c0       	rjmp	.+6      	; 0x8ee6 <vfprintf+0x364>
    8ee0:	88 e7       	ldi	r24, 0x78	; 120
    8ee2:	90 e0       	ldi	r25, 0x00	; 0
    8ee4:	02 c0       	rjmp	.+4      	; 0x8eea <vfprintf+0x368>
    8ee6:	88 e5       	ldi	r24, 0x58	; 88
    8ee8:	90 e0       	ldi	r25, 0x00	; 0
    8eea:	b6 01       	movw	r22, r12
    8eec:	0c c0       	rjmp	.+24     	; 0x8f06 <vfprintf+0x384>
    8eee:	8a 2d       	mov	r24, r10
    8ef0:	86 78       	andi	r24, 0x86	; 134
    8ef2:	51 f0       	breq	.+20     	; 0x8f08 <vfprintf+0x386>
    8ef4:	a1 fe       	sbrs	r10, 1
    8ef6:	02 c0       	rjmp	.+4      	; 0x8efc <vfprintf+0x37a>
    8ef8:	8b e2       	ldi	r24, 0x2B	; 43
    8efa:	01 c0       	rjmp	.+2      	; 0x8efe <vfprintf+0x37c>
    8efc:	80 e2       	ldi	r24, 0x20	; 32
    8efe:	a7 fc       	sbrc	r10, 7
    8f00:	8d e2       	ldi	r24, 0x2D	; 45
    8f02:	b6 01       	movw	r22, r12
    8f04:	90 e0       	ldi	r25, 0x00	; 0
    8f06:	c0 d5       	rcall	.+2944   	; 0x9a88 <fputc>
    8f08:	89 14       	cp	r8, r9
    8f0a:	30 f4       	brcc	.+12     	; 0x8f18 <vfprintf+0x396>
    8f0c:	b6 01       	movw	r22, r12
    8f0e:	80 e3       	ldi	r24, 0x30	; 48
    8f10:	90 e0       	ldi	r25, 0x00	; 0
    8f12:	ba d5       	rcall	.+2932   	; 0x9a88 <fputc>
    8f14:	9a 94       	dec	r9
    8f16:	f8 cf       	rjmp	.-16     	; 0x8f08 <vfprintf+0x386>
    8f18:	8a 94       	dec	r8
    8f1a:	f3 01       	movw	r30, r6
    8f1c:	e8 0d       	add	r30, r8
    8f1e:	f1 1d       	adc	r31, r1
    8f20:	80 81       	ld	r24, Z
    8f22:	b6 01       	movw	r22, r12
    8f24:	90 e0       	ldi	r25, 0x00	; 0
    8f26:	b0 d5       	rcall	.+2912   	; 0x9a88 <fputc>
    8f28:	81 10       	cpse	r8, r1
    8f2a:	f6 cf       	rjmp	.-20     	; 0x8f18 <vfprintf+0x396>
    8f2c:	22 20       	and	r2, r2
    8f2e:	09 f4       	brne	.+2      	; 0x8f32 <vfprintf+0x3b0>
    8f30:	4e ce       	rjmp	.-868    	; 0x8bce <vfprintf+0x4c>
    8f32:	b6 01       	movw	r22, r12
    8f34:	80 e2       	ldi	r24, 0x20	; 32
    8f36:	90 e0       	ldi	r25, 0x00	; 0
    8f38:	a7 d5       	rcall	.+2894   	; 0x9a88 <fputc>
    8f3a:	2a 94       	dec	r2
    8f3c:	f7 cf       	rjmp	.-18     	; 0x8f2c <vfprintf+0x3aa>
    8f3e:	f6 01       	movw	r30, r12
    8f40:	86 81       	ldd	r24, Z+6	; 0x06
    8f42:	97 81       	ldd	r25, Z+7	; 0x07
    8f44:	02 c0       	rjmp	.+4      	; 0x8f4a <vfprintf+0x3c8>
    8f46:	8f ef       	ldi	r24, 0xFF	; 255
    8f48:	9f ef       	ldi	r25, 0xFF	; 255
    8f4a:	2b 96       	adiw	r28, 0x0b	; 11
    8f4c:	0f b6       	in	r0, 0x3f	; 63
    8f4e:	f8 94       	cli
    8f50:	de bf       	out	0x3e, r29	; 62
    8f52:	0f be       	out	0x3f, r0	; 63
    8f54:	cd bf       	out	0x3d, r28	; 61
    8f56:	df 91       	pop	r29
    8f58:	cf 91       	pop	r28
    8f5a:	1f 91       	pop	r17
    8f5c:	0f 91       	pop	r16
    8f5e:	ff 90       	pop	r15
    8f60:	ef 90       	pop	r14
    8f62:	df 90       	pop	r13
    8f64:	cf 90       	pop	r12
    8f66:	bf 90       	pop	r11
    8f68:	af 90       	pop	r10
    8f6a:	9f 90       	pop	r9
    8f6c:	8f 90       	pop	r8
    8f6e:	7f 90       	pop	r7
    8f70:	6f 90       	pop	r6
    8f72:	5f 90       	pop	r5
    8f74:	4f 90       	pop	r4
    8f76:	3f 90       	pop	r3
    8f78:	2f 90       	pop	r2
    8f7a:	08 95       	ret

00008f7c <putval>:
    8f7c:	20 fd       	sbrc	r18, 0
    8f7e:	09 c0       	rjmp	.+18     	; 0x8f92 <putval+0x16>
    8f80:	fc 01       	movw	r30, r24
    8f82:	23 fd       	sbrc	r18, 3
    8f84:	05 c0       	rjmp	.+10     	; 0x8f90 <putval+0x14>
    8f86:	22 ff       	sbrs	r18, 2
    8f88:	02 c0       	rjmp	.+4      	; 0x8f8e <putval+0x12>
    8f8a:	73 83       	std	Z+3, r23	; 0x03
    8f8c:	62 83       	std	Z+2, r22	; 0x02
    8f8e:	51 83       	std	Z+1, r21	; 0x01
    8f90:	40 83       	st	Z, r20
    8f92:	08 95       	ret

00008f94 <mulacc>:
    8f94:	44 fd       	sbrc	r20, 4
    8f96:	17 c0       	rjmp	.+46     	; 0x8fc6 <mulacc+0x32>
    8f98:	46 fd       	sbrc	r20, 6
    8f9a:	17 c0       	rjmp	.+46     	; 0x8fca <mulacc+0x36>
    8f9c:	ab 01       	movw	r20, r22
    8f9e:	bc 01       	movw	r22, r24
    8fa0:	da 01       	movw	r26, r20
    8fa2:	fb 01       	movw	r30, r22
    8fa4:	aa 0f       	add	r26, r26
    8fa6:	bb 1f       	adc	r27, r27
    8fa8:	ee 1f       	adc	r30, r30
    8faa:	ff 1f       	adc	r31, r31
    8fac:	10 94       	com	r1
    8fae:	d1 f7       	brne	.-12     	; 0x8fa4 <mulacc+0x10>
    8fb0:	4a 0f       	add	r20, r26
    8fb2:	5b 1f       	adc	r21, r27
    8fb4:	6e 1f       	adc	r22, r30
    8fb6:	7f 1f       	adc	r23, r31
    8fb8:	cb 01       	movw	r24, r22
    8fba:	ba 01       	movw	r22, r20
    8fbc:	66 0f       	add	r22, r22
    8fbe:	77 1f       	adc	r23, r23
    8fc0:	88 1f       	adc	r24, r24
    8fc2:	99 1f       	adc	r25, r25
    8fc4:	09 c0       	rjmp	.+18     	; 0x8fd8 <mulacc+0x44>
    8fc6:	33 e0       	ldi	r19, 0x03	; 3
    8fc8:	01 c0       	rjmp	.+2      	; 0x8fcc <mulacc+0x38>
    8fca:	34 e0       	ldi	r19, 0x04	; 4
    8fcc:	66 0f       	add	r22, r22
    8fce:	77 1f       	adc	r23, r23
    8fd0:	88 1f       	adc	r24, r24
    8fd2:	99 1f       	adc	r25, r25
    8fd4:	31 50       	subi	r19, 0x01	; 1
    8fd6:	d1 f7       	brne	.-12     	; 0x8fcc <mulacc+0x38>
    8fd8:	62 0f       	add	r22, r18
    8fda:	71 1d       	adc	r23, r1
    8fdc:	81 1d       	adc	r24, r1
    8fde:	91 1d       	adc	r25, r1
    8fe0:	08 95       	ret

00008fe2 <skip_spaces>:
    8fe2:	0f 93       	push	r16
    8fe4:	1f 93       	push	r17
    8fe6:	cf 93       	push	r28
    8fe8:	df 93       	push	r29
    8fea:	8c 01       	movw	r16, r24
    8fec:	c8 01       	movw	r24, r16
    8fee:	0e d5       	rcall	.+2588   	; 0x9a0c <fgetc>
    8ff0:	ec 01       	movw	r28, r24
    8ff2:	97 fd       	sbrc	r25, 7
    8ff4:	06 c0       	rjmp	.+12     	; 0x9002 <skip_spaces+0x20>
    8ff6:	42 dc       	rcall	.-1916   	; 0x887c <isspace>
    8ff8:	89 2b       	or	r24, r25
    8ffa:	c1 f7       	brne	.-16     	; 0x8fec <skip_spaces+0xa>
    8ffc:	b8 01       	movw	r22, r16
    8ffe:	ce 01       	movw	r24, r28
    9000:	7f d5       	rcall	.+2814   	; 0x9b00 <ungetc>
    9002:	ce 01       	movw	r24, r28
    9004:	df 91       	pop	r29
    9006:	cf 91       	pop	r28
    9008:	1f 91       	pop	r17
    900a:	0f 91       	pop	r16
    900c:	08 95       	ret

0000900e <conv_int>:
    900e:	8f 92       	push	r8
    9010:	9f 92       	push	r9
    9012:	af 92       	push	r10
    9014:	bf 92       	push	r11
    9016:	ef 92       	push	r14
    9018:	ff 92       	push	r15
    901a:	0f 93       	push	r16
    901c:	1f 93       	push	r17
    901e:	cf 93       	push	r28
    9020:	df 93       	push	r29
    9022:	8c 01       	movw	r16, r24
    9024:	d6 2f       	mov	r29, r22
    9026:	7a 01       	movw	r14, r20
    9028:	b2 2e       	mov	r11, r18
    902a:	f0 d4       	rcall	.+2528   	; 0x9a0c <fgetc>
    902c:	9c 01       	movw	r18, r24
    902e:	33 27       	eor	r19, r19
    9030:	2b 32       	cpi	r18, 0x2B	; 43
    9032:	31 05       	cpc	r19, r1
    9034:	31 f0       	breq	.+12     	; 0x9042 <conv_int+0x34>
    9036:	2d 32       	cpi	r18, 0x2D	; 45
    9038:	31 05       	cpc	r19, r1
    903a:	59 f4       	brne	.+22     	; 0x9052 <conv_int+0x44>
    903c:	8b 2d       	mov	r24, r11
    903e:	80 68       	ori	r24, 0x80	; 128
    9040:	b8 2e       	mov	r11, r24
    9042:	d1 50       	subi	r29, 0x01	; 1
    9044:	11 f4       	brne	.+4      	; 0x904a <conv_int+0x3c>
    9046:	80 e0       	ldi	r24, 0x00	; 0
    9048:	61 c0       	rjmp	.+194    	; 0x910c <conv_int+0xfe>
    904a:	c8 01       	movw	r24, r16
    904c:	df d4       	rcall	.+2494   	; 0x9a0c <fgetc>
    904e:	97 fd       	sbrc	r25, 7
    9050:	fa cf       	rjmp	.-12     	; 0x9046 <conv_int+0x38>
    9052:	cb 2d       	mov	r28, r11
    9054:	cd 7f       	andi	r28, 0xFD	; 253
    9056:	2b 2d       	mov	r18, r11
    9058:	20 73       	andi	r18, 0x30	; 48
    905a:	f9 f4       	brne	.+62     	; 0x909a <conv_int+0x8c>
    905c:	80 33       	cpi	r24, 0x30	; 48
    905e:	e9 f4       	brne	.+58     	; 0x909a <conv_int+0x8c>
    9060:	aa 24       	eor	r10, r10
    9062:	aa 94       	dec	r10
    9064:	ad 0e       	add	r10, r29
    9066:	09 f4       	brne	.+2      	; 0x906a <conv_int+0x5c>
    9068:	3e c0       	rjmp	.+124    	; 0x90e6 <conv_int+0xd8>
    906a:	c8 01       	movw	r24, r16
    906c:	cf d4       	rcall	.+2462   	; 0x9a0c <fgetc>
    906e:	97 fd       	sbrc	r25, 7
    9070:	3a c0       	rjmp	.+116    	; 0x90e6 <conv_int+0xd8>
    9072:	9c 01       	movw	r18, r24
    9074:	2f 7d       	andi	r18, 0xDF	; 223
    9076:	33 27       	eor	r19, r19
    9078:	28 35       	cpi	r18, 0x58	; 88
    907a:	31 05       	cpc	r19, r1
    907c:	41 f4       	brne	.+16     	; 0x908e <conv_int+0x80>
    907e:	c2 64       	ori	r28, 0x42	; 66
    9080:	d2 50       	subi	r29, 0x02	; 2
    9082:	89 f1       	breq	.+98     	; 0x90e6 <conv_int+0xd8>
    9084:	c8 01       	movw	r24, r16
    9086:	c2 d4       	rcall	.+2436   	; 0x9a0c <fgetc>
    9088:	97 ff       	sbrs	r25, 7
    908a:	07 c0       	rjmp	.+14     	; 0x909a <conv_int+0x8c>
    908c:	2c c0       	rjmp	.+88     	; 0x90e6 <conv_int+0xd8>
    908e:	b6 fe       	sbrs	r11, 6
    9090:	02 c0       	rjmp	.+4      	; 0x9096 <conv_int+0x88>
    9092:	c2 60       	ori	r28, 0x02	; 2
    9094:	01 c0       	rjmp	.+2      	; 0x9098 <conv_int+0x8a>
    9096:	c2 61       	ori	r28, 0x12	; 18
    9098:	da 2d       	mov	r29, r10
    909a:	81 2c       	mov	r8, r1
    909c:	91 2c       	mov	r9, r1
    909e:	54 01       	movw	r10, r8
    90a0:	20 ed       	ldi	r18, 0xD0	; 208
    90a2:	28 0f       	add	r18, r24
    90a4:	28 30       	cpi	r18, 0x08	; 8
    90a6:	78 f0       	brcs	.+30     	; 0x90c6 <conv_int+0xb8>
    90a8:	c4 ff       	sbrs	r28, 4
    90aa:	03 c0       	rjmp	.+6      	; 0x90b2 <conv_int+0xa4>
    90ac:	b8 01       	movw	r22, r16
    90ae:	28 d5       	rcall	.+2640   	; 0x9b00 <ungetc>
    90b0:	17 c0       	rjmp	.+46     	; 0x90e0 <conv_int+0xd2>
    90b2:	2a 30       	cpi	r18, 0x0A	; 10
    90b4:	40 f0       	brcs	.+16     	; 0x90c6 <conv_int+0xb8>
    90b6:	c6 ff       	sbrs	r28, 6
    90b8:	f9 cf       	rjmp	.-14     	; 0x90ac <conv_int+0x9e>
    90ba:	2f 7d       	andi	r18, 0xDF	; 223
    90bc:	3f ee       	ldi	r19, 0xEF	; 239
    90be:	32 0f       	add	r19, r18
    90c0:	36 30       	cpi	r19, 0x06	; 6
    90c2:	a0 f7       	brcc	.-24     	; 0x90ac <conv_int+0x9e>
    90c4:	27 50       	subi	r18, 0x07	; 7
    90c6:	4c 2f       	mov	r20, r28
    90c8:	c5 01       	movw	r24, r10
    90ca:	b4 01       	movw	r22, r8
    90cc:	63 df       	rcall	.-314    	; 0x8f94 <mulacc>
    90ce:	4b 01       	movw	r8, r22
    90d0:	5c 01       	movw	r10, r24
    90d2:	c2 60       	ori	r28, 0x02	; 2
    90d4:	d1 50       	subi	r29, 0x01	; 1
    90d6:	51 f0       	breq	.+20     	; 0x90ec <conv_int+0xde>
    90d8:	c8 01       	movw	r24, r16
    90da:	98 d4       	rcall	.+2352   	; 0x9a0c <fgetc>
    90dc:	97 ff       	sbrs	r25, 7
    90de:	e0 cf       	rjmp	.-64     	; 0x90a0 <conv_int+0x92>
    90e0:	c1 fd       	sbrc	r28, 1
    90e2:	04 c0       	rjmp	.+8      	; 0x90ec <conv_int+0xde>
    90e4:	b0 cf       	rjmp	.-160    	; 0x9046 <conv_int+0x38>
    90e6:	81 2c       	mov	r8, r1
    90e8:	91 2c       	mov	r9, r1
    90ea:	54 01       	movw	r10, r8
    90ec:	c7 ff       	sbrs	r28, 7
    90ee:	08 c0       	rjmp	.+16     	; 0x9100 <conv_int+0xf2>
    90f0:	b0 94       	com	r11
    90f2:	a0 94       	com	r10
    90f4:	90 94       	com	r9
    90f6:	80 94       	com	r8
    90f8:	81 1c       	adc	r8, r1
    90fa:	91 1c       	adc	r9, r1
    90fc:	a1 1c       	adc	r10, r1
    90fe:	b1 1c       	adc	r11, r1
    9100:	2c 2f       	mov	r18, r28
    9102:	b5 01       	movw	r22, r10
    9104:	a4 01       	movw	r20, r8
    9106:	c7 01       	movw	r24, r14
    9108:	39 df       	rcall	.-398    	; 0x8f7c <putval>
    910a:	81 e0       	ldi	r24, 0x01	; 1
    910c:	df 91       	pop	r29
    910e:	cf 91       	pop	r28
    9110:	1f 91       	pop	r17
    9112:	0f 91       	pop	r16
    9114:	ff 90       	pop	r15
    9116:	ef 90       	pop	r14
    9118:	bf 90       	pop	r11
    911a:	af 90       	pop	r10
    911c:	9f 90       	pop	r9
    911e:	8f 90       	pop	r8
    9120:	08 95       	ret

00009122 <conv_brk>:
    9122:	5f 92       	push	r5
    9124:	6f 92       	push	r6
    9126:	7f 92       	push	r7
    9128:	8f 92       	push	r8
    912a:	9f 92       	push	r9
    912c:	af 92       	push	r10
    912e:	bf 92       	push	r11
    9130:	cf 92       	push	r12
    9132:	df 92       	push	r13
    9134:	ef 92       	push	r14
    9136:	ff 92       	push	r15
    9138:	0f 93       	push	r16
    913a:	1f 93       	push	r17
    913c:	cf 93       	push	r28
    913e:	df 93       	push	r29
    9140:	cd b7       	in	r28, 0x3d	; 61
    9142:	de b7       	in	r29, 0x3e	; 62
    9144:	a0 97       	sbiw	r28, 0x20	; 32
    9146:	0f b6       	in	r0, 0x3f	; 63
    9148:	f8 94       	cli
    914a:	de bf       	out	0x3e, r29	; 62
    914c:	0f be       	out	0x3f, r0	; 63
    914e:	cd bf       	out	0x3d, r28	; 61
    9150:	5c 01       	movw	r10, r24
    9152:	96 2e       	mov	r9, r22
    9154:	7a 01       	movw	r14, r20
    9156:	f9 01       	movw	r30, r18
    9158:	8e 01       	movw	r16, r28
    915a:	0f 5f       	subi	r16, 0xFF	; 255
    915c:	1f 4f       	sbci	r17, 0xFF	; 255
    915e:	68 01       	movw	r12, r16
    9160:	80 e2       	ldi	r24, 0x20	; 32
    9162:	d8 01       	movw	r26, r16
    9164:	1d 92       	st	X+, r1
    9166:	8a 95       	dec	r24
    9168:	e9 f7       	brne	.-6      	; 0x9164 <conv_brk+0x42>
    916a:	d5 01       	movw	r26, r10
    916c:	13 96       	adiw	r26, 0x03	; 3
    916e:	8c 90       	ld	r8, X
    9170:	80 e0       	ldi	r24, 0x00	; 0
    9172:	90 e0       	ldi	r25, 0x00	; 0
    9174:	61 2c       	mov	r6, r1
    9176:	71 2c       	mov	r7, r1
    9178:	30 e0       	ldi	r19, 0x00	; 0
    917a:	61 e0       	ldi	r22, 0x01	; 1
    917c:	70 e0       	ldi	r23, 0x00	; 0
    917e:	83 fc       	sbrc	r8, 3
    9180:	25 91       	lpm	r18, Z+
    9182:	83 fe       	sbrs	r8, 3
    9184:	21 91       	ld	r18, Z+
    9186:	8f 01       	movw	r16, r30
    9188:	52 2e       	mov	r5, r18
    918a:	21 11       	cpse	r18, r1
    918c:	03 c0       	rjmp	.+6      	; 0x9194 <conv_brk+0x72>
    918e:	80 e0       	ldi	r24, 0x00	; 0
    9190:	90 e0       	ldi	r25, 0x00	; 0
    9192:	90 c0       	rjmp	.+288    	; 0x92b4 <conv_brk+0x192>
    9194:	2e 35       	cpi	r18, 0x5E	; 94
    9196:	11 f4       	brne	.+4      	; 0x919c <conv_brk+0x7a>
    9198:	00 97       	sbiw	r24, 0x00	; 0
    919a:	51 f1       	breq	.+84     	; 0x91f0 <conv_brk+0xce>
    919c:	43 2f       	mov	r20, r19
    919e:	50 e0       	ldi	r21, 0x00	; 0
    91a0:	48 17       	cp	r20, r24
    91a2:	59 07       	cpc	r21, r25
    91a4:	3c f4       	brge	.+14     	; 0x91b4 <conv_brk+0x92>
    91a6:	2d 35       	cpi	r18, 0x5D	; 93
    91a8:	59 f1       	breq	.+86     	; 0x9200 <conv_brk+0xde>
    91aa:	2d 32       	cpi	r18, 0x2D	; 45
    91ac:	19 f4       	brne	.+6      	; 0x91b4 <conv_brk+0x92>
    91ae:	77 20       	and	r7, r7
    91b0:	09 f1       	breq	.+66     	; 0x91f4 <conv_brk+0xd2>
    91b2:	03 c0       	rjmp	.+6      	; 0x91ba <conv_brk+0x98>
    91b4:	77 20       	and	r7, r7
    91b6:	09 f4       	brne	.+2      	; 0x91ba <conv_brk+0x98>
    91b8:	68 c0       	rjmp	.+208    	; 0x928a <conv_brk+0x168>
    91ba:	45 2d       	mov	r20, r5
    91bc:	46 95       	lsr	r20
    91be:	46 95       	lsr	r20
    91c0:	46 95       	lsr	r20
    91c2:	d6 01       	movw	r26, r12
    91c4:	a4 0f       	add	r26, r20
    91c6:	b1 1d       	adc	r27, r1
    91c8:	45 2d       	mov	r20, r5
    91ca:	47 70       	andi	r20, 0x07	; 7
    91cc:	8b 01       	movw	r16, r22
    91ce:	02 c0       	rjmp	.+4      	; 0x91d4 <conv_brk+0xb2>
    91d0:	00 0f       	add	r16, r16
    91d2:	11 1f       	adc	r17, r17
    91d4:	4a 95       	dec	r20
    91d6:	e2 f7       	brpl	.-8      	; 0x91d0 <conv_brk+0xae>
    91d8:	a8 01       	movw	r20, r16
    91da:	5c 91       	ld	r21, X
    91dc:	45 2b       	or	r20, r21
    91de:	4c 93       	st	X, r20
    91e0:	65 14       	cp	r6, r5
    91e2:	59 f0       	breq	.+22     	; 0x91fa <conv_brk+0xd8>
    91e4:	56 14       	cp	r5, r6
    91e6:	10 f4       	brcc	.+4      	; 0x91ec <conv_brk+0xca>
    91e8:	53 94       	inc	r5
    91ea:	e7 cf       	rjmp	.-50     	; 0x91ba <conv_brk+0x98>
    91ec:	5a 94       	dec	r5
    91ee:	e5 cf       	rjmp	.-54     	; 0x91ba <conv_brk+0x98>
    91f0:	31 e0       	ldi	r19, 0x01	; 1
    91f2:	04 c0       	rjmp	.+8      	; 0x91fc <conv_brk+0xda>
    91f4:	77 24       	eor	r7, r7
    91f6:	73 94       	inc	r7
    91f8:	01 c0       	rjmp	.+2      	; 0x91fc <conv_brk+0xda>
    91fa:	71 2c       	mov	r7, r1
    91fc:	01 96       	adiw	r24, 0x01	; 1
    91fe:	bf cf       	rjmp	.-130    	; 0x917e <conv_brk+0x5c>
    9200:	77 20       	and	r7, r7
    9202:	19 f0       	breq	.+6      	; 0x920a <conv_brk+0xe8>
    9204:	8e 81       	ldd	r24, Y+6	; 0x06
    9206:	80 62       	ori	r24, 0x20	; 32
    9208:	8e 83       	std	Y+6, r24	; 0x06
    920a:	31 11       	cpse	r19, r1
    920c:	03 c0       	rjmp	.+6      	; 0x9214 <conv_brk+0xf2>
    920e:	88 24       	eor	r8, r8
    9210:	83 94       	inc	r8
    9212:	17 c0       	rjmp	.+46     	; 0x9242 <conv_brk+0x120>
    9214:	f6 01       	movw	r30, r12
    9216:	9e 01       	movw	r18, r28
    9218:	2f 5d       	subi	r18, 0xDF	; 223
    921a:	3f 4f       	sbci	r19, 0xFF	; 255
    921c:	80 81       	ld	r24, Z
    921e:	80 95       	com	r24
    9220:	81 93       	st	Z+, r24
    9222:	2e 17       	cp	r18, r30
    9224:	3f 07       	cpc	r19, r31
    9226:	d1 f7       	brne	.-12     	; 0x921c <conv_brk+0xfa>
    9228:	f2 cf       	rjmp	.-28     	; 0x920e <conv_brk+0xec>
    922a:	e1 14       	cp	r14, r1
    922c:	f1 04       	cpc	r15, r1
    922e:	29 f0       	breq	.+10     	; 0x923a <conv_brk+0x118>
    9230:	d7 01       	movw	r26, r14
    9232:	8c 93       	st	X, r24
    9234:	f7 01       	movw	r30, r14
    9236:	31 96       	adiw	r30, 0x01	; 1
    9238:	7f 01       	movw	r14, r30
    923a:	9a 94       	dec	r9
    923c:	81 2c       	mov	r8, r1
    923e:	99 20       	and	r9, r9
    9240:	e9 f0       	breq	.+58     	; 0x927c <conv_brk+0x15a>
    9242:	c5 01       	movw	r24, r10
    9244:	e3 d3       	rcall	.+1990   	; 0x9a0c <fgetc>
    9246:	97 fd       	sbrc	r25, 7
    9248:	17 c0       	rjmp	.+46     	; 0x9278 <conv_brk+0x156>
    924a:	fc 01       	movw	r30, r24
    924c:	ff 27       	eor	r31, r31
    924e:	23 e0       	ldi	r18, 0x03	; 3
    9250:	f5 95       	asr	r31
    9252:	e7 95       	ror	r30
    9254:	2a 95       	dec	r18
    9256:	e1 f7       	brne	.-8      	; 0x9250 <conv_brk+0x12e>
    9258:	ec 0d       	add	r30, r12
    925a:	fd 1d       	adc	r31, r13
    925c:	20 81       	ld	r18, Z
    925e:	30 e0       	ldi	r19, 0x00	; 0
    9260:	ac 01       	movw	r20, r24
    9262:	47 70       	andi	r20, 0x07	; 7
    9264:	55 27       	eor	r21, r21
    9266:	02 c0       	rjmp	.+4      	; 0x926c <conv_brk+0x14a>
    9268:	35 95       	asr	r19
    926a:	27 95       	ror	r18
    926c:	4a 95       	dec	r20
    926e:	e2 f7       	brpl	.-8      	; 0x9268 <conv_brk+0x146>
    9270:	20 fd       	sbrc	r18, 0
    9272:	db cf       	rjmp	.-74     	; 0x922a <conv_brk+0x108>
    9274:	b5 01       	movw	r22, r10
    9276:	44 d4       	rcall	.+2184   	; 0x9b00 <ungetc>
    9278:	81 10       	cpse	r8, r1
    927a:	89 cf       	rjmp	.-238    	; 0x918e <conv_brk+0x6c>
    927c:	e1 14       	cp	r14, r1
    927e:	f1 04       	cpc	r15, r1
    9280:	11 f0       	breq	.+4      	; 0x9286 <conv_brk+0x164>
    9282:	d7 01       	movw	r26, r14
    9284:	1c 92       	st	X, r1
    9286:	c8 01       	movw	r24, r16
    9288:	15 c0       	rjmp	.+42     	; 0x92b4 <conv_brk+0x192>
    928a:	42 2f       	mov	r20, r18
    928c:	46 95       	lsr	r20
    928e:	46 95       	lsr	r20
    9290:	46 95       	lsr	r20
    9292:	d6 01       	movw	r26, r12
    9294:	a4 0f       	add	r26, r20
    9296:	b1 1d       	adc	r27, r1
    9298:	42 2f       	mov	r20, r18
    929a:	47 70       	andi	r20, 0x07	; 7
    929c:	8b 01       	movw	r16, r22
    929e:	02 c0       	rjmp	.+4      	; 0x92a4 <conv_brk+0x182>
    92a0:	00 0f       	add	r16, r16
    92a2:	11 1f       	adc	r17, r17
    92a4:	4a 95       	dec	r20
    92a6:	e2 f7       	brpl	.-8      	; 0x92a0 <conv_brk+0x17e>
    92a8:	a8 01       	movw	r20, r16
    92aa:	5c 91       	ld	r21, X
    92ac:	45 2b       	or	r20, r21
    92ae:	4c 93       	st	X, r20
    92b0:	62 2e       	mov	r6, r18
    92b2:	a4 cf       	rjmp	.-184    	; 0x91fc <conv_brk+0xda>
    92b4:	a0 96       	adiw	r28, 0x20	; 32
    92b6:	0f b6       	in	r0, 0x3f	; 63
    92b8:	f8 94       	cli
    92ba:	de bf       	out	0x3e, r29	; 62
    92bc:	0f be       	out	0x3f, r0	; 63
    92be:	cd bf       	out	0x3d, r28	; 61
    92c0:	df 91       	pop	r29
    92c2:	cf 91       	pop	r28
    92c4:	1f 91       	pop	r17
    92c6:	0f 91       	pop	r16
    92c8:	ff 90       	pop	r15
    92ca:	ef 90       	pop	r14
    92cc:	df 90       	pop	r13
    92ce:	cf 90       	pop	r12
    92d0:	bf 90       	pop	r11
    92d2:	af 90       	pop	r10
    92d4:	9f 90       	pop	r9
    92d6:	8f 90       	pop	r8
    92d8:	7f 90       	pop	r7
    92da:	6f 90       	pop	r6
    92dc:	5f 90       	pop	r5
    92de:	08 95       	ret

000092e0 <vfscanf>:
    92e0:	5f 92       	push	r5
    92e2:	6f 92       	push	r6
    92e4:	7f 92       	push	r7
    92e6:	8f 92       	push	r8
    92e8:	9f 92       	push	r9
    92ea:	af 92       	push	r10
    92ec:	bf 92       	push	r11
    92ee:	cf 92       	push	r12
    92f0:	df 92       	push	r13
    92f2:	ef 92       	push	r14
    92f4:	ff 92       	push	r15
    92f6:	0f 93       	push	r16
    92f8:	1f 93       	push	r17
    92fa:	cf 93       	push	r28
    92fc:	df 93       	push	r29
    92fe:	6c 01       	movw	r12, r24
    9300:	eb 01       	movw	r28, r22
    9302:	5a 01       	movw	r10, r20
    9304:	fc 01       	movw	r30, r24
    9306:	17 82       	std	Z+7, r1	; 0x07
    9308:	16 82       	std	Z+6, r1	; 0x06
    930a:	51 2c       	mov	r5, r1
    930c:	f6 01       	movw	r30, r12
    930e:	e3 80       	ldd	r14, Z+3	; 0x03
    9310:	fe 01       	movw	r30, r28
    9312:	e3 fc       	sbrc	r14, 3
    9314:	85 91       	lpm	r24, Z+
    9316:	e3 fe       	sbrs	r14, 3
    9318:	81 91       	ld	r24, Z+
    931a:	18 2f       	mov	r17, r24
    931c:	ef 01       	movw	r28, r30
    931e:	88 23       	and	r24, r24
    9320:	09 f4       	brne	.+2      	; 0x9324 <vfscanf+0x44>
    9322:	e0 c0       	rjmp	.+448    	; 0x94e4 <vfscanf+0x204>
    9324:	90 e0       	ldi	r25, 0x00	; 0
    9326:	aa da       	rcall	.-2732   	; 0x887c <isspace>
    9328:	89 2b       	or	r24, r25
    932a:	19 f0       	breq	.+6      	; 0x9332 <vfscanf+0x52>
    932c:	c6 01       	movw	r24, r12
    932e:	59 de       	rcall	.-846    	; 0x8fe2 <skip_spaces>
    9330:	ed cf       	rjmp	.-38     	; 0x930c <vfscanf+0x2c>
    9332:	15 32       	cpi	r17, 0x25	; 37
    9334:	41 f4       	brne	.+16     	; 0x9346 <vfscanf+0x66>
    9336:	fe 01       	movw	r30, r28
    9338:	e3 fc       	sbrc	r14, 3
    933a:	15 91       	lpm	r17, Z+
    933c:	e3 fe       	sbrs	r14, 3
    933e:	11 91       	ld	r17, Z+
    9340:	ef 01       	movw	r28, r30
    9342:	15 32       	cpi	r17, 0x25	; 37
    9344:	71 f4       	brne	.+28     	; 0x9362 <vfscanf+0x82>
    9346:	c6 01       	movw	r24, r12
    9348:	61 d3       	rcall	.+1730   	; 0x9a0c <fgetc>
    934a:	97 fd       	sbrc	r25, 7
    934c:	c9 c0       	rjmp	.+402    	; 0x94e0 <vfscanf+0x200>
    934e:	41 2f       	mov	r20, r17
    9350:	50 e0       	ldi	r21, 0x00	; 0
    9352:	9c 01       	movw	r18, r24
    9354:	33 27       	eor	r19, r19
    9356:	24 17       	cp	r18, r20
    9358:	35 07       	cpc	r19, r21
    935a:	c1 f2       	breq	.-80     	; 0x930c <vfscanf+0x2c>
    935c:	b6 01       	movw	r22, r12
    935e:	d0 d3       	rcall	.+1952   	; 0x9b00 <ungetc>
    9360:	c1 c0       	rjmp	.+386    	; 0x94e4 <vfscanf+0x204>
    9362:	1a 32       	cpi	r17, 0x2A	; 42
    9364:	39 f4       	brne	.+14     	; 0x9374 <vfscanf+0x94>
    9366:	e3 fc       	sbrc	r14, 3
    9368:	15 91       	lpm	r17, Z+
    936a:	e3 fe       	sbrs	r14, 3
    936c:	11 91       	ld	r17, Z+
    936e:	ef 01       	movw	r28, r30
    9370:	01 e0       	ldi	r16, 0x01	; 1
    9372:	01 c0       	rjmp	.+2      	; 0x9376 <vfscanf+0x96>
    9374:	00 e0       	ldi	r16, 0x00	; 0
    9376:	f1 2c       	mov	r15, r1
    9378:	20 ed       	ldi	r18, 0xD0	; 208
    937a:	21 0f       	add	r18, r17
    937c:	2a 30       	cpi	r18, 0x0A	; 10
    937e:	78 f4       	brcc	.+30     	; 0x939e <vfscanf+0xbe>
    9380:	02 60       	ori	r16, 0x02	; 2
    9382:	6f 2d       	mov	r22, r15
    9384:	70 e0       	ldi	r23, 0x00	; 0
    9386:	80 e0       	ldi	r24, 0x00	; 0
    9388:	90 e0       	ldi	r25, 0x00	; 0
    938a:	40 e2       	ldi	r20, 0x20	; 32
    938c:	03 de       	rcall	.-1018   	; 0x8f94 <mulacc>
    938e:	f6 2e       	mov	r15, r22
    9390:	fe 01       	movw	r30, r28
    9392:	e3 fc       	sbrc	r14, 3
    9394:	15 91       	lpm	r17, Z+
    9396:	e3 fe       	sbrs	r14, 3
    9398:	11 91       	ld	r17, Z+
    939a:	ef 01       	movw	r28, r30
    939c:	ed cf       	rjmp	.-38     	; 0x9378 <vfscanf+0x98>
    939e:	01 ff       	sbrs	r16, 1
    93a0:	03 c0       	rjmp	.+6      	; 0x93a8 <vfscanf+0xc8>
    93a2:	f1 10       	cpse	r15, r1
    93a4:	03 c0       	rjmp	.+6      	; 0x93ac <vfscanf+0xcc>
    93a6:	9e c0       	rjmp	.+316    	; 0x94e4 <vfscanf+0x204>
    93a8:	ff 24       	eor	r15, r15
    93aa:	fa 94       	dec	r15
    93ac:	18 36       	cpi	r17, 0x68	; 104
    93ae:	19 f0       	breq	.+6      	; 0x93b6 <vfscanf+0xd6>
    93b0:	1c 36       	cpi	r17, 0x6C	; 108
    93b2:	51 f0       	breq	.+20     	; 0x93c8 <vfscanf+0xe8>
    93b4:	10 c0       	rjmp	.+32     	; 0x93d6 <vfscanf+0xf6>
    93b6:	fe 01       	movw	r30, r28
    93b8:	e3 fc       	sbrc	r14, 3
    93ba:	15 91       	lpm	r17, Z+
    93bc:	e3 fe       	sbrs	r14, 3
    93be:	11 91       	ld	r17, Z+
    93c0:	ef 01       	movw	r28, r30
    93c2:	18 36       	cpi	r17, 0x68	; 104
    93c4:	41 f4       	brne	.+16     	; 0x93d6 <vfscanf+0xf6>
    93c6:	08 60       	ori	r16, 0x08	; 8
    93c8:	04 60       	ori	r16, 0x04	; 4
    93ca:	fe 01       	movw	r30, r28
    93cc:	e3 fc       	sbrc	r14, 3
    93ce:	15 91       	lpm	r17, Z+
    93d0:	e3 fe       	sbrs	r14, 3
    93d2:	11 91       	ld	r17, Z+
    93d4:	ef 01       	movw	r28, r30
    93d6:	11 23       	and	r17, r17
    93d8:	09 f4       	brne	.+2      	; 0x93dc <vfscanf+0xfc>
    93da:	84 c0       	rjmp	.+264    	; 0x94e4 <vfscanf+0x204>
    93dc:	61 2f       	mov	r22, r17
    93de:	70 e0       	ldi	r23, 0x00	; 0
    93e0:	8a ef       	ldi	r24, 0xFA	; 250
    93e2:	90 e0       	ldi	r25, 0x00	; 0
    93e4:	e2 d2       	rcall	.+1476   	; 0x99aa <strchr_P>
    93e6:	89 2b       	or	r24, r25
    93e8:	09 f4       	brne	.+2      	; 0x93ec <vfscanf+0x10c>
    93ea:	7c c0       	rjmp	.+248    	; 0x94e4 <vfscanf+0x204>
    93ec:	00 fd       	sbrc	r16, 0
    93ee:	07 c0       	rjmp	.+14     	; 0x93fe <vfscanf+0x11e>
    93f0:	f5 01       	movw	r30, r10
    93f2:	80 80       	ld	r8, Z
    93f4:	91 80       	ldd	r9, Z+1	; 0x01
    93f6:	c5 01       	movw	r24, r10
    93f8:	02 96       	adiw	r24, 0x02	; 2
    93fa:	5c 01       	movw	r10, r24
    93fc:	02 c0       	rjmp	.+4      	; 0x9402 <vfscanf+0x122>
    93fe:	81 2c       	mov	r8, r1
    9400:	91 2c       	mov	r9, r1
    9402:	1e 36       	cpi	r17, 0x6E	; 110
    9404:	49 f4       	brne	.+18     	; 0x9418 <vfscanf+0x138>
    9406:	f6 01       	movw	r30, r12
    9408:	46 81       	ldd	r20, Z+6	; 0x06
    940a:	57 81       	ldd	r21, Z+7	; 0x07
    940c:	60 e0       	ldi	r22, 0x00	; 0
    940e:	70 e0       	ldi	r23, 0x00	; 0
    9410:	20 2f       	mov	r18, r16
    9412:	c4 01       	movw	r24, r8
    9414:	b3 dd       	rcall	.-1178   	; 0x8f7c <putval>
    9416:	7a cf       	rjmp	.-268    	; 0x930c <vfscanf+0x2c>
    9418:	13 36       	cpi	r17, 0x63	; 99
    941a:	a1 f4       	brne	.+40     	; 0x9444 <vfscanf+0x164>
    941c:	01 fd       	sbrc	r16, 1
    941e:	02 c0       	rjmp	.+4      	; 0x9424 <vfscanf+0x144>
    9420:	ff 24       	eor	r15, r15
    9422:	f3 94       	inc	r15
    9424:	c6 01       	movw	r24, r12
    9426:	f2 d2       	rcall	.+1508   	; 0x9a0c <fgetc>
    9428:	97 fd       	sbrc	r25, 7
    942a:	5a c0       	rjmp	.+180    	; 0x94e0 <vfscanf+0x200>
    942c:	81 14       	cp	r8, r1
    942e:	91 04       	cpc	r9, r1
    9430:	29 f0       	breq	.+10     	; 0x943c <vfscanf+0x15c>
    9432:	f4 01       	movw	r30, r8
    9434:	80 83       	st	Z, r24
    9436:	c4 01       	movw	r24, r8
    9438:	01 96       	adiw	r24, 0x01	; 1
    943a:	4c 01       	movw	r8, r24
    943c:	fa 94       	dec	r15
    943e:	f1 10       	cpse	r15, r1
    9440:	f1 cf       	rjmp	.-30     	; 0x9424 <vfscanf+0x144>
    9442:	4a c0       	rjmp	.+148    	; 0x94d8 <vfscanf+0x1f8>
    9444:	1b 35       	cpi	r17, 0x5B	; 91
    9446:	51 f4       	brne	.+20     	; 0x945c <vfscanf+0x17c>
    9448:	9e 01       	movw	r18, r28
    944a:	a4 01       	movw	r20, r8
    944c:	6f 2d       	mov	r22, r15
    944e:	c6 01       	movw	r24, r12
    9450:	68 de       	rcall	.-816    	; 0x9122 <conv_brk>
    9452:	ec 01       	movw	r28, r24
    9454:	89 2b       	or	r24, r25
    9456:	09 f0       	breq	.+2      	; 0x945a <vfscanf+0x17a>
    9458:	3f c0       	rjmp	.+126    	; 0x94d8 <vfscanf+0x1f8>
    945a:	39 c0       	rjmp	.+114    	; 0x94ce <vfscanf+0x1ee>
    945c:	c6 01       	movw	r24, r12
    945e:	c1 dd       	rcall	.-1150   	; 0x8fe2 <skip_spaces>
    9460:	97 fd       	sbrc	r25, 7
    9462:	3e c0       	rjmp	.+124    	; 0x94e0 <vfscanf+0x200>
    9464:	1f 36       	cpi	r17, 0x6F	; 111
    9466:	49 f1       	breq	.+82     	; 0x94ba <vfscanf+0x1da>
    9468:	28 f4       	brcc	.+10     	; 0x9474 <vfscanf+0x194>
    946a:	14 36       	cpi	r17, 0x64	; 100
    946c:	21 f1       	breq	.+72     	; 0x94b6 <vfscanf+0x1d6>
    946e:	19 36       	cpi	r17, 0x69	; 105
    9470:	39 f1       	breq	.+78     	; 0x94c0 <vfscanf+0x1e0>
    9472:	25 c0       	rjmp	.+74     	; 0x94be <vfscanf+0x1de>
    9474:	13 37       	cpi	r17, 0x73	; 115
    9476:	71 f0       	breq	.+28     	; 0x9494 <vfscanf+0x1b4>
    9478:	15 37       	cpi	r17, 0x75	; 117
    947a:	e9 f0       	breq	.+58     	; 0x94b6 <vfscanf+0x1d6>
    947c:	20 c0       	rjmp	.+64     	; 0x94be <vfscanf+0x1de>
    947e:	81 14       	cp	r8, r1
    9480:	91 04       	cpc	r9, r1
    9482:	29 f0       	breq	.+10     	; 0x948e <vfscanf+0x1ae>
    9484:	f4 01       	movw	r30, r8
    9486:	60 82       	st	Z, r6
    9488:	c4 01       	movw	r24, r8
    948a:	01 96       	adiw	r24, 0x01	; 1
    948c:	4c 01       	movw	r8, r24
    948e:	fa 94       	dec	r15
    9490:	ff 20       	and	r15, r15
    9492:	59 f0       	breq	.+22     	; 0x94aa <vfscanf+0x1ca>
    9494:	c6 01       	movw	r24, r12
    9496:	ba d2       	rcall	.+1396   	; 0x9a0c <fgetc>
    9498:	3c 01       	movw	r6, r24
    949a:	97 fd       	sbrc	r25, 7
    949c:	06 c0       	rjmp	.+12     	; 0x94aa <vfscanf+0x1ca>
    949e:	ee d9       	rcall	.-3108   	; 0x887c <isspace>
    94a0:	89 2b       	or	r24, r25
    94a2:	69 f3       	breq	.-38     	; 0x947e <vfscanf+0x19e>
    94a4:	b6 01       	movw	r22, r12
    94a6:	c3 01       	movw	r24, r6
    94a8:	2b d3       	rcall	.+1622   	; 0x9b00 <ungetc>
    94aa:	81 14       	cp	r8, r1
    94ac:	91 04       	cpc	r9, r1
    94ae:	a1 f0       	breq	.+40     	; 0x94d8 <vfscanf+0x1f8>
    94b0:	f4 01       	movw	r30, r8
    94b2:	10 82       	st	Z, r1
    94b4:	11 c0       	rjmp	.+34     	; 0x94d8 <vfscanf+0x1f8>
    94b6:	00 62       	ori	r16, 0x20	; 32
    94b8:	03 c0       	rjmp	.+6      	; 0x94c0 <vfscanf+0x1e0>
    94ba:	00 61       	ori	r16, 0x10	; 16
    94bc:	01 c0       	rjmp	.+2      	; 0x94c0 <vfscanf+0x1e0>
    94be:	00 64       	ori	r16, 0x40	; 64
    94c0:	20 2f       	mov	r18, r16
    94c2:	a4 01       	movw	r20, r8
    94c4:	6f 2d       	mov	r22, r15
    94c6:	c6 01       	movw	r24, r12
    94c8:	a2 dd       	rcall	.-1212   	; 0x900e <conv_int>
    94ca:	81 11       	cpse	r24, r1
    94cc:	05 c0       	rjmp	.+10     	; 0x94d8 <vfscanf+0x1f8>
    94ce:	f6 01       	movw	r30, r12
    94d0:	83 81       	ldd	r24, Z+3	; 0x03
    94d2:	80 73       	andi	r24, 0x30	; 48
    94d4:	29 f4       	brne	.+10     	; 0x94e0 <vfscanf+0x200>
    94d6:	06 c0       	rjmp	.+12     	; 0x94e4 <vfscanf+0x204>
    94d8:	00 fd       	sbrc	r16, 0
    94da:	18 cf       	rjmp	.-464    	; 0x930c <vfscanf+0x2c>
    94dc:	53 94       	inc	r5
    94de:	16 cf       	rjmp	.-468    	; 0x930c <vfscanf+0x2c>
    94e0:	55 20       	and	r5, r5
    94e2:	19 f0       	breq	.+6      	; 0x94ea <vfscanf+0x20a>
    94e4:	85 2d       	mov	r24, r5
    94e6:	90 e0       	ldi	r25, 0x00	; 0
    94e8:	02 c0       	rjmp	.+4      	; 0x94ee <vfscanf+0x20e>
    94ea:	8f ef       	ldi	r24, 0xFF	; 255
    94ec:	9f ef       	ldi	r25, 0xFF	; 255
    94ee:	df 91       	pop	r29
    94f0:	cf 91       	pop	r28
    94f2:	1f 91       	pop	r17
    94f4:	0f 91       	pop	r16
    94f6:	ff 90       	pop	r15
    94f8:	ef 90       	pop	r14
    94fa:	df 90       	pop	r13
    94fc:	cf 90       	pop	r12
    94fe:	bf 90       	pop	r11
    9500:	af 90       	pop	r10
    9502:	9f 90       	pop	r9
    9504:	8f 90       	pop	r8
    9506:	7f 90       	pop	r7
    9508:	6f 90       	pop	r6
    950a:	5f 90       	pop	r5
    950c:	08 95       	ret

0000950e <dtoa_prf>:
    950e:	8f 92       	push	r8
    9510:	9f 92       	push	r9
    9512:	af 92       	push	r10
    9514:	bf 92       	push	r11
    9516:	cf 92       	push	r12
    9518:	df 92       	push	r13
    951a:	ef 92       	push	r14
    951c:	ff 92       	push	r15
    951e:	0f 93       	push	r16
    9520:	1f 93       	push	r17
    9522:	cf 93       	push	r28
    9524:	df 93       	push	r29
    9526:	cd b7       	in	r28, 0x3d	; 61
    9528:	de b7       	in	r29, 0x3e	; 62
    952a:	29 97       	sbiw	r28, 0x09	; 9
    952c:	0f b6       	in	r0, 0x3f	; 63
    952e:	f8 94       	cli
    9530:	de bf       	out	0x3e, r29	; 62
    9532:	0f be       	out	0x3f, r0	; 63
    9534:	cd bf       	out	0x3d, r28	; 61
    9536:	6a 01       	movw	r12, r20
    9538:	12 2f       	mov	r17, r18
    953a:	b0 2e       	mov	r11, r16
    953c:	2b e3       	ldi	r18, 0x3B	; 59
    953e:	20 17       	cp	r18, r16
    9540:	20 f0       	brcs	.+8      	; 0x954a <dtoa_prf+0x3c>
    9542:	ff 24       	eor	r15, r15
    9544:	f3 94       	inc	r15
    9546:	f0 0e       	add	r15, r16
    9548:	02 c0       	rjmp	.+4      	; 0x954e <dtoa_prf+0x40>
    954a:	2c e3       	ldi	r18, 0x3C	; 60
    954c:	f2 2e       	mov	r15, r18
    954e:	0f 2d       	mov	r16, r15
    9550:	27 e0       	ldi	r18, 0x07	; 7
    9552:	ae 01       	movw	r20, r28
    9554:	4f 5f       	subi	r20, 0xFF	; 255
    9556:	5f 4f       	sbci	r21, 0xFF	; 255
    9558:	50 d1       	rcall	.+672    	; 0x97fa <__ftoa_engine>
    955a:	bc 01       	movw	r22, r24
    955c:	49 81       	ldd	r20, Y+1	; 0x01
    955e:	84 2f       	mov	r24, r20
    9560:	89 70       	andi	r24, 0x09	; 9
    9562:	81 30       	cpi	r24, 0x01	; 1
    9564:	31 f0       	breq	.+12     	; 0x9572 <dtoa_prf+0x64>
    9566:	e1 fc       	sbrc	r14, 1
    9568:	06 c0       	rjmp	.+12     	; 0x9576 <dtoa_prf+0x68>
    956a:	e0 fe       	sbrs	r14, 0
    956c:	06 c0       	rjmp	.+12     	; 0x957a <dtoa_prf+0x6c>
    956e:	90 e2       	ldi	r25, 0x20	; 32
    9570:	05 c0       	rjmp	.+10     	; 0x957c <dtoa_prf+0x6e>
    9572:	9d e2       	ldi	r25, 0x2D	; 45
    9574:	03 c0       	rjmp	.+6      	; 0x957c <dtoa_prf+0x6e>
    9576:	9b e2       	ldi	r25, 0x2B	; 43
    9578:	01 c0       	rjmp	.+2      	; 0x957c <dtoa_prf+0x6e>
    957a:	90 e0       	ldi	r25, 0x00	; 0
    957c:	5e 2d       	mov	r21, r14
    957e:	50 71       	andi	r21, 0x10	; 16
    9580:	43 ff       	sbrs	r20, 3
    9582:	3c c0       	rjmp	.+120    	; 0x95fc <dtoa_prf+0xee>
    9584:	91 11       	cpse	r25, r1
    9586:	02 c0       	rjmp	.+4      	; 0x958c <dtoa_prf+0x7e>
    9588:	83 e0       	ldi	r24, 0x03	; 3
    958a:	01 c0       	rjmp	.+2      	; 0x958e <dtoa_prf+0x80>
    958c:	84 e0       	ldi	r24, 0x04	; 4
    958e:	81 17       	cp	r24, r17
    9590:	18 f4       	brcc	.+6      	; 0x9598 <dtoa_prf+0x8a>
    9592:	21 2f       	mov	r18, r17
    9594:	28 1b       	sub	r18, r24
    9596:	01 c0       	rjmp	.+2      	; 0x959a <dtoa_prf+0x8c>
    9598:	20 e0       	ldi	r18, 0x00	; 0
    959a:	51 11       	cpse	r21, r1
    959c:	0b c0       	rjmp	.+22     	; 0x95b4 <dtoa_prf+0xa6>
    959e:	f6 01       	movw	r30, r12
    95a0:	82 2f       	mov	r24, r18
    95a2:	30 e2       	ldi	r19, 0x20	; 32
    95a4:	88 23       	and	r24, r24
    95a6:	19 f0       	breq	.+6      	; 0x95ae <dtoa_prf+0xa0>
    95a8:	31 93       	st	Z+, r19
    95aa:	81 50       	subi	r24, 0x01	; 1
    95ac:	fb cf       	rjmp	.-10     	; 0x95a4 <dtoa_prf+0x96>
    95ae:	c2 0e       	add	r12, r18
    95b0:	d1 1c       	adc	r13, r1
    95b2:	20 e0       	ldi	r18, 0x00	; 0
    95b4:	99 23       	and	r25, r25
    95b6:	29 f0       	breq	.+10     	; 0x95c2 <dtoa_prf+0xb4>
    95b8:	d6 01       	movw	r26, r12
    95ba:	9c 93       	st	X, r25
    95bc:	f6 01       	movw	r30, r12
    95be:	31 96       	adiw	r30, 0x01	; 1
    95c0:	6f 01       	movw	r12, r30
    95c2:	c6 01       	movw	r24, r12
    95c4:	03 96       	adiw	r24, 0x03	; 3
    95c6:	e2 fe       	sbrs	r14, 2
    95c8:	0a c0       	rjmp	.+20     	; 0x95de <dtoa_prf+0xd0>
    95ca:	3e e4       	ldi	r19, 0x4E	; 78
    95cc:	d6 01       	movw	r26, r12
    95ce:	3c 93       	st	X, r19
    95d0:	41 e4       	ldi	r20, 0x41	; 65
    95d2:	11 96       	adiw	r26, 0x01	; 1
    95d4:	4c 93       	st	X, r20
    95d6:	11 97       	sbiw	r26, 0x01	; 1
    95d8:	12 96       	adiw	r26, 0x02	; 2
    95da:	3c 93       	st	X, r19
    95dc:	06 c0       	rjmp	.+12     	; 0x95ea <dtoa_prf+0xdc>
    95de:	3e e6       	ldi	r19, 0x6E	; 110
    95e0:	f6 01       	movw	r30, r12
    95e2:	30 83       	st	Z, r19
    95e4:	41 e6       	ldi	r20, 0x61	; 97
    95e6:	41 83       	std	Z+1, r20	; 0x01
    95e8:	32 83       	std	Z+2, r19	; 0x02
    95ea:	fc 01       	movw	r30, r24
    95ec:	32 2f       	mov	r19, r18
    95ee:	40 e2       	ldi	r20, 0x20	; 32
    95f0:	33 23       	and	r19, r19
    95f2:	09 f4       	brne	.+2      	; 0x95f6 <dtoa_prf+0xe8>
    95f4:	42 c0       	rjmp	.+132    	; 0x967a <dtoa_prf+0x16c>
    95f6:	41 93       	st	Z+, r20
    95f8:	31 50       	subi	r19, 0x01	; 1
    95fa:	fa cf       	rjmp	.-12     	; 0x95f0 <dtoa_prf+0xe2>
    95fc:	42 ff       	sbrs	r20, 2
    95fe:	44 c0       	rjmp	.+136    	; 0x9688 <dtoa_prf+0x17a>
    9600:	91 11       	cpse	r25, r1
    9602:	02 c0       	rjmp	.+4      	; 0x9608 <dtoa_prf+0xfa>
    9604:	83 e0       	ldi	r24, 0x03	; 3
    9606:	01 c0       	rjmp	.+2      	; 0x960a <dtoa_prf+0xfc>
    9608:	84 e0       	ldi	r24, 0x04	; 4
    960a:	81 17       	cp	r24, r17
    960c:	18 f4       	brcc	.+6      	; 0x9614 <dtoa_prf+0x106>
    960e:	21 2f       	mov	r18, r17
    9610:	28 1b       	sub	r18, r24
    9612:	01 c0       	rjmp	.+2      	; 0x9616 <dtoa_prf+0x108>
    9614:	20 e0       	ldi	r18, 0x00	; 0
    9616:	51 11       	cpse	r21, r1
    9618:	0b c0       	rjmp	.+22     	; 0x9630 <dtoa_prf+0x122>
    961a:	f6 01       	movw	r30, r12
    961c:	82 2f       	mov	r24, r18
    961e:	30 e2       	ldi	r19, 0x20	; 32
    9620:	88 23       	and	r24, r24
    9622:	19 f0       	breq	.+6      	; 0x962a <dtoa_prf+0x11c>
    9624:	31 93       	st	Z+, r19
    9626:	81 50       	subi	r24, 0x01	; 1
    9628:	fb cf       	rjmp	.-10     	; 0x9620 <dtoa_prf+0x112>
    962a:	c2 0e       	add	r12, r18
    962c:	d1 1c       	adc	r13, r1
    962e:	20 e0       	ldi	r18, 0x00	; 0
    9630:	99 23       	and	r25, r25
    9632:	29 f0       	breq	.+10     	; 0x963e <dtoa_prf+0x130>
    9634:	d6 01       	movw	r26, r12
    9636:	9c 93       	st	X, r25
    9638:	f6 01       	movw	r30, r12
    963a:	31 96       	adiw	r30, 0x01	; 1
    963c:	6f 01       	movw	r12, r30
    963e:	c6 01       	movw	r24, r12
    9640:	03 96       	adiw	r24, 0x03	; 3
    9642:	e2 fe       	sbrs	r14, 2
    9644:	0b c0       	rjmp	.+22     	; 0x965c <dtoa_prf+0x14e>
    9646:	39 e4       	ldi	r19, 0x49	; 73
    9648:	d6 01       	movw	r26, r12
    964a:	3c 93       	st	X, r19
    964c:	3e e4       	ldi	r19, 0x4E	; 78
    964e:	11 96       	adiw	r26, 0x01	; 1
    9650:	3c 93       	st	X, r19
    9652:	11 97       	sbiw	r26, 0x01	; 1
    9654:	36 e4       	ldi	r19, 0x46	; 70
    9656:	12 96       	adiw	r26, 0x02	; 2
    9658:	3c 93       	st	X, r19
    965a:	07 c0       	rjmp	.+14     	; 0x966a <dtoa_prf+0x15c>
    965c:	39 e6       	ldi	r19, 0x69	; 105
    965e:	f6 01       	movw	r30, r12
    9660:	30 83       	st	Z, r19
    9662:	3e e6       	ldi	r19, 0x6E	; 110
    9664:	31 83       	std	Z+1, r19	; 0x01
    9666:	36 e6       	ldi	r19, 0x66	; 102
    9668:	32 83       	std	Z+2, r19	; 0x02
    966a:	fc 01       	movw	r30, r24
    966c:	32 2f       	mov	r19, r18
    966e:	40 e2       	ldi	r20, 0x20	; 32
    9670:	33 23       	and	r19, r19
    9672:	19 f0       	breq	.+6      	; 0x967a <dtoa_prf+0x16c>
    9674:	41 93       	st	Z+, r20
    9676:	31 50       	subi	r19, 0x01	; 1
    9678:	fb cf       	rjmp	.-10     	; 0x9670 <dtoa_prf+0x162>
    967a:	fc 01       	movw	r30, r24
    967c:	e2 0f       	add	r30, r18
    967e:	f1 1d       	adc	r31, r1
    9680:	10 82       	st	Z, r1
    9682:	8e ef       	ldi	r24, 0xFE	; 254
    9684:	9f ef       	ldi	r25, 0xFF	; 255
    9686:	a6 c0       	rjmp	.+332    	; 0x97d4 <dtoa_prf+0x2c6>
    9688:	21 e0       	ldi	r18, 0x01	; 1
    968a:	30 e0       	ldi	r19, 0x00	; 0
    968c:	91 11       	cpse	r25, r1
    968e:	02 c0       	rjmp	.+4      	; 0x9694 <dtoa_prf+0x186>
    9690:	20 e0       	ldi	r18, 0x00	; 0
    9692:	30 e0       	ldi	r19, 0x00	; 0
    9694:	16 16       	cp	r1, r22
    9696:	17 06       	cpc	r1, r23
    9698:	1c f4       	brge	.+6      	; 0x96a0 <dtoa_prf+0x192>
    969a:	fb 01       	movw	r30, r22
    969c:	31 96       	adiw	r30, 0x01	; 1
    969e:	02 c0       	rjmp	.+4      	; 0x96a4 <dtoa_prf+0x196>
    96a0:	e1 e0       	ldi	r30, 0x01	; 1
    96a2:	f0 e0       	ldi	r31, 0x00	; 0
    96a4:	2e 0f       	add	r18, r30
    96a6:	3f 1f       	adc	r19, r31
    96a8:	bb 20       	and	r11, r11
    96aa:	21 f0       	breq	.+8      	; 0x96b4 <dtoa_prf+0x1a6>
    96ac:	eb 2d       	mov	r30, r11
    96ae:	f0 e0       	ldi	r31, 0x00	; 0
    96b0:	31 96       	adiw	r30, 0x01	; 1
    96b2:	02 c0       	rjmp	.+4      	; 0x96b8 <dtoa_prf+0x1aa>
    96b4:	e0 e0       	ldi	r30, 0x00	; 0
    96b6:	f0 e0       	ldi	r31, 0x00	; 0
    96b8:	2e 0f       	add	r18, r30
    96ba:	3f 1f       	adc	r19, r31
    96bc:	e1 2f       	mov	r30, r17
    96be:	f0 e0       	ldi	r31, 0x00	; 0
    96c0:	2e 17       	cp	r18, r30
    96c2:	3f 07       	cpc	r19, r31
    96c4:	1c f4       	brge	.+6      	; 0x96cc <dtoa_prf+0x1be>
    96c6:	12 1b       	sub	r17, r18
    96c8:	21 2f       	mov	r18, r17
    96ca:	01 c0       	rjmp	.+2      	; 0x96ce <dtoa_prf+0x1c0>
    96cc:	20 e0       	ldi	r18, 0x00	; 0
    96ce:	8e 2d       	mov	r24, r14
    96d0:	88 71       	andi	r24, 0x18	; 24
    96d2:	59 f4       	brne	.+22     	; 0x96ea <dtoa_prf+0x1dc>
    96d4:	f6 01       	movw	r30, r12
    96d6:	82 2f       	mov	r24, r18
    96d8:	30 e2       	ldi	r19, 0x20	; 32
    96da:	88 23       	and	r24, r24
    96dc:	19 f0       	breq	.+6      	; 0x96e4 <dtoa_prf+0x1d6>
    96de:	31 93       	st	Z+, r19
    96e0:	81 50       	subi	r24, 0x01	; 1
    96e2:	fb cf       	rjmp	.-10     	; 0x96da <dtoa_prf+0x1cc>
    96e4:	c2 0e       	add	r12, r18
    96e6:	d1 1c       	adc	r13, r1
    96e8:	20 e0       	ldi	r18, 0x00	; 0
    96ea:	99 23       	and	r25, r25
    96ec:	29 f0       	breq	.+10     	; 0x96f8 <dtoa_prf+0x1ea>
    96ee:	d6 01       	movw	r26, r12
    96f0:	9c 93       	st	X, r25
    96f2:	f6 01       	movw	r30, r12
    96f4:	31 96       	adiw	r30, 0x01	; 1
    96f6:	6f 01       	movw	r12, r30
    96f8:	51 11       	cpse	r21, r1
    96fa:	0b c0       	rjmp	.+22     	; 0x9712 <dtoa_prf+0x204>
    96fc:	f6 01       	movw	r30, r12
    96fe:	82 2f       	mov	r24, r18
    9700:	90 e3       	ldi	r25, 0x30	; 48
    9702:	88 23       	and	r24, r24
    9704:	19 f0       	breq	.+6      	; 0x970c <dtoa_prf+0x1fe>
    9706:	91 93       	st	Z+, r25
    9708:	81 50       	subi	r24, 0x01	; 1
    970a:	fb cf       	rjmp	.-10     	; 0x9702 <dtoa_prf+0x1f4>
    970c:	c2 0e       	add	r12, r18
    970e:	d1 1c       	adc	r13, r1
    9710:	20 e0       	ldi	r18, 0x00	; 0
    9712:	0f 2d       	mov	r16, r15
    9714:	06 0f       	add	r16, r22
    9716:	9a 81       	ldd	r25, Y+2	; 0x02
    9718:	34 2f       	mov	r19, r20
    971a:	30 71       	andi	r19, 0x10	; 16
    971c:	44 ff       	sbrs	r20, 4
    971e:	03 c0       	rjmp	.+6      	; 0x9726 <dtoa_prf+0x218>
    9720:	91 33       	cpi	r25, 0x31	; 49
    9722:	09 f4       	brne	.+2      	; 0x9726 <dtoa_prf+0x218>
    9724:	01 50       	subi	r16, 0x01	; 1
    9726:	10 16       	cp	r1, r16
    9728:	24 f4       	brge	.+8      	; 0x9732 <dtoa_prf+0x224>
    972a:	09 30       	cpi	r16, 0x09	; 9
    972c:	18 f0       	brcs	.+6      	; 0x9734 <dtoa_prf+0x226>
    972e:	08 e0       	ldi	r16, 0x08	; 8
    9730:	01 c0       	rjmp	.+2      	; 0x9734 <dtoa_prf+0x226>
    9732:	01 e0       	ldi	r16, 0x01	; 1
    9734:	ab 01       	movw	r20, r22
    9736:	77 ff       	sbrs	r23, 7
    9738:	02 c0       	rjmp	.+4      	; 0x973e <dtoa_prf+0x230>
    973a:	40 e0       	ldi	r20, 0x00	; 0
    973c:	50 e0       	ldi	r21, 0x00	; 0
    973e:	fb 01       	movw	r30, r22
    9740:	e4 1b       	sub	r30, r20
    9742:	f5 0b       	sbc	r31, r21
    9744:	a1 e0       	ldi	r26, 0x01	; 1
    9746:	b0 e0       	ldi	r27, 0x00	; 0
    9748:	ac 0f       	add	r26, r28
    974a:	bd 1f       	adc	r27, r29
    974c:	ea 0f       	add	r30, r26
    974e:	fb 1f       	adc	r31, r27
    9750:	8e e2       	ldi	r24, 0x2E	; 46
    9752:	a8 2e       	mov	r10, r24
    9754:	4b 01       	movw	r8, r22
    9756:	80 1a       	sub	r8, r16
    9758:	91 08       	sbc	r9, r1
    975a:	0b 2d       	mov	r16, r11
    975c:	10 e0       	ldi	r17, 0x00	; 0
    975e:	11 95       	neg	r17
    9760:	01 95       	neg	r16
    9762:	11 09       	sbc	r17, r1
    9764:	4f 3f       	cpi	r20, 0xFF	; 255
    9766:	bf ef       	ldi	r27, 0xFF	; 255
    9768:	5b 07       	cpc	r21, r27
    976a:	21 f4       	brne	.+8      	; 0x9774 <dtoa_prf+0x266>
    976c:	d6 01       	movw	r26, r12
    976e:	ac 92       	st	X, r10
    9770:	11 96       	adiw	r26, 0x01	; 1
    9772:	6d 01       	movw	r12, r26
    9774:	64 17       	cp	r22, r20
    9776:	75 07       	cpc	r23, r21
    9778:	2c f0       	brlt	.+10     	; 0x9784 <dtoa_prf+0x276>
    977a:	84 16       	cp	r8, r20
    977c:	95 06       	cpc	r9, r21
    977e:	14 f4       	brge	.+4      	; 0x9784 <dtoa_prf+0x276>
    9780:	81 81       	ldd	r24, Z+1	; 0x01
    9782:	01 c0       	rjmp	.+2      	; 0x9786 <dtoa_prf+0x278>
    9784:	80 e3       	ldi	r24, 0x30	; 48
    9786:	41 50       	subi	r20, 0x01	; 1
    9788:	51 09       	sbc	r21, r1
    978a:	31 96       	adiw	r30, 0x01	; 1
    978c:	d6 01       	movw	r26, r12
    978e:	11 96       	adiw	r26, 0x01	; 1
    9790:	7d 01       	movw	r14, r26
    9792:	40 17       	cp	r20, r16
    9794:	51 07       	cpc	r21, r17
    9796:	24 f0       	brlt	.+8      	; 0x97a0 <dtoa_prf+0x292>
    9798:	d6 01       	movw	r26, r12
    979a:	8c 93       	st	X, r24
    979c:	67 01       	movw	r12, r14
    979e:	e2 cf       	rjmp	.-60     	; 0x9764 <dtoa_prf+0x256>
    97a0:	64 17       	cp	r22, r20
    97a2:	75 07       	cpc	r23, r21
    97a4:	39 f4       	brne	.+14     	; 0x97b4 <dtoa_prf+0x2a6>
    97a6:	96 33       	cpi	r25, 0x36	; 54
    97a8:	20 f4       	brcc	.+8      	; 0x97b2 <dtoa_prf+0x2a4>
    97aa:	95 33       	cpi	r25, 0x35	; 53
    97ac:	19 f4       	brne	.+6      	; 0x97b4 <dtoa_prf+0x2a6>
    97ae:	31 11       	cpse	r19, r1
    97b0:	01 c0       	rjmp	.+2      	; 0x97b4 <dtoa_prf+0x2a6>
    97b2:	81 e3       	ldi	r24, 0x31	; 49
    97b4:	f6 01       	movw	r30, r12
    97b6:	80 83       	st	Z, r24
    97b8:	f7 01       	movw	r30, r14
    97ba:	82 2f       	mov	r24, r18
    97bc:	90 e2       	ldi	r25, 0x20	; 32
    97be:	88 23       	and	r24, r24
    97c0:	19 f0       	breq	.+6      	; 0x97c8 <dtoa_prf+0x2ba>
    97c2:	91 93       	st	Z+, r25
    97c4:	81 50       	subi	r24, 0x01	; 1
    97c6:	fb cf       	rjmp	.-10     	; 0x97be <dtoa_prf+0x2b0>
    97c8:	f7 01       	movw	r30, r14
    97ca:	e2 0f       	add	r30, r18
    97cc:	f1 1d       	adc	r31, r1
    97ce:	10 82       	st	Z, r1
    97d0:	80 e0       	ldi	r24, 0x00	; 0
    97d2:	90 e0       	ldi	r25, 0x00	; 0
    97d4:	29 96       	adiw	r28, 0x09	; 9
    97d6:	0f b6       	in	r0, 0x3f	; 63
    97d8:	f8 94       	cli
    97da:	de bf       	out	0x3e, r29	; 62
    97dc:	0f be       	out	0x3f, r0	; 63
    97de:	cd bf       	out	0x3d, r28	; 61
    97e0:	df 91       	pop	r29
    97e2:	cf 91       	pop	r28
    97e4:	1f 91       	pop	r17
    97e6:	0f 91       	pop	r16
    97e8:	ff 90       	pop	r15
    97ea:	ef 90       	pop	r14
    97ec:	df 90       	pop	r13
    97ee:	cf 90       	pop	r12
    97f0:	bf 90       	pop	r11
    97f2:	af 90       	pop	r10
    97f4:	9f 90       	pop	r9
    97f6:	8f 90       	pop	r8
    97f8:	08 95       	ret

000097fa <__ftoa_engine>:
    97fa:	28 30       	cpi	r18, 0x08	; 8
    97fc:	08 f0       	brcs	.+2      	; 0x9800 <__ftoa_engine+0x6>
    97fe:	27 e0       	ldi	r18, 0x07	; 7
    9800:	33 27       	eor	r19, r19
    9802:	da 01       	movw	r26, r20
    9804:	99 0f       	add	r25, r25
    9806:	31 1d       	adc	r19, r1
    9808:	87 fd       	sbrc	r24, 7
    980a:	91 60       	ori	r25, 0x01	; 1
    980c:	00 96       	adiw	r24, 0x00	; 0
    980e:	61 05       	cpc	r22, r1
    9810:	71 05       	cpc	r23, r1
    9812:	39 f4       	brne	.+14     	; 0x9822 <__ftoa_engine+0x28>
    9814:	32 60       	ori	r19, 0x02	; 2
    9816:	2e 5f       	subi	r18, 0xFE	; 254
    9818:	3d 93       	st	X+, r19
    981a:	30 e3       	ldi	r19, 0x30	; 48
    981c:	2a 95       	dec	r18
    981e:	e1 f7       	brne	.-8      	; 0x9818 <__ftoa_engine+0x1e>
    9820:	08 95       	ret
    9822:	9f 3f       	cpi	r25, 0xFF	; 255
    9824:	30 f0       	brcs	.+12     	; 0x9832 <__ftoa_engine+0x38>
    9826:	80 38       	cpi	r24, 0x80	; 128
    9828:	71 05       	cpc	r23, r1
    982a:	61 05       	cpc	r22, r1
    982c:	09 f0       	breq	.+2      	; 0x9830 <__ftoa_engine+0x36>
    982e:	3c 5f       	subi	r19, 0xFC	; 252
    9830:	3c 5f       	subi	r19, 0xFC	; 252
    9832:	3d 93       	st	X+, r19
    9834:	91 30       	cpi	r25, 0x01	; 1
    9836:	08 f0       	brcs	.+2      	; 0x983a <__ftoa_engine+0x40>
    9838:	80 68       	ori	r24, 0x80	; 128
    983a:	91 1d       	adc	r25, r1
    983c:	df 93       	push	r29
    983e:	cf 93       	push	r28
    9840:	1f 93       	push	r17
    9842:	0f 93       	push	r16
    9844:	ff 92       	push	r15
    9846:	ef 92       	push	r14
    9848:	19 2f       	mov	r17, r25
    984a:	98 7f       	andi	r25, 0xF8	; 248
    984c:	96 95       	lsr	r25
    984e:	e9 2f       	mov	r30, r25
    9850:	96 95       	lsr	r25
    9852:	96 95       	lsr	r25
    9854:	e9 0f       	add	r30, r25
    9856:	ff 27       	eor	r31, r31
    9858:	e0 5a       	subi	r30, 0xA0	; 160
    985a:	fe 4f       	sbci	r31, 0xFE	; 254
    985c:	99 27       	eor	r25, r25
    985e:	33 27       	eor	r19, r19
    9860:	ee 24       	eor	r14, r14
    9862:	ff 24       	eor	r15, r15
    9864:	a7 01       	movw	r20, r14
    9866:	e7 01       	movw	r28, r14
    9868:	05 90       	lpm	r0, Z+
    986a:	08 94       	sec
    986c:	07 94       	ror	r0
    986e:	28 f4       	brcc	.+10     	; 0x987a <__ftoa_engine+0x80>
    9870:	36 0f       	add	r19, r22
    9872:	e7 1e       	adc	r14, r23
    9874:	f8 1e       	adc	r15, r24
    9876:	49 1f       	adc	r20, r25
    9878:	51 1d       	adc	r21, r1
    987a:	66 0f       	add	r22, r22
    987c:	77 1f       	adc	r23, r23
    987e:	88 1f       	adc	r24, r24
    9880:	99 1f       	adc	r25, r25
    9882:	06 94       	lsr	r0
    9884:	a1 f7       	brne	.-24     	; 0x986e <__ftoa_engine+0x74>
    9886:	05 90       	lpm	r0, Z+
    9888:	07 94       	ror	r0
    988a:	28 f4       	brcc	.+10     	; 0x9896 <__ftoa_engine+0x9c>
    988c:	e7 0e       	add	r14, r23
    988e:	f8 1e       	adc	r15, r24
    9890:	49 1f       	adc	r20, r25
    9892:	56 1f       	adc	r21, r22
    9894:	c1 1d       	adc	r28, r1
    9896:	77 0f       	add	r23, r23
    9898:	88 1f       	adc	r24, r24
    989a:	99 1f       	adc	r25, r25
    989c:	66 1f       	adc	r22, r22
    989e:	06 94       	lsr	r0
    98a0:	a1 f7       	brne	.-24     	; 0x988a <__ftoa_engine+0x90>
    98a2:	05 90       	lpm	r0, Z+
    98a4:	07 94       	ror	r0
    98a6:	28 f4       	brcc	.+10     	; 0x98b2 <__ftoa_engine+0xb8>
    98a8:	f8 0e       	add	r15, r24
    98aa:	49 1f       	adc	r20, r25
    98ac:	56 1f       	adc	r21, r22
    98ae:	c7 1f       	adc	r28, r23
    98b0:	d1 1d       	adc	r29, r1
    98b2:	88 0f       	add	r24, r24
    98b4:	99 1f       	adc	r25, r25
    98b6:	66 1f       	adc	r22, r22
    98b8:	77 1f       	adc	r23, r23
    98ba:	06 94       	lsr	r0
    98bc:	a1 f7       	brne	.-24     	; 0x98a6 <__ftoa_engine+0xac>
    98be:	05 90       	lpm	r0, Z+
    98c0:	07 94       	ror	r0
    98c2:	20 f4       	brcc	.+8      	; 0x98cc <__ftoa_engine+0xd2>
    98c4:	49 0f       	add	r20, r25
    98c6:	56 1f       	adc	r21, r22
    98c8:	c7 1f       	adc	r28, r23
    98ca:	d8 1f       	adc	r29, r24
    98cc:	99 0f       	add	r25, r25
    98ce:	66 1f       	adc	r22, r22
    98d0:	77 1f       	adc	r23, r23
    98d2:	88 1f       	adc	r24, r24
    98d4:	06 94       	lsr	r0
    98d6:	a9 f7       	brne	.-22     	; 0x98c2 <__ftoa_engine+0xc8>
    98d8:	84 91       	lpm	r24, Z
    98da:	10 95       	com	r17
    98dc:	17 70       	andi	r17, 0x07	; 7
    98de:	41 f0       	breq	.+16     	; 0x98f0 <__ftoa_engine+0xf6>
    98e0:	d6 95       	lsr	r29
    98e2:	c7 95       	ror	r28
    98e4:	57 95       	ror	r21
    98e6:	47 95       	ror	r20
    98e8:	f7 94       	ror	r15
    98ea:	e7 94       	ror	r14
    98ec:	1a 95       	dec	r17
    98ee:	c1 f7       	brne	.-16     	; 0x98e0 <__ftoa_engine+0xe6>
    98f0:	e6 e0       	ldi	r30, 0x06	; 6
    98f2:	f1 e0       	ldi	r31, 0x01	; 1
    98f4:	68 94       	set
    98f6:	15 90       	lpm	r1, Z+
    98f8:	15 91       	lpm	r17, Z+
    98fa:	35 91       	lpm	r19, Z+
    98fc:	65 91       	lpm	r22, Z+
    98fe:	95 91       	lpm	r25, Z+
    9900:	05 90       	lpm	r0, Z+
    9902:	7f e2       	ldi	r23, 0x2F	; 47
    9904:	73 95       	inc	r23
    9906:	e1 18       	sub	r14, r1
    9908:	f1 0a       	sbc	r15, r17
    990a:	43 0b       	sbc	r20, r19
    990c:	56 0b       	sbc	r21, r22
    990e:	c9 0b       	sbc	r28, r25
    9910:	d0 09       	sbc	r29, r0
    9912:	c0 f7       	brcc	.-16     	; 0x9904 <__ftoa_engine+0x10a>
    9914:	e1 0c       	add	r14, r1
    9916:	f1 1e       	adc	r15, r17
    9918:	43 1f       	adc	r20, r19
    991a:	56 1f       	adc	r21, r22
    991c:	c9 1f       	adc	r28, r25
    991e:	d0 1d       	adc	r29, r0
    9920:	7e f4       	brtc	.+30     	; 0x9940 <__ftoa_engine+0x146>
    9922:	70 33       	cpi	r23, 0x30	; 48
    9924:	11 f4       	brne	.+4      	; 0x992a <__ftoa_engine+0x130>
    9926:	8a 95       	dec	r24
    9928:	e6 cf       	rjmp	.-52     	; 0x98f6 <__ftoa_engine+0xfc>
    992a:	e8 94       	clt
    992c:	01 50       	subi	r16, 0x01	; 1
    992e:	30 f0       	brcs	.+12     	; 0x993c <__ftoa_engine+0x142>
    9930:	08 0f       	add	r16, r24
    9932:	0a f4       	brpl	.+2      	; 0x9936 <__ftoa_engine+0x13c>
    9934:	00 27       	eor	r16, r16
    9936:	02 17       	cp	r16, r18
    9938:	08 f4       	brcc	.+2      	; 0x993c <__ftoa_engine+0x142>
    993a:	20 2f       	mov	r18, r16
    993c:	23 95       	inc	r18
    993e:	02 2f       	mov	r16, r18
    9940:	7a 33       	cpi	r23, 0x3A	; 58
    9942:	28 f0       	brcs	.+10     	; 0x994e <__ftoa_engine+0x154>
    9944:	79 e3       	ldi	r23, 0x39	; 57
    9946:	7d 93       	st	X+, r23
    9948:	2a 95       	dec	r18
    994a:	e9 f7       	brne	.-6      	; 0x9946 <__ftoa_engine+0x14c>
    994c:	10 c0       	rjmp	.+32     	; 0x996e <__ftoa_engine+0x174>
    994e:	7d 93       	st	X+, r23
    9950:	2a 95       	dec	r18
    9952:	89 f6       	brne	.-94     	; 0x98f6 <__ftoa_engine+0xfc>
    9954:	06 94       	lsr	r0
    9956:	97 95       	ror	r25
    9958:	67 95       	ror	r22
    995a:	37 95       	ror	r19
    995c:	17 95       	ror	r17
    995e:	17 94       	ror	r1
    9960:	e1 18       	sub	r14, r1
    9962:	f1 0a       	sbc	r15, r17
    9964:	43 0b       	sbc	r20, r19
    9966:	56 0b       	sbc	r21, r22
    9968:	c9 0b       	sbc	r28, r25
    996a:	d0 09       	sbc	r29, r0
    996c:	98 f0       	brcs	.+38     	; 0x9994 <__ftoa_engine+0x19a>
    996e:	23 95       	inc	r18
    9970:	7e 91       	ld	r23, -X
    9972:	73 95       	inc	r23
    9974:	7a 33       	cpi	r23, 0x3A	; 58
    9976:	08 f0       	brcs	.+2      	; 0x997a <__ftoa_engine+0x180>
    9978:	70 e3       	ldi	r23, 0x30	; 48
    997a:	7c 93       	st	X, r23
    997c:	20 13       	cpse	r18, r16
    997e:	b8 f7       	brcc	.-18     	; 0x996e <__ftoa_engine+0x174>
    9980:	7e 91       	ld	r23, -X
    9982:	70 61       	ori	r23, 0x10	; 16
    9984:	7d 93       	st	X+, r23
    9986:	30 f0       	brcs	.+12     	; 0x9994 <__ftoa_engine+0x19a>
    9988:	83 95       	inc	r24
    998a:	71 e3       	ldi	r23, 0x31	; 49
    998c:	7d 93       	st	X+, r23
    998e:	70 e3       	ldi	r23, 0x30	; 48
    9990:	2a 95       	dec	r18
    9992:	e1 f7       	brne	.-8      	; 0x998c <__ftoa_engine+0x192>
    9994:	11 24       	eor	r1, r1
    9996:	ef 90       	pop	r14
    9998:	ff 90       	pop	r15
    999a:	0f 91       	pop	r16
    999c:	1f 91       	pop	r17
    999e:	cf 91       	pop	r28
    99a0:	df 91       	pop	r29
    99a2:	99 27       	eor	r25, r25
    99a4:	87 fd       	sbrc	r24, 7
    99a6:	90 95       	com	r25
    99a8:	08 95       	ret

000099aa <strchr_P>:
    99aa:	fc 01       	movw	r30, r24
    99ac:	05 90       	lpm	r0, Z+
    99ae:	06 16       	cp	r0, r22
    99b0:	21 f0       	breq	.+8      	; 0x99ba <strchr_P+0x10>
    99b2:	00 20       	and	r0, r0
    99b4:	d9 f7       	brne	.-10     	; 0x99ac <strchr_P+0x2>
    99b6:	c0 01       	movw	r24, r0
    99b8:	08 95       	ret
    99ba:	31 97       	sbiw	r30, 0x01	; 1
    99bc:	cf 01       	movw	r24, r30
    99be:	08 95       	ret

000099c0 <strnlen_P>:
    99c0:	fc 01       	movw	r30, r24
    99c2:	05 90       	lpm	r0, Z+
    99c4:	61 50       	subi	r22, 0x01	; 1
    99c6:	70 40       	sbci	r23, 0x00	; 0
    99c8:	01 10       	cpse	r0, r1
    99ca:	d8 f7       	brcc	.-10     	; 0x99c2 <strnlen_P+0x2>
    99cc:	80 95       	com	r24
    99ce:	90 95       	com	r25
    99d0:	8e 0f       	add	r24, r30
    99d2:	9f 1f       	adc	r25, r31
    99d4:	08 95       	ret

000099d6 <strnlen>:
    99d6:	fc 01       	movw	r30, r24
    99d8:	61 50       	subi	r22, 0x01	; 1
    99da:	70 40       	sbci	r23, 0x00	; 0
    99dc:	01 90       	ld	r0, Z+
    99de:	01 10       	cpse	r0, r1
    99e0:	d8 f7       	brcc	.-10     	; 0x99d8 <strnlen+0x2>
    99e2:	80 95       	com	r24
    99e4:	90 95       	com	r25
    99e6:	8e 0f       	add	r24, r30
    99e8:	9f 1f       	adc	r25, r31
    99ea:	08 95       	ret

000099ec <strrev>:
    99ec:	dc 01       	movw	r26, r24
    99ee:	fc 01       	movw	r30, r24
    99f0:	67 2f       	mov	r22, r23
    99f2:	71 91       	ld	r23, Z+
    99f4:	77 23       	and	r23, r23
    99f6:	e1 f7       	brne	.-8      	; 0x99f0 <strrev+0x4>
    99f8:	32 97       	sbiw	r30, 0x02	; 2
    99fa:	04 c0       	rjmp	.+8      	; 0x9a04 <strrev+0x18>
    99fc:	7c 91       	ld	r23, X
    99fe:	6d 93       	st	X+, r22
    9a00:	70 83       	st	Z, r23
    9a02:	62 91       	ld	r22, -Z
    9a04:	ae 17       	cp	r26, r30
    9a06:	bf 07       	cpc	r27, r31
    9a08:	c8 f3       	brcs	.-14     	; 0x99fc <strrev+0x10>
    9a0a:	08 95       	ret

00009a0c <fgetc>:
    9a0c:	cf 93       	push	r28
    9a0e:	df 93       	push	r29
    9a10:	ec 01       	movw	r28, r24
    9a12:	2b 81       	ldd	r18, Y+3	; 0x03
    9a14:	20 ff       	sbrs	r18, 0
    9a16:	33 c0       	rjmp	.+102    	; 0x9a7e <fgetc+0x72>
    9a18:	26 ff       	sbrs	r18, 6
    9a1a:	0a c0       	rjmp	.+20     	; 0x9a30 <fgetc+0x24>
    9a1c:	2f 7b       	andi	r18, 0xBF	; 191
    9a1e:	2b 83       	std	Y+3, r18	; 0x03
    9a20:	8e 81       	ldd	r24, Y+6	; 0x06
    9a22:	9f 81       	ldd	r25, Y+7	; 0x07
    9a24:	01 96       	adiw	r24, 0x01	; 1
    9a26:	9f 83       	std	Y+7, r25	; 0x07
    9a28:	8e 83       	std	Y+6, r24	; 0x06
    9a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    9a2c:	90 e0       	ldi	r25, 0x00	; 0
    9a2e:	29 c0       	rjmp	.+82     	; 0x9a82 <fgetc+0x76>
    9a30:	22 ff       	sbrs	r18, 2
    9a32:	0f c0       	rjmp	.+30     	; 0x9a52 <fgetc+0x46>
    9a34:	e8 81       	ld	r30, Y
    9a36:	f9 81       	ldd	r31, Y+1	; 0x01
    9a38:	80 81       	ld	r24, Z
    9a3a:	08 2e       	mov	r0, r24
    9a3c:	00 0c       	add	r0, r0
    9a3e:	99 0b       	sbc	r25, r25
    9a40:	00 97       	sbiw	r24, 0x00	; 0
    9a42:	19 f4       	brne	.+6      	; 0x9a4a <fgetc+0x3e>
    9a44:	20 62       	ori	r18, 0x20	; 32
    9a46:	2b 83       	std	Y+3, r18	; 0x03
    9a48:	1a c0       	rjmp	.+52     	; 0x9a7e <fgetc+0x72>
    9a4a:	31 96       	adiw	r30, 0x01	; 1
    9a4c:	f9 83       	std	Y+1, r31	; 0x01
    9a4e:	e8 83       	st	Y, r30
    9a50:	0e c0       	rjmp	.+28     	; 0x9a6e <fgetc+0x62>
    9a52:	ea 85       	ldd	r30, Y+10	; 0x0a
    9a54:	fb 85       	ldd	r31, Y+11	; 0x0b
    9a56:	09 95       	icall
    9a58:	97 ff       	sbrs	r25, 7
    9a5a:	09 c0       	rjmp	.+18     	; 0x9a6e <fgetc+0x62>
    9a5c:	2b 81       	ldd	r18, Y+3	; 0x03
    9a5e:	01 96       	adiw	r24, 0x01	; 1
    9a60:	11 f0       	breq	.+4      	; 0x9a66 <fgetc+0x5a>
    9a62:	80 e2       	ldi	r24, 0x20	; 32
    9a64:	01 c0       	rjmp	.+2      	; 0x9a68 <fgetc+0x5c>
    9a66:	80 e1       	ldi	r24, 0x10	; 16
    9a68:	82 2b       	or	r24, r18
    9a6a:	8b 83       	std	Y+3, r24	; 0x03
    9a6c:	08 c0       	rjmp	.+16     	; 0x9a7e <fgetc+0x72>
    9a6e:	2e 81       	ldd	r18, Y+6	; 0x06
    9a70:	3f 81       	ldd	r19, Y+7	; 0x07
    9a72:	2f 5f       	subi	r18, 0xFF	; 255
    9a74:	3f 4f       	sbci	r19, 0xFF	; 255
    9a76:	3f 83       	std	Y+7, r19	; 0x07
    9a78:	2e 83       	std	Y+6, r18	; 0x06
    9a7a:	99 27       	eor	r25, r25
    9a7c:	02 c0       	rjmp	.+4      	; 0x9a82 <fgetc+0x76>
    9a7e:	8f ef       	ldi	r24, 0xFF	; 255
    9a80:	9f ef       	ldi	r25, 0xFF	; 255
    9a82:	df 91       	pop	r29
    9a84:	cf 91       	pop	r28
    9a86:	08 95       	ret

00009a88 <fputc>:
    9a88:	0f 93       	push	r16
    9a8a:	1f 93       	push	r17
    9a8c:	cf 93       	push	r28
    9a8e:	df 93       	push	r29
    9a90:	fb 01       	movw	r30, r22
    9a92:	23 81       	ldd	r18, Z+3	; 0x03
    9a94:	21 fd       	sbrc	r18, 1
    9a96:	03 c0       	rjmp	.+6      	; 0x9a9e <fputc+0x16>
    9a98:	8f ef       	ldi	r24, 0xFF	; 255
    9a9a:	9f ef       	ldi	r25, 0xFF	; 255
    9a9c:	2c c0       	rjmp	.+88     	; 0x9af6 <fputc+0x6e>
    9a9e:	22 ff       	sbrs	r18, 2
    9aa0:	16 c0       	rjmp	.+44     	; 0x9ace <fputc+0x46>
    9aa2:	46 81       	ldd	r20, Z+6	; 0x06
    9aa4:	57 81       	ldd	r21, Z+7	; 0x07
    9aa6:	24 81       	ldd	r18, Z+4	; 0x04
    9aa8:	35 81       	ldd	r19, Z+5	; 0x05
    9aaa:	42 17       	cp	r20, r18
    9aac:	53 07       	cpc	r21, r19
    9aae:	44 f4       	brge	.+16     	; 0x9ac0 <fputc+0x38>
    9ab0:	a0 81       	ld	r26, Z
    9ab2:	b1 81       	ldd	r27, Z+1	; 0x01
    9ab4:	9d 01       	movw	r18, r26
    9ab6:	2f 5f       	subi	r18, 0xFF	; 255
    9ab8:	3f 4f       	sbci	r19, 0xFF	; 255
    9aba:	31 83       	std	Z+1, r19	; 0x01
    9abc:	20 83       	st	Z, r18
    9abe:	8c 93       	st	X, r24
    9ac0:	26 81       	ldd	r18, Z+6	; 0x06
    9ac2:	37 81       	ldd	r19, Z+7	; 0x07
    9ac4:	2f 5f       	subi	r18, 0xFF	; 255
    9ac6:	3f 4f       	sbci	r19, 0xFF	; 255
    9ac8:	37 83       	std	Z+7, r19	; 0x07
    9aca:	26 83       	std	Z+6, r18	; 0x06
    9acc:	14 c0       	rjmp	.+40     	; 0x9af6 <fputc+0x6e>
    9ace:	8b 01       	movw	r16, r22
    9ad0:	ec 01       	movw	r28, r24
    9ad2:	fb 01       	movw	r30, r22
    9ad4:	00 84       	ldd	r0, Z+8	; 0x08
    9ad6:	f1 85       	ldd	r31, Z+9	; 0x09
    9ad8:	e0 2d       	mov	r30, r0
    9ada:	09 95       	icall
    9adc:	89 2b       	or	r24, r25
    9ade:	e1 f6       	brne	.-72     	; 0x9a98 <fputc+0x10>
    9ae0:	d8 01       	movw	r26, r16
    9ae2:	16 96       	adiw	r26, 0x06	; 6
    9ae4:	8d 91       	ld	r24, X+
    9ae6:	9c 91       	ld	r25, X
    9ae8:	17 97       	sbiw	r26, 0x07	; 7
    9aea:	01 96       	adiw	r24, 0x01	; 1
    9aec:	17 96       	adiw	r26, 0x07	; 7
    9aee:	9c 93       	st	X, r25
    9af0:	8e 93       	st	-X, r24
    9af2:	16 97       	sbiw	r26, 0x06	; 6
    9af4:	ce 01       	movw	r24, r28
    9af6:	df 91       	pop	r29
    9af8:	cf 91       	pop	r28
    9afa:	1f 91       	pop	r17
    9afc:	0f 91       	pop	r16
    9afe:	08 95       	ret

00009b00 <ungetc>:
    9b00:	fb 01       	movw	r30, r22
    9b02:	23 81       	ldd	r18, Z+3	; 0x03
    9b04:	20 ff       	sbrs	r18, 0
    9b06:	12 c0       	rjmp	.+36     	; 0x9b2c <ungetc+0x2c>
    9b08:	26 fd       	sbrc	r18, 6
    9b0a:	10 c0       	rjmp	.+32     	; 0x9b2c <ungetc+0x2c>
    9b0c:	8f 3f       	cpi	r24, 0xFF	; 255
    9b0e:	3f ef       	ldi	r19, 0xFF	; 255
    9b10:	93 07       	cpc	r25, r19
    9b12:	61 f0       	breq	.+24     	; 0x9b2c <ungetc+0x2c>
    9b14:	82 83       	std	Z+2, r24	; 0x02
    9b16:	2f 7d       	andi	r18, 0xDF	; 223
    9b18:	20 64       	ori	r18, 0x40	; 64
    9b1a:	23 83       	std	Z+3, r18	; 0x03
    9b1c:	26 81       	ldd	r18, Z+6	; 0x06
    9b1e:	37 81       	ldd	r19, Z+7	; 0x07
    9b20:	21 50       	subi	r18, 0x01	; 1
    9b22:	31 09       	sbc	r19, r1
    9b24:	37 83       	std	Z+7, r19	; 0x07
    9b26:	26 83       	std	Z+6, r18	; 0x06
    9b28:	99 27       	eor	r25, r25
    9b2a:	08 95       	ret
    9b2c:	8f ef       	ldi	r24, 0xFF	; 255
    9b2e:	9f ef       	ldi	r25, 0xFF	; 255
    9b30:	08 95       	ret

00009b32 <__ultoa_invert>:
    9b32:	fa 01       	movw	r30, r20
    9b34:	aa 27       	eor	r26, r26
    9b36:	28 30       	cpi	r18, 0x08	; 8
    9b38:	51 f1       	breq	.+84     	; 0x9b8e <__ultoa_invert+0x5c>
    9b3a:	20 31       	cpi	r18, 0x10	; 16
    9b3c:	81 f1       	breq	.+96     	; 0x9b9e <__ultoa_invert+0x6c>
    9b3e:	e8 94       	clt
    9b40:	6f 93       	push	r22
    9b42:	6e 7f       	andi	r22, 0xFE	; 254
    9b44:	6e 5f       	subi	r22, 0xFE	; 254
    9b46:	7f 4f       	sbci	r23, 0xFF	; 255
    9b48:	8f 4f       	sbci	r24, 0xFF	; 255
    9b4a:	9f 4f       	sbci	r25, 0xFF	; 255
    9b4c:	af 4f       	sbci	r26, 0xFF	; 255
    9b4e:	b1 e0       	ldi	r27, 0x01	; 1
    9b50:	3e d0       	rcall	.+124    	; 0x9bce <__ultoa_invert+0x9c>
    9b52:	b4 e0       	ldi	r27, 0x04	; 4
    9b54:	3c d0       	rcall	.+120    	; 0x9bce <__ultoa_invert+0x9c>
    9b56:	67 0f       	add	r22, r23
    9b58:	78 1f       	adc	r23, r24
    9b5a:	89 1f       	adc	r24, r25
    9b5c:	9a 1f       	adc	r25, r26
    9b5e:	a1 1d       	adc	r26, r1
    9b60:	68 0f       	add	r22, r24
    9b62:	79 1f       	adc	r23, r25
    9b64:	8a 1f       	adc	r24, r26
    9b66:	91 1d       	adc	r25, r1
    9b68:	a1 1d       	adc	r26, r1
    9b6a:	6a 0f       	add	r22, r26
    9b6c:	71 1d       	adc	r23, r1
    9b6e:	81 1d       	adc	r24, r1
    9b70:	91 1d       	adc	r25, r1
    9b72:	a1 1d       	adc	r26, r1
    9b74:	20 d0       	rcall	.+64     	; 0x9bb6 <__ultoa_invert+0x84>
    9b76:	09 f4       	brne	.+2      	; 0x9b7a <__ultoa_invert+0x48>
    9b78:	68 94       	set
    9b7a:	3f 91       	pop	r19
    9b7c:	2a e0       	ldi	r18, 0x0A	; 10
    9b7e:	26 9f       	mul	r18, r22
    9b80:	11 24       	eor	r1, r1
    9b82:	30 19       	sub	r19, r0
    9b84:	30 5d       	subi	r19, 0xD0	; 208
    9b86:	31 93       	st	Z+, r19
    9b88:	de f6       	brtc	.-74     	; 0x9b40 <__ultoa_invert+0xe>
    9b8a:	cf 01       	movw	r24, r30
    9b8c:	08 95       	ret
    9b8e:	46 2f       	mov	r20, r22
    9b90:	47 70       	andi	r20, 0x07	; 7
    9b92:	40 5d       	subi	r20, 0xD0	; 208
    9b94:	41 93       	st	Z+, r20
    9b96:	b3 e0       	ldi	r27, 0x03	; 3
    9b98:	0f d0       	rcall	.+30     	; 0x9bb8 <__ultoa_invert+0x86>
    9b9a:	c9 f7       	brne	.-14     	; 0x9b8e <__ultoa_invert+0x5c>
    9b9c:	f6 cf       	rjmp	.-20     	; 0x9b8a <__ultoa_invert+0x58>
    9b9e:	46 2f       	mov	r20, r22
    9ba0:	4f 70       	andi	r20, 0x0F	; 15
    9ba2:	40 5d       	subi	r20, 0xD0	; 208
    9ba4:	4a 33       	cpi	r20, 0x3A	; 58
    9ba6:	18 f0       	brcs	.+6      	; 0x9bae <__ultoa_invert+0x7c>
    9ba8:	49 5d       	subi	r20, 0xD9	; 217
    9baa:	31 fd       	sbrc	r19, 1
    9bac:	40 52       	subi	r20, 0x20	; 32
    9bae:	41 93       	st	Z+, r20
    9bb0:	02 d0       	rcall	.+4      	; 0x9bb6 <__ultoa_invert+0x84>
    9bb2:	a9 f7       	brne	.-22     	; 0x9b9e <__ultoa_invert+0x6c>
    9bb4:	ea cf       	rjmp	.-44     	; 0x9b8a <__ultoa_invert+0x58>
    9bb6:	b4 e0       	ldi	r27, 0x04	; 4
    9bb8:	a6 95       	lsr	r26
    9bba:	97 95       	ror	r25
    9bbc:	87 95       	ror	r24
    9bbe:	77 95       	ror	r23
    9bc0:	67 95       	ror	r22
    9bc2:	ba 95       	dec	r27
    9bc4:	c9 f7       	brne	.-14     	; 0x9bb8 <__ultoa_invert+0x86>
    9bc6:	00 97       	sbiw	r24, 0x00	; 0
    9bc8:	61 05       	cpc	r22, r1
    9bca:	71 05       	cpc	r23, r1
    9bcc:	08 95       	ret
    9bce:	9b 01       	movw	r18, r22
    9bd0:	ac 01       	movw	r20, r24
    9bd2:	0a 2e       	mov	r0, r26
    9bd4:	06 94       	lsr	r0
    9bd6:	57 95       	ror	r21
    9bd8:	47 95       	ror	r20
    9bda:	37 95       	ror	r19
    9bdc:	27 95       	ror	r18
    9bde:	ba 95       	dec	r27
    9be0:	c9 f7       	brne	.-14     	; 0x9bd4 <__ultoa_invert+0xa2>
    9be2:	62 0f       	add	r22, r18
    9be4:	73 1f       	adc	r23, r19
    9be6:	84 1f       	adc	r24, r20
    9be8:	95 1f       	adc	r25, r21
    9bea:	a0 1d       	adc	r26, r0
    9bec:	08 95       	ret

00009bee <eeprom_read_dword>:
    9bee:	a6 e1       	ldi	r26, 0x16	; 22
    9bf0:	b0 e0       	ldi	r27, 0x00	; 0
    9bf2:	44 e0       	ldi	r20, 0x04	; 4
    9bf4:	50 e0       	ldi	r21, 0x00	; 0
    9bf6:	26 c0       	rjmp	.+76     	; 0x9c44 <eeprom_read_blraw>

00009bf8 <eeprom_read_word>:
    9bf8:	a8 e1       	ldi	r26, 0x18	; 24
    9bfa:	b0 e0       	ldi	r27, 0x00	; 0
    9bfc:	42 e0       	ldi	r20, 0x02	; 2
    9bfe:	50 e0       	ldi	r21, 0x00	; 0
    9c00:	21 c0       	rjmp	.+66     	; 0x9c44 <eeprom_read_blraw>

00009c02 <eeprom_write_block>:
    9c02:	dc 01       	movw	r26, r24
    9c04:	cb 01       	movw	r24, r22
    9c06:	02 c0       	rjmp	.+4      	; 0x9c0c <eeprom_write_block+0xa>
    9c08:	2d 91       	ld	r18, X+
    9c0a:	05 d0       	rcall	.+10     	; 0x9c16 <eeprom_write_r18>
    9c0c:	41 50       	subi	r20, 0x01	; 1
    9c0e:	50 40       	sbci	r21, 0x00	; 0
    9c10:	d8 f7       	brcc	.-10     	; 0x9c08 <eeprom_write_block+0x6>
    9c12:	08 95       	ret

00009c14 <eeprom_write_byte>:
    9c14:	26 2f       	mov	r18, r22

00009c16 <eeprom_write_r18>:
    9c16:	f9 99       	sbic	0x1f, 1	; 31
    9c18:	fe cf       	rjmp	.-4      	; 0x9c16 <eeprom_write_r18>
    9c1a:	1f ba       	out	0x1f, r1	; 31
    9c1c:	92 bd       	out	0x22, r25	; 34
    9c1e:	81 bd       	out	0x21, r24	; 33
    9c20:	20 bd       	out	0x20, r18	; 32
    9c22:	0f b6       	in	r0, 0x3f	; 63
    9c24:	f8 94       	cli
    9c26:	fa 9a       	sbi	0x1f, 2	; 31
    9c28:	f9 9a       	sbi	0x1f, 1	; 31
    9c2a:	0f be       	out	0x3f, r0	; 63
    9c2c:	01 96       	adiw	r24, 0x01	; 1
    9c2e:	08 95       	ret

00009c30 <eeprom_write_dword>:
    9c30:	24 2f       	mov	r18, r20
    9c32:	f1 df       	rcall	.-30     	; 0x9c16 <eeprom_write_r18>
    9c34:	25 2f       	mov	r18, r21
    9c36:	ef df       	rcall	.-34     	; 0x9c16 <eeprom_write_r18>
    9c38:	00 c0       	rjmp	.+0      	; 0x9c3a <eeprom_write_word>

00009c3a <eeprom_write_word>:
    9c3a:	ec df       	rcall	.-40     	; 0x9c14 <eeprom_write_byte>
    9c3c:	27 2f       	mov	r18, r23
    9c3e:	eb cf       	rjmp	.-42     	; 0x9c16 <eeprom_write_r18>

00009c40 <eeprom_read_block>:
    9c40:	dc 01       	movw	r26, r24
    9c42:	cb 01       	movw	r24, r22

00009c44 <eeprom_read_blraw>:
    9c44:	fc 01       	movw	r30, r24
    9c46:	f9 99       	sbic	0x1f, 1	; 31
    9c48:	fe cf       	rjmp	.-4      	; 0x9c46 <eeprom_read_blraw+0x2>
    9c4a:	06 c0       	rjmp	.+12     	; 0x9c58 <eeprom_read_blraw+0x14>
    9c4c:	f2 bd       	out	0x22, r31	; 34
    9c4e:	e1 bd       	out	0x21, r30	; 33
    9c50:	f8 9a       	sbi	0x1f, 0	; 31
    9c52:	31 96       	adiw	r30, 0x01	; 1
    9c54:	00 b4       	in	r0, 0x20	; 32
    9c56:	0d 92       	st	X+, r0
    9c58:	41 50       	subi	r20, 0x01	; 1
    9c5a:	50 40       	sbci	r21, 0x00	; 0
    9c5c:	b8 f7       	brcc	.-18     	; 0x9c4c <eeprom_read_blraw+0x8>
    9c5e:	08 95       	ret

00009c60 <__divmodsi4>:
    9c60:	05 2e       	mov	r0, r21
    9c62:	97 fb       	bst	r25, 7
    9c64:	16 f4       	brtc	.+4      	; 0x9c6a <__divmodsi4+0xa>
    9c66:	00 94       	com	r0
    9c68:	10 d0       	rcall	.+32     	; 0x9c8a <__negsi2>
    9c6a:	57 fd       	sbrc	r21, 7
    9c6c:	06 d0       	rcall	.+12     	; 0x9c7a <__divmodsi4_neg2>
    9c6e:	0e 94 aa 40 	call	0x8154	; 0x8154 <__udivmodsi4>
    9c72:	07 fc       	sbrc	r0, 7
    9c74:	02 d0       	rcall	.+4      	; 0x9c7a <__divmodsi4_neg2>
    9c76:	46 f4       	brtc	.+16     	; 0x9c88 <__divmodsi4_exit>
    9c78:	08 c0       	rjmp	.+16     	; 0x9c8a <__negsi2>

00009c7a <__divmodsi4_neg2>:
    9c7a:	50 95       	com	r21
    9c7c:	40 95       	com	r20
    9c7e:	30 95       	com	r19
    9c80:	21 95       	neg	r18
    9c82:	3f 4f       	sbci	r19, 0xFF	; 255
    9c84:	4f 4f       	sbci	r20, 0xFF	; 255
    9c86:	5f 4f       	sbci	r21, 0xFF	; 255

00009c88 <__divmodsi4_exit>:
    9c88:	08 95       	ret

00009c8a <__negsi2>:
    9c8a:	90 95       	com	r25
    9c8c:	80 95       	com	r24
    9c8e:	70 95       	com	r23
    9c90:	61 95       	neg	r22
    9c92:	7f 4f       	sbci	r23, 0xFF	; 255
    9c94:	8f 4f       	sbci	r24, 0xFF	; 255
    9c96:	9f 4f       	sbci	r25, 0xFF	; 255
    9c98:	08 95       	ret

00009c9a <_exit>:
    9c9a:	f8 94       	cli

00009c9c <__stop_program>:
    9c9c:	ff cf       	rjmp	.-2      	; 0x9c9c <__stop_program>
