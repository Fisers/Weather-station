
Meteorological Station.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ba  00800100  0000786e  00007902  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000786e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003fe  008002ba  008002ba  00007abc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007abc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00007b18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006a8  00000000  00000000  00007b58  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000090e7  00000000  00000000  00008200  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000021bf  00000000  00000000  000112e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000052a1  00000000  00000000  000134a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001460  00000000  00000000  00018748  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000194c  00000000  00000000  00019ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009e16  00000000  00000000  0001b4f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005b0  00000000  00000000  0002530a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__ctors_end>
       4:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
       8:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
       c:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      10:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      14:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      18:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      1c:	0c 94 63 0f 	jmp	0x1ec6	; 0x1ec6 <__vector_7>
      20:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      24:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      28:	0c 94 5c 29 	jmp	0x52b8	; 0x52b8 <__vector_10>
      2c:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      30:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      34:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      38:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      3c:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      40:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      44:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      48:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      4c:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      50:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      54:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      58:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      5c:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      60:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      64:	0c 94 95 01 	jmp	0x32a	; 0x32a <__bad_interrupt>
      68:	f6 24       	eor	r15, r6
      6a:	fe 24       	eor	r15, r14
      6c:	61 26       	eor	r6, r17
      6e:	70 25       	eor	r23, r0
      70:	61 26       	eor	r6, r17
      72:	61 26       	eor	r6, r17
      74:	61 26       	eor	r6, r17
      76:	5a 26       	eor	r5, r26
      78:	61 26       	eor	r6, r17
      7a:	61 26       	eor	r6, r17
      7c:	61 26       	eor	r6, r17
      7e:	61 26       	eor	r6, r17
      80:	61 26       	eor	r6, r17
      82:	61 26       	eor	r6, r17
      84:	61 26       	eor	r6, r17
      86:	61 26       	eor	r6, r17
      88:	61 26       	eor	r6, r17
      8a:	61 26       	eor	r6, r17
      8c:	61 26       	eor	r6, r17
      8e:	61 26       	eor	r6, r17
      90:	61 26       	eor	r6, r17
      92:	61 26       	eor	r6, r17
      94:	61 26       	eor	r6, r17
      96:	61 26       	eor	r6, r17
      98:	61 26       	eor	r6, r17
      9a:	61 26       	eor	r6, r17
      9c:	61 26       	eor	r6, r17
      9e:	61 26       	eor	r6, r17
      a0:	61 26       	eor	r6, r17
      a2:	61 26       	eor	r6, r17
      a4:	61 26       	eor	r6, r17
      a6:	61 26       	eor	r6, r17
      a8:	61 26       	eor	r6, r17
      aa:	61 26       	eor	r6, r17
      ac:	61 26       	eor	r6, r17
      ae:	61 26       	eor	r6, r17
      b0:	61 26       	eor	r6, r17
      b2:	61 26       	eor	r6, r17
      b4:	61 26       	eor	r6, r17
      b6:	61 26       	eor	r6, r17
      b8:	61 26       	eor	r6, r17
      ba:	61 26       	eor	r6, r17
      bc:	61 26       	eor	r6, r17
      be:	61 26       	eor	r6, r17
      c0:	61 26       	eor	r6, r17
      c2:	61 26       	eor	r6, r17
      c4:	61 26       	eor	r6, r17
      c6:	61 26       	eor	r6, r17
      c8:	61 26       	eor	r6, r17
      ca:	61 26       	eor	r6, r17
      cc:	03 26       	eor	r0, r19
      ce:	09 26       	eor	r0, r25
      d0:	1c 26       	eor	r1, r28
      d2:	2f 26       	eor	r2, r31
      d4:	45 26       	eor	r4, r21

000000d6 <__trampolines_end>:
      d6:	63 64       	ori	r22, 0x43	; 67
      d8:	69 6e       	ori	r22, 0xE9	; 233
      da:	6f 70       	andi	r22, 0x0F	; 15
      dc:	73 75       	andi	r23, 0x53	; 83
      de:	78 58       	subi	r23, 0x88	; 136
      e0:	5b 00       	.word	0x005b	; ????
      e2:	00 40       	sbci	r16, 0x00	; 0
      e4:	7a 10       	cpse	r7, r10
      e6:	f3 5a       	subi	r31, 0xA3	; 163
      e8:	00 a0       	ldd	r0, Z+32	; 0x20
      ea:	72 4e       	sbci	r23, 0xE2	; 226
      ec:	18 09       	sbc	r17, r8
      ee:	00 10       	cpse	r0, r0
      f0:	a5 d4       	rcall	.+2378   	; 0xa3c <udp_client_check_for_dns_answer+0xa6>
      f2:	e8 00       	.word	0x00e8	; ????
      f4:	00 e8       	ldi	r16, 0x80	; 128
      f6:	76 48       	sbci	r23, 0x86	; 134
      f8:	17 00       	.word	0x0017	; ????
      fa:	00 e4       	ldi	r16, 0x40	; 64
      fc:	0b 54       	subi	r16, 0x4B	; 75
      fe:	02 00       	.word	0x0002	; ????
     100:	00 ca       	rjmp	.-3072   	; 0xfffff502 <__eeprom_end+0xff7ef502>
     102:	9a 3b       	cpi	r25, 0xBA	; 186
     104:	00 00       	nop
     106:	00 e1       	ldi	r16, 0x10	; 16
     108:	f5 05       	cpc	r31, r5
     10a:	00 00       	nop
     10c:	80 96       	adiw	r24, 0x20	; 32
     10e:	98 00       	.word	0x0098	; ????
     110:	00 00       	nop
     112:	40 42       	sbci	r20, 0x20	; 32
     114:	0f 00       	.word	0x000f	; ????
     116:	00 00       	nop
     118:	a0 86       	std	Z+8, r10	; 0x08
     11a:	01 00       	.word	0x0001	; ????
     11c:	00 00       	nop
     11e:	10 27       	eor	r17, r16
     120:	00 00       	nop
     122:	00 00       	nop
     124:	e8 03       	fmulsu	r22, r16
     126:	00 00       	nop
     128:	00 00       	nop
     12a:	64 00       	.word	0x0064	; ????
     12c:	00 00       	nop
     12e:	00 00       	nop
     130:	0a 00       	.word	0x000a	; ????
     132:	00 00       	nop
     134:	00 00       	nop
     136:	01 00       	.word	0x0001	; ????
     138:	00 00       	nop
     13a:	00 00       	nop
     13c:	2c 76       	andi	r18, 0x6C	; 108
     13e:	d8 88       	ldd	r13, Y+16	; 0x10
     140:	dc 67       	ori	r29, 0x7C	; 124
     142:	4f 08       	sbc	r4, r15
     144:	23 df       	rcall	.-442    	; 0xffffff8c <__eeprom_end+0xff7eff8c>
     146:	c1 df       	rcall	.-126    	; 0xca <__SREG__+0x8b>
     148:	ae 59       	subi	r26, 0x9E	; 158
     14a:	e1 b1       	in	r30, 0x01	; 1
     14c:	b7 96       	adiw	r30, 0x27	; 39
     14e:	e5 e3       	ldi	r30, 0x35	; 53
     150:	e4 53       	subi	r30, 0x34	; 52
     152:	c6 3a       	cpi	r28, 0xA6	; 166
     154:	e6 51       	subi	r30, 0x16	; 22
     156:	99 76       	andi	r25, 0x69	; 105
     158:	96 e8       	ldi	r25, 0x86	; 134
     15a:	e6 c2       	rjmp	.+1484   	; 0x728 <bmp280_readPressure+0x326>
     15c:	84 26       	eor	r8, r20
     15e:	eb 89       	ldd	r30, Y+19	; 0x13
     160:	8c 9b       	sbis	0x11, 4	; 17
     162:	62 ed       	ldi	r22, 0xD2	; 210
     164:	40 7c       	andi	r20, 0xC0	; 192
     166:	6f fc       	.word	0xfc6f	; ????
     168:	ef bc       	out	0x2f, r14	; 47
     16a:	9c 9f       	mul	r25, r28
     16c:	40 f2       	brcs	.-112    	; 0xfe <__trampolines_end+0x28>
     16e:	ba a5       	ldd	r27, Y+42	; 0x2a
     170:	6f a5       	ldd	r22, Y+47	; 0x2f
     172:	f4 90       	lpm	r15, Z
     174:	05 5a       	subi	r16, 0xA5	; 165
     176:	2a f7       	brpl	.-54     	; 0x142 <__trampolines_end+0x6c>
     178:	5c 93       	st	X, r21
     17a:	6b 6c       	ori	r22, 0xCB	; 203
     17c:	f9 67       	ori	r31, 0x79	; 121
     17e:	6d c1       	rjmp	.+730    	; 0x45a <bmp280_readPressure+0x58>
     180:	1b fc       	.word	0xfc1b	; ????
     182:	e0 e4       	ldi	r30, 0x40	; 64
     184:	0d 47       	sbci	r16, 0x7D	; 125
     186:	fe f5       	brtc	.+126    	; 0x206 <__c.2463+0x2a>
     188:	20 e6       	ldi	r18, 0x60	; 96
     18a:	b5 00       	.word	0x00b5	; ????
     18c:	d0 ed       	ldi	r29, 0xD0	; 208
     18e:	90 2e       	mov	r9, r16
     190:	03 00       	.word	0x0003	; ????
     192:	94 35       	cpi	r25, 0x54	; 84
     194:	77 05       	cpc	r23, r7
     196:	00 80       	ld	r0, Z
     198:	84 1e       	adc	r8, r20
     19a:	08 00       	.word	0x0008	; ????
     19c:	00 20       	and	r0, r0
     19e:	4e 0a       	sbc	r4, r30
     1a0:	00 00       	nop
     1a2:	00 c8       	rjmp	.-4096   	; 0xfffff1a4 <__eeprom_end+0xff7ef1a4>
     1a4:	0c 33       	cpi	r16, 0x3C	; 60
     1a6:	33 33       	cpi	r19, 0x33	; 51
     1a8:	33 0f       	add	r19, r19
     1aa:	98 6e       	ori	r25, 0xE8	; 232
     1ac:	12 83       	std	Z+2, r17	; 0x02
     1ae:	11 41       	sbci	r17, 0x11	; 17
     1b0:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1b2:	21 14       	cp	r2, r1
     1b4:	89 3b       	cpi	r24, 0xB9	; 185
     1b6:	e6 55       	subi	r30, 0x56	; 86
     1b8:	16 cf       	rjmp	.-468    	; 0xffffffe6 <__eeprom_end+0xff7effe6>
     1ba:	fe e6       	ldi	r31, 0x6E	; 110
     1bc:	db 18       	sub	r13, r11
     1be:	d1 84       	ldd	r13, Z+9	; 0x09
     1c0:	4b 38       	cpi	r20, 0x8B	; 139
     1c2:	1b f7       	brvc	.-58     	; 0x18a <__trampolines_end+0xb4>
     1c4:	7c 1d       	adc	r23, r12
     1c6:	90 1d       	adc	r25, r0
     1c8:	a4 bb       	out	0x14, r26	; 20
     1ca:	e4 24       	eor	r14, r4
     1cc:	20 32       	cpi	r18, 0x20	; 32
     1ce:	84 72       	andi	r24, 0x24	; 36
     1d0:	5e 22       	and	r5, r30
     1d2:	81 00       	.word	0x0081	; ????
     1d4:	c9 f1       	breq	.+114    	; 0x248 <__c.2457>
     1d6:	24 ec       	ldi	r18, 0xC4	; 196
     1d8:	a1 e5       	ldi	r26, 0x51	; 81
     1da:	3d 27       	eor	r19, r29

000001dc <__c.2463>:
     1dc:	0d 0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20     ..Content-Type: 
     1ec:	61 70 70 6c 69 63 61 74 69 6f 6e 2f 78 2d 77 77     application/x-ww
     1fc:	77 2d 66 6f 72 6d 2d 75 72 6c 65 6e 63 6f 64 65     w-form-urlencode
     20c:	64 0d 0a 0d 0a 00                                   d.....

00000212 <__c.2461>:
     212:	43 6f 6e 74 65 6e 74 2d 4c 65 6e 67 74 68 3a 20     Content-Length: 
	...

00000223 <__c.2459>:
     223:	0d 0a 55 73 65 72 2d 41 67 65 6e 74 3a 20 74 67     ..User-Agent: tg
     233:	72 2f 31 2e 31 0d 0a 41 63 63 65 70 74 3a 20 2a     r/1.1..Accept: *
     243:	2f 2a 0d 0a 00                                      /*...

00000248 <__c.2457>:
     248:	0d 0a 00                                            ...

0000024b <__c.2455>:
     24b:	20 48 54 54 50 2f 31 2e 31 0d 0a 48 6f 73 74 3a      HTTP/1.1..Host:
     25b:	20 00                                                .

0000025d <__c.2453>:
     25d:	50 4f 53 54 20 00                                   POST .

00000263 <__c.2451>:
     263:	0d 0a 55 73 65 72 2d 41 67 65 6e 74 3a 20 74 67     ..User-Agent: tg
     273:	72 2f 31 2e 31 0d 0a 41 63 63 65 70 74 3a 20 74     r/1.1..Accept: t
     283:	65 78 74 2f 68 74 6d 6c 0d 0a 0d 0a 00              ext/html.....

00000290 <__c.2449>:
     290:	20 48 54 54 50 2f 31 2e 31 0d 0a 48 6f 73 74 3a      HTTP/1.1..Host:
     2a0:	20 00                                                .

000002a2 <__c.2447>:
     2a2:	47 45 54 20 00                                      GET .

000002a7 <arpreqhdr>:
     2a7:	00 01 08 00 06 04 00 01                             ........

000002af <iphdr>:
     2af:	45 00 00 82 00 00 40 00 20                          E.....@. 

000002b8 <__c.2782>:
     2b8:	43 61 6c 69 62 72 61 74 69 6f 6e 20 63 6f 6d 70     Calibration comp
     2c8:	6c 65 74 65 21 00                                   lete!.

000002ce <__c.2777>:
     2ce:	43 61 6c 69 62 72 61 74 69 6f 6e 20 73 74 61 72     Calibration star
     2de:	74 65 64 21 00                                      ted!.

000002e3 <__c.2810>:
     2e3:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 00              Initializing.

000002f0 <__ctors_end>:
     2f0:	11 24       	eor	r1, r1
     2f2:	1f be       	out	0x3f, r1	; 63
     2f4:	cf ef       	ldi	r28, 0xFF	; 255
     2f6:	d8 e0       	ldi	r29, 0x08	; 8
     2f8:	de bf       	out	0x3e, r29	; 62
     2fa:	cd bf       	out	0x3d, r28	; 61

000002fc <__do_copy_data>:
     2fc:	12 e0       	ldi	r17, 0x02	; 2
     2fe:	a0 e0       	ldi	r26, 0x00	; 0
     300:	b1 e0       	ldi	r27, 0x01	; 1
     302:	ee e6       	ldi	r30, 0x6E	; 110
     304:	f8 e7       	ldi	r31, 0x78	; 120
     306:	02 c0       	rjmp	.+4      	; 0x30c <__do_copy_data+0x10>
     308:	05 90       	lpm	r0, Z+
     30a:	0d 92       	st	X+, r0
     30c:	aa 3b       	cpi	r26, 0xBA	; 186
     30e:	b1 07       	cpc	r27, r17
     310:	d9 f7       	brne	.-10     	; 0x308 <__do_copy_data+0xc>

00000312 <__do_clear_bss>:
     312:	26 e0       	ldi	r18, 0x06	; 6
     314:	aa eb       	ldi	r26, 0xBA	; 186
     316:	b2 e0       	ldi	r27, 0x02	; 2
     318:	01 c0       	rjmp	.+2      	; 0x31c <.do_clear_bss_start>

0000031a <.do_clear_bss_loop>:
     31a:	1d 92       	st	X+, r1

0000031c <.do_clear_bss_start>:
     31c:	a8 3b       	cpi	r26, 0xB8	; 184
     31e:	b2 07       	cpc	r27, r18
     320:	e1 f7       	brne	.-8      	; 0x31a <.do_clear_bss_loop>
     322:	0e 94 14 2a 	call	0x5428	; 0x5428 <main>
     326:	0c 94 35 3c 	jmp	0x786a	; 0x786a <_exit>

0000032a <__bad_interrupt>:
     32a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000032e <bmp280_init>:

	p = ((p + var1 + var2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
	return (float)p / 256;
}

void bmp280_init() {
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
	DDRD |= (1 << BMP_CS);
     332:	52 9a       	sbi	0x0a, 2	; 10
	PORT_CS &= ~(1<<BMP_CS); // Power On the module
     334:	5a 98       	cbi	0x0b, 2	; 11
	spi_rwSPI(0b01110100);
     336:	84 e7       	ldi	r24, 0x74	; 116
     338:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
	spi_rwSPI(0xFF);
     33c:	8f ef       	ldi	r24, 0xFF	; 255
     33e:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
	
	spi_rwSPI(0xF4);
     342:	84 ef       	ldi	r24, 0xF4	; 244
     344:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
	spi_rwSPI(0b01010111);
     348:	87 e5       	ldi	r24, 0x57	; 87
     34a:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
	PORT_CS |= (1<<BMP_CS);
     34e:	5a 9a       	sbi	0x0b, 2	; 11
#include "BMP280_SPI.h"
#include "../SPI/SPI.h"
#include "../../Options.h"

static void readCalibration() {
	_bmp280_calib.dig_T1 = spi_read16(0x88, BMP_CS);
     350:	62 e0       	ldi	r22, 0x02	; 2
     352:	70 e0       	ldi	r23, 0x00	; 0
     354:	88 e8       	ldi	r24, 0x88	; 136
     356:	0e 94 c7 28 	call	0x518e	; 0x518e <spi_read16>
     35a:	c9 ea       	ldi	r28, 0xA9	; 169
     35c:	d3 e0       	ldi	r29, 0x03	; 3
     35e:	99 83       	std	Y+1, r25	; 0x01
     360:	88 83       	st	Y, r24
	_bmp280_calib.dig_T2 = spi_readS16(0x8A, BMP_CS);
     362:	62 e0       	ldi	r22, 0x02	; 2
     364:	70 e0       	ldi	r23, 0x00	; 0
     366:	8a e8       	ldi	r24, 0x8A	; 138
     368:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <spi_readS16>
     36c:	9b 83       	std	Y+3, r25	; 0x03
     36e:	8a 83       	std	Y+2, r24	; 0x02
	_bmp280_calib.dig_T3 = spi_readS16(0x8C, BMP_CS);
     370:	62 e0       	ldi	r22, 0x02	; 2
     372:	70 e0       	ldi	r23, 0x00	; 0
     374:	8c e8       	ldi	r24, 0x8C	; 140
     376:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <spi_readS16>
     37a:	9d 83       	std	Y+5, r25	; 0x05
     37c:	8c 83       	std	Y+4, r24	; 0x04

	_bmp280_calib.dig_P1 = spi_read16(0x8E, BMP_CS);
     37e:	62 e0       	ldi	r22, 0x02	; 2
     380:	70 e0       	ldi	r23, 0x00	; 0
     382:	8e e8       	ldi	r24, 0x8E	; 142
     384:	0e 94 c7 28 	call	0x518e	; 0x518e <spi_read16>
     388:	9f 83       	std	Y+7, r25	; 0x07
     38a:	8e 83       	std	Y+6, r24	; 0x06
	_bmp280_calib.dig_P2 = spi_readS16(0x90, BMP_CS);
     38c:	62 e0       	ldi	r22, 0x02	; 2
     38e:	70 e0       	ldi	r23, 0x00	; 0
     390:	80 e9       	ldi	r24, 0x90	; 144
     392:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <spi_readS16>
     396:	99 87       	std	Y+9, r25	; 0x09
     398:	88 87       	std	Y+8, r24	; 0x08
	_bmp280_calib.dig_P3 = spi_readS16(0x92, BMP_CS);
     39a:	62 e0       	ldi	r22, 0x02	; 2
     39c:	70 e0       	ldi	r23, 0x00	; 0
     39e:	82 e9       	ldi	r24, 0x92	; 146
     3a0:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <spi_readS16>
     3a4:	9b 87       	std	Y+11, r25	; 0x0b
     3a6:	8a 87       	std	Y+10, r24	; 0x0a
	_bmp280_calib.dig_P4 = spi_readS16(0x94, BMP_CS);
     3a8:	62 e0       	ldi	r22, 0x02	; 2
     3aa:	70 e0       	ldi	r23, 0x00	; 0
     3ac:	84 e9       	ldi	r24, 0x94	; 148
     3ae:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <spi_readS16>
     3b2:	9d 87       	std	Y+13, r25	; 0x0d
     3b4:	8c 87       	std	Y+12, r24	; 0x0c
	_bmp280_calib.dig_P5 = spi_readS16(0x96, BMP_CS);
     3b6:	62 e0       	ldi	r22, 0x02	; 2
     3b8:	70 e0       	ldi	r23, 0x00	; 0
     3ba:	86 e9       	ldi	r24, 0x96	; 150
     3bc:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <spi_readS16>
     3c0:	9f 87       	std	Y+15, r25	; 0x0f
     3c2:	8e 87       	std	Y+14, r24	; 0x0e
	_bmp280_calib.dig_P6 = spi_readS16(0x98, BMP_CS);
     3c4:	62 e0       	ldi	r22, 0x02	; 2
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	88 e9       	ldi	r24, 0x98	; 152
     3ca:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <spi_readS16>
     3ce:	99 8b       	std	Y+17, r25	; 0x11
     3d0:	88 8b       	std	Y+16, r24	; 0x10
	_bmp280_calib.dig_P7 = spi_readS16(0x9A, BMP_CS);
     3d2:	62 e0       	ldi	r22, 0x02	; 2
     3d4:	70 e0       	ldi	r23, 0x00	; 0
     3d6:	8a e9       	ldi	r24, 0x9A	; 154
     3d8:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <spi_readS16>
     3dc:	9b 8b       	std	Y+19, r25	; 0x13
     3de:	8a 8b       	std	Y+18, r24	; 0x12
	_bmp280_calib.dig_P8 = spi_readS16(0x9C, BMP_CS);
     3e0:	62 e0       	ldi	r22, 0x02	; 2
     3e2:	70 e0       	ldi	r23, 0x00	; 0
     3e4:	8c e9       	ldi	r24, 0x9C	; 156
     3e6:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <spi_readS16>
     3ea:	9d 8b       	std	Y+21, r25	; 0x15
     3ec:	8c 8b       	std	Y+20, r24	; 0x14
	_bmp280_calib.dig_P9 = spi_readS16(0x9E, BMP_CS);
     3ee:	62 e0       	ldi	r22, 0x02	; 2
     3f0:	70 e0       	ldi	r23, 0x00	; 0
     3f2:	8e e9       	ldi	r24, 0x9E	; 158
     3f4:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <spi_readS16>
     3f8:	9f 8b       	std	Y+23, r25	; 0x17
     3fa:	8e 8b       	std	Y+22, r24	; 0x16
	spi_rwSPI(0xF4);
	spi_rwSPI(0b01010111);
	PORT_CS |= (1<<BMP_CS);
	
	readCalibration();
}
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	08 95       	ret

00000402 <bmp280_readPressure>:

float bmp280_readPressure()
{
     402:	2f 92       	push	r2
     404:	3f 92       	push	r3
     406:	4f 92       	push	r4
     408:	5f 92       	push	r5
     40a:	6f 92       	push	r6
     40c:	7f 92       	push	r7
     40e:	8f 92       	push	r8
     410:	9f 92       	push	r9
     412:	af 92       	push	r10
     414:	bf 92       	push	r11
     416:	cf 92       	push	r12
     418:	df 92       	push	r13
     41a:	ef 92       	push	r14
     41c:	ff 92       	push	r15
     41e:	0f 93       	push	r16
     420:	1f 93       	push	r17
     422:	cf 93       	push	r28
     424:	df 93       	push	r29
     426:	cd b7       	in	r28, 0x3d	; 61
     428:	de b7       	in	r29, 0x3e	; 62
     42a:	6f 97       	sbiw	r28, 0x1f	; 31
     42c:	0f b6       	in	r0, 0x3f	; 63
     42e:	f8 94       	cli
     430:	de bf       	out	0x3e, r29	; 62
     432:	0f be       	out	0x3f, r0	; 63
     434:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[6]; // Array to hold temp/pressure values (pressure in indices 0:2, and temp in indices 3:5)
	uint32_t pressureUncomp, tempUncomp;
	
	spi_BurstRead(0xF7, data, 6, BMP_CS);
     436:	22 e0       	ldi	r18, 0x02	; 2
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	46 e0       	ldi	r20, 0x06	; 6
     43c:	be 01       	movw	r22, r28
     43e:	6f 5f       	subi	r22, 0xFF	; 255
     440:	7f 4f       	sbci	r23, 0xFF	; 255
     442:	87 ef       	ldi	r24, 0xF7	; 247
     444:	0e 94 98 28 	call	0x5130	; 0x5130 <spi_BurstRead>
	tempUncomp = ((uint32_t)data[3]<<12) | ((uint32_t)data[4] << 4) | data[5]; // 20 bit temp val
	pressureUncomp = ((uint32_t)data[0]<<12) | ((uint32_t)data[1] << 4) | data[2]; // 20 bit pressure value
     448:	89 80       	ldd	r8, Y+1	; 0x01
     44a:	8d 8e       	std	Y+29, r8	; 0x1d
     44c:	9a 80       	ldd	r9, Y+2	; 0x02
     44e:	9e 8e       	std	Y+30, r9	; 0x1e
     450:	8b 80       	ldd	r8, Y+3	; 0x03
     452:	8f 8e       	std	Y+31, r8	; 0x1f
	bmp280_compensate_T_int32(tempUncomp);
     454:	8c 81       	ldd	r24, Y+4	; 0x04
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	a0 e0       	ldi	r26, 0x00	; 0
     45a:	b0 e0       	ldi	r27, 0x00	; 0
     45c:	ac 01       	movw	r20, r24
     45e:	bd 01       	movw	r22, r26
     460:	03 2e       	mov	r0, r19
     462:	3c e0       	ldi	r19, 0x0C	; 12
     464:	44 0f       	add	r20, r20
     466:	55 1f       	adc	r21, r21
     468:	66 1f       	adc	r22, r22
     46a:	77 1f       	adc	r23, r23
     46c:	3a 95       	dec	r19
     46e:	d1 f7       	brne	.-12     	; 0x464 <bmp280_readPressure+0x62>
     470:	30 2d       	mov	r19, r0
     472:	9d 81       	ldd	r25, Y+5	; 0x05
     474:	89 2f       	mov	r24, r25
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	a0 e0       	ldi	r26, 0x00	; 0
     47a:	b0 e0       	ldi	r27, 0x00	; 0
     47c:	88 0f       	add	r24, r24
     47e:	99 1f       	adc	r25, r25
     480:	aa 1f       	adc	r26, r26
     482:	bb 1f       	adc	r27, r27
     484:	88 0f       	add	r24, r24
     486:	99 1f       	adc	r25, r25
     488:	aa 1f       	adc	r26, r26
     48a:	bb 1f       	adc	r27, r27
     48c:	88 0f       	add	r24, r24
     48e:	99 1f       	adc	r25, r25
     490:	aa 1f       	adc	r26, r26
     492:	bb 1f       	adc	r27, r27
     494:	88 0f       	add	r24, r24
     496:	99 1f       	adc	r25, r25
     498:	aa 1f       	adc	r26, r26
     49a:	bb 1f       	adc	r27, r27
     49c:	84 2b       	or	r24, r20
     49e:	95 2b       	or	r25, r21
     4a0:	a6 2b       	or	r26, r22
     4a2:	b7 2b       	or	r27, r23
     4a4:	2e 81       	ldd	r18, Y+6	; 0x06
     4a6:	82 2b       	or	r24, r18
}

static float bmp280_compensate_T_int32(int32_t adc_T)
{
	int32_t var1, var2;
	var1 = ((((adc_T>>3) - ((int32_t)_bmp280_calib.dig_T1<<1))) * ((int32_t)_bmp280_calib.dig_T2)) >> 11;
     4a8:	0f 2e       	mov	r0, r31
     4aa:	f9 ea       	ldi	r31, 0xA9	; 169
     4ac:	6f 2e       	mov	r6, r31
     4ae:	f3 e0       	ldi	r31, 0x03	; 3
     4b0:	7f 2e       	mov	r7, r31
     4b2:	f0 2d       	mov	r31, r0
     4b4:	f3 01       	movw	r30, r6
     4b6:	40 81       	ld	r20, Z
     4b8:	51 81       	ldd	r21, Z+1	; 0x01
     4ba:	60 e0       	ldi	r22, 0x00	; 0
     4bc:	70 e0       	ldi	r23, 0x00	; 0
	var2 = (((((adc_T>>4) - ((int32_t)_bmp280_calib.dig_T1)) * ((adc_T>>4) - ((int32_t)_bmp280_calib.dig_T1))) >> 12) * ((int32_t)_bmp280_calib.dig_T3)) >> 14;
     4be:	6c 01       	movw	r12, r24
     4c0:	7d 01       	movw	r14, r26
     4c2:	68 94       	set
     4c4:	13 f8       	bld	r1, 3
     4c6:	f5 94       	asr	r15
     4c8:	e7 94       	ror	r14
     4ca:	d7 94       	ror	r13
     4cc:	c7 94       	ror	r12
     4ce:	16 94       	lsr	r1
     4d0:	d1 f7       	brne	.-12     	; 0x4c6 <bmp280_readPressure+0xc4>
     4d2:	c4 1a       	sub	r12, r20
     4d4:	d5 0a       	sbc	r13, r21
     4d6:	e6 0a       	sbc	r14, r22
     4d8:	f7 0a       	sbc	r15, r23
	t_fine = var1 + var2;
     4da:	68 94       	set
     4dc:	12 f8       	bld	r1, 2
     4de:	b5 95       	asr	r27
     4e0:	a7 95       	ror	r26
     4e2:	97 95       	ror	r25
     4e4:	87 95       	ror	r24
     4e6:	16 94       	lsr	r1
     4e8:	d1 f7       	brne	.-12     	; 0x4de <bmp280_readPressure+0xdc>
     4ea:	44 0f       	add	r20, r20
     4ec:	55 1f       	adc	r21, r21
     4ee:	66 1f       	adc	r22, r22
     4f0:	77 1f       	adc	r23, r23
     4f2:	4c 01       	movw	r8, r24
     4f4:	5d 01       	movw	r10, r26
     4f6:	84 1a       	sub	r8, r20
     4f8:	95 0a       	sbc	r9, r21
     4fa:	a6 0a       	sbc	r10, r22
     4fc:	b7 0a       	sbc	r11, r23
     4fe:	a5 01       	movw	r20, r10
     500:	94 01       	movw	r18, r8
     502:	a2 81       	ldd	r26, Z+2	; 0x02
     504:	b3 81       	ldd	r27, Z+3	; 0x03
     506:	0e 94 af 2f 	call	0x5f5e	; 0x5f5e <__mulshisi3>
     50a:	4b 01       	movw	r8, r22
     50c:	5c 01       	movw	r10, r24
     50e:	07 2e       	mov	r0, r23
     510:	7b e0       	ldi	r23, 0x0B	; 11
     512:	b5 94       	asr	r11
     514:	a7 94       	ror	r10
     516:	97 94       	ror	r9
     518:	87 94       	ror	r8
     51a:	7a 95       	dec	r23
     51c:	d1 f7       	brne	.-12     	; 0x512 <bmp280_readPressure+0x110>
     51e:	70 2d       	mov	r23, r0
     520:	a7 01       	movw	r20, r14
     522:	96 01       	movw	r18, r12
     524:	c7 01       	movw	r24, r14
     526:	b6 01       	movw	r22, r12
     528:	0e 94 6c 2f 	call	0x5ed8	; 0x5ed8 <__mulsi3>
     52c:	9b 01       	movw	r18, r22
     52e:	ac 01       	movw	r20, r24
     530:	01 2e       	mov	r0, r17
     532:	1c e0       	ldi	r17, 0x0C	; 12
     534:	55 95       	asr	r21
     536:	47 95       	ror	r20
     538:	37 95       	ror	r19
     53a:	27 95       	ror	r18
     53c:	1a 95       	dec	r17
     53e:	d1 f7       	brne	.-12     	; 0x534 <bmp280_readPressure+0x132>
     540:	10 2d       	mov	r17, r0
     542:	a4 81       	ldd	r26, Z+4	; 0x04
     544:	b5 81       	ldd	r27, Z+5	; 0x05
     546:	0e 94 af 2f 	call	0x5f5e	; 0x5f5e <__mulshisi3>
     54a:	dc 01       	movw	r26, r24
     54c:	cb 01       	movw	r24, r22
     54e:	07 2e       	mov	r0, r23
     550:	7e e0       	ldi	r23, 0x0E	; 14
     552:	b5 95       	asr	r27
     554:	a7 95       	ror	r26
     556:	97 95       	ror	r25
     558:	87 95       	ror	r24
     55a:	7a 95       	dec	r23
     55c:	d1 f7       	brne	.-12     	; 0x552 <bmp280_readPressure+0x150>
     55e:	70 2d       	mov	r23, r0
     560:	88 0d       	add	r24, r8
     562:	99 1d       	adc	r25, r9
     564:	aa 1d       	adc	r26, r10
     566:	bb 1d       	adc	r27, r11
     568:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <t_fine>
     56c:	90 93 cb 03 	sts	0x03CB, r25	; 0x8003cb <t_fine+0x1>
     570:	a0 93 cc 03 	sts	0x03CC, r26	; 0x8003cc <t_fine+0x2>
     574:	b0 93 cd 03 	sts	0x03CD, r27	; 0x8003cd <t_fine+0x3>

static float bmp280_compensate_pressure(int32_t adc_P)
{
	int64_t var1, var2, p;

	var1 = ((int64_t)t_fine) - 128000;
     578:	6c 01       	movw	r12, r24
     57a:	7d 01       	movw	r14, r26
     57c:	ff 0c       	add	r15, r15
     57e:	cc 08       	sbc	r12, r12
     580:	dc 2c       	mov	r13, r12
     582:	76 01       	movw	r14, r12
     584:	28 2f       	mov	r18, r24
     586:	39 2f       	mov	r19, r25
     588:	4a 2f       	mov	r20, r26
     58a:	5b 2f       	mov	r21, r27
     58c:	6c 2d       	mov	r22, r12
     58e:	7c 2d       	mov	r23, r12
     590:	8c 2d       	mov	r24, r12
     592:	9c 2d       	mov	r25, r12
     594:	34 5f       	subi	r19, 0xF4	; 244
     596:	41 40       	sbci	r20, 0x01	; 1
     598:	51 09       	sbc	r21, r1
     59a:	61 09       	sbc	r22, r1
     59c:	71 09       	sbc	r23, r1
     59e:	81 09       	sbc	r24, r1
     5a0:	91 09       	sbc	r25, r1
     5a2:	2f 83       	std	Y+7, r18	; 0x07
     5a4:	3a 87       	std	Y+10, r19	; 0x0a
     5a6:	4b 87       	std	Y+11, r20	; 0x0b
     5a8:	5c 87       	std	Y+12, r21	; 0x0c
     5aa:	6d 87       	std	Y+13, r22	; 0x0d
     5ac:	7e 87       	std	Y+14, r23	; 0x0e
     5ae:	8f 87       	std	Y+15, r24	; 0x0f
     5b0:	98 8b       	std	Y+16, r25	; 0x10
	var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
     5b2:	a2 2e       	mov	r10, r18
     5b4:	b3 2e       	mov	r11, r19
     5b6:	c4 2e       	mov	r12, r20
     5b8:	d5 2e       	mov	r13, r21
     5ba:	e6 2e       	mov	r14, r22
     5bc:	f7 2e       	mov	r15, r23
     5be:	08 2f       	mov	r16, r24
     5c0:	19 2f       	mov	r17, r25
     5c2:	0e 94 b7 2f 	call	0x5f6e	; 0x5f6e <__muldi3>
     5c6:	29 8b       	std	Y+17, r18	; 0x11
     5c8:	3a 8b       	std	Y+18, r19	; 0x12
     5ca:	4b 8b       	std	Y+19, r20	; 0x13
     5cc:	5c 8b       	std	Y+20, r21	; 0x14
     5ce:	69 8f       	std	Y+25, r22	; 0x19
     5d0:	7a 8f       	std	Y+26, r23	; 0x1a
     5d2:	8b 8f       	std	Y+27, r24	; 0x1b
     5d4:	9c 8f       	std	Y+28, r25	; 0x1c
	var2 = var2 + ((var1 * (int64_t)_bmp280_calib.dig_P5) << 17);
	var2 = var2 + (((int64_t)_bmp280_calib.dig_P4) << 35);
	var1 = ((var1 * var1 * (int64_t)_bmp280_calib.dig_P3) >> 8) +
	((var1 * (int64_t)_bmp280_calib.dig_P2) << 12);
     5d6:	d3 01       	movw	r26, r6
     5d8:	19 96       	adiw	r26, 0x09	; 9
     5da:	3c 91       	ld	r19, X
     5dc:	19 97       	sbiw	r26, 0x09	; 9
     5de:	18 96       	adiw	r26, 0x08	; 8
     5e0:	2c 91       	ld	r18, X
     5e2:	93 2f       	mov	r25, r19
     5e4:	99 0f       	add	r25, r25
     5e6:	99 0b       	sbc	r25, r25
     5e8:	49 2f       	mov	r20, r25
     5ea:	59 2f       	mov	r21, r25
     5ec:	69 2f       	mov	r22, r25
     5ee:	79 2f       	mov	r23, r25
     5f0:	89 2f       	mov	r24, r25
     5f2:	0e 94 b7 2f 	call	0x5f6e	; 0x5f6e <__muldi3>
     5f6:	0c e0       	ldi	r16, 0x0C	; 12
     5f8:	0e 94 e7 30 	call	0x61ce	; 0x61ce <__ashldi3>
     5fc:	22 2e       	mov	r2, r18
     5fe:	33 2e       	mov	r3, r19
     600:	44 2e       	mov	r4, r20
     602:	55 2e       	mov	r5, r21
     604:	68 87       	std	Y+8, r22	; 0x08
     606:	79 87       	std	Y+9, r23	; 0x09
     608:	88 2e       	mov	r8, r24
     60a:	99 2e       	mov	r9, r25
	var1 =
	(((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;
     60c:	f3 01       	movw	r30, r6
     60e:	33 85       	ldd	r19, Z+11	; 0x0b
     610:	22 85       	ldd	r18, Z+10	; 0x0a
     612:	93 2f       	mov	r25, r19
     614:	99 0f       	add	r25, r25
     616:	99 0b       	sbc	r25, r25
     618:	a9 88       	ldd	r10, Y+17	; 0x11
     61a:	ba 88       	ldd	r11, Y+18	; 0x12
     61c:	cb 88       	ldd	r12, Y+19	; 0x13
     61e:	dc 88       	ldd	r13, Y+20	; 0x14
     620:	e9 8c       	ldd	r14, Y+25	; 0x19
     622:	fa 8c       	ldd	r15, Y+26	; 0x1a
     624:	0b 8d       	ldd	r16, Y+27	; 0x1b
     626:	1c 8d       	ldd	r17, Y+28	; 0x1c
     628:	49 2f       	mov	r20, r25
     62a:	59 2f       	mov	r21, r25
     62c:	69 2f       	mov	r22, r25
     62e:	79 2f       	mov	r23, r25
     630:	89 2f       	mov	r24, r25
     632:	0e 94 b7 2f 	call	0x5f6e	; 0x5f6e <__muldi3>
     636:	08 e0       	ldi	r16, 0x08	; 8
     638:	0e 94 00 31 	call	0x6200	; 0x6200 <__ashrdi3>
     63c:	a2 2c       	mov	r10, r2
     63e:	b3 2c       	mov	r11, r3
     640:	c4 2c       	mov	r12, r4
     642:	d5 2c       	mov	r13, r5
     644:	e8 84       	ldd	r14, Y+8	; 0x08
     646:	f9 84       	ldd	r15, Y+9	; 0x09
     648:	08 2d       	mov	r16, r8
     64a:	19 2d       	mov	r17, r9
     64c:	0e 94 1e 31 	call	0x623c	; 0x623c <__adddi3>
     650:	70 58       	subi	r23, 0x80	; 128
     652:	8f 4f       	sbci	r24, 0xFF	; 255
     654:	9f 4f       	sbci	r25, 0xFF	; 255
     656:	d3 01       	movw	r26, r6
     658:	16 96       	adiw	r26, 0x06	; 6
     65a:	2d 90       	ld	r2, X+
     65c:	3c 90       	ld	r3, X
     65e:	17 97       	sbiw	r26, 0x07	; 7
     660:	a2 2c       	mov	r10, r2
     662:	b3 2c       	mov	r11, r3
     664:	c1 2c       	mov	r12, r1
     666:	d1 2c       	mov	r13, r1
     668:	e1 2c       	mov	r14, r1
     66a:	f1 2c       	mov	r15, r1
     66c:	00 e0       	ldi	r16, 0x00	; 0
     66e:	10 e0       	ldi	r17, 0x00	; 0
     670:	0e 94 b7 2f 	call	0x5f6e	; 0x5f6e <__muldi3>
	var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
	var2 = var2 + ((var1 * (int64_t)_bmp280_calib.dig_P5) << 17);
	var2 = var2 + (((int64_t)_bmp280_calib.dig_P4) << 35);
	var1 = ((var1 * var1 * (int64_t)_bmp280_calib.dig_P3) >> 8) +
	((var1 * (int64_t)_bmp280_calib.dig_P2) << 12);
	var1 =
     674:	01 e2       	ldi	r16, 0x21	; 33
     676:	0e 94 00 31 	call	0x6200	; 0x6200 <__ashrdi3>
     67a:	28 87       	std	Y+8, r18	; 0x08
     67c:	39 87       	std	Y+9, r19	; 0x09
     67e:	4d 8b       	std	Y+21, r20	; 0x15
     680:	5e 8b       	std	Y+22, r21	; 0x16
     682:	6f 8b       	std	Y+23, r22	; 0x17
     684:	78 8f       	std	Y+24, r23	; 0x18
     686:	58 2e       	mov	r5, r24
     688:	49 2e       	mov	r4, r25
	(((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;

	if (var1 == 0) {
     68a:	a0 e0       	ldi	r26, 0x00	; 0
     68c:	0e 94 30 31 	call	0x6260	; 0x6260 <__cmpdi2_s8>
     690:	09 f4       	brne	.+2      	; 0x694 <bmp280_readPressure+0x292>
     692:	65 c1       	rjmp	.+714    	; 0x95e <__stack+0x5f>
static float bmp280_compensate_pressure(int32_t adc_P)
{
	int64_t var1, var2, p;

	var1 = ((int64_t)t_fine) - 128000;
	var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
     694:	0f 2e       	mov	r0, r31
     696:	f9 ea       	ldi	r31, 0xA9	; 169
     698:	2f 2e       	mov	r2, r31
     69a:	f3 e0       	ldi	r31, 0x03	; 3
     69c:	3f 2e       	mov	r3, r31
     69e:	f0 2d       	mov	r31, r0
     6a0:	f1 01       	movw	r30, r2
     6a2:	31 89       	ldd	r19, Z+17	; 0x11
     6a4:	20 89       	ldd	r18, Z+16	; 0x10
     6a6:	93 2f       	mov	r25, r19
     6a8:	99 0f       	add	r25, r25
     6aa:	99 0b       	sbc	r25, r25
     6ac:	a9 88       	ldd	r10, Y+17	; 0x11
     6ae:	ba 88       	ldd	r11, Y+18	; 0x12
     6b0:	cb 88       	ldd	r12, Y+19	; 0x13
     6b2:	dc 88       	ldd	r13, Y+20	; 0x14
     6b4:	e9 8c       	ldd	r14, Y+25	; 0x19
     6b6:	fa 8c       	ldd	r15, Y+26	; 0x1a
     6b8:	0b 8d       	ldd	r16, Y+27	; 0x1b
     6ba:	1c 8d       	ldd	r17, Y+28	; 0x1c
     6bc:	49 2f       	mov	r20, r25
     6be:	59 2f       	mov	r21, r25
     6c0:	69 2f       	mov	r22, r25
     6c2:	79 2f       	mov	r23, r25
     6c4:	89 2f       	mov	r24, r25
     6c6:	0e 94 b7 2f 	call	0x5f6e	; 0x5f6e <__muldi3>
     6ca:	29 8b       	std	Y+17, r18	; 0x11
     6cc:	3a 8b       	std	Y+18, r19	; 0x12
     6ce:	4b 8b       	std	Y+19, r20	; 0x13
     6d0:	5c 8b       	std	Y+20, r21	; 0x14
     6d2:	66 2e       	mov	r6, r22
     6d4:	77 2e       	mov	r7, r23
     6d6:	88 2e       	mov	r8, r24
     6d8:	99 2e       	mov	r9, r25
	var2 = var2 + ((var1 * (int64_t)_bmp280_calib.dig_P5) << 17);
     6da:	d1 01       	movw	r26, r2
     6dc:	1f 96       	adiw	r26, 0x0f	; 15
     6de:	3c 91       	ld	r19, X
     6e0:	1f 97       	sbiw	r26, 0x0f	; 15
     6e2:	1e 96       	adiw	r26, 0x0e	; 14
     6e4:	2c 91       	ld	r18, X
     6e6:	93 2f       	mov	r25, r19
     6e8:	99 0f       	add	r25, r25
     6ea:	99 0b       	sbc	r25, r25
     6ec:	af 80       	ldd	r10, Y+7	; 0x07
     6ee:	ba 84       	ldd	r11, Y+10	; 0x0a
     6f0:	cb 84       	ldd	r12, Y+11	; 0x0b
     6f2:	dc 84       	ldd	r13, Y+12	; 0x0c
     6f4:	ed 84       	ldd	r14, Y+13	; 0x0d
     6f6:	fe 84       	ldd	r15, Y+14	; 0x0e
     6f8:	0f 85       	ldd	r16, Y+15	; 0x0f
     6fa:	18 89       	ldd	r17, Y+16	; 0x10
     6fc:	49 2f       	mov	r20, r25
     6fe:	59 2f       	mov	r21, r25
     700:	69 2f       	mov	r22, r25
     702:	79 2f       	mov	r23, r25
     704:	89 2f       	mov	r24, r25
     706:	0e 94 b7 2f 	call	0x5f6e	; 0x5f6e <__muldi3>
     70a:	01 e1       	ldi	r16, 0x11	; 17
     70c:	0e 94 e7 30 	call	0x61ce	; 0x61ce <__ashldi3>
     710:	a9 88       	ldd	r10, Y+17	; 0x11
     712:	ba 88       	ldd	r11, Y+18	; 0x12
     714:	cb 88       	ldd	r12, Y+19	; 0x13
     716:	dc 88       	ldd	r13, Y+20	; 0x14
     718:	e6 2c       	mov	r14, r6
     71a:	f7 2c       	mov	r15, r7
     71c:	08 2d       	mov	r16, r8
     71e:	19 2d       	mov	r17, r9
     720:	0e 94 1e 31 	call	0x623c	; 0x623c <__adddi3>
     724:	a2 2e       	mov	r10, r18
     726:	b3 2e       	mov	r11, r19
     728:	c4 2e       	mov	r12, r20
     72a:	d5 2e       	mov	r13, r21
     72c:	e6 2e       	mov	r14, r22
     72e:	f7 2e       	mov	r15, r23
     730:	8f 83       	std	Y+7, r24	; 0x07
     732:	19 2f       	mov	r17, r25

	if (var1 == 0) {
		return 0; // avoid exception caused by division by zero
	}
	p = 1048576 - adc_P;
	p = (((p << 31) - var2) * 3125) / var1;
     734:	8d 8c       	ldd	r8, Y+29	; 0x1d
     736:	48 2d       	mov	r20, r8
     738:	50 e0       	ldi	r21, 0x00	; 0
     73a:	60 e0       	ldi	r22, 0x00	; 0
     73c:	70 e0       	ldi	r23, 0x00	; 0
     73e:	db 01       	movw	r26, r22
     740:	ca 01       	movw	r24, r20
     742:	07 2e       	mov	r0, r23
     744:	7c e0       	ldi	r23, 0x0C	; 12
     746:	88 0f       	add	r24, r24
     748:	99 1f       	adc	r25, r25
     74a:	aa 1f       	adc	r26, r26
     74c:	bb 1f       	adc	r27, r27
     74e:	7a 95       	dec	r23
     750:	d1 f7       	brne	.-12     	; 0x746 <bmp280_readPressure+0x344>
     752:	70 2d       	mov	r23, r0
     754:	9e 8c       	ldd	r9, Y+30	; 0x1e
     756:	49 2d       	mov	r20, r9
     758:	50 e0       	ldi	r21, 0x00	; 0
     75a:	60 e0       	ldi	r22, 0x00	; 0
     75c:	70 e0       	ldi	r23, 0x00	; 0
     75e:	44 0f       	add	r20, r20
     760:	55 1f       	adc	r21, r21
     762:	66 1f       	adc	r22, r22
     764:	77 1f       	adc	r23, r23
     766:	44 0f       	add	r20, r20
     768:	55 1f       	adc	r21, r21
     76a:	66 1f       	adc	r22, r22
     76c:	77 1f       	adc	r23, r23
     76e:	44 0f       	add	r20, r20
     770:	55 1f       	adc	r21, r21
     772:	66 1f       	adc	r22, r22
     774:	77 1f       	adc	r23, r23
     776:	44 0f       	add	r20, r20
     778:	55 1f       	adc	r21, r21
     77a:	66 1f       	adc	r22, r22
     77c:	77 1f       	adc	r23, r23
     77e:	48 2b       	or	r20, r24
     780:	59 2b       	or	r21, r25
     782:	6a 2b       	or	r22, r26
     784:	7b 2b       	or	r23, r27
     786:	8f 8c       	ldd	r8, Y+31	; 0x1f
     788:	48 29       	or	r20, r8
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	a0 e1       	ldi	r26, 0x10	; 16
     790:	b0 e0       	ldi	r27, 0x00	; 0
     792:	84 1b       	sub	r24, r20
     794:	95 0b       	sbc	r25, r21
     796:	a6 0b       	sbc	r26, r22
     798:	b7 0b       	sbc	r27, r23
     79a:	3c 01       	movw	r6, r24
     79c:	4d 01       	movw	r8, r26
     79e:	99 0c       	add	r9, r9
     7a0:	66 08       	sbc	r6, r6
     7a2:	76 2c       	mov	r7, r6
     7a4:	43 01       	movw	r8, r6
     7a6:	28 2f       	mov	r18, r24
     7a8:	39 2f       	mov	r19, r25
     7aa:	4a 2f       	mov	r20, r26
     7ac:	5b 2f       	mov	r21, r27
     7ae:	66 2d       	mov	r22, r6
     7b0:	76 2d       	mov	r23, r6
     7b2:	86 2d       	mov	r24, r6
     7b4:	96 2d       	mov	r25, r6
     7b6:	0f e1       	ldi	r16, 0x1F	; 31
     7b8:	0e 94 e7 30 	call	0x61ce	; 0x61ce <__ashldi3>
     7bc:	62 2e       	mov	r6, r18
     7be:	73 2e       	mov	r7, r19
     7c0:	84 2e       	mov	r8, r20
     7c2:	95 2e       	mov	r9, r21
     7c4:	b6 2f       	mov	r27, r22
     7c6:	a7 2f       	mov	r26, r23
     7c8:	8a 87       	std	Y+10, r24	; 0x0a
     7ca:	9b 87       	std	Y+11, r25	; 0x0b
     7cc:	f1 01       	movw	r30, r2
     7ce:	35 85       	ldd	r19, Z+13	; 0x0d
     7d0:	24 85       	ldd	r18, Z+12	; 0x0c
     7d2:	93 2f       	mov	r25, r19
     7d4:	99 0f       	add	r25, r25
     7d6:	99 0b       	sbc	r25, r25
     7d8:	49 2f       	mov	r20, r25
     7da:	59 2f       	mov	r21, r25
     7dc:	69 2f       	mov	r22, r25
     7de:	79 2f       	mov	r23, r25
     7e0:	89 2f       	mov	r24, r25
     7e2:	03 e2       	ldi	r16, 0x23	; 35
     7e4:	0e 94 e7 30 	call	0x61ce	; 0x61ce <__ashldi3>
     7e8:	0f 81       	ldd	r16, Y+7	; 0x07
     7ea:	0e 94 1e 31 	call	0x623c	; 0x623c <__adddi3>
     7ee:	a2 2e       	mov	r10, r18
     7f0:	b3 2e       	mov	r11, r19
     7f2:	c4 2e       	mov	r12, r20
     7f4:	d5 2e       	mov	r13, r21
     7f6:	e6 2e       	mov	r14, r22
     7f8:	f7 2e       	mov	r15, r23
     7fa:	08 2f       	mov	r16, r24
     7fc:	19 2f       	mov	r17, r25
     7fe:	26 2d       	mov	r18, r6
     800:	37 2d       	mov	r19, r7
     802:	48 2d       	mov	r20, r8
     804:	59 2d       	mov	r21, r9
     806:	6b 2f       	mov	r22, r27
     808:	7a 2f       	mov	r23, r26
     80a:	8a 85       	ldd	r24, Y+10	; 0x0a
     80c:	9b 85       	ldd	r25, Y+11	; 0x0b
     80e:	0e 94 27 31 	call	0x624e	; 0x624e <__subdi3>
     812:	0f 2e       	mov	r0, r31
     814:	f5 e3       	ldi	r31, 0x35	; 53
     816:	af 2e       	mov	r10, r31
     818:	f0 2d       	mov	r31, r0
     81a:	0f 2e       	mov	r0, r31
     81c:	fc e0       	ldi	r31, 0x0C	; 12
     81e:	bf 2e       	mov	r11, r31
     820:	f0 2d       	mov	r31, r0
     822:	c1 2c       	mov	r12, r1
     824:	d1 2c       	mov	r13, r1
     826:	e1 2c       	mov	r14, r1
     828:	f1 2c       	mov	r15, r1
     82a:	00 e0       	ldi	r16, 0x00	; 0
     82c:	10 e0       	ldi	r17, 0x00	; 0
     82e:	0e 94 b7 2f 	call	0x5f6e	; 0x5f6e <__muldi3>
     832:	a8 84       	ldd	r10, Y+8	; 0x08
     834:	b9 84       	ldd	r11, Y+9	; 0x09
     836:	cd 88       	ldd	r12, Y+21	; 0x15
     838:	de 88       	ldd	r13, Y+22	; 0x16
     83a:	ef 88       	ldd	r14, Y+23	; 0x17
     83c:	f8 8c       	ldd	r15, Y+24	; 0x18
     83e:	05 2d       	mov	r16, r5
     840:	14 2d       	mov	r17, r4
     842:	0e 94 12 30 	call	0x6024	; 0x6024 <__divdi3>
     846:	2f 83       	std	Y+7, r18	; 0x07
     848:	3a 87       	std	Y+10, r19	; 0x0a
     84a:	4b 87       	std	Y+11, r20	; 0x0b
     84c:	5c 87       	std	Y+12, r21	; 0x0c
     84e:	6d 87       	std	Y+13, r22	; 0x0d
     850:	7e 87       	std	Y+14, r23	; 0x0e
     852:	8f 87       	std	Y+15, r24	; 0x0f
     854:	98 8b       	std	Y+16, r25	; 0x10
	var1 = (((int64_t)_bmp280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
     856:	0d e0       	ldi	r16, 0x0D	; 13
     858:	0e 94 00 31 	call	0x6200	; 0x6200 <__ashrdi3>
     85c:	92 2e       	mov	r9, r18
     85e:	83 2e       	mov	r8, r19
     860:	74 2e       	mov	r7, r20
     862:	65 2e       	mov	r6, r21
     864:	56 2e       	mov	r5, r22
     866:	47 2e       	mov	r4, r23
     868:	88 87       	std	Y+8, r24	; 0x08
     86a:	99 87       	std	Y+9, r25	; 0x09
	var2 = (((int64_t)_bmp280_calib.dig_P8) * p) >> 19;

	p = ((p + var1 + var2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
     86c:	d1 01       	movw	r26, r2
     86e:	57 96       	adiw	r26, 0x17	; 23
     870:	3c 91       	ld	r19, X
     872:	57 97       	sbiw	r26, 0x17	; 23
     874:	56 96       	adiw	r26, 0x16	; 22
     876:	2c 91       	ld	r18, X
     878:	93 2f       	mov	r25, r19
     87a:	99 0f       	add	r25, r25
     87c:	99 0b       	sbc	r25, r25
     87e:	a9 2c       	mov	r10, r9
     880:	b8 2c       	mov	r11, r8
     882:	c7 2c       	mov	r12, r7
     884:	d6 2c       	mov	r13, r6
     886:	e5 2c       	mov	r14, r5
     888:	f4 2c       	mov	r15, r4
     88a:	08 2f       	mov	r16, r24
     88c:	19 85       	ldd	r17, Y+9	; 0x09
     88e:	49 2f       	mov	r20, r25
     890:	59 2f       	mov	r21, r25
     892:	69 2f       	mov	r22, r25
     894:	79 2f       	mov	r23, r25
     896:	89 2f       	mov	r24, r25
     898:	0e 94 b7 2f 	call	0x5f6e	; 0x5f6e <__muldi3>
     89c:	0e 94 b7 2f 	call	0x5f6e	; 0x5f6e <__muldi3>
     8a0:	09 e1       	ldi	r16, 0x19	; 25
     8a2:	0e 94 00 31 	call	0x6200	; 0x6200 <__ashrdi3>
     8a6:	af 80       	ldd	r10, Y+7	; 0x07
     8a8:	ba 84       	ldd	r11, Y+10	; 0x0a
     8aa:	cb 84       	ldd	r12, Y+11	; 0x0b
     8ac:	dc 84       	ldd	r13, Y+12	; 0x0c
     8ae:	ed 84       	ldd	r14, Y+13	; 0x0d
     8b0:	fe 84       	ldd	r15, Y+14	; 0x0e
     8b2:	0f 85       	ldd	r16, Y+15	; 0x0f
     8b4:	18 89       	ldd	r17, Y+16	; 0x10
     8b6:	0e 94 1e 31 	call	0x623c	; 0x623c <__adddi3>
     8ba:	28 87       	std	Y+8, r18	; 0x08
     8bc:	39 87       	std	Y+9, r19	; 0x09
     8be:	44 2e       	mov	r4, r20
     8c0:	55 2e       	mov	r5, r21
     8c2:	66 2e       	mov	r6, r22
     8c4:	77 2e       	mov	r7, r23
     8c6:	88 2e       	mov	r8, r24
     8c8:	99 2e       	mov	r9, r25
     8ca:	f1 01       	movw	r30, r2
     8cc:	35 89       	ldd	r19, Z+21	; 0x15
     8ce:	24 89       	ldd	r18, Z+20	; 0x14
     8d0:	93 2f       	mov	r25, r19
     8d2:	99 0f       	add	r25, r25
     8d4:	99 0b       	sbc	r25, r25
     8d6:	49 2f       	mov	r20, r25
     8d8:	59 2f       	mov	r21, r25
     8da:	69 2f       	mov	r22, r25
     8dc:	79 2f       	mov	r23, r25
     8de:	89 2f       	mov	r24, r25
     8e0:	0e 94 b7 2f 	call	0x5f6e	; 0x5f6e <__muldi3>
     8e4:	03 e1       	ldi	r16, 0x13	; 19
     8e6:	0e 94 00 31 	call	0x6200	; 0x6200 <__ashrdi3>
     8ea:	a2 2e       	mov	r10, r18
     8ec:	b3 2e       	mov	r11, r19
     8ee:	c4 2e       	mov	r12, r20
     8f0:	d5 2e       	mov	r13, r21
     8f2:	e6 2e       	mov	r14, r22
     8f4:	f7 2e       	mov	r15, r23
     8f6:	08 2f       	mov	r16, r24
     8f8:	19 2f       	mov	r17, r25
     8fa:	28 85       	ldd	r18, Y+8	; 0x08
     8fc:	39 85       	ldd	r19, Y+9	; 0x09
     8fe:	44 2d       	mov	r20, r4
     900:	55 2d       	mov	r21, r5
     902:	66 2d       	mov	r22, r6
     904:	77 2d       	mov	r23, r7
     906:	88 2d       	mov	r24, r8
     908:	99 2d       	mov	r25, r9
     90a:	0e 94 1e 31 	call	0x623c	; 0x623c <__adddi3>
     90e:	08 e0       	ldi	r16, 0x08	; 8
     910:	0e 94 00 31 	call	0x6200	; 0x6200 <__ashrdi3>
     914:	a2 2e       	mov	r10, r18
     916:	b3 2e       	mov	r11, r19
     918:	c4 2e       	mov	r12, r20
     91a:	d5 2e       	mov	r13, r21
     91c:	e6 2e       	mov	r14, r22
     91e:	f7 2e       	mov	r15, r23
     920:	e8 2f       	mov	r30, r24
     922:	19 2f       	mov	r17, r25
	return (float)p / 256;
     924:	d1 01       	movw	r26, r2
     926:	53 96       	adiw	r26, 0x13	; 19
     928:	3c 91       	ld	r19, X
     92a:	53 97       	sbiw	r26, 0x13	; 19
     92c:	52 96       	adiw	r26, 0x12	; 18
     92e:	2c 91       	ld	r18, X
     930:	93 2f       	mov	r25, r19
     932:	99 0f       	add	r25, r25
     934:	99 0b       	sbc	r25, r25
     936:	49 2f       	mov	r20, r25
     938:	59 2f       	mov	r21, r25
     93a:	69 2f       	mov	r22, r25
     93c:	79 2f       	mov	r23, r25
     93e:	89 2f       	mov	r24, r25
     940:	04 e0       	ldi	r16, 0x04	; 4
     942:	0e 94 e7 30 	call	0x61ce	; 0x61ce <__ashldi3>
     946:	0e 2f       	mov	r16, r30
     948:	0e 94 1e 31 	call	0x623c	; 0x623c <__adddi3>
     94c:	0e 94 f4 2d 	call	0x5be8	; 0x5be8 <__floatdisf>
     950:	20 e0       	ldi	r18, 0x00	; 0
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e8       	ldi	r20, 0x80	; 128
     956:	5b e3       	ldi	r21, 0x3B	; 59
     958:	0e 94 ff 2e 	call	0x5dfe	; 0x5dfe <__mulsf3>
     95c:	03 c0       	rjmp	.+6      	; 0x964 <__stack+0x65>
	((var1 * (int64_t)_bmp280_calib.dig_P2) << 12);
	var1 =
	(((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;

	if (var1 == 0) {
		return 0; // avoid exception caused by division by zero
     95e:	60 e0       	ldi	r22, 0x00	; 0
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	cb 01       	movw	r24, r22
	spi_BurstRead(0xF7, data, 6, BMP_CS);
	tempUncomp = ((uint32_t)data[3]<<12) | ((uint32_t)data[4] << 4) | data[5]; // 20 bit temp val
	pressureUncomp = ((uint32_t)data[0]<<12) | ((uint32_t)data[1] << 4) | data[2]; // 20 bit pressure value
	bmp280_compensate_T_int32(tempUncomp);
	return bmp280_compensate_pressure(pressureUncomp);
}
     964:	6f 96       	adiw	r28, 0x1f	; 31
     966:	0f b6       	in	r0, 0x3f	; 63
     968:	f8 94       	cli
     96a:	de bf       	out	0x3e, r29	; 62
     96c:	0f be       	out	0x3f, r0	; 63
     96e:	cd bf       	out	0x3d, r28	; 61
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	1f 91       	pop	r17
     976:	0f 91       	pop	r16
     978:	ff 90       	pop	r15
     97a:	ef 90       	pop	r14
     97c:	df 90       	pop	r13
     97e:	cf 90       	pop	r12
     980:	bf 90       	pop	r11
     982:	af 90       	pop	r10
     984:	9f 90       	pop	r9
     986:	8f 90       	pop	r8
     988:	7f 90       	pop	r7
     98a:	6f 90       	pop	r6
     98c:	5f 90       	pop	r5
     98e:	4f 90       	pop	r4
     990:	3f 90       	pop	r3
     992:	2f 90       	pop	r2
     994:	08 95       	ret

00000996 <udp_client_check_for_dns_answer>:
}

// process the answer from the dns server:
// return 1 on sucessful processing of answer.
// We set also the variable haveDNSanswer
uint8_t udp_client_check_for_dns_answer(uint8_t *buf,uint16_t plen){
     996:	fc 01       	movw	r30, r24
        uint8_t j,i;
        if (plen<70){
     998:	66 34       	cpi	r22, 0x46	; 70
     99a:	71 05       	cpc	r23, r1
     99c:	08 f4       	brcc	.+2      	; 0x9a0 <udp_client_check_for_dns_answer+0xa>
     99e:	73 c0       	rjmp	.+230    	; 0xa86 <udp_client_check_for_dns_answer+0xf0>
                return(0);
        }
        if (buf[UDP_SRC_PORT_L_P]!=53){
     9a0:	83 a1       	ldd	r24, Z+35	; 0x23
     9a2:	85 33       	cpi	r24, 0x35	; 53
     9a4:	09 f0       	breq	.+2      	; 0x9a8 <udp_client_check_for_dns_answer+0x12>
     9a6:	71 c0       	rjmp	.+226    	; 0xa8a <udp_client_check_for_dns_answer+0xf4>
                // not from a DNS
                return(0);
        }
        if (buf[UDP_DST_PORT_H_P]!=DNSCLIENT_SRC_PORT_H){ 
     9a8:	84 a1       	ldd	r24, Z+36	; 0x24
     9aa:	80 3e       	cpi	r24, 0xE0	; 224
     9ac:	09 f0       	breq	.+2      	; 0x9b0 <udp_client_check_for_dns_answer+0x1a>
     9ae:	6f c0       	rjmp	.+222    	; 0xa8e <udp_client_check_for_dns_answer+0xf8>
                return(0);
        }
        // we use the TID also as port:
        if (buf[UDP_DST_PORT_L_P]!=dnstid_l){ 
     9b0:	85 a1       	ldd	r24, Z+37	; 0x25
     9b2:	90 91 c0 02 	lds	r25, 0x02C0	; 0x8002c0 <dnstid_l>
     9b6:	89 13       	cpse	r24, r25
     9b8:	6c c0       	rjmp	.+216    	; 0xa92 <udp_client_check_for_dns_answer+0xfc>
        // is the packet for my IP:
        if(eth_type_is_ip_and_my_ip(buf,plen)==0){
                return(0);
        }
        */
        if (buf[UDP_DATA_P+1]!=dnstid_l){ 
     9ba:	93 a5       	ldd	r25, Z+43	; 0x2b
     9bc:	89 13       	cpse	r24, r25
     9be:	6b c0       	rjmp	.+214    	; 0xa96 <udp_client_check_for_dns_answer+0x100>
                return(0);
        }
        // check flags lower byte:
        if ((buf[UDP_DATA_P+3]&0x8F)!=0x80){ 
     9c0:	85 a5       	ldd	r24, Z+45	; 0x2d
     9c2:	8f 78       	andi	r24, 0x8F	; 143
     9c4:	80 38       	cpi	r24, 0x80	; 128
     9c6:	29 f0       	breq	.+10     	; 0x9d2 <udp_client_check_for_dns_answer+0x3c>
                // there is an error or server does not support recursive
                // queries. We can only work with servers that support recursive
                // queries.
                dns_ansError=1;
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <__data_end>
                return(0);
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	08 95       	ret
        //
        // UDP_DATA_P+12+querylen is first byte of first answer.
        // The answer contains again the domain name and we need to
        // jump over it to find the IP. This part can be abbreviated by
        // the use of 2 byte pointers. See RFC 1035.
        i=12+buf[UDP_DATA_P]; // we encoded the query len into tid
     9d2:	92 a5       	ldd	r25, Z+42	; 0x2a
     9d4:	94 5f       	subi	r25, 0xF4	; 244
                // pointer
                i+=2;
        }else{
                // we just search for the first, zero=root domain
                // all other octets must be non zero
                while(i<plen-UDP_DATA_P-7){
     9d6:	61 53       	subi	r22, 0x31	; 49
     9d8:	71 09       	sbc	r23, r1
        // The answer contains again the domain name and we need to
        // jump over it to find the IP. This part can be abbreviated by
        // the use of 2 byte pointers. See RFC 1035.
        i=12+buf[UDP_DATA_P]; // we encoded the query len into tid
ChecNextResp:
        if (buf[UDP_DATA_P+i] & 0xc0){
     9da:	df 01       	movw	r26, r30
     9dc:	a9 0f       	add	r26, r25
     9de:	b1 1d       	adc	r27, r1
     9e0:	9a 96       	adiw	r26, 0x2a	; 42
     9e2:	8c 91       	ld	r24, X
     9e4:	80 7c       	andi	r24, 0xC0	; 192
     9e6:	71 f0       	breq	.+28     	; 0xa04 <udp_client_check_for_dns_answer+0x6e>
                // pointer
                i+=2;
     9e8:	9e 5f       	subi	r25, 0xFE	; 254
     9ea:	11 c0       	rjmp	.+34     	; 0xa0e <udp_client_check_for_dns_answer+0x78>
        }else{
                // we just search for the first, zero=root domain
                // all other octets must be non zero
                while(i<plen-UDP_DATA_P-7){
                        i++;
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	89 0f       	add	r24, r25
                        if (buf[UDP_DATA_P+i]==0){
     9f0:	df 01       	movw	r26, r30
     9f2:	a8 0f       	add	r26, r24
     9f4:	b1 1d       	adc	r27, r1
     9f6:	9a 96       	adiw	r26, 0x2a	; 42
     9f8:	2c 91       	ld	r18, X
     9fa:	21 11       	cpse	r18, r1
     9fc:	02 c0       	rjmp	.+4      	; 0xa02 <udp_client_check_for_dns_answer+0x6c>
                                i++;
     9fe:	9e 5f       	subi	r25, 0xFE	; 254
                                break;
     a00:	06 c0       	rjmp	.+12     	; 0xa0e <udp_client_check_for_dns_answer+0x78>
                i+=2;
        }else{
                // we just search for the first, zero=root domain
                // all other octets must be non zero
                while(i<plen-UDP_DATA_P-7){
                        i++;
     a02:	98 2f       	mov	r25, r24
                // pointer
                i+=2;
        }else{
                // we just search for the first, zero=root domain
                // all other octets must be non zero
                while(i<plen-UDP_DATA_P-7){
     a04:	29 2f       	mov	r18, r25
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	26 17       	cp	r18, r22
     a0a:	37 07       	cpc	r19, r23
     a0c:	78 f3       	brcs	.-34     	; 0x9ec <udp_client_check_for_dns_answer+0x56>
                }
        }
        // There might be multipe records in the answer. 
        // We are searching for an A record (contains IP).
        // Contributed by Andras Tucsni
        if (buf[UDP_DATA_P+i+1] != 1){    // check type == 1 for "A"
     a0e:	29 2f       	mov	r18, r25
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	df 01       	movw	r26, r30
     a14:	a2 0f       	add	r26, r18
     a16:	b3 1f       	adc	r27, r19
     a18:	9b 96       	adiw	r26, 0x2b	; 43
     a1a:	8c 91       	ld	r24, X
     a1c:	81 30       	cpi	r24, 0x01	; 1
     a1e:	99 f0       	breq	.+38     	; 0xa46 <udp_client_check_for_dns_answer+0xb0>
                i += 2 + 2 + 4;    // skip type & class & TTL
                i += buf[UDP_DATA_P+i+1] + 2;    // skip datalength bytes
     a20:	88 e0       	ldi	r24, 0x08	; 8
     a22:	89 0f       	add	r24, r25
     a24:	df 01       	movw	r26, r30
     a26:	a8 0f       	add	r26, r24
     a28:	b1 1d       	adc	r27, r1
     a2a:	9b 96       	adiw	r26, 0x2b	; 43
     a2c:	8c 91       	ld	r24, X
     a2e:	96 5f       	subi	r25, 0xF6	; 246
     a30:	98 0f       	add	r25, r24
                if (i < plen-UDP_DATA_P-7){
     a32:	29 2f       	mov	r18, r25
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	26 17       	cp	r18, r22
     a38:	37 07       	cpc	r19, r23
     a3a:	78 f2       	brcs	.-98     	; 0x9da <udp_client_check_for_dns_answer+0x44>
                        goto ChecNextResp;
                }
                dns_ansError=3; // no A record found but packet ends 
     a3c:	83 e0       	ldi	r24, 0x03	; 3
     a3e:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <__data_end>
                return(0);
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	08 95       	ret
        } 
        // We have an A record
        // i is now pointing to the high octet of the type field
        if (buf[UDP_DATA_P+i+9] !=4 ){
     a46:	df 01       	movw	r26, r30
     a48:	a2 0f       	add	r26, r18
     a4a:	b3 1f       	adc	r27, r19
     a4c:	d3 96       	adiw	r26, 0x33	; 51
     a4e:	2c 91       	ld	r18, X
     a50:	24 30       	cpi	r18, 0x04	; 4
     a52:	29 f0       	breq	.+10     	; 0xa5e <udp_client_check_for_dns_answer+0xc8>
                dns_ansError=2; // not IPv4
     a54:	82 e0       	ldi	r24, 0x02	; 2
     a56:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <__data_end>
                return(0);
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	08 95       	ret
     a5e:	2a e0       	ldi	r18, 0x0A	; 10
     a60:	29 0f       	add	r18, r25
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	26 5d       	subi	r18, 0xD6	; 214
     a66:	3f 4f       	sbci	r19, 0xFF	; 255
     a68:	e2 0f       	add	r30, r18
     a6a:	f3 1f       	adc	r31, r19
     a6c:	ab eb       	ldi	r26, 0xBB	; 187
     a6e:	b2 e0       	ldi	r27, 0x02	; 2
     a70:	2f eb       	ldi	r18, 0xBF	; 191
     a72:	32 e0       	ldi	r19, 0x02	; 2
        }
        i+=10;
        j=0;
        while(j<4){
                dns_answerip[j]=buf[UDP_DATA_P+i+j];
     a74:	91 91       	ld	r25, Z+
     a76:	9d 93       	st	X+, r25
                dns_ansError=2; // not IPv4
                return(0);
        }
        i+=10;
        j=0;
        while(j<4){
     a78:	a2 17       	cp	r26, r18
     a7a:	b3 07       	cpc	r27, r19
     a7c:	d9 f7       	brne	.-10     	; 0xa74 <udp_client_check_for_dns_answer+0xde>
                dns_answerip[j]=buf[UDP_DATA_P+i+j];
                j++;
        }
        haveDNSanswer=1;
     a7e:	91 e0       	ldi	r25, 0x01	; 1
     a80:	90 93 bf 02 	sts	0x02BF, r25	; 0x8002bf <haveDNSanswer>
        return(1);
     a84:	08 95       	ret
// return 1 on sucessful processing of answer.
// We set also the variable haveDNSanswer
uint8_t udp_client_check_for_dns_answer(uint8_t *buf,uint16_t plen){
        uint8_t j,i;
        if (plen<70){
                return(0);
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	08 95       	ret
        }
        if (buf[UDP_SRC_PORT_L_P]!=53){
                // not from a DNS
                return(0);
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	08 95       	ret
        }
        if (buf[UDP_DST_PORT_H_P]!=DNSCLIENT_SRC_PORT_H){ 
                return(0);
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	08 95       	ret
        }
        // we use the TID also as port:
        if (buf[UDP_DST_PORT_L_P]!=dnstid_l){ 
                return(0);
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	08 95       	ret
        if(eth_type_is_ip_and_my_ip(buf,plen)==0){
                return(0);
        }
        */
        if (buf[UDP_DATA_P+1]!=dnstid_l){ 
                return(0);
     a96:	80 e0       	ldi	r24, 0x00	; 0
                dns_answerip[j]=buf[UDP_DATA_P+i+j];
                j++;
        }
        haveDNSanswer=1;
        return(1);
}
     a98:	08 95       	ret

00000a9a <enc28j60ReadOp>:
{
	if( enc28j60Read(EPKTCNT) ==0 ){
		return(0);
        }
        return(1);
}
     a9a:	2a 98       	cbi	0x05, 2	; 5
     a9c:	96 2f       	mov	r25, r22
     a9e:	6f 71       	andi	r22, 0x1F	; 31
     aa0:	86 2b       	or	r24, r22
     aa2:	8e bd       	out	0x2e, r24	; 46
     aa4:	0d b4       	in	r0, 0x2d	; 45
     aa6:	07 fe       	sbrs	r0, 7
     aa8:	fd cf       	rjmp	.-6      	; 0xaa4 <enc28j60ReadOp+0xa>
     aaa:	1e bc       	out	0x2e, r1	; 46
     aac:	0d b4       	in	r0, 0x2d	; 45
     aae:	07 fe       	sbrs	r0, 7
     ab0:	fd cf       	rjmp	.-6      	; 0xaac <enc28j60ReadOp+0x12>
     ab2:	99 23       	and	r25, r25
     ab4:	24 f4       	brge	.+8      	; 0xabe <enc28j60ReadOp+0x24>
     ab6:	1e bc       	out	0x2e, r1	; 46
     ab8:	0d b4       	in	r0, 0x2d	; 45
     aba:	07 fe       	sbrs	r0, 7
     abc:	fd cf       	rjmp	.-6      	; 0xab8 <enc28j60ReadOp+0x1e>
     abe:	2a 9a       	sbi	0x05, 2	; 5
     ac0:	8e b5       	in	r24, 0x2e	; 46
     ac2:	08 95       	ret

00000ac4 <enc28j60WriteOp>:
     ac4:	2a 98       	cbi	0x05, 2	; 5
     ac6:	6f 71       	andi	r22, 0x1F	; 31
     ac8:	86 2b       	or	r24, r22
     aca:	8e bd       	out	0x2e, r24	; 46
     acc:	0d b4       	in	r0, 0x2d	; 45
     ace:	07 fe       	sbrs	r0, 7
     ad0:	fd cf       	rjmp	.-6      	; 0xacc <enc28j60WriteOp+0x8>
     ad2:	4e bd       	out	0x2e, r20	; 46
     ad4:	0d b4       	in	r0, 0x2d	; 45
     ad6:	07 fe       	sbrs	r0, 7
     ad8:	fd cf       	rjmp	.-6      	; 0xad4 <enc28j60WriteOp+0x10>
     ada:	2a 9a       	sbi	0x05, 2	; 5
     adc:	08 95       	ret

00000ade <enc28j60ReadBuffer>:
     ade:	fb 01       	movw	r30, r22
     ae0:	2a 98       	cbi	0x05, 2	; 5
     ae2:	2a e3       	ldi	r18, 0x3A	; 58
     ae4:	2e bd       	out	0x2e, r18	; 46
     ae6:	0d b4       	in	r0, 0x2d	; 45
     ae8:	07 fe       	sbrs	r0, 7
     aea:	fd cf       	rjmp	.-6      	; 0xae6 <enc28j60ReadBuffer+0x8>
     aec:	00 97       	sbiw	r24, 0x00	; 0
     aee:	69 f0       	breq	.+26     	; 0xb0a <enc28j60ReadBuffer+0x2c>
     af0:	df 01       	movw	r26, r30
     af2:	a8 0f       	add	r26, r24
     af4:	b9 1f       	adc	r27, r25
     af6:	1e bc       	out	0x2e, r1	; 46
     af8:	0d b4       	in	r0, 0x2d	; 45
     afa:	07 fe       	sbrs	r0, 7
     afc:	fd cf       	rjmp	.-6      	; 0xaf8 <enc28j60ReadBuffer+0x1a>
     afe:	9e b5       	in	r25, 0x2e	; 46
     b00:	91 93       	st	Z+, r25
     b02:	ea 17       	cp	r30, r26
     b04:	fb 07       	cpc	r31, r27
     b06:	b9 f7       	brne	.-18     	; 0xaf6 <enc28j60ReadBuffer+0x18>
     b08:	01 c0       	rjmp	.+2      	; 0xb0c <enc28j60ReadBuffer+0x2e>
     b0a:	df 01       	movw	r26, r30
     b0c:	1c 92       	st	X, r1
     b0e:	2a 9a       	sbi	0x05, 2	; 5
     b10:	08 95       	ret

00000b12 <enc28j60WriteBuffer>:
     b12:	fb 01       	movw	r30, r22
     b14:	2a 98       	cbi	0x05, 2	; 5
     b16:	2a e7       	ldi	r18, 0x7A	; 122
     b18:	2e bd       	out	0x2e, r18	; 46
     b1a:	0d b4       	in	r0, 0x2d	; 45
     b1c:	07 fe       	sbrs	r0, 7
     b1e:	fd cf       	rjmp	.-6      	; 0xb1a <enc28j60WriteBuffer+0x8>
     b20:	09 c0       	rjmp	.+18     	; 0xb34 <enc28j60WriteBuffer+0x22>
     b22:	9f 01       	movw	r18, r30
     b24:	28 0f       	add	r18, r24
     b26:	39 1f       	adc	r19, r25
     b28:	91 91       	ld	r25, Z+
     b2a:	9e bd       	out	0x2e, r25	; 46
     b2c:	0d b4       	in	r0, 0x2d	; 45
     b2e:	07 fe       	sbrs	r0, 7
     b30:	fd cf       	rjmp	.-6      	; 0xb2c <enc28j60WriteBuffer+0x1a>
     b32:	03 c0       	rjmp	.+6      	; 0xb3a <enc28j60WriteBuffer+0x28>
     b34:	00 97       	sbiw	r24, 0x00	; 0
     b36:	a9 f7       	brne	.-22     	; 0xb22 <enc28j60WriteBuffer+0x10>
     b38:	03 c0       	rjmp	.+6      	; 0xb40 <enc28j60WriteBuffer+0x2e>
     b3a:	2e 17       	cp	r18, r30
     b3c:	3f 07       	cpc	r19, r31
     b3e:	a1 f7       	brne	.-24     	; 0xb28 <enc28j60WriteBuffer+0x16>
     b40:	2a 9a       	sbi	0x05, 2	; 5
     b42:	08 95       	ret

00000b44 <enc28j60SetBank>:
     b44:	1f 93       	push	r17
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	18 2f       	mov	r17, r24
     b4c:	10 76       	andi	r17, 0x60	; 96
     b4e:	c1 2f       	mov	r28, r17
     b50:	d0 e0       	ldi	r29, 0x00	; 0
     b52:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <Enc28j60Bank>
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	c8 17       	cp	r28, r24
     b5a:	d9 07       	cpc	r29, r25
     b5c:	b1 f0       	breq	.+44     	; 0xb8a <enc28j60SetBank+0x46>
     b5e:	43 e0       	ldi	r20, 0x03	; 3
     b60:	6f e1       	ldi	r22, 0x1F	; 31
     b62:	80 ea       	ldi	r24, 0xA0	; 160
     b64:	0e 94 62 05 	call	0xac4	; 0xac4 <enc28j60WriteOp>
     b68:	ae 01       	movw	r20, r28
     b6a:	55 95       	asr	r21
     b6c:	47 95       	ror	r20
     b6e:	55 95       	asr	r21
     b70:	47 95       	ror	r20
     b72:	55 95       	asr	r21
     b74:	47 95       	ror	r20
     b76:	55 95       	asr	r21
     b78:	47 95       	ror	r20
     b7a:	55 95       	asr	r21
     b7c:	47 95       	ror	r20
     b7e:	6f e1       	ldi	r22, 0x1F	; 31
     b80:	80 e8       	ldi	r24, 0x80	; 128
     b82:	0e 94 62 05 	call	0xac4	; 0xac4 <enc28j60WriteOp>
     b86:	10 93 c3 02 	sts	0x02C3, r17	; 0x8002c3 <Enc28j60Bank>
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	1f 91       	pop	r17
     b90:	08 95       	ret

00000b92 <enc28j60Read>:
     b92:	cf 93       	push	r28
     b94:	c8 2f       	mov	r28, r24
     b96:	0e 94 a2 05 	call	0xb44	; 0xb44 <enc28j60SetBank>
     b9a:	6c 2f       	mov	r22, r28
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	0e 94 4d 05 	call	0xa9a	; 0xa9a <enc28j60ReadOp>
     ba2:	cf 91       	pop	r28
     ba4:	08 95       	ret

00000ba6 <enc28j60Write>:
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
     baa:	c8 2f       	mov	r28, r24
     bac:	d6 2f       	mov	r29, r22
     bae:	0e 94 a2 05 	call	0xb44	; 0xb44 <enc28j60SetBank>
     bb2:	4d 2f       	mov	r20, r29
     bb4:	6c 2f       	mov	r22, r28
     bb6:	80 e4       	ldi	r24, 0x40	; 64
     bb8:	0e 94 62 05 	call	0xac4	; 0xac4 <enc28j60WriteOp>
     bbc:	df 91       	pop	r29
     bbe:	cf 91       	pop	r28
     bc0:	08 95       	ret

00000bc2 <enc28j60PhyRead>:
     bc2:	cf 93       	push	r28
     bc4:	68 2f       	mov	r22, r24
     bc6:	84 ed       	ldi	r24, 0xD4	; 212
     bc8:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     bcc:	61 e0       	ldi	r22, 0x01	; 1
     bce:	82 ed       	ldi	r24, 0xD2	; 210
     bd0:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     bd4:	8a ee       	ldi	r24, 0xEA	; 234
     bd6:	0e 94 c9 05 	call	0xb92	; 0xb92 <enc28j60Read>
     bda:	80 fd       	sbrc	r24, 0
     bdc:	fb cf       	rjmp	.-10     	; 0xbd4 <enc28j60PhyRead+0x12>
     bde:	60 e0       	ldi	r22, 0x00	; 0
     be0:	82 ed       	ldi	r24, 0xD2	; 210
     be2:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     be6:	89 ed       	ldi	r24, 0xD9	; 217
     be8:	0e 94 c9 05 	call	0xb92	; 0xb92 <enc28j60Read>
     bec:	c8 2f       	mov	r28, r24
     bee:	88 ed       	ldi	r24, 0xD8	; 216
     bf0:	0e 94 c9 05 	call	0xb92	; 0xb92 <enc28j60Read>
     bf4:	2c 2f       	mov	r18, r28
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	32 2f       	mov	r19, r18
     bfa:	22 27       	eor	r18, r18
     bfc:	a9 01       	movw	r20, r18
     bfe:	48 2b       	or	r20, r24
     c00:	ca 01       	movw	r24, r20
     c02:	cf 91       	pop	r28
     c04:	08 95       	ret

00000c06 <enc28j60PhyWrite>:
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
     c0a:	d6 2f       	mov	r29, r22
     c0c:	c7 2f       	mov	r28, r23
     c0e:	68 2f       	mov	r22, r24
     c10:	84 ed       	ldi	r24, 0xD4	; 212
     c12:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     c16:	6d 2f       	mov	r22, r29
     c18:	86 ed       	ldi	r24, 0xD6	; 214
     c1a:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     c1e:	6c 2f       	mov	r22, r28
     c20:	87 ed       	ldi	r24, 0xD7	; 215
     c22:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     c26:	c8 e2       	ldi	r28, 0x28	; 40
     c28:	03 c0       	rjmp	.+6      	; 0xc30 <enc28j60PhyWrite+0x2a>
     c2a:	8c 2f       	mov	r24, r28
     c2c:	8a 95       	dec	r24
     c2e:	f1 f7       	brne	.-4      	; 0xc2c <enc28j60PhyWrite+0x26>
     c30:	8a ee       	ldi	r24, 0xEA	; 234
     c32:	0e 94 c9 05 	call	0xb92	; 0xb92 <enc28j60Read>
     c36:	80 fd       	sbrc	r24, 0
     c38:	f8 cf       	rjmp	.-16     	; 0xc2a <enc28j60PhyWrite+0x24>
     c3a:	df 91       	pop	r29
     c3c:	cf 91       	pop	r28
     c3e:	08 95       	ret

00000c40 <enc28j60clkout>:
     c40:	68 2f       	mov	r22, r24
     c42:	67 70       	andi	r22, 0x07	; 7
     c44:	85 e7       	ldi	r24, 0x75	; 117
     c46:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     c4a:	08 95       	ret

00000c4c <enc28j60Init>:
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	ec 01       	movw	r28, r24
     c52:	22 9a       	sbi	0x04, 2	; 4
     c54:	2a 9a       	sbi	0x05, 2	; 5
     c56:	84 b1       	in	r24, 0x04	; 4
     c58:	88 62       	ori	r24, 0x28	; 40
     c5a:	84 b9       	out	0x04, r24	; 4
     c5c:	24 98       	cbi	0x04, 4	; 4
     c5e:	2b 98       	cbi	0x05, 3	; 5
     c60:	2d 98       	cbi	0x05, 5	; 5
     c62:	80 e5       	ldi	r24, 0x50	; 80
     c64:	8c bd       	out	0x2c, r24	; 44
     c66:	8d b5       	in	r24, 0x2d	; 45
     c68:	81 60       	ori	r24, 0x01	; 1
     c6a:	8d bd       	out	0x2d, r24	; 45
     c6c:	4f ef       	ldi	r20, 0xFF	; 255
     c6e:	60 e0       	ldi	r22, 0x00	; 0
     c70:	8f ef       	ldi	r24, 0xFF	; 255
     c72:	0e 94 62 05 	call	0xac4	; 0xac4 <enc28j60WriteOp>
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	01 97       	sbiw	r24, 0x01	; 1
     c7c:	f1 f7       	brne	.-4      	; 0xc7a <enc28j60Init+0x2e>
     c7e:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <gNextPacketPtr+0x1>
     c82:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <gNextPacketPtr>
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	88 e0       	ldi	r24, 0x08	; 8
     c8a:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     c8e:	60 e0       	ldi	r22, 0x00	; 0
     c90:	89 e0       	ldi	r24, 0x09	; 9
     c92:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	8c e0       	ldi	r24, 0x0C	; 12
     c9a:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     c9e:	60 e0       	ldi	r22, 0x00	; 0
     ca0:	8d e0       	ldi	r24, 0x0D	; 13
     ca2:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     ca6:	6f ef       	ldi	r22, 0xFF	; 255
     ca8:	8a e0       	ldi	r24, 0x0A	; 10
     caa:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     cae:	69 e1       	ldi	r22, 0x19	; 25
     cb0:	8b e0       	ldi	r24, 0x0B	; 11
     cb2:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     cb6:	60 e0       	ldi	r22, 0x00	; 0
     cb8:	84 e0       	ldi	r24, 0x04	; 4
     cba:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     cbe:	6a e1       	ldi	r22, 0x1A	; 26
     cc0:	85 e0       	ldi	r24, 0x05	; 5
     cc2:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	86 e0       	ldi	r24, 0x06	; 6
     cca:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     cce:	6f e1       	ldi	r22, 0x1F	; 31
     cd0:	87 e0       	ldi	r24, 0x07	; 7
     cd2:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     cd6:	60 eb       	ldi	r22, 0xB0	; 176
     cd8:	88 e3       	ldi	r24, 0x38	; 56
     cda:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     cde:	6f e3       	ldi	r22, 0x3F	; 63
     ce0:	88 e2       	ldi	r24, 0x28	; 40
     ce2:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     ce6:	60 e3       	ldi	r22, 0x30	; 48
     ce8:	89 e2       	ldi	r24, 0x29	; 41
     cea:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     cee:	69 ef       	ldi	r22, 0xF9	; 249
     cf0:	80 e3       	ldi	r24, 0x30	; 48
     cf2:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     cf6:	67 ef       	ldi	r22, 0xF7	; 247
     cf8:	81 e3       	ldi	r24, 0x31	; 49
     cfa:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     cfe:	6d e0       	ldi	r22, 0x0D	; 13
     d00:	80 ec       	ldi	r24, 0xC0	; 192
     d02:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     d06:	60 e0       	ldi	r22, 0x00	; 0
     d08:	81 ec       	ldi	r24, 0xC1	; 193
     d0a:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     d0e:	42 e3       	ldi	r20, 0x32	; 50
     d10:	62 ec       	ldi	r22, 0xC2	; 194
     d12:	80 e8       	ldi	r24, 0x80	; 128
     d14:	0e 94 62 05 	call	0xac4	; 0xac4 <enc28j60WriteOp>
     d18:	62 e1       	ldi	r22, 0x12	; 18
     d1a:	86 ec       	ldi	r24, 0xC6	; 198
     d1c:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     d20:	6c e0       	ldi	r22, 0x0C	; 12
     d22:	87 ec       	ldi	r24, 0xC7	; 199
     d24:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     d28:	62 e1       	ldi	r22, 0x12	; 18
     d2a:	84 ec       	ldi	r24, 0xC4	; 196
     d2c:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     d30:	6c ed       	ldi	r22, 0xDC	; 220
     d32:	8a ec       	ldi	r24, 0xCA	; 202
     d34:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     d38:	65 e0       	ldi	r22, 0x05	; 5
     d3a:	8b ec       	ldi	r24, 0xCB	; 203
     d3c:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     d40:	68 81       	ld	r22, Y
     d42:	84 ee       	ldi	r24, 0xE4	; 228
     d44:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     d48:	69 81       	ldd	r22, Y+1	; 0x01
     d4a:	85 ee       	ldi	r24, 0xE5	; 229
     d4c:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     d50:	6a 81       	ldd	r22, Y+2	; 0x02
     d52:	82 ee       	ldi	r24, 0xE2	; 226
     d54:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     d58:	6b 81       	ldd	r22, Y+3	; 0x03
     d5a:	83 ee       	ldi	r24, 0xE3	; 227
     d5c:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     d60:	6c 81       	ldd	r22, Y+4	; 0x04
     d62:	80 ee       	ldi	r24, 0xE0	; 224
     d64:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     d68:	6d 81       	ldd	r22, Y+5	; 0x05
     d6a:	81 ee       	ldi	r24, 0xE1	; 225
     d6c:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     d70:	60 e0       	ldi	r22, 0x00	; 0
     d72:	71 e0       	ldi	r23, 0x01	; 1
     d74:	80 e1       	ldi	r24, 0x10	; 16
     d76:	0e 94 03 06 	call	0xc06	; 0xc06 <enc28j60PhyWrite>
     d7a:	8f e1       	ldi	r24, 0x1F	; 31
     d7c:	0e 94 a2 05 	call	0xb44	; 0xb44 <enc28j60SetBank>
     d80:	40 ec       	ldi	r20, 0xC0	; 192
     d82:	6b e1       	ldi	r22, 0x1B	; 27
     d84:	80 e8       	ldi	r24, 0x80	; 128
     d86:	0e 94 62 05 	call	0xac4	; 0xac4 <enc28j60WriteOp>
     d8a:	44 e0       	ldi	r20, 0x04	; 4
     d8c:	6f e1       	ldi	r22, 0x1F	; 31
     d8e:	80 e8       	ldi	r24, 0x80	; 128
     d90:	0e 94 62 05 	call	0xac4	; 0xac4 <enc28j60WriteOp>
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28
     d98:	08 95       	ret

00000d9a <enc28j60linkup>:
     d9a:	81 e1       	ldi	r24, 0x11	; 17
     d9c:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <enc28j60PhyRead>
     da0:	92 fb       	bst	r25, 2
     da2:	88 27       	eor	r24, r24
     da4:	80 f9       	bld	r24, 0
     da6:	08 95       	ret

00000da8 <enc28j60PacketSend>:
     da8:	0f 93       	push	r16
     daa:	1f 93       	push	r17
     dac:	cf 93       	push	r28
     dae:	df 93       	push	r29
     db0:	ec 01       	movw	r28, r24
     db2:	8b 01       	movw	r16, r22
     db4:	6f e1       	ldi	r22, 0x1F	; 31
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	0e 94 4d 05 	call	0xa9a	; 0xa9a <enc28j60ReadOp>
     dbc:	83 fd       	sbrc	r24, 3
     dbe:	fa cf       	rjmp	.-12     	; 0xdb4 <enc28j60PacketSend+0xc>
     dc0:	8c e1       	ldi	r24, 0x1C	; 28
     dc2:	0e 94 c9 05 	call	0xb92	; 0xb92 <enc28j60Read>
     dc6:	81 ff       	sbrs	r24, 1
     dc8:	13 c0       	rjmp	.+38     	; 0xdf0 <enc28j60PacketSend+0x48>
     dca:	40 e8       	ldi	r20, 0x80	; 128
     dcc:	6f e1       	ldi	r22, 0x1F	; 31
     dce:	80 e8       	ldi	r24, 0x80	; 128
     dd0:	0e 94 62 05 	call	0xac4	; 0xac4 <enc28j60WriteOp>
     dd4:	40 e8       	ldi	r20, 0x80	; 128
     dd6:	6f e1       	ldi	r22, 0x1F	; 31
     dd8:	80 ea       	ldi	r24, 0xA0	; 160
     dda:	0e 94 62 05 	call	0xac4	; 0xac4 <enc28j60WriteOp>
     dde:	42 e0       	ldi	r20, 0x02	; 2
     de0:	6c e1       	ldi	r22, 0x1C	; 28
     de2:	80 ea       	ldi	r24, 0xA0	; 160
     de4:	0e 94 62 05 	call	0xac4	; 0xac4 <enc28j60WriteOp>
     de8:	80 e3       	ldi	r24, 0x30	; 48
     dea:	95 e7       	ldi	r25, 0x75	; 117
     dec:	01 97       	sbiw	r24, 0x01	; 1
     dee:	f1 f7       	brne	.-4      	; 0xdec <enc28j60PacketSend+0x44>
     df0:	60 e0       	ldi	r22, 0x00	; 0
     df2:	82 e0       	ldi	r24, 0x02	; 2
     df4:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     df8:	6a e1       	ldi	r22, 0x1A	; 26
     dfa:	83 e0       	ldi	r24, 0x03	; 3
     dfc:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     e00:	6c 2f       	mov	r22, r28
     e02:	86 e0       	ldi	r24, 0x06	; 6
     e04:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     e08:	ce 01       	movw	r24, r28
     e0a:	96 5e       	subi	r25, 0xE6	; 230
     e0c:	69 2f       	mov	r22, r25
     e0e:	87 e0       	ldi	r24, 0x07	; 7
     e10:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     e14:	40 e0       	ldi	r20, 0x00	; 0
     e16:	60 e0       	ldi	r22, 0x00	; 0
     e18:	8a e7       	ldi	r24, 0x7A	; 122
     e1a:	0e 94 62 05 	call	0xac4	; 0xac4 <enc28j60WriteOp>
     e1e:	b8 01       	movw	r22, r16
     e20:	ce 01       	movw	r24, r28
     e22:	0e 94 89 05 	call	0xb12	; 0xb12 <enc28j60WriteBuffer>
     e26:	48 e0       	ldi	r20, 0x08	; 8
     e28:	6f e1       	ldi	r22, 0x1F	; 31
     e2a:	80 e8       	ldi	r24, 0x80	; 128
     e2c:	0e 94 62 05 	call	0xac4	; 0xac4 <enc28j60WriteOp>
     e30:	df 91       	pop	r29
     e32:	cf 91       	pop	r28
     e34:	1f 91       	pop	r17
     e36:	0f 91       	pop	r16
     e38:	08 95       	ret

00000e3a <enc28j60PacketReceive>:
// The packet will by headed by an ethernet header.
//      maxlen  The maximum acceptable length of a retrieved packet.
//      packet  Pointer where packet data should be stored.
// Returns: Packet length in bytes if a packet was retrieved, zero otherwise.
uint16_t enc28j60PacketReceive(uint16_t maxlen, uint8_t* packet)
{
     e3a:	af 92       	push	r10
     e3c:	bf 92       	push	r11
     e3e:	cf 92       	push	r12
     e40:	df 92       	push	r13
     e42:	ef 92       	push	r14
     e44:	ff 92       	push	r15
     e46:	0f 93       	push	r16
     e48:	1f 93       	push	r17
     e4a:	cf 93       	push	r28
     e4c:	df 93       	push	r29
     e4e:	6c 01       	movw	r12, r24
     e50:	7b 01       	movw	r14, r22
	uint16_t rxstat;
	uint16_t len;
	// check if a packet has been received and buffered
	//if( !(enc28j60Read(EIR) & EIR_PKTIF) )
        // The above does not work. See Rev. B4 Silicon Errata point 6.
	if( enc28j60Read(EPKTCNT) ==0 ){
     e52:	89 e3       	ldi	r24, 0x39	; 57
     e54:	0e 94 c9 05 	call	0xb92	; 0xb92 <enc28j60Read>
     e58:	88 23       	and	r24, r24
     e5a:	09 f4       	brne	.+2      	; 0xe5e <enc28j60PacketReceive+0x24>
     e5c:	64 c0       	rjmp	.+200    	; 0xf26 <enc28j60PacketReceive+0xec>
		return(0);
        }

	// Set the read pointer to the start of the received packet
	enc28j60Write(ERDPTL, (gNextPacketPtr &0xFF));
     e5e:	60 91 c1 02 	lds	r22, 0x02C1	; 0x8002c1 <gNextPacketPtr>
     e62:	c0 91 c2 02 	lds	r28, 0x02C2	; 0x8002c2 <gNextPacketPtr+0x1>
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
	enc28j60Write(ERDPTH, (gNextPacketPtr)>>8);
     e6c:	6c 2f       	mov	r22, r28
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
	// read the next packet pointer
	gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     e74:	60 e0       	ldi	r22, 0x00	; 0
     e76:	8a e3       	ldi	r24, 0x3A	; 58
     e78:	0e 94 4d 05 	call	0xa9a	; 0xa9a <enc28j60ReadOp>
     e7c:	c8 2f       	mov	r28, r24
	gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	8a e3       	ldi	r24, 0x3A	; 58
     e82:	0e 94 4d 05 	call	0xa9a	; 0xa9a <enc28j60ReadOp>
     e86:	d0 e0       	ldi	r29, 0x00	; 0
     e88:	d8 2b       	or	r29, r24
     e8a:	d0 93 c2 02 	sts	0x02C2, r29	; 0x8002c2 <gNextPacketPtr+0x1>
     e8e:	c0 93 c1 02 	sts	0x02C1, r28	; 0x8002c1 <gNextPacketPtr>
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     e92:	60 e0       	ldi	r22, 0x00	; 0
     e94:	8a e3       	ldi	r24, 0x3A	; 58
     e96:	0e 94 4d 05 	call	0xa9a	; 0xa9a <enc28j60ReadOp>
     e9a:	b8 2e       	mov	r11, r24
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     e9c:	60 e0       	ldi	r22, 0x00	; 0
     e9e:	8a e3       	ldi	r24, 0x3A	; 58
     ea0:	0e 94 4d 05 	call	0xa9a	; 0xa9a <enc28j60ReadOp>
     ea4:	a8 2e       	mov	r10, r24
        len-=4; //remove the CRC count
	// read the receive status (see datasheet page 43)
	rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     ea6:	60 e0       	ldi	r22, 0x00	; 0
     ea8:	8a e3       	ldi	r24, 0x3A	; 58
     eaa:	0e 94 4d 05 	call	0xa9a	; 0xa9a <enc28j60ReadOp>
     eae:	08 2f       	mov	r16, r24
	rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
     eb0:	60 e0       	ldi	r22, 0x00	; 0
     eb2:	8a e3       	ldi	r24, 0x3A	; 58
     eb4:	0e 94 4d 05 	call	0xa9a	; 0xa9a <enc28j60ReadOp>
                len=maxlen-1;
        }
        // check CRC and symbol errors (see datasheet page 44, table 7-3):
        // The ERXFCON.CRCEN is set by default. Normally we should not
        // need to check this.
        if ((rxstat & 0x80)==0){
     eb8:	07 ff       	sbrs	r16, 7
     eba:	11 c0       	rjmp	.+34     	; 0xede <enc28j60PacketReceive+0xa4>
        len-=4; //remove the CRC count
	// read the receive status (see datasheet page 43)
	rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
	// limit retrieve length
        if (len>maxlen-1){
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	c8 1a       	sub	r12, r24
     ec0:	d1 08       	sbc	r13, r1
	// read the next packet pointer
	gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     ec2:	0b 2d       	mov	r16, r11
     ec4:	10 e0       	ldi	r17, 0x00	; 0
     ec6:	1a 29       	or	r17, r10
     ec8:	04 50       	subi	r16, 0x04	; 4
     eca:	11 09       	sbc	r17, r1
     ecc:	c0 16       	cp	r12, r16
     ece:	d1 06       	cpc	r13, r17
     ed0:	08 f4       	brcc	.+2      	; 0xed4 <enc28j60PacketReceive+0x9a>
     ed2:	86 01       	movw	r16, r12
        if ((rxstat & 0x80)==0){
                // invalid
                len=0;
        }else{
                // copy the packet from the receive buffer
                enc28j60ReadBuffer(len, packet);
     ed4:	b7 01       	movw	r22, r14
     ed6:	c8 01       	movw	r24, r16
     ed8:	0e 94 6f 05 	call	0xade	; 0xade <enc28j60ReadBuffer>
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <enc28j60PacketReceive+0xa8>
        // check CRC and symbol errors (see datasheet page 44, table 7-3):
        // The ERXFCON.CRCEN is set by default. Normally we should not
        // need to check this.
        if ((rxstat & 0x80)==0){
                // invalid
                len=0;
     ede:	00 e0       	ldi	r16, 0x00	; 0
     ee0:	10 e0       	ldi	r17, 0x00	; 0
        //
        // Move the RX read pointer to the start of the next received packet
        // This frees the memory we just read out. 
        // However, compensate for the errata point 13, rev B4: never write an even address!
        // gNextPacketPtr is always an even address if RXSTOP_INIT is odd.
        if (gNextPacketPtr -1 > RXSTOP_INIT){ // RXSTART_INIT is zero, no test for gNextPacketPtr less than RXSTART_INIT.
     ee2:	7e 01       	movw	r14, r28
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	e8 1a       	sub	r14, r24
     ee8:	f1 08       	sbc	r15, r1
     eea:	e1 14       	cp	r14, r1
     eec:	8a e1       	ldi	r24, 0x1A	; 26
     eee:	f8 06       	cpc	r15, r24
     ef0:	4c f0       	brlt	.+18     	; 0xf04 <enc28j60PacketReceive+0xca>
                enc28j60Write(ERXRDPTL, (RXSTOP_INIT)&0xFF);
     ef2:	6f ef       	ldi	r22, 0xFF	; 255
     ef4:	8c e0       	ldi	r24, 0x0C	; 12
     ef6:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
                enc28j60Write(ERXRDPTH, (RXSTOP_INIT)>>8);
     efa:	69 e1       	ldi	r22, 0x19	; 25
     efc:	8d e0       	ldi	r24, 0x0D	; 13
     efe:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
     f02:	09 c0       	rjmp	.+18     	; 0xf16 <enc28j60PacketReceive+0xdc>
        } else {
                enc28j60Write(ERXRDPTL, (gNextPacketPtr-1)&0xFF);
     f04:	6c 2f       	mov	r22, r28
     f06:	61 50       	subi	r22, 0x01	; 1
     f08:	8c e0       	ldi	r24, 0x0C	; 12
     f0a:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
                enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
     f0e:	6f 2d       	mov	r22, r15
     f10:	8d e0       	ldi	r24, 0x0D	; 13
     f12:	0e 94 d3 05 	call	0xba6	; 0xba6 <enc28j60Write>
        }
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
     f16:	40 e4       	ldi	r20, 0x40	; 64
     f18:	6e e1       	ldi	r22, 0x1E	; 30
     f1a:	80 e8       	ldi	r24, 0x80	; 128
     f1c:	0e 94 62 05 	call	0xac4	; 0xac4 <enc28j60WriteOp>
	return(len);
     f20:	80 2f       	mov	r24, r16
     f22:	91 2f       	mov	r25, r17
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <enc28j60PacketReceive+0xf0>
	uint16_t len;
	// check if a packet has been received and buffered
	//if( !(enc28j60Read(EIR) & EIR_PKTIF) )
        // The above does not work. See Rev. B4 Silicon Errata point 6.
	if( enc28j60Read(EPKTCNT) ==0 ){
		return(0);
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	90 e0       	ldi	r25, 0x00	; 0
                enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
        }
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
	return(len);
}
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	1f 91       	pop	r17
     f30:	0f 91       	pop	r16
     f32:	ff 90       	pop	r15
     f34:	ef 90       	pop	r14
     f36:	df 90       	pop	r13
     f38:	cf 90       	pop	r12
     f3a:	bf 90       	pop	r11
     f3c:	af 90       	pop	r10
     f3e:	08 95       	ret

00000f40 <www_client_internal_result_callback>:
}
#endif // WWW_client

void register_ping_rec_callback(void (*callback)(uint8_t *srcip))
{
        icmp_callback=callback;
     f40:	cf 92       	push	r12
     f42:	df 92       	push	r13
     f44:	ef 92       	push	r14
     f46:	ff 92       	push	r15
     f48:	0f 93       	push	r16
     f4a:	1f 93       	push	r17
     f4c:	cf 93       	push	r28
     f4e:	df 93       	push	r29
     f50:	ea 01       	movw	r28, r20
     f52:	89 01       	movw	r16, r18
     f54:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <www_fd>
     f58:	98 17       	cp	r25, r24
     f5a:	61 f0       	breq	.+24     	; 0xf74 <www_client_internal_result_callback+0x34>
     f5c:	e0 91 d9 02 	lds	r30, 0x02D9	; 0x8002d9 <client_browser_callback>
     f60:	f0 91 da 02 	lds	r31, 0x02DA	; 0x8002da <client_browser_callback+0x1>
     f64:	40 e0       	ldi	r20, 0x00	; 0
     f66:	50 e0       	ldi	r21, 0x00	; 0
     f68:	60 e0       	ldi	r22, 0x00	; 0
     f6a:	70 e0       	ldi	r23, 0x00	; 0
     f6c:	84 ef       	ldi	r24, 0xF4	; 244
     f6e:	91 e0       	ldi	r25, 0x01	; 1
     f70:	09 95       	icall
     f72:	5e c0       	rjmp	.+188    	; 0x1030 <www_client_internal_result_callback+0xf0>
     f74:	61 11       	cpse	r22, r1
     f76:	5c c0       	rjmp	.+184    	; 0x1030 <www_client_internal_result_callback+0xf0>
     f78:	2d 30       	cpi	r18, 0x0D	; 13
     f7a:	31 05       	cpc	r19, r1
     f7c:	08 f4       	brcc	.+2      	; 0xf80 <www_client_internal_result_callback+0x40>
     f7e:	58 c0       	rjmp	.+176    	; 0x1030 <www_client_internal_result_callback+0xf0>
     f80:	e0 90 d9 02 	lds	r14, 0x02D9	; 0x8002d9 <client_browser_callback>
     f84:	f0 90 da 02 	lds	r15, 0x02DA	; 0x8002da <client_browser_callback+0x1>
     f88:	e1 14       	cp	r14, r1
     f8a:	f1 04       	cpc	r15, r1
     f8c:	09 f4       	brne	.+2      	; 0xf90 <www_client_internal_result_callback+0x50>
     f8e:	50 c0       	rjmp	.+160    	; 0x1030 <www_client_internal_result_callback+0xf0>
     f90:	c0 90 cd 02 	lds	r12, 0x02CD	; 0x8002cd <bufptr>
     f94:	d0 90 ce 02 	lds	r13, 0x02CE	; 0x8002ce <bufptr+0x1>
     f98:	f6 01       	movw	r30, r12
     f9a:	e4 0f       	add	r30, r20
     f9c:	f5 1f       	adc	r31, r21
     f9e:	80 85       	ldd	r24, Z+8	; 0x08
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	0e 94 ab 32 	call	0x6556	; 0x6556 <isblank>
     fa6:	89 2b       	or	r24, r25
     fa8:	b9 f1       	breq	.+110    	; 0x1018 <www_client_internal_result_callback+0xd8>
     faa:	f6 01       	movw	r30, r12
     fac:	ec 0f       	add	r30, r28
     fae:	fd 1f       	adc	r31, r29
     fb0:	21 85       	ldd	r18, Z+9	; 0x09
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	20 53       	subi	r18, 0x30	; 48
     fb6:	31 09       	sbc	r19, r1
     fb8:	2a 30       	cpi	r18, 0x0A	; 10
     fba:	31 05       	cpc	r19, r1
     fbc:	80 f5       	brcc	.+96     	; 0x101e <www_client_internal_result_callback+0xde>
     fbe:	f6 01       	movw	r30, r12
     fc0:	ec 0f       	add	r30, r28
     fc2:	fd 1f       	adc	r31, r29
     fc4:	83 85       	ldd	r24, Z+11	; 0x0b
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	ac 01       	movw	r20, r24
     fca:	40 53       	subi	r20, 0x30	; 48
     fcc:	51 09       	sbc	r21, r1
     fce:	4a 30       	cpi	r20, 0x0A	; 10
     fd0:	51 05       	cpc	r21, r1
     fd2:	40 f5       	brcc	.+80     	; 0x1024 <www_client_internal_result_callback+0xe4>
     fd4:	c9 01       	movw	r24, r18
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	22 0f       	add	r18, r18
     fdc:	33 1f       	adc	r19, r19
     fde:	22 0f       	add	r18, r18
     fe0:	33 1f       	adc	r19, r19
     fe2:	22 0f       	add	r18, r18
     fe4:	33 1f       	adc	r19, r19
     fe6:	28 0f       	add	r18, r24
     fe8:	39 1f       	adc	r19, r25
     fea:	f6 01       	movw	r30, r12
     fec:	ec 0f       	add	r30, r28
     fee:	fd 1f       	adc	r31, r29
     ff0:	82 85       	ldd	r24, Z+10	; 0x0a
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	c0 97       	sbiw	r24, 0x30	; 48
     ff6:	28 0f       	add	r18, r24
     ff8:	39 1f       	adc	r19, r25
     ffa:	c9 01       	movw	r24, r18
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	22 0f       	add	r18, r18
    1002:	33 1f       	adc	r19, r19
    1004:	22 0f       	add	r18, r18
    1006:	33 1f       	adc	r19, r19
    1008:	22 0f       	add	r18, r18
    100a:	33 1f       	adc	r19, r19
    100c:	28 0f       	add	r18, r24
    100e:	39 1f       	adc	r19, r25
    1010:	ca 01       	movw	r24, r20
    1012:	82 0f       	add	r24, r18
    1014:	93 1f       	adc	r25, r19
    1016:	08 c0       	rjmp	.+16     	; 0x1028 <www_client_internal_result_callback+0xe8>
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	05 c0       	rjmp	.+10     	; 0x1028 <www_client_internal_result_callback+0xe8>
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <www_client_internal_result_callback+0xe8>
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	a8 01       	movw	r20, r16
    102a:	be 01       	movw	r22, r28
    102c:	f7 01       	movw	r30, r14
    102e:	09 95       	icall
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	df 91       	pop	r29
    1034:	cf 91       	pop	r28
    1036:	1f 91       	pop	r17
    1038:	0f 91       	pop	r16
    103a:	ff 90       	pop	r15
    103c:	ef 90       	pop	r14
    103e:	df 90       	pop	r13
    1040:	cf 90       	pop	r12
    1042:	08 95       	ret

00001044 <checksum>:
    1044:	cf 92       	push	r12
    1046:	df 92       	push	r13
    1048:	ef 92       	push	r14
    104a:	ff 92       	push	r15
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
    1050:	ec 01       	movw	r28, r24
    1052:	db 01       	movw	r26, r22
    1054:	41 30       	cpi	r20, 0x01	; 1
    1056:	61 f4       	brne	.+24     	; 0x1070 <checksum+0x2c>
    1058:	6b 01       	movw	r12, r22
    105a:	88 e0       	ldi	r24, 0x08	; 8
    105c:	c8 1a       	sub	r12, r24
    105e:	d1 08       	sbc	r13, r1
    1060:	e1 2c       	mov	r14, r1
    1062:	f1 2c       	mov	r15, r1
    1064:	81 e1       	ldi	r24, 0x11	; 17
    1066:	c8 0e       	add	r12, r24
    1068:	d1 1c       	adc	r13, r1
    106a:	e1 1c       	adc	r14, r1
    106c:	f1 1c       	adc	r15, r1
    106e:	11 c0       	rjmp	.+34     	; 0x1092 <checksum+0x4e>
    1070:	42 30       	cpi	r20, 0x02	; 2
    1072:	61 f4       	brne	.+24     	; 0x108c <checksum+0x48>
    1074:	6b 01       	movw	r12, r22
    1076:	88 e0       	ldi	r24, 0x08	; 8
    1078:	c8 1a       	sub	r12, r24
    107a:	d1 08       	sbc	r13, r1
    107c:	e1 2c       	mov	r14, r1
    107e:	f1 2c       	mov	r15, r1
    1080:	86 e0       	ldi	r24, 0x06	; 6
    1082:	c8 0e       	add	r12, r24
    1084:	d1 1c       	adc	r13, r1
    1086:	e1 1c       	adc	r14, r1
    1088:	f1 1c       	adc	r15, r1
    108a:	03 c0       	rjmp	.+6      	; 0x1092 <checksum+0x4e>
    108c:	c1 2c       	mov	r12, r1
    108e:	d1 2c       	mov	r13, r1
    1090:	76 01       	movw	r14, r12
    1092:	a2 30       	cpi	r26, 0x02	; 2
    1094:	b1 05       	cpc	r27, r1
    1096:	f0 f0       	brcs	.+60     	; 0x10d4 <checksum+0x90>
    1098:	9d 01       	movw	r18, r26
    109a:	fe 01       	movw	r30, r28
    109c:	40 81       	ld	r20, Z
    109e:	50 e0       	ldi	r21, 0x00	; 0
    10a0:	60 e0       	ldi	r22, 0x00	; 0
    10a2:	70 e0       	ldi	r23, 0x00	; 0
    10a4:	76 2f       	mov	r23, r22
    10a6:	65 2f       	mov	r22, r21
    10a8:	54 2f       	mov	r21, r20
    10aa:	44 27       	eor	r20, r20
    10ac:	81 81       	ldd	r24, Z+1	; 0x01
    10ae:	48 2b       	or	r20, r24
    10b0:	c4 0e       	add	r12, r20
    10b2:	d5 1e       	adc	r13, r21
    10b4:	e6 1e       	adc	r14, r22
    10b6:	f7 1e       	adc	r15, r23
    10b8:	32 96       	adiw	r30, 0x02	; 2
    10ba:	22 50       	subi	r18, 0x02	; 2
    10bc:	31 09       	sbc	r19, r1
    10be:	22 30       	cpi	r18, 0x02	; 2
    10c0:	31 05       	cpc	r19, r1
    10c2:	60 f7       	brcc	.-40     	; 0x109c <checksum+0x58>
    10c4:	cd 01       	movw	r24, r26
    10c6:	02 97       	sbiw	r24, 0x02	; 2
    10c8:	8e 7f       	andi	r24, 0xFE	; 254
    10ca:	02 96       	adiw	r24, 0x02	; 2
    10cc:	c8 0f       	add	r28, r24
    10ce:	d9 1f       	adc	r29, r25
    10d0:	a1 70       	andi	r26, 0x01	; 1
    10d2:	bb 27       	eor	r27, r27
    10d4:	ab 2b       	or	r26, r27
    10d6:	61 f0       	breq	.+24     	; 0x10f0 <checksum+0xac>
    10d8:	88 81       	ld	r24, Y
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	a0 e0       	ldi	r26, 0x00	; 0
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	ba 2f       	mov	r27, r26
    10e2:	a9 2f       	mov	r26, r25
    10e4:	98 2f       	mov	r25, r24
    10e6:	88 27       	eor	r24, r24
    10e8:	c8 0e       	add	r12, r24
    10ea:	d9 1e       	adc	r13, r25
    10ec:	ea 1e       	adc	r14, r26
    10ee:	fb 1e       	adc	r15, r27
    10f0:	a7 01       	movw	r20, r14
    10f2:	66 27       	eor	r22, r22
    10f4:	77 27       	eor	r23, r23
    10f6:	41 15       	cp	r20, r1
    10f8:	51 05       	cpc	r21, r1
    10fa:	61 05       	cpc	r22, r1
    10fc:	71 05       	cpc	r23, r1
    10fe:	71 f0       	breq	.+28     	; 0x111c <checksum+0xd8>
    1100:	ee 24       	eor	r14, r14
    1102:	ff 24       	eor	r15, r15
    1104:	c4 0e       	add	r12, r20
    1106:	d5 1e       	adc	r13, r21
    1108:	e6 1e       	adc	r14, r22
    110a:	f7 1e       	adc	r15, r23
    110c:	a7 01       	movw	r20, r14
    110e:	66 27       	eor	r22, r22
    1110:	77 27       	eor	r23, r23
    1112:	41 15       	cp	r20, r1
    1114:	51 05       	cpc	r21, r1
    1116:	61 05       	cpc	r22, r1
    1118:	71 05       	cpc	r23, r1
    111a:	91 f7       	brne	.-28     	; 0x1100 <checksum+0xbc>
    111c:	c6 01       	movw	r24, r12
    111e:	80 95       	com	r24
    1120:	90 95       	com	r25
    1122:	df 91       	pop	r29
    1124:	cf 91       	pop	r28
    1126:	ff 90       	pop	r15
    1128:	ef 90       	pop	r14
    112a:	df 90       	pop	r13
    112c:	cf 90       	pop	r12
    112e:	08 95       	ret

00001130 <init_mac>:
    1130:	00 97       	sbiw	r24, 0x00	; 0
    1132:	41 f0       	breq	.+16     	; 0x1144 <init_mac+0x14>
    1134:	26 e0       	ldi	r18, 0x06	; 6
    1136:	fc 01       	movw	r30, r24
    1138:	a5 ef       	ldi	r26, 0xF5	; 245
    113a:	b2 e0       	ldi	r27, 0x02	; 2
    113c:	01 90       	ld	r0, Z+
    113e:	0d 92       	st	X+, r0
    1140:	2a 95       	dec	r18
    1142:	e1 f7       	brne	.-8      	; 0x113c <init_mac+0xc>
    1144:	08 95       	ret

00001146 <route_via_gw>:
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
    114a:	fc 01       	movw	r30, r24
    114c:	30 81       	ld	r19, Z
    114e:	20 91 f1 02 	lds	r18, 0x02F1	; 0x8002f1 <ipaddr>
    1152:	23 27       	eor	r18, r19
    1154:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <ipnetmask>
    1158:	23 23       	and	r18, r19
    115a:	91 f4       	brne	.+36     	; 0x1180 <route_via_gw+0x3a>
    115c:	31 96       	adiw	r30, 0x01	; 1
    115e:	c2 ef       	ldi	r28, 0xF2	; 242
    1160:	d2 e0       	ldi	r29, 0x02	; 2
    1162:	a2 e0       	ldi	r26, 0x02	; 2
    1164:	b1 e0       	ldi	r27, 0x01	; 1
    1166:	ac 01       	movw	r20, r24
    1168:	4c 5f       	subi	r20, 0xFC	; 252
    116a:	5f 4f       	sbci	r21, 0xFF	; 255
    116c:	81 91       	ld	r24, Z+
    116e:	29 91       	ld	r18, Y+
    1170:	9d 91       	ld	r25, X+
    1172:	82 27       	eor	r24, r18
    1174:	89 23       	and	r24, r25
    1176:	31 f4       	brne	.+12     	; 0x1184 <route_via_gw+0x3e>
    1178:	e4 17       	cp	r30, r20
    117a:	f5 07       	cpc	r31, r21
    117c:	b9 f7       	brne	.-18     	; 0x116c <route_via_gw+0x26>
    117e:	03 c0       	rjmp	.+6      	; 0x1186 <route_via_gw+0x40>
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	01 c0       	rjmp	.+2      	; 0x1186 <route_via_gw+0x40>
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	df 91       	pop	r29
    1188:	cf 91       	pop	r28
    118a:	08 95       	ret

0000118c <check_ip_message_is_from>:
    118c:	fc 01       	movw	r30, r24
    118e:	32 8d       	ldd	r19, Z+26	; 0x1a
    1190:	fb 01       	movw	r30, r22
    1192:	20 81       	ld	r18, Z
    1194:	32 13       	cpse	r19, r18
    1196:	0d c0       	rjmp	.+26     	; 0x11b2 <check_ip_message_is_from+0x26>
    1198:	dc 01       	movw	r26, r24
    119a:	5b 96       	adiw	r26, 0x1b	; 27
    119c:	31 96       	adiw	r30, 0x01	; 1
    119e:	4e 96       	adiw	r24, 0x1e	; 30
    11a0:	3d 91       	ld	r19, X+
    11a2:	21 91       	ld	r18, Z+
    11a4:	32 13       	cpse	r19, r18
    11a6:	07 c0       	rjmp	.+14     	; 0x11b6 <check_ip_message_is_from+0x2a>
    11a8:	a8 17       	cp	r26, r24
    11aa:	b9 07       	cpc	r27, r25
    11ac:	c9 f7       	brne	.-14     	; 0x11a0 <check_ip_message_is_from+0x14>
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	08 95       	ret
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	08 95       	ret
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	08 95       	ret

000011ba <eth_type_is_arp_and_my_ip>:
    11ba:	69 32       	cpi	r22, 0x29	; 41
    11bc:	71 05       	cpc	r23, r1
    11be:	c8 f0       	brcs	.+50     	; 0x11f2 <eth_type_is_arp_and_my_ip+0x38>
    11c0:	fc 01       	movw	r30, r24
    11c2:	24 85       	ldd	r18, Z+12	; 0x0c
    11c4:	28 30       	cpi	r18, 0x08	; 8
    11c6:	b9 f4       	brne	.+46     	; 0x11f6 <eth_type_is_arp_and_my_ip+0x3c>
    11c8:	25 85       	ldd	r18, Z+13	; 0x0d
    11ca:	26 30       	cpi	r18, 0x06	; 6
    11cc:	b1 f4       	brne	.+44     	; 0x11fa <eth_type_is_arp_and_my_ip+0x40>
    11ce:	36 a1       	ldd	r19, Z+38	; 0x26
    11d0:	20 91 f1 02 	lds	r18, 0x02F1	; 0x8002f1 <ipaddr>
    11d4:	32 13       	cpse	r19, r18
    11d6:	13 c0       	rjmp	.+38     	; 0x11fe <eth_type_is_arp_and_my_ip+0x44>
    11d8:	b7 96       	adiw	r30, 0x27	; 39
    11da:	a2 ef       	ldi	r26, 0xF2	; 242
    11dc:	b2 e0       	ldi	r27, 0x02	; 2
    11de:	8a 96       	adiw	r24, 0x2a	; 42
    11e0:	31 91       	ld	r19, Z+
    11e2:	2d 91       	ld	r18, X+
    11e4:	32 13       	cpse	r19, r18
    11e6:	0d c0       	rjmp	.+26     	; 0x1202 <eth_type_is_arp_and_my_ip+0x48>
    11e8:	e8 17       	cp	r30, r24
    11ea:	f9 07       	cpc	r31, r25
    11ec:	c9 f7       	brne	.-14     	; 0x11e0 <eth_type_is_arp_and_my_ip+0x26>
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	08 95       	ret
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	08 95       	ret
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	08 95       	ret
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	08 95       	ret
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	08 95       	ret
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	08 95       	ret

00001206 <eth_type_is_ip_and_my_ip>:
    1206:	cf 93       	push	r28
    1208:	df 93       	push	r29
    120a:	fc 01       	movw	r30, r24
    120c:	6a 32       	cpi	r22, 0x2A	; 42
    120e:	71 05       	cpc	r23, r1
    1210:	e0 f0       	brcs	.+56     	; 0x124a <eth_type_is_ip_and_my_ip+0x44>
    1212:	84 85       	ldd	r24, Z+12	; 0x0c
    1214:	88 30       	cpi	r24, 0x08	; 8
    1216:	d9 f4       	brne	.+54     	; 0x124e <eth_type_is_ip_and_my_ip+0x48>
    1218:	85 85       	ldd	r24, Z+13	; 0x0d
    121a:	81 11       	cpse	r24, r1
    121c:	1a c0       	rjmp	.+52     	; 0x1252 <eth_type_is_ip_and_my_ip+0x4c>
    121e:	96 85       	ldd	r25, Z+14	; 0x0e
    1220:	95 34       	cpi	r25, 0x45	; 69
    1222:	c1 f4       	brne	.+48     	; 0x1254 <eth_type_is_ip_and_my_ip+0x4e>
    1224:	26 8d       	ldd	r18, Z+30	; 0x1e
    1226:	90 91 f1 02 	lds	r25, 0x02F1	; 0x8002f1 <ipaddr>
    122a:	29 13       	cpse	r18, r25
    122c:	13 c0       	rjmp	.+38     	; 0x1254 <eth_type_is_ip_and_my_ip+0x4e>
    122e:	df 01       	movw	r26, r30
    1230:	5f 96       	adiw	r26, 0x1f	; 31
    1232:	c2 ef       	ldi	r28, 0xF2	; 242
    1234:	d2 e0       	ldi	r29, 0x02	; 2
    1236:	b2 96       	adiw	r30, 0x22	; 34
    1238:	2d 91       	ld	r18, X+
    123a:	99 91       	ld	r25, Y+
    123c:	29 13       	cpse	r18, r25
    123e:	0a c0       	rjmp	.+20     	; 0x1254 <eth_type_is_ip_and_my_ip+0x4e>
    1240:	ae 17       	cp	r26, r30
    1242:	bf 07       	cpc	r27, r31
    1244:	c9 f7       	brne	.-14     	; 0x1238 <eth_type_is_ip_and_my_ip+0x32>
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	05 c0       	rjmp	.+10     	; 0x1254 <eth_type_is_ip_and_my_ip+0x4e>
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	03 c0       	rjmp	.+6      	; 0x1254 <eth_type_is_ip_and_my_ip+0x4e>
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	01 c0       	rjmp	.+2      	; 0x1254 <eth_type_is_ip_and_my_ip+0x4e>
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	08 95       	ret

0000125a <make_eth>:
    125a:	fc 01       	movw	r30, r24
    125c:	a5 ef       	ldi	r26, 0xF5	; 245
    125e:	b2 e0       	ldi	r27, 0x02	; 2
    1260:	9c 01       	movw	r18, r24
    1262:	2a 5f       	subi	r18, 0xFA	; 250
    1264:	3f 4f       	sbci	r19, 0xFF	; 255
    1266:	86 81       	ldd	r24, Z+6	; 0x06
    1268:	81 93       	st	Z+, r24
    126a:	8d 91       	ld	r24, X+
    126c:	85 83       	std	Z+5, r24	; 0x05
    126e:	e2 17       	cp	r30, r18
    1270:	f3 07       	cpc	r31, r19
    1272:	c9 f7       	brne	.-14     	; 0x1266 <make_eth+0xc>
    1274:	08 95       	ret

00001276 <fill_ip_hdr_checksum>:
    1276:	cf 93       	push	r28
    1278:	df 93       	push	r29
    127a:	ec 01       	movw	r28, r24
    127c:	18 8e       	std	Y+24, r1	; 0x18
    127e:	19 8e       	std	Y+25, r1	; 0x19
    1280:	80 e4       	ldi	r24, 0x40	; 64
    1282:	8c 8b       	std	Y+20, r24	; 0x14
    1284:	1d 8a       	std	Y+21, r1	; 0x15
    1286:	8e 8b       	std	Y+22, r24	; 0x16
    1288:	40 e0       	ldi	r20, 0x00	; 0
    128a:	64 e1       	ldi	r22, 0x14	; 20
    128c:	70 e0       	ldi	r23, 0x00	; 0
    128e:	ce 01       	movw	r24, r28
    1290:	0e 96       	adiw	r24, 0x0e	; 14
    1292:	0e 94 22 08 	call	0x1044	; 0x1044 <checksum>
    1296:	98 8f       	std	Y+24, r25	; 0x18
    1298:	89 8f       	std	Y+25, r24	; 0x19
    129a:	df 91       	pop	r29
    129c:	cf 91       	pop	r28
    129e:	08 95       	ret

000012a0 <make_ip>:
    12a0:	ac 01       	movw	r20, r24
    12a2:	a1 ef       	ldi	r26, 0xF1	; 241
    12a4:	b2 e0       	ldi	r27, 0x02	; 2
    12a6:	fc 01       	movw	r30, r24
    12a8:	7a 96       	adiw	r30, 0x1a	; 26
    12aa:	25 ef       	ldi	r18, 0xF5	; 245
    12ac:	32 e0       	ldi	r19, 0x02	; 2
    12ae:	90 81       	ld	r25, Z
    12b0:	94 83       	std	Z+4, r25	; 0x04
    12b2:	9d 91       	ld	r25, X+
    12b4:	91 93       	st	Z+, r25
    12b6:	a2 17       	cp	r26, r18
    12b8:	b3 07       	cpc	r27, r19
    12ba:	c9 f7       	brne	.-14     	; 0x12ae <make_ip+0xe>
    12bc:	ca 01       	movw	r24, r20
    12be:	0e 94 3b 09 	call	0x1276	; 0x1276 <fill_ip_hdr_checksum>
    12c2:	08 95       	ret

000012c4 <step_seq>:
    12c4:	fc 01       	movw	r30, r24
    12c6:	ba 96       	adiw	r30, 0x2a	; 42
    12c8:	86 96       	adiw	r24, 0x26	; 38
    12ca:	22 91       	ld	r18, -Z
    12cc:	62 0f       	add	r22, r18
    12ce:	71 1d       	adc	r23, r1
    12d0:	24 81       	ldd	r18, Z+4	; 0x04
    12d2:	64 83       	std	Z+4, r22	; 0x04
    12d4:	44 23       	and	r20, r20
    12d6:	11 f0       	breq	.+4      	; 0x12dc <step_seq+0x18>
    12d8:	20 83       	st	Z, r18
    12da:	01 c0       	rjmp	.+2      	; 0x12de <step_seq+0x1a>
    12dc:	10 82       	st	Z, r1
    12de:	67 2f       	mov	r22, r23
    12e0:	77 27       	eor	r23, r23
    12e2:	e8 17       	cp	r30, r24
    12e4:	f9 07       	cpc	r31, r25
    12e6:	89 f7       	brne	.-30     	; 0x12ca <step_seq+0x6>
    12e8:	08 95       	ret

000012ea <make_tcphead>:
    12ea:	cf 93       	push	r28
    12ec:	df 93       	push	r29
    12ee:	ec 01       	movw	r28, r24
    12f0:	8c a1       	ldd	r24, Y+36	; 0x24
    12f2:	9a a1       	ldd	r25, Y+34	; 0x22
    12f4:	9c a3       	std	Y+36, r25	; 0x24
    12f6:	8a a3       	std	Y+34, r24	; 0x22
    12f8:	8d a1       	ldd	r24, Y+37	; 0x25
    12fa:	9b a1       	ldd	r25, Y+35	; 0x23
    12fc:	9d a3       	std	Y+37, r25	; 0x25
    12fe:	8b a3       	std	Y+35, r24	; 0x23
    1300:	ce 01       	movw	r24, r28
    1302:	0e 94 62 09 	call	0x12c4	; 0x12c4 <step_seq>
    1306:	1a aa       	std	Y+50, r1	; 0x32
    1308:	1b aa       	std	Y+51, r1	; 0x33
    130a:	80 e5       	ldi	r24, 0x50	; 80
    130c:	8e a7       	std	Y+46, r24	; 0x2e
    130e:	df 91       	pop	r29
    1310:	cf 91       	pop	r28
    1312:	08 95       	ret

00001314 <make_arp_answer_from_request>:
    1314:	cf 93       	push	r28
    1316:	df 93       	push	r29
    1318:	ec 01       	movw	r28, r24
    131a:	0e 94 2d 09 	call	0x125a	; 0x125a <make_eth>
    131e:	1c 8a       	std	Y+20, r1	; 0x14
    1320:	82 e0       	ldi	r24, 0x02	; 2
    1322:	8d 8b       	std	Y+21, r24	; 0x15
    1324:	a5 ef       	ldi	r26, 0xF5	; 245
    1326:	b2 e0       	ldi	r27, 0x02	; 2
    1328:	fe 01       	movw	r30, r28
    132a:	76 96       	adiw	r30, 0x16	; 22
    132c:	2b ef       	ldi	r18, 0xFB	; 251
    132e:	32 e0       	ldi	r19, 0x02	; 2
    1330:	80 81       	ld	r24, Z
    1332:	82 87       	std	Z+10, r24	; 0x0a
    1334:	8d 91       	ld	r24, X+
    1336:	81 93       	st	Z+, r24
    1338:	a2 17       	cp	r26, r18
    133a:	b3 07       	cpc	r27, r19
    133c:	c9 f7       	brne	.-14     	; 0x1330 <make_arp_answer_from_request+0x1c>
    133e:	a1 ef       	ldi	r26, 0xF1	; 241
    1340:	b2 e0       	ldi	r27, 0x02	; 2
    1342:	fe 01       	movw	r30, r28
    1344:	7c 96       	adiw	r30, 0x1c	; 28
    1346:	25 ef       	ldi	r18, 0xF5	; 245
    1348:	32 e0       	ldi	r19, 0x02	; 2
    134a:	80 81       	ld	r24, Z
    134c:	82 87       	std	Z+10, r24	; 0x0a
    134e:	8d 91       	ld	r24, X+
    1350:	81 93       	st	Z+, r24
    1352:	a2 17       	cp	r26, r18
    1354:	b3 07       	cpc	r27, r19
    1356:	c9 f7       	brne	.-14     	; 0x134a <make_arp_answer_from_request+0x36>
    1358:	be 01       	movw	r22, r28
    135a:	8a e2       	ldi	r24, 0x2A	; 42
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	0e 94 d4 06 	call	0xda8	; 0xda8 <enc28j60PacketSend>
    1362:	df 91       	pop	r29
    1364:	cf 91       	pop	r28
    1366:	08 95       	ret

00001368 <make_echo_reply_from_request>:
    1368:	0f 93       	push	r16
    136a:	1f 93       	push	r17
    136c:	cf 93       	push	r28
    136e:	df 93       	push	r29
    1370:	ec 01       	movw	r28, r24
    1372:	8b 01       	movw	r16, r22
    1374:	0e 94 2d 09 	call	0x125a	; 0x125a <make_eth>
    1378:	ce 01       	movw	r24, r28
    137a:	0e 94 50 09 	call	0x12a0	; 0x12a0 <make_ip>
    137e:	1a a2       	std	Y+34, r1	; 0x22
    1380:	8c a1       	ldd	r24, Y+36	; 0x24
    1382:	88 3f       	cpi	r24, 0xF8	; 248
    1384:	18 f0       	brcs	.+6      	; 0x138c <make_echo_reply_from_request+0x24>
    1386:	9d a1       	ldd	r25, Y+37	; 0x25
    1388:	9f 5f       	subi	r25, 0xFF	; 255
    138a:	9d a3       	std	Y+37, r25	; 0x25
    138c:	88 5f       	subi	r24, 0xF8	; 248
    138e:	8c a3       	std	Y+36, r24	; 0x24
    1390:	be 01       	movw	r22, r28
    1392:	c8 01       	movw	r24, r16
    1394:	0e 94 d4 06 	call	0xda8	; 0xda8 <enc28j60PacketSend>
    1398:	df 91       	pop	r29
    139a:	cf 91       	pop	r28
    139c:	1f 91       	pop	r17
    139e:	0f 91       	pop	r16
    13a0:	08 95       	ret

000013a2 <get_tcp_data_len>:
    13a2:	fc 01       	movw	r30, r24
    13a4:	20 89       	ldd	r18, Z+16	; 0x10
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	32 2f       	mov	r19, r18
    13aa:	22 27       	eor	r18, r18
    13ac:	81 89       	ldd	r24, Z+17	; 0x11
    13ae:	28 2b       	or	r18, r24
    13b0:	24 51       	subi	r18, 0x14	; 20
    13b2:	31 09       	sbc	r19, r1
    13b4:	86 a5       	ldd	r24, Z+46	; 0x2e
    13b6:	82 95       	swap	r24
    13b8:	8f 70       	andi	r24, 0x0F	; 15
    13ba:	a9 01       	movw	r20, r18
    13bc:	64 e0       	ldi	r22, 0x04	; 4
    13be:	86 9f       	mul	r24, r22
    13c0:	40 19       	sub	r20, r0
    13c2:	51 09       	sbc	r21, r1
    13c4:	11 24       	eor	r1, r1
    13c6:	ca 01       	movw	r24, r20
    13c8:	99 23       	and	r25, r25
    13ca:	14 f4       	brge	.+4      	; 0x13d0 <get_tcp_data_len+0x2e>
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	08 95       	ret

000013d2 <fill_tcp_data_p>:
    13d2:	9a 01       	movw	r18, r20
    13d4:	2f 5f       	subi	r18, 0xFF	; 255
    13d6:	3f 4f       	sbci	r19, 0xFF	; 255
    13d8:	fa 01       	movw	r30, r20
    13da:	44 91       	lpm	r20, Z
    13dc:	44 23       	and	r20, r20
    13de:	69 f0       	breq	.+26     	; 0x13fa <fill_tcp_data_p+0x28>
    13e0:	fb 01       	movw	r30, r22
    13e2:	f6 96       	adiw	r30, 0x36	; 54
    13e4:	dc 01       	movw	r26, r24
    13e6:	ae 0f       	add	r26, r30
    13e8:	bf 1f       	adc	r27, r31
    13ea:	f9 01       	movw	r30, r18
    13ec:	4d 93       	st	X+, r20
    13ee:	6f 5f       	subi	r22, 0xFF	; 255
    13f0:	7f 4f       	sbci	r23, 0xFF	; 255
    13f2:	44 91       	lpm	r20, Z
    13f4:	31 96       	adiw	r30, 0x01	; 1
    13f6:	41 11       	cpse	r20, r1
    13f8:	f9 cf       	rjmp	.-14     	; 0x13ec <fill_tcp_data_p+0x1a>
    13fa:	cb 01       	movw	r24, r22
    13fc:	08 95       	ret

000013fe <fill_tcp_data_len>:
    13fe:	22 23       	and	r18, r18
    1400:	91 f0       	breq	.+36     	; 0x1426 <fill_tcp_data_len+0x28>
    1402:	a4 2f       	mov	r26, r20
    1404:	b5 2f       	mov	r27, r21
    1406:	ab 01       	movw	r20, r22
    1408:	4a 5c       	subi	r20, 0xCA	; 202
    140a:	5f 4f       	sbci	r21, 0xFF	; 255
    140c:	fc 01       	movw	r30, r24
    140e:	e4 0f       	add	r30, r20
    1410:	f5 1f       	adc	r31, r21
    1412:	92 2f       	mov	r25, r18
    1414:	3d 91       	ld	r19, X+
    1416:	31 93       	st	Z+, r19
    1418:	91 50       	subi	r25, 0x01	; 1
    141a:	e1 f7       	brne	.-8      	; 0x1414 <fill_tcp_data_len+0x16>
    141c:	21 50       	subi	r18, 0x01	; 1
    141e:	62 0f       	add	r22, r18
    1420:	71 1d       	adc	r23, r1
    1422:	6f 5f       	subi	r22, 0xFF	; 255
    1424:	7f 4f       	sbci	r23, 0xFF	; 255
    1426:	cb 01       	movw	r24, r22
    1428:	08 95       	ret

0000142a <fill_tcp_data>:
    142a:	fa 01       	movw	r30, r20
    142c:	01 90       	ld	r0, Z+
    142e:	00 20       	and	r0, r0
    1430:	e9 f7       	brne	.-6      	; 0x142c <fill_tcp_data+0x2>
    1432:	31 97       	sbiw	r30, 0x01	; 1
    1434:	9f 01       	movw	r18, r30
    1436:	24 1b       	sub	r18, r20
    1438:	35 0b       	sbc	r19, r21
    143a:	0e 94 ff 09 	call	0x13fe	; 0x13fe <fill_tcp_data_len>
    143e:	08 95       	ret

00001440 <www_client_internal_datafill_callback>:
    1440:	ef 92       	push	r14
    1442:	ff 92       	push	r15
    1444:	0f 93       	push	r16
    1446:	1f 93       	push	r17
    1448:	cf 93       	push	r28
    144a:	df 93       	push	r29
    144c:	00 d0       	rcall	.+0      	; 0x144e <www_client_internal_datafill_callback+0xe>
    144e:	00 d0       	rcall	.+0      	; 0x1450 <www_client_internal_datafill_callback+0x10>
    1450:	1f 92       	push	r1
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    1456:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <www_fd>
    145a:	98 13       	cpse	r25, r24
    145c:	b8 c0       	rjmp	.+368    	; 0x15ce <www_client_internal_datafill_callback+0x18e>
    145e:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <browsertype>
    1462:	81 11       	cpse	r24, r1
    1464:	30 c0       	rjmp	.+96     	; 0x14c6 <www_client_internal_datafill_callback+0x86>
    1466:	00 91 cd 02 	lds	r16, 0x02CD	; 0x8002cd <bufptr>
    146a:	10 91 ce 02 	lds	r17, 0x02CE	; 0x8002ce <bufptr+0x1>
    146e:	42 ea       	ldi	r20, 0xA2	; 162
    1470:	52 e0       	ldi	r21, 0x02	; 2
    1472:	60 e0       	ldi	r22, 0x00	; 0
    1474:	70 e0       	ldi	r23, 0x00	; 0
    1476:	c8 01       	movw	r24, r16
    1478:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <fill_tcp_data_p>
    147c:	40 91 d3 02 	lds	r20, 0x02D3	; 0x8002d3 <client_urlbuf_p>
    1480:	50 91 d4 02 	lds	r21, 0x02D4	; 0x8002d4 <client_urlbuf_p+0x1>
    1484:	bc 01       	movw	r22, r24
    1486:	c8 01       	movw	r24, r16
    1488:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <fill_tcp_data_p>
    148c:	40 91 d1 02 	lds	r20, 0x02D1	; 0x8002d1 <client_urlbuf_var>
    1490:	50 91 d2 02 	lds	r21, 0x02D2	; 0x8002d2 <client_urlbuf_var+0x1>
    1494:	bc 01       	movw	r22, r24
    1496:	c8 01       	movw	r24, r16
    1498:	0e 94 15 0a 	call	0x142a	; 0x142a <fill_tcp_data>
    149c:	40 e9       	ldi	r20, 0x90	; 144
    149e:	52 e0       	ldi	r21, 0x02	; 2
    14a0:	bc 01       	movw	r22, r24
    14a2:	c8 01       	movw	r24, r16
    14a4:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <fill_tcp_data_p>
    14a8:	40 91 cf 02 	lds	r20, 0x02CF	; 0x8002cf <client_hoststr>
    14ac:	50 91 d0 02 	lds	r21, 0x02D0	; 0x8002d0 <client_hoststr+0x1>
    14b0:	bc 01       	movw	r22, r24
    14b2:	c8 01       	movw	r24, r16
    14b4:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <fill_tcp_data_p>
    14b8:	43 e6       	ldi	r20, 0x63	; 99
    14ba:	52 e0       	ldi	r21, 0x02	; 2
    14bc:	bc 01       	movw	r22, r24
    14be:	c8 01       	movw	r24, r16
    14c0:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <fill_tcp_data_p>
    14c4:	86 c0       	rjmp	.+268    	; 0x15d2 <www_client_internal_datafill_callback+0x192>
    14c6:	81 30       	cpi	r24, 0x01	; 1
    14c8:	09 f0       	breq	.+2      	; 0x14cc <www_client_internal_datafill_callback+0x8c>
    14ca:	74 c0       	rjmp	.+232    	; 0x15b4 <www_client_internal_datafill_callback+0x174>
    14cc:	00 91 cd 02 	lds	r16, 0x02CD	; 0x8002cd <bufptr>
    14d0:	10 91 ce 02 	lds	r17, 0x02CE	; 0x8002ce <bufptr+0x1>
    14d4:	4d e5       	ldi	r20, 0x5D	; 93
    14d6:	52 e0       	ldi	r21, 0x02	; 2
    14d8:	60 e0       	ldi	r22, 0x00	; 0
    14da:	70 e0       	ldi	r23, 0x00	; 0
    14dc:	c8 01       	movw	r24, r16
    14de:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <fill_tcp_data_p>
    14e2:	40 91 d3 02 	lds	r20, 0x02D3	; 0x8002d3 <client_urlbuf_p>
    14e6:	50 91 d4 02 	lds	r21, 0x02D4	; 0x8002d4 <client_urlbuf_p+0x1>
    14ea:	bc 01       	movw	r22, r24
    14ec:	c8 01       	movw	r24, r16
    14ee:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <fill_tcp_data_p>
    14f2:	40 91 d1 02 	lds	r20, 0x02D1	; 0x8002d1 <client_urlbuf_var>
    14f6:	50 91 d2 02 	lds	r21, 0x02D2	; 0x8002d2 <client_urlbuf_var+0x1>
    14fa:	bc 01       	movw	r22, r24
    14fc:	c8 01       	movw	r24, r16
    14fe:	0e 94 15 0a 	call	0x142a	; 0x142a <fill_tcp_data>
    1502:	4b e4       	ldi	r20, 0x4B	; 75
    1504:	52 e0       	ldi	r21, 0x02	; 2
    1506:	bc 01       	movw	r22, r24
    1508:	c8 01       	movw	r24, r16
    150a:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <fill_tcp_data_p>
    150e:	40 91 cf 02 	lds	r20, 0x02CF	; 0x8002cf <client_hoststr>
    1512:	50 91 d0 02 	lds	r21, 0x02D0	; 0x8002d0 <client_hoststr+0x1>
    1516:	bc 01       	movw	r22, r24
    1518:	c8 01       	movw	r24, r16
    151a:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <fill_tcp_data_p>
    151e:	e0 90 d7 02 	lds	r14, 0x02D7	; 0x8002d7 <client_additionalheaderline_p>
    1522:	f0 90 d8 02 	lds	r15, 0x02D8	; 0x8002d8 <client_additionalheaderline_p+0x1>
    1526:	e1 14       	cp	r14, r1
    1528:	f1 04       	cpc	r15, r1
    152a:	59 f0       	breq	.+22     	; 0x1542 <www_client_internal_datafill_callback+0x102>
    152c:	48 e4       	ldi	r20, 0x48	; 72
    152e:	52 e0       	ldi	r21, 0x02	; 2
    1530:	bc 01       	movw	r22, r24
    1532:	c8 01       	movw	r24, r16
    1534:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <fill_tcp_data_p>
    1538:	a7 01       	movw	r20, r14
    153a:	bc 01       	movw	r22, r24
    153c:	c8 01       	movw	r24, r16
    153e:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <fill_tcp_data_p>
    1542:	43 e2       	ldi	r20, 0x23	; 35
    1544:	52 e0       	ldi	r21, 0x02	; 2
    1546:	bc 01       	movw	r22, r24
    1548:	c8 01       	movw	r24, r16
    154a:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <fill_tcp_data_p>
    154e:	42 e1       	ldi	r20, 0x12	; 18
    1550:	52 e0       	ldi	r21, 0x02	; 2
    1552:	bc 01       	movw	r22, r24
    1554:	c8 01       	movw	r24, r16
    1556:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <fill_tcp_data_p>
    155a:	7c 01       	movw	r14, r24
    155c:	e0 91 d5 02 	lds	r30, 0x02D5	; 0x8002d5 <client_postval>
    1560:	f0 91 d6 02 	lds	r31, 0x02D6	; 0x8002d6 <client_postval+0x1>
    1564:	df 01       	movw	r26, r30
    1566:	0d 90       	ld	r0, X+
    1568:	00 20       	and	r0, r0
    156a:	e9 f7       	brne	.-6      	; 0x1566 <www_client_internal_datafill_callback+0x126>
    156c:	cd 01       	movw	r24, r26
    156e:	01 97       	sbiw	r24, 0x01	; 1
    1570:	4a e0       	ldi	r20, 0x0A	; 10
    1572:	be 01       	movw	r22, r28
    1574:	6f 5f       	subi	r22, 0xFF	; 255
    1576:	7f 4f       	sbci	r23, 0xFF	; 255
    1578:	8e 1b       	sub	r24, r30
    157a:	9f 0b       	sbc	r25, r31
    157c:	0e 94 d5 32 	call	0x65aa	; 0x65aa <__itoa_ncheck>
    1580:	00 91 cd 02 	lds	r16, 0x02CD	; 0x8002cd <bufptr>
    1584:	10 91 ce 02 	lds	r17, 0x02CE	; 0x8002ce <bufptr+0x1>
    1588:	ae 01       	movw	r20, r28
    158a:	4f 5f       	subi	r20, 0xFF	; 255
    158c:	5f 4f       	sbci	r21, 0xFF	; 255
    158e:	b7 01       	movw	r22, r14
    1590:	c8 01       	movw	r24, r16
    1592:	0e 94 15 0a 	call	0x142a	; 0x142a <fill_tcp_data>
    1596:	4c ed       	ldi	r20, 0xDC	; 220
    1598:	51 e0       	ldi	r21, 0x01	; 1
    159a:	bc 01       	movw	r22, r24
    159c:	c8 01       	movw	r24, r16
    159e:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <fill_tcp_data_p>
    15a2:	40 91 d5 02 	lds	r20, 0x02D5	; 0x8002d5 <client_postval>
    15a6:	50 91 d6 02 	lds	r21, 0x02D6	; 0x8002d6 <client_postval+0x1>
    15aa:	bc 01       	movw	r22, r24
    15ac:	c8 01       	movw	r24, r16
    15ae:	0e 94 15 0a 	call	0x142a	; 0x142a <fill_tcp_data>
    15b2:	0f c0       	rjmp	.+30     	; 0x15d2 <www_client_internal_datafill_callback+0x192>
    15b4:	40 91 d1 02 	lds	r20, 0x02D1	; 0x8002d1 <client_urlbuf_var>
    15b8:	50 91 d2 02 	lds	r21, 0x02D2	; 0x8002d2 <client_urlbuf_var+0x1>
    15bc:	60 e0       	ldi	r22, 0x00	; 0
    15be:	70 e0       	ldi	r23, 0x00	; 0
    15c0:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <bufptr>
    15c4:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <bufptr+0x1>
    15c8:	0e 94 15 0a 	call	0x142a	; 0x142a <fill_tcp_data>
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <www_client_internal_datafill_callback+0x192>
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	df 91       	pop	r29
    15de:	cf 91       	pop	r28
    15e0:	1f 91       	pop	r17
    15e2:	0f 91       	pop	r16
    15e4:	ff 90       	pop	r15
    15e6:	ef 90       	pop	r14
    15e8:	08 95       	ret

000015ea <make_tcp_ack_from_any>:
    15ea:	ff 92       	push	r15
    15ec:	0f 93       	push	r16
    15ee:	1f 93       	push	r17
    15f0:	cf 93       	push	r28
    15f2:	df 93       	push	r29
    15f4:	ec 01       	movw	r28, r24
    15f6:	8b 01       	movw	r16, r22
    15f8:	f4 2e       	mov	r15, r20
    15fa:	0e 94 2d 09 	call	0x125a	; 0x125a <make_eth>
    15fe:	8f 2d       	mov	r24, r15
    1600:	80 61       	ori	r24, 0x10	; 16
    1602:	8f a7       	std	Y+47, r24	; 0x2f
    1604:	84 e0       	ldi	r24, 0x04	; 4
    1606:	f8 12       	cpse	r15, r24
    1608:	06 c0       	rjmp	.+12     	; 0x1616 <make_tcp_ack_from_any+0x2c>
    160a:	41 e0       	ldi	r20, 0x01	; 1
    160c:	b8 01       	movw	r22, r16
    160e:	ce 01       	movw	r24, r28
    1610:	0e 94 75 09 	call	0x12ea	; 0x12ea <make_tcphead>
    1614:	0a c0       	rjmp	.+20     	; 0x162a <make_tcp_ack_from_any+0x40>
    1616:	01 15       	cp	r16, r1
    1618:	11 05       	cpc	r17, r1
    161a:	11 f4       	brne	.+4      	; 0x1620 <make_tcp_ack_from_any+0x36>
    161c:	01 e0       	ldi	r16, 0x01	; 1
    161e:	10 e0       	ldi	r17, 0x00	; 0
    1620:	41 e0       	ldi	r20, 0x01	; 1
    1622:	b8 01       	movw	r22, r16
    1624:	ce 01       	movw	r24, r28
    1626:	0e 94 75 09 	call	0x12ea	; 0x12ea <make_tcphead>
    162a:	18 8a       	std	Y+16, r1	; 0x10
    162c:	88 e2       	ldi	r24, 0x28	; 40
    162e:	89 8b       	std	Y+17, r24	; 0x11
    1630:	ce 01       	movw	r24, r28
    1632:	0e 94 50 09 	call	0x12a0	; 0x12a0 <make_ip>
    1636:	84 e0       	ldi	r24, 0x04	; 4
    1638:	88 ab       	std	Y+48, r24	; 0x30
    163a:	19 aa       	std	Y+49, r1	; 0x31
    163c:	42 e0       	ldi	r20, 0x02	; 2
    163e:	6c e1       	ldi	r22, 0x1C	; 28
    1640:	70 e0       	ldi	r23, 0x00	; 0
    1642:	ce 01       	movw	r24, r28
    1644:	4a 96       	adiw	r24, 0x1a	; 26
    1646:	0e 94 22 08 	call	0x1044	; 0x1044 <checksum>
    164a:	9a ab       	std	Y+50, r25	; 0x32
    164c:	8b ab       	std	Y+51, r24	; 0x33
    164e:	be 01       	movw	r22, r28
    1650:	86 e3       	ldi	r24, 0x36	; 54
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	0e 94 d4 06 	call	0xda8	; 0xda8 <enc28j60PacketSend>
    1658:	df 91       	pop	r29
    165a:	cf 91       	pop	r28
    165c:	1f 91       	pop	r17
    165e:	0f 91       	pop	r16
    1660:	ff 90       	pop	r15
    1662:	08 95       	ret

00001664 <make_tcp_ack_with_data_noflags>:
    1664:	0f 93       	push	r16
    1666:	1f 93       	push	r17
    1668:	cf 93       	push	r28
    166a:	df 93       	push	r29
    166c:	ec 01       	movw	r28, r24
    166e:	8b 01       	movw	r16, r22
    1670:	cb 01       	movw	r24, r22
    1672:	88 96       	adiw	r24, 0x28	; 40
    1674:	98 8b       	std	Y+16, r25	; 0x10
    1676:	89 8b       	std	Y+17, r24	; 0x11
    1678:	ce 01       	movw	r24, r28
    167a:	0e 94 3b 09 	call	0x1276	; 0x1276 <fill_ip_hdr_checksum>
    167e:	1a aa       	std	Y+50, r1	; 0x32
    1680:	1b aa       	std	Y+51, r1	; 0x33
    1682:	b8 01       	movw	r22, r16
    1684:	64 5e       	subi	r22, 0xE4	; 228
    1686:	7f 4f       	sbci	r23, 0xFF	; 255
    1688:	42 e0       	ldi	r20, 0x02	; 2
    168a:	ce 01       	movw	r24, r28
    168c:	4a 96       	adiw	r24, 0x1a	; 26
    168e:	0e 94 22 08 	call	0x1044	; 0x1044 <checksum>
    1692:	9a ab       	std	Y+50, r25	; 0x32
    1694:	8b ab       	std	Y+51, r24	; 0x33
    1696:	be 01       	movw	r22, r28
    1698:	c8 01       	movw	r24, r16
    169a:	c6 96       	adiw	r24, 0x36	; 54
    169c:	0e 94 d4 06 	call	0xda8	; 0xda8 <enc28j60PacketSend>
    16a0:	df 91       	pop	r29
    16a2:	cf 91       	pop	r28
    16a4:	1f 91       	pop	r17
    16a6:	0f 91       	pop	r16
    16a8:	08 95       	ret

000016aa <init_udp_or_www_server>:
    16aa:	9c 01       	movw	r18, r24
    16ac:	61 15       	cp	r22, r1
    16ae:	71 05       	cpc	r23, r1
    16b0:	51 f0       	breq	.+20     	; 0x16c6 <init_udp_or_www_server+0x1c>
    16b2:	db 01       	movw	r26, r22
    16b4:	e1 ef       	ldi	r30, 0xF1	; 241
    16b6:	f2 e0       	ldi	r31, 0x02	; 2
    16b8:	45 ef       	ldi	r20, 0xF5	; 245
    16ba:	52 e0       	ldi	r21, 0x02	; 2
    16bc:	9d 91       	ld	r25, X+
    16be:	91 93       	st	Z+, r25
    16c0:	e4 17       	cp	r30, r20
    16c2:	f5 07       	cpc	r31, r21
    16c4:	d9 f7       	brne	.-10     	; 0x16bc <init_udp_or_www_server+0x12>
    16c6:	21 15       	cp	r18, r1
    16c8:	31 05       	cpc	r19, r1
    16ca:	19 f0       	breq	.+6      	; 0x16d2 <init_udp_or_www_server+0x28>
    16cc:	c9 01       	movw	r24, r18
    16ce:	0e 94 98 08 	call	0x1130	; 0x1130 <init_mac>
    16d2:	08 95       	ret

000016d4 <www_server_port>:
    16d4:	90 93 c6 02 	sts	0x02C6, r25	; 0x8002c6 <wwwport_h>
    16d8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <wwwport_l>
    16dc:	08 95       	ret

000016de <make_tcp_synack_from_syn>:
    16de:	cf 93       	push	r28
    16e0:	df 93       	push	r29
    16e2:	ec 01       	movw	r28, r24
    16e4:	0e 94 2d 09 	call	0x125a	; 0x125a <make_eth>
    16e8:	18 8a       	std	Y+16, r1	; 0x10
    16ea:	8c e2       	ldi	r24, 0x2C	; 44
    16ec:	89 8b       	std	Y+17, r24	; 0x11
    16ee:	ce 01       	movw	r24, r28
    16f0:	0e 94 50 09 	call	0x12a0	; 0x12a0 <make_ip>
    16f4:	82 e1       	ldi	r24, 0x12	; 18
    16f6:	8f a7       	std	Y+47, r24	; 0x2f
    16f8:	40 e0       	ldi	r20, 0x00	; 0
    16fa:	61 e0       	ldi	r22, 0x01	; 1
    16fc:	70 e0       	ldi	r23, 0x00	; 0
    16fe:	ce 01       	movw	r24, r28
    1700:	0e 94 75 09 	call	0x12ea	; 0x12ea <make_tcphead>
    1704:	1e a2       	std	Y+38, r1	; 0x26
    1706:	1f a2       	std	Y+39, r1	; 0x27
    1708:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <seqnum>
    170c:	88 a7       	std	Y+40, r24	; 0x28
    170e:	19 a6       	std	Y+41, r1	; 0x29
    1710:	8d 5f       	subi	r24, 0xFD	; 253
    1712:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <seqnum>
    1716:	82 e0       	ldi	r24, 0x02	; 2
    1718:	8e ab       	std	Y+54, r24	; 0x36
    171a:	84 e0       	ldi	r24, 0x04	; 4
    171c:	8f ab       	std	Y+55, r24	; 0x37
    171e:	85 e0       	ldi	r24, 0x05	; 5
    1720:	88 af       	std	Y+56, r24	; 0x38
    1722:	19 ae       	std	Y+57, r1	; 0x39
    1724:	80 e6       	ldi	r24, 0x60	; 96
    1726:	8e a7       	std	Y+46, r24	; 0x2e
    1728:	8a e0       	ldi	r24, 0x0A	; 10
    172a:	88 ab       	std	Y+48, r24	; 0x30
    172c:	19 aa       	std	Y+49, r1	; 0x31
    172e:	42 e0       	ldi	r20, 0x02	; 2
    1730:	60 e2       	ldi	r22, 0x20	; 32
    1732:	70 e0       	ldi	r23, 0x00	; 0
    1734:	ce 01       	movw	r24, r28
    1736:	4a 96       	adiw	r24, 0x1a	; 26
    1738:	0e 94 22 08 	call	0x1044	; 0x1044 <checksum>
    173c:	9a ab       	std	Y+50, r25	; 0x32
    173e:	8b ab       	std	Y+51, r24	; 0x33
    1740:	be 01       	movw	r22, r28
    1742:	8a e3       	ldi	r24, 0x3A	; 58
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	0e 94 d4 06 	call	0xda8	; 0xda8 <enc28j60PacketSend>
    174a:	df 91       	pop	r29
    174c:	cf 91       	pop	r28
    174e:	08 95       	ret

00001750 <fill_buf_p>:
    1750:	dc 01       	movw	r26, r24
    1752:	fa 01       	movw	r30, r20
    1754:	61 15       	cp	r22, r1
    1756:	71 05       	cpc	r23, r1
    1758:	41 f0       	breq	.+16     	; 0x176a <fill_buf_p+0x1a>
    175a:	68 0f       	add	r22, r24
    175c:	79 1f       	adc	r23, r25
    175e:	84 91       	lpm	r24, Z
    1760:	8d 93       	st	X+, r24
    1762:	31 96       	adiw	r30, 0x01	; 1
    1764:	6a 17       	cp	r22, r26
    1766:	7b 07       	cpc	r23, r27
    1768:	d1 f7       	brne	.-12     	; 0x175e <fill_buf_p+0xe>
    176a:	08 95       	ret

0000176c <client_arp_whohas>:
    176c:	cf 92       	push	r12
    176e:	df 92       	push	r13
    1770:	ef 92       	push	r14
    1772:	ff 92       	push	r15
    1774:	0f 93       	push	r16
    1776:	1f 93       	push	r17
    1778:	cf 93       	push	r28
    177a:	df 93       	push	r29
    177c:	7c 01       	movw	r14, r24
    177e:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <ipaddr>
    1782:	88 23       	and	r24, r24
    1784:	d1 f1       	breq	.+116    	; 0x17fa <client_arp_whohas+0x8e>
    1786:	d7 01       	movw	r26, r14
    1788:	c5 ef       	ldi	r28, 0xF5	; 245
    178a:	d2 e0       	ldi	r29, 0x02	; 2
    178c:	0b ef       	ldi	r16, 0xFB	; 251
    178e:	12 e0       	ldi	r17, 0x02	; 2
    1790:	fe 01       	movw	r30, r28
    1792:	2f ef       	ldi	r18, 0xFF	; 255
    1794:	2d 93       	st	X+, r18
    1796:	91 91       	ld	r25, Z+
    1798:	15 96       	adiw	r26, 0x05	; 5
    179a:	9c 93       	st	X, r25
    179c:	15 97       	sbiw	r26, 0x05	; 5
    179e:	0e 17       	cp	r16, r30
    17a0:	1f 07       	cpc	r17, r31
    17a2:	c1 f7       	brne	.-16     	; 0x1794 <client_arp_whohas+0x28>
    17a4:	d7 2e       	mov	r13, r23
    17a6:	c6 2e       	mov	r12, r22
    17a8:	88 e0       	ldi	r24, 0x08	; 8
    17aa:	f7 01       	movw	r30, r14
    17ac:	84 87       	std	Z+12, r24	; 0x0c
    17ae:	86 e0       	ldi	r24, 0x06	; 6
    17b0:	85 87       	std	Z+13, r24	; 0x0d
    17b2:	47 ea       	ldi	r20, 0xA7	; 167
    17b4:	52 e0       	ldi	r21, 0x02	; 2
    17b6:	68 e0       	ldi	r22, 0x08	; 8
    17b8:	70 e0       	ldi	r23, 0x00	; 0
    17ba:	c7 01       	movw	r24, r14
    17bc:	0e 96       	adiw	r24, 0x0e	; 14
    17be:	0e 94 a8 0b 	call	0x1750	; 0x1750 <fill_buf_p>
    17c2:	f7 01       	movw	r30, r14
    17c4:	76 96       	adiw	r30, 0x16	; 22
    17c6:	89 91       	ld	r24, Y+
    17c8:	81 93       	st	Z+, r24
    17ca:	11 86       	std	Z+9, r1	; 0x09
    17cc:	0c 17       	cp	r16, r28
    17ce:	1d 07       	cpc	r17, r29
    17d0:	d1 f7       	brne	.-12     	; 0x17c6 <client_arp_whohas+0x5a>
    17d2:	cc 2d       	mov	r28, r12
    17d4:	dd 2d       	mov	r29, r13
    17d6:	a1 ef       	ldi	r26, 0xF1	; 241
    17d8:	b2 e0       	ldi	r27, 0x02	; 2
    17da:	f7 01       	movw	r30, r14
    17dc:	7c 96       	adiw	r30, 0x1c	; 28
    17de:	25 ef       	ldi	r18, 0xF5	; 245
    17e0:	32 e0       	ldi	r19, 0x02	; 2
    17e2:	89 91       	ld	r24, Y+
    17e4:	82 87       	std	Z+10, r24	; 0x0a
    17e6:	8d 91       	ld	r24, X+
    17e8:	81 93       	st	Z+, r24
    17ea:	a2 17       	cp	r26, r18
    17ec:	b3 07       	cpc	r27, r19
    17ee:	c9 f7       	brne	.-14     	; 0x17e2 <client_arp_whohas+0x76>
    17f0:	b7 01       	movw	r22, r14
    17f2:	8a e2       	ldi	r24, 0x2A	; 42
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	0e 94 d4 06 	call	0xda8	; 0xda8 <enc28j60PacketSend>
    17fa:	df 91       	pop	r29
    17fc:	cf 91       	pop	r28
    17fe:	1f 91       	pop	r17
    1800:	0f 91       	pop	r16
    1802:	ff 90       	pop	r15
    1804:	ef 90       	pop	r14
    1806:	df 90       	pop	r13
    1808:	cf 90       	pop	r12
    180a:	08 95       	ret

0000180c <get_mac_with_arp_wait>:
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	90 91 c8 02 	lds	r25, 0x02C8	; 0x8002c8 <arpip_state>
    1812:	92 30       	cpi	r25, 0x02	; 2
    1814:	09 f4       	brne	.+2      	; 0x1818 <get_mac_with_arp_wait+0xc>
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	08 95       	ret

0000181a <get_mac_with_arp>:
    181a:	50 93 cf 03 	sts	0x03CF, r21	; 0x8003cf <client_arp_result_callback+0x1>
    181e:	40 93 ce 03 	sts	0x03CE, r20	; 0x8003ce <client_arp_result_callback>
    1822:	21 e0       	ldi	r18, 0x01	; 1
    1824:	20 93 c8 02 	sts	0x02C8, r18	; 0x8002c8 <arpip_state>
    1828:	60 93 c7 02 	sts	0x02C7, r22	; 0x8002c7 <arp_reference_number>
    182c:	dc 01       	movw	r26, r24
    182e:	e9 ec       	ldi	r30, 0xC9	; 201
    1830:	f2 e0       	ldi	r31, 0x02	; 2
    1832:	2d ec       	ldi	r18, 0xCD	; 205
    1834:	32 e0       	ldi	r19, 0x02	; 2
    1836:	8d 91       	ld	r24, X+
    1838:	81 93       	st	Z+, r24
    183a:	e2 17       	cp	r30, r18
    183c:	f3 07       	cpc	r31, r19
    183e:	d9 f7       	brne	.-10     	; 0x1836 <get_mac_with_arp+0x1c>
    1840:	08 95       	ret

00001842 <tcp_client_syn>:
    1842:	df 92       	push	r13
    1844:	ef 92       	push	r14
    1846:	ff 92       	push	r15
    1848:	0f 93       	push	r16
    184a:	1f 93       	push	r17
    184c:	cf 93       	push	r28
    184e:	df 93       	push	r29
    1850:	ec 01       	movw	r28, r24
    1852:	f6 2e       	mov	r15, r22
    1854:	e4 2e       	mov	r14, r20
    1856:	d5 2e       	mov	r13, r21
    1858:	a4 ee       	ldi	r26, 0xE4	; 228
    185a:	b2 e0       	ldi	r27, 0x02	; 2
    185c:	bc 01       	movw	r22, r24
    185e:	85 ef       	ldi	r24, 0xF5	; 245
    1860:	92 e0       	ldi	r25, 0x02	; 2
    1862:	4a ee       	ldi	r20, 0xEA	; 234
    1864:	52 e0       	ldi	r21, 0x02	; 2
    1866:	2d 91       	ld	r18, X+
    1868:	fb 01       	movw	r30, r22
    186a:	21 93       	st	Z+, r18
    186c:	bf 01       	movw	r22, r30
    186e:	fc 01       	movw	r30, r24
    1870:	21 91       	ld	r18, Z+
    1872:	cf 01       	movw	r24, r30
    1874:	fb 01       	movw	r30, r22
    1876:	25 83       	std	Z+5, r18	; 0x05
    1878:	a4 17       	cp	r26, r20
    187a:	b5 07       	cpc	r27, r21
    187c:	a1 f7       	brne	.-24     	; 0x1866 <tcp_client_syn+0x24>
    187e:	88 e0       	ldi	r24, 0x08	; 8
    1880:	8c 87       	std	Y+12, r24	; 0x0c
    1882:	1d 86       	std	Y+13, r1	; 0x0d
    1884:	4f ea       	ldi	r20, 0xAF	; 175
    1886:	52 e0       	ldi	r21, 0x02	; 2
    1888:	69 e0       	ldi	r22, 0x09	; 9
    188a:	70 e0       	ldi	r23, 0x00	; 0
    188c:	ce 01       	movw	r24, r28
    188e:	0e 96       	adiw	r24, 0x0e	; 14
    1890:	0e 94 a8 0b 	call	0x1750	; 0x1750 <fill_buf_p>
    1894:	8c e2       	ldi	r24, 0x2C	; 44
    1896:	89 8b       	std	Y+17, r24	; 0x11
    1898:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    189c:	8b 8b       	std	Y+19, r24	; 0x13
    189e:	8f 5f       	subi	r24, 0xFF	; 255
    18a0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    18a4:	86 e0       	ldi	r24, 0x06	; 6
    18a6:	8f 8b       	std	Y+23, r24	; 0x17
    18a8:	aa ee       	ldi	r26, 0xEA	; 234
    18aa:	b2 e0       	ldi	r27, 0x02	; 2
    18ac:	81 ef       	ldi	r24, 0xF1	; 241
    18ae:	92 e0       	ldi	r25, 0x02	; 2
    18b0:	8e 01       	movw	r16, r28
    18b2:	06 5e       	subi	r16, 0xE6	; 230
    18b4:	1f 4f       	sbci	r17, 0xFF	; 255
    18b6:	b8 01       	movw	r22, r16
    18b8:	4e ee       	ldi	r20, 0xEE	; 238
    18ba:	52 e0       	ldi	r21, 0x02	; 2
    18bc:	2d 91       	ld	r18, X+
    18be:	fb 01       	movw	r30, r22
    18c0:	24 83       	std	Z+4, r18	; 0x04
    18c2:	fc 01       	movw	r30, r24
    18c4:	21 91       	ld	r18, Z+
    18c6:	cf 01       	movw	r24, r30
    18c8:	fb 01       	movw	r30, r22
    18ca:	21 93       	st	Z+, r18
    18cc:	bf 01       	movw	r22, r30
    18ce:	a4 17       	cp	r26, r20
    18d0:	b5 07       	cpc	r27, r21
    18d2:	a1 f7       	brne	.-24     	; 0x18bc <tcp_client_syn+0x7a>
    18d4:	ce 01       	movw	r24, r28
    18d6:	0e 94 3b 09 	call	0x1276	; 0x1276 <fill_ip_hdr_checksum>
    18da:	dc a2       	std	Y+36, r13	; 0x24
    18dc:	ed a2       	std	Y+37, r14	; 0x25
    18de:	8b e0       	ldi	r24, 0x0B	; 11
    18e0:	8a a3       	std	Y+34, r24	; 0x22
    18e2:	fb a2       	std	Y+35, r15	; 0x23
    18e4:	fe 01       	movw	r30, r28
    18e6:	b6 96       	adiw	r30, 0x26	; 38
    18e8:	ce 01       	movw	r24, r28
    18ea:	8e 96       	adiw	r24, 0x2e	; 46
    18ec:	11 92       	st	Z+, r1
    18ee:	8e 17       	cp	r24, r30
    18f0:	9f 07       	cpc	r25, r31
    18f2:	e1 f7       	brne	.-8      	; 0x18ec <tcp_client_syn+0xaa>
    18f4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <seqnum>
    18f8:	88 a7       	std	Y+40, r24	; 0x28
    18fa:	8d 5f       	subi	r24, 0xFD	; 253
    18fc:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <seqnum>
    1900:	80 e6       	ldi	r24, 0x60	; 96
    1902:	8e a7       	std	Y+46, r24	; 0x2e
    1904:	82 e0       	ldi	r24, 0x02	; 2
    1906:	8f a7       	std	Y+47, r24	; 0x2f
    1908:	93 e0       	ldi	r25, 0x03	; 3
    190a:	98 ab       	std	Y+48, r25	; 0x30
    190c:	19 aa       	std	Y+49, r1	; 0x31
    190e:	1a aa       	std	Y+50, r1	; 0x32
    1910:	1b aa       	std	Y+51, r1	; 0x33
    1912:	1c aa       	std	Y+52, r1	; 0x34
    1914:	1d aa       	std	Y+53, r1	; 0x35
    1916:	8e ab       	std	Y+54, r24	; 0x36
    1918:	94 e0       	ldi	r25, 0x04	; 4
    191a:	9f ab       	std	Y+55, r25	; 0x37
    191c:	88 af       	std	Y+56, r24	; 0x38
    191e:	8e ee       	ldi	r24, 0xEE	; 238
    1920:	89 af       	std	Y+57, r24	; 0x39
    1922:	42 e0       	ldi	r20, 0x02	; 2
    1924:	60 e2       	ldi	r22, 0x20	; 32
    1926:	70 e0       	ldi	r23, 0x00	; 0
    1928:	c8 01       	movw	r24, r16
    192a:	0e 94 22 08 	call	0x1044	; 0x1044 <checksum>
    192e:	9a ab       	std	Y+50, r25	; 0x32
    1930:	8b ab       	std	Y+51, r24	; 0x33
    1932:	be 01       	movw	r22, r28
    1934:	8a e3       	ldi	r24, 0x3A	; 58
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	0e 94 d4 06 	call	0xda8	; 0xda8 <enc28j60PacketSend>
    193c:	df 91       	pop	r29
    193e:	cf 91       	pop	r28
    1940:	1f 91       	pop	r17
    1942:	0f 91       	pop	r16
    1944:	ff 90       	pop	r15
    1946:	ef 90       	pop	r14
    1948:	df 90       	pop	r13
    194a:	08 95       	ret

0000194c <client_tcp_req>:
    194c:	0f 93       	push	r16
    194e:	1f 93       	push	r17
    1950:	90 93 e0 02 	sts	0x02E0, r25	; 0x8002e0 <client_tcp_result_callback+0x1>
    1954:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <client_tcp_result_callback>
    1958:	70 93 de 02 	sts	0x02DE, r23	; 0x8002de <client_tcp_datafill_callback+0x1>
    195c:	60 93 dd 02 	sts	0x02DD, r22	; 0x8002dd <client_tcp_datafill_callback>
    1960:	a2 2f       	mov	r26, r18
    1962:	b3 2f       	mov	r27, r19
    1964:	ea ee       	ldi	r30, 0xEA	; 234
    1966:	f2 e0       	ldi	r31, 0x02	; 2
    1968:	2e ee       	ldi	r18, 0xEE	; 238
    196a:	32 e0       	ldi	r19, 0x02	; 2
    196c:	8d 91       	ld	r24, X+
    196e:	81 93       	st	Z+, r24
    1970:	e2 17       	cp	r30, r18
    1972:	f3 07       	cpc	r31, r19
    1974:	d9 f7       	brne	.-10     	; 0x196c <client_tcp_req+0x20>
    1976:	a0 2f       	mov	r26, r16
    1978:	b1 2f       	mov	r27, r17
    197a:	e4 ee       	ldi	r30, 0xE4	; 228
    197c:	f2 e0       	ldi	r31, 0x02	; 2
    197e:	2a ee       	ldi	r18, 0xEA	; 234
    1980:	32 e0       	ldi	r19, 0x02	; 2
    1982:	8d 91       	ld	r24, X+
    1984:	81 93       	st	Z+, r24
    1986:	e2 17       	cp	r30, r18
    1988:	f3 07       	cpc	r31, r19
    198a:	d9 f7       	brne	.-10     	; 0x1982 <client_tcp_req+0x36>
    198c:	50 93 e2 02 	sts	0x02E2, r21	; 0x8002e2 <tcp_client_port+0x1>
    1990:	40 93 e1 02 	sts	0x02E1, r20	; 0x8002e1 <tcp_client_port>
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <tcp_client_state>
    199a:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <tcp_fd>
    199e:	8f 5f       	subi	r24, 0xFF	; 255
    19a0:	88 30       	cpi	r24, 0x08	; 8
    19a2:	18 f4       	brcc	.+6      	; 0x19aa <client_tcp_req+0x5e>
    19a4:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <tcp_fd>
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <client_tcp_req+0x62>
    19aa:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <tcp_fd>
    19ae:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <tcp_fd>
    19b2:	1f 91       	pop	r17
    19b4:	0f 91       	pop	r16
    19b6:	08 95       	ret

000019b8 <client_tcpSend>:
    19b8:	8f 92       	push	r8
    19ba:	9f 92       	push	r9
    19bc:	af 92       	push	r10
    19be:	bf 92       	push	r11
    19c0:	cf 92       	push	r12
    19c2:	df 92       	push	r13
    19c4:	ef 92       	push	r14
    19c6:	ff 92       	push	r15
    19c8:	0f 93       	push	r16
    19ca:	1f 93       	push	r17
    19cc:	cf 93       	push	r28
    19ce:	df 93       	push	r29
    19d0:	4c 01       	movw	r8, r24
    19d2:	5b 01       	movw	r10, r22
    19d4:	7a 01       	movw	r14, r20
    19d6:	69 01       	movw	r12, r18
    19d8:	e8 01       	movw	r28, r16
    19da:	0e 94 cd 06 	call	0xd9a	; 0xd9a <enc28j60linkup>
    19de:	88 23       	and	r24, r24
    19e0:	b1 f0       	breq	.+44     	; 0x1a0e <client_tcpSend+0x56>
    19e2:	90 92 d2 02 	sts	0x02D2, r9	; 0x8002d2 <client_urlbuf_var+0x1>
    19e6:	80 92 d1 02 	sts	0x02D1, r8	; 0x8002d1 <client_urlbuf_var>
    19ea:	82 e0       	ldi	r24, 0x02	; 2
    19ec:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <browsertype>
    19f0:	b0 92 da 02 	sts	0x02DA, r11	; 0x8002da <client_browser_callback+0x1>
    19f4:	a0 92 d9 02 	sts	0x02D9, r10	; 0x8002d9 <client_browser_callback>
    19f8:	86 01       	movw	r16, r12
    19fa:	97 01       	movw	r18, r14
    19fc:	ae 01       	movw	r20, r28
    19fe:	60 e2       	ldi	r22, 0x20	; 32
    1a00:	7a e0       	ldi	r23, 0x0A	; 10
    1a02:	80 ea       	ldi	r24, 0xA0	; 160
    1a04:	97 e0       	ldi	r25, 0x07	; 7
    1a06:	0e 94 a6 0c 	call	0x194c	; 0x194c <client_tcp_req>
    1a0a:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <www_fd>
    1a0e:	df 91       	pop	r29
    1a10:	cf 91       	pop	r28
    1a12:	1f 91       	pop	r17
    1a14:	0f 91       	pop	r16
    1a16:	ff 90       	pop	r15
    1a18:	ef 90       	pop	r14
    1a1a:	df 90       	pop	r13
    1a1c:	cf 90       	pop	r12
    1a1e:	bf 90       	pop	r11
    1a20:	af 90       	pop	r10
    1a22:	9f 90       	pop	r9
    1a24:	8f 90       	pop	r8
    1a26:	08 95       	ret

00001a28 <packetloop_arp_icmp_tcp>:


// return 0 to just continue in the packet loop and return the position 
// of the tcp data if there is tcp data part
uint16_t packetloop_arp_icmp_tcp(uint8_t *buf,uint16_t plen)
{
    1a28:	df 92       	push	r13
    1a2a:	ef 92       	push	r14
    1a2c:	ff 92       	push	r15
    1a2e:	0f 93       	push	r16
    1a30:	1f 93       	push	r17
    1a32:	cf 93       	push	r28
    1a34:	df 93       	push	r29
    1a36:	8c 01       	movw	r16, r24
    1a38:	eb 01       	movw	r28, r22
        uint16_t save_len;
#endif
#ifdef ARP_MAC_resolver_client
        //plen will be unequal to zero if there is a valid 
        // packet (without crc error):
        if(plen==0){
    1a3a:	20 97       	sbiw	r28, 0x00	; 0
    1a3c:	09 f0       	breq	.+2      	; 0x1a40 <packetloop_arp_icmp_tcp+0x18>
    1a3e:	56 c0       	rjmp	.+172    	; 0x1aec <packetloop_arp_icmp_tcp+0xc4>
                if (arpip_state == (WGW_ACCEPT_ARP_REPLY|WGW_INITIAL_ARP) && arp_delaycnt==0 ){
    1a40:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <arpip_state>
    1a44:	89 30       	cpi	r24, 0x09	; 9
    1a46:	79 f4       	brne	.+30     	; 0x1a66 <packetloop_arp_icmp_tcp+0x3e>
    1a48:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <arp_delaycnt>
    1a4c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <arp_delaycnt+0x1>
    1a50:	89 2b       	or	r24, r25
    1a52:	f9 f4       	brne	.+62     	; 0x1a92 <packetloop_arp_icmp_tcp+0x6a>
                        // arp_delaycnt has wrapped no arp reply yet
                        if (enc28j60linkup()) client_arp_whohas(buf,arpip);
    1a54:	0e 94 cd 06 	call	0xd9a	; 0xd9a <enc28j60linkup>
    1a58:	88 23       	and	r24, r24
    1a5a:	29 f0       	breq	.+10     	; 0x1a66 <packetloop_arp_icmp_tcp+0x3e>
    1a5c:	69 ec       	ldi	r22, 0xC9	; 201
    1a5e:	72 e0       	ldi	r23, 0x02	; 2
    1a60:	c8 01       	movw	r24, r16
    1a62:	0e 94 b6 0b 	call	0x176c	; 0x176c <client_arp_whohas>
                }
                if (arpip_state == WGW_INITIAL_ARP && enc28j60linkup()){
    1a66:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <arpip_state>
    1a6a:	81 30       	cpi	r24, 0x01	; 1
    1a6c:	91 f4       	brne	.+36     	; 0x1a92 <packetloop_arp_icmp_tcp+0x6a>
    1a6e:	0e 94 cd 06 	call	0xd9a	; 0xd9a <enc28j60linkup>
    1a72:	88 23       	and	r24, r24
    1a74:	71 f0       	breq	.+28     	; 0x1a92 <packetloop_arp_icmp_tcp+0x6a>
                        client_arp_whohas(buf,arpip);
    1a76:	69 ec       	ldi	r22, 0xC9	; 201
    1a78:	72 e0       	ldi	r23, 0x02	; 2
    1a7a:	c8 01       	movw	r24, r16
    1a7c:	0e 94 b6 0b 	call	0x176c	; 0x176c <client_arp_whohas>
                        arpip_state|=WGW_ACCEPT_ARP_REPLY; // WGW_INITIAL_ARP and WGW_ACCEPT_ARP_REPLY set
    1a80:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <arpip_state>
    1a84:	88 60       	ori	r24, 0x08	; 8
    1a86:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <arpip_state>
                        arp_delaycnt=0; // this is like a timer, not so precise but good enough, it wraps in about 2 sec
    1a8a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <arp_delaycnt+0x1>
    1a8e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <arp_delaycnt>
                }
                arp_delaycnt++;
    1a92:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <arp_delaycnt>
    1a96:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <arp_delaycnt+0x1>
    1a9a:	01 96       	adiw	r24, 0x01	; 1
    1a9c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <arp_delaycnt+0x1>
    1aa0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <arp_delaycnt>
#if defined (TCP_client)
                if (tcp_client_state==1 && enc28j60linkup()){ // send a syn
    1aa4:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <tcp_client_state>
    1aa8:	81 30       	cpi	r24, 0x01	; 1
    1aaa:	09 f0       	breq	.+2      	; 0x1aae <packetloop_arp_icmp_tcp+0x86>
    1aac:	a8 c1       	rjmp	.+848    	; 0x1dfe <packetloop_arp_icmp_tcp+0x3d6>
    1aae:	0e 94 cd 06 	call	0xd9a	; 0xd9a <enc28j60linkup>
    1ab2:	88 23       	and	r24, r24
    1ab4:	09 f4       	brne	.+2      	; 0x1ab8 <packetloop_arp_icmp_tcp+0x90>
    1ab6:	a6 c1       	rjmp	.+844    	; 0x1e04 <packetloop_arp_icmp_tcp+0x3dc>
                        tcp_client_state=2;
    1ab8:	82 e0       	ldi	r24, 0x02	; 2
    1aba:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <tcp_client_state>
                        tcpclient_src_port_l++; // allocate a new port
    1abe:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <tcpclient_src_port_l>
    1ac2:	8f 5f       	subi	r24, 0xFF	; 255
    1ac4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <tcpclient_src_port_l>
                        // we encode our 3 bit fd into the src port this
                        // way we get it back in every message that comes
                        // from the server:
                        tcp_client_syn(buf,((tcp_fd<<5) | (0x1f & tcpclient_src_port_l)),tcp_client_port);
    1ac8:	40 91 e1 02 	lds	r20, 0x02E1	; 0x8002e1 <tcp_client_port>
    1acc:	50 91 e2 02 	lds	r21, 0x02E2	; 0x8002e2 <tcp_client_port+0x1>
    1ad0:	60 91 ee 02 	lds	r22, 0x02EE	; 0x8002ee <tcp_fd>
    1ad4:	90 e2       	ldi	r25, 0x20	; 32
    1ad6:	69 9f       	mul	r22, r25
    1ad8:	b0 01       	movw	r22, r0
    1ada:	11 24       	eor	r1, r1
    1adc:	8f 71       	andi	r24, 0x1F	; 31
    1ade:	68 2b       	or	r22, r24
    1ae0:	c8 01       	movw	r24, r16
    1ae2:	0e 94 21 0c 	call	0x1842	; 0x1842 <tcp_client_syn>
                }
#endif
                return(0);
    1ae6:	e1 2c       	mov	r14, r1
    1ae8:	f1 2c       	mov	r15, r1
    1aea:	c0 c1       	rjmp	.+896    	; 0x1e6c <packetloop_arp_icmp_tcp+0x444>
        }
#endif // ARP_MAC_resolver_client
        // arp is broadcast if unknown but a host may also
        // verify the mac address by sending it to 
        // a unicast address.
        if(eth_type_is_arp_and_my_ip(buf,plen)){
    1aec:	0e 94 dd 08 	call	0x11ba	; 0x11ba <eth_type_is_arp_and_my_ip>
    1af0:	88 23       	and	r24, r24
    1af2:	71 f1       	breq	.+92     	; 0x1b50 <packetloop_arp_icmp_tcp+0x128>
                if (buf[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V){
    1af4:	d8 01       	movw	r26, r16
    1af6:	55 96       	adiw	r26, 0x15	; 21
    1af8:	8c 91       	ld	r24, X
    1afa:	81 30       	cpi	r24, 0x01	; 1
    1afc:	19 f4       	brne	.+6      	; 0x1b04 <packetloop_arp_icmp_tcp+0xdc>
                        // is it an arp request 
                        make_arp_answer_from_request(buf);
    1afe:	c8 01       	movw	r24, r16
    1b00:	0e 94 8a 09 	call	0x1314	; 0x1314 <make_arp_answer_from_request>
                }
#ifdef ARP_MAC_resolver_client
                if ((arpip_state & WGW_ACCEPT_ARP_REPLY) && (buf[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V)){
    1b04:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <arpip_state>
    1b08:	83 ff       	sbrs	r24, 3
    1b0a:	7f c1       	rjmp	.+766    	; 0x1e0a <packetloop_arp_icmp_tcp+0x3e2>
    1b0c:	f8 01       	movw	r30, r16
    1b0e:	85 89       	ldd	r24, Z+21	; 0x15
    1b10:	82 30       	cpi	r24, 0x02	; 2
    1b12:	09 f0       	breq	.+2      	; 0x1b16 <packetloop_arp_icmp_tcp+0xee>
    1b14:	7d c1       	rjmp	.+762    	; 0x1e10 <packetloop_arp_icmp_tcp+0x3e8>
                        // is it an arp reply 
                        if (memcmp(&buf[ETH_ARP_SRC_IP_P],arpip,4)!=0) return(0); // not an arp reply for the IP we were searching           
    1b16:	44 e0       	ldi	r20, 0x04	; 4
    1b18:	50 e0       	ldi	r21, 0x00	; 0
    1b1a:	69 ec       	ldi	r22, 0xC9	; 201
    1b1c:	72 e0       	ldi	r23, 0x02	; 2
    1b1e:	c8 01       	movw	r24, r16
    1b20:	4c 96       	adiw	r24, 0x1c	; 28
    1b22:	0e 94 b3 32 	call	0x6566	; 0x6566 <memcmp>
    1b26:	89 2b       	or	r24, r25
    1b28:	09 f0       	breq	.+2      	; 0x1b2c <packetloop_arp_icmp_tcp+0x104>
    1b2a:	75 c1       	rjmp	.+746    	; 0x1e16 <packetloop_arp_icmp_tcp+0x3ee>
                        (*client_arp_result_callback)(arpip,arp_reference_number,buf+ETH_ARP_SRC_MAC_P);
    1b2c:	a8 01       	movw	r20, r16
    1b2e:	4a 5e       	subi	r20, 0xEA	; 234
    1b30:	5f 4f       	sbci	r21, 0xFF	; 255
    1b32:	e0 91 ce 03 	lds	r30, 0x03CE	; 0x8003ce <client_arp_result_callback>
    1b36:	f0 91 cf 03 	lds	r31, 0x03CF	; 0x8003cf <client_arp_result_callback+0x1>
    1b3a:	60 91 c7 02 	lds	r22, 0x02C7	; 0x8002c7 <arp_reference_number>
    1b3e:	89 ec       	ldi	r24, 0xC9	; 201
    1b40:	92 e0       	ldi	r25, 0x02	; 2
    1b42:	09 95       	icall
                        arpip_state=WGW_HAVE_MAC;
    1b44:	82 e0       	ldi	r24, 0x02	; 2
    1b46:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <arpip_state>
                }
#endif // ARP_MAC_resolver_client
                return(0);
    1b4a:	e1 2c       	mov	r14, r1
    1b4c:	f1 2c       	mov	r15, r1
    1b4e:	8e c1       	rjmp	.+796    	; 0x1e6c <packetloop_arp_icmp_tcp+0x444>

        }
        // check if ip packets are for us:
        if(eth_type_is_ip_and_my_ip(buf,plen)==0){
    1b50:	be 01       	movw	r22, r28
    1b52:	c8 01       	movw	r24, r16
    1b54:	0e 94 03 09 	call	0x1206	; 0x1206 <eth_type_is_ip_and_my_ip>
    1b58:	88 23       	and	r24, r24
    1b5a:	09 f4       	brne	.+2      	; 0x1b5e <packetloop_arp_icmp_tcp+0x136>
    1b5c:	5f c1       	rjmp	.+702    	; 0x1e1c <packetloop_arp_icmp_tcp+0x3f4>
                return(0);
        }
        if(buf[IP_PROTO_P]==IP_PROTO_ICMP_V && buf[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V){
    1b5e:	d8 01       	movw	r26, r16
    1b60:	57 96       	adiw	r26, 0x17	; 23
    1b62:	8c 91       	ld	r24, X
    1b64:	57 97       	sbiw	r26, 0x17	; 23
    1b66:	81 30       	cpi	r24, 0x01	; 1
    1b68:	a9 f4       	brne	.+42     	; 0x1b94 <packetloop_arp_icmp_tcp+0x16c>
    1b6a:	92 96       	adiw	r26, 0x22	; 34
    1b6c:	8c 91       	ld	r24, X
    1b6e:	88 30       	cpi	r24, 0x08	; 8
    1b70:	09 f0       	breq	.+2      	; 0x1b74 <packetloop_arp_icmp_tcp+0x14c>
    1b72:	57 c1       	rjmp	.+686    	; 0x1e22 <packetloop_arp_icmp_tcp+0x3fa>
                if (icmp_callback){
    1b74:	e0 91 ef 02 	lds	r30, 0x02EF	; 0x8002ef <icmp_callback>
    1b78:	f0 91 f0 02 	lds	r31, 0x02F0	; 0x8002f0 <icmp_callback+0x1>
    1b7c:	30 97       	sbiw	r30, 0x00	; 0
    1b7e:	19 f0       	breq	.+6      	; 0x1b86 <packetloop_arp_icmp_tcp+0x15e>
                        (*icmp_callback)(&(buf[IP_SRC_P]));
    1b80:	c8 01       	movw	r24, r16
    1b82:	4a 96       	adiw	r24, 0x1a	; 26
    1b84:	09 95       	icall
                }
                // a ping packet, let's send pong
                make_echo_reply_from_request(buf,plen);
    1b86:	be 01       	movw	r22, r28
    1b88:	c8 01       	movw	r24, r16
    1b8a:	0e 94 b4 09 	call	0x1368	; 0x1368 <make_echo_reply_from_request>
                return(0);
    1b8e:	e1 2c       	mov	r14, r1
    1b90:	f1 2c       	mov	r15, r1
    1b92:	6c c1       	rjmp	.+728    	; 0x1e6c <packetloop_arp_icmp_tcp+0x444>
        }
        // this is an important check to avoid working on the wrong packets:
        if (plen<54 || buf[IP_PROTO_P]!=IP_PROTO_TCP_V ){
    1b94:	c6 33       	cpi	r28, 0x36	; 54
    1b96:	d1 05       	cpc	r29, r1
    1b98:	08 f4       	brcc	.+2      	; 0x1b9c <packetloop_arp_icmp_tcp+0x174>
    1b9a:	46 c1       	rjmp	.+652    	; 0x1e28 <packetloop_arp_icmp_tcp+0x400>
    1b9c:	86 30       	cpi	r24, 0x06	; 6
    1b9e:	09 f0       	breq	.+2      	; 0x1ba2 <packetloop_arp_icmp_tcp+0x17a>
    1ba0:	46 c1       	rjmp	.+652    	; 0x1e2e <packetloop_arp_icmp_tcp+0x406>
                // smaller than the smallest TCP packet (TCP packet with no options section) or not tcp port
                return(0);
        }
#if defined (TCP_client)
        // a message for the tcp client, tcp_client_state is zero if client was never used
        if ( buf[TCP_DST_PORT_H_P]==TCPCLIENT_SRC_PORT_H){
    1ba2:	f8 01       	movw	r30, r16
    1ba4:	84 a1       	ldd	r24, Z+36	; 0x24
    1ba6:	8b 30       	cpi	r24, 0x0B	; 11
    1ba8:	09 f0       	breq	.+2      	; 0x1bac <packetloop_arp_icmp_tcp+0x184>
    1baa:	f0 c0       	rjmp	.+480    	; 0x1d8c <packetloop_arp_icmp_tcp+0x364>
#if defined (WWW_client)
                // workaround to pass pointer to www_client_internal..
                bufptr=buf; 
    1bac:	10 93 ce 02 	sts	0x02CE, r17	; 0x8002ce <bufptr+0x1>
    1bb0:	00 93 cd 02 	sts	0x02CD, r16	; 0x8002cd <bufptr>
#endif // WWW_client
                if (check_ip_message_is_from(buf,tcp_otherside_ip)==0){
    1bb4:	6a ee       	ldi	r22, 0xEA	; 234
    1bb6:	72 e0       	ldi	r23, 0x02	; 2
    1bb8:	c8 01       	movw	r24, r16
    1bba:	0e 94 c6 08 	call	0x118c	; 0x118c <check_ip_message_is_from>
    1bbe:	88 23       	and	r24, r24
    1bc0:	09 f4       	brne	.+2      	; 0x1bc4 <packetloop_arp_icmp_tcp+0x19c>
    1bc2:	38 c1       	rjmp	.+624    	; 0x1e34 <packetloop_arp_icmp_tcp+0x40c>
                        return(0);
                }
                // if we get a reset:
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_RST_V){
    1bc4:	d8 01       	movw	r26, r16
    1bc6:	9f 96       	adiw	r26, 0x2f	; 47
    1bc8:	dc 90       	ld	r13, X
    1bca:	9f 97       	sbiw	r26, 0x2f	; 47
    1bcc:	d2 fe       	sbrs	r13, 2
    1bce:	17 c0       	rjmp	.+46     	; 0x1bfe <packetloop_arp_icmp_tcp+0x1d6>
                        if (client_tcp_result_callback){
    1bd0:	e0 91 df 02 	lds	r30, 0x02DF	; 0x8002df <client_tcp_result_callback>
    1bd4:	f0 91 e0 02 	lds	r31, 0x02E0	; 0x8002e0 <client_tcp_result_callback+0x1>
    1bd8:	30 97       	sbiw	r30, 0x00	; 0
    1bda:	59 f0       	breq	.+22     	; 0x1bf2 <packetloop_arp_icmp_tcp+0x1ca>
                                // parameters in client_tcp_result_callback: fd, status, buf_start, len
                                (*client_tcp_result_callback)((buf[TCP_DST_PORT_L_P]>>5)&0x7,3,0,0);
    1bdc:	95 96       	adiw	r26, 0x25	; 37
    1bde:	8c 91       	ld	r24, X
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	40 e0       	ldi	r20, 0x00	; 0
    1be6:	50 e0       	ldi	r21, 0x00	; 0
    1be8:	63 e0       	ldi	r22, 0x03	; 3
    1bea:	82 95       	swap	r24
    1bec:	86 95       	lsr	r24
    1bee:	87 70       	andi	r24, 0x07	; 7
    1bf0:	09 95       	icall
                        }
                        tcp_client_state=6;
    1bf2:	86 e0       	ldi	r24, 0x06	; 6
    1bf4:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <tcp_client_state>
                        return(0);
    1bf8:	e1 2c       	mov	r14, r1
    1bfa:	f1 2c       	mov	r15, r1
    1bfc:	37 c1       	rjmp	.+622    	; 0x1e6c <packetloop_arp_icmp_tcp+0x444>
                }
                len=get_tcp_data_len(buf);
    1bfe:	c8 01       	movw	r24, r16
    1c00:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <get_tcp_data_len>
    1c04:	7c 01       	movw	r14, r24
                if (tcp_client_state==2){
    1c06:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <tcp_client_state>
    1c0a:	82 30       	cpi	r24, 0x02	; 2
    1c0c:	d9 f5       	brne	.+118    	; 0x1c84 <packetloop_arp_icmp_tcp+0x25c>
    1c0e:	9d 2d       	mov	r25, r13
    1c10:	90 71       	andi	r25, 0x10	; 16
                        if ((buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V) && (buf[TCP_FLAGS_P] &TCP_FLAGS_ACK_V)){
    1c12:	8d 2d       	mov	r24, r13
    1c14:	82 71       	andi	r24, 0x12	; 18
    1c16:	82 31       	cpi	r24, 0x12	; 18
    1c18:	19 f5       	brne	.+70     	; 0x1c60 <packetloop_arp_icmp_tcp+0x238>
                                // synack, answer with ack
                                make_tcp_ack_from_any(buf,0,0);
    1c1a:	40 e0       	ldi	r20, 0x00	; 0
    1c1c:	60 e0       	ldi	r22, 0x00	; 0
    1c1e:	70 e0       	ldi	r23, 0x00	; 0
    1c20:	c8 01       	movw	r24, r16
    1c22:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <make_tcp_ack_from_any>
                                buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V;
    1c26:	88 e1       	ldi	r24, 0x18	; 24
    1c28:	f8 01       	movw	r30, r16
    1c2a:	87 a7       	std	Z+47, r24	; 0x2f

                                // Make a tcp message with data. When calling this function we must
                                // still have a valid tcp-ack in the buffer. In other words
                                // you have just called make_tcp_ack_from_any(buf,0).
                                if (client_tcp_datafill_callback){
    1c2c:	e0 91 dd 02 	lds	r30, 0x02DD	; 0x8002dd <client_tcp_datafill_callback>
    1c30:	f0 91 de 02 	lds	r31, 0x02DE	; 0x8002de <client_tcp_datafill_callback+0x1>
    1c34:	30 97       	sbiw	r30, 0x00	; 0
    1c36:	41 f0       	breq	.+16     	; 0x1c48 <packetloop_arp_icmp_tcp+0x220>
                                        // in this case it is src port because the above 
                                        // make_tcp_ack_from_any swaps the dst and src port:
                                        len=(*client_tcp_datafill_callback)((buf[TCP_SRC_PORT_L_P]>>5)&0x7);
    1c38:	d8 01       	movw	r26, r16
    1c3a:	93 96       	adiw	r26, 0x23	; 35
    1c3c:	8c 91       	ld	r24, X
    1c3e:	82 95       	swap	r24
    1c40:	86 95       	lsr	r24
    1c42:	87 70       	andi	r24, 0x07	; 7
    1c44:	09 95       	icall
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <packetloop_arp_icmp_tcp+0x224>
                                }else{
                                        // this is just to prevent a crash
                                        len=0;
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
                                }
                                tcp_client_state=3;
    1c4c:	23 e0       	ldi	r18, 0x03	; 3
    1c4e:	20 93 e3 02 	sts	0x02E3, r18	; 0x8002e3 <tcp_client_state>
                                make_tcp_ack_with_data_noflags(buf,len);
    1c52:	bc 01       	movw	r22, r24
    1c54:	c8 01       	movw	r24, r16
    1c56:	0e 94 32 0b 	call	0x1664	; 0x1664 <make_tcp_ack_with_data_noflags>
                                return(0);
    1c5a:	e1 2c       	mov	r14, r1
    1c5c:	f1 2c       	mov	r15, r1
    1c5e:	06 c1       	rjmp	.+524    	; 0x1e6c <packetloop_arp_icmp_tcp+0x444>
                        }else{
                                // reset only if we have sent a syn and don't get syn-ack back.
                                // If we connect to a non listen port then we get a RST
                                // which will be handeled above. In other words there is
                                // normally no danger for an endless loop.
                                tcp_client_state=1; // retry
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <tcp_client_state>
                                // do not inform application layer as we retry.
                                len++;
                                if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
    1c66:	91 11       	cpse	r25, r1
    1c68:	04 c0       	rjmp	.+8      	; 0x1c72 <packetloop_arp_icmp_tcp+0x24a>
                                // If we connect to a non listen port then we get a RST
                                // which will be handeled above. In other words there is
                                // normally no danger for an endless loop.
                                tcp_client_state=1; // retry
                                // do not inform application layer as we retry.
                                len++;
    1c6a:	b7 01       	movw	r22, r14
    1c6c:	6f 5f       	subi	r22, 0xFF	; 255
    1c6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c70:	02 c0       	rjmp	.+4      	; 0x1c76 <packetloop_arp_icmp_tcp+0x24e>
                                if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
                                        // if packet was an ack then do not step the ack number
                                        len=0;
    1c72:	60 e0       	ldi	r22, 0x00	; 0
    1c74:	70 e0       	ldi	r23, 0x00	; 0
                                }
                                // refuse and reset the connection
                                make_tcp_ack_from_any(buf,len,TCP_FLAGS_RST_V);
    1c76:	44 e0       	ldi	r20, 0x04	; 4
    1c78:	c8 01       	movw	r24, r16
    1c7a:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <make_tcp_ack_from_any>
                                return(0);
    1c7e:	e1 2c       	mov	r14, r1
    1c80:	f1 2c       	mov	r15, r1
    1c82:	f4 c0       	rjmp	.+488    	; 0x1e6c <packetloop_arp_icmp_tcp+0x444>
                        }
                }
                // in tcp_client_state==3 we will normally first get an empty
                // ack-packet and then a ack-packet with data.
                if (tcp_client_state==3 && len>0){ 
    1c84:	83 30       	cpi	r24, 0x03	; 3
    1c86:	09 f0       	breq	.+2      	; 0x1c8a <packetloop_arp_icmp_tcp+0x262>
    1c88:	3f c0       	rjmp	.+126    	; 0x1d08 <packetloop_arp_icmp_tcp+0x2e0>
    1c8a:	e1 14       	cp	r14, r1
    1c8c:	f1 04       	cpc	r15, r1
    1c8e:	09 f4       	brne	.+2      	; 0x1c92 <packetloop_arp_icmp_tcp+0x26a>
    1c90:	e6 c0       	rjmp	.+460    	; 0x1e5e <packetloop_arp_icmp_tcp+0x436>
                        // our first real data packet
                        tcp_client_state=4;
    1c92:	84 e0       	ldi	r24, 0x04	; 4
    1c94:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <tcp_client_state>
                        // return the data we received
                        if (client_tcp_result_callback){
    1c98:	e0 91 df 02 	lds	r30, 0x02DF	; 0x8002df <client_tcp_result_callback>
    1c9c:	f0 91 e0 02 	lds	r31, 0x02E0	; 0x8002e0 <client_tcp_result_callback+0x1>
    1ca0:	30 97       	sbiw	r30, 0x00	; 0
    1ca2:	09 f4       	brne	.+2      	; 0x1ca6 <packetloop_arp_icmp_tcp+0x27e>
    1ca4:	56 c0       	rjmp	.+172    	; 0x1d52 <packetloop_arp_icmp_tcp+0x32a>
                                tcpstart=TCP_DATA_START; // TCP_DATA_START is a formula
    1ca6:	d8 01       	movw	r26, r16
    1ca8:	9e 96       	adiw	r26, 0x2e	; 46
    1caa:	4c 91       	ld	r20, X
    1cac:	42 95       	swap	r20
    1cae:	4f 70       	andi	r20, 0x0F	; 15
    1cb0:	b4 e0       	ldi	r27, 0x04	; 4
    1cb2:	4b 9f       	mul	r20, r27
    1cb4:	a0 01       	movw	r20, r0
    1cb6:	11 24       	eor	r1, r1
                                // out of buffer bounds check, needed in case of fragmented IP packets
                                if (tcpstart>plen-8){
    1cb8:	ce 01       	movw	r24, r28
    1cba:	08 97       	sbiw	r24, 0x08	; 8
    1cbc:	4e 5d       	subi	r20, 0xDE	; 222
    1cbe:	5f 4f       	sbci	r21, 0xFF	; 255
    1cc0:	84 17       	cp	r24, r20
    1cc2:	95 07       	cpc	r25, r21
    1cc4:	08 f4       	brcc	.+2      	; 0x1cc8 <packetloop_arp_icmp_tcp+0x2a0>
    1cc6:	ac 01       	movw	r20, r24
                                        tcpstart=plen-8; // dummy but save
                                }
                                save_len=len;
                                if (tcpstart+len>plen){
    1cc8:	c7 01       	movw	r24, r14
    1cca:	84 0f       	add	r24, r20
    1ccc:	95 1f       	adc	r25, r21
    1cce:	c8 17       	cp	r28, r24
    1cd0:	d9 07       	cpc	r29, r25
    1cd2:	20 f4       	brcc	.+8      	; 0x1cdc <packetloop_arp_icmp_tcp+0x2b4>
                                        save_len=plen-tcpstart;
    1cd4:	9e 01       	movw	r18, r28
    1cd6:	24 1b       	sub	r18, r20
    1cd8:	35 0b       	sbc	r19, r21
    1cda:	01 c0       	rjmp	.+2      	; 0x1cde <packetloop_arp_icmp_tcp+0x2b6>
                                tcpstart=TCP_DATA_START; // TCP_DATA_START is a formula
                                // out of buffer bounds check, needed in case of fragmented IP packets
                                if (tcpstart>plen-8){
                                        tcpstart=plen-8; // dummy but save
                                }
                                save_len=len;
    1cdc:	97 01       	movw	r18, r14
                                if (tcpstart+len>plen){
                                        save_len=plen-tcpstart;
                                }
                                send_fin=(*client_tcp_result_callback)((buf[TCP_DST_PORT_L_P]>>5)&0x7,0,tcpstart,save_len);
    1cde:	d8 01       	movw	r26, r16
    1ce0:	95 96       	adiw	r26, 0x25	; 37
    1ce2:	8c 91       	ld	r24, X
    1ce4:	60 e0       	ldi	r22, 0x00	; 0
    1ce6:	82 95       	swap	r24
    1ce8:	86 95       	lsr	r24
    1cea:	87 70       	andi	r24, 0x07	; 7
    1cec:	09 95       	icall
                        }
                        if (send_fin){
    1cee:	88 23       	and	r24, r24
    1cf0:	59 f0       	breq	.+22     	; 0x1d08 <packetloop_arp_icmp_tcp+0x2e0>
                                make_tcp_ack_from_any(buf,len,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
    1cf2:	49 e0       	ldi	r20, 0x09	; 9
    1cf4:	b7 01       	movw	r22, r14
    1cf6:	c8 01       	movw	r24, r16
    1cf8:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <make_tcp_ack_from_any>
                                tcp_client_state=5;
    1cfc:	85 e0       	ldi	r24, 0x05	; 5
    1cfe:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <tcp_client_state>
                                return(0);
    1d02:	e1 2c       	mov	r14, r1
    1d04:	f1 2c       	mov	r15, r1
    1d06:	b2 c0       	rjmp	.+356    	; 0x1e6c <packetloop_arp_icmp_tcp+0x444>
                        }
                }
                if(tcp_client_state==5){
    1d08:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <tcp_client_state>
    1d0c:	85 30       	cpi	r24, 0x05	; 5
    1d0e:	51 f4       	brne	.+20     	; 0x1d24 <packetloop_arp_icmp_tcp+0x2fc>
                        // we get one more final ack to our fin-ack:
                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
    1d10:	f8 01       	movw	r30, r16
    1d12:	87 a5       	ldd	r24, Z+47	; 0x2f
    1d14:	84 ff       	sbrs	r24, 4
    1d16:	91 c0       	rjmp	.+290    	; 0x1e3a <packetloop_arp_icmp_tcp+0x412>
                                tcp_client_state=6; // in state 6 communication should be finished
    1d18:	86 e0       	ldi	r24, 0x06	; 6
    1d1a:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <tcp_client_state>
                        }
                        return(0);
    1d1e:	e1 2c       	mov	r14, r1
    1d20:	f1 2c       	mov	r15, r1
    1d22:	a4 c0       	rjmp	.+328    	; 0x1e6c <packetloop_arp_icmp_tcp+0x444>
                }
                if(tcp_client_state==6){
    1d24:	86 30       	cpi	r24, 0x06	; 6
    1d26:	a9 f4       	brne	.+42     	; 0x1d52 <packetloop_arp_icmp_tcp+0x32a>
                        // something wrong, can't deal with this, reset the connection
                        len++;
                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V) len=0; // if packet was an ack then do not step the ack number
    1d28:	d8 01       	movw	r26, r16
    1d2a:	9f 96       	adiw	r26, 0x2f	; 47
    1d2c:	8c 91       	ld	r24, X
    1d2e:	84 fd       	sbrc	r24, 4
    1d30:	04 c0       	rjmp	.+8      	; 0x1d3a <packetloop_arp_icmp_tcp+0x312>
                        }
                        return(0);
                }
                if(tcp_client_state==6){
                        // something wrong, can't deal with this, reset the connection
                        len++;
    1d32:	b7 01       	movw	r22, r14
    1d34:	6f 5f       	subi	r22, 0xFF	; 255
    1d36:	7f 4f       	sbci	r23, 0xFF	; 255
    1d38:	02 c0       	rjmp	.+4      	; 0x1d3e <packetloop_arp_icmp_tcp+0x316>
                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V) len=0; // if packet was an ack then do not step the ack number
    1d3a:	60 e0       	ldi	r22, 0x00	; 0
    1d3c:	70 e0       	ldi	r23, 0x00	; 0
                        make_tcp_ack_from_any(buf,len,TCP_FLAGS_RST_V);
    1d3e:	44 e0       	ldi	r20, 0x04	; 4
    1d40:	c8 01       	movw	r24, r16
    1d42:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <make_tcp_ack_from_any>
                        // just a single reset, do not repeat if more messages:
                        tcp_client_state=7;
    1d46:	87 e0       	ldi	r24, 0x07	; 7
    1d48:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <tcp_client_state>
                        return(0);
    1d4c:	e1 2c       	mov	r14, r1
    1d4e:	f1 2c       	mov	r15, r1
    1d50:	8d c0       	rjmp	.+282    	; 0x1e6c <packetloop_arp_icmp_tcp+0x444>
                }
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
    1d52:	f8 01       	movw	r30, r16
    1d54:	87 a5       	ldd	r24, Z+47	; 0x2f
    1d56:	80 ff       	sbrs	r24, 0
    1d58:	0d c0       	rjmp	.+26     	; 0x1d74 <packetloop_arp_icmp_tcp+0x34c>
                        // this normally a fin ack message but it could be
                        // any message with fin we answer with fin-ack:
                        make_tcp_ack_from_any(buf,len+1,TCP_FLAGS_FIN_V);
    1d5a:	b7 01       	movw	r22, r14
    1d5c:	6f 5f       	subi	r22, 0xFF	; 255
    1d5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d60:	41 e0       	ldi	r20, 0x01	; 1
    1d62:	c8 01       	movw	r24, r16
    1d64:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <make_tcp_ack_from_any>
                        tcp_client_state=5; // connection terminated
    1d68:	85 e0       	ldi	r24, 0x05	; 5
    1d6a:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <tcp_client_state>
                        return(0);
    1d6e:	e1 2c       	mov	r14, r1
    1d70:	f1 2c       	mov	r15, r1
    1d72:	7c c0       	rjmp	.+248    	; 0x1e6c <packetloop_arp_icmp_tcp+0x444>
                }
                // ack all data (the web page may be long):
                // if we just get a fragment then len will be zero
                // and we ack only once we have the full packet
                if (len>0){
    1d74:	e1 14       	cp	r14, r1
    1d76:	f1 04       	cpc	r15, r1
    1d78:	09 f4       	brne	.+2      	; 0x1d7c <packetloop_arp_icmp_tcp+0x354>
    1d7a:	62 c0       	rjmp	.+196    	; 0x1e40 <packetloop_arp_icmp_tcp+0x418>
                        make_tcp_ack_from_any(buf,len,0);
    1d7c:	40 e0       	ldi	r20, 0x00	; 0
    1d7e:	b7 01       	movw	r22, r14
    1d80:	c8 01       	movw	r24, r16
    1d82:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <make_tcp_ack_from_any>
                }
                return(0);
    1d86:	e1 2c       	mov	r14, r1
    1d88:	f1 2c       	mov	r15, r1
    1d8a:	70 c0       	rjmp	.+224    	; 0x1e6c <packetloop_arp_icmp_tcp+0x444>
        }
#endif // TCP_client
        //
#ifdef WWW_server
        // tcp port web server start
        if (buf[TCP_DST_PORT_H_P]==wwwport_h && buf[TCP_DST_PORT_L_P]==wwwport_l){
    1d8c:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <wwwport_h>
    1d90:	89 13       	cpse	r24, r25
    1d92:	59 c0       	rjmp	.+178    	; 0x1e46 <packetloop_arp_icmp_tcp+0x41e>
    1d94:	95 a1       	ldd	r25, Z+37	; 0x25
    1d96:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <wwwport_l>
    1d9a:	98 13       	cpse	r25, r24
    1d9c:	57 c0       	rjmp	.+174    	; 0x1e4c <packetloop_arp_icmp_tcp+0x424>
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V){
    1d9e:	d7 a4       	ldd	r13, Z+47	; 0x2f
    1da0:	d1 fe       	sbrs	r13, 1
    1da2:	06 c0       	rjmp	.+12     	; 0x1db0 <packetloop_arp_icmp_tcp+0x388>
                        make_tcp_synack_from_syn(buf);
    1da4:	c8 01       	movw	r24, r16
    1da6:	0e 94 6f 0b 	call	0x16de	; 0x16de <make_tcp_synack_from_syn>
                        // make_tcp_synack_from_syn does already send the syn,ack
                        return(0);
    1daa:	e1 2c       	mov	r14, r1
    1dac:	f1 2c       	mov	r15, r1
    1dae:	5e c0       	rjmp	.+188    	; 0x1e6c <packetloop_arp_icmp_tcp+0x444>
                }
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
    1db0:	d4 fe       	sbrs	r13, 4
    1db2:	4f c0       	rjmp	.+158    	; 0x1e52 <packetloop_arp_icmp_tcp+0x42a>
                        info_data_len=get_tcp_data_len(buf);
    1db4:	c8 01       	movw	r24, r16
    1db6:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <get_tcp_data_len>
    1dba:	7c 01       	movw	r14, r24
    1dbc:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <info_data_len+0x1>
    1dc0:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <info_data_len>
                        // we can possibly have no data, just ack:
                        // Here we misuse plen for something else to save a variable.
                        // plen is now the position of start of the tcp user data.
                        if (info_data_len==0){
    1dc4:	89 2b       	or	r24, r25
    1dc6:	49 f4       	brne	.+18     	; 0x1dda <packetloop_arp_icmp_tcp+0x3b2>
                                if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
    1dc8:	d0 fe       	sbrs	r13, 0
    1dca:	50 c0       	rjmp	.+160    	; 0x1e6c <packetloop_arp_icmp_tcp+0x444>
                                        // finack, answer with ack
                                        make_tcp_ack_from_any(buf,0,0);
    1dcc:	40 e0       	ldi	r20, 0x00	; 0
    1dce:	60 e0       	ldi	r22, 0x00	; 0
    1dd0:	70 e0       	ldi	r23, 0x00	; 0
    1dd2:	c8 01       	movw	r24, r16
    1dd4:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <make_tcp_ack_from_any>
    1dd8:	49 c0       	rjmp	.+146    	; 0x1e6c <packetloop_arp_icmp_tcp+0x444>
                                }
                                // just an ack with no data, wait for next packet
                                return(0);
                        }
                        // Here we misuse len for something else to save a variable
                        len=TCP_DATA_START; // TCP_DATA_START is a formula
    1dda:	f8 01       	movw	r30, r16
    1ddc:	e6 a4       	ldd	r14, Z+46	; 0x2e
    1dde:	e6 94       	lsr	r14
    1de0:	e6 94       	lsr	r14
    1de2:	e6 94       	lsr	r14
    1de4:	e6 94       	lsr	r14
    1de6:	f4 e0       	ldi	r31, 0x04	; 4
    1de8:	ef 9e       	mul	r14, r31
    1dea:	70 01       	movw	r14, r0
    1dec:	11 24       	eor	r1, r1
    1dee:	82 e2       	ldi	r24, 0x22	; 34
    1df0:	e8 0e       	add	r14, r24
    1df2:	f1 1c       	adc	r15, r1
                        // check for data corruption
                        if (len>plen-8){
    1df4:	28 97       	sbiw	r28, 0x08	; 8
    1df6:	ce 15       	cp	r28, r14
    1df8:	df 05       	cpc	r29, r15
    1dfa:	70 f1       	brcs	.+92     	; 0x1e58 <packetloop_arp_icmp_tcp+0x430>
    1dfc:	37 c0       	rjmp	.+110    	; 0x1e6c <packetloop_arp_icmp_tcp+0x444>
                        // way we get it back in every message that comes
                        // from the server:
                        tcp_client_syn(buf,((tcp_fd<<5) | (0x1f & tcpclient_src_port_l)),tcp_client_port);
                }
#endif
                return(0);
    1dfe:	e1 2c       	mov	r14, r1
    1e00:	f1 2c       	mov	r15, r1
    1e02:	34 c0       	rjmp	.+104    	; 0x1e6c <packetloop_arp_icmp_tcp+0x444>
    1e04:	e1 2c       	mov	r14, r1
    1e06:	f1 2c       	mov	r15, r1
    1e08:	31 c0       	rjmp	.+98     	; 0x1e6c <packetloop_arp_icmp_tcp+0x444>
                        if (memcmp(&buf[ETH_ARP_SRC_IP_P],arpip,4)!=0) return(0); // not an arp reply for the IP we were searching           
                        (*client_arp_result_callback)(arpip,arp_reference_number,buf+ETH_ARP_SRC_MAC_P);
                        arpip_state=WGW_HAVE_MAC;
                }
#endif // ARP_MAC_resolver_client
                return(0);
    1e0a:	e1 2c       	mov	r14, r1
    1e0c:	f1 2c       	mov	r15, r1
    1e0e:	2e c0       	rjmp	.+92     	; 0x1e6c <packetloop_arp_icmp_tcp+0x444>
    1e10:	e1 2c       	mov	r14, r1
    1e12:	f1 2c       	mov	r15, r1
    1e14:	2b c0       	rjmp	.+86     	; 0x1e6c <packetloop_arp_icmp_tcp+0x444>
                        make_arp_answer_from_request(buf);
                }
#ifdef ARP_MAC_resolver_client
                if ((arpip_state & WGW_ACCEPT_ARP_REPLY) && (buf[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REPLY_L_V)){
                        // is it an arp reply 
                        if (memcmp(&buf[ETH_ARP_SRC_IP_P],arpip,4)!=0) return(0); // not an arp reply for the IP we were searching           
    1e16:	e1 2c       	mov	r14, r1
    1e18:	f1 2c       	mov	r15, r1
    1e1a:	28 c0       	rjmp	.+80     	; 0x1e6c <packetloop_arp_icmp_tcp+0x444>
                return(0);

        }
        // check if ip packets are for us:
        if(eth_type_is_ip_and_my_ip(buf,plen)==0){
                return(0);
    1e1c:	e1 2c       	mov	r14, r1
    1e1e:	f1 2c       	mov	r15, r1
    1e20:	25 c0       	rjmp	.+74     	; 0x1e6c <packetloop_arp_icmp_tcp+0x444>
                return(0);
        }
        // this is an important check to avoid working on the wrong packets:
        if (plen<54 || buf[IP_PROTO_P]!=IP_PROTO_TCP_V ){
                // smaller than the smallest TCP packet (TCP packet with no options section) or not tcp port
                return(0);
    1e22:	e1 2c       	mov	r14, r1
    1e24:	f1 2c       	mov	r15, r1
    1e26:	22 c0       	rjmp	.+68     	; 0x1e6c <packetloop_arp_icmp_tcp+0x444>
    1e28:	e1 2c       	mov	r14, r1
    1e2a:	f1 2c       	mov	r15, r1
    1e2c:	1f c0       	rjmp	.+62     	; 0x1e6c <packetloop_arp_icmp_tcp+0x444>
    1e2e:	e1 2c       	mov	r14, r1
    1e30:	f1 2c       	mov	r15, r1
    1e32:	1c c0       	rjmp	.+56     	; 0x1e6c <packetloop_arp_icmp_tcp+0x444>
#if defined (WWW_client)
                // workaround to pass pointer to www_client_internal..
                bufptr=buf; 
#endif // WWW_client
                if (check_ip_message_is_from(buf,tcp_otherside_ip)==0){
                        return(0);
    1e34:	e1 2c       	mov	r14, r1
    1e36:	f1 2c       	mov	r15, r1
    1e38:	19 c0       	rjmp	.+50     	; 0x1e6c <packetloop_arp_icmp_tcp+0x444>
                if(tcp_client_state==5){
                        // we get one more final ack to our fin-ack:
                        if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
                                tcp_client_state=6; // in state 6 communication should be finished
                        }
                        return(0);
    1e3a:	e1 2c       	mov	r14, r1
    1e3c:	f1 2c       	mov	r15, r1
    1e3e:	16 c0       	rjmp	.+44     	; 0x1e6c <packetloop_arp_icmp_tcp+0x444>
                // if we just get a fragment then len will be zero
                // and we ack only once we have the full packet
                if (len>0){
                        make_tcp_ack_from_any(buf,len,0);
                }
                return(0);
    1e40:	e1 2c       	mov	r14, r1
    1e42:	f1 2c       	mov	r15, r1
    1e44:	13 c0       	rjmp	.+38     	; 0x1e6c <packetloop_arp_icmp_tcp+0x444>
                        }
                        return(len);
                }
        }
#endif // WWW_server
        return(0);
    1e46:	e1 2c       	mov	r14, r1
    1e48:	f1 2c       	mov	r15, r1
    1e4a:	10 c0       	rjmp	.+32     	; 0x1e6c <packetloop_arp_icmp_tcp+0x444>
    1e4c:	e1 2c       	mov	r14, r1
    1e4e:	f1 2c       	mov	r15, r1
    1e50:	0d c0       	rjmp	.+26     	; 0x1e6c <packetloop_arp_icmp_tcp+0x444>
    1e52:	e1 2c       	mov	r14, r1
    1e54:	f1 2c       	mov	r15, r1
    1e56:	0a c0       	rjmp	.+20     	; 0x1e6c <packetloop_arp_icmp_tcp+0x444>
                        }
                        // Here we misuse len for something else to save a variable
                        len=TCP_DATA_START; // TCP_DATA_START is a formula
                        // check for data corruption
                        if (len>plen-8){
                                return(0);
    1e58:	e1 2c       	mov	r14, r1
    1e5a:	f1 2c       	mov	r15, r1
    1e5c:	07 c0       	rjmp	.+14     	; 0x1e6c <packetloop_arp_icmp_tcp+0x444>
                        make_tcp_ack_from_any(buf,len,TCP_FLAGS_RST_V);
                        // just a single reset, do not repeat if more messages:
                        tcp_client_state=7;
                        return(0);
                }
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
    1e5e:	d8 01       	movw	r26, r16
    1e60:	9f 96       	adiw	r26, 0x2f	; 47
    1e62:	8c 91       	ld	r24, X
    1e64:	80 fd       	sbrc	r24, 0
    1e66:	79 cf       	rjmp	.-270    	; 0x1d5a <packetloop_arp_icmp_tcp+0x332>
                // if we just get a fragment then len will be zero
                // and we ack only once we have the full packet
                if (len>0){
                        make_tcp_ack_from_any(buf,len,0);
                }
                return(0);
    1e68:	e1 2c       	mov	r14, r1
    1e6a:	f1 2c       	mov	r15, r1
                        return(len);
                }
        }
#endif // WWW_server
        return(0);
}
    1e6c:	c7 01       	movw	r24, r14
    1e6e:	df 91       	pop	r29
    1e70:	cf 91       	pop	r28
    1e72:	1f 91       	pop	r17
    1e74:	0f 91       	pop	r16
    1e76:	ff 90       	pop	r15
    1e78:	ef 90       	pop	r14
    1e7a:	df 90       	pop	r13
    1e7c:	08 95       	ret

00001e7e <browserresult_callback>:
                sec++; // stepped every second
	}
}

// the __attribute__((unused)) is a gcc compiler directive to avoid warnings about unsed variables.
void browserresult_callback(uint16_t webstatuscode,uint16_t datapos __attribute__((unused)), uint16_t len __attribute__((unused))){
    1e7e:	08 95       	ret

00001e80 <arpresolver_result_callback>:
}

// the __attribute__((unused)) is a gcc compiler directive to avoid warnings about unsed variables.
void arpresolver_result_callback(uint8_t *ip __attribute__((unused)),uint8_t transaction_number,uint8_t *mac){
        uint8_t i=0;
        if (transaction_number==TRANS_NUM_GWMAC){
    1e80:	61 30       	cpi	r22, 0x01	; 1
    1e82:	59 f4       	brne	.+22     	; 0x1e9a <arpresolver_result_callback+0x1a>
    1e84:	a4 2f       	mov	r26, r20
    1e86:	b5 2f       	mov	r27, r21
    1e88:	e5 e8       	ldi	r30, 0x85	; 133
    1e8a:	f3 e0       	ldi	r31, 0x03	; 3
    1e8c:	2b e8       	ldi	r18, 0x8B	; 139
    1e8e:	33 e0       	ldi	r19, 0x03	; 3
                // copy mac address over:
                while(i<6){gwmac[i]=mac[i];i++;}
    1e90:	8d 91       	ld	r24, X+
    1e92:	81 93       	st	Z+, r24
    1e94:	e2 17       	cp	r30, r18
    1e96:	f3 07       	cpc	r31, r19
    1e98:	d9 f7       	brne	.-10     	; 0x1e90 <arpresolver_result_callback+0x10>
    1e9a:	08 95       	ret

00001e9c <init_cnt2>:

/* setup timer T2 as an interrupt generating time base.
* You must call once sei() in the main program */
void init_cnt2(void)
{
	cnt2step=0;
    1e9c:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <cnt2step>
	PRR&=~(1<<PRTIM2); // write power reduction register to zero
    1ea0:	e4 e6       	ldi	r30, 0x64	; 100
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	80 81       	ld	r24, Z
    1ea6:	8f 7b       	andi	r24, 0xBF	; 191
    1ea8:	80 83       	st	Z, r24
	TIMSK2=(1<<OCIE2A); // compare match on OCR2A
    1eaa:	82 e0       	ldi	r24, 0x02	; 2
    1eac:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	TCNT2=0;  // init counter
    1eb0:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	OCR2A=244; // value to compare against
    1eb4:	94 ef       	ldi	r25, 0xF4	; 244
    1eb6:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	TCCR2A=(1<<WGM21); // do not change any output pin, clear at compare match
    1eba:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	// divide clock by 1024: 12.5MHz/128=12207 Hz
	TCCR2B=(1<<CS22)|(1<<CS21)|(1<<CS20); // clock divider, start counter
    1ebe:	87 e0       	ldi	r24, 0x07	; 7
    1ec0:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    1ec4:	08 95       	ret

00001ec6 <__vector_7>:
	// 12207/244=50Hz
}

// called when TCNT2==OCR2A
// that is in 50Hz intervals
ISR(TIMER2_COMPA_vect){
    1ec6:	1f 92       	push	r1
    1ec8:	0f 92       	push	r0
    1eca:	0f b6       	in	r0, 0x3f	; 63
    1ecc:	0f 92       	push	r0
    1ece:	11 24       	eor	r1, r1
    1ed0:	8f 93       	push	r24
	cnt2step++;
    1ed2:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <cnt2step>
    1ed6:	8f 5f       	subi	r24, 0xFF	; 255
    1ed8:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <cnt2step>
	if (cnt2step>50){
    1edc:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <cnt2step>
    1ee0:	83 33       	cpi	r24, 0x33	; 51
    1ee2:	38 f0       	brcs	.+14     	; 0x1ef2 <__vector_7+0x2c>
                cnt2step=0;
    1ee4:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <cnt2step>
                sec++; // stepped every second
    1ee8:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <sec>
    1eec:	8f 5f       	subi	r24, 0xFF	; 255
    1eee:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <sec>
	}
}
    1ef2:	8f 91       	pop	r24
    1ef4:	0f 90       	pop	r0
    1ef6:	0f be       	out	0x3f, r0	; 63
    1ef8:	0f 90       	pop	r0
    1efa:	1f 90       	pop	r1
    1efc:	18 95       	reti

00001efe <Ether_SendPacket>:
}




void Ether_SendPacket(char* text){
    1efe:	cf 92       	push	r12
    1f00:	df 92       	push	r13
    1f02:	ef 92       	push	r14
    1f04:	ff 92       	push	r15
    1f06:	0f 93       	push	r16
    1f08:	1f 93       	push	r17
    1f0a:	cf 93       	push	r28
    1f0c:	df 93       	push	r29
    1f0e:	6c 01       	movw	r12, r24
	uint16_t dat_p,plen;
	
	sendingPacket = 1;
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <sendingPacket>
	plen=enc28j60PacketReceive(BUFFER_SIZE, buf);
    1f16:	60 e0       	ldi	r22, 0x00	; 0
    1f18:	73 e0       	ldi	r23, 0x03	; 3
    1f1a:	80 e8       	ldi	r24, 0x80	; 128
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	0e 94 1d 07 	call	0xe3a	; 0xe3a <enc28j60PacketReceive>
    1f22:	7c 01       	movw	r14, r24
	buf[BUFFER_SIZE]='\0';
    1f24:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <buf+0x80>
	dat_p=packetloop_arp_icmp_tcp(buf,plen);
    1f28:	bc 01       	movw	r22, r24
    1f2a:	80 e0       	ldi	r24, 0x00	; 0
    1f2c:	93 e0       	ldi	r25, 0x03	; 3
    1f2e:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <packetloop_arp_icmp_tcp>
    1f32:	ec 01       	movw	r28, r24
	if(plen == 0){
    1f34:	e1 14       	cp	r14, r1
    1f36:	f1 04       	cpc	r15, r1
    1f38:	99 f4       	brne	.+38     	; 0x1f60 <Ether_SendPacket+0x62>
		if(start_web_client == 1)
    1f3a:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <start_web_client>
    1f3e:	81 30       	cpi	r24, 0x01	; 1
    1f40:	79 f4       	brne	.+30     	; 0x1f60 <Ether_SendPacket+0x62>
		{
			sec = 0;
    1f42:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <sec>
			start_web_client = 0;
    1f46:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <start_web_client>
			
			client_tcpSend(text,&browserresult_callback,otherside_www_ip,gwmac,(uint8_t*)80);
    1f4a:	00 e5       	ldi	r16, 0x50	; 80
    1f4c:	10 e0       	ldi	r17, 0x00	; 0
    1f4e:	25 e8       	ldi	r18, 0x85	; 133
    1f50:	33 e0       	ldi	r19, 0x03	; 3
    1f52:	41 e8       	ldi	r20, 0x81	; 129
    1f54:	53 e0       	ldi	r21, 0x03	; 3
    1f56:	6f e3       	ldi	r22, 0x3F	; 63
    1f58:	7f e0       	ldi	r23, 0x0F	; 15
    1f5a:	c6 01       	movw	r24, r12
    1f5c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <client_tcpSend>
		}
	}
	if(sec > timeout)
    1f60:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <sec>
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	20 91 0c 06 	lds	r18, 0x060C	; 0x80060c <timeout>
    1f6a:	30 91 0d 06 	lds	r19, 0x060D	; 0x80060d <timeout+0x1>
    1f6e:	28 17       	cp	r18, r24
    1f70:	39 07       	cpc	r19, r25
    1f72:	28 f4       	brcc	.+10     	; 0x1f7e <Ether_SendPacket+0x80>
	{
		sendingPacket = 0;
    1f74:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <sendingPacket>
		start_web_client = 1;
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <start_web_client>
	}
	
	if(dat_p==0){ // plen!=0
    1f7e:	20 97       	sbiw	r28, 0x00	; 0
    1f80:	31 f4       	brne	.+12     	; 0x1f8e <Ether_SendPacket+0x90>
		                         // check for incomming messages not processed
		                         // as part of packetloop_arp_icmp_tcp, e.g udp messages
		                         udp_client_check_for_dns_answer(buf,plen);
    1f82:	b7 01       	movw	r22, r14
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	93 e0       	ldi	r25, 0x03	; 3
    1f88:	0e 94 cb 04 	call	0x996	; 0x996 <udp_client_check_for_dns_answer>
		                         return;
    1f8c:	5b c0       	rjmp	.+182    	; 0x2044 <Ether_SendPacket+0x146>
		                 }
		if (strncmp("POST / timeout",(char *)&(buf[dat_p]),14)==0){
    1f8e:	c0 50       	subi	r28, 0x00	; 0
    1f90:	dd 4f       	sbci	r29, 0xFD	; 253
    1f92:	4e e0       	ldi	r20, 0x0E	; 14
    1f94:	50 e0       	ldi	r21, 0x00	; 0
    1f96:	be 01       	movw	r22, r28
    1f98:	8d e4       	ldi	r24, 0x4D	; 77
    1f9a:	91 e0       	ldi	r25, 0x01	; 1
    1f9c:	0e 94 c7 32 	call	0x658e	; 0x658e <strncmp>
    1fa0:	89 2b       	or	r24, r25
    1fa2:	d9 f4       	brne	.+54     	; 0x1fda <Ether_SendPacket+0xdc>
			sscanf((char *)&(buf[dat_p]), "POST / timeout %d", &timeout);
    1fa4:	8c e0       	ldi	r24, 0x0C	; 12
    1fa6:	96 e0       	ldi	r25, 0x06	; 6
    1fa8:	9f 93       	push	r25
    1faa:	8f 93       	push	r24
    1fac:	8c e5       	ldi	r24, 0x5C	; 92
    1fae:	91 e0       	ldi	r25, 0x01	; 1
    1fb0:	9f 93       	push	r25
    1fb2:	8f 93       	push	r24
    1fb4:	df 93       	push	r29
    1fb6:	cf 93       	push	r28
    1fb8:	0e 94 2f 34 	call	0x685e	; 0x685e <sscanf>
			eeprom_write_word((uint16_t*)0x10, (uint16_t)timeout);
    1fbc:	60 91 0c 06 	lds	r22, 0x060C	; 0x80060c <timeout>
    1fc0:	70 91 0d 06 	lds	r23, 0x060D	; 0x80060d <timeout+0x1>
    1fc4:	80 e1       	ldi	r24, 0x10	; 16
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	0e 94 30 3c 	call	0x7860	; 0x7860 <eeprom_write_word>
    1fcc:	0f 90       	pop	r0
    1fce:	0f 90       	pop	r0
    1fd0:	0f 90       	pop	r0
    1fd2:	0f 90       	pop	r0
    1fd4:	0f 90       	pop	r0
    1fd6:	0f 90       	pop	r0
    1fd8:	35 c0       	rjmp	.+106    	; 0x2044 <Ether_SendPacket+0x146>
		}
		else if (strncmp("POST / setrtc",(char *)&(buf[dat_p]),13)==0){
    1fda:	4d e0       	ldi	r20, 0x0D	; 13
    1fdc:	50 e0       	ldi	r21, 0x00	; 0
    1fde:	be 01       	movw	r22, r28
    1fe0:	8e e6       	ldi	r24, 0x6E	; 110
    1fe2:	91 e0       	ldi	r25, 0x01	; 1
    1fe4:	0e 94 c7 32 	call	0x658e	; 0x658e <strncmp>
    1fe8:	89 2b       	or	r24, r25
    1fea:	61 f5       	brne	.+88     	; 0x2044 <Ether_SendPacket+0x146>
			//rtc_t tempRtc;
			sscanf((char *)&(buf[dat_p]), "POST / setrtc %"SCNu8"/%"SCNu8"/%"SCNu8" %"SCNu8"/%"SCNu8"/%"SCNu8, &rtc.date, &rtc.month, &rtc.year, &rtc.hour, &rtc.min, &rtc.sec);
    1fec:	85 e0       	ldi	r24, 0x05	; 5
    1fee:	96 e0       	ldi	r25, 0x06	; 6
    1ff0:	9f 93       	push	r25
    1ff2:	8f 93       	push	r24
    1ff4:	86 e0       	ldi	r24, 0x06	; 6
    1ff6:	96 e0       	ldi	r25, 0x06	; 6
    1ff8:	9f 93       	push	r25
    1ffa:	8f 93       	push	r24
    1ffc:	87 e0       	ldi	r24, 0x07	; 7
    1ffe:	96 e0       	ldi	r25, 0x06	; 6
    2000:	9f 93       	push	r25
    2002:	8f 93       	push	r24
    2004:	8b e0       	ldi	r24, 0x0B	; 11
    2006:	96 e0       	ldi	r25, 0x06	; 6
    2008:	9f 93       	push	r25
    200a:	8f 93       	push	r24
    200c:	8a e0       	ldi	r24, 0x0A	; 10
    200e:	96 e0       	ldi	r25, 0x06	; 6
    2010:	9f 93       	push	r25
    2012:	8f 93       	push	r24
    2014:	89 e0       	ldi	r24, 0x09	; 9
    2016:	96 e0       	ldi	r25, 0x06	; 6
    2018:	9f 93       	push	r25
    201a:	8f 93       	push	r24
    201c:	8c e7       	ldi	r24, 0x7C	; 124
    201e:	91 e0       	ldi	r25, 0x01	; 1
    2020:	9f 93       	push	r25
    2022:	8f 93       	push	r24
    2024:	df 93       	push	r29
    2026:	cf 93       	push	r28
    2028:	0e 94 2f 34 	call	0x685e	; 0x685e <sscanf>
			RTC_SetDateTime(&rtc);
    202c:	85 e0       	ldi	r24, 0x05	; 5
    202e:	96 e0       	ldi	r25, 0x06	; 6
    2030:	0e 94 67 27 	call	0x4ece	; 0x4ece <RTC_SetDateTime>
    2034:	8d b7       	in	r24, 0x3d	; 61
    2036:	9e b7       	in	r25, 0x3e	; 62
    2038:	40 96       	adiw	r24, 0x10	; 16
    203a:	0f b6       	in	r0, 0x3f	; 63
    203c:	f8 94       	cli
    203e:	9e bf       	out	0x3e, r25	; 62
    2040:	0f be       	out	0x3f, r0	; 63
    2042:	8d bf       	out	0x3d, r24	; 61
		}
}
    2044:	df 91       	pop	r29
    2046:	cf 91       	pop	r28
    2048:	1f 91       	pop	r17
    204a:	0f 91       	pop	r16
    204c:	ff 90       	pop	r15
    204e:	ef 90       	pop	r14
    2050:	df 90       	pop	r13
    2052:	cf 90       	pop	r12
    2054:	08 95       	ret

00002056 <Ether_init>:


void Ether_init()
{
    2056:	cf 93       	push	r28
    2058:	df 93       	push	r29
	 // full external speed)
	 // set the clock prescaler. First write CLKPCE to enable setting
	 // of clock the next four instructions.
	 // Note that the CKDIV8 Fuse determines the initial
	 // value of the CKKPS bits.
	 CLKPR=(1<<CLKPCE); // change enable
    205a:	e1 e6       	ldi	r30, 0x61	; 97
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 e8       	ldi	r24, 0x80	; 128
    2060:	80 83       	st	Z, r24
	 CLKPR=0; // "no pre-scaler"
    2062:	10 82       	st	Z, r1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2064:	c0 e0       	ldi	r28, 0x00	; 0
    2066:	8c 2f       	mov	r24, r28
    2068:	8a 95       	dec	r24
    206a:	f1 f7       	brne	.-4      	; 0x2068 <Ether_init+0x12>
	 _delay_loop_1(0); // 60us

	 /*initialize enc28j60*/
	 enc28j60Init(mymac);
    206c:	82 e2       	ldi	r24, 0x22	; 34
    206e:	91 e0       	ldi	r25, 0x01	; 1
    2070:	0e 94 26 06 	call	0xc4c	; 0xc4c <enc28j60Init>
	 enc28j60clkout(1); // change clkout from 6.25MHz to 12.5MHz
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	0e 94 20 06 	call	0xc40	; 0xc40 <enc28j60clkout>
    207a:	ca 95       	dec	r28
    207c:	f1 f7       	brne	.-4      	; 0x207a <Ether_init+0x24>
	 _delay_loop_1(0); // 60us
	 
	 init_cnt2();
    207e:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <init_cnt2>
	 sei();
    2082:	78 94       	sei
	 /* Magjack leds configuration, see enc28j60 datasheet, page 11 */
	 // LEDB=yellow LEDA=green
	 //
	 // 0x476 is PHLCON LEDA=links status, LEDB=receive/transmit
	 // enc28j60PhyWrite(PHLCON,0b0000 0100 0111 01 10);
	 enc28j60PhyWrite(PHLCON,0x476);
    2084:	66 e7       	ldi	r22, 0x76	; 118
    2086:	74 e0       	ldi	r23, 0x04	; 4
    2088:	84 e1       	ldi	r24, 0x14	; 20
    208a:	0e 94 03 06 	call	0xc06	; 0xc06 <enc28j60PhyWrite>

	 
	 //init the web server ethernet/ip layer:
	 init_udp_or_www_server(mymac,myip);
    208e:	6e e1       	ldi	r22, 0x1E	; 30
    2090:	71 e0       	ldi	r23, 0x01	; 1
    2092:	82 e2       	ldi	r24, 0x22	; 34
    2094:	91 e0       	ldi	r25, 0x01	; 1
    2096:	0e 94 55 0b 	call	0x16aa	; 0x16aa <init_udp_or_www_server>
	 www_server_port(MYWWWPORT);
    209a:	80 e5       	ldi	r24, 0x50	; 80
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <www_server_port>

	 get_mac_with_arp(gwip,TRANS_NUM_GWMAC,&arpresolver_result_callback);
    20a2:	40 e4       	ldi	r20, 0x40	; 64
    20a4:	5f e0       	ldi	r21, 0x0F	; 15
    20a6:	61 e0       	ldi	r22, 0x01	; 1
    20a8:	8a e0       	ldi	r24, 0x0A	; 10
    20aa:	91 e0       	ldi	r25, 0x01	; 1
    20ac:	0e 94 0d 0c 	call	0x181a	; 0x181a <get_mac_with_arp>
	 while(get_mac_with_arp_wait()){
    20b0:	0b c0       	rjmp	.+22     	; 0x20c8 <Ether_init+0x72>
		 // to process the ARP reply we must call the packetloop
		 plen=enc28j60PacketReceive(BUFFER_SIZE, buf);
    20b2:	60 e0       	ldi	r22, 0x00	; 0
    20b4:	73 e0       	ldi	r23, 0x03	; 3
    20b6:	80 e8       	ldi	r24, 0x80	; 128
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	0e 94 1d 07 	call	0xe3a	; 0xe3a <enc28j60PacketReceive>
		 packetloop_arp_icmp_tcp(buf,plen);
    20be:	bc 01       	movw	r22, r24
    20c0:	80 e0       	ldi	r24, 0x00	; 0
    20c2:	93 e0       	ldi	r25, 0x03	; 3
    20c4:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <packetloop_arp_icmp_tcp>
	 //init the web server ethernet/ip layer:
	 init_udp_or_www_server(mymac,myip);
	 www_server_port(MYWWWPORT);

	 get_mac_with_arp(gwip,TRANS_NUM_GWMAC,&arpresolver_result_callback);
	 while(get_mac_with_arp_wait()){
    20c8:	0e 94 06 0c 	call	0x180c	; 0x180c <get_mac_with_arp_wait>
    20cc:	81 11       	cpse	r24, r1
    20ce:	f1 cf       	rjmp	.-30     	; 0x20b2 <Ether_init+0x5c>
		 // to process the ARP reply we must call the packetloop
		 plen=enc28j60PacketReceive(BUFFER_SIZE, buf);
		 packetloop_arp_icmp_tcp(buf,plen);
	 }

	 parse_ip(otherside_www_ip,serverip);
    20d0:	6e e0       	ldi	r22, 0x0E	; 14
    20d2:	71 e0       	ldi	r23, 0x01	; 1
    20d4:	81 e8       	ldi	r24, 0x81	; 129
    20d6:	93 e0       	ldi	r25, 0x03	; 3
    20d8:	0e 94 99 10 	call	0x2132	; 0x2132 <parse_ip>
	 processing_state=2; // no need to do any dns look-up
    20dc:	82 e0       	ldi	r24, 0x02	; 2
    20de:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <processing_state>
					 i++;
				 }
				 processing_state=4;
				 }else{
				 get_mac_with_arp(otherside_www_ip,TRANS_NUM_WEBMAC,&arpresolver_result_callback);
				 processing_state=3;
    20e2:	d3 e0       	ldi	r29, 0x03	; 3
			 }
			 continue;
		 }
		 if (processing_state==3 && get_mac_with_arp_wait()==0){
			 processing_state=4;
    20e4:	c4 e0       	ldi	r28, 0x04	; 4
    20e6:	02 c0       	rjmp	.+4      	; 0x20ec <Ether_init+0x96>
	 parse_ip(otherside_www_ip,serverip);
	 processing_state=2; // no need to do any dns look-up
	 
	 while(processing_state != 4)
	 {
		 if (processing_state==2){
    20e8:	82 30       	cpi	r24, 0x02	; 2
    20ea:	a1 f4       	brne	.+40     	; 0x2114 <Ether_init+0xbe>
			 if (route_via_gw(otherside_www_ip)){
    20ec:	81 e8       	ldi	r24, 0x81	; 129
    20ee:	93 e0       	ldi	r25, 0x03	; 3
    20f0:	0e 94 a3 08 	call	0x1146	; 0x1146 <route_via_gw>
    20f4:	88 23       	and	r24, r24
    20f6:	21 f0       	breq	.+8      	; 0x2100 <Ether_init+0xaa>
				 i=0;
				 while(i<6){
					 otherside_www_gwmac[i]=gwmac[i];
					 i++;
				 }
				 processing_state=4;
    20f8:	84 e0       	ldi	r24, 0x04	; 4
    20fa:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <processing_state>
    20fe:	16 c0       	rjmp	.+44     	; 0x212c <Ether_init+0xd6>
				 }else{
				 get_mac_with_arp(otherside_www_ip,TRANS_NUM_WEBMAC,&arpresolver_result_callback);
    2100:	40 e4       	ldi	r20, 0x40	; 64
    2102:	5f e0       	ldi	r21, 0x0F	; 15
    2104:	62 e0       	ldi	r22, 0x02	; 2
    2106:	81 e8       	ldi	r24, 0x81	; 129
    2108:	93 e0       	ldi	r25, 0x03	; 3
    210a:	0e 94 0d 0c 	call	0x181a	; 0x181a <get_mac_with_arp>
				 processing_state=3;
    210e:	d0 93 fb 02 	sts	0x02FB, r29	; 0x8002fb <processing_state>
    2112:	08 c0       	rjmp	.+16     	; 0x2124 <Ether_init+0xce>
			 }
			 continue;
		 }
		 if (processing_state==3 && get_mac_with_arp_wait()==0){
    2114:	83 30       	cpi	r24, 0x03	; 3
    2116:	31 f4       	brne	.+12     	; 0x2124 <Ether_init+0xce>
    2118:	0e 94 06 0c 	call	0x180c	; 0x180c <get_mac_with_arp_wait>
    211c:	81 11       	cpse	r24, r1
    211e:	02 c0       	rjmp	.+4      	; 0x2124 <Ether_init+0xce>
			 processing_state=4;
    2120:	c0 93 fb 02 	sts	0x02FB, r28	; 0x8002fb <processing_state>
	 }

	 parse_ip(otherside_www_ip,serverip);
	 processing_state=2; // no need to do any dns look-up
	 
	 while(processing_state != 4)
    2124:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <processing_state>
    2128:	84 30       	cpi	r24, 0x04	; 4
    212a:	f1 f6       	brne	.-68     	; 0x20e8 <Ether_init+0x92>
		 }
		 if (processing_state==3 && get_mac_with_arp_wait()==0){
			 processing_state=4;
		 }
	 }
}
    212c:	df 91       	pop	r29
    212e:	cf 91       	pop	r28
    2130:	08 95       	ret

00002132 <parse_ip>:

#endif // URLENCODE_websrv_help

// parse a string that is an IP address and extract the IP to ip_byte_str
uint8_t parse_ip(uint8_t *ip_byte_str,const char *str)
{
    2132:	af 92       	push	r10
    2134:	bf 92       	push	r11
    2136:	df 92       	push	r13
    2138:	ef 92       	push	r14
    213a:	ff 92       	push	r15
    213c:	0f 93       	push	r16
    213e:	1f 93       	push	r17
    2140:	cf 93       	push	r28
    2142:	df 93       	push	r29
    2144:	00 d0       	rcall	.+0      	; 0x2146 <parse_ip+0x14>
    2146:	00 d0       	rcall	.+0      	; 0x2148 <parse_ip+0x16>
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
    214c:	fc 01       	movw	r30, r24
        char strbuf[4];
        uint8_t bufpos=0;
        uint8_t i=0;
        while(i<4){
                ip_byte_str[i]=0;
    214e:	10 82       	st	Z, r1
    2150:	11 82       	std	Z+1, r1	; 0x01
    2152:	12 82       	std	Z+2, r1	; 0x02
    2154:	13 82       	std	Z+3, r1	; 0x03
                i++;
        }
        i=0;
        while(*str && i<4){
    2156:	db 01       	movw	r26, r22
    2158:	9c 91       	ld	r25, X
    215a:	99 23       	and	r25, r25
    215c:	09 f4       	brne	.+2      	; 0x2160 <parse_ip+0x2e>
    215e:	48 c0       	rjmp	.+144    	; 0x21f0 <parse_ip+0xbe>
    2160:	7f 01       	movw	r14, r30
    2162:	8b 01       	movw	r16, r22
    2164:	0f 5f       	subi	r16, 0xFF	; 255
    2166:	1f 4f       	sbci	r17, 0xFF	; 255
    2168:	d1 2c       	mov	r13, r1
    216a:	20 e0       	ldi	r18, 0x00	; 0
                // if a number then start
                if (bufpos < 3 && isdigit(*str)){
    216c:	23 30       	cpi	r18, 0x03	; 3
    216e:	78 f4       	brcc	.+30     	; 0x218e <parse_ip+0x5c>
    2170:	49 2f       	mov	r20, r25
    2172:	50 e0       	ldi	r21, 0x00	; 0
    2174:	40 53       	subi	r20, 0x30	; 48
    2176:	51 09       	sbc	r21, r1
    2178:	4a 30       	cpi	r20, 0x0A	; 10
    217a:	51 05       	cpc	r21, r1
    217c:	40 f4       	brcc	.+16     	; 0x218e <parse_ip+0x5c>
                        strbuf[bufpos]=*str; // copy
    217e:	e1 e0       	ldi	r30, 0x01	; 1
    2180:	f0 e0       	ldi	r31, 0x00	; 0
    2182:	ec 0f       	add	r30, r28
    2184:	fd 1f       	adc	r31, r29
    2186:	e2 0f       	add	r30, r18
    2188:	f1 1d       	adc	r31, r1
    218a:	90 83       	st	Z, r25
                        bufpos++;
    218c:	2f 5f       	subi	r18, 0xFF	; 255
                }
                if (bufpos && *str == '.'){
    218e:	22 23       	and	r18, r18
    2190:	a1 f0       	breq	.+40     	; 0x21ba <parse_ip+0x88>
    2192:	9e 32       	cpi	r25, 0x2E	; 46
    2194:	91 f4       	brne	.+36     	; 0x21ba <parse_ip+0x88>
                        strbuf[bufpos]='\0';
    2196:	e1 e0       	ldi	r30, 0x01	; 1
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	ec 0f       	add	r30, r28
    219c:	fd 1f       	adc	r31, r29
    219e:	e2 0f       	add	r30, r18
    21a0:	f1 1d       	adc	r31, r1
    21a2:	10 82       	st	Z, r1
                        ip_byte_str[i]=(atoi(strbuf)&0xff);
    21a4:	57 01       	movw	r10, r14
    21a6:	ad 0c       	add	r10, r13
    21a8:	b1 1c       	adc	r11, r1
    21aa:	ce 01       	movw	r24, r28
    21ac:	01 96       	adiw	r24, 0x01	; 1
    21ae:	0e 94 81 32 	call	0x6502	; 0x6502 <atoi>
    21b2:	f5 01       	movw	r30, r10
    21b4:	80 83       	st	Z, r24
                        i++;
    21b6:	d3 94       	inc	r13
                        bufpos=0;
    21b8:	20 e0       	ldi	r18, 0x00	; 0
        while(i<4){
                ip_byte_str[i]=0;
                i++;
        }
        i=0;
        while(*str && i<4){
    21ba:	d8 01       	movw	r26, r16
    21bc:	9d 91       	ld	r25, X+
    21be:	8d 01       	movw	r16, r26
    21c0:	99 23       	and	r25, r25
    21c2:	19 f0       	breq	.+6      	; 0x21ca <parse_ip+0x98>
    21c4:	b3 e0       	ldi	r27, 0x03	; 3
    21c6:	bd 15       	cp	r27, r13
    21c8:	88 f6       	brcc	.-94     	; 0x216c <parse_ip+0x3a>
                        i++;
                        bufpos=0;
                }
                str++;
        }
        if (i==3){ // must have read the first componets of the IP
    21ca:	e3 e0       	ldi	r30, 0x03	; 3
    21cc:	de 12       	cpse	r13, r30
    21ce:	12 c0       	rjmp	.+36     	; 0x21f4 <parse_ip+0xc2>
                strbuf[bufpos]='\0';
    21d0:	e1 e0       	ldi	r30, 0x01	; 1
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	ec 0f       	add	r30, r28
    21d6:	fd 1f       	adc	r31, r29
    21d8:	e2 0f       	add	r30, r18
    21da:	f1 1d       	adc	r31, r1
    21dc:	10 82       	st	Z, r1
                ip_byte_str[i]=(atoi(strbuf)&0xff);
    21de:	ce 01       	movw	r24, r28
    21e0:	01 96       	adiw	r24, 0x01	; 1
    21e2:	0e 94 81 32 	call	0x6502	; 0x6502 <atoi>
    21e6:	d7 01       	movw	r26, r14
    21e8:	13 96       	adiw	r26, 0x03	; 3
    21ea:	8c 93       	st	X, r24
                return(0);
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	03 c0       	rjmp	.+6      	; 0x21f6 <parse_ip+0xc4>
        }
        return(1);
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	01 c0       	rjmp	.+2      	; 0x21f6 <parse_ip+0xc4>
    21f4:	81 e0       	ldi	r24, 0x01	; 1
}
    21f6:	0f 90       	pop	r0
    21f8:	0f 90       	pop	r0
    21fa:	0f 90       	pop	r0
    21fc:	0f 90       	pop	r0
    21fe:	df 91       	pop	r29
    2200:	cf 91       	pop	r28
    2202:	1f 91       	pop	r17
    2204:	0f 91       	pop	r16
    2206:	ff 90       	pop	r15
    2208:	ef 90       	pop	r14
    220a:	df 90       	pop	r13
    220c:	bf 90       	pop	r11
    220e:	af 90       	pop	r10
    2210:	08 95       	ret

00002212 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    2212:	cf 93       	push	r28
    2214:	df 93       	push	r29
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

#if _WORD_ACCESS == 1
	while (cnt >= sizeof (int)) {
    2216:	42 30       	cpi	r20, 0x02	; 2
    2218:	51 05       	cpc	r21, r1
    221a:	c0 f0       	brcs	.+48     	; 0x224c <mem_cpy+0x3a>
    221c:	db 01       	movw	r26, r22
    221e:	fc 01       	movw	r30, r24
    2220:	9a 01       	movw	r18, r20
		*(int*)d = *(int*)s;
    2222:	cd 91       	ld	r28, X+
    2224:	dd 91       	ld	r29, X+
    2226:	c1 93       	st	Z+, r28
    2228:	d1 93       	st	Z+, r29
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
    222a:	22 50       	subi	r18, 0x02	; 2
    222c:	31 09       	sbc	r19, r1
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

#if _WORD_ACCESS == 1
	while (cnt >= sizeof (int)) {
    222e:	22 30       	cpi	r18, 0x02	; 2
    2230:	31 05       	cpc	r19, r1
    2232:	b8 f7       	brcc	.-18     	; 0x2222 <mem_cpy+0x10>
    2234:	9a 01       	movw	r18, r20
    2236:	22 50       	subi	r18, 0x02	; 2
    2238:	31 09       	sbc	r19, r1
    223a:	2e 7f       	andi	r18, 0xFE	; 254
    223c:	2e 5f       	subi	r18, 0xFE	; 254
    223e:	3f 4f       	sbci	r19, 0xFF	; 255
    2240:	82 0f       	add	r24, r18
    2242:	93 1f       	adc	r25, r19
    2244:	62 0f       	add	r22, r18
    2246:	73 1f       	adc	r23, r19
    2248:	41 70       	andi	r20, 0x01	; 1
    224a:	55 27       	eor	r21, r21
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
    224c:	41 15       	cp	r20, r1
    224e:	51 05       	cpc	r21, r1
    2250:	49 f0       	breq	.+18     	; 0x2264 <mem_cpy+0x52>
    2252:	db 01       	movw	r26, r22
    2254:	fc 01       	movw	r30, r24
    2256:	48 0f       	add	r20, r24
    2258:	59 1f       	adc	r21, r25
		*d++ = *s++;
    225a:	9d 91       	ld	r25, X+
    225c:	91 93       	st	Z+, r25
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
    225e:	e4 17       	cp	r30, r20
    2260:	f5 07       	cpc	r31, r21
    2262:	d9 f7       	brne	.-10     	; 0x225a <mem_cpy+0x48>
		*d++ = *s++;
}
    2264:	df 91       	pop	r29
    2266:	cf 91       	pop	r28
    2268:	08 95       	ret

0000226a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
    226a:	cf 93       	push	r28
    226c:	df 93       	push	r29
    226e:	ec 01       	movw	r28, r24
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
    2270:	a8 81       	ld	r26, Y
    2272:	b9 81       	ldd	r27, Y+1	; 0x01
    2274:	10 97       	sbiw	r26, 0x00	; 0
    2276:	f9 f0       	breq	.+62     	; 0x22b6 <get_ldnumber+0x4c>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
    2278:	4c 91       	ld	r20, X
    227a:	41 32       	cpi	r20, 0x21	; 33
    227c:	58 f0       	brcs	.+22     	; 0x2294 <get_ldnumber+0x2a>
    227e:	4a 33       	cpi	r20, 0x3A	; 58
    2280:	31 f1       	breq	.+76     	; 0x22ce <get_ldnumber+0x64>
    2282:	fd 01       	movw	r30, r26
    2284:	31 96       	adiw	r30, 0x01	; 1
    2286:	9f 01       	movw	r18, r30
    2288:	91 91       	ld	r25, Z+
    228a:	91 32       	cpi	r25, 0x21	; 33
    228c:	28 f0       	brcs	.+10     	; 0x2298 <get_ldnumber+0x2e>
    228e:	9a 33       	cpi	r25, 0x3A	; 58
    2290:	d1 f7       	brne	.-12     	; 0x2286 <get_ldnumber+0x1c>
    2292:	04 c0       	rjmp	.+8      	; 0x229c <get_ldnumber+0x32>
    2294:	94 2f       	mov	r25, r20
    2296:	9d 01       	movw	r18, r26
		if (*tt == ':') {	/* If a ':' is exist in the path name */
    2298:	9a 33       	cpi	r25, 0x3A	; 58
    229a:	81 f4       	brne	.+32     	; 0x22bc <get_ldnumber+0x52>
			tp = *path;
			i = *tp++ - '0'; 
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
    229c:	cd 01       	movw	r24, r26
    229e:	01 96       	adiw	r24, 0x01	; 1
    22a0:	28 17       	cp	r18, r24
    22a2:	39 07       	cpc	r19, r25
    22a4:	71 f4       	brne	.+28     	; 0x22c2 <get_ldnumber+0x58>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
    22a6:	40 33       	cpi	r20, 0x30	; 48
    22a8:	79 f4       	brne	.+30     	; 0x22c8 <get_ldnumber+0x5e>
					vol = (int)i;
					*path = ++tt;
    22aa:	12 96       	adiw	r26, 0x02	; 2
    22ac:	b9 83       	std	Y+1, r27	; 0x01
    22ae:	a8 83       	st	Y, r26
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
					vol = (int)i;
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	0e c0       	rjmp	.+28     	; 0x22d2 <get_ldnumber+0x68>
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
    22b6:	8f ef       	ldi	r24, 0xFF	; 255
    22b8:	9f ef       	ldi	r25, 0xFF	; 255
    22ba:	0b c0       	rjmp	.+22     	; 0x22d2 <get_ldnumber+0x68>
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
    22bc:	80 e0       	ldi	r24, 0x00	; 0
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	08 c0       	rjmp	.+16     	; 0x22d2 <get_ldnumber+0x68>
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
    22c2:	8f ef       	ldi	r24, 0xFF	; 255
    22c4:	9f ef       	ldi	r25, 0xFF	; 255
    22c6:	05 c0       	rjmp	.+10     	; 0x22d2 <get_ldnumber+0x68>
    22c8:	8f ef       	ldi	r24, 0xFF	; 255
    22ca:	9f ef       	ldi	r25, 0xFF	; 255
    22cc:	02 c0       	rjmp	.+4      	; 0x22d2 <get_ldnumber+0x68>
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
    22ce:	9d 01       	movw	r18, r26
    22d0:	e5 cf       	rjmp	.-54     	; 0x229c <get_ldnumber+0x32>
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
    22d2:	df 91       	pop	r29
    22d4:	cf 91       	pop	r28
    22d6:	08 95       	ret

000022d8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
    22d8:	8f 92       	push	r8
    22da:	9f 92       	push	r9
    22dc:	af 92       	push	r10
    22de:	bf 92       	push	r11
    22e0:	cf 92       	push	r12
    22e2:	df 92       	push	r13
    22e4:	ef 92       	push	r14
    22e6:	ff 92       	push	r15
    22e8:	0f 93       	push	r16
    22ea:	1f 93       	push	r17
    22ec:	cf 93       	push	r28
    22ee:	df 93       	push	r29
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;


	if (fs->wflag) {	/* Write back the sector if it is dirty */
    22f0:	fc 01       	movw	r30, r24
    22f2:	24 81       	ldd	r18, Z+4	; 0x04
    22f4:	22 23       	and	r18, r18
    22f6:	09 f4       	brne	.+2      	; 0x22fa <sync_window+0x22>
    22f8:	46 c0       	rjmp	.+140    	; 0x2386 <sync_window+0xae>
    22fa:	ec 01       	movw	r28, r24
		wsect = fs->winsect;	/* Current sector number */
    22fc:	c2 a4       	ldd	r12, Z+42	; 0x2a
    22fe:	d3 a4       	ldd	r13, Z+43	; 0x2b
    2300:	e4 a4       	ldd	r14, Z+44	; 0x2c
    2302:	f5 a4       	ldd	r15, Z+45	; 0x2d
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
    2304:	5c 01       	movw	r10, r24
    2306:	fe e2       	ldi	r31, 0x2E	; 46
    2308:	af 0e       	add	r10, r31
    230a:	b1 1c       	adc	r11, r1
    230c:	01 e0       	ldi	r16, 0x01	; 1
    230e:	10 e0       	ldi	r17, 0x00	; 0
    2310:	a7 01       	movw	r20, r14
    2312:	96 01       	movw	r18, r12
    2314:	b5 01       	movw	r22, r10
    2316:	89 81       	ldd	r24, Y+1	; 0x01
    2318:	0e 94 61 24 	call	0x48c2	; 0x48c2 <disk_write>
    231c:	81 11       	cpse	r24, r1
    231e:	35 c0       	rjmp	.+106    	; 0x238a <sync_window+0xb2>
			res = FR_DISK_ERR;
		} else {
			fs->wflag = 0;
    2320:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
    2322:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2324:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2326:	a8 a1       	ldd	r26, Y+32	; 0x20
    2328:	b9 a1       	ldd	r27, Y+33	; 0x21
    232a:	b7 01       	movw	r22, r14
    232c:	a6 01       	movw	r20, r12
    232e:	48 1b       	sub	r20, r24
    2330:	59 0b       	sbc	r21, r25
    2332:	6a 0b       	sbc	r22, r26
    2334:	7b 0b       	sbc	r23, r27
    2336:	8e 89       	ldd	r24, Y+22	; 0x16
    2338:	9f 89       	ldd	r25, Y+23	; 0x17
    233a:	a8 8d       	ldd	r26, Y+24	; 0x18
    233c:	b9 8d       	ldd	r27, Y+25	; 0x19
    233e:	48 17       	cp	r20, r24
    2340:	59 07       	cpc	r21, r25
    2342:	6a 07       	cpc	r22, r26
    2344:	7b 07       	cpc	r23, r27
    2346:	18 f5       	brcc	.+70     	; 0x238e <sync_window+0xb6>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
    2348:	8b 80       	ldd	r8, Y+3	; 0x03
    234a:	91 2c       	mov	r9, r1
    234c:	82 e0       	ldi	r24, 0x02	; 2
    234e:	88 16       	cp	r8, r24
    2350:	91 04       	cpc	r9, r1
    2352:	f8 f0       	brcs	.+62     	; 0x2392 <sync_window+0xba>
					wsect += fs->fsize;
    2354:	8e 89       	ldd	r24, Y+22	; 0x16
    2356:	9f 89       	ldd	r25, Y+23	; 0x17
    2358:	a8 8d       	ldd	r26, Y+24	; 0x18
    235a:	b9 8d       	ldd	r27, Y+25	; 0x19
    235c:	c8 0e       	add	r12, r24
    235e:	d9 1e       	adc	r13, r25
    2360:	ea 1e       	adc	r14, r26
    2362:	fb 1e       	adc	r15, r27
					disk_write(fs->drv, fs->win, wsect, 1);
    2364:	01 e0       	ldi	r16, 0x01	; 1
    2366:	10 e0       	ldi	r17, 0x00	; 0
    2368:	a7 01       	movw	r20, r14
    236a:	96 01       	movw	r18, r12
    236c:	b5 01       	movw	r22, r10
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	0e 94 61 24 	call	0x48c2	; 0x48c2 <disk_write>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
			res = FR_DISK_ERR;
		} else {
			fs->wflag = 0;
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
    2374:	e1 e0       	ldi	r30, 0x01	; 1
    2376:	8e 1a       	sub	r8, r30
    2378:	91 08       	sbc	r9, r1
    237a:	f1 e0       	ldi	r31, 0x01	; 1
    237c:	8f 16       	cp	r8, r31
    237e:	91 04       	cpc	r9, r1
    2380:	49 f7       	brne	.-46     	; 0x2354 <sync_window+0x7c>
	FATFS* fs		/* File system object */
)
{
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	07 c0       	rjmp	.+14     	; 0x2394 <sync_window+0xbc>
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	05 c0       	rjmp	.+10     	; 0x2394 <sync_window+0xbc>


	if (fs->wflag) {	/* Write back the sector if it is dirty */
		wsect = fs->winsect;	/* Current sector number */
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
			res = FR_DISK_ERR;
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	03 c0       	rjmp	.+6      	; 0x2394 <sync_window+0xbc>
	FATFS* fs		/* File system object */
)
{
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	01 c0       	rjmp	.+2      	; 0x2394 <sync_window+0xbc>
    2392:	80 e0       	ldi	r24, 0x00	; 0
				}
			}
		}
	}
	return res;
}
    2394:	df 91       	pop	r29
    2396:	cf 91       	pop	r28
    2398:	1f 91       	pop	r17
    239a:	0f 91       	pop	r16
    239c:	ff 90       	pop	r15
    239e:	ef 90       	pop	r14
    23a0:	df 90       	pop	r13
    23a2:	cf 90       	pop	r12
    23a4:	bf 90       	pop	r11
    23a6:	af 90       	pop	r10
    23a8:	9f 90       	pop	r9
    23aa:	8f 90       	pop	r8
    23ac:	08 95       	ret

000023ae <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)
{
    23ae:	8f 92       	push	r8
    23b0:	9f 92       	push	r9
    23b2:	af 92       	push	r10
    23b4:	bf 92       	push	r11
    23b6:	ff 92       	push	r15
    23b8:	0f 93       	push	r16
    23ba:	1f 93       	push	r17
    23bc:	cf 93       	push	r28
    23be:	df 93       	push	r29
    23c0:	ec 01       	movw	r28, r24
    23c2:	4a 01       	movw	r8, r20
    23c4:	5b 01       	movw	r10, r22
	FRESULT res = FR_OK;


	if (sector != fs->winsect) {	/* Window offset changed? */
    23c6:	8a a5       	ldd	r24, Y+42	; 0x2a
    23c8:	9b a5       	ldd	r25, Y+43	; 0x2b
    23ca:	ac a5       	ldd	r26, Y+44	; 0x2c
    23cc:	bd a5       	ldd	r27, Y+45	; 0x2d
    23ce:	84 17       	cp	r24, r20
    23d0:	95 07       	cpc	r25, r21
    23d2:	a6 07       	cpc	r26, r22
    23d4:	b7 07       	cpc	r27, r23
    23d6:	e9 f0       	breq	.+58     	; 0x2412 <move_window+0x64>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
    23d8:	ce 01       	movw	r24, r28
    23da:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <sync_window>
    23de:	f8 2e       	mov	r15, r24
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
    23e0:	81 11       	cpse	r24, r1
    23e2:	18 c0       	rjmp	.+48     	; 0x2414 <move_window+0x66>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
    23e4:	01 e0       	ldi	r16, 0x01	; 1
    23e6:	10 e0       	ldi	r17, 0x00	; 0
    23e8:	a5 01       	movw	r20, r10
    23ea:	94 01       	movw	r18, r8
    23ec:	be 01       	movw	r22, r28
    23ee:	62 5d       	subi	r22, 0xD2	; 210
    23f0:	7f 4f       	sbci	r23, 0xFF	; 255
    23f2:	89 81       	ldd	r24, Y+1	; 0x01
    23f4:	0e 94 0b 24 	call	0x4816	; 0x4816 <disk_read>
    23f8:	88 23       	and	r24, r24
    23fa:	31 f0       	breq	.+12     	; 0x2408 <move_window+0x5a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
				res = FR_DISK_ERR;
    23fc:	ff 24       	eor	r15, r15
    23fe:	f3 94       	inc	r15
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
    2400:	88 24       	eor	r8, r8
    2402:	8a 94       	dec	r8
    2404:	98 2c       	mov	r9, r8
    2406:	54 01       	movw	r10, r8
				res = FR_DISK_ERR;
			}
			fs->winsect = sector;
    2408:	8a a6       	std	Y+42, r8	; 0x2a
    240a:	9b a6       	std	Y+43, r9	; 0x2b
    240c:	ac a6       	std	Y+44, r10	; 0x2c
    240e:	bd a6       	std	Y+45, r11	; 0x2d
    2410:	01 c0       	rjmp	.+2      	; 0x2414 <move_window+0x66>
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)
{
	FRESULT res = FR_OK;
    2412:	f1 2c       	mov	r15, r1
			}
			fs->winsect = sector;
		}
	}
	return res;
}
    2414:	8f 2d       	mov	r24, r15
    2416:	df 91       	pop	r29
    2418:	cf 91       	pop	r28
    241a:	1f 91       	pop	r17
    241c:	0f 91       	pop	r16
    241e:	ff 90       	pop	r15
    2420:	bf 90       	pop	r11
    2422:	af 90       	pop	r10
    2424:	9f 90       	pop	r9
    2426:	8f 90       	pop	r8
    2428:	08 95       	ret

0000242a <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    242a:	cf 93       	push	r28
    242c:	df 93       	push	r29
    242e:	ec 01       	movw	r28, r24
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
    2430:	1c 82       	std	Y+4, r1	; 0x04
    2432:	8f ef       	ldi	r24, 0xFF	; 255
    2434:	9f ef       	ldi	r25, 0xFF	; 255
    2436:	dc 01       	movw	r26, r24
    2438:	8a a7       	std	Y+42, r24	; 0x2a
    243a:	9b a7       	std	Y+43, r25	; 0x2b
    243c:	ac a7       	std	Y+44, r26	; 0x2c
    243e:	bd a7       	std	Y+45, r27	; 0x2d
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
    2440:	ce 01       	movw	r24, r28
    2442:	0e 94 d7 11 	call	0x23ae	; 0x23ae <move_window>
    2446:	81 11       	cpse	r24, r1
    2448:	23 c0       	rjmp	.+70     	; 0x2490 <check_fs+0x66>
		return 3;

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
    244a:	fe 01       	movw	r30, r28
    244c:	e4 5d       	subi	r30, 0xD4	; 212
    244e:	fd 4f       	sbci	r31, 0xFD	; 253
    2450:	80 81       	ld	r24, Z
    2452:	91 81       	ldd	r25, Z+1	; 0x01
    2454:	85 35       	cpi	r24, 0x55	; 85
    2456:	9a 4a       	sbci	r25, 0xAA	; 170
    2458:	e9 f4       	brne	.+58     	; 0x2494 <check_fs+0x6a>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
    245a:	e8 5c       	subi	r30, 0xC8	; 200
    245c:	f1 40       	sbci	r31, 0x01	; 1
    245e:	80 81       	ld	r24, Z
    2460:	91 81       	ldd	r25, Z+1	; 0x01
    2462:	a2 81       	ldd	r26, Z+2	; 0x02
    2464:	b3 81       	ldd	r27, Z+3	; 0x03
    2466:	bb 27       	eor	r27, r27
    2468:	86 34       	cpi	r24, 0x46	; 70
    246a:	91 44       	sbci	r25, 0x41	; 65
    246c:	a4 45       	sbci	r26, 0x54	; 84
    246e:	b1 05       	cpc	r27, r1
    2470:	99 f0       	breq	.+38     	; 0x2498 <check_fs+0x6e>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    2472:	c0 58       	subi	r28, 0x80	; 128
    2474:	df 4f       	sbci	r29, 0xFF	; 255
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
		return 3;
    2476:	48 81       	ld	r20, Y
    2478:	59 81       	ldd	r21, Y+1	; 0x01
    247a:	6a 81       	ldd	r22, Y+2	; 0x02
    247c:	7b 81       	ldd	r23, Y+3	; 0x03
    247e:	77 27       	eor	r23, r23
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	46 34       	cpi	r20, 0x46	; 70
    2484:	51 44       	sbci	r21, 0x41	; 65
    2486:	64 45       	sbci	r22, 0x54	; 84
    2488:	71 05       	cpc	r23, r1
    248a:	39 f4       	brne	.+14     	; 0x249a <check_fs+0x70>
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	05 c0       	rjmp	.+10     	; 0x249a <check_fs+0x70>
    2490:	83 e0       	ldi	r24, 0x03	; 3
    2492:	03 c0       	rjmp	.+6      	; 0x249a <check_fs+0x70>

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
    2494:	82 e0       	ldi	r24, 0x02	; 2
    2496:	01 c0       	rjmp	.+2      	; 0x249a <check_fs+0x70>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
		return 0;
    2498:	80 e0       	ldi	r24, 0x00	; 0
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
		return 0;

	return 1;
}
    249a:	df 91       	pop	r29
    249c:	cf 91       	pop	r28
    249e:	08 95       	ret

000024a0 <validate>:
)
{
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
    24a0:	00 97       	sbiw	r24, 0x00	; 0
    24a2:	c9 f0       	breq	.+50     	; 0x24d6 <validate+0x36>
    24a4:	dc 01       	movw	r26, r24
    24a6:	ed 91       	ld	r30, X+
    24a8:	fc 91       	ld	r31, X
    24aa:	11 97       	sbiw	r26, 0x01	; 1
    24ac:	30 97       	sbiw	r30, 0x00	; 0
    24ae:	a9 f0       	breq	.+42     	; 0x24da <validate+0x3a>
    24b0:	20 81       	ld	r18, Z
    24b2:	22 23       	and	r18, r18
    24b4:	a1 f0       	breq	.+40     	; 0x24de <validate+0x3e>
    24b6:	26 81       	ldd	r18, Z+6	; 0x06
    24b8:	37 81       	ldd	r19, Z+7	; 0x07
    24ba:	12 96       	adiw	r26, 0x02	; 2
    24bc:	8d 91       	ld	r24, X+
    24be:	9c 91       	ld	r25, X
    24c0:	13 97       	sbiw	r26, 0x03	; 3
    24c2:	28 17       	cp	r18, r24
    24c4:	39 07       	cpc	r19, r25
    24c6:	69 f4       	brne	.+26     	; 0x24e2 <validate+0x42>
		return FR_INVALID_OBJECT;

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
    24c8:	81 81       	ldd	r24, Z+1	; 0x01
    24ca:	0e 94 04 24 	call	0x4808	; 0x4808 <disk_status>
    24ce:	80 fd       	sbrc	r24, 0
    24d0:	0a c0       	rjmp	.+20     	; 0x24e6 <validate+0x46>
		return FR_NOT_READY;

	return FR_OK;
    24d2:	80 e0       	ldi	r24, 0x00	; 0
    24d4:	08 95       	ret
{
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
		return FR_INVALID_OBJECT;
    24d6:	89 e0       	ldi	r24, 0x09	; 9
    24d8:	08 95       	ret
    24da:	89 e0       	ldi	r24, 0x09	; 9
    24dc:	08 95       	ret
    24de:	89 e0       	ldi	r24, 0x09	; 9
    24e0:	08 95       	ret
    24e2:	89 e0       	ldi	r24, 0x09	; 9
    24e4:	08 95       	ret

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
		return FR_NOT_READY;
    24e6:	83 e0       	ldi	r24, 0x03	; 3

	return FR_OK;
}
    24e8:	08 95       	ret

000024ea <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
    24ea:	2f 92       	push	r2
    24ec:	3f 92       	push	r3
    24ee:	4f 92       	push	r4
    24f0:	5f 92       	push	r5
    24f2:	6f 92       	push	r6
    24f4:	7f 92       	push	r7
    24f6:	8f 92       	push	r8
    24f8:	9f 92       	push	r9
    24fa:	af 92       	push	r10
    24fc:	bf 92       	push	r11
    24fe:	cf 92       	push	r12
    2500:	df 92       	push	r13
    2502:	ef 92       	push	r14
    2504:	ff 92       	push	r15
    2506:	0f 93       	push	r16
    2508:	1f 93       	push	r17
    250a:	cf 93       	push	r28
    250c:	df 93       	push	r29
    250e:	cd b7       	in	r28, 0x3d	; 61
    2510:	de b7       	in	r29, 0x3e	; 62
    2512:	6d 97       	sbiw	r28, 0x1d	; 29
    2514:	0f b6       	in	r0, 0x3f	; 63
    2516:	f8 94       	cli
    2518:	de bf       	out	0x3e, r29	; 62
    251a:	0f be       	out	0x3f, r0	; 63
    251c:	cd bf       	out	0x3d, r28	; 61
    251e:	6c 01       	movw	r12, r24
    2520:	cb 01       	movw	r24, r22
    2522:	b4 2e       	mov	r11, r20
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
    2524:	d6 01       	movw	r26, r12
    2526:	1d 92       	st	X+, r1
    2528:	1c 92       	st	X, r1
	vol = get_ldnumber(path);
    252a:	0e 94 35 11 	call	0x226a	; 0x226a <get_ldnumber>
    252e:	7c 01       	movw	r14, r24
	if (vol < 0) return FR_INVALID_DRIVE;
    2530:	99 23       	and	r25, r25
    2532:	0c f4       	brge	.+2      	; 0x2536 <find_volume+0x4c>
    2534:	04 c2       	rjmp	.+1032   	; 0x293e <find_volume+0x454>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
    2536:	fc 01       	movw	r30, r24
    2538:	ee 0f       	add	r30, r30
    253a:	ff 1f       	adc	r31, r31
    253c:	e3 57       	subi	r30, 0x73	; 115
    253e:	fc 4f       	sbci	r31, 0xFC	; 252
    2540:	00 81       	ld	r16, Z
    2542:	11 81       	ldd	r17, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    2544:	01 15       	cp	r16, r1
    2546:	11 05       	cpc	r17, r1
    2548:	09 f4       	brne	.+2      	; 0x254c <find_volume+0x62>
    254a:	fb c1       	rjmp	.+1014   	; 0x2942 <find_volume+0x458>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
    254c:	f6 01       	movw	r30, r12
    254e:	11 83       	std	Z+1, r17	; 0x01
    2550:	00 83       	st	Z, r16

	if (fs->fs_type) {					/* If the volume has been mounted */
    2552:	d8 01       	movw	r26, r16
    2554:	8c 91       	ld	r24, X
    2556:	88 23       	and	r24, r24
    2558:	69 f0       	breq	.+26     	; 0x2574 <find_volume+0x8a>
		stat = disk_status(fs->drv);
    255a:	11 96       	adiw	r26, 0x01	; 1
    255c:	8c 91       	ld	r24, X
    255e:	0e 94 04 24 	call	0x4808	; 0x4808 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
    2562:	80 fd       	sbrc	r24, 0
    2564:	07 c0       	rjmp	.+14     	; 0x2574 <find_volume+0x8a>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
    2566:	bb 20       	and	r11, r11
    2568:	09 f4       	brne	.+2      	; 0x256c <find_volume+0x82>
    256a:	ed c1       	rjmp	.+986    	; 0x2946 <find_volume+0x45c>
    256c:	82 ff       	sbrs	r24, 2
    256e:	ed c1       	rjmp	.+986    	; 0x294a <find_volume+0x460>
				return FR_WRITE_PROTECTED;
    2570:	8a e0       	ldi	r24, 0x0A	; 10
    2572:	8e c2       	rjmp	.+1308   	; 0x2a90 <find_volume+0x5a6>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    2574:	f8 01       	movw	r30, r16
    2576:	10 82       	st	Z, r1
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    2578:	e1 82       	std	Z+1, r14	; 0x01
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
    257a:	8e 2d       	mov	r24, r14
    257c:	0e 94 40 23 	call	0x4680	; 0x4680 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    2580:	80 fd       	sbrc	r24, 0
    2582:	e5 c1       	rjmp	.+970    	; 0x294e <find_volume+0x464>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    2584:	bb 20       	and	r11, r11
    2586:	09 f4       	brne	.+2      	; 0x258a <find_volume+0xa0>
    2588:	02 c2       	rjmp	.+1028   	; 0x298e <find_volume+0x4a4>
    258a:	82 fd       	sbrc	r24, 2
    258c:	e2 c1       	rjmp	.+964    	; 0x2952 <find_volume+0x468>
    258e:	ff c1       	rjmp	.+1022   	; 0x298e <find_volume+0x4a4>
	bsect = 0;
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
		for (i = 0; i < 4; i++) {			/* Get partition offset */
			pt = fs->win + MBR_Table + i * SZ_PTE;
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
    2590:	80 81       	ld	r24, Z
    2592:	88 23       	and	r24, r24
    2594:	29 f0       	breq	.+10     	; 0x25a0 <find_volume+0xb6>
    2596:	44 80       	ldd	r4, Z+4	; 0x04
    2598:	55 80       	ldd	r5, Z+5	; 0x05
    259a:	66 80       	ldd	r6, Z+6	; 0x06
    259c:	77 80       	ldd	r7, Z+7	; 0x07
    259e:	04 c0       	rjmp	.+8      	; 0x25a8 <find_volume+0xbe>
    25a0:	4e 2c       	mov	r4, r14
    25a2:	5f 2c       	mov	r5, r15
    25a4:	67 2e       	mov	r6, r23
    25a6:	76 2e       	mov	r7, r22
    25a8:	d9 01       	movw	r26, r18
    25aa:	4d 92       	st	X+, r4
    25ac:	5d 92       	st	X+, r5
    25ae:	6d 92       	st	X+, r6
    25b0:	7d 92       	st	X+, r7
    25b2:	9d 01       	movw	r18, r26
    25b4:	70 96       	adiw	r30, 0x10	; 16
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
		for (i = 0; i < 4; i++) {			/* Get partition offset */
    25b6:	4e 17       	cp	r20, r30
    25b8:	5f 07       	cpc	r21, r31
    25ba:	51 f7       	brne	.-44     	; 0x2590 <find_volume+0xa6>
    25bc:	4e 01       	movw	r8, r28
    25be:	b1 e1       	ldi	r27, 0x11	; 17
    25c0:	8b 0e       	add	r8, r27
    25c2:	91 1c       	adc	r9, r1
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
    25c4:	68 94       	set
    25c6:	77 24       	eor	r7, r7
    25c8:	71 f8       	bld	r7, 1
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
    25ca:	f5 01       	movw	r30, r10
    25cc:	c1 90       	ld	r12, Z+
    25ce:	d1 90       	ld	r13, Z+
    25d0:	e1 90       	ld	r14, Z+
    25d2:	f1 90       	ld	r15, Z+
    25d4:	5f 01       	movw	r10, r30
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
    25d6:	c1 14       	cp	r12, r1
    25d8:	d1 04       	cpc	r13, r1
    25da:	e1 04       	cpc	r14, r1
    25dc:	f1 04       	cpc	r15, r1
    25de:	41 f0       	breq	.+16     	; 0x25f0 <find_volume+0x106>
    25e0:	b7 01       	movw	r22, r14
    25e2:	a6 01       	movw	r20, r12
    25e4:	c8 01       	movw	r24, r16
    25e6:	0e 94 15 12 	call	0x242a	; 0x242a <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
    25ea:	81 11       	cpse	r24, r1
    25ec:	02 c0       	rjmp	.+4      	; 0x25f2 <find_volume+0x108>
    25ee:	0d c0       	rjmp	.+26     	; 0x260a <find_volume+0x120>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
    25f0:	87 2d       	mov	r24, r7
		} while (!LD2PT(vol) && fmt && ++i < 4);
    25f2:	a8 14       	cp	r10, r8
    25f4:	b9 04       	cpc	r11, r9
    25f6:	49 f7       	brne	.-46     	; 0x25ca <find_volume+0xe0>
    25f8:	03 c0       	rjmp	.+6      	; 0x2600 <find_volume+0x116>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
    25fa:	c1 2c       	mov	r12, r1
    25fc:	d1 2c       	mov	r13, r1
    25fe:	76 01       	movw	r14, r12
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
		} while (!LD2PT(vol) && fmt && ++i < 4);
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
    2600:	83 30       	cpi	r24, 0x03	; 3
    2602:	09 f4       	brne	.+2      	; 0x2606 <find_volume+0x11c>
    2604:	a8 c1       	rjmp	.+848    	; 0x2956 <find_volume+0x46c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    2606:	81 11       	cpse	r24, r1
    2608:	a8 c1       	rjmp	.+848    	; 0x295a <find_volume+0x470>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
    260a:	d8 01       	movw	r26, r16
    260c:	d9 96       	adiw	r26, 0x39	; 57
    260e:	8d 91       	ld	r24, X+
    2610:	9c 91       	ld	r25, X
    2612:	da 97       	sbiw	r26, 0x3a	; 58
    2614:	81 15       	cp	r24, r1
    2616:	92 40       	sbci	r25, 0x02	; 2
    2618:	09 f0       	breq	.+2      	; 0x261c <find_volume+0x132>
    261a:	a1 c1       	rjmp	.+834    	; 0x295e <find_volume+0x474>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
    261c:	f8 01       	movw	r30, r16
    261e:	ec 5b       	subi	r30, 0xBC	; 188
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	40 80       	ld	r4, Z
    2624:	51 80       	ldd	r5, Z+1	; 0x01
    2626:	61 2c       	mov	r6, r1
    2628:	71 2c       	mov	r7, r1
	if (!fasize) fasize = LD_DWORD(fs->win + BPB_FATSz32);
    262a:	41 14       	cp	r4, r1
    262c:	51 04       	cpc	r5, r1
    262e:	61 04       	cpc	r6, r1
    2630:	71 04       	cpc	r7, r1
    2632:	29 f4       	brne	.+10     	; 0x263e <find_volume+0x154>
    2634:	3e 96       	adiw	r30, 0x0e	; 14
    2636:	40 80       	ld	r4, Z
    2638:	51 80       	ldd	r5, Z+1	; 0x01
    263a:	62 80       	ldd	r6, Z+2	; 0x02
    263c:	73 80       	ldd	r7, Z+3	; 0x03
	fs->fsize = fasize;
    263e:	f8 01       	movw	r30, r16
    2640:	46 8a       	std	Z+22, r4	; 0x16
    2642:	57 8a       	std	Z+23, r5	; 0x17
    2644:	60 8e       	std	Z+24, r6	; 0x18
    2646:	71 8e       	std	Z+25, r7	; 0x19

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
    2648:	a6 ad       	ldd	r26, Z+62	; 0x3e
    264a:	a3 83       	std	Z+3, r26	; 0x03
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
    264c:	8f ef       	ldi	r24, 0xFF	; 255
    264e:	8a 0f       	add	r24, r26
    2650:	82 30       	cpi	r24, 0x02	; 2
    2652:	08 f0       	brcs	.+2      	; 0x2656 <find_volume+0x16c>
    2654:	86 c1       	rjmp	.+780    	; 0x2962 <find_volume+0x478>
		return FR_NO_FILESYSTEM;
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */

	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
    2656:	f3 ad       	ldd	r31, Z+59	; 0x3b
    2658:	f9 8b       	std	Y+17, r31	; 0x11
    265a:	2f 2f       	mov	r18, r31
    265c:	f8 01       	movw	r30, r16
    265e:	22 83       	std	Z+2, r18	; 0x02
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
    2660:	22 23       	and	r18, r18
    2662:	09 f4       	brne	.+2      	; 0x2666 <find_volume+0x17c>
    2664:	80 c1       	rjmp	.+768    	; 0x2966 <find_volume+0x47c>
    2666:	82 2f       	mov	r24, r18
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	9c 01       	movw	r18, r24
    266c:	21 50       	subi	r18, 0x01	; 1
    266e:	31 09       	sbc	r19, r1
    2670:	82 23       	and	r24, r18
    2672:	93 23       	and	r25, r19
    2674:	89 2b       	or	r24, r25
    2676:	09 f0       	breq	.+2      	; 0x267a <find_volume+0x190>
    2678:	78 c1       	rjmp	.+752    	; 0x296a <find_volume+0x480>
		return FR_NO_FILESYSTEM;

	fs->n_rootdir = LD_WORD(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
    267a:	ff 96       	adiw	r30, 0x3f	; 63
    267c:	20 80       	ld	r2, Z
    267e:	31 80       	ldd	r3, Z+1	; 0x01
    2680:	f8 01       	movw	r30, r16
    2682:	31 86       	std	Z+9, r3	; 0x09
    2684:	20 86       	std	Z+8, r2	; 0x08
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
    2686:	c1 01       	movw	r24, r2
    2688:	8f 70       	andi	r24, 0x0F	; 15
    268a:	99 27       	eor	r25, r25
    268c:	89 2b       	or	r24, r25
    268e:	09 f0       	breq	.+2      	; 0x2692 <find_volume+0x1a8>
    2690:	6e c1       	rjmp	.+732    	; 0x296e <find_volume+0x484>
		return FR_NO_FILESYSTEM;

	tsect = LD_WORD(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
    2692:	ef 5b       	subi	r30, 0xBF	; 191
    2694:	ff 4f       	sbci	r31, 0xFF	; 255
    2696:	80 80       	ld	r8, Z
    2698:	91 80       	ldd	r9, Z+1	; 0x01
    269a:	a1 2c       	mov	r10, r1
    269c:	b1 2c       	mov	r11, r1
	if (!tsect) tsect = LD_DWORD(fs->win + BPB_TotSec32);
    269e:	81 14       	cp	r8, r1
    26a0:	91 04       	cpc	r9, r1
    26a2:	a1 04       	cpc	r10, r1
    26a4:	b1 04       	cpc	r11, r1
    26a6:	29 f4       	brne	.+10     	; 0x26b2 <find_volume+0x1c8>
    26a8:	3d 96       	adiw	r30, 0x0d	; 13
    26aa:	80 80       	ld	r8, Z
    26ac:	91 80       	ldd	r9, Z+1	; 0x01
    26ae:	a2 80       	ldd	r10, Z+2	; 0x02
    26b0:	b3 80       	ldd	r11, Z+3	; 0x03

	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
    26b2:	f8 01       	movw	r30, r16
    26b4:	04 ac       	ldd	r0, Z+60	; 0x3c
    26b6:	f5 ad       	ldd	r31, Z+61	; 0x3d
    26b8:	e0 2d       	mov	r30, r0
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
    26ba:	30 97       	sbiw	r30, 0x00	; 0
    26bc:	09 f4       	brne	.+2      	; 0x26c0 <find_volume+0x1d6>
    26be:	59 c1       	rjmp	.+690    	; 0x2972 <find_volume+0x488>
	fs->fsize = fasize;

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
		return FR_NO_FILESYSTEM;
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
    26c0:	b0 e0       	ldi	r27, 0x00	; 0
    26c2:	a3 01       	movw	r20, r6
    26c4:	92 01       	movw	r18, r4
    26c6:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <__muluhisi3>
    26ca:	6a 8f       	std	Y+26, r22	; 0x1a
    26cc:	7b 8f       	std	Y+27, r23	; 0x1b
    26ce:	8c 8f       	std	Y+28, r24	; 0x1c
    26d0:	9d 8f       	std	Y+29, r25	; 0x1d

	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
    26d2:	9f 01       	movw	r18, r30
    26d4:	40 e0       	ldi	r20, 0x00	; 0
    26d6:	50 e0       	ldi	r21, 0x00	; 0
    26d8:	2e 8b       	std	Y+22, r18	; 0x16
    26da:	3f 8b       	std	Y+23, r19	; 0x17
    26dc:	48 8f       	std	Y+24, r20	; 0x18
    26de:	59 8f       	std	Y+25, r21	; 0x19
    26e0:	c1 01       	movw	r24, r2
    26e2:	92 95       	swap	r25
    26e4:	82 95       	swap	r24
    26e6:	8f 70       	andi	r24, 0x0F	; 15
    26e8:	89 27       	eor	r24, r25
    26ea:	9f 70       	andi	r25, 0x0F	; 15
    26ec:	89 27       	eor	r24, r25
    26ee:	28 0f       	add	r18, r24
    26f0:	39 1f       	adc	r19, r25
    26f2:	41 1d       	adc	r20, r1
    26f4:	51 1d       	adc	r21, r1
    26f6:	da 01       	movw	r26, r20
    26f8:	c9 01       	movw	r24, r18
    26fa:	2a 8d       	ldd	r18, Y+26	; 0x1a
    26fc:	3b 8d       	ldd	r19, Y+27	; 0x1b
    26fe:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2700:	5d 8d       	ldd	r21, Y+29	; 0x1d
    2702:	28 0f       	add	r18, r24
    2704:	39 1f       	adc	r19, r25
    2706:	4a 1f       	adc	r20, r26
    2708:	5b 1f       	adc	r21, r27
    270a:	2a 8b       	std	Y+18, r18	; 0x12
    270c:	3b 8b       	std	Y+19, r19	; 0x13
    270e:	4c 8b       	std	Y+20, r20	; 0x14
    2710:	5d 8b       	std	Y+21, r21	; 0x15
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    2712:	82 16       	cp	r8, r18
    2714:	93 06       	cpc	r9, r19
    2716:	a4 06       	cpc	r10, r20
    2718:	b5 06       	cpc	r11, r21
    271a:	08 f4       	brcc	.+2      	; 0x271e <find_volume+0x234>
    271c:	2c c1       	rjmp	.+600    	; 0x2976 <find_volume+0x48c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    271e:	c5 01       	movw	r24, r10
    2720:	b4 01       	movw	r22, r8
    2722:	62 1b       	sub	r22, r18
    2724:	73 0b       	sbc	r23, r19
    2726:	84 0b       	sbc	r24, r20
    2728:	95 0b       	sbc	r25, r21
    272a:	e9 89       	ldd	r30, Y+17	; 0x11
    272c:	2e 2f       	mov	r18, r30
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	40 e0       	ldi	r20, 0x00	; 0
    2732:	50 e0       	ldi	r21, 0x00	; 0
    2734:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <__udivmodsi4>
    2738:	da 01       	movw	r26, r20
    273a:	c9 01       	movw	r24, r18
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    273c:	21 15       	cp	r18, r1
    273e:	31 05       	cpc	r19, r1
    2740:	41 05       	cpc	r20, r1
    2742:	51 05       	cpc	r21, r1
    2744:	09 f4       	brne	.+2      	; 0x2748 <find_volume+0x25e>
    2746:	19 c1       	rjmp	.+562    	; 0x297a <find_volume+0x490>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    2748:	26 3f       	cpi	r18, 0xF6	; 246
    274a:	ff e0       	ldi	r31, 0x0F	; 15
    274c:	3f 07       	cpc	r19, r31
    274e:	41 05       	cpc	r20, r1
    2750:	51 05       	cpc	r21, r1
    2752:	18 f0       	brcs	.+6      	; 0x275a <find_volume+0x270>
    2754:	e2 e0       	ldi	r30, 0x02	; 2
    2756:	e9 8b       	std	Y+17, r30	; 0x11
    2758:	02 c0       	rjmp	.+4      	; 0x275e <find_volume+0x274>
	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
    275a:	f1 e0       	ldi	r31, 0x01	; 1
    275c:	f9 8b       	std	Y+17, r31	; 0x11
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    275e:	86 3f       	cpi	r24, 0xF6	; 246
    2760:	9f 4f       	sbci	r25, 0xFF	; 255
    2762:	a1 05       	cpc	r26, r1
    2764:	b1 05       	cpc	r27, r1
    2766:	08 f0       	brcs	.+2      	; 0x276a <find_volume+0x280>
    2768:	2a c1       	rjmp	.+596    	; 0x29be <find_volume+0x4d4>

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    276a:	49 01       	movw	r8, r18
    276c:	5a 01       	movw	r10, r20
    276e:	82 e0       	ldi	r24, 0x02	; 2
    2770:	88 0e       	add	r8, r24
    2772:	91 1c       	adc	r9, r1
    2774:	a1 1c       	adc	r10, r1
    2776:	b1 1c       	adc	r11, r1
    2778:	d8 01       	movw	r26, r16
    277a:	52 96       	adiw	r26, 0x12	; 18
    277c:	8d 92       	st	X+, r8
    277e:	9d 92       	st	X+, r9
    2780:	ad 92       	st	X+, r10
    2782:	bc 92       	st	X, r11
    2784:	55 97       	sbiw	r26, 0x15	; 21
	fs->volbase = bsect;								/* Volume start sector */
    2786:	f8 01       	movw	r30, r16
    2788:	c2 8e       	std	Z+26, r12	; 0x1a
    278a:	d3 8e       	std	Z+27, r13	; 0x1b
    278c:	e4 8e       	std	Z+28, r14	; 0x1c
    278e:	f5 8e       	std	Z+29, r15	; 0x1d
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    2790:	8e 89       	ldd	r24, Y+22	; 0x16
    2792:	9f 89       	ldd	r25, Y+23	; 0x17
    2794:	a8 8d       	ldd	r26, Y+24	; 0x18
    2796:	b9 8d       	ldd	r27, Y+25	; 0x19
    2798:	8c 0d       	add	r24, r12
    279a:	9d 1d       	adc	r25, r13
    279c:	ae 1d       	adc	r26, r14
    279e:	bf 1d       	adc	r27, r15
    27a0:	86 8f       	std	Z+30, r24	; 0x1e
    27a2:	97 8f       	std	Z+31, r25	; 0x1f
    27a4:	a0 a3       	std	Z+32, r26	; 0x20
    27a6:	b1 a3       	std	Z+33, r27	; 0x21
	fs->database = bsect + sysect;						/* Data start sector */
    27a8:	4a 89       	ldd	r20, Y+18	; 0x12
    27aa:	5b 89       	ldd	r21, Y+19	; 0x13
    27ac:	6c 89       	ldd	r22, Y+20	; 0x14
    27ae:	7d 89       	ldd	r23, Y+21	; 0x15
    27b0:	4c 0d       	add	r20, r12
    27b2:	5d 1d       	adc	r21, r13
    27b4:	6e 1d       	adc	r22, r14
    27b6:	7f 1d       	adc	r23, r15
    27b8:	46 a3       	std	Z+38, r20	; 0x26
    27ba:	57 a3       	std	Z+39, r21	; 0x27
    27bc:	60 a7       	std	Z+40, r22	; 0x28
    27be:	71 a7       	std	Z+41, r23	; 0x29
	if (fmt == FS_FAT32) {
    27c0:	f9 89       	ldd	r31, Y+17	; 0x11
    27c2:	f3 30       	cpi	r31, 0x03	; 3
    27c4:	69 f5       	brne	.+90     	; 0x2820 <find_volume+0x336>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    27c6:	23 28       	or	r2, r3
    27c8:	09 f0       	breq	.+2      	; 0x27cc <find_volume+0x2e2>
    27ca:	d9 c0       	rjmp	.+434    	; 0x297e <find_volume+0x494>
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
    27cc:	f8 01       	movw	r30, r16
    27ce:	e6 5a       	subi	r30, 0xA6	; 166
    27d0:	ff 4f       	sbci	r31, 0xFF	; 255
    27d2:	80 81       	ld	r24, Z
    27d4:	91 81       	ldd	r25, Z+1	; 0x01
    27d6:	a2 81       	ldd	r26, Z+2	; 0x02
    27d8:	b3 81       	ldd	r27, Z+3	; 0x03
    27da:	f8 01       	movw	r30, r16
    27dc:	82 a3       	std	Z+34, r24	; 0x22
    27de:	93 a3       	std	Z+35, r25	; 0x23
    27e0:	a4 a3       	std	Z+36, r26	; 0x24
    27e2:	b5 a3       	std	Z+37, r27	; 0x25
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
    27e4:	88 0c       	add	r8, r8
    27e6:	99 1c       	adc	r9, r9
    27e8:	aa 1c       	adc	r10, r10
    27ea:	bb 1c       	adc	r11, r11
    27ec:	88 0c       	add	r8, r8
    27ee:	99 1c       	adc	r9, r9
    27f0:	aa 1c       	adc	r10, r10
    27f2:	bb 1c       	adc	r11, r11
    27f4:	ff ef       	ldi	r31, 0xFF	; 255
    27f6:	8f 0e       	add	r8, r31
    27f8:	f1 e0       	ldi	r31, 0x01	; 1
    27fa:	9f 1e       	adc	r9, r31
    27fc:	a1 1c       	adc	r10, r1
    27fe:	b1 1c       	adc	r11, r1
    2800:	07 2e       	mov	r0, r23
    2802:	79 e0       	ldi	r23, 0x09	; 9
    2804:	b6 94       	lsr	r11
    2806:	a7 94       	ror	r10
    2808:	97 94       	ror	r9
    280a:	87 94       	ror	r8
    280c:	7a 95       	dec	r23
    280e:	d1 f7       	brne	.-12     	; 0x2804 <find_volume+0x31a>
    2810:	70 2d       	mov	r23, r0
    2812:	48 14       	cp	r4, r8
    2814:	59 04       	cpc	r5, r9
    2816:	6a 04       	cpc	r6, r10
    2818:	7b 04       	cpc	r7, r11
    281a:	08 f4       	brcc	.+2      	; 0x281e <find_volume+0x334>
    281c:	b2 c0       	rjmp	.+356    	; 0x2982 <find_volume+0x498>
    281e:	fb c0       	rjmp	.+502    	; 0x2a16 <find_volume+0x52c>
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    2820:	23 28       	or	r2, r3
    2822:	09 f4       	brne	.+2      	; 0x2826 <find_volume+0x33c>
    2824:	b0 c0       	rjmp	.+352    	; 0x2986 <find_volume+0x49c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    2826:	2a 8d       	ldd	r18, Y+26	; 0x1a
    2828:	3b 8d       	ldd	r19, Y+27	; 0x1b
    282a:	4c 8d       	ldd	r20, Y+28	; 0x1c
    282c:	5d 8d       	ldd	r21, Y+29	; 0x1d
    282e:	82 0f       	add	r24, r18
    2830:	93 1f       	adc	r25, r19
    2832:	a4 1f       	adc	r26, r20
    2834:	b5 1f       	adc	r27, r21
    2836:	f8 01       	movw	r30, r16
    2838:	82 a3       	std	Z+34, r24	; 0x22
    283a:	93 a3       	std	Z+35, r25	; 0x23
    283c:	a4 a3       	std	Z+36, r26	; 0x24
    283e:	b5 a3       	std	Z+37, r27	; 0x25
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    2840:	f9 89       	ldd	r31, Y+17	; 0x11
    2842:	f2 30       	cpi	r31, 0x02	; 2
    2844:	29 f4       	brne	.+10     	; 0x2850 <find_volume+0x366>
    2846:	88 0c       	add	r8, r8
    2848:	99 1c       	adc	r9, r9
    284a:	aa 1c       	adc	r10, r10
    284c:	bb 1c       	adc	r11, r11
    284e:	0a c1       	rjmp	.+532    	; 0x2a64 <find_volume+0x57a>
    2850:	a3 e0       	ldi	r26, 0x03	; 3
    2852:	b0 e0       	ldi	r27, 0x00	; 0
    2854:	a5 01       	movw	r20, r10
    2856:	94 01       	movw	r18, r8
    2858:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <__muluhisi3>
    285c:	dc 01       	movw	r26, r24
    285e:	cb 01       	movw	r24, r22
    2860:	b6 95       	lsr	r27
    2862:	a7 95       	ror	r26
    2864:	97 95       	ror	r25
    2866:	87 95       	ror	r24
    2868:	21 e0       	ldi	r18, 0x01	; 1
    286a:	82 22       	and	r8, r18
    286c:	99 24       	eor	r9, r9
    286e:	aa 24       	eor	r10, r10
    2870:	bb 24       	eor	r11, r11
    2872:	88 0e       	add	r8, r24
    2874:	99 1e       	adc	r9, r25
    2876:	aa 1e       	adc	r10, r26
    2878:	bb 1e       	adc	r11, r27
    287a:	f4 c0       	rjmp	.+488    	; 0x2a64 <find_volume+0x57a>
	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
		&& LD_WORD(fs->win + BPB_FSInfo) == 1
		&& move_window(fs, bsect + 1) == FR_OK)
    287c:	b7 01       	movw	r22, r14
    287e:	a6 01       	movw	r20, r12
    2880:	4f 5f       	subi	r20, 0xFF	; 255
    2882:	5f 4f       	sbci	r21, 0xFF	; 255
    2884:	6f 4f       	sbci	r22, 0xFF	; 255
    2886:	7f 4f       	sbci	r23, 0xFF	; 255
    2888:	c8 01       	movw	r24, r16
    288a:	0e 94 d7 11 	call	0x23ae	; 0x23ae <move_window>
    288e:	81 11       	cpse	r24, r1
    2890:	39 c0       	rjmp	.+114    	; 0x2904 <find_volume+0x41a>
	{
		fs->fsi_flag = 0;
    2892:	d8 01       	movw	r26, r16
    2894:	15 96       	adiw	r26, 0x05	; 5
    2896:	1c 92       	st	X, r1
		if (LD_WORD(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
    2898:	f8 01       	movw	r30, r16
    289a:	e4 5d       	subi	r30, 0xD4	; 212
    289c:	fd 4f       	sbci	r31, 0xFD	; 253
    289e:	80 81       	ld	r24, Z
    28a0:	91 81       	ldd	r25, Z+1	; 0x01
    28a2:	85 35       	cpi	r24, 0x55	; 85
    28a4:	9a 4a       	sbci	r25, 0xAA	; 170
    28a6:	89 f5       	brne	.+98     	; 0x290a <find_volume+0x420>
			&& LD_DWORD(fs->win + FSI_LeadSig) == 0x41615252
    28a8:	f8 01       	movw	r30, r16
    28aa:	86 a5       	ldd	r24, Z+46	; 0x2e
    28ac:	97 a5       	ldd	r25, Z+47	; 0x2f
    28ae:	a0 a9       	ldd	r26, Z+48	; 0x30
    28b0:	b1 a9       	ldd	r27, Z+49	; 0x31
    28b2:	82 35       	cpi	r24, 0x52	; 82
    28b4:	92 45       	sbci	r25, 0x52	; 82
    28b6:	a1 46       	sbci	r26, 0x61	; 97
    28b8:	b1 44       	sbci	r27, 0x41	; 65
    28ba:	51 f5       	brne	.+84     	; 0x2910 <find_volume+0x426>
			&& LD_DWORD(fs->win + FSI_StrucSig) == 0x61417272)
    28bc:	f8 01       	movw	r30, r16
    28be:	ee 5e       	subi	r30, 0xEE	; 238
    28c0:	fd 4f       	sbci	r31, 0xFD	; 253
    28c2:	80 81       	ld	r24, Z
    28c4:	91 81       	ldd	r25, Z+1	; 0x01
    28c6:	a2 81       	ldd	r26, Z+2	; 0x02
    28c8:	b3 81       	ldd	r27, Z+3	; 0x03
    28ca:	82 37       	cpi	r24, 0x72	; 114
    28cc:	92 47       	sbci	r25, 0x72	; 114
    28ce:	a1 44       	sbci	r26, 0x41	; 65
    28d0:	b1 46       	sbci	r27, 0x61	; 97
    28d2:	09 f5       	brne	.+66     	; 0x2916 <find_volume+0x42c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win + FSI_Free_Count);
    28d4:	34 96       	adiw	r30, 0x04	; 4
    28d6:	80 81       	ld	r24, Z
    28d8:	91 81       	ldd	r25, Z+1	; 0x01
    28da:	a2 81       	ldd	r26, Z+2	; 0x02
    28dc:	b3 81       	ldd	r27, Z+3	; 0x03
    28de:	f8 01       	movw	r30, r16
    28e0:	86 87       	std	Z+14, r24	; 0x0e
    28e2:	97 87       	std	Z+15, r25	; 0x0f
    28e4:	a0 8b       	std	Z+16, r26	; 0x10
    28e6:	b1 8b       	std	Z+17, r27	; 0x11
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win + FSI_Nxt_Free);
    28e8:	e6 5e       	subi	r30, 0xE6	; 230
    28ea:	fd 4f       	sbci	r31, 0xFD	; 253
    28ec:	80 81       	ld	r24, Z
    28ee:	91 81       	ldd	r25, Z+1	; 0x01
    28f0:	a2 81       	ldd	r26, Z+2	; 0x02
    28f2:	b3 81       	ldd	r27, Z+3	; 0x03
    28f4:	f8 01       	movw	r30, r16
    28f6:	82 87       	std	Z+10, r24	; 0x0a
    28f8:	93 87       	std	Z+11, r25	; 0x0b
    28fa:	a4 87       	std	Z+12, r26	; 0x0c
    28fc:	b5 87       	std	Z+13, r27	; 0x0d
    28fe:	f3 e0       	ldi	r31, 0x03	; 3
    2900:	f9 8b       	std	Y+17, r31	; 0x11
    2902:	0b c0       	rjmp	.+22     	; 0x291a <find_volume+0x430>
    2904:	e3 e0       	ldi	r30, 0x03	; 3
    2906:	e9 8b       	std	Y+17, r30	; 0x11
    2908:	08 c0       	rjmp	.+16     	; 0x291a <find_volume+0x430>
    290a:	f3 e0       	ldi	r31, 0x03	; 3
    290c:	f9 8b       	std	Y+17, r31	; 0x11
    290e:	05 c0       	rjmp	.+10     	; 0x291a <find_volume+0x430>
    2910:	e3 e0       	ldi	r30, 0x03	; 3
    2912:	e9 8b       	std	Y+17, r30	; 0x11
    2914:	02 c0       	rjmp	.+4      	; 0x291a <find_volume+0x430>
    2916:	f3 e0       	ldi	r31, 0x03	; 3
    2918:	f9 8b       	std	Y+17, r31	; 0x11
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
    291a:	e9 89       	ldd	r30, Y+17	; 0x11
    291c:	d8 01       	movw	r26, r16
    291e:	ec 93       	st	X, r30
	fs->id = ++Fsid;	/* File system mount ID */
    2920:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <Fsid>
    2924:	90 91 8c 03 	lds	r25, 0x038C	; 0x80038c <Fsid+0x1>
    2928:	01 96       	adiw	r24, 0x01	; 1
    292a:	90 93 8c 03 	sts	0x038C, r25	; 0x80038c <Fsid+0x1>
    292e:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <Fsid>
    2932:	17 96       	adiw	r26, 0x07	; 7
    2934:	9c 93       	st	X, r25
    2936:	8e 93       	st	-X, r24
    2938:	16 97       	sbiw	r26, 0x06	; 6
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
    293a:	80 e0       	ldi	r24, 0x00	; 0
    293c:	a9 c0       	rjmp	.+338    	; 0x2a90 <find_volume+0x5a6>


	/* Get logical drive number from the path name */
	*rfs = 0;
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
    293e:	8b e0       	ldi	r24, 0x0B	; 11
    2940:	a7 c0       	rjmp	.+334    	; 0x2a90 <find_volume+0x5a6>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    2942:	8c e0       	ldi	r24, 0x0C	; 12
    2944:	a5 c0       	rjmp	.+330    	; 0x2a90 <find_volume+0x5a6>
	if (fs->fs_type) {					/* If the volume has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
    2946:	80 e0       	ldi	r24, 0x00	; 0
    2948:	a3 c0       	rjmp	.+326    	; 0x2a90 <find_volume+0x5a6>
    294a:	80 e0       	ldi	r24, 0x00	; 0
    294c:	a1 c0       	rjmp	.+322    	; 0x2a90 <find_volume+0x5a6>

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
    294e:	83 e0       	ldi	r24, 0x03	; 3
    2950:	9f c0       	rjmp	.+318    	; 0x2a90 <find_volume+0x5a6>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
    2952:	8a e0       	ldi	r24, 0x0A	; 10
    2954:	9d c0       	rjmp	.+314    	; 0x2a90 <find_volume+0x5a6>
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
		} while (!LD2PT(vol) && fmt && ++i < 4);
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
    2956:	81 e0       	ldi	r24, 0x01	; 1
    2958:	9b c0       	rjmp	.+310    	; 0x2a90 <find_volume+0x5a6>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    295a:	8d e0       	ldi	r24, 0x0D	; 13
    295c:	99 c0       	rjmp	.+306    	; 0x2a90 <find_volume+0x5a6>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
		return FR_NO_FILESYSTEM;
    295e:	8d e0       	ldi	r24, 0x0D	; 13
    2960:	97 c0       	rjmp	.+302    	; 0x2a90 <find_volume+0x5a6>
	if (!fasize) fasize = LD_DWORD(fs->win + BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
		return FR_NO_FILESYSTEM;
    2962:	8d e0       	ldi	r24, 0x0D	; 13
    2964:	95 c0       	rjmp	.+298    	; 0x2a90 <find_volume+0x5a6>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */

	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
		return FR_NO_FILESYSTEM;
    2966:	8d e0       	ldi	r24, 0x0D	; 13
    2968:	93 c0       	rjmp	.+294    	; 0x2a90 <find_volume+0x5a6>
    296a:	8d e0       	ldi	r24, 0x0D	; 13
    296c:	91 c0       	rjmp	.+290    	; 0x2a90 <find_volume+0x5a6>

	fs->n_rootdir = LD_WORD(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
		return FR_NO_FILESYSTEM;
    296e:	8d e0       	ldi	r24, 0x0D	; 13
    2970:	8f c0       	rjmp	.+286    	; 0x2a90 <find_volume+0x5a6>

	tsect = LD_WORD(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
	if (!tsect) tsect = LD_DWORD(fs->win + BPB_TotSec32);

	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
    2972:	8d e0       	ldi	r24, 0x0D	; 13
    2974:	8d c0       	rjmp	.+282    	; 0x2a90 <find_volume+0x5a6>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    2976:	8d e0       	ldi	r24, 0x0D	; 13
    2978:	8b c0       	rjmp	.+278    	; 0x2a90 <find_volume+0x5a6>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    297a:	8d e0       	ldi	r24, 0x0D	; 13
    297c:	89 c0       	rjmp	.+274    	; 0x2a90 <find_volume+0x5a6>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
	fs->volbase = bsect;								/* Volume start sector */
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
	fs->database = bsect + sysect;						/* Data start sector */
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    297e:	8d e0       	ldi	r24, 0x0D	; 13
    2980:	87 c0       	rjmp	.+270    	; 0x2a90 <find_volume+0x5a6>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
		return FR_NO_FILESYSTEM;
    2982:	8d e0       	ldi	r24, 0x0D	; 13
    2984:	85 c0       	rjmp	.+266    	; 0x2a90 <find_volume+0x5a6>
	if (fmt == FS_FAT32) {
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    2986:	8d e0       	ldi	r24, 0x0D	; 13
    2988:	83 c0       	rjmp	.+262    	; 0x2a90 <find_volume+0x5a6>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
		return FR_NO_FILESYSTEM;
    298a:	8d e0       	ldi	r24, 0x0D	; 13
    298c:	81 c0       	rjmp	.+258    	; 0x2a90 <find_volume+0x5a6>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
    298e:	40 e0       	ldi	r20, 0x00	; 0
    2990:	50 e0       	ldi	r21, 0x00	; 0
    2992:	ba 01       	movw	r22, r20
    2994:	c8 01       	movw	r24, r16
    2996:	0e 94 15 12 	call	0x242a	; 0x242a <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
    299a:	81 30       	cpi	r24, 0x01	; 1
    299c:	09 f0       	breq	.+2      	; 0x29a0 <find_volume+0x4b6>
    299e:	2d ce       	rjmp	.-934    	; 0x25fa <find_volume+0x110>
    29a0:	f8 01       	movw	r30, r16
    29a2:	e0 51       	subi	r30, 0x10	; 16
    29a4:	fe 4f       	sbci	r31, 0xFE	; 254
    29a6:	9e 01       	movw	r18, r28
    29a8:	2f 5f       	subi	r18, 0xFF	; 255
    29aa:	3f 4f       	sbci	r19, 0xFF	; 255
    29ac:	59 01       	movw	r10, r18
    29ae:	a8 01       	movw	r20, r16
    29b0:	40 5d       	subi	r20, 0xD0	; 208
    29b2:	5d 4f       	sbci	r21, 0xFD	; 253
		for (i = 0; i < 4; i++) {			/* Get partition offset */
			pt = fs->win + MBR_Table + i * SZ_PTE;
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
    29b4:	e1 2c       	mov	r14, r1
    29b6:	f1 2c       	mov	r15, r1
    29b8:	70 e0       	ldi	r23, 0x00	; 0
    29ba:	60 e0       	ldi	r22, 0x00	; 0
    29bc:	e9 cd       	rjmp	.-1070   	; 0x2590 <find_volume+0xa6>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    29be:	49 01       	movw	r8, r18
    29c0:	5a 01       	movw	r10, r20
    29c2:	62 e0       	ldi	r22, 0x02	; 2
    29c4:	86 0e       	add	r8, r22
    29c6:	91 1c       	adc	r9, r1
    29c8:	a1 1c       	adc	r10, r1
    29ca:	b1 1c       	adc	r11, r1
    29cc:	d8 01       	movw	r26, r16
    29ce:	52 96       	adiw	r26, 0x12	; 18
    29d0:	8d 92       	st	X+, r8
    29d2:	9d 92       	st	X+, r9
    29d4:	ad 92       	st	X+, r10
    29d6:	bc 92       	st	X, r11
    29d8:	55 97       	sbiw	r26, 0x15	; 21
	fs->volbase = bsect;								/* Volume start sector */
    29da:	f8 01       	movw	r30, r16
    29dc:	c2 8e       	std	Z+26, r12	; 0x1a
    29de:	d3 8e       	std	Z+27, r13	; 0x1b
    29e0:	e4 8e       	std	Z+28, r14	; 0x1c
    29e2:	f5 8e       	std	Z+29, r15	; 0x1d
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    29e4:	8e 89       	ldd	r24, Y+22	; 0x16
    29e6:	9f 89       	ldd	r25, Y+23	; 0x17
    29e8:	a8 8d       	ldd	r26, Y+24	; 0x18
    29ea:	b9 8d       	ldd	r27, Y+25	; 0x19
    29ec:	8c 0d       	add	r24, r12
    29ee:	9d 1d       	adc	r25, r13
    29f0:	ae 1d       	adc	r26, r14
    29f2:	bf 1d       	adc	r27, r15
    29f4:	86 8f       	std	Z+30, r24	; 0x1e
    29f6:	97 8f       	std	Z+31, r25	; 0x1f
    29f8:	a0 a3       	std	Z+32, r26	; 0x20
    29fa:	b1 a3       	std	Z+33, r27	; 0x21
	fs->database = bsect + sysect;						/* Data start sector */
    29fc:	8a 89       	ldd	r24, Y+18	; 0x12
    29fe:	9b 89       	ldd	r25, Y+19	; 0x13
    2a00:	ac 89       	ldd	r26, Y+20	; 0x14
    2a02:	bd 89       	ldd	r27, Y+21	; 0x15
    2a04:	8c 0d       	add	r24, r12
    2a06:	9d 1d       	adc	r25, r13
    2a08:	ae 1d       	adc	r26, r14
    2a0a:	bf 1d       	adc	r27, r15
    2a0c:	86 a3       	std	Z+38, r24	; 0x26
    2a0e:	97 a3       	std	Z+39, r25	; 0x27
    2a10:	a0 a7       	std	Z+40, r26	; 0x28
    2a12:	b1 a7       	std	Z+41, r27	; 0x29
    2a14:	d8 ce       	rjmp	.-592    	; 0x27c6 <find_volume+0x2dc>
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
    2a16:	8f ef       	ldi	r24, 0xFF	; 255
    2a18:	9f ef       	ldi	r25, 0xFF	; 255
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	f8 01       	movw	r30, r16
    2a1e:	86 87       	std	Z+14, r24	; 0x0e
    2a20:	97 87       	std	Z+15, r25	; 0x0f
    2a22:	a0 8b       	std	Z+16, r26	; 0x10
    2a24:	b1 8b       	std	Z+17, r27	; 0x11
    2a26:	82 87       	std	Z+10, r24	; 0x0a
    2a28:	93 87       	std	Z+11, r25	; 0x0b
    2a2a:	a4 87       	std	Z+12, r26	; 0x0c
    2a2c:	b5 87       	std	Z+13, r27	; 0x0d

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
    2a2e:	80 e8       	ldi	r24, 0x80	; 128
    2a30:	85 83       	std	Z+5, r24	; 0x05
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
		&& LD_WORD(fs->win + BPB_FSInfo) == 1
    2a32:	e2 5a       	subi	r30, 0xA2	; 162
    2a34:	ff 4f       	sbci	r31, 0xFF	; 255
    2a36:	80 81       	ld	r24, Z
    2a38:	91 81       	ldd	r25, Z+1	; 0x01
    2a3a:	01 97       	sbiw	r24, 0x01	; 1
    2a3c:	09 f4       	brne	.+2      	; 0x2a40 <find_volume+0x556>
    2a3e:	1e cf       	rjmp	.-452    	; 0x287c <find_volume+0x392>
    2a40:	f3 e0       	ldi	r31, 0x03	; 3
    2a42:	f9 8b       	std	Y+17, r31	; 0x11
    2a44:	6a cf       	rjmp	.-300    	; 0x291a <find_volume+0x430>
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
    2a46:	8f ef       	ldi	r24, 0xFF	; 255
    2a48:	9f ef       	ldi	r25, 0xFF	; 255
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	f8 01       	movw	r30, r16
    2a4e:	86 87       	std	Z+14, r24	; 0x0e
    2a50:	97 87       	std	Z+15, r25	; 0x0f
    2a52:	a0 8b       	std	Z+16, r26	; 0x10
    2a54:	b1 8b       	std	Z+17, r27	; 0x11
    2a56:	82 87       	std	Z+10, r24	; 0x0a
    2a58:	93 87       	std	Z+11, r25	; 0x0b
    2a5a:	a4 87       	std	Z+12, r26	; 0x0c
    2a5c:	b5 87       	std	Z+13, r27	; 0x0d

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
    2a5e:	80 e8       	ldi	r24, 0x80	; 128
    2a60:	85 83       	std	Z+5, r24	; 0x05
    2a62:	5b cf       	rjmp	.-330    	; 0x291a <find_volume+0x430>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
    2a64:	ff ef       	ldi	r31, 0xFF	; 255
    2a66:	8f 0e       	add	r8, r31
    2a68:	f1 e0       	ldi	r31, 0x01	; 1
    2a6a:	9f 1e       	adc	r9, r31
    2a6c:	a1 1c       	adc	r10, r1
    2a6e:	b1 1c       	adc	r11, r1
    2a70:	07 2e       	mov	r0, r23
    2a72:	79 e0       	ldi	r23, 0x09	; 9
    2a74:	b6 94       	lsr	r11
    2a76:	a7 94       	ror	r10
    2a78:	97 94       	ror	r9
    2a7a:	87 94       	ror	r8
    2a7c:	7a 95       	dec	r23
    2a7e:	d1 f7       	brne	.-12     	; 0x2a74 <find_volume+0x58a>
    2a80:	70 2d       	mov	r23, r0
    2a82:	48 14       	cp	r4, r8
    2a84:	59 04       	cpc	r5, r9
    2a86:	6a 04       	cpc	r6, r10
    2a88:	7b 04       	cpc	r7, r11
    2a8a:	08 f4       	brcc	.+2      	; 0x2a8e <find_volume+0x5a4>
    2a8c:	7e cf       	rjmp	.-260    	; 0x298a <find_volume+0x4a0>
    2a8e:	db cf       	rjmp	.-74     	; 0x2a46 <find_volume+0x55c>
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
}
    2a90:	6d 96       	adiw	r28, 0x1d	; 29
    2a92:	0f b6       	in	r0, 0x3f	; 63
    2a94:	f8 94       	cli
    2a96:	de bf       	out	0x3e, r29	; 62
    2a98:	0f be       	out	0x3f, r0	; 63
    2a9a:	cd bf       	out	0x3d, r28	; 61
    2a9c:	df 91       	pop	r29
    2a9e:	cf 91       	pop	r28
    2aa0:	1f 91       	pop	r17
    2aa2:	0f 91       	pop	r16
    2aa4:	ff 90       	pop	r15
    2aa6:	ef 90       	pop	r14
    2aa8:	df 90       	pop	r13
    2aaa:	cf 90       	pop	r12
    2aac:	bf 90       	pop	r11
    2aae:	af 90       	pop	r10
    2ab0:	9f 90       	pop	r9
    2ab2:	8f 90       	pop	r8
    2ab4:	7f 90       	pop	r7
    2ab6:	6f 90       	pop	r6
    2ab8:	5f 90       	pop	r5
    2aba:	4f 90       	pop	r4
    2abc:	3f 90       	pop	r3
    2abe:	2f 90       	pop	r2
    2ac0:	08 95       	ret

00002ac2 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    2ac2:	0f 93       	push	r16
    2ac4:	1f 93       	push	r17
    2ac6:	fc 01       	movw	r30, r24
	clst -= 2;
    2ac8:	9a 01       	movw	r18, r20
    2aca:	ab 01       	movw	r20, r22
    2acc:	22 50       	subi	r18, 0x02	; 2
    2ace:	31 09       	sbc	r19, r1
    2ad0:	41 09       	sbc	r20, r1
    2ad2:	51 09       	sbc	r21, r1
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    2ad4:	82 89       	ldd	r24, Z+18	; 0x12
    2ad6:	93 89       	ldd	r25, Z+19	; 0x13
    2ad8:	a4 89       	ldd	r26, Z+20	; 0x14
    2ada:	b5 89       	ldd	r27, Z+21	; 0x15
    2adc:	02 97       	sbiw	r24, 0x02	; 2
    2ade:	a1 09       	sbc	r26, r1
    2ae0:	b1 09       	sbc	r27, r1
    2ae2:	28 17       	cp	r18, r24
    2ae4:	39 07       	cpc	r19, r25
    2ae6:	4a 07       	cpc	r20, r26
    2ae8:	5b 07       	cpc	r21, r27
    2aea:	68 f4       	brcc	.+26     	; 0x2b06 <clust2sect+0x44>
	return clst * fs->csize + fs->database;
    2aec:	a2 81       	ldd	r26, Z+2	; 0x02
    2aee:	b0 e0       	ldi	r27, 0x00	; 0
    2af0:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <__muluhisi3>
    2af4:	06 a1       	ldd	r16, Z+38	; 0x26
    2af6:	17 a1       	ldd	r17, Z+39	; 0x27
    2af8:	20 a5       	ldd	r18, Z+40	; 0x28
    2afa:	31 a5       	ldd	r19, Z+41	; 0x29
    2afc:	60 0f       	add	r22, r16
    2afe:	71 1f       	adc	r23, r17
    2b00:	82 1f       	adc	r24, r18
    2b02:	93 1f       	adc	r25, r19
    2b04:	03 c0       	rjmp	.+6      	; 0x2b0c <clust2sect+0x4a>
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    2b06:	60 e0       	ldi	r22, 0x00	; 0
    2b08:	70 e0       	ldi	r23, 0x00	; 0
    2b0a:	cb 01       	movw	r24, r22
	return clst * fs->csize + fs->database;
}
    2b0c:	1f 91       	pop	r17
    2b0e:	0f 91       	pop	r16
    2b10:	08 95       	ret

00002b12 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
    2b12:	af 92       	push	r10
    2b14:	bf 92       	push	r11
    2b16:	cf 92       	push	r12
    2b18:	df 92       	push	r13
    2b1a:	ef 92       	push	r14
    2b1c:	ff 92       	push	r15
    2b1e:	0f 93       	push	r16
    2b20:	1f 93       	push	r17
    2b22:	cf 93       	push	r28
    2b24:	df 93       	push	r29
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    2b26:	42 30       	cpi	r20, 0x02	; 2
    2b28:	51 05       	cpc	r21, r1
    2b2a:	61 05       	cpc	r22, r1
    2b2c:	71 05       	cpc	r23, r1
    2b2e:	08 f4       	brcc	.+2      	; 0x2b32 <get_fat+0x20>
    2b30:	ae c0       	rjmp	.+348    	; 0x2c8e <get_fat+0x17c>
    2b32:	fc 01       	movw	r30, r24
    2b34:	c2 88       	ldd	r12, Z+18	; 0x12
    2b36:	d3 88       	ldd	r13, Z+19	; 0x13
    2b38:	e4 88       	ldd	r14, Z+20	; 0x14
    2b3a:	f5 88       	ldd	r15, Z+21	; 0x15
    2b3c:	4c 15       	cp	r20, r12
    2b3e:	5d 05       	cpc	r21, r13
    2b40:	6e 05       	cpc	r22, r14
    2b42:	7f 05       	cpc	r23, r15
    2b44:	08 f0       	brcs	.+2      	; 0x2b48 <get_fat+0x36>
    2b46:	a8 c0       	rjmp	.+336    	; 0x2c98 <get_fat+0x186>
    2b48:	6a 01       	movw	r12, r20
    2b4a:	7b 01       	movw	r14, r22
    2b4c:	ec 01       	movw	r28, r24
		val = 1;	/* Internal error */

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */

		switch (fs->fs_type) {
    2b4e:	80 81       	ld	r24, Z
    2b50:	82 30       	cpi	r24, 0x02	; 2
    2b52:	09 f4       	brne	.+2      	; 0x2b56 <get_fat+0x44>
    2b54:	4d c0       	rjmp	.+154    	; 0x2bf0 <get_fat+0xde>
    2b56:	83 30       	cpi	r24, 0x03	; 3
    2b58:	09 f4       	brne	.+2      	; 0x2b5c <get_fat+0x4a>
    2b5a:	6c c0       	rjmp	.+216    	; 0x2c34 <get_fat+0x122>
    2b5c:	81 30       	cpi	r24, 0x01	; 1
    2b5e:	09 f0       	breq	.+2      	; 0x2b62 <get_fat+0x50>
    2b60:	a0 c0       	rjmp	.+320    	; 0x2ca2 <get_fat+0x190>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
    2b62:	8a 01       	movw	r16, r20
    2b64:	16 95       	lsr	r17
    2b66:	07 95       	ror	r16
    2b68:	04 0f       	add	r16, r20
    2b6a:	15 1f       	adc	r17, r21
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    2b6c:	c8 01       	movw	r24, r16
    2b6e:	89 2f       	mov	r24, r25
    2b70:	99 27       	eor	r25, r25
    2b72:	86 95       	lsr	r24
    2b74:	46 8d       	ldd	r20, Z+30	; 0x1e
    2b76:	57 8d       	ldd	r21, Z+31	; 0x1f
    2b78:	60 a1       	ldd	r22, Z+32	; 0x20
    2b7a:	71 a1       	ldd	r23, Z+33	; 0x21
    2b7c:	48 0f       	add	r20, r24
    2b7e:	59 1f       	adc	r21, r25
    2b80:	61 1d       	adc	r22, r1
    2b82:	71 1d       	adc	r23, r1
    2b84:	cf 01       	movw	r24, r30
    2b86:	0e 94 d7 11 	call	0x23ae	; 0x23ae <move_window>
    2b8a:	81 11       	cpse	r24, r1
    2b8c:	8f c0       	rjmp	.+286    	; 0x2cac <get_fat+0x19a>
			wc = fs->win[bc++ % SS(fs)];
    2b8e:	58 01       	movw	r10, r16
    2b90:	ff ef       	ldi	r31, 0xFF	; 255
    2b92:	af 1a       	sub	r10, r31
    2b94:	bf 0a       	sbc	r11, r31
    2b96:	11 70       	andi	r17, 0x01	; 1
    2b98:	fe 01       	movw	r30, r28
    2b9a:	e0 0f       	add	r30, r16
    2b9c:	f1 1f       	adc	r31, r17
    2b9e:	16 a5       	ldd	r17, Z+46	; 0x2e
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    2ba0:	c5 01       	movw	r24, r10
    2ba2:	89 2f       	mov	r24, r25
    2ba4:	99 27       	eor	r25, r25
    2ba6:	86 95       	lsr	r24
    2ba8:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2baa:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2bac:	68 a1       	ldd	r22, Y+32	; 0x20
    2bae:	79 a1       	ldd	r23, Y+33	; 0x21
    2bb0:	48 0f       	add	r20, r24
    2bb2:	59 1f       	adc	r21, r25
    2bb4:	61 1d       	adc	r22, r1
    2bb6:	71 1d       	adc	r23, r1
    2bb8:	ce 01       	movw	r24, r28
    2bba:	0e 94 d7 11 	call	0x23ae	; 0x23ae <move_window>
    2bbe:	81 11       	cpse	r24, r1
    2bc0:	79 c0       	rjmp	.+242    	; 0x2cb4 <get_fat+0x1a2>
			wc |= fs->win[bc % SS(fs)] << 8;
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	b8 22       	and	r11, r24
    2bc6:	ca 0d       	add	r28, r10
    2bc8:	db 1d       	adc	r29, r11
    2bca:	8e a5       	ldd	r24, Y+46	; 0x2e
    2bcc:	61 2f       	mov	r22, r17
    2bce:	70 e0       	ldi	r23, 0x00	; 0
    2bd0:	78 2b       	or	r23, r24
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
    2bd2:	c0 fe       	sbrs	r12, 0
    2bd4:	09 c0       	rjmp	.+18     	; 0x2be8 <get_fat+0xd6>
    2bd6:	72 95       	swap	r23
    2bd8:	62 95       	swap	r22
    2bda:	6f 70       	andi	r22, 0x0F	; 15
    2bdc:	67 27       	eor	r22, r23
    2bde:	7f 70       	andi	r23, 0x0F	; 15
    2be0:	67 27       	eor	r22, r23
    2be2:	80 e0       	ldi	r24, 0x00	; 0
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	71 c0       	rjmp	.+226    	; 0x2cca <get_fat+0x1b8>
    2be8:	7f 70       	andi	r23, 0x0F	; 15
    2bea:	80 e0       	ldi	r24, 0x00	; 0
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	6d c0       	rjmp	.+218    	; 0x2cca <get_fat+0x1b8>
			break;

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
    2bf0:	45 2f       	mov	r20, r21
    2bf2:	56 2f       	mov	r21, r22
    2bf4:	67 2f       	mov	r22, r23
    2bf6:	77 27       	eor	r23, r23
    2bf8:	86 8d       	ldd	r24, Z+30	; 0x1e
    2bfa:	97 8d       	ldd	r25, Z+31	; 0x1f
    2bfc:	a0 a1       	ldd	r26, Z+32	; 0x20
    2bfe:	b1 a1       	ldd	r27, Z+33	; 0x21
    2c00:	48 0f       	add	r20, r24
    2c02:	59 1f       	adc	r21, r25
    2c04:	6a 1f       	adc	r22, r26
    2c06:	7b 1f       	adc	r23, r27
    2c08:	cf 01       	movw	r24, r30
    2c0a:	0e 94 d7 11 	call	0x23ae	; 0x23ae <move_window>
    2c0e:	81 11       	cpse	r24, r1
    2c10:	55 c0       	rjmp	.+170    	; 0x2cbc <get_fat+0x1aa>
			p = &fs->win[clst * 2 % SS(fs)];
    2c12:	b7 01       	movw	r22, r14
    2c14:	a6 01       	movw	r20, r12
    2c16:	44 0f       	add	r20, r20
    2c18:	55 1f       	adc	r21, r21
    2c1a:	66 1f       	adc	r22, r22
    2c1c:	77 1f       	adc	r23, r23
    2c1e:	4e 7f       	andi	r20, 0xFE	; 254
    2c20:	51 70       	andi	r21, 0x01	; 1
    2c22:	66 27       	eor	r22, r22
    2c24:	77 27       	eor	r23, r23
			val = LD_WORD(p);
    2c26:	c4 0f       	add	r28, r20
    2c28:	d5 1f       	adc	r29, r21
    2c2a:	6e a5       	ldd	r22, Y+46	; 0x2e
    2c2c:	7f a5       	ldd	r23, Y+47	; 0x2f
    2c2e:	80 e0       	ldi	r24, 0x00	; 0
    2c30:	90 e0       	ldi	r25, 0x00	; 0
			break;
    2c32:	4b c0       	rjmp	.+150    	; 0x2cca <get_fat+0x1b8>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
    2c34:	86 8d       	ldd	r24, Z+30	; 0x1e
    2c36:	97 8d       	ldd	r25, Z+31	; 0x1f
    2c38:	a0 a1       	ldd	r26, Z+32	; 0x20
    2c3a:	b1 a1       	ldd	r27, Z+33	; 0x21
    2c3c:	68 94       	set
    2c3e:	16 f8       	bld	r1, 6
    2c40:	76 95       	lsr	r23
    2c42:	67 95       	ror	r22
    2c44:	57 95       	ror	r21
    2c46:	47 95       	ror	r20
    2c48:	16 94       	lsr	r1
    2c4a:	d1 f7       	brne	.-12     	; 0x2c40 <get_fat+0x12e>
    2c4c:	48 0f       	add	r20, r24
    2c4e:	59 1f       	adc	r21, r25
    2c50:	6a 1f       	adc	r22, r26
    2c52:	7b 1f       	adc	r23, r27
    2c54:	cf 01       	movw	r24, r30
    2c56:	0e 94 d7 11 	call	0x23ae	; 0x23ae <move_window>
    2c5a:	81 11       	cpse	r24, r1
    2c5c:	33 c0       	rjmp	.+102    	; 0x2cc4 <get_fat+0x1b2>
			p = &fs->win[clst * 4 % SS(fs)];
    2c5e:	b7 01       	movw	r22, r14
    2c60:	a6 01       	movw	r20, r12
    2c62:	44 0f       	add	r20, r20
    2c64:	55 1f       	adc	r21, r21
    2c66:	66 1f       	adc	r22, r22
    2c68:	77 1f       	adc	r23, r23
    2c6a:	44 0f       	add	r20, r20
    2c6c:	55 1f       	adc	r21, r21
    2c6e:	66 1f       	adc	r22, r22
    2c70:	77 1f       	adc	r23, r23
    2c72:	4c 7f       	andi	r20, 0xFC	; 252
    2c74:	51 70       	andi	r21, 0x01	; 1
    2c76:	66 27       	eor	r22, r22
    2c78:	77 27       	eor	r23, r23
			val = LD_DWORD(p) & 0x0FFFFFFF;
    2c7a:	c4 0f       	add	r28, r20
    2c7c:	d5 1f       	adc	r29, r21
    2c7e:	8e a5       	ldd	r24, Y+46	; 0x2e
    2c80:	9f a5       	ldd	r25, Y+47	; 0x2f
    2c82:	a8 a9       	ldd	r26, Y+48	; 0x30
    2c84:	b9 a9       	ldd	r27, Y+49	; 0x31
    2c86:	bc 01       	movw	r22, r24
    2c88:	cd 01       	movw	r24, r26
    2c8a:	9f 70       	andi	r25, 0x0F	; 15
			break;
    2c8c:	1e c0       	rjmp	.+60     	; 0x2cca <get_fat+0x1b8>
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		val = 1;	/* Internal error */
    2c8e:	61 e0       	ldi	r22, 0x01	; 1
    2c90:	70 e0       	ldi	r23, 0x00	; 0
    2c92:	80 e0       	ldi	r24, 0x00	; 0
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	19 c0       	rjmp	.+50     	; 0x2cca <get_fat+0x1b8>
    2c98:	61 e0       	ldi	r22, 0x01	; 1
    2c9a:	70 e0       	ldi	r23, 0x00	; 0
    2c9c:	80 e0       	ldi	r24, 0x00	; 0
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	14 c0       	rjmp	.+40     	; 0x2cca <get_fat+0x1b8>
			p = &fs->win[clst * 4 % SS(fs)];
			val = LD_DWORD(p) & 0x0FFFFFFF;
			break;

		default:
			val = 1;	/* Internal error */
    2ca2:	61 e0       	ldi	r22, 0x01	; 1
    2ca4:	70 e0       	ldi	r23, 0x00	; 0
    2ca6:	80 e0       	ldi	r24, 0x00	; 0
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	0f c0       	rjmp	.+30     	; 0x2cca <get_fat+0x1b8>

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		val = 1;	/* Internal error */

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    2cac:	6f ef       	ldi	r22, 0xFF	; 255
    2cae:	7f ef       	ldi	r23, 0xFF	; 255
    2cb0:	cb 01       	movw	r24, r22
    2cb2:	0b c0       	rjmp	.+22     	; 0x2cca <get_fat+0x1b8>
    2cb4:	6f ef       	ldi	r22, 0xFF	; 255
    2cb6:	7f ef       	ldi	r23, 0xFF	; 255
    2cb8:	cb 01       	movw	r24, r22
    2cba:	07 c0       	rjmp	.+14     	; 0x2cca <get_fat+0x1b8>
    2cbc:	6f ef       	ldi	r22, 0xFF	; 255
    2cbe:	7f ef       	ldi	r23, 0xFF	; 255
    2cc0:	cb 01       	movw	r24, r22
    2cc2:	03 c0       	rjmp	.+6      	; 0x2cca <get_fat+0x1b8>
    2cc4:	6f ef       	ldi	r22, 0xFF	; 255
    2cc6:	7f ef       	ldi	r23, 0xFF	; 255
    2cc8:	cb 01       	movw	r24, r22
			val = 1;	/* Internal error */
		}
	}

	return val;
}
    2cca:	df 91       	pop	r29
    2ccc:	cf 91       	pop	r28
    2cce:	1f 91       	pop	r17
    2cd0:	0f 91       	pop	r16
    2cd2:	ff 90       	pop	r15
    2cd4:	ef 90       	pop	r14
    2cd6:	df 90       	pop	r13
    2cd8:	cf 90       	pop	r12
    2cda:	bf 90       	pop	r11
    2cdc:	af 90       	pop	r10
    2cde:	08 95       	ret

00002ce0 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
    2ce0:	af 92       	push	r10
    2ce2:	bf 92       	push	r11
    2ce4:	cf 92       	push	r12
    2ce6:	df 92       	push	r13
    2ce8:	ef 92       	push	r14
    2cea:	ff 92       	push	r15
    2cec:	0f 93       	push	r16
    2cee:	1f 93       	push	r17
    2cf0:	cf 93       	push	r28
    2cf2:	df 93       	push	r29
    2cf4:	ec 01       	movw	r28, r24
    2cf6:	8b 01       	movw	r16, r22
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
    2cf8:	7d 83       	std	Y+5, r23	; 0x05
    2cfa:	6c 83       	std	Y+4, r22	; 0x04
	clst = dp->sclust;		/* Table start cluster (0:root) */
    2cfc:	ce 80       	ldd	r12, Y+6	; 0x06
    2cfe:	df 80       	ldd	r13, Y+7	; 0x07
    2d00:	e8 84       	ldd	r14, Y+8	; 0x08
    2d02:	f9 84       	ldd	r15, Y+9	; 0x09
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
    2d04:	81 e0       	ldi	r24, 0x01	; 1
    2d06:	c8 16       	cp	r12, r24
    2d08:	d1 04       	cpc	r13, r1
    2d0a:	e1 04       	cpc	r14, r1
    2d0c:	f1 04       	cpc	r15, r1
    2d0e:	09 f4       	brne	.+2      	; 0x2d12 <dir_sdi+0x32>
    2d10:	8b c0       	rjmp	.+278    	; 0x2e28 <dir_sdi+0x148>
    2d12:	e8 81       	ld	r30, Y
    2d14:	f9 81       	ldd	r31, Y+1	; 0x01
    2d16:	82 89       	ldd	r24, Z+18	; 0x12
    2d18:	93 89       	ldd	r25, Z+19	; 0x13
    2d1a:	a4 89       	ldd	r26, Z+20	; 0x14
    2d1c:	b5 89       	ldd	r27, Z+21	; 0x15
    2d1e:	c8 16       	cp	r12, r24
    2d20:	d9 06       	cpc	r13, r25
    2d22:	ea 06       	cpc	r14, r26
    2d24:	fb 06       	cpc	r15, r27
    2d26:	08 f0       	brcs	.+2      	; 0x2d2a <dir_sdi+0x4a>
    2d28:	81 c0       	rjmp	.+258    	; 0x2e2c <dir_sdi+0x14c>
		return FR_INT_ERR;
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    2d2a:	c1 14       	cp	r12, r1
    2d2c:	d1 04       	cpc	r13, r1
    2d2e:	e1 04       	cpc	r14, r1
    2d30:	f1 04       	cpc	r15, r1
    2d32:	c1 f4       	brne	.+48     	; 0x2d64 <dir_sdi+0x84>
    2d34:	80 81       	ld	r24, Z
    2d36:	83 30       	cpi	r24, 0x03	; 3
    2d38:	41 f4       	brne	.+16     	; 0x2d4a <dir_sdi+0x6a>
		clst = dp->fs->dirbase;
    2d3a:	82 a1       	ldd	r24, Z+34	; 0x22
    2d3c:	93 a1       	ldd	r25, Z+35	; 0x23
    2d3e:	a4 a1       	ldd	r26, Z+36	; 0x24
    2d40:	b5 a1       	ldd	r27, Z+37	; 0x25

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
    2d42:	00 97       	sbiw	r24, 0x00	; 0
    2d44:	a1 05       	cpc	r26, r1
    2d46:	b1 05       	cpc	r27, r1
    2d48:	59 f4       	brne	.+22     	; 0x2d60 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
    2d4a:	80 85       	ldd	r24, Z+8	; 0x08
    2d4c:	91 85       	ldd	r25, Z+9	; 0x09
    2d4e:	08 17       	cp	r16, r24
    2d50:	19 07       	cpc	r17, r25
    2d52:	08 f0       	brcs	.+2      	; 0x2d56 <dir_sdi+0x76>
    2d54:	6d c0       	rjmp	.+218    	; 0x2e30 <dir_sdi+0x150>
			return FR_INT_ERR;
		sect = dp->fs->dirbase;
    2d56:	62 a1       	ldd	r22, Z+34	; 0x22
    2d58:	73 a1       	ldd	r23, Z+35	; 0x23
    2d5a:	84 a1       	ldd	r24, Z+36	; 0x24
    2d5c:	95 a1       	ldd	r25, Z+37	; 0x25
    2d5e:	37 c0       	rjmp	.+110    	; 0x2dce <dir_sdi+0xee>
	dp->index = (WORD)idx;	/* Current index */
	clst = dp->sclust;		/* Table start cluster (0:root) */
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
		return FR_INT_ERR;
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = dp->fs->dirbase;
    2d60:	6c 01       	movw	r12, r24
    2d62:	7d 01       	movw	r14, r26
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
			return FR_INT_ERR;
		sect = dp->fs->dirbase;
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
    2d64:	a2 80       	ldd	r10, Z+2	; 0x02
    2d66:	80 e1       	ldi	r24, 0x10	; 16
    2d68:	a8 9e       	mul	r10, r24
    2d6a:	50 01       	movw	r10, r0
    2d6c:	11 24       	eor	r1, r1
		while (idx >= ic) {	/* Follow cluster chain */
    2d6e:	0a 15       	cp	r16, r10
    2d70:	1b 05       	cpc	r17, r11
    2d72:	38 f1       	brcs	.+78     	; 0x2dc2 <dir_sdi+0xe2>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
    2d74:	b7 01       	movw	r22, r14
    2d76:	a6 01       	movw	r20, r12
    2d78:	88 81       	ld	r24, Y
    2d7a:	99 81       	ldd	r25, Y+1	; 0x01
    2d7c:	0e 94 89 15 	call	0x2b12	; 0x2b12 <get_fat>
    2d80:	6b 01       	movw	r12, r22
    2d82:	7c 01       	movw	r14, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    2d84:	8f ef       	ldi	r24, 0xFF	; 255
    2d86:	c8 16       	cp	r12, r24
    2d88:	d8 06       	cpc	r13, r24
    2d8a:	e8 06       	cpc	r14, r24
    2d8c:	f8 06       	cpc	r15, r24
    2d8e:	09 f4       	brne	.+2      	; 0x2d92 <dir_sdi+0xb2>
    2d90:	51 c0       	rjmp	.+162    	; 0x2e34 <dir_sdi+0x154>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
    2d92:	82 e0       	ldi	r24, 0x02	; 2
    2d94:	c8 16       	cp	r12, r24
    2d96:	d1 04       	cpc	r13, r1
    2d98:	e1 04       	cpc	r14, r1
    2d9a:	f1 04       	cpc	r15, r1
    2d9c:	08 f4       	brcc	.+2      	; 0x2da0 <dir_sdi+0xc0>
    2d9e:	4c c0       	rjmp	.+152    	; 0x2e38 <dir_sdi+0x158>
    2da0:	e8 81       	ld	r30, Y
    2da2:	f9 81       	ldd	r31, Y+1	; 0x01
    2da4:	82 89       	ldd	r24, Z+18	; 0x12
    2da6:	93 89       	ldd	r25, Z+19	; 0x13
    2da8:	a4 89       	ldd	r26, Z+20	; 0x14
    2daa:	b5 89       	ldd	r27, Z+21	; 0x15
    2dac:	c8 16       	cp	r12, r24
    2dae:	d9 06       	cpc	r13, r25
    2db0:	ea 06       	cpc	r14, r26
    2db2:	fb 06       	cpc	r15, r27
    2db4:	08 f0       	brcs	.+2      	; 0x2db8 <dir_sdi+0xd8>
    2db6:	42 c0       	rjmp	.+132    	; 0x2e3c <dir_sdi+0x15c>
				return FR_INT_ERR;
			idx -= ic;
    2db8:	0a 19       	sub	r16, r10
    2dba:	1b 09       	sbc	r17, r11
			return FR_INT_ERR;
		sect = dp->fs->dirbase;
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    2dbc:	0a 15       	cp	r16, r10
    2dbe:	1b 05       	cpc	r17, r11
    2dc0:	c8 f6       	brcc	.-78     	; 0x2d74 <dir_sdi+0x94>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
				return FR_INT_ERR;
			idx -= ic;
		}
		sect = clust2sect(dp->fs, clst);
    2dc2:	b7 01       	movw	r22, r14
    2dc4:	a6 01       	movw	r20, r12
    2dc6:	88 81       	ld	r24, Y
    2dc8:	99 81       	ldd	r25, Y+1	; 0x01
    2dca:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <clust2sect>
	}
	dp->clust = clst;	/* Current cluster# */
    2dce:	ca 86       	std	Y+10, r12	; 0x0a
    2dd0:	db 86       	std	Y+11, r13	; 0x0b
    2dd2:	ec 86       	std	Y+12, r14	; 0x0c
    2dd4:	fd 86       	std	Y+13, r15	; 0x0d
	if (!sect) return FR_INT_ERR;
    2dd6:	61 15       	cp	r22, r1
    2dd8:	71 05       	cpc	r23, r1
    2dda:	81 05       	cpc	r24, r1
    2ddc:	91 05       	cpc	r25, r1
    2dde:	81 f1       	breq	.+96     	; 0x2e40 <dir_sdi+0x160>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
    2de0:	98 01       	movw	r18, r16
    2de2:	32 95       	swap	r19
    2de4:	22 95       	swap	r18
    2de6:	2f 70       	andi	r18, 0x0F	; 15
    2de8:	23 27       	eor	r18, r19
    2dea:	3f 70       	andi	r19, 0x0F	; 15
    2dec:	23 27       	eor	r18, r19
    2dee:	dc 01       	movw	r26, r24
    2df0:	cb 01       	movw	r24, r22
    2df2:	82 0f       	add	r24, r18
    2df4:	93 1f       	adc	r25, r19
    2df6:	a1 1d       	adc	r26, r1
    2df8:	b1 1d       	adc	r27, r1
    2dfa:	8e 87       	std	Y+14, r24	; 0x0e
    2dfc:	9f 87       	std	Y+15, r25	; 0x0f
    2dfe:	a8 8b       	std	Y+16, r26	; 0x10
    2e00:	b9 8b       	std	Y+17, r27	; 0x11
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
    2e02:	88 81       	ld	r24, Y
    2e04:	99 81       	ldd	r25, Y+1	; 0x01
    2e06:	8e 96       	adiw	r24, 0x2e	; 46
    2e08:	0f 70       	andi	r16, 0x0F	; 15
    2e0a:	11 27       	eor	r17, r17
    2e0c:	00 0f       	add	r16, r16
    2e0e:	11 1f       	adc	r17, r17
    2e10:	02 95       	swap	r16
    2e12:	12 95       	swap	r17
    2e14:	10 7f       	andi	r17, 0xF0	; 240
    2e16:	10 27       	eor	r17, r16
    2e18:	00 7f       	andi	r16, 0xF0	; 240
    2e1a:	10 27       	eor	r17, r16
    2e1c:	08 0f       	add	r16, r24
    2e1e:	19 1f       	adc	r17, r25
    2e20:	1b 8b       	std	Y+19, r17	; 0x13
    2e22:	0a 8b       	std	Y+18, r16	; 0x12

	return FR_OK;
    2e24:	80 e0       	ldi	r24, 0x00	; 0
    2e26:	0d c0       	rjmp	.+26     	; 0x2e42 <dir_sdi+0x162>


	dp->index = (WORD)idx;	/* Current index */
	clst = dp->sclust;		/* Table start cluster (0:root) */
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
		return FR_INT_ERR;
    2e28:	82 e0       	ldi	r24, 0x02	; 2
    2e2a:	0b c0       	rjmp	.+22     	; 0x2e42 <dir_sdi+0x162>
    2e2c:	82 e0       	ldi	r24, 0x02	; 2
    2e2e:	09 c0       	rjmp	.+18     	; 0x2e42 <dir_sdi+0x162>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = dp->fs->dirbase;

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
			return FR_INT_ERR;
    2e30:	82 e0       	ldi	r24, 0x02	; 2
    2e32:	07 c0       	rjmp	.+14     	; 0x2e42 <dir_sdi+0x162>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    2e34:	81 e0       	ldi	r24, 0x01	; 1
    2e36:	05 c0       	rjmp	.+10     	; 0x2e42 <dir_sdi+0x162>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
				return FR_INT_ERR;
    2e38:	82 e0       	ldi	r24, 0x02	; 2
    2e3a:	03 c0       	rjmp	.+6      	; 0x2e42 <dir_sdi+0x162>
    2e3c:	82 e0       	ldi	r24, 0x02	; 2
    2e3e:	01 c0       	rjmp	.+2      	; 0x2e42 <dir_sdi+0x162>
			idx -= ic;
		}
		sect = clust2sect(dp->fs, clst);
	}
	dp->clust = clst;	/* Current cluster# */
	if (!sect) return FR_INT_ERR;
    2e40:	82 e0       	ldi	r24, 0x02	; 2
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */

	return FR_OK;
}
    2e42:	df 91       	pop	r29
    2e44:	cf 91       	pop	r28
    2e46:	1f 91       	pop	r17
    2e48:	0f 91       	pop	r16
    2e4a:	ff 90       	pop	r15
    2e4c:	ef 90       	pop	r14
    2e4e:	df 90       	pop	r13
    2e50:	cf 90       	pop	r12
    2e52:	bf 90       	pop	r11
    2e54:	af 90       	pop	r10
    2e56:	08 95       	ret

00002e58 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
    2e58:	4f 92       	push	r4
    2e5a:	5f 92       	push	r5
    2e5c:	6f 92       	push	r6
    2e5e:	7f 92       	push	r7
    2e60:	9f 92       	push	r9
    2e62:	af 92       	push	r10
    2e64:	bf 92       	push	r11
    2e66:	cf 92       	push	r12
    2e68:	df 92       	push	r13
    2e6a:	ef 92       	push	r14
    2e6c:	ff 92       	push	r15
    2e6e:	0f 93       	push	r16
    2e70:	1f 93       	push	r17
    2e72:	cf 93       	push	r28
    2e74:	df 93       	push	r29
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    2e76:	42 30       	cpi	r20, 0x02	; 2
    2e78:	51 05       	cpc	r21, r1
    2e7a:	61 05       	cpc	r22, r1
    2e7c:	71 05       	cpc	r23, r1
    2e7e:	08 f4       	brcc	.+2      	; 0x2e82 <put_fat+0x2a>
    2e80:	db c0       	rjmp	.+438    	; 0x3038 <put_fat+0x1e0>
    2e82:	fc 01       	movw	r30, r24
    2e84:	c2 88       	ldd	r12, Z+18	; 0x12
    2e86:	d3 88       	ldd	r13, Z+19	; 0x13
    2e88:	e4 88       	ldd	r14, Z+20	; 0x14
    2e8a:	f5 88       	ldd	r15, Z+21	; 0x15
    2e8c:	4c 15       	cp	r20, r12
    2e8e:	5d 05       	cpc	r21, r13
    2e90:	6e 05       	cpc	r22, r14
    2e92:	7f 05       	cpc	r23, r15
    2e94:	08 f0       	brcs	.+2      	; 0x2e98 <put_fat+0x40>
    2e96:	d4 c0       	rjmp	.+424    	; 0x3040 <put_fat+0x1e8>
    2e98:	68 01       	movw	r12, r16
    2e9a:	79 01       	movw	r14, r18
    2e9c:	2a 01       	movw	r4, r20
    2e9e:	3b 01       	movw	r6, r22
    2ea0:	ec 01       	movw	r28, r24
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
    2ea2:	80 81       	ld	r24, Z
    2ea4:	82 30       	cpi	r24, 0x02	; 2
    2ea6:	09 f4       	brne	.+2      	; 0x2eaa <put_fat+0x52>
    2ea8:	65 c0       	rjmp	.+202    	; 0x2f74 <put_fat+0x11c>
    2eaa:	83 30       	cpi	r24, 0x03	; 3
    2eac:	09 f4       	brne	.+2      	; 0x2eb0 <put_fat+0x58>
    2eae:	88 c0       	rjmp	.+272    	; 0x2fc0 <put_fat+0x168>
    2eb0:	81 30       	cpi	r24, 0x01	; 1
    2eb2:	09 f0       	breq	.+2      	; 0x2eb6 <put_fat+0x5e>
    2eb4:	c9 c0       	rjmp	.+402    	; 0x3048 <put_fat+0x1f0>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
    2eb6:	8a 01       	movw	r16, r20
    2eb8:	16 95       	lsr	r17
    2eba:	07 95       	ror	r16
    2ebc:	04 0f       	add	r16, r20
    2ebe:	15 1f       	adc	r17, r21
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    2ec0:	c8 01       	movw	r24, r16
    2ec2:	89 2f       	mov	r24, r25
    2ec4:	99 27       	eor	r25, r25
    2ec6:	86 95       	lsr	r24
    2ec8:	46 8d       	ldd	r20, Z+30	; 0x1e
    2eca:	57 8d       	ldd	r21, Z+31	; 0x1f
    2ecc:	60 a1       	ldd	r22, Z+32	; 0x20
    2ece:	71 a1       	ldd	r23, Z+33	; 0x21
    2ed0:	48 0f       	add	r20, r24
    2ed2:	59 1f       	adc	r21, r25
    2ed4:	61 1d       	adc	r22, r1
    2ed6:	71 1d       	adc	r23, r1
    2ed8:	cf 01       	movw	r24, r30
    2eda:	0e 94 d7 11 	call	0x23ae	; 0x23ae <move_window>
    2ede:	98 2e       	mov	r9, r24
			if (res != FR_OK) break;
    2ee0:	81 11       	cpse	r24, r1
    2ee2:	d1 c0       	rjmp	.+418    	; 0x3086 <put_fat+0x22e>
			p = &fs->win[bc++ % SS(fs)];
    2ee4:	58 01       	movw	r10, r16
    2ee6:	ff ef       	ldi	r31, 0xFF	; 255
    2ee8:	af 1a       	sub	r10, r31
    2eea:	bf 0a       	sbc	r11, r31
    2eec:	11 70       	andi	r17, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    2eee:	40 fe       	sbrs	r4, 0
    2ef0:	21 c0       	rjmp	.+66     	; 0x2f34 <put_fat+0xdc>
    2ef2:	fe 01       	movw	r30, r28
    2ef4:	e0 0f       	add	r30, r16
    2ef6:	f1 1f       	adc	r31, r17
    2ef8:	86 a5       	ldd	r24, Z+46	; 0x2e
    2efa:	28 2f       	mov	r18, r24
    2efc:	2f 70       	andi	r18, 0x0F	; 15
    2efe:	30 e1       	ldi	r19, 0x10	; 16
    2f00:	c3 9e       	mul	r12, r19
    2f02:	c0 01       	movw	r24, r0
    2f04:	11 24       	eor	r1, r1
    2f06:	82 2b       	or	r24, r18
    2f08:	86 a7       	std	Z+46, r24	; 0x2e
			fs->wflag = 1;
    2f0a:	81 e0       	ldi	r24, 0x01	; 1
    2f0c:	8c 83       	std	Y+4, r24	; 0x04
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    2f0e:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2f10:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2f12:	68 a1       	ldd	r22, Y+32	; 0x20
    2f14:	79 a1       	ldd	r23, Y+33	; 0x21
    2f16:	c5 01       	movw	r24, r10
    2f18:	89 2f       	mov	r24, r25
    2f1a:	99 27       	eor	r25, r25
    2f1c:	86 95       	lsr	r24
    2f1e:	48 0f       	add	r20, r24
    2f20:	59 1f       	adc	r21, r25
    2f22:	61 1d       	adc	r22, r1
    2f24:	71 1d       	adc	r23, r1
    2f26:	ce 01       	movw	r24, r28
    2f28:	0e 94 d7 11 	call	0x23ae	; 0x23ae <move_window>
			if (res != FR_OK) break;
    2f2c:	88 23       	and	r24, r24
    2f2e:	09 f4       	brne	.+2      	; 0x2f32 <put_fat+0xda>
    2f30:	93 c0       	rjmp	.+294    	; 0x3058 <put_fat+0x200>
    2f32:	8e c0       	rjmp	.+284    	; 0x3050 <put_fat+0x1f8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc++ % SS(fs)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    2f34:	fe 01       	movw	r30, r28
    2f36:	e0 0f       	add	r30, r16
    2f38:	f1 1f       	adc	r31, r17
    2f3a:	c6 a6       	std	Z+46, r12	; 0x2e
			fs->wflag = 1;
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	8c 83       	std	Y+4, r24	; 0x04
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    2f40:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2f42:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2f44:	68 a1       	ldd	r22, Y+32	; 0x20
    2f46:	79 a1       	ldd	r23, Y+33	; 0x21
    2f48:	c5 01       	movw	r24, r10
    2f4a:	89 2f       	mov	r24, r25
    2f4c:	99 27       	eor	r25, r25
    2f4e:	86 95       	lsr	r24
    2f50:	48 0f       	add	r20, r24
    2f52:	59 1f       	adc	r21, r25
    2f54:	61 1d       	adc	r22, r1
    2f56:	71 1d       	adc	r23, r1
    2f58:	ce 01       	movw	r24, r28
    2f5a:	0e 94 d7 11 	call	0x23ae	; 0x23ae <move_window>
			if (res != FR_OK) break;
    2f5e:	88 23       	and	r24, r24
    2f60:	09 f4       	brne	.+2      	; 0x2f64 <put_fat+0x10c>
    2f62:	85 c0       	rjmp	.+266    	; 0x306e <put_fat+0x216>
    2f64:	77 c0       	rjmp	.+238    	; 0x3054 <put_fat+0x1fc>
			p = &fs->win[bc % SS(fs)];
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    2f66:	fe 01       	movw	r30, r28
    2f68:	ea 0d       	add	r30, r10
    2f6a:	fb 1d       	adc	r31, r11
    2f6c:	c6 a6       	std	Z+46, r12	; 0x2e
			fs->wflag = 1;
    2f6e:	81 e0       	ldi	r24, 0x01	; 1
    2f70:	8c 83       	std	Y+4, r24	; 0x04
			break;
    2f72:	89 c0       	rjmp	.+274    	; 0x3086 <put_fat+0x22e>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    2f74:	45 2f       	mov	r20, r21
    2f76:	56 2f       	mov	r21, r22
    2f78:	67 2f       	mov	r22, r23
    2f7a:	77 27       	eor	r23, r23
    2f7c:	86 8d       	ldd	r24, Z+30	; 0x1e
    2f7e:	97 8d       	ldd	r25, Z+31	; 0x1f
    2f80:	a0 a1       	ldd	r26, Z+32	; 0x20
    2f82:	b1 a1       	ldd	r27, Z+33	; 0x21
    2f84:	48 0f       	add	r20, r24
    2f86:	59 1f       	adc	r21, r25
    2f88:	6a 1f       	adc	r22, r26
    2f8a:	7b 1f       	adc	r23, r27
    2f8c:	cf 01       	movw	r24, r30
    2f8e:	0e 94 d7 11 	call	0x23ae	; 0x23ae <move_window>
    2f92:	98 2e       	mov	r9, r24
			if (res != FR_OK) break;
    2f94:	81 11       	cpse	r24, r1
    2f96:	77 c0       	rjmp	.+238    	; 0x3086 <put_fat+0x22e>
			p = &fs->win[clst * 2 % SS(fs)];
    2f98:	b3 01       	movw	r22, r6
    2f9a:	a2 01       	movw	r20, r4
    2f9c:	44 0f       	add	r20, r20
    2f9e:	55 1f       	adc	r21, r21
    2fa0:	66 1f       	adc	r22, r22
    2fa2:	77 1f       	adc	r23, r23
    2fa4:	4e 7f       	andi	r20, 0xFE	; 254
    2fa6:	51 70       	andi	r21, 0x01	; 1
    2fa8:	66 27       	eor	r22, r22
    2faa:	77 27       	eor	r23, r23
    2fac:	42 5d       	subi	r20, 0xD2	; 210
    2fae:	5f 4f       	sbci	r21, 0xFF	; 255
			ST_WORD(p, (WORD)val);
    2fb0:	fe 01       	movw	r30, r28
    2fb2:	e4 0f       	add	r30, r20
    2fb4:	f5 1f       	adc	r31, r21
    2fb6:	d1 82       	std	Z+1, r13	; 0x01
    2fb8:	c0 82       	st	Z, r12
			fs->wflag = 1;
    2fba:	81 e0       	ldi	r24, 0x01	; 1
    2fbc:	8c 83       	std	Y+4, r24	; 0x04
			break;
    2fbe:	63 c0       	rjmp	.+198    	; 0x3086 <put_fat+0x22e>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    2fc0:	86 8d       	ldd	r24, Z+30	; 0x1e
    2fc2:	97 8d       	ldd	r25, Z+31	; 0x1f
    2fc4:	a0 a1       	ldd	r26, Z+32	; 0x20
    2fc6:	b1 a1       	ldd	r27, Z+33	; 0x21
    2fc8:	68 94       	set
    2fca:	16 f8       	bld	r1, 6
    2fcc:	76 95       	lsr	r23
    2fce:	67 95       	ror	r22
    2fd0:	57 95       	ror	r21
    2fd2:	47 95       	ror	r20
    2fd4:	16 94       	lsr	r1
    2fd6:	d1 f7       	brne	.-12     	; 0x2fcc <put_fat+0x174>
    2fd8:	48 0f       	add	r20, r24
    2fda:	59 1f       	adc	r21, r25
    2fdc:	6a 1f       	adc	r22, r26
    2fde:	7b 1f       	adc	r23, r27
    2fe0:	cf 01       	movw	r24, r30
    2fe2:	0e 94 d7 11 	call	0x23ae	; 0x23ae <move_window>
    2fe6:	98 2e       	mov	r9, r24
			if (res != FR_OK) break;
    2fe8:	81 11       	cpse	r24, r1
    2fea:	4d c0       	rjmp	.+154    	; 0x3086 <put_fat+0x22e>
			p = &fs->win[clst * 4 % SS(fs)];
    2fec:	b3 01       	movw	r22, r6
    2fee:	a2 01       	movw	r20, r4
    2ff0:	44 0f       	add	r20, r20
    2ff2:	55 1f       	adc	r21, r21
    2ff4:	66 1f       	adc	r22, r22
    2ff6:	77 1f       	adc	r23, r23
    2ff8:	44 0f       	add	r20, r20
    2ffa:	55 1f       	adc	r21, r21
    2ffc:	66 1f       	adc	r22, r22
    2ffe:	77 1f       	adc	r23, r23
    3000:	4c 7f       	andi	r20, 0xFC	; 252
    3002:	51 70       	andi	r21, 0x01	; 1
    3004:	66 27       	eor	r22, r22
    3006:	77 27       	eor	r23, r23
    3008:	42 5d       	subi	r20, 0xD2	; 210
    300a:	5f 4f       	sbci	r21, 0xFF	; 255
    300c:	fe 01       	movw	r30, r28
    300e:	e4 0f       	add	r30, r20
    3010:	f5 1f       	adc	r31, r21
			val |= LD_DWORD(p) & 0xF0000000;
			ST_DWORD(p, val);
    3012:	00 81       	ld	r16, Z
    3014:	11 81       	ldd	r17, Z+1	; 0x01
    3016:	22 81       	ldd	r18, Z+2	; 0x02
    3018:	33 81       	ldd	r19, Z+3	; 0x03
    301a:	00 27       	eor	r16, r16
    301c:	11 27       	eor	r17, r17
    301e:	22 27       	eor	r18, r18
    3020:	30 7f       	andi	r19, 0xF0	; 240
    3022:	c0 2a       	or	r12, r16
    3024:	d1 2a       	or	r13, r17
    3026:	e2 2a       	or	r14, r18
    3028:	f3 2a       	or	r15, r19
    302a:	c0 82       	st	Z, r12
    302c:	d1 82       	std	Z+1, r13	; 0x01
    302e:	e2 82       	std	Z+2, r14	; 0x02
    3030:	f3 82       	std	Z+3, r15	; 0x03
			fs->wflag = 1;
    3032:	81 e0       	ldi	r24, 0x01	; 1
    3034:	8c 83       	std	Y+4, r24	; 0x04
			break;
    3036:	27 c0       	rjmp	.+78     	; 0x3086 <put_fat+0x22e>
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
    3038:	68 94       	set
    303a:	99 24       	eor	r9, r9
    303c:	91 f8       	bld	r9, 1
    303e:	23 c0       	rjmp	.+70     	; 0x3086 <put_fat+0x22e>
    3040:	68 94       	set
    3042:	99 24       	eor	r9, r9
    3044:	91 f8       	bld	r9, 1
    3046:	1f c0       	rjmp	.+62     	; 0x3086 <put_fat+0x22e>
			ST_DWORD(p, val);
			fs->wflag = 1;
			break;

		default :
			res = FR_INT_ERR;
    3048:	68 94       	set
    304a:	99 24       	eor	r9, r9
    304c:	91 f8       	bld	r9, 1
    304e:	1b c0       	rjmp	.+54     	; 0x3086 <put_fat+0x22e>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc++ % SS(fs)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    3050:	98 2e       	mov	r9, r24
    3052:	19 c0       	rjmp	.+50     	; 0x3086 <put_fat+0x22e>
    3054:	98 2e       	mov	r9, r24
		default :
			res = FR_INT_ERR;
		}
	}

	return res;
    3056:	17 c0       	rjmp	.+46     	; 0x3086 <put_fat+0x22e>
			p = &fs->win[bc++ % SS(fs)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc % SS(fs)];
    3058:	81 e0       	ldi	r24, 0x01	; 1
    305a:	b8 22       	and	r11, r24
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    305c:	68 94       	set
    305e:	13 f8       	bld	r1, 3
    3060:	f6 94       	lsr	r15
    3062:	e7 94       	ror	r14
    3064:	d7 94       	ror	r13
    3066:	c7 94       	ror	r12
    3068:	16 94       	lsr	r1
    306a:	d1 f7       	brne	.-12     	; 0x3060 <put_fat+0x208>
    306c:	7c cf       	rjmp	.-264    	; 0x2f66 <put_fat+0x10e>
			p = &fs->win[bc++ % SS(fs)];
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = &fs->win[bc % SS(fs)];
    306e:	e1 e0       	ldi	r30, 0x01	; 1
    3070:	be 22       	and	r11, r30
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    3072:	fe 01       	movw	r30, r28
    3074:	ea 0d       	add	r30, r10
    3076:	fb 1d       	adc	r31, r11
    3078:	96 a5       	ldd	r25, Z+46	; 0x2e
    307a:	90 7f       	andi	r25, 0xF0	; 240
    307c:	8d 2d       	mov	r24, r13
    307e:	8f 70       	andi	r24, 0x0F	; 15
    3080:	c9 2e       	mov	r12, r25
    3082:	c8 2a       	or	r12, r24
    3084:	70 cf       	rjmp	.-288    	; 0x2f66 <put_fat+0x10e>
			res = FR_INT_ERR;
		}
	}

	return res;
}
    3086:	89 2d       	mov	r24, r9
    3088:	df 91       	pop	r29
    308a:	cf 91       	pop	r28
    308c:	1f 91       	pop	r17
    308e:	0f 91       	pop	r16
    3090:	ff 90       	pop	r15
    3092:	ef 90       	pop	r14
    3094:	df 90       	pop	r13
    3096:	cf 90       	pop	r12
    3098:	bf 90       	pop	r11
    309a:	af 90       	pop	r10
    309c:	9f 90       	pop	r9
    309e:	7f 90       	pop	r7
    30a0:	6f 90       	pop	r6
    30a2:	5f 90       	pop	r5
    30a4:	4f 90       	pop	r4
    30a6:	08 95       	ret

000030a8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    30a8:	4f 92       	push	r4
    30aa:	5f 92       	push	r5
    30ac:	6f 92       	push	r6
    30ae:	7f 92       	push	r7
    30b0:	8f 92       	push	r8
    30b2:	9f 92       	push	r9
    30b4:	af 92       	push	r10
    30b6:	bf 92       	push	r11
    30b8:	cf 92       	push	r12
    30ba:	df 92       	push	r13
    30bc:	ef 92       	push	r14
    30be:	ff 92       	push	r15
    30c0:	0f 93       	push	r16
    30c2:	1f 93       	push	r17
    30c4:	cf 93       	push	r28
    30c6:	df 93       	push	r29
    30c8:	ec 01       	movw	r28, r24
    30ca:	2a 01       	movw	r4, r20
    30cc:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    30ce:	41 15       	cp	r20, r1
    30d0:	51 05       	cpc	r21, r1
    30d2:	61 05       	cpc	r22, r1
    30d4:	71 05       	cpc	r23, r1
    30d6:	b9 f4       	brne	.+46     	; 0x3106 <create_chain+0x5e>
		scl = fs->last_clust;			/* Get suggested start point */
    30d8:	8a 84       	ldd	r8, Y+10	; 0x0a
    30da:	9b 84       	ldd	r9, Y+11	; 0x0b
    30dc:	ac 84       	ldd	r10, Y+12	; 0x0c
    30de:	bd 84       	ldd	r11, Y+13	; 0x0d
		if (!scl || scl >= fs->n_fatent) scl = 1;
    30e0:	81 14       	cp	r8, r1
    30e2:	91 04       	cpc	r9, r1
    30e4:	a1 04       	cpc	r10, r1
    30e6:	b1 04       	cpc	r11, r1
    30e8:	61 f1       	breq	.+88     	; 0x3142 <create_chain+0x9a>
    30ea:	8a 89       	ldd	r24, Y+18	; 0x12
    30ec:	9b 89       	ldd	r25, Y+19	; 0x13
    30ee:	ac 89       	ldd	r26, Y+20	; 0x14
    30f0:	bd 89       	ldd	r27, Y+21	; 0x15
    30f2:	88 16       	cp	r8, r24
    30f4:	99 06       	cpc	r9, r25
    30f6:	aa 06       	cpc	r10, r26
    30f8:	bb 06       	cpc	r11, r27
    30fa:	38 f1       	brcs	.+78     	; 0x314a <create_chain+0xa2>
    30fc:	81 2c       	mov	r8, r1
    30fe:	91 2c       	mov	r9, r1
    3100:	54 01       	movw	r10, r8
    3102:	83 94       	inc	r8
    3104:	22 c0       	rjmp	.+68     	; 0x314a <create_chain+0xa2>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    3106:	0e 94 89 15 	call	0x2b12	; 0x2b12 <get_fat>
    310a:	6b 01       	movw	r12, r22
    310c:	7c 01       	movw	r14, r24
		if (cs < 2) return 1;			/* Invalid value */
    310e:	62 30       	cpi	r22, 0x02	; 2
    3110:	71 05       	cpc	r23, r1
    3112:	81 05       	cpc	r24, r1
    3114:	91 05       	cpc	r25, r1
    3116:	08 f4       	brcc	.+2      	; 0x311a <create_chain+0x72>
    3118:	8e c0       	rjmp	.+284    	; 0x3236 <create_chain+0x18e>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
    311a:	8f ef       	ldi	r24, 0xFF	; 255
    311c:	c8 16       	cp	r12, r24
    311e:	d8 06       	cpc	r13, r24
    3120:	e8 06       	cpc	r14, r24
    3122:	f8 06       	cpc	r15, r24
    3124:	09 f4       	brne	.+2      	; 0x3128 <create_chain+0x80>
    3126:	8c c0       	rjmp	.+280    	; 0x3240 <create_chain+0x198>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    3128:	8a 89       	ldd	r24, Y+18	; 0x12
    312a:	9b 89       	ldd	r25, Y+19	; 0x13
    312c:	ac 89       	ldd	r26, Y+20	; 0x14
    312e:	bd 89       	ldd	r27, Y+21	; 0x15
    3130:	c8 16       	cp	r12, r24
    3132:	d9 06       	cpc	r13, r25
    3134:	ea 06       	cpc	r14, r26
    3136:	fb 06       	cpc	r15, r27
    3138:	08 f4       	brcc	.+2      	; 0x313c <create_chain+0x94>
    313a:	87 c0       	rjmp	.+270    	; 0x324a <create_chain+0x1a2>
		scl = clst;
    313c:	53 01       	movw	r10, r6
    313e:	42 01       	movw	r8, r4
    3140:	04 c0       	rjmp	.+8      	; 0x314a <create_chain+0xa2>
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
    3142:	81 2c       	mov	r8, r1
    3144:	91 2c       	mov	r9, r1
    3146:	54 01       	movw	r10, r8
    3148:	83 94       	inc	r8
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
    314a:	75 01       	movw	r14, r10
    314c:	64 01       	movw	r12, r8
	for (;;) {
		ncl++;							/* Next cluster */
    314e:	2f ef       	ldi	r18, 0xFF	; 255
    3150:	c2 1a       	sub	r12, r18
    3152:	d2 0a       	sbc	r13, r18
    3154:	e2 0a       	sbc	r14, r18
    3156:	f2 0a       	sbc	r15, r18
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
    3158:	8a 89       	ldd	r24, Y+18	; 0x12
    315a:	9b 89       	ldd	r25, Y+19	; 0x13
    315c:	ac 89       	ldd	r26, Y+20	; 0x14
    315e:	bd 89       	ldd	r27, Y+21	; 0x15
    3160:	c8 16       	cp	r12, r24
    3162:	d9 06       	cpc	r13, r25
    3164:	ea 06       	cpc	r14, r26
    3166:	fb 06       	cpc	r15, r27
    3168:	60 f0       	brcs	.+24     	; 0x3182 <create_chain+0xda>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    316a:	82 e0       	ldi	r24, 0x02	; 2
    316c:	88 16       	cp	r8, r24
    316e:	91 04       	cpc	r9, r1
    3170:	a1 04       	cpc	r10, r1
    3172:	b1 04       	cpc	r11, r1
    3174:	08 f4       	brcc	.+2      	; 0x3178 <create_chain+0xd0>
    3176:	6e c0       	rjmp	.+220    	; 0x3254 <create_chain+0x1ac>

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
			ncl = 2;
    3178:	c1 2c       	mov	r12, r1
    317a:	d1 2c       	mov	r13, r1
    317c:	76 01       	movw	r14, r12
    317e:	68 94       	set
    3180:	c1 f8       	bld	r12, 1
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    3182:	b7 01       	movw	r22, r14
    3184:	a6 01       	movw	r20, r12
    3186:	ce 01       	movw	r24, r28
    3188:	0e 94 89 15 	call	0x2b12	; 0x2b12 <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
    318c:	61 15       	cp	r22, r1
    318e:	71 05       	cpc	r23, r1
    3190:	81 05       	cpc	r24, r1
    3192:	91 05       	cpc	r25, r1
    3194:	99 f0       	breq	.+38     	; 0x31bc <create_chain+0x114>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    3196:	6f 3f       	cpi	r22, 0xFF	; 255
    3198:	2f ef       	ldi	r18, 0xFF	; 255
    319a:	72 07       	cpc	r23, r18
    319c:	82 07       	cpc	r24, r18
    319e:	92 07       	cpc	r25, r18
    31a0:	09 f4       	brne	.+2      	; 0x31a4 <create_chain+0xfc>
    31a2:	5d c0       	rjmp	.+186    	; 0x325e <create_chain+0x1b6>
    31a4:	61 30       	cpi	r22, 0x01	; 1
    31a6:	71 05       	cpc	r23, r1
    31a8:	81 05       	cpc	r24, r1
    31aa:	91 05       	cpc	r25, r1
    31ac:	09 f4       	brne	.+2      	; 0x31b0 <create_chain+0x108>
    31ae:	5c c0       	rjmp	.+184    	; 0x3268 <create_chain+0x1c0>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    31b0:	c8 14       	cp	r12, r8
    31b2:	d9 04       	cpc	r13, r9
    31b4:	ea 04       	cpc	r14, r10
    31b6:	fb 04       	cpc	r15, r11
    31b8:	51 f6       	brne	.-108    	; 0x314e <create_chain+0xa6>
    31ba:	5b c0       	rjmp	.+182    	; 0x3272 <create_chain+0x1ca>
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    31bc:	0f ef       	ldi	r16, 0xFF	; 255
    31be:	1f ef       	ldi	r17, 0xFF	; 255
    31c0:	2f ef       	ldi	r18, 0xFF	; 255
    31c2:	3f e0       	ldi	r19, 0x0F	; 15
    31c4:	b7 01       	movw	r22, r14
    31c6:	a6 01       	movw	r20, r12
    31c8:	ce 01       	movw	r24, r28
    31ca:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <put_fat>
	if (res == FR_OK && clst != 0) {
    31ce:	81 11       	cpse	r24, r1
    31d0:	2b c0       	rjmp	.+86     	; 0x3228 <create_chain+0x180>
    31d2:	41 14       	cp	r4, r1
    31d4:	51 04       	cpc	r5, r1
    31d6:	61 04       	cpc	r6, r1
    31d8:	71 04       	cpc	r7, r1
    31da:	49 f0       	breq	.+18     	; 0x31ee <create_chain+0x146>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    31dc:	97 01       	movw	r18, r14
    31de:	86 01       	movw	r16, r12
    31e0:	b3 01       	movw	r22, r6
    31e2:	a2 01       	movw	r20, r4
    31e4:	ce 01       	movw	r24, r28
    31e6:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <put_fat>
	}
	if (res == FR_OK) {
    31ea:	81 11       	cpse	r24, r1
    31ec:	1d c0       	rjmp	.+58     	; 0x3228 <create_chain+0x180>
		fs->last_clust = ncl;			/* Update FSINFO */
    31ee:	ca 86       	std	Y+10, r12	; 0x0a
    31f0:	db 86       	std	Y+11, r13	; 0x0b
    31f2:	ec 86       	std	Y+12, r14	; 0x0c
    31f4:	fd 86       	std	Y+13, r15	; 0x0d
		if (fs->free_clust != 0xFFFFFFFF) {
    31f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    31f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    31fa:	a8 89       	ldd	r26, Y+16	; 0x10
    31fc:	b9 89       	ldd	r27, Y+17	; 0x11
    31fe:	8f 3f       	cpi	r24, 0xFF	; 255
    3200:	2f ef       	ldi	r18, 0xFF	; 255
    3202:	92 07       	cpc	r25, r18
    3204:	a2 07       	cpc	r26, r18
    3206:	b2 07       	cpc	r27, r18
    3208:	c9 f1       	breq	.+114    	; 0x327c <create_chain+0x1d4>
			fs->free_clust--;
    320a:	01 97       	sbiw	r24, 0x01	; 1
    320c:	a1 09       	sbc	r26, r1
    320e:	b1 09       	sbc	r27, r1
    3210:	8e 87       	std	Y+14, r24	; 0x0e
    3212:	9f 87       	std	Y+15, r25	; 0x0f
    3214:	a8 8b       	std	Y+16, r26	; 0x10
    3216:	b9 8b       	std	Y+17, r27	; 0x11
			fs->fsi_flag |= 1;
    3218:	8d 81       	ldd	r24, Y+5	; 0x05
    321a:	81 60       	ori	r24, 0x01	; 1
    321c:	8d 83       	std	Y+5, r24	; 0x05
    321e:	6c 2d       	mov	r22, r12
    3220:	7d 2d       	mov	r23, r13
    3222:	8e 2d       	mov	r24, r14
    3224:	9f 2d       	mov	r25, r15
    3226:	33 c0       	rjmp	.+102    	; 0x328e <create_chain+0x1e6>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    3228:	81 30       	cpi	r24, 0x01	; 1
    322a:	69 f1       	breq	.+90     	; 0x3286 <create_chain+0x1de>
    322c:	61 e0       	ldi	r22, 0x01	; 1
    322e:	70 e0       	ldi	r23, 0x00	; 0
    3230:	80 e0       	ldi	r24, 0x00	; 0
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	2c c0       	rjmp	.+88     	; 0x328e <create_chain+0x1e6>
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
		if (cs < 2) return 1;			/* Invalid value */
    3236:	61 e0       	ldi	r22, 0x01	; 1
    3238:	70 e0       	ldi	r23, 0x00	; 0
    323a:	80 e0       	ldi	r24, 0x00	; 0
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	27 c0       	rjmp	.+78     	; 0x328e <create_chain+0x1e6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
    3240:	6f ef       	ldi	r22, 0xFF	; 255
    3242:	7f ef       	ldi	r23, 0xFF	; 255
    3244:	8f ef       	ldi	r24, 0xFF	; 255
    3246:	9f ef       	ldi	r25, 0xFF	; 255
    3248:	22 c0       	rjmp	.+68     	; 0x328e <create_chain+0x1e6>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    324a:	6c 2d       	mov	r22, r12
    324c:	7d 2d       	mov	r23, r13
    324e:	8e 2d       	mov	r24, r14
    3250:	9f 2d       	mov	r25, r15
    3252:	1d c0       	rjmp	.+58     	; 0x328e <create_chain+0x1e6>
	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    3254:	60 e0       	ldi	r22, 0x00	; 0
    3256:	70 e0       	ldi	r23, 0x00	; 0
    3258:	80 e0       	ldi	r24, 0x00	; 0
    325a:	90 e0       	ldi	r25, 0x00	; 0
    325c:	18 c0       	rjmp	.+48     	; 0x328e <create_chain+0x1e6>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
    325e:	6f ef       	ldi	r22, 0xFF	; 255
    3260:	7f ef       	ldi	r23, 0xFF	; 255
    3262:	8f ef       	ldi	r24, 0xFF	; 255
    3264:	9f ef       	ldi	r25, 0xFF	; 255
    3266:	13 c0       	rjmp	.+38     	; 0x328e <create_chain+0x1e6>
    3268:	61 e0       	ldi	r22, 0x01	; 1
    326a:	70 e0       	ldi	r23, 0x00	; 0
    326c:	80 e0       	ldi	r24, 0x00	; 0
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	0e c0       	rjmp	.+28     	; 0x328e <create_chain+0x1e6>
		if (ncl == scl) return 0;		/* No free cluster */
    3272:	60 e0       	ldi	r22, 0x00	; 0
    3274:	70 e0       	ldi	r23, 0x00	; 0
    3276:	80 e0       	ldi	r24, 0x00	; 0
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	09 c0       	rjmp	.+18     	; 0x328e <create_chain+0x1e6>
    327c:	6c 2d       	mov	r22, r12
    327e:	7d 2d       	mov	r23, r13
    3280:	8e 2d       	mov	r24, r14
    3282:	9f 2d       	mov	r25, r15
    3284:	04 c0       	rjmp	.+8      	; 0x328e <create_chain+0x1e6>
		if (fs->free_clust != 0xFFFFFFFF) {
			fs->free_clust--;
			fs->fsi_flag |= 1;
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    3286:	6f ef       	ldi	r22, 0xFF	; 255
    3288:	7f ef       	ldi	r23, 0xFF	; 255
    328a:	8f ef       	ldi	r24, 0xFF	; 255
    328c:	9f ef       	ldi	r25, 0xFF	; 255
	}

	return ncl;		/* Return new cluster number or error code */
}
    328e:	df 91       	pop	r29
    3290:	cf 91       	pop	r28
    3292:	1f 91       	pop	r17
    3294:	0f 91       	pop	r16
    3296:	ff 90       	pop	r15
    3298:	ef 90       	pop	r14
    329a:	df 90       	pop	r13
    329c:	cf 90       	pop	r12
    329e:	bf 90       	pop	r11
    32a0:	af 90       	pop	r10
    32a2:	9f 90       	pop	r9
    32a4:	8f 90       	pop	r8
    32a6:	7f 90       	pop	r7
    32a8:	6f 90       	pop	r6
    32aa:	5f 90       	pop	r5
    32ac:	4f 90       	pop	r4
    32ae:	08 95       	ret

000032b0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    32b0:	7f 92       	push	r7
    32b2:	8f 92       	push	r8
    32b4:	9f 92       	push	r9
    32b6:	af 92       	push	r10
    32b8:	bf 92       	push	r11
    32ba:	cf 92       	push	r12
    32bc:	df 92       	push	r13
    32be:	ef 92       	push	r14
    32c0:	ff 92       	push	r15
    32c2:	0f 93       	push	r16
    32c4:	1f 93       	push	r17
    32c6:	cf 93       	push	r28
    32c8:	df 93       	push	r29
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
    32ca:	dc 01       	movw	r26, r24
    32cc:	14 96       	adiw	r26, 0x04	; 4
    32ce:	cd 91       	ld	r28, X+
    32d0:	dc 91       	ld	r29, X
    32d2:	15 97       	sbiw	r26, 0x05	; 5
    32d4:	21 96       	adiw	r28, 0x01	; 1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
    32d6:	09 f4       	brne	.+2      	; 0x32da <dir_next+0x2a>
    32d8:	01 c1       	rjmp	.+514    	; 0x34dc <dir_next+0x22c>
    32da:	1e 96       	adiw	r26, 0x0e	; 14
    32dc:	8d 90       	ld	r8, X+
    32de:	9d 90       	ld	r9, X+
    32e0:	ad 90       	ld	r10, X+
    32e2:	bc 90       	ld	r11, X
    32e4:	51 97       	sbiw	r26, 0x11	; 17
    32e6:	81 14       	cp	r8, r1
    32e8:	91 04       	cpc	r9, r1
    32ea:	a1 04       	cpc	r10, r1
    32ec:	b1 04       	cpc	r11, r1
    32ee:	09 f4       	brne	.+2      	; 0x32f2 <dir_next+0x42>
    32f0:	f7 c0       	rjmp	.+494    	; 0x34e0 <dir_next+0x230>
    32f2:	7b 01       	movw	r14, r22
    32f4:	8c 01       	movw	r16, r24
		return FR_NO_FILE;

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
    32f6:	6e 01       	movw	r12, r28
    32f8:	bf e0       	ldi	r27, 0x0F	; 15
    32fa:	cb 22       	and	r12, r27
    32fc:	dd 24       	eor	r13, r13
    32fe:	c1 14       	cp	r12, r1
    3300:	d1 04       	cpc	r13, r1
    3302:	09 f0       	breq	.+2      	; 0x3306 <dir_next+0x56>
    3304:	d5 c0       	rjmp	.+426    	; 0x34b0 <dir_next+0x200>
		dp->sect++;					/* Next sector */
    3306:	ef ef       	ldi	r30, 0xFF	; 255
    3308:	8e 1a       	sub	r8, r30
    330a:	9e 0a       	sbc	r9, r30
    330c:	ae 0a       	sbc	r10, r30
    330e:	be 0a       	sbc	r11, r30
    3310:	dc 01       	movw	r26, r24
    3312:	1e 96       	adiw	r26, 0x0e	; 14
    3314:	8d 92       	st	X+, r8
    3316:	9d 92       	st	X+, r9
    3318:	ad 92       	st	X+, r10
    331a:	bc 92       	st	X, r11
    331c:	51 97       	sbiw	r26, 0x11	; 17

		if (!dp->clust) {		/* Static table */
    331e:	1a 96       	adiw	r26, 0x0a	; 10
    3320:	4d 91       	ld	r20, X+
    3322:	5d 91       	ld	r21, X+
    3324:	6d 91       	ld	r22, X+
    3326:	7c 91       	ld	r23, X
    3328:	1d 97       	sbiw	r26, 0x0d	; 13
    332a:	41 15       	cp	r20, r1
    332c:	51 05       	cpc	r21, r1
    332e:	61 05       	cpc	r22, r1
    3330:	71 05       	cpc	r23, r1
    3332:	49 f4       	brne	.+18     	; 0x3346 <dir_next+0x96>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
    3334:	ed 91       	ld	r30, X+
    3336:	fc 91       	ld	r31, X
    3338:	80 85       	ldd	r24, Z+8	; 0x08
    333a:	91 85       	ldd	r25, Z+9	; 0x09
    333c:	c8 17       	cp	r28, r24
    333e:	d9 07       	cpc	r29, r25
    3340:	08 f0       	brcs	.+2      	; 0x3344 <dir_next+0x94>
    3342:	d0 c0       	rjmp	.+416    	; 0x34e4 <dir_next+0x234>
    3344:	b5 c0       	rjmp	.+362    	; 0x34b0 <dir_next+0x200>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
    3346:	dc 01       	movw	r26, r24
    3348:	ed 91       	ld	r30, X+
    334a:	fc 91       	ld	r31, X
    334c:	22 81       	ldd	r18, Z+2	; 0x02
    334e:	30 e0       	ldi	r19, 0x00	; 0
    3350:	21 50       	subi	r18, 0x01	; 1
    3352:	31 09       	sbc	r19, r1
    3354:	ce 01       	movw	r24, r28
    3356:	92 95       	swap	r25
    3358:	82 95       	swap	r24
    335a:	8f 70       	andi	r24, 0x0F	; 15
    335c:	89 27       	eor	r24, r25
    335e:	9f 70       	andi	r25, 0x0F	; 15
    3360:	89 27       	eor	r24, r25
    3362:	28 23       	and	r18, r24
    3364:	39 23       	and	r19, r25
    3366:	23 2b       	or	r18, r19
    3368:	09 f0       	breq	.+2      	; 0x336c <dir_next+0xbc>
    336a:	a2 c0       	rjmp	.+324    	; 0x34b0 <dir_next+0x200>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
    336c:	cf 01       	movw	r24, r30
    336e:	0e 94 89 15 	call	0x2b12	; 0x2b12 <get_fat>
    3372:	4b 01       	movw	r8, r22
    3374:	5c 01       	movw	r10, r24
				if (clst <= 1) return FR_INT_ERR;
    3376:	62 30       	cpi	r22, 0x02	; 2
    3378:	71 05       	cpc	r23, r1
    337a:	81 05       	cpc	r24, r1
    337c:	91 05       	cpc	r25, r1
    337e:	08 f4       	brcc	.+2      	; 0x3382 <dir_next+0xd2>
    3380:	b3 c0       	rjmp	.+358    	; 0x34e8 <dir_next+0x238>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    3382:	6f 3f       	cpi	r22, 0xFF	; 255
    3384:	7f 4f       	sbci	r23, 0xFF	; 255
    3386:	8f 4f       	sbci	r24, 0xFF	; 255
    3388:	9f 4f       	sbci	r25, 0xFF	; 255
    338a:	09 f4       	brne	.+2      	; 0x338e <dir_next+0xde>
    338c:	af c0       	rjmp	.+350    	; 0x34ec <dir_next+0x23c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
    338e:	d8 01       	movw	r26, r16
    3390:	ed 91       	ld	r30, X+
    3392:	fc 91       	ld	r31, X
    3394:	82 89       	ldd	r24, Z+18	; 0x12
    3396:	93 89       	ldd	r25, Z+19	; 0x13
    3398:	a4 89       	ldd	r26, Z+20	; 0x14
    339a:	b5 89       	ldd	r27, Z+21	; 0x15
    339c:	88 16       	cp	r8, r24
    339e:	99 06       	cpc	r9, r25
    33a0:	aa 06       	cpc	r10, r26
    33a2:	bb 06       	cpc	r11, r27
    33a4:	08 f4       	brcc	.+2      	; 0x33a8 <dir_next+0xf8>
    33a6:	72 c0       	rjmp	.+228    	; 0x348c <dir_next+0x1dc>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
    33a8:	ef 28       	or	r14, r15
    33aa:	09 f4       	brne	.+2      	; 0x33ae <dir_next+0xfe>
    33ac:	a1 c0       	rjmp	.+322    	; 0x34f0 <dir_next+0x240>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
    33ae:	d8 01       	movw	r26, r16
    33b0:	1a 96       	adiw	r26, 0x0a	; 10
    33b2:	4d 91       	ld	r20, X+
    33b4:	5d 91       	ld	r21, X+
    33b6:	6d 91       	ld	r22, X+
    33b8:	7c 91       	ld	r23, X
    33ba:	1d 97       	sbiw	r26, 0x0d	; 13
    33bc:	cf 01       	movw	r24, r30
    33be:	0e 94 54 18 	call	0x30a8	; 0x30a8 <create_chain>
    33c2:	4b 01       	movw	r8, r22
    33c4:	5c 01       	movw	r10, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    33c6:	61 15       	cp	r22, r1
    33c8:	71 05       	cpc	r23, r1
    33ca:	81 05       	cpc	r24, r1
    33cc:	91 05       	cpc	r25, r1
    33ce:	09 f4       	brne	.+2      	; 0x33d2 <dir_next+0x122>
    33d0:	91 c0       	rjmp	.+290    	; 0x34f4 <dir_next+0x244>
					if (clst == 1) return FR_INT_ERR;
    33d2:	61 30       	cpi	r22, 0x01	; 1
    33d4:	71 05       	cpc	r23, r1
    33d6:	81 05       	cpc	r24, r1
    33d8:	91 05       	cpc	r25, r1
    33da:	09 f4       	brne	.+2      	; 0x33de <dir_next+0x12e>
    33dc:	8d c0       	rjmp	.+282    	; 0x34f8 <dir_next+0x248>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    33de:	6f 3f       	cpi	r22, 0xFF	; 255
    33e0:	7f 4f       	sbci	r23, 0xFF	; 255
    33e2:	8f 4f       	sbci	r24, 0xFF	; 255
    33e4:	9f 4f       	sbci	r25, 0xFF	; 255
    33e6:	09 f4       	brne	.+2      	; 0x33ea <dir_next+0x13a>
    33e8:	89 c0       	rjmp	.+274    	; 0x34fc <dir_next+0x24c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
    33ea:	d8 01       	movw	r26, r16
    33ec:	8d 91       	ld	r24, X+
    33ee:	9c 91       	ld	r25, X
    33f0:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <sync_window>
    33f4:	81 11       	cpse	r24, r1
    33f6:	84 c0       	rjmp	.+264    	; 0x3500 <dir_next+0x250>
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
    33f8:	f8 01       	movw	r30, r16
    33fa:	80 81       	ld	r24, Z
    33fc:	91 81       	ldd	r25, Z+1	; 0x01
    33fe:	fc 01       	movw	r30, r24
    3400:	be 96       	adiw	r30, 0x2e	; 46
    3402:	82 5d       	subi	r24, 0xD2	; 210
    3404:	9d 4f       	sbci	r25, 0xFD	; 253
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    3406:	11 92       	st	Z+, r1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    3408:	e8 17       	cp	r30, r24
    340a:	f9 07       	cpc	r31, r25
    340c:	e1 f7       	brne	.-8      	; 0x3406 <dir_next+0x156>
					if (clst == 1) return FR_INT_ERR;
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
    340e:	d8 01       	movw	r26, r16
    3410:	ed 90       	ld	r14, X+
    3412:	fc 90       	ld	r15, X
    3414:	b5 01       	movw	r22, r10
    3416:	a4 01       	movw	r20, r8
    3418:	c7 01       	movw	r24, r14
    341a:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <clust2sect>
    341e:	f7 01       	movw	r30, r14
    3420:	62 a7       	std	Z+42, r22	; 0x2a
    3422:	73 a7       	std	Z+43, r23	; 0x2b
    3424:	84 a7       	std	Z+44, r24	; 0x2c
    3426:	95 a7       	std	Z+45, r25	; 0x2d
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
    3428:	e1 2c       	mov	r14, r1
    342a:	f1 2c       	mov	r15, r1
						dp->fs->wflag = 1;
    342c:	77 24       	eor	r7, r7
    342e:	73 94       	inc	r7
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
    3430:	19 c0       	rjmp	.+50     	; 0x3464 <dir_next+0x1b4>
						dp->fs->wflag = 1;
    3432:	74 82       	std	Z+4, r7	; 0x04
						if (sync_window(dp->fs)) return FR_DISK_ERR;
    3434:	d8 01       	movw	r26, r16
    3436:	8d 91       	ld	r24, X+
    3438:	9c 91       	ld	r25, X
    343a:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <sync_window>
    343e:	81 11       	cpse	r24, r1
    3440:	61 c0       	rjmp	.+194    	; 0x3504 <dir_next+0x254>
						dp->fs->winsect++;
    3442:	d8 01       	movw	r26, r16
    3444:	ed 91       	ld	r30, X+
    3446:	fc 91       	ld	r31, X
    3448:	82 a5       	ldd	r24, Z+42	; 0x2a
    344a:	93 a5       	ldd	r25, Z+43	; 0x2b
    344c:	a4 a5       	ldd	r26, Z+44	; 0x2c
    344e:	b5 a5       	ldd	r27, Z+45	; 0x2d
    3450:	01 96       	adiw	r24, 0x01	; 1
    3452:	a1 1d       	adc	r26, r1
    3454:	b1 1d       	adc	r27, r1
    3456:	82 a7       	std	Z+42, r24	; 0x2a
    3458:	93 a7       	std	Z+43, r25	; 0x2b
    345a:	a4 a7       	std	Z+44, r26	; 0x2c
    345c:	b5 a7       	std	Z+45, r27	; 0x2d
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
    345e:	bf ef       	ldi	r27, 0xFF	; 255
    3460:	eb 1a       	sub	r14, r27
    3462:	fb 0a       	sbc	r15, r27
    3464:	d8 01       	movw	r26, r16
    3466:	ed 91       	ld	r30, X+
    3468:	fc 91       	ld	r31, X
    346a:	82 81       	ldd	r24, Z+2	; 0x02
    346c:	90 e0       	ldi	r25, 0x00	; 0
    346e:	e8 16       	cp	r14, r24
    3470:	f9 06       	cpc	r15, r25
    3472:	f8 f2       	brcs	.-66     	; 0x3432 <dir_next+0x182>
						dp->fs->wflag = 1;
						if (sync_window(dp->fs)) return FR_DISK_ERR;
						dp->fs->winsect++;
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
    3474:	82 a5       	ldd	r24, Z+42	; 0x2a
    3476:	93 a5       	ldd	r25, Z+43	; 0x2b
    3478:	a4 a5       	ldd	r26, Z+44	; 0x2c
    347a:	b5 a5       	ldd	r27, Z+45	; 0x2d
    347c:	8e 19       	sub	r24, r14
    347e:	9f 09       	sbc	r25, r15
    3480:	a1 09       	sbc	r26, r1
    3482:	b1 09       	sbc	r27, r1
    3484:	82 a7       	std	Z+42, r24	; 0x2a
    3486:	93 a7       	std	Z+43, r25	; 0x2b
    3488:	a4 a7       	std	Z+44, r26	; 0x2c
    348a:	b5 a7       	std	Z+45, r27	; 0x2d
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
    348c:	f8 01       	movw	r30, r16
    348e:	82 86       	std	Z+10, r8	; 0x0a
    3490:	93 86       	std	Z+11, r9	; 0x0b
    3492:	a4 86       	std	Z+12, r10	; 0x0c
    3494:	b5 86       	std	Z+13, r11	; 0x0d
				dp->sect = clust2sect(dp->fs, clst);
    3496:	b5 01       	movw	r22, r10
    3498:	a4 01       	movw	r20, r8
    349a:	80 81       	ld	r24, Z
    349c:	91 81       	ldd	r25, Z+1	; 0x01
    349e:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <clust2sect>
    34a2:	d8 01       	movw	r26, r16
    34a4:	1e 96       	adiw	r26, 0x0e	; 14
    34a6:	6d 93       	st	X+, r22
    34a8:	7d 93       	st	X+, r23
    34aa:	8d 93       	st	X+, r24
    34ac:	9c 93       	st	X, r25
    34ae:	51 97       	sbiw	r26, 0x11	; 17
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
    34b0:	f8 01       	movw	r30, r16
    34b2:	d5 83       	std	Z+5, r29	; 0x05
    34b4:	c4 83       	std	Z+4, r28	; 0x04
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
    34b6:	80 81       	ld	r24, Z
    34b8:	91 81       	ldd	r25, Z+1	; 0x01
    34ba:	8e 96       	adiw	r24, 0x2e	; 46
    34bc:	cc 0c       	add	r12, r12
    34be:	dd 1c       	adc	r13, r13
    34c0:	cc 0c       	add	r12, r12
    34c2:	dd 1c       	adc	r13, r13
    34c4:	cc 0c       	add	r12, r12
    34c6:	dd 1c       	adc	r13, r13
    34c8:	cc 0c       	add	r12, r12
    34ca:	dd 1c       	adc	r13, r13
    34cc:	cc 0c       	add	r12, r12
    34ce:	dd 1c       	adc	r13, r13
    34d0:	c8 0e       	add	r12, r24
    34d2:	d9 1e       	adc	r13, r25
    34d4:	d3 8a       	std	Z+19, r13	; 0x13
    34d6:	c2 8a       	std	Z+18, r12	; 0x12

	return FR_OK;
    34d8:	80 e0       	ldi	r24, 0x00	; 0
    34da:	15 c0       	rjmp	.+42     	; 0x3506 <dir_next+0x256>
#endif


	i = dp->index + 1;
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;
    34dc:	84 e0       	ldi	r24, 0x04	; 4
    34de:	13 c0       	rjmp	.+38     	; 0x3506 <dir_next+0x256>
    34e0:	84 e0       	ldi	r24, 0x04	; 4
    34e2:	11 c0       	rjmp	.+34     	; 0x3506 <dir_next+0x256>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
		dp->sect++;					/* Next sector */

		if (!dp->clust) {		/* Static table */
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
				return FR_NO_FILE;
    34e4:	84 e0       	ldi	r24, 0x04	; 4
    34e6:	0f c0       	rjmp	.+30     	; 0x3506 <dir_next+0x256>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;
    34e8:	82 e0       	ldi	r24, 0x02	; 2
    34ea:	0d c0       	rjmp	.+26     	; 0x3506 <dir_next+0x256>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    34ec:	81 e0       	ldi	r24, 0x01	; 1
    34ee:	0b c0       	rjmp	.+22     	; 0x3506 <dir_next+0x256>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
    34f0:	84 e0       	ldi	r24, 0x04	; 4
    34f2:	09 c0       	rjmp	.+18     	; 0x3506 <dir_next+0x256>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    34f4:	87 e0       	ldi	r24, 0x07	; 7
    34f6:	07 c0       	rjmp	.+14     	; 0x3506 <dir_next+0x256>
					if (clst == 1) return FR_INT_ERR;
    34f8:	82 e0       	ldi	r24, 0x02	; 2
    34fa:	05 c0       	rjmp	.+10     	; 0x3506 <dir_next+0x256>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    34fc:	81 e0       	ldi	r24, 0x01	; 1
    34fe:	03 c0       	rjmp	.+6      	; 0x3506 <dir_next+0x256>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
    3500:	81 e0       	ldi	r24, 0x01	; 1
    3502:	01 c0       	rjmp	.+2      	; 0x3506 <dir_next+0x256>
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dp->fs->wflag = 1;
						if (sync_window(dp->fs)) return FR_DISK_ERR;
    3504:	81 e0       	ldi	r24, 0x01	; 1

	dp->index = (WORD)i;	/* Current index */
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */

	return FR_OK;
}
    3506:	df 91       	pop	r29
    3508:	cf 91       	pop	r28
    350a:	1f 91       	pop	r17
    350c:	0f 91       	pop	r16
    350e:	ff 90       	pop	r15
    3510:	ef 90       	pop	r14
    3512:	df 90       	pop	r13
    3514:	cf 90       	pop	r12
    3516:	bf 90       	pop	r11
    3518:	af 90       	pop	r10
    351a:	9f 90       	pop	r9
    351c:	8f 90       	pop	r8
    351e:	7f 90       	pop	r7
    3520:	08 95       	ret

00003522 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
    3522:	1f 93       	push	r17
    3524:	cf 93       	push	r28
    3526:	df 93       	push	r29
    3528:	00 d0       	rcall	.+0      	; 0x352a <f_mount+0x8>
    352a:	00 d0       	rcall	.+0      	; 0x352c <f_mount+0xa>
    352c:	00 d0       	rcall	.+0      	; 0x352e <f_mount+0xc>
    352e:	cd b7       	in	r28, 0x3d	; 61
    3530:	de b7       	in	r29, 0x3e	; 62
    3532:	9c 83       	std	Y+4, r25	; 0x04
    3534:	8b 83       	std	Y+3, r24	; 0x03
    3536:	7e 83       	std	Y+6, r23	; 0x06
    3538:	6d 83       	std	Y+5, r22	; 0x05
    353a:	14 2f       	mov	r17, r20
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
    353c:	7a 83       	std	Y+2, r23	; 0x02
    353e:	69 83       	std	Y+1, r22	; 0x01


	vol = get_ldnumber(&rp);
    3540:	ce 01       	movw	r24, r28
    3542:	01 96       	adiw	r24, 0x01	; 1
    3544:	0e 94 35 11 	call	0x226a	; 0x226a <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
    3548:	99 23       	and	r25, r25
    354a:	34 f1       	brlt	.+76     	; 0x3598 <f_mount+0x76>
	cfs = FatFs[vol];					/* Pointer to fs object */
    354c:	fc 01       	movw	r30, r24
    354e:	ee 0f       	add	r30, r30
    3550:	ff 1f       	adc	r31, r31
    3552:	e3 57       	subi	r30, 0x73	; 115
    3554:	fc 4f       	sbci	r31, 0xFC	; 252
    3556:	01 90       	ld	r0, Z+
    3558:	f0 81       	ld	r31, Z
    355a:	e0 2d       	mov	r30, r0

	if (cfs) {
    355c:	30 97       	sbiw	r30, 0x00	; 0
    355e:	09 f0       	breq	.+2      	; 0x3562 <f_mount+0x40>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
    3560:	10 82       	st	Z, r1
	}

	if (fs) {
    3562:	eb 81       	ldd	r30, Y+3	; 0x03
    3564:	fc 81       	ldd	r31, Y+4	; 0x04
    3566:	30 97       	sbiw	r30, 0x00	; 0
    3568:	e9 f0       	breq	.+58     	; 0x35a4 <f_mount+0x82>
		fs->fs_type = 0;				/* Clear new fs object */
    356a:	10 82       	st	Z, r1
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    356c:	2b 81       	ldd	r18, Y+3	; 0x03
    356e:	3c 81       	ldd	r19, Y+4	; 0x04
    3570:	88 0f       	add	r24, r24
    3572:	99 1f       	adc	r25, r25
    3574:	fc 01       	movw	r30, r24
    3576:	e3 57       	subi	r30, 0x73	; 115
    3578:	fc 4f       	sbci	r31, 0xFC	; 252
    357a:	31 83       	std	Z+1, r19	; 0x01
    357c:	20 83       	st	Z, r18

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    357e:	23 2b       	or	r18, r19
    3580:	69 f0       	breq	.+26     	; 0x359c <f_mount+0x7a>
    3582:	11 30       	cpi	r17, 0x01	; 1
    3584:	69 f4       	brne	.+26     	; 0x35a0 <f_mount+0x7e>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
    3586:	40 e0       	ldi	r20, 0x00	; 0
    3588:	be 01       	movw	r22, r28
    358a:	6b 5f       	subi	r22, 0xFB	; 251
    358c:	7f 4f       	sbci	r23, 0xFF	; 255
    358e:	ce 01       	movw	r24, r28
    3590:	03 96       	adiw	r24, 0x03	; 3
    3592:	0e 94 75 12 	call	0x24ea	; 0x24ea <find_volume>
	LEAVE_FF(fs, res);
    3596:	0e c0       	rjmp	.+28     	; 0x35b4 <f_mount+0x92>
	FRESULT res;
	const TCHAR *rp = path;


	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
    3598:	8b e0       	ldi	r24, 0x0B	; 11
    359a:	0c c0       	rjmp	.+24     	; 0x35b4 <f_mount+0x92>
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    359c:	80 e0       	ldi	r24, 0x00	; 0
    359e:	0a c0       	rjmp	.+20     	; 0x35b4 <f_mount+0x92>
    35a0:	80 e0       	ldi	r24, 0x00	; 0
    35a2:	08 c0       	rjmp	.+16     	; 0x35b4 <f_mount+0x92>
		fs->fs_type = 0;				/* Clear new fs object */
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    35a4:	88 0f       	add	r24, r24
    35a6:	99 1f       	adc	r25, r25
    35a8:	fc 01       	movw	r30, r24
    35aa:	e3 57       	subi	r30, 0x73	; 115
    35ac:	fc 4f       	sbci	r31, 0xFC	; 252
    35ae:	11 82       	std	Z+1, r1	; 0x01
    35b0:	10 82       	st	Z, r1

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    35b2:	80 e0       	ldi	r24, 0x00	; 0

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
    35b4:	26 96       	adiw	r28, 0x06	; 6
    35b6:	0f b6       	in	r0, 0x3f	; 63
    35b8:	f8 94       	cli
    35ba:	de bf       	out	0x3e, r29	; 62
    35bc:	0f be       	out	0x3f, r0	; 63
    35be:	cd bf       	out	0x3d, r28	; 61
    35c0:	df 91       	pop	r29
    35c2:	cf 91       	pop	r28
    35c4:	1f 91       	pop	r17
    35c6:	08 95       	ret

000035c8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    35c8:	2f 92       	push	r2
    35ca:	3f 92       	push	r3
    35cc:	4f 92       	push	r4
    35ce:	5f 92       	push	r5
    35d0:	6f 92       	push	r6
    35d2:	7f 92       	push	r7
    35d4:	8f 92       	push	r8
    35d6:	9f 92       	push	r9
    35d8:	af 92       	push	r10
    35da:	bf 92       	push	r11
    35dc:	cf 92       	push	r12
    35de:	df 92       	push	r13
    35e0:	ef 92       	push	r14
    35e2:	ff 92       	push	r15
    35e4:	0f 93       	push	r16
    35e6:	1f 93       	push	r17
    35e8:	cf 93       	push	r28
    35ea:	df 93       	push	r29
    35ec:	cd b7       	in	r28, 0x3d	; 61
    35ee:	de b7       	in	r29, 0x3e	; 62
    35f0:	ae 97       	sbiw	r28, 0x2e	; 46
    35f2:	0f b6       	in	r0, 0x3f	; 63
    35f4:	f8 94       	cli
    35f6:	de bf       	out	0x3e, r29	; 62
    35f8:	0f be       	out	0x3f, r0	; 63
    35fa:	cd bf       	out	0x3d, r28	; 61
    35fc:	7c a3       	std	Y+36, r23	; 0x24
    35fe:	6b a3       	std	Y+35, r22	; 0x23
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
    3600:	00 97       	sbiw	r24, 0x00	; 0
    3602:	09 f4       	brne	.+2      	; 0x3606 <f_open+0x3e>
    3604:	99 c2       	rjmp	.+1330   	; 0x3b38 <f_open+0x570>
    3606:	84 2e       	mov	r8, r20
    3608:	1c 01       	movw	r2, r24
	fp->fs = 0;			/* Clear file object */
    360a:	dc 01       	movw	r26, r24
    360c:	1d 92       	st	X+, r1
    360e:	1c 92       	st	X, r1

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
    3610:	4e 71       	andi	r20, 0x1E	; 30
    3612:	be 01       	movw	r22, r28
    3614:	6d 5d       	subi	r22, 0xDD	; 221
    3616:	7f 4f       	sbci	r23, 0xFF	; 255
    3618:	ce 01       	movw	r24, r28
    361a:	01 96       	adiw	r24, 0x01	; 1
    361c:	0e 94 75 12 	call	0x24ea	; 0x24ea <find_volume>
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
    3620:	81 11       	cpse	r24, r1
    3622:	f3 c2       	rjmp	.+1510   	; 0x3c0a <f_open+0x642>
		INIT_BUF(dj);
    3624:	ce 01       	movw	r24, r28
    3626:	47 96       	adiw	r24, 0x17	; 23
    3628:	9e 8b       	std	Y+22, r25	; 0x16
    362a:	8d 8b       	std	Y+21, r24	; 0x15
		res = follow_path(&dj, path);	/* Follow the file path */
    362c:	cb a0       	ldd	r12, Y+35	; 0x23
    362e:	dc a0       	ldd	r13, Y+36	; 0x24
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
    3630:	f6 01       	movw	r30, r12
    3632:	80 81       	ld	r24, Z
    3634:	8f 32       	cpi	r24, 0x2F	; 47
    3636:	11 f0       	breq	.+4      	; 0x363c <f_open+0x74>
    3638:	8c 35       	cpi	r24, 0x5C	; 92
    363a:	19 f4       	brne	.+6      	; 0x3642 <f_open+0x7a>
		path++;
    363c:	ff ef       	ldi	r31, 0xFF	; 255
    363e:	cf 1a       	sub	r12, r31
    3640:	df 0a       	sbc	r13, r31
	if (!fp) return FR_INVALID_OBJECT;
	fp->fs = 0;			/* Clear file object */

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    3642:	28 2d       	mov	r18, r8
    3644:	2f 71       	andi	r18, 0x1F	; 31
    3646:	2d a7       	std	Y+45, r18	; 0x2d
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
		path++;
	dp->sclust = 0;							/* Always start from the root directory */
    3648:	1f 82       	std	Y+7, r1	; 0x07
    364a:	18 86       	std	Y+8, r1	; 0x08
    364c:	19 86       	std	Y+9, r1	; 0x09
    364e:	1a 86       	std	Y+10, r1	; 0x0a
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
    3650:	d6 01       	movw	r26, r12
    3652:	8c 91       	ld	r24, X
    3654:	80 32       	cpi	r24, 0x20	; 32
    3656:	70 f4       	brcc	.+28     	; 0x3674 <f_open+0xac>
		res = dir_sdi(dp, 0);
    3658:	60 e0       	ldi	r22, 0x00	; 0
    365a:	70 e0       	ldi	r23, 0x00	; 0
    365c:	ce 01       	movw	r24, r28
    365e:	01 96       	adiw	r24, 0x01	; 1
    3660:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <dir_sdi>
		dp->dir = 0;
    3664:	1c 8a       	std	Y+20, r1	; 0x14
    3666:	1b 8a       	std	Y+19, r1	; 0x13
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);	/* Follow the file path */
		dir = dj.dir;
    3668:	e1 2c       	mov	r14, r1
    366a:	f1 2c       	mov	r15, r1
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
    366c:	88 23       	and	r24, r24
    366e:	09 f4       	brne	.+2      	; 0x3672 <f_open+0xaa>
    3670:	98 c2       	rjmp	.+1328   	; 0x3ba2 <f_open+0x5da>
    3672:	9e c2       	rjmp	.+1340   	; 0x3bb0 <f_open+0x5e8>
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    3674:	68 94       	set
    3676:	bb 24       	eor	r11, r11
    3678:	b5 f8       	bld	r11, 5
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    367a:	a1 2c       	mov	r10, r1
    367c:	71 2c       	mov	r7, r1
    367e:	68 94       	set
    3680:	66 24       	eor	r6, r6
    3682:	63 f8       	bld	r6, 3
    3684:	41 2c       	mov	r4, r1
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    3686:	56 2c       	mov	r5, r6
    3688:	4e a6       	std	Y+46, r4	; 0x2e
    368a:	f6 01       	movw	r30, r12
    368c:	03 c0       	rjmp	.+6      	; 0x3694 <f_open+0xcc>
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    368e:	fd 01       	movw	r30, r26
    3690:	01 c0       	rjmp	.+2      	; 0x3694 <f_open+0xcc>
    3692:	fd 01       	movw	r30, r26
    3694:	9f 01       	movw	r18, r30
    3696:	df 01       	movw	r26, r30
    3698:	8d 91       	ld	r24, X+
    369a:	8f 32       	cpi	r24, 0x2F	; 47
    369c:	c1 f3       	breq	.-16     	; 0x368e <f_open+0xc6>
    369e:	8c 35       	cpi	r24, 0x5C	; 92
    36a0:	c1 f3       	breq	.-16     	; 0x3692 <f_open+0xca>
	sfn = dp->fn;
    36a2:	6d 89       	ldd	r22, Y+21	; 0x15
    36a4:	7e 89       	ldd	r23, Y+22	; 0x16
    36a6:	db 01       	movw	r26, r22
    36a8:	cb 01       	movw	r24, r22
    36aa:	0b 96       	adiw	r24, 0x0b	; 11
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    36ac:	bd 92       	st	X+, r11
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    36ae:	a8 17       	cp	r26, r24
    36b0:	b9 07       	cpc	r27, r25
    36b2:	e1 f7       	brne	.-8      	; 0x36ac <f_open+0xe4>
    36b4:	4a 2d       	mov	r20, r10
    36b6:	57 2d       	mov	r21, r7
    36b8:	c1 2c       	mov	r12, r1
    36ba:	d1 2c       	mov	r13, r1
    36bc:	e6 2c       	mov	r14, r6
    36be:	f4 2c       	mov	r15, r4
    36c0:	91 2c       	mov	r9, r1
    36c2:	3a a7       	std	Y+42, r19	; 0x2a
    36c4:	29 a7       	std	Y+41, r18	; 0x29
    36c6:	7e a3       	std	Y+38, r23	; 0x26
    36c8:	6d a3       	std	Y+37, r22	; 0x25
    36ca:	39 2d       	mov	r19, r9
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    36cc:	bf ef       	ldi	r27, 0xFF	; 255
    36ce:	cb 1a       	sub	r12, r27
    36d0:	db 0a       	sbc	r13, r27
    36d2:	71 91       	ld	r23, Z+
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    36d4:	71 32       	cpi	r23, 0x21	; 33
    36d6:	08 f4       	brcc	.+2      	; 0x36da <f_open+0x112>
    36d8:	40 c2       	rjmp	.+1152   	; 0x3b5a <f_open+0x592>
    36da:	7f 32       	cpi	r23, 0x2F	; 47
    36dc:	09 f4       	brne	.+2      	; 0x36e0 <f_open+0x118>
    36de:	34 c2       	rjmp	.+1128   	; 0x3b48 <f_open+0x580>
    36e0:	7c 35       	cpi	r23, 0x5C	; 92
    36e2:	09 f4       	brne	.+2      	; 0x36e6 <f_open+0x11e>
    36e4:	31 c2       	rjmp	.+1122   	; 0x3b48 <f_open+0x580>
		if (c == '.' || i >= ni) {
    36e6:	7e 32       	cpi	r23, 0x2E	; 46
    36e8:	19 f0       	breq	.+6      	; 0x36f0 <f_open+0x128>
    36ea:	4e 15       	cp	r20, r14
    36ec:	5f 05       	cpc	r21, r15
    36ee:	90 f0       	brcs	.+36     	; 0x3714 <f_open+0x14c>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    36f0:	28 e0       	ldi	r18, 0x08	; 8
    36f2:	e2 16       	cp	r14, r18
    36f4:	f1 04       	cpc	r15, r1
    36f6:	09 f0       	breq	.+2      	; 0x36fa <f_open+0x132>
    36f8:	74 c2       	rjmp	.+1256   	; 0x3be2 <f_open+0x61a>
    36fa:	7e 32       	cpi	r23, 0x2E	; 46
    36fc:	09 f0       	breq	.+2      	; 0x3700 <f_open+0x138>
    36fe:	71 c2       	rjmp	.+1250   	; 0x3be2 <f_open+0x61a>
			i = 8; ni = 11;
			b <<= 2; continue;
    3700:	33 0f       	add	r19, r19
    3702:	33 0f       	add	r19, r19
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    3704:	45 2d       	mov	r20, r5
    3706:	5e a5       	ldd	r21, Y+46	; 0x2e
    3708:	0f 2e       	mov	r0, r31
    370a:	fb e0       	ldi	r31, 0x0B	; 11
    370c:	ef 2e       	mov	r14, r31
    370e:	f0 2d       	mov	r31, r0
    3710:	f1 2c       	mov	r15, r1
    3712:	dc cf       	rjmp	.-72     	; 0x36cc <f_open+0x104>
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended character? */
    3714:	77 23       	and	r23, r23
    3716:	0c f4       	brge	.+2      	; 0x371a <f_open+0x152>
    3718:	64 c2       	rjmp	.+1224   	; 0x3be2 <f_open+0x61a>
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
    371a:	07 2f       	mov	r16, r23
    371c:	10 e0       	ldi	r17, 0x00	; 0
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    371e:	02 32       	cpi	r16, 0x22	; 34
    3720:	11 05       	cpc	r17, r1
    3722:	09 f4       	brne	.+2      	; 0x3726 <f_open+0x15e>
    3724:	32 c2       	rjmp	.+1124   	; 0x3b8a <f_open+0x5c2>
    3726:	a9 ea       	ldi	r26, 0xA9	; 169
    3728:	b1 e0       	ldi	r27, 0x01	; 1
    372a:	8d 91       	ld	r24, X+
    372c:	88 23       	and	r24, r24
    372e:	09 f4       	brne	.+2      	; 0x3732 <f_open+0x16a>
    3730:	05 c2       	rjmp	.+1034   	; 0x3b3c <f_open+0x574>
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	08 17       	cp	r16, r24
    3736:	19 07       	cpc	r17, r25
    3738:	c1 f7       	brne	.-16     	; 0x372a <f_open+0x162>
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
    373a:	86 e0       	ldi	r24, 0x06	; 6
    373c:	2b c2       	rjmp	.+1110   	; 0x3b94 <f_open+0x5cc>
			if (IsUpper(c)) {			/* ASCII large capital? */
				b |= 2;
    373e:	32 60       	ori	r19, 0x02	; 2
    3740:	06 c0       	rjmp	.+12     	; 0x374e <f_open+0x186>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    3742:	8f e9       	ldi	r24, 0x9F	; 159
    3744:	87 0f       	add	r24, r23
    3746:	8a 31       	cpi	r24, 0x1A	; 26
    3748:	10 f4       	brcc	.+4      	; 0x374e <f_open+0x186>
					b |= 1; c -= 0x20;
    374a:	31 60       	ori	r19, 0x01	; 1
    374c:	70 52       	subi	r23, 0x20	; 32
				}
			}
			sfn[i++] = c;
    374e:	ad a1       	ldd	r26, Y+37	; 0x25
    3750:	be a1       	ldd	r27, Y+38	; 0x26
    3752:	a4 0f       	add	r26, r20
    3754:	b5 1f       	adc	r27, r21
    3756:	7c 93       	st	X, r23
    3758:	4f 5f       	subi	r20, 0xFF	; 255
    375a:	5f 4f       	sbci	r21, 0xFF	; 255
    375c:	b7 cf       	rjmp	.-146    	; 0x36cc <f_open+0x104>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    375e:	45 2b       	or	r20, r21
    3760:	09 f4       	brne	.+2      	; 0x3764 <f_open+0x19c>
    3762:	3f c2       	rjmp	.+1150   	; 0x3be2 <f_open+0x61a>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
    3764:	db 01       	movw	r26, r22
    3766:	9c 91       	ld	r25, X
    3768:	95 3e       	cpi	r25, 0xE5	; 229
    376a:	11 f4       	brne	.+4      	; 0x3770 <f_open+0x1a8>
    376c:	e5 e0       	ldi	r30, 0x05	; 5
    376e:	ec 93       	st	X, r30

	if (ni == 8) b <<= 2;
    3770:	f8 e0       	ldi	r31, 0x08	; 8
    3772:	ef 16       	cp	r14, r31
    3774:	f1 04       	cpc	r15, r1
    3776:	11 f4       	brne	.+4      	; 0x377c <f_open+0x1b4>
    3778:	99 0c       	add	r9, r9
    377a:	99 0c       	add	r9, r9
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    377c:	99 2d       	mov	r25, r9
    377e:	93 70       	andi	r25, 0x03	; 3
    3780:	91 30       	cpi	r25, 0x01	; 1
    3782:	09 f4       	brne	.+2      	; 0x3786 <f_open+0x1be>
    3784:	80 61       	ori	r24, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    3786:	99 2d       	mov	r25, r9
    3788:	9c 70       	andi	r25, 0x0C	; 12
    378a:	94 30       	cpi	r25, 0x04	; 4
    378c:	09 f4       	brne	.+2      	; 0x3790 <f_open+0x1c8>
    378e:	88 60       	ori	r24, 0x08	; 8

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
    3790:	db 01       	movw	r26, r22
    3792:	1b 96       	adiw	r26, 0x0b	; 11
    3794:	8c 93       	st	X, r24
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
    3796:	6a 2d       	mov	r22, r10
    3798:	77 2d       	mov	r23, r7
    379a:	ce 01       	movw	r24, r28
    379c:	01 96       	adiw	r24, 0x01	; 1
    379e:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <dir_sdi>
	if (res != FR_OK) return res;
    37a2:	81 11       	cpse	r24, r1
    37a4:	e8 c1       	rjmp	.+976    	; 0x3b76 <f_open+0x5ae>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
    37a6:	4f 85       	ldd	r20, Y+15	; 0x0f
    37a8:	58 89       	ldd	r21, Y+16	; 0x10
    37aa:	69 89       	ldd	r22, Y+17	; 0x11
    37ac:	7a 89       	ldd	r23, Y+18	; 0x12
    37ae:	89 81       	ldd	r24, Y+1	; 0x01
    37b0:	9a 81       	ldd	r25, Y+2	; 0x02
    37b2:	0e 94 d7 11 	call	0x23ae	; 0x23ae <move_window>
		if (res != FR_OK) break;
    37b6:	81 11       	cpse	r24, r1
    37b8:	de c1       	rjmp	.+956    	; 0x3b76 <f_open+0x5ae>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
    37ba:	eb 88       	ldd	r14, Y+19	; 0x13
    37bc:	fc 88       	ldd	r15, Y+20	; 0x14
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    37be:	f7 01       	movw	r30, r14
    37c0:	80 81       	ld	r24, Z
    37c2:	88 23       	and	r24, r24
    37c4:	d9 f0       	breq	.+54     	; 0x37fc <f_open+0x234>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
    37c6:	63 85       	ldd	r22, Z+11	; 0x0b
    37c8:	63 fd       	sbrc	r22, 3
    37ca:	0f c0       	rjmp	.+30     	; 0x37ea <f_open+0x222>
    37cc:	4d 89       	ldd	r20, Y+21	; 0x15
    37ce:	5e 89       	ldd	r21, Y+22	; 0x16
    37d0:	da 01       	movw	r26, r20
    37d2:	97 01       	movw	r18, r14
    37d4:	25 5f       	subi	r18, 0xF5	; 245
    37d6:	3f 4f       	sbci	r19, 0xFF	; 255
    37d8:	04 c0       	rjmp	.+8      	; 0x37e2 <f_open+0x21a>
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    37da:	2e 17       	cp	r18, r30
    37dc:	3f 07       	cpc	r19, r31
    37de:	09 f4       	brne	.+2      	; 0x37e2 <f_open+0x21a>
    37e0:	c5 c1       	rjmp	.+906    	; 0x3b6c <f_open+0x5a4>
    37e2:	91 91       	ld	r25, Z+
    37e4:	8d 91       	ld	r24, X+
    37e6:	98 17       	cp	r25, r24
    37e8:	c1 f3       	breq	.-16     	; 0x37da <f_open+0x212>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
    37ea:	6a 2d       	mov	r22, r10
    37ec:	77 2d       	mov	r23, r7
    37ee:	ce 01       	movw	r24, r28
    37f0:	01 96       	adiw	r24, 0x01	; 1
    37f2:	0e 94 58 19 	call	0x32b0	; 0x32b0 <dir_next>
	} while (res == FR_OK);
    37f6:	88 23       	and	r24, r24
    37f8:	b1 f2       	breq	.-84     	; 0x37a6 <f_open+0x1de>
    37fa:	bd c1       	rjmp	.+890    	; 0x3b76 <f_open+0x5ae>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the sagment name */
			ns = dp->fn[NSFLAG];
    37fc:	ed 89       	ldd	r30, Y+21	; 0x15
    37fe:	fe 89       	ldd	r31, Y+22	; 0x16
    3800:	93 85       	ldd	r25, Z+11	; 0x0b
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    3802:	92 fd       	sbrc	r25, 2
    3804:	c4 c1       	rjmp	.+904    	; 0x3b8e <f_open+0x5c6>
    3806:	85 e0       	ldi	r24, 0x05	; 5
    3808:	c5 c1       	rjmp	.+906    	; 0x3b94 <f_open+0x5cc>
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			dir = dp->dir;						/* Follow the sub-directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
    380a:	64 ff       	sbrs	r22, 4
    380c:	c2 c1       	rjmp	.+900    	; 0x3b92 <f_open+0x5ca>
	BYTE* dir	/* Pointer to the directory entry */
)
{
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
    380e:	d7 01       	movw	r26, r14
    3810:	5a 96       	adiw	r26, 0x1a	; 26
    3812:	8d 91       	ld	r24, X+
    3814:	9c 91       	ld	r25, X
    3816:	5b 97       	sbiw	r26, 0x1b	; 27
    3818:	a0 e0       	ldi	r26, 0x00	; 0
    381a:	b0 e0       	ldi	r27, 0x00	; 0
	if (fs->fs_type == FS_FAT32)
    381c:	e9 81       	ldd	r30, Y+1	; 0x01
    381e:	fa 81       	ldd	r31, Y+2	; 0x02
    3820:	20 81       	ld	r18, Z
    3822:	23 30       	cpi	r18, 0x03	; 3
    3824:	61 f4       	brne	.+24     	; 0x383e <f_open+0x276>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
    3826:	f7 01       	movw	r30, r14
    3828:	44 89       	ldd	r20, Z+20	; 0x14
    382a:	55 89       	ldd	r21, Z+21	; 0x15
    382c:	60 e0       	ldi	r22, 0x00	; 0
    382e:	70 e0       	ldi	r23, 0x00	; 0
    3830:	ba 01       	movw	r22, r20
    3832:	55 27       	eor	r21, r21
    3834:	44 27       	eor	r20, r20
    3836:	84 2b       	or	r24, r20
    3838:	95 2b       	or	r25, r21
    383a:	a6 2b       	or	r26, r22
    383c:	b7 2b       	or	r27, r23
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			dir = dp->dir;						/* Follow the sub-directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
				res = FR_NO_PATH; break;
			}
			dp->sclust = ld_clust(dp->fs, dir);
    383e:	8f 83       	std	Y+7, r24	; 0x07
    3840:	98 87       	std	Y+8, r25	; 0x08
    3842:	a9 87       	std	Y+9, r26	; 0x09
    3844:	ba 87       	std	Y+10, r27	; 0x0a
    3846:	21 cf       	rjmp	.-446    	; 0x368a <f_open+0xc2>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
			if (res != FR_OK) {					/* No file, create new */
    3848:	88 23       	and	r24, r24
    384a:	09 f4       	brne	.+2      	; 0x384e <f_open+0x286>
    384c:	55 c0       	rjmp	.+170    	; 0x38f8 <f_open+0x330>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    384e:	84 30       	cpi	r24, 0x04	; 4
    3850:	09 f0       	breq	.+2      	; 0x3854 <f_open+0x28c>
    3852:	4a c0       	rjmp	.+148    	; 0x38e8 <f_open+0x320>
{
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
    3854:	60 e0       	ldi	r22, 0x00	; 0
    3856:	70 e0       	ldi	r23, 0x00	; 0
    3858:	ce 01       	movw	r24, r28
    385a:	01 96       	adiw	r24, 0x01	; 1
    385c:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <dir_sdi>
	if (res == FR_OK) {
    3860:	81 11       	cpse	r24, r1
    3862:	19 c0       	rjmp	.+50     	; 0x3896 <f_open+0x2ce>
		n = 0;
		do {
			res = move_window(dp->fs, dp->sect);
    3864:	4f 85       	ldd	r20, Y+15	; 0x0f
    3866:	58 89       	ldd	r21, Y+16	; 0x10
    3868:	69 89       	ldd	r22, Y+17	; 0x11
    386a:	7a 89       	ldd	r23, Y+18	; 0x12
    386c:	89 81       	ldd	r24, Y+1	; 0x01
    386e:	9a 81       	ldd	r25, Y+2	; 0x02
    3870:	0e 94 d7 11 	call	0x23ae	; 0x23ae <move_window>
			if (res != FR_OK) break;
    3874:	81 11       	cpse	r24, r1
    3876:	0f c0       	rjmp	.+30     	; 0x3896 <f_open+0x2ce>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
    3878:	eb 89       	ldd	r30, Y+19	; 0x13
    387a:	fc 89       	ldd	r31, Y+20	; 0x14
    387c:	80 81       	ld	r24, Z
    387e:	85 3e       	cpi	r24, 0xE5	; 229
    3880:	79 f0       	breq	.+30     	; 0x38a0 <f_open+0x2d8>
    3882:	88 23       	and	r24, r24
    3884:	69 f0       	breq	.+26     	; 0x38a0 <f_open+0x2d8>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
    3886:	61 e0       	ldi	r22, 0x01	; 1
    3888:	70 e0       	ldi	r23, 0x00	; 0
    388a:	ce 01       	movw	r24, r28
    388c:	01 96       	adiw	r24, 0x01	; 1
    388e:	0e 94 58 19 	call	0x32b0	; 0x32b0 <dir_next>
		} while (res == FR_OK);
    3892:	88 23       	and	r24, r24
    3894:	39 f3       	breq	.-50     	; 0x3864 <f_open+0x29c>
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    3896:	84 30       	cpi	r24, 0x04	; 4
    3898:	09 f4       	brne	.+2      	; 0x389c <f_open+0x2d4>
    389a:	a7 c1       	rjmp	.+846    	; 0x3bea <f_open+0x622>
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
    389c:	81 11       	cpse	r24, r1
    389e:	a8 c1       	rjmp	.+848    	; 0x3bf0 <f_open+0x628>
		res = move_window(dp->fs, dp->sect);
    38a0:	4f 85       	ldd	r20, Y+15	; 0x0f
    38a2:	58 89       	ldd	r21, Y+16	; 0x10
    38a4:	69 89       	ldd	r22, Y+17	; 0x11
    38a6:	7a 89       	ldd	r23, Y+18	; 0x12
    38a8:	89 81       	ldd	r24, Y+1	; 0x01
    38aa:	9a 81       	ldd	r25, Y+2	; 0x02
    38ac:	0e 94 d7 11 	call	0x23ae	; 0x23ae <move_window>
		if (res == FR_OK) {
    38b0:	81 11       	cpse	r24, r1
    38b2:	9e c1       	rjmp	.+828    	; 0x3bf0 <f_open+0x628>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
    38b4:	eb 89       	ldd	r30, Y+19	; 0x13
    38b6:	fc 89       	ldd	r31, Y+20	; 0x14
    38b8:	cf 01       	movw	r24, r30
    38ba:	80 96       	adiw	r24, 0x20	; 32
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    38bc:	11 92       	st	Z+, r1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    38be:	e8 17       	cp	r30, r24
    38c0:	f9 07       	cpc	r31, r25
    38c2:	e1 f7       	brne	.-8      	; 0x38bc <f_open+0x2f4>

	if (res == FR_OK) {				/* Set SFN entry */
		res = move_window(dp->fs, dp->sect);
		if (res == FR_OK) {
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
    38c4:	6d 89       	ldd	r22, Y+21	; 0x15
    38c6:	7e 89       	ldd	r23, Y+22	; 0x16
    38c8:	4b e0       	ldi	r20, 0x0B	; 11
    38ca:	50 e0       	ldi	r21, 0x00	; 0
    38cc:	8b 89       	ldd	r24, Y+19	; 0x13
    38ce:	9c 89       	ldd	r25, Y+20	; 0x14
    38d0:	0e 94 09 11 	call	0x2212	; 0x2212 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
    38d4:	e9 81       	ldd	r30, Y+1	; 0x01
    38d6:	fa 81       	ldd	r31, Y+2	; 0x02
    38d8:	81 e0       	ldi	r24, 0x01	; 1
    38da:	84 83       	std	Z+4, r24	; 0x04
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    38dc:	fd a5       	ldd	r31, Y+45	; 0x2d
    38de:	f8 60       	ori	r31, 0x08	; 8
    38e0:	fd a7       	std	Y+45, r31	; 0x2d
				dir = dj.dir;					/* New entry */
    38e2:	eb 88       	ldd	r14, Y+19	; 0x13
    38e4:	fc 88       	ldd	r15, Y+20	; 0x14
    38e6:	10 c0       	rjmp	.+32     	; 0x3908 <f_open+0x340>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    38e8:	2d a5       	ldd	r18, Y+45	; 0x2d
    38ea:	28 60       	ori	r18, 0x08	; 8
    38ec:	2d a7       	std	Y+45, r18	; 0x2d
				dir = dj.dir;					/* New entry */
    38ee:	eb 88       	ldd	r14, Y+19	; 0x13
    38f0:	fc 88       	ldd	r15, Y+20	; 0x14
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    38f2:	88 23       	and	r24, r24
    38f4:	49 f0       	breq	.+18     	; 0x3908 <f_open+0x340>
    38f6:	89 c1       	rjmp	.+786    	; 0x3c0a <f_open+0x642>
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
				dir = dj.dir;					/* New entry */
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    38f8:	d7 01       	movw	r26, r14
    38fa:	1b 96       	adiw	r26, 0x0b	; 11
    38fc:	8c 91       	ld	r24, X
    38fe:	81 71       	andi	r24, 0x11	; 17
    3900:	09 f0       	breq	.+2      	; 0x3904 <f_open+0x33c>
    3902:	7c c1       	rjmp	.+760    	; 0x3bfc <f_open+0x634>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    3904:	82 fc       	sbrc	r8, 2
    3906:	7c c1       	rjmp	.+760    	; 0x3c00 <f_open+0x638>
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    3908:	bd a5       	ldd	r27, Y+45	; 0x2d
    390a:	b3 ff       	sbrs	r27, 3
    390c:	c6 c0       	rjmp	.+396    	; 0x3a9a <f_open+0x4d2>
				dw = GET_FATTIME();				/* Created time */
				ST_DWORD(dir + DIR_CrtTime, dw);
    390e:	80 e0       	ldi	r24, 0x00	; 0
    3910:	90 e0       	ldi	r25, 0x00	; 0
    3912:	a0 ef       	ldi	r26, 0xF0	; 240
    3914:	be e4       	ldi	r27, 0x4E	; 78
    3916:	f7 01       	movw	r30, r14
    3918:	86 87       	std	Z+14, r24	; 0x0e
    391a:	97 87       	std	Z+15, r25	; 0x0f
    391c:	a0 8b       	std	Z+16, r26	; 0x10
    391e:	b1 8b       	std	Z+17, r27	; 0x11
				dir[DIR_Attr] = 0;				/* Reset attribute */
    3920:	13 86       	std	Z+11, r1	; 0x0b
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
    3922:	d7 01       	movw	r26, r14
    3924:	14 8e       	std	Z+28, r1	; 0x1c
    3926:	15 8e       	std	Z+29, r1	; 0x1d
    3928:	16 8e       	std	Z+30, r1	; 0x1e
    392a:	17 8e       	std	Z+31, r1	; 0x1f
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
    392c:	c9 80       	ldd	r12, Y+1	; 0x01
    392e:	da 80       	ldd	r13, Y+2	; 0x02
	BYTE* dir	/* Pointer to the directory entry */
)
{
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
    3930:	82 8c       	ldd	r8, Z+26	; 0x1a
    3932:	93 8c       	ldd	r9, Z+27	; 0x1b
    3934:	a1 2c       	mov	r10, r1
    3936:	b1 2c       	mov	r11, r1
	if (fs->fs_type == FS_FAT32)
    3938:	f6 01       	movw	r30, r12
    393a:	80 81       	ld	r24, Z
    393c:	83 30       	cpi	r24, 0x03	; 3
    393e:	69 f4       	brne	.+26     	; 0x395a <f_open+0x392>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
    3940:	54 96       	adiw	r26, 0x14	; 20
    3942:	8d 91       	ld	r24, X+
    3944:	9c 91       	ld	r25, X
    3946:	55 97       	sbiw	r26, 0x15	; 21
    3948:	a0 e0       	ldi	r26, 0x00	; 0
    394a:	b0 e0       	ldi	r27, 0x00	; 0
    394c:	dc 01       	movw	r26, r24
    394e:	99 27       	eor	r25, r25
    3950:	88 27       	eor	r24, r24
    3952:	88 2a       	or	r8, r24
    3954:	99 2a       	or	r9, r25
    3956:	aa 2a       	or	r10, r26
    3958:	bb 2a       	or	r11, r27
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir + DIR_FstClusLO, cl);
    395a:	d7 01       	movw	r26, r14
    395c:	5b 96       	adiw	r26, 0x1b	; 27
    395e:	1c 92       	st	X, r1
    3960:	1e 92       	st	-X, r1
    3962:	5a 97       	sbiw	r26, 0x1a	; 26
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
    3964:	55 96       	adiw	r26, 0x15	; 21
    3966:	1c 92       	st	X, r1
    3968:	1e 92       	st	-X, r1
    396a:	54 97       	sbiw	r26, 0x14	; 20
				ST_DWORD(dir + DIR_CrtTime, dw);
				dir[DIR_Attr] = 0;				/* Reset attribute */
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
				st_clust(dir, 0);				/* cluster = 0 */
				dj.fs->wflag = 1;
    396c:	81 e0       	ldi	r24, 0x01	; 1
    396e:	f6 01       	movw	r30, r12
    3970:	84 83       	std	Z+4, r24	; 0x04
				if (cl) {						/* Remove the cluster chain if exist */
    3972:	81 14       	cp	r8, r1
    3974:	91 04       	cpc	r9, r1
    3976:	a1 04       	cpc	r10, r1
    3978:	b1 04       	cpc	r11, r1
    397a:	09 f4       	brne	.+2      	; 0x397e <f_open+0x3b6>
    397c:	8b c0       	rjmp	.+278    	; 0x3a94 <f_open+0x4cc>
					dw = dj.fs->winsect;
    397e:	22 a5       	ldd	r18, Z+42	; 0x2a
    3980:	33 a5       	ldd	r19, Z+43	; 0x2b
    3982:	44 a5       	ldd	r20, Z+44	; 0x2c
    3984:	55 a5       	ldd	r21, Z+45	; 0x2d
    3986:	29 a7       	std	Y+41, r18	; 0x29
    3988:	3a a7       	std	Y+42, r19	; 0x2a
    398a:	4b a7       	std	Y+43, r20	; 0x2b
    398c:	5c a7       	std	Y+44, r21	; 0x2c
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    398e:	b2 e0       	ldi	r27, 0x02	; 2
    3990:	8b 16       	cp	r8, r27
    3992:	91 04       	cpc	r9, r1
    3994:	a1 04       	cpc	r10, r1
    3996:	b1 04       	cpc	r11, r1
    3998:	08 f4       	brcc	.+2      	; 0x399c <f_open+0x3d4>
    399a:	14 c1       	rjmp	.+552    	; 0x3bc4 <f_open+0x5fc>
    399c:	82 89       	ldd	r24, Z+18	; 0x12
    399e:	93 89       	ldd	r25, Z+19	; 0x13
    39a0:	a4 89       	ldd	r26, Z+20	; 0x14
    39a2:	b5 89       	ldd	r27, Z+21	; 0x15
    39a4:	88 16       	cp	r8, r24
    39a6:	99 06       	cpc	r9, r25
    39a8:	aa 06       	cpc	r10, r26
    39aa:	bb 06       	cpc	r11, r27
    39ac:	08 f0       	brcs	.+2      	; 0x39b0 <f_open+0x3e8>
    39ae:	0c c1       	rjmp	.+536    	; 0x3bc8 <f_open+0x600>
    39b0:	8d a2       	std	Y+37, r8	; 0x25
    39b2:	9e a2       	std	Y+38, r9	; 0x26
    39b4:	af a2       	std	Y+39, r10	; 0x27
    39b6:	b8 a6       	std	Y+40, r11	; 0x28
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    39b8:	4d a1       	ldd	r20, Y+37	; 0x25
    39ba:	5e a1       	ldd	r21, Y+38	; 0x26
    39bc:	6f a1       	ldd	r22, Y+39	; 0x27
    39be:	78 a5       	ldd	r23, Y+40	; 0x28
    39c0:	c6 01       	movw	r24, r12
    39c2:	0e 94 89 15 	call	0x2b12	; 0x2b12 <get_fat>
    39c6:	2b 01       	movw	r4, r22
    39c8:	3c 01       	movw	r6, r24
			if (nxt == 0) break;				/* Empty cluster? */
    39ca:	61 15       	cp	r22, r1
    39cc:	71 05       	cpc	r23, r1
    39ce:	81 05       	cpc	r24, r1
    39d0:	91 05       	cpc	r25, r1
    39d2:	e9 f1       	breq	.+122    	; 0x3a4e <f_open+0x486>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    39d4:	61 30       	cpi	r22, 0x01	; 1
    39d6:	71 05       	cpc	r23, r1
    39d8:	81 05       	cpc	r24, r1
    39da:	91 05       	cpc	r25, r1
    39dc:	09 f4       	brne	.+2      	; 0x39e0 <f_open+0x418>
    39de:	f6 c0       	rjmp	.+492    	; 0x3bcc <f_open+0x604>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    39e0:	6f 3f       	cpi	r22, 0xFF	; 255
    39e2:	7f 4f       	sbci	r23, 0xFF	; 255
    39e4:	8f 4f       	sbci	r24, 0xFF	; 255
    39e6:	9f 4f       	sbci	r25, 0xFF	; 255
    39e8:	09 f4       	brne	.+2      	; 0x39ec <f_open+0x424>
    39ea:	f2 c0       	rjmp	.+484    	; 0x3bd0 <f_open+0x608>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    39ec:	00 e0       	ldi	r16, 0x00	; 0
    39ee:	10 e0       	ldi	r17, 0x00	; 0
    39f0:	98 01       	movw	r18, r16
    39f2:	4d a1       	ldd	r20, Y+37	; 0x25
    39f4:	5e a1       	ldd	r21, Y+38	; 0x26
    39f6:	6f a1       	ldd	r22, Y+39	; 0x27
    39f8:	78 a5       	ldd	r23, Y+40	; 0x28
    39fa:	c6 01       	movw	r24, r12
    39fc:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <put_fat>
			if (res != FR_OK) break;
    3a00:	81 11       	cpse	r24, r1
    3a02:	e7 c0       	rjmp	.+462    	; 0x3bd2 <f_open+0x60a>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
    3a04:	f6 01       	movw	r30, r12
    3a06:	86 85       	ldd	r24, Z+14	; 0x0e
    3a08:	97 85       	ldd	r25, Z+15	; 0x0f
    3a0a:	a0 89       	ldd	r26, Z+16	; 0x10
    3a0c:	b1 89       	ldd	r27, Z+17	; 0x11
    3a0e:	8f 3f       	cpi	r24, 0xFF	; 255
    3a10:	ff ef       	ldi	r31, 0xFF	; 255
    3a12:	9f 07       	cpc	r25, r31
    3a14:	af 07       	cpc	r26, r31
    3a16:	bf 07       	cpc	r27, r31
    3a18:	59 f0       	breq	.+22     	; 0x3a30 <f_open+0x468>
				fs->free_clust++;
    3a1a:	01 96       	adiw	r24, 0x01	; 1
    3a1c:	a1 1d       	adc	r26, r1
    3a1e:	b1 1d       	adc	r27, r1
    3a20:	f6 01       	movw	r30, r12
    3a22:	86 87       	std	Z+14, r24	; 0x0e
    3a24:	97 87       	std	Z+15, r25	; 0x0f
    3a26:	a0 8b       	std	Z+16, r26	; 0x10
    3a28:	b1 8b       	std	Z+17, r27	; 0x11
				fs->fsi_flag |= 1;
    3a2a:	85 81       	ldd	r24, Z+5	; 0x05
    3a2c:	81 60       	ori	r24, 0x01	; 1
    3a2e:	85 83       	std	Z+5, r24	; 0x05
    3a30:	4d a2       	std	Y+37, r4	; 0x25
    3a32:	5e a2       	std	Y+38, r5	; 0x26
    3a34:	6f a2       	std	Y+39, r6	; 0x27
    3a36:	78 a6       	std	Y+40, r7	; 0x28
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    3a38:	f6 01       	movw	r30, r12
    3a3a:	82 89       	ldd	r24, Z+18	; 0x12
    3a3c:	93 89       	ldd	r25, Z+19	; 0x13
    3a3e:	a4 89       	ldd	r26, Z+20	; 0x14
    3a40:	b5 89       	ldd	r27, Z+21	; 0x15
    3a42:	48 16       	cp	r4, r24
    3a44:	59 06       	cpc	r5, r25
    3a46:	6a 06       	cpc	r6, r26
    3a48:	7b 06       	cpc	r7, r27
    3a4a:	08 f4       	brcc	.+2      	; 0x3a4e <f_open+0x486>
    3a4c:	b5 cf       	rjmp	.-150    	; 0x39b8 <f_open+0x3f0>
				dj.fs->wflag = 1;
				if (cl) {						/* Remove the cluster chain if exist */
					dw = dj.fs->winsect;
					res = remove_chain(dj.fs, cl);
					if (res == FR_OK) {
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    3a4e:	89 81       	ldd	r24, Y+1	; 0x01
    3a50:	9a 81       	ldd	r25, Y+2	; 0x02
    3a52:	f1 e0       	ldi	r31, 0x01	; 1
    3a54:	8f 1a       	sub	r8, r31
    3a56:	91 08       	sbc	r9, r1
    3a58:	a1 08       	sbc	r10, r1
    3a5a:	b1 08       	sbc	r11, r1
    3a5c:	dc 01       	movw	r26, r24
    3a5e:	1a 96       	adiw	r26, 0x0a	; 10
    3a60:	8d 92       	st	X+, r8
    3a62:	9d 92       	st	X+, r9
    3a64:	ad 92       	st	X+, r10
    3a66:	bc 92       	st	X, r11
    3a68:	1d 97       	sbiw	r26, 0x0d	; 13
						res = move_window(dj.fs, dw);
    3a6a:	49 a5       	ldd	r20, Y+41	; 0x29
    3a6c:	5a a5       	ldd	r21, Y+42	; 0x2a
    3a6e:	6b a5       	ldd	r22, Y+43	; 0x2b
    3a70:	7c a5       	ldd	r23, Y+44	; 0x2c
    3a72:	0e 94 d7 11 	call	0x23ae	; 0x23ae <move_window>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
    3a76:	88 23       	and	r24, r24
    3a78:	69 f0       	breq	.+26     	; 0x3a94 <f_open+0x4cc>
    3a7a:	c7 c0       	rjmp	.+398    	; 0x3c0a <f_open+0x642>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
    3a7c:	81 11       	cpse	r24, r1
    3a7e:	c5 c0       	rjmp	.+394    	; 0x3c0a <f_open+0x642>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
    3a80:	f7 01       	movw	r30, r14
    3a82:	83 85       	ldd	r24, Z+11	; 0x0b
    3a84:	84 fd       	sbrc	r24, 4
    3a86:	be c0       	rjmp	.+380    	; 0x3c04 <f_open+0x63c>
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    3a88:	81 fe       	sbrs	r8, 1
    3a8a:	02 c0       	rjmp	.+4      	; 0x3a90 <f_open+0x4c8>
    3a8c:	80 fd       	sbrc	r24, 0
    3a8e:	bc c0       	rjmp	.+376    	; 0x3c08 <f_open+0x640>
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
    3a90:	83 fe       	sbrs	r8, 3
    3a92:	03 c0       	rjmp	.+6      	; 0x3a9a <f_open+0x4d2>
				mode |= FA__WRITTEN;
    3a94:	fd a5       	ldd	r31, Y+45	; 0x2d
    3a96:	f0 62       	ori	r31, 0x20	; 32
    3a98:	fd a7       	std	Y+45, r31	; 0x2d
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    3a9a:	e9 81       	ldd	r30, Y+1	; 0x01
    3a9c:	fa 81       	ldd	r31, Y+2	; 0x02
    3a9e:	82 a5       	ldd	r24, Z+42	; 0x2a
    3aa0:	93 a5       	ldd	r25, Z+43	; 0x2b
    3aa2:	a4 a5       	ldd	r26, Z+44	; 0x2c
    3aa4:	b5 a5       	ldd	r27, Z+45	; 0x2d
    3aa6:	f1 01       	movw	r30, r2
    3aa8:	82 8f       	std	Z+26, r24	; 0x1a
    3aaa:	93 8f       	std	Z+27, r25	; 0x1b
    3aac:	a4 8f       	std	Z+28, r26	; 0x1c
    3aae:	b5 8f       	std	Z+29, r27	; 0x1d
			fp->dir_ptr = dir;
    3ab0:	f7 8e       	std	Z+31, r15	; 0x1f
    3ab2:	e6 8e       	std	Z+30, r14	; 0x1e
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
    3ab4:	ed a5       	ldd	r30, Y+45	; 0x2d
    3ab6:	d1 01       	movw	r26, r2
    3ab8:	14 96       	adiw	r26, 0x04	; 4
    3aba:	ec 93       	st	X, r30
    3abc:	14 97       	sbiw	r26, 0x04	; 4
			fp->err = 0;						/* Clear error flag */
    3abe:	15 96       	adiw	r26, 0x05	; 5
    3ac0:	1c 92       	st	X, r1
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
    3ac2:	09 81       	ldd	r16, Y+1	; 0x01
    3ac4:	1a 81       	ldd	r17, Y+2	; 0x02
	BYTE* dir	/* Pointer to the directory entry */
)
{
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
    3ac6:	d7 01       	movw	r26, r14
    3ac8:	5a 96       	adiw	r26, 0x1a	; 26
    3aca:	8d 91       	ld	r24, X+
    3acc:	9c 91       	ld	r25, X
    3ace:	5b 97       	sbiw	r26, 0x1b	; 27
    3ad0:	a0 e0       	ldi	r26, 0x00	; 0
    3ad2:	b0 e0       	ldi	r27, 0x00	; 0
	if (fs->fs_type == FS_FAT32)
    3ad4:	f8 01       	movw	r30, r16
    3ad6:	20 81       	ld	r18, Z
    3ad8:	23 30       	cpi	r18, 0x03	; 3
    3ada:	61 f4       	brne	.+24     	; 0x3af4 <f_open+0x52c>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
    3adc:	f7 01       	movw	r30, r14
    3ade:	44 89       	ldd	r20, Z+20	; 0x14
    3ae0:	55 89       	ldd	r21, Z+21	; 0x15
    3ae2:	60 e0       	ldi	r22, 0x00	; 0
    3ae4:	70 e0       	ldi	r23, 0x00	; 0
    3ae6:	ba 01       	movw	r22, r20
    3ae8:	55 27       	eor	r21, r21
    3aea:	44 27       	eor	r20, r20
    3aec:	84 2b       	or	r24, r20
    3aee:	95 2b       	or	r25, r21
    3af0:	a6 2b       	or	r26, r22
    3af2:	b7 2b       	or	r27, r23
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
			fp->err = 0;						/* Clear error flag */
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
    3af4:	f1 01       	movw	r30, r2
    3af6:	86 87       	std	Z+14, r24	; 0x0e
    3af8:	97 87       	std	Z+15, r25	; 0x0f
    3afa:	a0 8b       	std	Z+16, r26	; 0x10
    3afc:	b1 8b       	std	Z+17, r27	; 0x11
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
    3afe:	f7 01       	movw	r30, r14
    3b00:	84 8d       	ldd	r24, Z+28	; 0x1c
    3b02:	95 8d       	ldd	r25, Z+29	; 0x1d
    3b04:	a6 8d       	ldd	r26, Z+30	; 0x1e
    3b06:	b7 8d       	ldd	r27, Z+31	; 0x1f
    3b08:	f1 01       	movw	r30, r2
    3b0a:	82 87       	std	Z+10, r24	; 0x0a
    3b0c:	93 87       	std	Z+11, r25	; 0x0b
    3b0e:	a4 87       	std	Z+12, r26	; 0x0c
    3b10:	b5 87       	std	Z+13, r27	; 0x0d
			fp->fptr = 0;						/* File pointer */
    3b12:	16 82       	std	Z+6, r1	; 0x06
    3b14:	17 82       	std	Z+7, r1	; 0x07
    3b16:	10 86       	std	Z+8, r1	; 0x08
    3b18:	11 86       	std	Z+9, r1	; 0x09
			fp->dsect = 0;
    3b1a:	16 8a       	std	Z+22, r1	; 0x16
    3b1c:	17 8a       	std	Z+23, r1	; 0x17
    3b1e:	10 8e       	std	Z+24, r1	; 0x18
    3b20:	11 8e       	std	Z+25, r1	; 0x19
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
    3b22:	11 83       	std	Z+1, r17	; 0x01
    3b24:	00 83       	st	Z, r16
			fp->id = fp->fs->id;
    3b26:	d8 01       	movw	r26, r16
    3b28:	16 96       	adiw	r26, 0x06	; 6
    3b2a:	8d 91       	ld	r24, X+
    3b2c:	9c 91       	ld	r25, X
    3b2e:	17 97       	sbiw	r26, 0x07	; 7
    3b30:	93 83       	std	Z+3, r25	; 0x03
    3b32:	82 83       	std	Z+2, r24	; 0x02
    3b34:	80 e0       	ldi	r24, 0x00	; 0
    3b36:	69 c0       	rjmp	.+210    	; 0x3c0a <f_open+0x642>
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
    3b38:	89 e0       	ldi	r24, 0x09	; 9
    3b3a:	67 c0       	rjmp	.+206    	; 0x3c0a <f_open+0x642>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    3b3c:	8f eb       	ldi	r24, 0xBF	; 191
    3b3e:	87 0f       	add	r24, r23
    3b40:	8a 31       	cpi	r24, 0x1A	; 26
    3b42:	08 f4       	brcc	.+2      	; 0x3b46 <f_open+0x57e>
    3b44:	fc cd       	rjmp	.-1032   	; 0x373e <f_open+0x176>
    3b46:	fd cd       	rjmp	.-1030   	; 0x3742 <f_open+0x17a>
    3b48:	6d a1       	ldd	r22, Y+37	; 0x25
    3b4a:	7e a1       	ldd	r23, Y+38	; 0x26
    3b4c:	93 2e       	mov	r9, r19
    3b4e:	29 a5       	ldd	r18, Y+41	; 0x29
    3b50:	3a a5       	ldd	r19, Y+42	; 0x2a
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    3b52:	c2 0e       	add	r12, r18
    3b54:	d3 1e       	adc	r13, r19
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    3b56:	80 e0       	ldi	r24, 0x00	; 0
    3b58:	02 ce       	rjmp	.-1020   	; 0x375e <f_open+0x196>
    3b5a:	6d a1       	ldd	r22, Y+37	; 0x25
    3b5c:	7e a1       	ldd	r23, Y+38	; 0x26
    3b5e:	93 2e       	mov	r9, r19
    3b60:	29 a5       	ldd	r18, Y+41	; 0x29
    3b62:	3a a5       	ldd	r19, Y+42	; 0x2a
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    3b64:	c2 0e       	add	r12, r18
    3b66:	d3 1e       	adc	r13, r19
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    3b68:	84 e0       	ldi	r24, 0x04	; 4
    3b6a:	f9 cd       	rjmp	.-1038   	; 0x375e <f_open+0x196>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
    3b6c:	fa 01       	movw	r30, r20
    3b6e:	83 85       	ldd	r24, Z+11	; 0x0b
    3b70:	82 ff       	sbrs	r24, 2
    3b72:	4b ce       	rjmp	.-874    	; 0x380a <f_open+0x242>
    3b74:	06 c0       	rjmp	.+12     	; 0x3b82 <f_open+0x5ba>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the sagment name */
			ns = dp->fn[NSFLAG];
    3b76:	ed 89       	ldd	r30, Y+21	; 0x15
    3b78:	fe 89       	ldd	r31, Y+22	; 0x16
    3b7a:	93 85       	ldd	r25, Z+11	; 0x0b
			if (res != FR_OK) {				/* Failed to find the object */
				if (res == FR_NO_FILE) {	/* Object is not found */
    3b7c:	84 30       	cpi	r24, 0x04	; 4
    3b7e:	51 f4       	brne	.+20     	; 0x3b94 <f_open+0x5cc>
    3b80:	40 ce       	rjmp	.-896    	; 0x3802 <f_open+0x23a>
		INIT_BUF(dj);
		res = follow_path(&dj, path);	/* Follow the file path */
		dir = dj.dir;
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
			if (!dir)	/* Default directory itself */
    3b82:	e1 14       	cp	r14, r1
    3b84:	f1 04       	cpc	r15, r1
    3b86:	c9 f4       	brne	.+50     	; 0x3bba <f_open+0x5f2>
    3b88:	0c c0       	rjmp	.+24     	; 0x3ba2 <f_open+0x5da>
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
    3b8a:	86 e0       	ldi	r24, 0x06	; 6
    3b8c:	03 c0       	rjmp	.+6      	; 0x3b94 <f_open+0x5cc>
		dp->dir = 0;
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the sagment name */
    3b8e:	84 e0       	ldi	r24, 0x04	; 4
    3b90:	01 c0       	rjmp	.+2      	; 0x3b94 <f_open+0x5cc>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			dir = dp->dir;						/* Follow the sub-directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
				res = FR_NO_PATH; break;
    3b92:	85 e0       	ldi	r24, 0x05	; 5
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);	/* Follow the file path */
		dir = dj.dir;
    3b94:	eb 88       	ldd	r14, Y+19	; 0x13
    3b96:	fc 88       	ldd	r15, Y+20	; 0x14
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    3b98:	98 2d       	mov	r25, r8
    3b9a:	9c 71       	andi	r25, 0x1C	; 28
    3b9c:	09 f0       	breq	.+2      	; 0x3ba0 <f_open+0x5d8>
    3b9e:	54 ce       	rjmp	.-856    	; 0x3848 <f_open+0x280>
    3ba0:	6d cf       	rjmp	.-294    	; 0x3a7c <f_open+0x4b4>
    3ba2:	18 2d       	mov	r17, r8
    3ba4:	1c 71       	andi	r17, 0x1C	; 28
    3ba6:	19 f5       	brne	.+70     	; 0x3bee <f_open+0x626>
    3ba8:	e1 2c       	mov	r14, r1
    3baa:	f1 2c       	mov	r15, r1
		res = follow_path(&dj, path);	/* Follow the file path */
		dir = dj.dir;
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
			if (!dir)	/* Default directory itself */
				res = FR_INVALID_NAME;
    3bac:	86 e0       	ldi	r24, 0x06	; 6
    3bae:	15 c0       	rjmp	.+42     	; 0x3bda <f_open+0x612>
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    3bb0:	18 2d       	mov	r17, r8
    3bb2:	1c 71       	andi	r17, 0x1C	; 28
    3bb4:	09 f0       	breq	.+2      	; 0x3bb8 <f_open+0x5f0>
    3bb6:	4b ce       	rjmp	.-874    	; 0x384e <f_open+0x286>
    3bb8:	10 c0       	rjmp	.+32     	; 0x3bda <f_open+0x612>
    3bba:	88 2d       	mov	r24, r8
    3bbc:	8c 71       	andi	r24, 0x1C	; 28
    3bbe:	09 f0       	breq	.+2      	; 0x3bc2 <f_open+0x5fa>
    3bc0:	9b ce       	rjmp	.-714    	; 0x38f8 <f_open+0x330>
    3bc2:	5e cf       	rjmp	.-324    	; 0x3a80 <f_open+0x4b8>
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
    3bc4:	82 e0       	ldi	r24, 0x02	; 2
    3bc6:	05 c0       	rjmp	.+10     	; 0x3bd2 <f_open+0x60a>
    3bc8:	82 e0       	ldi	r24, 0x02	; 2
    3bca:	03 c0       	rjmp	.+6      	; 0x3bd2 <f_open+0x60a>
	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    3bcc:	82 e0       	ldi	r24, 0x02	; 2
    3bce:	01 c0       	rjmp	.+2      	; 0x3bd2 <f_open+0x60a>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    3bd0:	81 e0       	ldi	r24, 0x01	; 1
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
    3bd2:	88 23       	and	r24, r24
    3bd4:	09 f4       	brne	.+2      	; 0x3bd8 <f_open+0x610>
    3bd6:	5e cf       	rjmp	.-324    	; 0x3a94 <f_open+0x4cc>
    3bd8:	18 c0       	rjmp	.+48     	; 0x3c0a <f_open+0x642>
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
    3bda:	88 23       	and	r24, r24
    3bdc:	09 f4       	brne	.+2      	; 0x3be0 <f_open+0x618>
    3bde:	6a cf       	rjmp	.-300    	; 0x3ab4 <f_open+0x4ec>
    3be0:	14 c0       	rjmp	.+40     	; 0x3c0a <f_open+0x642>
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);	/* Follow the file path */
		dir = dj.dir;
    3be2:	eb 88       	ldd	r14, Y+19	; 0x13
    3be4:	fc 88       	ldd	r15, Y+20	; 0x14
    3be6:	86 e0       	ldi	r24, 0x06	; 6
    3be8:	e3 cf       	rjmp	.-58     	; 0x3bb0 <f_open+0x5e8>
				n = 0;					/* Not a blank entry. Restart to search */
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
		} while (res == FR_OK);
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    3bea:	87 e0       	ldi	r24, 0x07	; 7
    3bec:	01 c0       	rjmp	.+2      	; 0x3bf0 <f_open+0x628>
		res = follow_path(&dj, path);	/* Follow the file path */
		dir = dj.dir;
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
			if (!dir)	/* Default directory itself */
				res = FR_INVALID_NAME;
    3bee:	86 e0       	ldi	r24, 0x06	; 6
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    3bf0:	fd a5       	ldd	r31, Y+45	; 0x2d
    3bf2:	f8 60       	ori	r31, 0x08	; 8
    3bf4:	fd a7       	std	Y+45, r31	; 0x2d
				dir = dj.dir;					/* New entry */
    3bf6:	eb 88       	ldd	r14, Y+19	; 0x13
    3bf8:	fc 88       	ldd	r15, Y+20	; 0x14
    3bfa:	ef cf       	rjmp	.-34     	; 0x3bda <f_open+0x612>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
					res = FR_DENIED;
    3bfc:	87 e0       	ldi	r24, 0x07	; 7
    3bfe:	05 c0       	rjmp	.+10     	; 0x3c0a <f_open+0x642>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
    3c00:	88 e0       	ldi	r24, 0x08	; 8
    3c02:	03 c0       	rjmp	.+6      	; 0x3c0a <f_open+0x642>
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
					res = FR_NO_FILE;
    3c04:	84 e0       	ldi	r24, 0x04	; 4
    3c06:	01 c0       	rjmp	.+2      	; 0x3c0a <f_open+0x642>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
    3c08:	87 e0       	ldi	r24, 0x07	; 7
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
    3c0a:	ae 96       	adiw	r28, 0x2e	; 46
    3c0c:	0f b6       	in	r0, 0x3f	; 63
    3c0e:	f8 94       	cli
    3c10:	de bf       	out	0x3e, r29	; 62
    3c12:	0f be       	out	0x3f, r0	; 63
    3c14:	cd bf       	out	0x3d, r28	; 61
    3c16:	df 91       	pop	r29
    3c18:	cf 91       	pop	r28
    3c1a:	1f 91       	pop	r17
    3c1c:	0f 91       	pop	r16
    3c1e:	ff 90       	pop	r15
    3c20:	ef 90       	pop	r14
    3c22:	df 90       	pop	r13
    3c24:	cf 90       	pop	r12
    3c26:	bf 90       	pop	r11
    3c28:	af 90       	pop	r10
    3c2a:	9f 90       	pop	r9
    3c2c:	8f 90       	pop	r8
    3c2e:	7f 90       	pop	r7
    3c30:	6f 90       	pop	r6
    3c32:	5f 90       	pop	r5
    3c34:	4f 90       	pop	r4
    3c36:	3f 90       	pop	r3
    3c38:	2f 90       	pop	r2
    3c3a:	08 95       	ret

00003c3c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
    3c3c:	2f 92       	push	r2
    3c3e:	3f 92       	push	r3
    3c40:	4f 92       	push	r4
    3c42:	5f 92       	push	r5
    3c44:	6f 92       	push	r6
    3c46:	7f 92       	push	r7
    3c48:	8f 92       	push	r8
    3c4a:	9f 92       	push	r9
    3c4c:	af 92       	push	r10
    3c4e:	bf 92       	push	r11
    3c50:	cf 92       	push	r12
    3c52:	df 92       	push	r13
    3c54:	ef 92       	push	r14
    3c56:	ff 92       	push	r15
    3c58:	0f 93       	push	r16
    3c5a:	1f 93       	push	r17
    3c5c:	cf 93       	push	r28
    3c5e:	df 93       	push	r29
    3c60:	ec 01       	movw	r28, r24
    3c62:	4b 01       	movw	r8, r22
    3c64:	6a 01       	movw	r12, r20
    3c66:	59 01       	movw	r10, r18
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
    3c68:	f9 01       	movw	r30, r18
    3c6a:	11 82       	std	Z+1, r1	; 0x01
    3c6c:	10 82       	st	Z, r1

	res = validate(fp);						/* Check validity */
    3c6e:	0e 94 50 12 	call	0x24a0	; 0x24a0 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    3c72:	81 11       	cpse	r24, r1
    3c74:	6d c1       	rjmp	.+730    	; 0x3f50 <f_write+0x314>
	if (fp->err)							/* Check error */
    3c76:	8d 81       	ldd	r24, Y+5	; 0x05
    3c78:	81 11       	cpse	r24, r1
    3c7a:	6a c1       	rjmp	.+724    	; 0x3f50 <f_write+0x314>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    3c7c:	8c 81       	ldd	r24, Y+4	; 0x04
    3c7e:	81 ff       	sbrs	r24, 1
    3c80:	66 c1       	rjmp	.+716    	; 0x3f4e <f_write+0x312>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
    3c82:	8e 81       	ldd	r24, Y+6	; 0x06
    3c84:	9f 81       	ldd	r25, Y+7	; 0x07
    3c86:	a8 85       	ldd	r26, Y+8	; 0x08
    3c88:	b9 85       	ldd	r27, Y+9	; 0x09
    3c8a:	ac 01       	movw	r20, r24
    3c8c:	bd 01       	movw	r22, r26
    3c8e:	4c 0d       	add	r20, r12
    3c90:	5d 1d       	adc	r21, r13
    3c92:	61 1d       	adc	r22, r1
    3c94:	71 1d       	adc	r23, r1
    3c96:	48 17       	cp	r20, r24
    3c98:	59 07       	cpc	r21, r25
    3c9a:	6a 07       	cpc	r22, r26
    3c9c:	7b 07       	cpc	r23, r27
    3c9e:	08 f4       	brcc	.+2      	; 0x3ca2 <f_write+0x66>
    3ca0:	40 c1       	rjmp	.+640    	; 0x3f22 <f_write+0x2e6>

	for ( ;  btw;							/* Repeat until all data written */
    3ca2:	c1 14       	cp	r12, r1
    3ca4:	d1 04       	cpc	r13, r1
    3ca6:	09 f4       	brne	.+2      	; 0x3caa <f_write+0x6e>
    3ca8:	3c c1       	rjmp	.+632    	; 0x3f22 <f_write+0x2e6>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    3caa:	4e 81       	ldd	r20, Y+6	; 0x06
    3cac:	5f 81       	ldd	r21, Y+7	; 0x07
    3cae:	68 85       	ldd	r22, Y+8	; 0x08
    3cb0:	79 85       	ldd	r23, Y+9	; 0x09
    3cb2:	db 01       	movw	r26, r22
    3cb4:	ca 01       	movw	r24, r20
    3cb6:	91 70       	andi	r25, 0x01	; 1
    3cb8:	aa 27       	eor	r26, r26
    3cba:	bb 27       	eor	r27, r27
    3cbc:	89 2b       	or	r24, r25
    3cbe:	8a 2b       	or	r24, r26
    3cc0:	8b 2b       	or	r24, r27
    3cc2:	09 f0       	breq	.+2      	; 0x3cc6 <f_write+0x8a>
    3cc4:	e8 c0       	rjmp	.+464    	; 0x3e96 <f_write+0x25a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    3cc6:	e8 81       	ld	r30, Y
    3cc8:	f9 81       	ldd	r31, Y+1	; 0x01
    3cca:	12 81       	ldd	r17, Z+2	; 0x02
    3ccc:	11 50       	subi	r17, 0x01	; 1
    3cce:	db 01       	movw	r26, r22
    3cd0:	ca 01       	movw	r24, r20
    3cd2:	07 2e       	mov	r0, r23
    3cd4:	79 e0       	ldi	r23, 0x09	; 9
    3cd6:	b6 95       	lsr	r27
    3cd8:	a7 95       	ror	r26
    3cda:	97 95       	ror	r25
    3cdc:	87 95       	ror	r24
    3cde:	7a 95       	dec	r23
    3ce0:	d1 f7       	brne	.-12     	; 0x3cd6 <f_write+0x9a>
    3ce2:	70 2d       	mov	r23, r0
    3ce4:	18 23       	and	r17, r24
			if (!csect) {					/* On the cluster boundary? */
    3ce6:	09 f0       	breq	.+2      	; 0x3cea <f_write+0xae>
    3ce8:	42 c0       	rjmp	.+132    	; 0x3d6e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
    3cea:	45 2b       	or	r20, r21
    3cec:	46 2b       	or	r20, r22
    3cee:	47 2b       	or	r20, r23
    3cf0:	81 f4       	brne	.+32     	; 0x3d12 <f_write+0xd6>
					clst = fp->sclust;		/* Follow from the origin */
    3cf2:	6e 85       	ldd	r22, Y+14	; 0x0e
    3cf4:	7f 85       	ldd	r23, Y+15	; 0x0f
    3cf6:	88 89       	ldd	r24, Y+16	; 0x10
    3cf8:	99 89       	ldd	r25, Y+17	; 0x11
					if (clst == 0)			/* When no cluster is allocated, */
    3cfa:	61 15       	cp	r22, r1
    3cfc:	71 05       	cpc	r23, r1
    3cfe:	81 05       	cpc	r24, r1
    3d00:	91 05       	cpc	r25, r1
    3d02:	a1 f4       	brne	.+40     	; 0x3d2c <f_write+0xf0>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    3d04:	40 e0       	ldi	r20, 0x00	; 0
    3d06:	50 e0       	ldi	r21, 0x00	; 0
    3d08:	ba 01       	movw	r22, r20
    3d0a:	cf 01       	movw	r24, r30
    3d0c:	0e 94 54 18 	call	0x30a8	; 0x30a8 <create_chain>
    3d10:	07 c0       	rjmp	.+14     	; 0x3d20 <f_write+0xe4>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    3d12:	4a 89       	ldd	r20, Y+18	; 0x12
    3d14:	5b 89       	ldd	r21, Y+19	; 0x13
    3d16:	6c 89       	ldd	r22, Y+20	; 0x14
    3d18:	7d 89       	ldd	r23, Y+21	; 0x15
    3d1a:	cf 01       	movw	r24, r30
    3d1c:	0e 94 54 18 	call	0x30a8	; 0x30a8 <create_chain>
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    3d20:	61 15       	cp	r22, r1
    3d22:	71 05       	cpc	r23, r1
    3d24:	81 05       	cpc	r24, r1
    3d26:	91 05       	cpc	r25, r1
    3d28:	09 f4       	brne	.+2      	; 0x3d2c <f_write+0xf0>
    3d2a:	fb c0       	rjmp	.+502    	; 0x3f22 <f_write+0x2e6>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    3d2c:	61 30       	cpi	r22, 0x01	; 1
    3d2e:	71 05       	cpc	r23, r1
    3d30:	81 05       	cpc	r24, r1
    3d32:	91 05       	cpc	r25, r1
    3d34:	19 f4       	brne	.+6      	; 0x3d3c <f_write+0x100>
    3d36:	82 e0       	ldi	r24, 0x02	; 2
    3d38:	8d 83       	std	Y+5, r24	; 0x05
    3d3a:	0a c1       	rjmp	.+532    	; 0x3f50 <f_write+0x314>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3d3c:	6f 3f       	cpi	r22, 0xFF	; 255
    3d3e:	ff ef       	ldi	r31, 0xFF	; 255
    3d40:	7f 07       	cpc	r23, r31
    3d42:	8f 07       	cpc	r24, r31
    3d44:	9f 07       	cpc	r25, r31
    3d46:	19 f4       	brne	.+6      	; 0x3d4e <f_write+0x112>
    3d48:	81 e0       	ldi	r24, 0x01	; 1
    3d4a:	8d 83       	std	Y+5, r24	; 0x05
    3d4c:	01 c1       	rjmp	.+514    	; 0x3f50 <f_write+0x314>
				fp->clust = clst;			/* Update current cluster */
    3d4e:	6a 8b       	std	Y+18, r22	; 0x12
    3d50:	7b 8b       	std	Y+19, r23	; 0x13
    3d52:	8c 8b       	std	Y+20, r24	; 0x14
    3d54:	9d 8b       	std	Y+21, r25	; 0x15
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
    3d56:	4e 84       	ldd	r4, Y+14	; 0x0e
    3d58:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d5a:	68 88       	ldd	r6, Y+16	; 0x10
    3d5c:	79 88       	ldd	r7, Y+17	; 0x11
    3d5e:	45 28       	or	r4, r5
    3d60:	46 28       	or	r4, r6
    3d62:	47 28       	or	r4, r7
    3d64:	21 f4       	brne	.+8      	; 0x3d6e <f_write+0x132>
    3d66:	6e 87       	std	Y+14, r22	; 0x0e
    3d68:	7f 87       	std	Y+15, r23	; 0x0f
    3d6a:	88 8b       	std	Y+16, r24	; 0x10
    3d6c:	99 8b       	std	Y+17, r25	; 0x11
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
    3d6e:	e8 81       	ld	r30, Y
    3d70:	f9 81       	ldd	r31, Y+1	; 0x01
    3d72:	42 a5       	ldd	r20, Z+42	; 0x2a
    3d74:	53 a5       	ldd	r21, Z+43	; 0x2b
    3d76:	64 a5       	ldd	r22, Z+44	; 0x2c
    3d78:	75 a5       	ldd	r23, Z+45	; 0x2d
    3d7a:	8e 89       	ldd	r24, Y+22	; 0x16
    3d7c:	9f 89       	ldd	r25, Y+23	; 0x17
    3d7e:	a8 8d       	ldd	r26, Y+24	; 0x18
    3d80:	b9 8d       	ldd	r27, Y+25	; 0x19
    3d82:	48 17       	cp	r20, r24
    3d84:	59 07       	cpc	r21, r25
    3d86:	6a 07       	cpc	r22, r26
    3d88:	7b 07       	cpc	r23, r27
    3d8a:	41 f4       	brne	.+16     	; 0x3d9c <f_write+0x160>
    3d8c:	cf 01       	movw	r24, r30
    3d8e:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <sync_window>
    3d92:	88 23       	and	r24, r24
    3d94:	19 f0       	breq	.+6      	; 0x3d9c <f_write+0x160>
				ABORT(fp->fs, FR_DISK_ERR);
    3d96:	81 e0       	ldi	r24, 0x01	; 1
    3d98:	8d 83       	std	Y+5, r24	; 0x05
    3d9a:	da c0       	rjmp	.+436    	; 0x3f50 <f_write+0x314>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    3d9c:	28 80       	ld	r2, Y
    3d9e:	39 80       	ldd	r3, Y+1	; 0x01
    3da0:	4a 89       	ldd	r20, Y+18	; 0x12
    3da2:	5b 89       	ldd	r21, Y+19	; 0x13
    3da4:	6c 89       	ldd	r22, Y+20	; 0x14
    3da6:	7d 89       	ldd	r23, Y+21	; 0x15
    3da8:	c1 01       	movw	r24, r2
    3daa:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    3dae:	61 15       	cp	r22, r1
    3db0:	71 05       	cpc	r23, r1
    3db2:	81 05       	cpc	r24, r1
    3db4:	91 05       	cpc	r25, r1
    3db6:	19 f4       	brne	.+6      	; 0x3dbe <f_write+0x182>
    3db8:	82 e0       	ldi	r24, 0x02	; 2
    3dba:	8d 83       	std	Y+5, r24	; 0x05
    3dbc:	c9 c0       	rjmp	.+402    	; 0x3f50 <f_write+0x314>
			sect += csect;
    3dbe:	2b 01       	movw	r4, r22
    3dc0:	3c 01       	movw	r6, r24
    3dc2:	41 0e       	add	r4, r17
    3dc4:	51 1c       	adc	r5, r1
    3dc6:	61 1c       	adc	r6, r1
    3dc8:	71 1c       	adc	r7, r1
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    3dca:	76 01       	movw	r14, r12
    3dcc:	ef 2c       	mov	r14, r15
    3dce:	ff 24       	eor	r15, r15
    3dd0:	e6 94       	lsr	r14
			if (cc) {						/* Write maximum contiguous sectors directly */
    3dd2:	e1 14       	cp	r14, r1
    3dd4:	f1 04       	cpc	r15, r1
    3dd6:	09 f4       	brne	.+2      	; 0x3dda <f_write+0x19e>
    3dd8:	3f c0       	rjmp	.+126    	; 0x3e58 <f_write+0x21c>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    3dda:	f1 01       	movw	r30, r2
    3ddc:	42 81       	ldd	r20, Z+2	; 0x02
    3dde:	24 2f       	mov	r18, r20
    3de0:	30 e0       	ldi	r19, 0x00	; 0
    3de2:	c7 01       	movw	r24, r14
    3de4:	81 0f       	add	r24, r17
    3de6:	91 1d       	adc	r25, r1
    3de8:	28 17       	cp	r18, r24
    3dea:	39 07       	cpc	r19, r25
    3dec:	18 f4       	brcc	.+6      	; 0x3df4 <f_write+0x1b8>
					cc = fp->fs->csize - csect;
    3dee:	79 01       	movw	r14, r18
    3df0:	e1 1a       	sub	r14, r17
    3df2:	f1 08       	sbc	r15, r1
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
    3df4:	87 01       	movw	r16, r14
    3df6:	a3 01       	movw	r20, r6
    3df8:	92 01       	movw	r18, r4
    3dfa:	b4 01       	movw	r22, r8
    3dfc:	f1 01       	movw	r30, r2
    3dfe:	81 81       	ldd	r24, Z+1	; 0x01
    3e00:	0e 94 61 24 	call	0x48c2	; 0x48c2 <disk_write>
    3e04:	88 23       	and	r24, r24
    3e06:	19 f0       	breq	.+6      	; 0x3e0e <f_write+0x1d2>
					ABORT(fp->fs, FR_DISK_ERR);
    3e08:	81 e0       	ldi	r24, 0x01	; 1
    3e0a:	8d 83       	std	Y+5, r24	; 0x05
    3e0c:	a1 c0       	rjmp	.+322    	; 0x3f50 <f_write+0x314>
#if _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    3e0e:	e8 81       	ld	r30, Y
    3e10:	f9 81       	ldd	r31, Y+1	; 0x01
    3e12:	82 a5       	ldd	r24, Z+42	; 0x2a
    3e14:	93 a5       	ldd	r25, Z+43	; 0x2b
    3e16:	a4 a5       	ldd	r26, Z+44	; 0x2c
    3e18:	b5 a5       	ldd	r27, Z+45	; 0x2d
    3e1a:	84 19       	sub	r24, r4
    3e1c:	95 09       	sbc	r25, r5
    3e1e:	a6 09       	sbc	r26, r6
    3e20:	b7 09       	sbc	r27, r7
    3e22:	a7 01       	movw	r20, r14
    3e24:	60 e0       	ldi	r22, 0x00	; 0
    3e26:	70 e0       	ldi	r23, 0x00	; 0
    3e28:	84 17       	cp	r24, r20
    3e2a:	95 07       	cpc	r25, r21
    3e2c:	a6 07       	cpc	r26, r22
    3e2e:	b7 07       	cpc	r27, r23
    3e30:	78 f4       	brcc	.+30     	; 0x3e50 <f_write+0x214>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    3e32:	98 2f       	mov	r25, r24
    3e34:	88 27       	eor	r24, r24
    3e36:	99 0f       	add	r25, r25
    3e38:	b4 01       	movw	r22, r8
    3e3a:	68 0f       	add	r22, r24
    3e3c:	79 1f       	adc	r23, r25
    3e3e:	40 e0       	ldi	r20, 0x00	; 0
    3e40:	52 e0       	ldi	r21, 0x02	; 2
    3e42:	cf 01       	movw	r24, r30
    3e44:	8e 96       	adiw	r24, 0x2e	; 46
    3e46:	0e 94 09 11 	call	0x2212	; 0x2212 <mem_cpy>
					fp->fs->wflag = 0;
    3e4a:	e8 81       	ld	r30, Y
    3e4c:	f9 81       	ldd	r31, Y+1	; 0x01
    3e4e:	14 82       	std	Z+4, r1	; 0x04
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    3e50:	fe 2c       	mov	r15, r14
    3e52:	ee 24       	eor	r14, r14
    3e54:	ff 0c       	add	r15, r15
				continue;
    3e56:	4c c0       	rjmp	.+152    	; 0x3ef0 <f_write+0x2b4>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    3e58:	4e 81       	ldd	r20, Y+6	; 0x06
    3e5a:	5f 81       	ldd	r21, Y+7	; 0x07
    3e5c:	68 85       	ldd	r22, Y+8	; 0x08
    3e5e:	79 85       	ldd	r23, Y+9	; 0x09
    3e60:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e62:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e64:	ac 85       	ldd	r26, Y+12	; 0x0c
    3e66:	bd 85       	ldd	r27, Y+13	; 0x0d
    3e68:	48 17       	cp	r20, r24
    3e6a:	59 07       	cpc	r21, r25
    3e6c:	6a 07       	cpc	r22, r26
    3e6e:	7b 07       	cpc	r23, r27
    3e70:	70 f0       	brcs	.+28     	; 0x3e8e <f_write+0x252>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
    3e72:	c1 01       	movw	r24, r2
    3e74:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <sync_window>
    3e78:	88 23       	and	r24, r24
    3e7a:	19 f0       	breq	.+6      	; 0x3e82 <f_write+0x246>
    3e7c:	81 e0       	ldi	r24, 0x01	; 1
    3e7e:	8d 83       	std	Y+5, r24	; 0x05
    3e80:	67 c0       	rjmp	.+206    	; 0x3f50 <f_write+0x314>
				fp->fs->winsect = sect;
    3e82:	e8 81       	ld	r30, Y
    3e84:	f9 81       	ldd	r31, Y+1	; 0x01
    3e86:	42 a6       	std	Z+42, r4	; 0x2a
    3e88:	53 a6       	std	Z+43, r5	; 0x2b
    3e8a:	64 a6       	std	Z+44, r6	; 0x2c
    3e8c:	75 a6       	std	Z+45, r7	; 0x2d
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    3e8e:	4e 8a       	std	Y+22, r4	; 0x16
    3e90:	5f 8a       	std	Y+23, r5	; 0x17
    3e92:	68 8e       	std	Y+24, r6	; 0x18
    3e94:	79 8e       	std	Y+25, r7	; 0x19
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    3e96:	8e 81       	ldd	r24, Y+6	; 0x06
    3e98:	9f 81       	ldd	r25, Y+7	; 0x07
    3e9a:	91 70       	andi	r25, 0x01	; 1
    3e9c:	20 e0       	ldi	r18, 0x00	; 0
    3e9e:	32 e0       	ldi	r19, 0x02	; 2
    3ea0:	79 01       	movw	r14, r18
    3ea2:	e8 1a       	sub	r14, r24
    3ea4:	f9 0a       	sbc	r15, r25
    3ea6:	ce 14       	cp	r12, r14
    3ea8:	df 04       	cpc	r13, r15
    3eaa:	08 f4       	brcc	.+2      	; 0x3eae <f_write+0x272>
    3eac:	76 01       	movw	r14, r12
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
    3eae:	4e 89       	ldd	r20, Y+22	; 0x16
    3eb0:	5f 89       	ldd	r21, Y+23	; 0x17
    3eb2:	68 8d       	ldd	r22, Y+24	; 0x18
    3eb4:	79 8d       	ldd	r23, Y+25	; 0x19
    3eb6:	88 81       	ld	r24, Y
    3eb8:	99 81       	ldd	r25, Y+1	; 0x01
    3eba:	0e 94 d7 11 	call	0x23ae	; 0x23ae <move_window>
    3ebe:	88 23       	and	r24, r24
    3ec0:	19 f0       	breq	.+6      	; 0x3ec8 <f_write+0x28c>
			ABORT(fp->fs, FR_DISK_ERR);
    3ec2:	81 e0       	ldi	r24, 0x01	; 1
    3ec4:	8d 83       	std	Y+5, r24	; 0x05
    3ec6:	44 c0       	rjmp	.+136    	; 0x3f50 <f_write+0x314>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    3ec8:	8e 81       	ldd	r24, Y+6	; 0x06
    3eca:	9f 81       	ldd	r25, Y+7	; 0x07
    3ecc:	a8 85       	ldd	r26, Y+8	; 0x08
    3ece:	b9 85       	ldd	r27, Y+9	; 0x09
    3ed0:	91 70       	andi	r25, 0x01	; 1
    3ed2:	aa 27       	eor	r26, r26
    3ed4:	bb 27       	eor	r27, r27
    3ed6:	8e 96       	adiw	r24, 0x2e	; 46
    3ed8:	28 81       	ld	r18, Y
    3eda:	39 81       	ldd	r19, Y+1	; 0x01
    3edc:	a7 01       	movw	r20, r14
    3ede:	b4 01       	movw	r22, r8
    3ee0:	82 0f       	add	r24, r18
    3ee2:	93 1f       	adc	r25, r19
    3ee4:	0e 94 09 11 	call	0x2212	; 0x2212 <mem_cpy>
		fp->fs->wflag = 1;
    3ee8:	e8 81       	ld	r30, Y
    3eea:	f9 81       	ldd	r31, Y+1	; 0x01
    3eec:	21 e0       	ldi	r18, 0x01	; 1
    3eee:	24 83       	std	Z+4, r18	; 0x04
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    3ef0:	8e 0c       	add	r8, r14
    3ef2:	9f 1c       	adc	r9, r15
    3ef4:	8e 81       	ldd	r24, Y+6	; 0x06
    3ef6:	9f 81       	ldd	r25, Y+7	; 0x07
    3ef8:	a8 85       	ldd	r26, Y+8	; 0x08
    3efa:	b9 85       	ldd	r27, Y+9	; 0x09
    3efc:	8e 0d       	add	r24, r14
    3efe:	9f 1d       	adc	r25, r15
    3f00:	a1 1d       	adc	r26, r1
    3f02:	b1 1d       	adc	r27, r1
    3f04:	8e 83       	std	Y+6, r24	; 0x06
    3f06:	9f 83       	std	Y+7, r25	; 0x07
    3f08:	a8 87       	std	Y+8, r26	; 0x08
    3f0a:	b9 87       	std	Y+9, r27	; 0x09
    3f0c:	f5 01       	movw	r30, r10
    3f0e:	80 81       	ld	r24, Z
    3f10:	91 81       	ldd	r25, Z+1	; 0x01
    3f12:	8e 0d       	add	r24, r14
    3f14:	9f 1d       	adc	r25, r15
    3f16:	91 83       	std	Z+1, r25	; 0x01
    3f18:	80 83       	st	Z, r24
    3f1a:	ce 18       	sub	r12, r14
    3f1c:	df 08       	sbc	r13, r15
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
    3f1e:	09 f0       	breq	.+2      	; 0x3f22 <f_write+0x2e6>
    3f20:	c4 ce       	rjmp	.-632    	; 0x3caa <f_write+0x6e>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    3f22:	8e 81       	ldd	r24, Y+6	; 0x06
    3f24:	9f 81       	ldd	r25, Y+7	; 0x07
    3f26:	a8 85       	ldd	r26, Y+8	; 0x08
    3f28:	b9 85       	ldd	r27, Y+9	; 0x09
    3f2a:	4a 85       	ldd	r20, Y+10	; 0x0a
    3f2c:	5b 85       	ldd	r21, Y+11	; 0x0b
    3f2e:	6c 85       	ldd	r22, Y+12	; 0x0c
    3f30:	7d 85       	ldd	r23, Y+13	; 0x0d
    3f32:	48 17       	cp	r20, r24
    3f34:	59 07       	cpc	r21, r25
    3f36:	6a 07       	cpc	r22, r26
    3f38:	7b 07       	cpc	r23, r27
    3f3a:	20 f4       	brcc	.+8      	; 0x3f44 <f_write+0x308>
    3f3c:	8a 87       	std	Y+10, r24	; 0x0a
    3f3e:	9b 87       	std	Y+11, r25	; 0x0b
    3f40:	ac 87       	std	Y+12, r26	; 0x0c
    3f42:	bd 87       	std	Y+13, r27	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    3f44:	8c 81       	ldd	r24, Y+4	; 0x04
    3f46:	80 62       	ori	r24, 0x20	; 32
    3f48:	8c 83       	std	Y+4, r24	; 0x04

	LEAVE_FF(fp->fs, FR_OK);
    3f4a:	80 e0       	ldi	r24, 0x00	; 0
    3f4c:	01 c0       	rjmp	.+2      	; 0x3f50 <f_write+0x314>
	res = validate(fp);						/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->err)							/* Check error */
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    3f4e:	87 e0       	ldi	r24, 0x07	; 7

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    3f50:	df 91       	pop	r29
    3f52:	cf 91       	pop	r28
    3f54:	1f 91       	pop	r17
    3f56:	0f 91       	pop	r16
    3f58:	ff 90       	pop	r15
    3f5a:	ef 90       	pop	r14
    3f5c:	df 90       	pop	r13
    3f5e:	cf 90       	pop	r12
    3f60:	bf 90       	pop	r11
    3f62:	af 90       	pop	r10
    3f64:	9f 90       	pop	r9
    3f66:	8f 90       	pop	r8
    3f68:	7f 90       	pop	r7
    3f6a:	6f 90       	pop	r6
    3f6c:	5f 90       	pop	r5
    3f6e:	4f 90       	pop	r4
    3f70:	3f 90       	pop	r3
    3f72:	2f 90       	pop	r2
    3f74:	08 95       	ret

00003f76 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
    3f76:	0f 93       	push	r16
    3f78:	1f 93       	push	r17
    3f7a:	cf 93       	push	r28
    3f7c:	df 93       	push	r29
    3f7e:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
    3f80:	0e 94 50 12 	call	0x24a0	; 0x24a0 <validate>
    3f84:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    3f86:	81 11       	cpse	r24, r1
    3f88:	98 c0       	rjmp	.+304    	; 0x40ba <f_sync+0x144>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    3f8a:	8c 81       	ldd	r24, Y+4	; 0x04
    3f8c:	85 ff       	sbrs	r24, 5
    3f8e:	95 c0       	rjmp	.+298    	; 0x40ba <f_sync+0x144>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    3f90:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3f92:	5b 8d       	ldd	r21, Y+27	; 0x1b
    3f94:	6c 8d       	ldd	r22, Y+28	; 0x1c
    3f96:	7d 8d       	ldd	r23, Y+29	; 0x1d
    3f98:	88 81       	ld	r24, Y
    3f9a:	99 81       	ldd	r25, Y+1	; 0x01
    3f9c:	0e 94 d7 11 	call	0x23ae	; 0x23ae <move_window>
    3fa0:	98 2f       	mov	r25, r24
			if (res == FR_OK) {
    3fa2:	81 11       	cpse	r24, r1
    3fa4:	8a c0       	rjmp	.+276    	; 0x40ba <f_sync+0x144>
				dir = fp->dir_ptr;
    3fa6:	ee 8d       	ldd	r30, Y+30	; 0x1e
    3fa8:	ff 8d       	ldd	r31, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    3faa:	83 85       	ldd	r24, Z+11	; 0x0b
    3fac:	80 62       	ori	r24, 0x20	; 32
    3fae:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
    3fb0:	8a 85       	ldd	r24, Y+10	; 0x0a
    3fb2:	9b 85       	ldd	r25, Y+11	; 0x0b
    3fb4:	ac 85       	ldd	r26, Y+12	; 0x0c
    3fb6:	bd 85       	ldd	r27, Y+13	; 0x0d
    3fb8:	84 8f       	std	Z+28, r24	; 0x1c
    3fba:	95 8f       	std	Z+29, r25	; 0x1d
    3fbc:	a6 8f       	std	Z+30, r26	; 0x1e
    3fbe:	b7 8f       	std	Z+31, r27	; 0x1f
				st_clust(dir, fp->sclust);					/* Update start cluster */
    3fc0:	8e 85       	ldd	r24, Y+14	; 0x0e
    3fc2:	9f 85       	ldd	r25, Y+15	; 0x0f
    3fc4:	a8 89       	ldd	r26, Y+16	; 0x10
    3fc6:	b9 89       	ldd	r27, Y+17	; 0x11
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir + DIR_FstClusLO, cl);
    3fc8:	93 8f       	std	Z+27, r25	; 0x1b
    3fca:	82 8f       	std	Z+26, r24	; 0x1a
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
    3fcc:	b5 8b       	std	Z+21, r27	; 0x15
    3fce:	a4 8b       	std	Z+20, r26	; 0x14
				dir = fp->dir_ptr;
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
				st_clust(dir, fp->sclust);					/* Update start cluster */
				tm = GET_FATTIME();							/* Update updated time */
				ST_DWORD(dir + DIR_WrtTime, tm);
    3fd0:	80 e0       	ldi	r24, 0x00	; 0
    3fd2:	90 e0       	ldi	r25, 0x00	; 0
    3fd4:	a0 ef       	ldi	r26, 0xF0	; 240
    3fd6:	be e4       	ldi	r27, 0x4E	; 78
    3fd8:	86 8b       	std	Z+22, r24	; 0x16
    3fda:	97 8b       	std	Z+23, r25	; 0x17
    3fdc:	a0 8f       	std	Z+24, r26	; 0x18
    3fde:	b1 8f       	std	Z+25, r27	; 0x19
				ST_WORD(dir + DIR_LstAccDate, 0);
    3fe0:	13 8a       	std	Z+19, r1	; 0x13
    3fe2:	12 8a       	std	Z+18, r1	; 0x12
				fp->flag &= ~FA__WRITTEN;
    3fe4:	8c 81       	ldd	r24, Y+4	; 0x04
    3fe6:	8f 7d       	andi	r24, 0xDF	; 223
    3fe8:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    3fea:	e8 81       	ld	r30, Y
    3fec:	f9 81       	ldd	r31, Y+1	; 0x01
    3fee:	81 e0       	ldi	r24, 0x01	; 1
    3ff0:	84 83       	std	Z+4, r24	; 0x04
				res = sync_fs(fp->fs);
    3ff2:	09 90       	ld	r0, Y+
    3ff4:	d8 81       	ld	r29, Y
    3ff6:	c0 2d       	mov	r28, r0
)
{
	FRESULT res;


	res = sync_window(fs);
    3ff8:	ce 01       	movw	r24, r28
    3ffa:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <sync_window>
    3ffe:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    4000:	81 11       	cpse	r24, r1
    4002:	5b c0       	rjmp	.+182    	; 0x40ba <f_sync+0x144>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
    4004:	88 81       	ld	r24, Y
    4006:	83 30       	cpi	r24, 0x03	; 3
    4008:	09 f0       	breq	.+2      	; 0x400c <f_sync+0x96>
    400a:	4d c0       	rjmp	.+154    	; 0x40a6 <f_sync+0x130>
    400c:	8d 81       	ldd	r24, Y+5	; 0x05
    400e:	81 30       	cpi	r24, 0x01	; 1
    4010:	09 f0       	breq	.+2      	; 0x4014 <f_sync+0x9e>
    4012:	49 c0       	rjmp	.+146    	; 0x40a6 <f_sync+0x130>
			/* Create FSINFO structure */
			mem_set(fs->win, 0, SS(fs));
    4014:	be 01       	movw	r22, r28
    4016:	62 5d       	subi	r22, 0xD2	; 210
    4018:	7f 4f       	sbci	r23, 0xFF	; 255
    401a:	fb 01       	movw	r30, r22
    401c:	ce 01       	movw	r24, r28
    401e:	82 5d       	subi	r24, 0xD2	; 210
    4020:	9d 4f       	sbci	r25, 0xFD	; 253
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
    4022:	11 92       	st	Z+, r1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    4024:	e8 17       	cp	r30, r24
    4026:	f9 07       	cpc	r31, r25
    4028:	e1 f7       	brne	.-8      	; 0x4022 <f_sync+0xac>
	if (res == FR_OK) {
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
			/* Create FSINFO structure */
			mem_set(fs->win, 0, SS(fs));
			ST_WORD(fs->win + BS_55AA, 0xAA55);
    402a:	85 e5       	ldi	r24, 0x55	; 85
    402c:	9a ea       	ldi	r25, 0xAA	; 170
    402e:	fe 01       	movw	r30, r28
    4030:	e4 5d       	subi	r30, 0xD4	; 212
    4032:	fd 4f       	sbci	r31, 0xFD	; 253
    4034:	91 83       	std	Z+1, r25	; 0x01
    4036:	80 83       	st	Z, r24
			ST_DWORD(fs->win + FSI_LeadSig, 0x41615252);
    4038:	82 e5       	ldi	r24, 0x52	; 82
    403a:	92 e5       	ldi	r25, 0x52	; 82
    403c:	a1 e6       	ldi	r26, 0x61	; 97
    403e:	b1 e4       	ldi	r27, 0x41	; 65
    4040:	8e a7       	std	Y+46, r24	; 0x2e
    4042:	9f a7       	std	Y+47, r25	; 0x2f
    4044:	a8 ab       	std	Y+48, r26	; 0x30
    4046:	b9 ab       	std	Y+49, r27	; 0x31
			ST_DWORD(fs->win + FSI_StrucSig, 0x61417272);
    4048:	82 e7       	ldi	r24, 0x72	; 114
    404a:	92 e7       	ldi	r25, 0x72	; 114
    404c:	a1 e4       	ldi	r26, 0x41	; 65
    404e:	b1 e6       	ldi	r27, 0x61	; 97
    4050:	7a 97       	sbiw	r30, 0x1a	; 26
    4052:	80 83       	st	Z, r24
    4054:	91 83       	std	Z+1, r25	; 0x01
    4056:	a2 83       	std	Z+2, r26	; 0x02
    4058:	b3 83       	std	Z+3, r27	; 0x03
			ST_DWORD(fs->win + FSI_Free_Count, fs->free_clust);
    405a:	8e 85       	ldd	r24, Y+14	; 0x0e
    405c:	9f 85       	ldd	r25, Y+15	; 0x0f
    405e:	a8 89       	ldd	r26, Y+16	; 0x10
    4060:	b9 89       	ldd	r27, Y+17	; 0x11
    4062:	34 96       	adiw	r30, 0x04	; 4
    4064:	80 83       	st	Z, r24
    4066:	91 83       	std	Z+1, r25	; 0x01
    4068:	a2 83       	std	Z+2, r26	; 0x02
    406a:	b3 83       	std	Z+3, r27	; 0x03
			ST_DWORD(fs->win + FSI_Nxt_Free, fs->last_clust);
    406c:	8a 85       	ldd	r24, Y+10	; 0x0a
    406e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4070:	ac 85       	ldd	r26, Y+12	; 0x0c
    4072:	bd 85       	ldd	r27, Y+13	; 0x0d
    4074:	34 96       	adiw	r30, 0x04	; 4
    4076:	80 83       	st	Z, r24
    4078:	91 83       	std	Z+1, r25	; 0x01
    407a:	a2 83       	std	Z+2, r26	; 0x02
    407c:	b3 83       	std	Z+3, r27	; 0x03
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
    407e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4080:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4082:	ac 8d       	ldd	r26, Y+28	; 0x1c
    4084:	bd 8d       	ldd	r27, Y+29	; 0x1d
    4086:	9c 01       	movw	r18, r24
    4088:	ad 01       	movw	r20, r26
    408a:	2f 5f       	subi	r18, 0xFF	; 255
    408c:	3f 4f       	sbci	r19, 0xFF	; 255
    408e:	4f 4f       	sbci	r20, 0xFF	; 255
    4090:	5f 4f       	sbci	r21, 0xFF	; 255
    4092:	2a a7       	std	Y+42, r18	; 0x2a
    4094:	3b a7       	std	Y+43, r19	; 0x2b
    4096:	4c a7       	std	Y+44, r20	; 0x2c
    4098:	5d a7       	std	Y+45, r21	; 0x2d
			disk_write(fs->drv, fs->win, fs->winsect, 1);
    409a:	01 e0       	ldi	r16, 0x01	; 1
    409c:	10 e0       	ldi	r17, 0x00	; 0
    409e:	89 81       	ldd	r24, Y+1	; 0x01
    40a0:	0e 94 61 24 	call	0x48c2	; 0x48c2 <disk_write>
			fs->fsi_flag = 0;
    40a4:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    40a6:	40 e0       	ldi	r20, 0x00	; 0
    40a8:	50 e0       	ldi	r21, 0x00	; 0
    40aa:	60 e0       	ldi	r22, 0x00	; 0
    40ac:	89 81       	ldd	r24, Y+1	; 0x01
    40ae:	0e 94 d6 24 	call	0x49ac	; 0x49ac <disk_ioctl>
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
    40b2:	91 e0       	ldi	r25, 0x01	; 1
    40b4:	81 11       	cpse	r24, r1
    40b6:	01 c0       	rjmp	.+2      	; 0x40ba <f_sync+0x144>
    40b8:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    40ba:	89 2f       	mov	r24, r25
    40bc:	df 91       	pop	r29
    40be:	cf 91       	pop	r28
    40c0:	1f 91       	pop	r17
    40c2:	0f 91       	pop	r16
    40c4:	08 95       	ret

000040c6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    40c6:	cf 93       	push	r28
    40c8:	df 93       	push	r29
    40ca:	ec 01       	movw	r28, r24
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    40cc:	0e 94 bb 1f 	call	0x3f76	; 0x3f76 <f_sync>
	if (res == FR_OK)
    40d0:	81 11       	cpse	r24, r1
    40d2:	07 c0       	rjmp	.+14     	; 0x40e2 <f_close+0x1c>
#endif
	{
		res = validate(fp);				/* Lock volume */
    40d4:	ce 01       	movw	r24, r28
    40d6:	0e 94 50 12 	call	0x24a0	; 0x24a0 <validate>
		if (res == FR_OK) {
    40da:	81 11       	cpse	r24, r1
    40dc:	02 c0       	rjmp	.+4      	; 0x40e2 <f_close+0x1c>
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
				fp->fs = 0;				/* Invalidate file object */
    40de:	19 82       	std	Y+1, r1	; 0x01
    40e0:	18 82       	st	Y, r1
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    40e2:	df 91       	pop	r29
    40e4:	cf 91       	pop	r28
    40e6:	08 95       	ret

000040e8 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    40e8:	4f 92       	push	r4
    40ea:	5f 92       	push	r5
    40ec:	6f 92       	push	r6
    40ee:	7f 92       	push	r7
    40f0:	8f 92       	push	r8
    40f2:	9f 92       	push	r9
    40f4:	af 92       	push	r10
    40f6:	bf 92       	push	r11
    40f8:	cf 92       	push	r12
    40fa:	df 92       	push	r13
    40fc:	ef 92       	push	r14
    40fe:	ff 92       	push	r15
    4100:	0f 93       	push	r16
    4102:	1f 93       	push	r17
    4104:	cf 93       	push	r28
    4106:	df 93       	push	r29
    4108:	00 d0       	rcall	.+0      	; 0x410a <f_lseek+0x22>
    410a:	00 d0       	rcall	.+0      	; 0x410c <f_lseek+0x24>
    410c:	00 d0       	rcall	.+0      	; 0x410e <f_lseek+0x26>
    410e:	cd b7       	in	r28, 0x3d	; 61
    4110:	de b7       	in	r29, 0x3e	; 62
    4112:	9e 83       	std	Y+6, r25	; 0x06
    4114:	8d 83       	std	Y+5, r24	; 0x05
    4116:	6a 01       	movw	r12, r20
    4118:	7b 01       	movw	r14, r22
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
    411a:	0e 94 50 12 	call	0x24a0	; 0x24a0 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    411e:	81 11       	cpse	r24, r1
    4120:	93 c1       	rjmp	.+806    	; 0x4448 <f_lseek+0x360>
	if (fp->err)						/* Check error */
    4122:	ad 81       	ldd	r26, Y+5	; 0x05
    4124:	be 81       	ldd	r27, Y+6	; 0x06
    4126:	15 96       	adiw	r26, 0x05	; 5
    4128:	8c 91       	ld	r24, X
    412a:	15 97       	sbiw	r26, 0x05	; 5
    412c:	81 11       	cpse	r24, r1
    412e:	8c c1       	rjmp	.+792    	; 0x4448 <f_lseek+0x360>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    4130:	1a 96       	adiw	r26, 0x0a	; 10
    4132:	8d 91       	ld	r24, X+
    4134:	9d 91       	ld	r25, X+
    4136:	0d 90       	ld	r0, X+
    4138:	bc 91       	ld	r27, X
    413a:	a0 2d       	mov	r26, r0
    413c:	8c 15       	cp	r24, r12
    413e:	9d 05       	cpc	r25, r13
    4140:	ae 05       	cpc	r26, r14
    4142:	bf 05       	cpc	r27, r15
    4144:	38 f4       	brcc	.+14     	; 0x4154 <f_lseek+0x6c>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    4146:	ed 81       	ldd	r30, Y+5	; 0x05
    4148:	fe 81       	ldd	r31, Y+6	; 0x06
    414a:	24 81       	ldd	r18, Z+4	; 0x04
    414c:	21 fd       	sbrc	r18, 1
    414e:	02 c0       	rjmp	.+4      	; 0x4154 <f_lseek+0x6c>
#endif
			) ofs = fp->fsize;
    4150:	6c 01       	movw	r12, r24
    4152:	7d 01       	movw	r14, r26

		ifptr = fp->fptr;
    4154:	ad 81       	ldd	r26, Y+5	; 0x05
    4156:	be 81       	ldd	r27, Y+6	; 0x06
    4158:	16 96       	adiw	r26, 0x06	; 6
    415a:	4d 90       	ld	r4, X+
    415c:	5d 90       	ld	r5, X+
    415e:	6d 90       	ld	r6, X+
    4160:	7c 90       	ld	r7, X
    4162:	19 97       	sbiw	r26, 0x09	; 9
		fp->fptr = nsect = 0;
    4164:	fd 01       	movw	r30, r26
    4166:	16 82       	std	Z+6, r1	; 0x06
    4168:	17 82       	std	Z+7, r1	; 0x07
    416a:	10 86       	std	Z+8, r1	; 0x08
    416c:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    416e:	c1 14       	cp	r12, r1
    4170:	d1 04       	cpc	r13, r1
    4172:	e1 04       	cpc	r14, r1
    4174:	f1 04       	cpc	r15, r1
    4176:	09 f4       	brne	.+2      	; 0x417a <f_lseek+0x92>
    4178:	64 c1       	rjmp	.+712    	; 0x4442 <f_lseek+0x35a>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    417a:	00 81       	ld	r16, Z
    417c:	11 81       	ldd	r17, Z+1	; 0x01
    417e:	d8 01       	movw	r26, r16
    4180:	12 96       	adiw	r26, 0x02	; 2
    4182:	8c 90       	ld	r8, X
    4184:	91 2c       	mov	r9, r1
    4186:	a1 2c       	mov	r10, r1
    4188:	b1 2c       	mov	r11, r1
    418a:	07 2e       	mov	r0, r23
    418c:	79 e0       	ldi	r23, 0x09	; 9
    418e:	88 0c       	add	r8, r8
    4190:	99 1c       	adc	r9, r9
    4192:	aa 1c       	adc	r10, r10
    4194:	bb 1c       	adc	r11, r11
    4196:	7a 95       	dec	r23
    4198:	d1 f7       	brne	.-12     	; 0x418e <f_lseek+0xa6>
    419a:	70 2d       	mov	r23, r0
			if (ifptr > 0 &&
    419c:	41 14       	cp	r4, r1
    419e:	51 04       	cpc	r5, r1
    41a0:	61 04       	cpc	r6, r1
    41a2:	71 04       	cpc	r7, r1
    41a4:	09 f4       	brne	.+2      	; 0x41a8 <f_lseek+0xc0>
    41a6:	40 c0       	rjmp	.+128    	; 0x4228 <f_lseek+0x140>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    41a8:	b1 e0       	ldi	r27, 0x01	; 1
    41aa:	4b 1a       	sub	r4, r27
    41ac:	51 08       	sbc	r5, r1
    41ae:	61 08       	sbc	r6, r1
    41b0:	71 08       	sbc	r7, r1

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    41b2:	c7 01       	movw	r24, r14
    41b4:	b6 01       	movw	r22, r12
    41b6:	61 50       	subi	r22, 0x01	; 1
    41b8:	71 09       	sbc	r23, r1
    41ba:	81 09       	sbc	r24, r1
    41bc:	91 09       	sbc	r25, r1
    41be:	a5 01       	movw	r20, r10
    41c0:	94 01       	movw	r18, r8
    41c2:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <__udivmodsi4>
    41c6:	29 83       	std	Y+1, r18	; 0x01
    41c8:	3a 83       	std	Y+2, r19	; 0x02
    41ca:	4b 83       	std	Y+3, r20	; 0x03
    41cc:	5c 83       	std	Y+4, r21	; 0x04
    41ce:	c3 01       	movw	r24, r6
    41d0:	b2 01       	movw	r22, r4
    41d2:	a5 01       	movw	r20, r10
    41d4:	94 01       	movw	r18, r8
    41d6:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <__udivmodsi4>
    41da:	89 81       	ldd	r24, Y+1	; 0x01
    41dc:	9a 81       	ldd	r25, Y+2	; 0x02
    41de:	ab 81       	ldd	r26, Y+3	; 0x03
    41e0:	bc 81       	ldd	r27, Y+4	; 0x04
    41e2:	82 17       	cp	r24, r18
    41e4:	93 07       	cpc	r25, r19
    41e6:	a4 07       	cpc	r26, r20
    41e8:	b5 07       	cpc	r27, r21
    41ea:	f0 f0       	brcs	.+60     	; 0x4228 <f_lseek+0x140>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    41ec:	88 27       	eor	r24, r24
    41ee:	99 27       	eor	r25, r25
    41f0:	dc 01       	movw	r26, r24
    41f2:	88 19       	sub	r24, r8
    41f4:	99 09       	sbc	r25, r9
    41f6:	aa 09       	sbc	r26, r10
    41f8:	bb 09       	sbc	r27, r11
    41fa:	48 22       	and	r4, r24
    41fc:	59 22       	and	r5, r25
    41fe:	6a 22       	and	r6, r26
    4200:	7b 22       	and	r7, r27
    4202:	ad 81       	ldd	r26, Y+5	; 0x05
    4204:	be 81       	ldd	r27, Y+6	; 0x06
    4206:	16 96       	adiw	r26, 0x06	; 6
    4208:	4d 92       	st	X+, r4
    420a:	5d 92       	st	X+, r5
    420c:	6d 92       	st	X+, r6
    420e:	7c 92       	st	X, r7
    4210:	19 97       	sbiw	r26, 0x09	; 9
				ofs -= fp->fptr;
    4212:	c4 18       	sub	r12, r4
    4214:	d5 08       	sbc	r13, r5
    4216:	e6 08       	sbc	r14, r6
    4218:	f7 08       	sbc	r15, r7
				clst = fp->clust;
    421a:	52 96       	adiw	r26, 0x12	; 18
    421c:	4d 91       	ld	r20, X+
    421e:	5d 91       	ld	r21, X+
    4220:	6d 91       	ld	r22, X+
    4222:	7c 91       	ld	r23, X
    4224:	55 97       	sbiw	r26, 0x15	; 21
    4226:	37 c0       	rjmp	.+110    	; 0x4296 <f_lseek+0x1ae>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    4228:	ed 81       	ldd	r30, Y+5	; 0x05
    422a:	fe 81       	ldd	r31, Y+6	; 0x06
    422c:	46 85       	ldd	r20, Z+14	; 0x0e
    422e:	57 85       	ldd	r21, Z+15	; 0x0f
    4230:	60 89       	ldd	r22, Z+16	; 0x10
    4232:	71 89       	ldd	r23, Z+17	; 0x11
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    4234:	41 15       	cp	r20, r1
    4236:	51 05       	cpc	r21, r1
    4238:	61 05       	cpc	r22, r1
    423a:	71 05       	cpc	r23, r1
    423c:	31 f5       	brne	.+76     	; 0x428a <f_lseek+0x1a2>
					clst = create_chain(fp->fs, 0);
    423e:	40 e0       	ldi	r20, 0x00	; 0
    4240:	50 e0       	ldi	r21, 0x00	; 0
    4242:	ba 01       	movw	r22, r20
    4244:	c8 01       	movw	r24, r16
    4246:	0e 94 54 18 	call	0x30a8	; 0x30a8 <create_chain>
    424a:	ab 01       	movw	r20, r22
    424c:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    424e:	41 30       	cpi	r20, 0x01	; 1
    4250:	51 05       	cpc	r21, r1
    4252:	61 05       	cpc	r22, r1
    4254:	71 05       	cpc	r23, r1
    4256:	31 f4       	brne	.+12     	; 0x4264 <f_lseek+0x17c>
    4258:	82 e0       	ldi	r24, 0x02	; 2
    425a:	ad 81       	ldd	r26, Y+5	; 0x05
    425c:	be 81       	ldd	r27, Y+6	; 0x06
    425e:	15 96       	adiw	r26, 0x05	; 5
    4260:	8c 93       	st	X, r24
    4262:	f2 c0       	rjmp	.+484    	; 0x4448 <f_lseek+0x360>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    4264:	4f 3f       	cpi	r20, 0xFF	; 255
    4266:	bf ef       	ldi	r27, 0xFF	; 255
    4268:	5b 07       	cpc	r21, r27
    426a:	6b 07       	cpc	r22, r27
    426c:	7b 07       	cpc	r23, r27
    426e:	29 f4       	brne	.+10     	; 0x427a <f_lseek+0x192>
    4270:	81 e0       	ldi	r24, 0x01	; 1
    4272:	ed 81       	ldd	r30, Y+5	; 0x05
    4274:	fe 81       	ldd	r31, Y+6	; 0x06
    4276:	85 83       	std	Z+5, r24	; 0x05
    4278:	e7 c0       	rjmp	.+462    	; 0x4448 <f_lseek+0x360>
					fp->sclust = clst;
    427a:	ad 81       	ldd	r26, Y+5	; 0x05
    427c:	be 81       	ldd	r27, Y+6	; 0x06
    427e:	1e 96       	adiw	r26, 0x0e	; 14
    4280:	4d 93       	st	X+, r20
    4282:	5d 93       	st	X+, r21
    4284:	6d 93       	st	X+, r22
    4286:	7c 93       	st	X, r23
    4288:	51 97       	sbiw	r26, 0x11	; 17
				}
#endif
				fp->clust = clst;
    428a:	ed 81       	ldd	r30, Y+5	; 0x05
    428c:	fe 81       	ldd	r31, Y+6	; 0x06
    428e:	42 8b       	std	Z+18, r20	; 0x12
    4290:	53 8b       	std	Z+19, r21	; 0x13
    4292:	64 8b       	std	Z+20, r22	; 0x14
    4294:	75 8b       	std	Z+21, r23	; 0x15
			}
			if (clst != 0) {
    4296:	41 15       	cp	r20, r1
    4298:	51 05       	cpc	r21, r1
    429a:	61 05       	cpc	r22, r1
    429c:	71 05       	cpc	r23, r1
    429e:	09 f4       	brne	.+2      	; 0x42a2 <f_lseek+0x1ba>
    42a0:	99 c0       	rjmp	.+306    	; 0x43d4 <f_lseek+0x2ec>
				while (ofs > bcs) {						/* Cluster following loop */
    42a2:	8c 14       	cp	r8, r12
    42a4:	9d 04       	cpc	r9, r13
    42a6:	ae 04       	cpc	r10, r14
    42a8:	bf 04       	cpc	r11, r15
    42aa:	08 f0       	brcs	.+2      	; 0x42ae <f_lseek+0x1c6>
    42ac:	5f c0       	rjmp	.+190    	; 0x436c <f_lseek+0x284>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    42ae:	ad 81       	ldd	r26, Y+5	; 0x05
    42b0:	be 81       	ldd	r27, Y+6	; 0x06
    42b2:	14 96       	adiw	r26, 0x04	; 4
    42b4:	8c 91       	ld	r24, X
    42b6:	14 97       	sbiw	r26, 0x04	; 4
    42b8:	81 ff       	sbrs	r24, 1
    42ba:	0c c0       	rjmp	.+24     	; 0x42d4 <f_lseek+0x1ec>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    42bc:	8d 91       	ld	r24, X+
    42be:	9c 91       	ld	r25, X
    42c0:	0e 94 54 18 	call	0x30a8	; 0x30a8 <create_chain>
    42c4:	ab 01       	movw	r20, r22
    42c6:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    42c8:	41 15       	cp	r20, r1
    42ca:	51 05       	cpc	r21, r1
    42cc:	61 05       	cpc	r22, r1
    42ce:	71 05       	cpc	r23, r1
    42d0:	49 f4       	brne	.+18     	; 0x42e4 <f_lseek+0x1fc>
    42d2:	4a c0       	rjmp	.+148    	; 0x4368 <f_lseek+0x280>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    42d4:	ad 81       	ldd	r26, Y+5	; 0x05
    42d6:	be 81       	ldd	r27, Y+6	; 0x06
    42d8:	8d 91       	ld	r24, X+
    42da:	9c 91       	ld	r25, X
    42dc:	0e 94 89 15 	call	0x2b12	; 0x2b12 <get_fat>
    42e0:	ab 01       	movw	r20, r22
    42e2:	bc 01       	movw	r22, r24
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    42e4:	4f 3f       	cpi	r20, 0xFF	; 255
    42e6:	bf ef       	ldi	r27, 0xFF	; 255
    42e8:	5b 07       	cpc	r21, r27
    42ea:	6b 07       	cpc	r22, r27
    42ec:	7b 07       	cpc	r23, r27
    42ee:	29 f4       	brne	.+10     	; 0x42fa <f_lseek+0x212>
    42f0:	ed 81       	ldd	r30, Y+5	; 0x05
    42f2:	fe 81       	ldd	r31, Y+6	; 0x06
    42f4:	81 e0       	ldi	r24, 0x01	; 1
    42f6:	85 83       	std	Z+5, r24	; 0x05
    42f8:	a7 c0       	rjmp	.+334    	; 0x4448 <f_lseek+0x360>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    42fa:	42 30       	cpi	r20, 0x02	; 2
    42fc:	51 05       	cpc	r21, r1
    42fe:	61 05       	cpc	r22, r1
    4300:	71 05       	cpc	r23, r1
    4302:	68 f0       	brcs	.+26     	; 0x431e <f_lseek+0x236>
    4304:	ad 81       	ldd	r26, Y+5	; 0x05
    4306:	be 81       	ldd	r27, Y+6	; 0x06
    4308:	ed 91       	ld	r30, X+
    430a:	fc 91       	ld	r31, X
    430c:	82 89       	ldd	r24, Z+18	; 0x12
    430e:	93 89       	ldd	r25, Z+19	; 0x13
    4310:	a4 89       	ldd	r26, Z+20	; 0x14
    4312:	b5 89       	ldd	r27, Z+21	; 0x15
    4314:	48 17       	cp	r20, r24
    4316:	59 07       	cpc	r21, r25
    4318:	6a 07       	cpc	r22, r26
    431a:	7b 07       	cpc	r23, r27
    431c:	28 f0       	brcs	.+10     	; 0x4328 <f_lseek+0x240>
    431e:	ed 81       	ldd	r30, Y+5	; 0x05
    4320:	fe 81       	ldd	r31, Y+6	; 0x06
    4322:	82 e0       	ldi	r24, 0x02	; 2
    4324:	85 83       	std	Z+5, r24	; 0x05
    4326:	90 c0       	rjmp	.+288    	; 0x4448 <f_lseek+0x360>
					fp->clust = clst;
    4328:	ad 81       	ldd	r26, Y+5	; 0x05
    432a:	be 81       	ldd	r27, Y+6	; 0x06
    432c:	52 96       	adiw	r26, 0x12	; 18
    432e:	4d 93       	st	X+, r20
    4330:	5d 93       	st	X+, r21
    4332:	6d 93       	st	X+, r22
    4334:	7c 93       	st	X, r23
    4336:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    4338:	fd 01       	movw	r30, r26
    433a:	86 81       	ldd	r24, Z+6	; 0x06
    433c:	97 81       	ldd	r25, Z+7	; 0x07
    433e:	a0 85       	ldd	r26, Z+8	; 0x08
    4340:	b1 85       	ldd	r27, Z+9	; 0x09
    4342:	88 0d       	add	r24, r8
    4344:	99 1d       	adc	r25, r9
    4346:	aa 1d       	adc	r26, r10
    4348:	bb 1d       	adc	r27, r11
    434a:	86 83       	std	Z+6, r24	; 0x06
    434c:	97 83       	std	Z+7, r25	; 0x07
    434e:	a0 87       	std	Z+8, r26	; 0x08
    4350:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    4352:	c8 18       	sub	r12, r8
    4354:	d9 08       	sbc	r13, r9
    4356:	ea 08       	sbc	r14, r10
    4358:	fb 08       	sbc	r15, r11
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    435a:	8c 14       	cp	r8, r12
    435c:	9d 04       	cpc	r9, r13
    435e:	ae 04       	cpc	r10, r14
    4360:	bf 04       	cpc	r11, r15
    4362:	08 f4       	brcc	.+2      	; 0x4366 <f_lseek+0x27e>
    4364:	a4 cf       	rjmp	.-184    	; 0x42ae <f_lseek+0x1c6>
    4366:	02 c0       	rjmp	.+4      	; 0x436c <f_lseek+0x284>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
    4368:	75 01       	movw	r14, r10
    436a:	64 01       	movw	r12, r8
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    436c:	ed 81       	ldd	r30, Y+5	; 0x05
    436e:	fe 81       	ldd	r31, Y+6	; 0x06
    4370:	86 81       	ldd	r24, Z+6	; 0x06
    4372:	97 81       	ldd	r25, Z+7	; 0x07
    4374:	a0 85       	ldd	r26, Z+8	; 0x08
    4376:	b1 85       	ldd	r27, Z+9	; 0x09
    4378:	8c 0d       	add	r24, r12
    437a:	9d 1d       	adc	r25, r13
    437c:	ae 1d       	adc	r26, r14
    437e:	bf 1d       	adc	r27, r15
    4380:	86 83       	std	Z+6, r24	; 0x06
    4382:	97 83       	std	Z+7, r25	; 0x07
    4384:	a0 87       	std	Z+8, r26	; 0x08
    4386:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    4388:	d7 01       	movw	r26, r14
    438a:	c6 01       	movw	r24, r12
    438c:	91 70       	andi	r25, 0x01	; 1
    438e:	aa 27       	eor	r26, r26
    4390:	bb 27       	eor	r27, r27
    4392:	89 2b       	or	r24, r25
    4394:	8a 2b       	or	r24, r26
    4396:	8b 2b       	or	r24, r27
    4398:	09 f1       	breq	.+66     	; 0x43dc <f_lseek+0x2f4>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    439a:	80 81       	ld	r24, Z
    439c:	91 81       	ldd	r25, Z+1	; 0x01
    439e:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    43a2:	61 15       	cp	r22, r1
    43a4:	71 05       	cpc	r23, r1
    43a6:	81 05       	cpc	r24, r1
    43a8:	91 05       	cpc	r25, r1
    43aa:	31 f4       	brne	.+12     	; 0x43b8 <f_lseek+0x2d0>
    43ac:	82 e0       	ldi	r24, 0x02	; 2
    43ae:	ad 81       	ldd	r26, Y+5	; 0x05
    43b0:	be 81       	ldd	r27, Y+6	; 0x06
    43b2:	15 96       	adiw	r26, 0x05	; 5
    43b4:	8c 93       	st	X, r24
    43b6:	48 c0       	rjmp	.+144    	; 0x4448 <f_lseek+0x360>
					nsect += ofs / SS(fp->fs);
    43b8:	0b 2e       	mov	r0, r27
    43ba:	b9 e0       	ldi	r27, 0x09	; 9
    43bc:	f6 94       	lsr	r15
    43be:	e7 94       	ror	r14
    43c0:	d7 94       	ror	r13
    43c2:	c7 94       	ror	r12
    43c4:	ba 95       	dec	r27
    43c6:	d1 f7       	brne	.-12     	; 0x43bc <f_lseek+0x2d4>
    43c8:	b0 2d       	mov	r27, r0
    43ca:	c6 0e       	add	r12, r22
    43cc:	d7 1e       	adc	r13, r23
    43ce:	e8 1e       	adc	r14, r24
    43d0:	f9 1e       	adc	r15, r25
    43d2:	07 c0       	rjmp	.+14     	; 0x43e2 <f_lseek+0x2fa>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    43d4:	c1 2c       	mov	r12, r1
    43d6:	d1 2c       	mov	r13, r1
    43d8:	76 01       	movw	r14, r12
    43da:	03 c0       	rjmp	.+6      	; 0x43e2 <f_lseek+0x2fa>
    43dc:	c1 2c       	mov	r12, r1
    43de:	d1 2c       	mov	r13, r1
    43e0:	76 01       	movw	r14, r12
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    43e2:	ed 81       	ldd	r30, Y+5	; 0x05
    43e4:	fe 81       	ldd	r31, Y+6	; 0x06
    43e6:	86 81       	ldd	r24, Z+6	; 0x06
    43e8:	97 81       	ldd	r25, Z+7	; 0x07
    43ea:	a0 85       	ldd	r26, Z+8	; 0x08
    43ec:	b1 85       	ldd	r27, Z+9	; 0x09
    43ee:	ac 01       	movw	r20, r24
    43f0:	bd 01       	movw	r22, r26
    43f2:	51 70       	andi	r21, 0x01	; 1
    43f4:	66 27       	eor	r22, r22
    43f6:	77 27       	eor	r23, r23
    43f8:	45 2b       	or	r20, r21
    43fa:	46 2b       	or	r20, r22
    43fc:	47 2b       	or	r20, r23
    43fe:	69 f0       	breq	.+26     	; 0x441a <f_lseek+0x332>
    4400:	46 89       	ldd	r20, Z+22	; 0x16
    4402:	57 89       	ldd	r21, Z+23	; 0x17
    4404:	60 8d       	ldd	r22, Z+24	; 0x18
    4406:	71 8d       	ldd	r23, Z+25	; 0x19
    4408:	c4 16       	cp	r12, r20
    440a:	d5 06       	cpc	r13, r21
    440c:	e6 06       	cpc	r14, r22
    440e:	f7 06       	cpc	r15, r23
    4410:	21 f0       	breq	.+8      	; 0x441a <f_lseek+0x332>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    4412:	c6 8a       	std	Z+22, r12	; 0x16
    4414:	d7 8a       	std	Z+23, r13	; 0x17
    4416:	e0 8e       	std	Z+24, r14	; 0x18
    4418:	f1 8e       	std	Z+25, r15	; 0x19
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    441a:	ed 81       	ldd	r30, Y+5	; 0x05
    441c:	fe 81       	ldd	r31, Y+6	; 0x06
    441e:	42 85       	ldd	r20, Z+10	; 0x0a
    4420:	53 85       	ldd	r21, Z+11	; 0x0b
    4422:	64 85       	ldd	r22, Z+12	; 0x0c
    4424:	75 85       	ldd	r23, Z+13	; 0x0d
    4426:	48 17       	cp	r20, r24
    4428:	59 07       	cpc	r21, r25
    442a:	6a 07       	cpc	r22, r26
    442c:	7b 07       	cpc	r23, r27
    442e:	58 f4       	brcc	.+22     	; 0x4446 <f_lseek+0x35e>
			fp->fsize = fp->fptr;
    4430:	82 87       	std	Z+10, r24	; 0x0a
    4432:	93 87       	std	Z+11, r25	; 0x0b
    4434:	a4 87       	std	Z+12, r26	; 0x0c
    4436:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA__WRITTEN;
    4438:	84 81       	ldd	r24, Z+4	; 0x04
    443a:	80 62       	ori	r24, 0x20	; 32
    443c:	84 83       	std	Z+4, r24	; 0x04
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
    443e:	80 e0       	ldi	r24, 0x00	; 0
    4440:	03 c0       	rjmp	.+6      	; 0x4448 <f_lseek+0x360>
    4442:	80 e0       	ldi	r24, 0x00	; 0
    4444:	01 c0       	rjmp	.+2      	; 0x4448 <f_lseek+0x360>
    4446:	80 e0       	ldi	r24, 0x00	; 0
}
    4448:	26 96       	adiw	r28, 0x06	; 6
    444a:	0f b6       	in	r0, 0x3f	; 63
    444c:	f8 94       	cli
    444e:	de bf       	out	0x3e, r29	; 62
    4450:	0f be       	out	0x3f, r0	; 63
    4452:	cd bf       	out	0x3d, r28	; 61
    4454:	df 91       	pop	r29
    4456:	cf 91       	pop	r28
    4458:	1f 91       	pop	r17
    445a:	0f 91       	pop	r16
    445c:	ff 90       	pop	r15
    445e:	ef 90       	pop	r14
    4460:	df 90       	pop	r13
    4462:	cf 90       	pop	r12
    4464:	bf 90       	pop	r11
    4466:	af 90       	pop	r10
    4468:	9f 90       	pop	r9
    446a:	8f 90       	pop	r8
    446c:	7f 90       	pop	r7
    446e:	6f 90       	pop	r6
    4470:	5f 90       	pop	r5
    4472:	4f 90       	pop	r4
    4474:	08 95       	ret

00004476 <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
    4476:	29 9a       	sbi	0x05, 1	; 5
	spi_rwSPI(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    4478:	8f ef       	ldi	r24, 0xFF	; 255
    447a:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
    447e:	08 95       	ret

00004480 <select>:

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	//PORTB = (0 << 1) | (0 << 2) | (0 << 3);
	CS_LOW();		/* Set CS# low */
    4480:	29 98       	cbi	0x05, 1	; 5
	spi_rwSPI(0xFF);	/* Dummy clock (force DO enabled) */
    4482:	8f ef       	ldi	r24, 0xFF	; 255
    4484:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
)
{
	BYTE d;


	Timer2 = wt / 10;
    4488:	82 e3       	ldi	r24, 0x32	; 50
    448a:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <Timer2>
	do
		d = spi_rwSPI(0xFF);
    448e:	8f ef       	ldi	r24, 0xFF	; 255
    4490:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
	while (d != 0xFF && Timer2);
    4494:	8f 3f       	cpi	r24, 0xFF	; 255
    4496:	49 f0       	breq	.+18     	; 0x44aa <select+0x2a>
    4498:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <Timer2>
    449c:	81 11       	cpse	r24, r1
    449e:	f7 cf       	rjmp	.-18     	; 0x448e <select+0xe>
	//PORTB = (0 << 1) | (0 << 2) | (0 << 3);
	CS_LOW();		/* Set CS# low */
	spi_rwSPI(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */

	deselect();
    44a0:	0e 94 3b 22 	call	0x4476	; 0x4476 <deselect>
	return 0;	/* Timeout */
    44a4:	80 e0       	ldi	r24, 0x00	; 0
    44a6:	90 e0       	ldi	r25, 0x00	; 0
    44a8:	08 95       	ret
int select (void)	/* 1:Successful, 0:Timeout */
{
	//PORTB = (0 << 1) | (0 << 2) | (0 << 3);
	CS_LOW();		/* Set CS# low */
	spi_rwSPI(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */
    44aa:	81 e0       	ldi	r24, 0x01	; 1
    44ac:	90 e0       	ldi	r25, 0x00	; 0

	deselect();
	return 0;	/* Timeout */
}
    44ae:	08 95       	ret

000044b0 <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    44b0:	ff 92       	push	r15
    44b2:	0f 93       	push	r16
    44b4:	1f 93       	push	r17
    44b6:	cf 93       	push	r28
    44b8:	df 93       	push	r29
    44ba:	c8 2f       	mov	r28, r24
    44bc:	d4 2f       	mov	r29, r20
    44be:	15 2f       	mov	r17, r21
    44c0:	06 2f       	mov	r16, r22
    44c2:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    44c4:	88 23       	and	r24, r24
    44c6:	54 f4       	brge	.+20     	; 0x44dc <send_cmd+0x2c>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    44c8:	40 e0       	ldi	r20, 0x00	; 0
    44ca:	50 e0       	ldi	r21, 0x00	; 0
    44cc:	ba 01       	movw	r22, r20
    44ce:	87 e3       	ldi	r24, 0x37	; 55
    44d0:	0e 94 58 22 	call	0x44b0	; 0x44b0 <send_cmd>
		if (res > 1) return res;
    44d4:	82 30       	cpi	r24, 0x02	; 2
    44d6:	08 f0       	brcs	.+2      	; 0x44da <send_cmd+0x2a>
    44d8:	4e c0       	rjmp	.+156    	; 0x4576 <send_cmd+0xc6>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    44da:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    44dc:	cc 30       	cpi	r28, 0x0C	; 12
    44de:	39 f1       	breq	.+78     	; 0x452e <send_cmd+0x7e>
		deselect();
    44e0:	0e 94 3b 22 	call	0x4476	; 0x4476 <deselect>
		if (!select()) return 0xFF;
    44e4:	0e 94 40 22 	call	0x4480	; 0x4480 <select>
    44e8:	89 2b       	or	r24, r25
    44ea:	f9 f0       	breq	.+62     	; 0x452a <send_cmd+0x7a>
	}

	/* Send command packet */
	spi_rwSPI(0x40 | cmd);				/* Start + Command index */
    44ec:	8c 2f       	mov	r24, r28
    44ee:	80 64       	ori	r24, 0x40	; 64
    44f0:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
	spi_rwSPI((BYTE)(arg >> 24));		/* Argument[31..24] */
    44f4:	8f 2d       	mov	r24, r15
    44f6:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
	spi_rwSPI((BYTE)(arg >> 16));		/* Argument[23..16] */
    44fa:	80 2f       	mov	r24, r16
    44fc:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
	spi_rwSPI((BYTE)(arg >> 8));			/* Argument[15..8] */
    4500:	81 2f       	mov	r24, r17
    4502:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
	spi_rwSPI((BYTE)arg);				/* Argument[7..0] */
    4506:	8d 2f       	mov	r24, r29
    4508:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
    450c:	cc 23       	and	r28, r28
    450e:	79 f1       	breq	.+94     	; 0x456e <send_cmd+0xbe>
    4510:	2b c0       	rjmp	.+86     	; 0x4568 <send_cmd+0xb8>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	spi_rwSPI(n);

	/* Receive command response */
	if (cmd == CMD12) spi_rwSPI(0xFF);		/* Skip a stuff byte when stop reading */
    4512:	8f ef       	ldi	r24, 0xFF	; 255
    4514:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    4518:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) spi_rwSPI(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = spi_rwSPI(0xFF);
    451a:	8f ef       	ldi	r24, 0xFF	; 255
    451c:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
	while ((res & 0x80) && --n);
    4520:	88 23       	and	r24, r24
    4522:	4c f5       	brge	.+82     	; 0x4576 <send_cmd+0xc6>
    4524:	c1 50       	subi	r28, 0x01	; 1
    4526:	c9 f7       	brne	.-14     	; 0x451a <send_cmd+0x6a>
    4528:	26 c0       	rjmp	.+76     	; 0x4576 <send_cmd+0xc6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
    452a:	8f ef       	ldi	r24, 0xFF	; 255
    452c:	24 c0       	rjmp	.+72     	; 0x4576 <send_cmd+0xc6>
	}

	/* Send command packet */
	spi_rwSPI(0x40 | cmd);				/* Start + Command index */
    452e:	8c e4       	ldi	r24, 0x4C	; 76
    4530:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
	spi_rwSPI((BYTE)(arg >> 24));		/* Argument[31..24] */
    4534:	8f 2d       	mov	r24, r15
    4536:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
	spi_rwSPI((BYTE)(arg >> 16));		/* Argument[23..16] */
    453a:	80 2f       	mov	r24, r16
    453c:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
	spi_rwSPI((BYTE)(arg >> 8));			/* Argument[15..8] */
    4540:	81 2f       	mov	r24, r17
    4542:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
	spi_rwSPI((BYTE)arg);				/* Argument[7..0] */
    4546:	8d 2f       	mov	r24, r29
    4548:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	spi_rwSPI(n);
    454c:	81 e0       	ldi	r24, 0x01	; 1
    454e:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>

	/* Receive command response */
	if (cmd == CMD12) spi_rwSPI(0xFF);		/* Skip a stuff byte when stop reading */
    4552:	cc 30       	cpi	r28, 0x0C	; 12
    4554:	f1 f2       	breq	.-68     	; 0x4512 <send_cmd+0x62>
    4556:	e0 cf       	rjmp	.-64     	; 0x4518 <send_cmd+0x68>
	spi_rwSPI((BYTE)(arg >> 8));			/* Argument[15..8] */
	spi_rwSPI((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	spi_rwSPI(n);
    4558:	87 e8       	ldi	r24, 0x87	; 135
    455a:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
    455e:	dc cf       	rjmp	.-72     	; 0x4518 <send_cmd+0x68>
    4560:	81 e0       	ldi	r24, 0x01	; 1
    4562:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
    4566:	d8 cf       	rjmp	.-80     	; 0x4518 <send_cmd+0x68>
	spi_rwSPI((BYTE)(arg >> 16));		/* Argument[23..16] */
	spi_rwSPI((BYTE)(arg >> 8));			/* Argument[15..8] */
	spi_rwSPI((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    4568:	c8 30       	cpi	r28, 0x08	; 8
    456a:	b1 f3       	breq	.-20     	; 0x4558 <send_cmd+0xa8>
    456c:	f9 cf       	rjmp	.-14     	; 0x4560 <send_cmd+0xb0>
	spi_rwSPI(n);
    456e:	85 e9       	ldi	r24, 0x95	; 149
    4570:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
    4574:	d1 cf       	rjmp	.-94     	; 0x4518 <send_cmd+0x68>
	do
		res = spi_rwSPI(0xFF);
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
    4576:	df 91       	pop	r29
    4578:	cf 91       	pop	r28
    457a:	1f 91       	pop	r17
    457c:	0f 91       	pop	r16
    457e:	ff 90       	pop	r15
    4580:	08 95       	ret

00004582 <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    4582:	0f 93       	push	r16
    4584:	1f 93       	push	r17
    4586:	cf 93       	push	r28
    4588:	df 93       	push	r29
    458a:	08 2f       	mov	r16, r24
    458c:	19 2f       	mov	r17, r25
    458e:	eb 01       	movw	r28, r22
	BYTE token;


	Timer1 = 20;
    4590:	84 e1       	ldi	r24, 0x14	; 20
    4592:	80 93 91 03 	sts	0x0391, r24	; 0x800391 <Timer1>
	do {							/* Wait for data packet in timeout of 200ms */
		token = spi_rwSPI(0xFF);
    4596:	8f ef       	ldi	r24, 0xFF	; 255
    4598:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
	} while ((token == 0xFF) && Timer1);
    459c:	8f 3f       	cpi	r24, 0xFF	; 255
    459e:	39 f4       	brne	.+14     	; 0x45ae <rcvr_datablock+0x2c>
    45a0:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <Timer1>
    45a4:	81 11       	cpse	r24, r1
    45a6:	f7 cf       	rjmp	.-18     	; 0x4596 <rcvr_datablock+0x14>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    45a8:	80 e0       	ldi	r24, 0x00	; 0
    45aa:	90 e0       	ldi	r25, 0x00	; 0
    45ac:	22 c0       	rjmp	.+68     	; 0x45f2 <rcvr_datablock+0x70>
    45ae:	8e 3f       	cpi	r24, 0xFE	; 254
    45b0:	f1 f4       	brne	.+60     	; 0x45ee <rcvr_datablock+0x6c>
    45b2:	e0 2f       	mov	r30, r16
    45b4:	f1 2f       	mov	r31, r17
	BYTE *p,	/* Data buffer */
	UINT cnt	/* Size of data block (must be multiple of 2) */
)
{
	do {
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
    45b6:	8f ef       	ldi	r24, 0xFF	; 255
    45b8:	8e bd       	out	0x2e, r24	; 46
    45ba:	0d b4       	in	r0, 0x2d	; 45
    45bc:	07 fe       	sbrs	r0, 7
    45be:	fd cf       	rjmp	.-6      	; 0x45ba <rcvr_datablock+0x38>
    45c0:	9e b5       	in	r25, 0x2e	; 46
    45c2:	df 01       	movw	r26, r30
    45c4:	90 83       	st	Z, r25
		SPDR = 0xFF; loop_until_bit_is_set(SPSR,SPIF); *p++ = SPDR;
    45c6:	8e bd       	out	0x2e, r24	; 46
    45c8:	0d b4       	in	r0, 0x2d	; 45
    45ca:	07 fe       	sbrs	r0, 7
    45cc:	fd cf       	rjmp	.-6      	; 0x45c8 <rcvr_datablock+0x46>
    45ce:	9e b5       	in	r25, 0x2e	; 46
    45d0:	11 96       	adiw	r26, 0x01	; 1
    45d2:	9c 93       	st	X, r25
	} while (cnt -= 2);
    45d4:	22 97       	sbiw	r28, 0x02	; 2
    45d6:	32 96       	adiw	r30, 0x02	; 2
    45d8:	20 97       	sbiw	r28, 0x00	; 0
    45da:	71 f7       	brne	.-36     	; 0x45b8 <rcvr_datablock+0x36>
		token = spi_rwSPI(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	spi_rwSPI(0xFF);					/* Discard CRC */
    45dc:	8f ef       	ldi	r24, 0xFF	; 255
    45de:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
	spi_rwSPI(0xFF);
    45e2:	8f ef       	ldi	r24, 0xFF	; 255
    45e4:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>

	return 1;						/* Return with success */
    45e8:	81 e0       	ldi	r24, 0x01	; 1
    45ea:	90 e0       	ldi	r25, 0x00	; 0
    45ec:	02 c0       	rjmp	.+4      	; 0x45f2 <rcvr_datablock+0x70>

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = spi_rwSPI(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    45ee:	80 e0       	ldi	r24, 0x00	; 0
    45f0:	90 e0       	ldi	r25, 0x00	; 0
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	spi_rwSPI(0xFF);					/* Discard CRC */
	spi_rwSPI(0xFF);

	return 1;						/* Return with success */
}
    45f2:	df 91       	pop	r29
    45f4:	cf 91       	pop	r28
    45f6:	1f 91       	pop	r17
    45f8:	0f 91       	pop	r16
    45fa:	08 95       	ret

000045fc <xmit_datablock>:
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    45fc:	1f 93       	push	r17
    45fe:	cf 93       	push	r28
    4600:	df 93       	push	r29
    4602:	ec 01       	movw	r28, r24
    4604:	16 2f       	mov	r17, r22
)
{
	BYTE d;


	Timer2 = wt / 10;
    4606:	82 e3       	ldi	r24, 0x32	; 50
    4608:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <Timer2>
	do
		d = spi_rwSPI(0xFF);
    460c:	8f ef       	ldi	r24, 0xFF	; 255
    460e:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
	while (d != 0xFF && Timer2);
    4612:	8f 3f       	cpi	r24, 0xFF	; 255
    4614:	31 f0       	breq	.+12     	; 0x4622 <xmit_datablock+0x26>
    4616:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <Timer2>
    461a:	81 11       	cpse	r24, r1
    461c:	f7 cf       	rjmp	.-18     	; 0x460c <xmit_datablock+0x10>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
    461e:	90 e0       	ldi	r25, 0x00	; 0
    4620:	2b c0       	rjmp	.+86     	; 0x4678 <xmit_datablock+0x7c>

	spi_rwSPI(token);					/* Xmit data token */
    4622:	81 2f       	mov	r24, r17
    4624:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
	if (token != 0xFD) {	/* Is data token */
    4628:	1d 3f       	cpi	r17, 0xFD	; 253
    462a:	21 f1       	breq	.+72     	; 0x4674 <xmit_datablock+0x78>
    462c:	fe 01       	movw	r30, r28
    462e:	9e 01       	movw	r18, r28
    4630:	3e 5f       	subi	r19, 0xFE	; 254
    4632:	df 01       	movw	r26, r30
	const BYTE *p,	/* Data block to be sent */
	UINT cnt		/* Size of data block (must be multiple of 2) */
)
{
	do {
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
    4634:	90 81       	ld	r25, Z
    4636:	9e bd       	out	0x2e, r25	; 46
    4638:	0d b4       	in	r0, 0x2d	; 45
    463a:	07 fe       	sbrs	r0, 7
    463c:	fd cf       	rjmp	.-6      	; 0x4638 <xmit_datablock+0x3c>
		SPDR = *p++; loop_until_bit_is_set(SPSR,SPIF);
    463e:	11 96       	adiw	r26, 0x01	; 1
    4640:	9c 91       	ld	r25, X
    4642:	9e bd       	out	0x2e, r25	; 46
    4644:	0d b4       	in	r0, 0x2d	; 45
    4646:	07 fe       	sbrs	r0, 7
    4648:	fd cf       	rjmp	.-6      	; 0x4644 <xmit_datablock+0x48>
    464a:	32 96       	adiw	r30, 0x02	; 2
	} while (cnt -= 2);
    464c:	e2 17       	cp	r30, r18
    464e:	f3 07       	cpc	r31, r19
    4650:	81 f7       	brne	.-32     	; 0x4632 <xmit_datablock+0x36>
	if (!wait_ready(500)) return 0;

	spi_rwSPI(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, 512);		/* Xmit the data block to the MMC */
		spi_rwSPI(0xFF);					/* CRC (Dummy) */
    4652:	8f ef       	ldi	r24, 0xFF	; 255
    4654:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
		spi_rwSPI(0xFF);
    4658:	8f ef       	ldi	r24, 0xFF	; 255
    465a:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
		resp = spi_rwSPI(0xFF);			/* Reveive data response */
    465e:	8f ef       	ldi	r24, 0xFF	; 255
    4660:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
    4664:	28 2f       	mov	r18, r24
    4666:	2f 71       	andi	r18, 0x1F	; 31
    4668:	81 e0       	ldi	r24, 0x01	; 1
    466a:	90 e0       	ldi	r25, 0x00	; 0
    466c:	25 30       	cpi	r18, 0x05	; 5
    466e:	21 f0       	breq	.+8      	; 0x4678 <xmit_datablock+0x7c>
    4670:	80 e0       	ldi	r24, 0x00	; 0
    4672:	02 c0       	rjmp	.+4      	; 0x4678 <xmit_datablock+0x7c>
		resp = spi_rwSPI(0xFF);			/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return 0;
	}

	return 1;
    4674:	81 e0       	ldi	r24, 0x01	; 1
    4676:	90 e0       	ldi	r25, 0x00	; 0
}
    4678:	df 91       	pop	r29
    467a:	cf 91       	pop	r28
    467c:	1f 91       	pop	r17
    467e:	08 95       	ret

00004680 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
    4680:	cf 92       	push	r12
    4682:	df 92       	push	r13
    4684:	ef 92       	push	r14
    4686:	ff 92       	push	r15
    4688:	0f 93       	push	r16
    468a:	1f 93       	push	r17
    468c:	cf 93       	push	r28
    468e:	df 93       	push	r29
    4690:	00 d0       	rcall	.+0      	; 0x4692 <disk_initialize+0x12>
    4692:	00 d0       	rcall	.+0      	; 0x4694 <disk_initialize+0x14>
    4694:	cd b7       	in	r28, 0x3d	; 61
    4696:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    4698:	81 11       	cpse	r24, r1
    469a:	9c c0       	rjmp	.+312    	; 0x47d4 <disk_initialize+0x154>
	//power_off();						/* Turn off the socket power to reset the card */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
    469c:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <Stat>
    46a0:	81 ff       	sbrs	r24, 1
    46a2:	03 c0       	rjmp	.+6      	; 0x46aa <disk_initialize+0x2a>
    46a4:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <Stat>
    46a8:	a2 c0       	rjmp	.+324    	; 0x47ee <disk_initialize+0x16e>
	//power_on();							/* Turn on the socket power */
	FCLK_SLOW();
    46aa:	82 e5       	ldi	r24, 0x52	; 82
    46ac:	8c bd       	out	0x2c, r24	; 44
    46ae:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) spi_rwSPI(0xFF);	/* 80 dummy clocks */
    46b0:	8f ef       	ldi	r24, 0xFF	; 255
    46b2:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
    46b6:	11 50       	subi	r17, 0x01	; 1
    46b8:	d9 f7       	brne	.-10     	; 0x46b0 <disk_initialize+0x30>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    46ba:	40 e0       	ldi	r20, 0x00	; 0
    46bc:	50 e0       	ldi	r21, 0x00	; 0
    46be:	ba 01       	movw	r22, r20
    46c0:	80 e0       	ldi	r24, 0x00	; 0
    46c2:	0e 94 58 22 	call	0x44b0	; 0x44b0 <send_cmd>
    46c6:	81 30       	cpi	r24, 0x01	; 1
    46c8:	09 f0       	breq	.+2      	; 0x46cc <disk_initialize+0x4c>
    46ca:	8c c0       	rjmp	.+280    	; 0x47e4 <disk_initialize+0x164>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    46cc:	84 e6       	ldi	r24, 0x64	; 100
    46ce:	80 93 91 03 	sts	0x0391, r24	; 0x800391 <Timer1>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    46d2:	4a ea       	ldi	r20, 0xAA	; 170
    46d4:	51 e0       	ldi	r21, 0x01	; 1
    46d6:	60 e0       	ldi	r22, 0x00	; 0
    46d8:	70 e0       	ldi	r23, 0x00	; 0
    46da:	88 e0       	ldi	r24, 0x08	; 8
    46dc:	0e 94 58 22 	call	0x44b0	; 0x44b0 <send_cmd>
    46e0:	81 30       	cpi	r24, 0x01	; 1
    46e2:	09 f0       	breq	.+2      	; 0x46e6 <disk_initialize+0x66>
    46e4:	41 c0       	rjmp	.+130    	; 0x4768 <disk_initialize+0xe8>
    46e6:	ce 01       	movw	r24, r28
    46e8:	01 96       	adiw	r24, 0x01	; 1
    46ea:	6c 01       	movw	r12, r24
    46ec:	7e 01       	movw	r14, r28
    46ee:	95 e0       	ldi	r25, 0x05	; 5
    46f0:	e9 0e       	add	r14, r25
    46f2:	f1 1c       	adc	r15, r1
    46f4:	86 01       	movw	r16, r12
			for (n = 0; n < 4; n++) ocr[n] = spi_rwSPI(0xFF);		/* Get trailing return value of R7 resp */
    46f6:	8f ef       	ldi	r24, 0xFF	; 255
    46f8:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
    46fc:	f8 01       	movw	r30, r16
    46fe:	81 93       	st	Z+, r24
    4700:	8f 01       	movw	r16, r30
    4702:	ee 16       	cp	r14, r30
    4704:	ff 06       	cpc	r15, r31
    4706:	b9 f7       	brne	.-18     	; 0x46f6 <disk_initialize+0x76>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    4708:	8b 81       	ldd	r24, Y+3	; 0x03
    470a:	81 30       	cpi	r24, 0x01	; 1
    470c:	09 f0       	breq	.+2      	; 0x4710 <disk_initialize+0x90>
    470e:	6a c0       	rjmp	.+212    	; 0x47e4 <disk_initialize+0x164>
    4710:	8c 81       	ldd	r24, Y+4	; 0x04
    4712:	8a 3a       	cpi	r24, 0xAA	; 170
    4714:	09 f0       	breq	.+2      	; 0x4718 <disk_initialize+0x98>
    4716:	66 c0       	rjmp	.+204    	; 0x47e4 <disk_initialize+0x164>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    4718:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <Timer1>
    471c:	88 23       	and	r24, r24
    471e:	49 f0       	breq	.+18     	; 0x4732 <disk_initialize+0xb2>
    4720:	40 e0       	ldi	r20, 0x00	; 0
    4722:	50 e0       	ldi	r21, 0x00	; 0
    4724:	60 e0       	ldi	r22, 0x00	; 0
    4726:	70 e4       	ldi	r23, 0x40	; 64
    4728:	89 ea       	ldi	r24, 0xA9	; 169
    472a:	0e 94 58 22 	call	0x44b0	; 0x44b0 <send_cmd>
    472e:	81 11       	cpse	r24, r1
    4730:	f3 cf       	rjmp	.-26     	; 0x4718 <disk_initialize+0x98>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    4732:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <Timer1>
    4736:	88 23       	and	r24, r24
    4738:	09 f4       	brne	.+2      	; 0x473c <disk_initialize+0xbc>
    473a:	54 c0       	rjmp	.+168    	; 0x47e4 <disk_initialize+0x164>
    473c:	40 e0       	ldi	r20, 0x00	; 0
    473e:	50 e0       	ldi	r21, 0x00	; 0
    4740:	ba 01       	movw	r22, r20
    4742:	8a e3       	ldi	r24, 0x3A	; 58
    4744:	0e 94 58 22 	call	0x44b0	; 0x44b0 <send_cmd>
    4748:	81 11       	cpse	r24, r1
    474a:	4c c0       	rjmp	.+152    	; 0x47e4 <disk_initialize+0x164>
					for (n = 0; n < 4; n++) ocr[n] = spi_rwSPI(0xFF);
    474c:	8f ef       	ldi	r24, 0xFF	; 255
    474e:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
    4752:	f6 01       	movw	r30, r12
    4754:	81 93       	st	Z+, r24
    4756:	6f 01       	movw	r12, r30
    4758:	ee 16       	cp	r14, r30
    475a:	ff 06       	cpc	r15, r31
    475c:	b9 f7       	brne	.-18     	; 0x474c <disk_initialize+0xcc>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    475e:	89 81       	ldd	r24, Y+1	; 0x01
    4760:	86 fd       	sbrc	r24, 6
    4762:	3a c0       	rjmp	.+116    	; 0x47d8 <disk_initialize+0x158>
    4764:	84 e0       	ldi	r24, 0x04	; 4
    4766:	39 c0       	rjmp	.+114    	; 0x47da <disk_initialize+0x15a>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    4768:	40 e0       	ldi	r20, 0x00	; 0
    476a:	50 e0       	ldi	r21, 0x00	; 0
    476c:	ba 01       	movw	r22, r20
    476e:	89 ea       	ldi	r24, 0xA9	; 169
    4770:	0e 94 58 22 	call	0x44b0	; 0x44b0 <send_cmd>
    4774:	82 30       	cpi	r24, 0x02	; 2
    4776:	18 f0       	brcs	.+6      	; 0x477e <disk_initialize+0xfe>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    4778:	01 e0       	ldi	r16, 0x01	; 1
    477a:	11 e0       	ldi	r17, 0x01	; 1
    477c:	02 c0       	rjmp	.+4      	; 0x4782 <disk_initialize+0x102>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    477e:	02 e0       	ldi	r16, 0x02	; 2
    4780:	19 ea       	ldi	r17, 0xA9	; 169
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    4782:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <Timer1>
    4786:	88 23       	and	r24, r24
    4788:	41 f0       	breq	.+16     	; 0x479a <disk_initialize+0x11a>
    478a:	40 e0       	ldi	r20, 0x00	; 0
    478c:	50 e0       	ldi	r21, 0x00	; 0
    478e:	ba 01       	movw	r22, r20
    4790:	81 2f       	mov	r24, r17
    4792:	0e 94 58 22 	call	0x44b0	; 0x44b0 <send_cmd>
    4796:	81 11       	cpse	r24, r1
    4798:	f4 cf       	rjmp	.-24     	; 0x4782 <disk_initialize+0x102>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    479a:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <Timer1>
    479e:	88 23       	and	r24, r24
    47a0:	09 f1       	breq	.+66     	; 0x47e4 <disk_initialize+0x164>
    47a2:	40 e0       	ldi	r20, 0x00	; 0
    47a4:	52 e0       	ldi	r21, 0x02	; 2
    47a6:	60 e0       	ldi	r22, 0x00	; 0
    47a8:	70 e0       	ldi	r23, 0x00	; 0
    47aa:	80 e1       	ldi	r24, 0x10	; 16
    47ac:	0e 94 58 22 	call	0x44b0	; 0x44b0 <send_cmd>
    47b0:	81 11       	cpse	r24, r1
    47b2:	18 c0       	rjmp	.+48     	; 0x47e4 <disk_initialize+0x164>
				ty = 0;
		}
	}
	CardType = ty;
    47b4:	00 93 8f 03 	sts	0x038F, r16	; 0x80038f <CardType>
	deselect();
    47b8:	0e 94 3b 22 	call	0x4476	; 0x4476 <deselect>

	if (ty) {			/* Initialization succeded */
    47bc:	00 23       	and	r16, r16
    47be:	39 f0       	breq	.+14     	; 0x47ce <disk_initialize+0x14e>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    47c0:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <Stat>
    47c4:	8e 7f       	andi	r24, 0xFE	; 254
    47c6:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <Stat>
		FCLK_FAST();
    47ca:	80 e5       	ldi	r24, 0x50	; 80
    47cc:	8c bd       	out	0x2c, r24	; 44
	} else {			/* Initialization failed */
		//power_off();
	}

	return Stat;
    47ce:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <Stat>
    47d2:	0d c0       	rjmp	.+26     	; 0x47ee <disk_initialize+0x16e>
)
{
	BYTE n, cmd, ty, ocr[4];


	if (pdrv) return STA_NOINIT;		/* Supports only single drive */
    47d4:	81 e0       	ldi	r24, 0x01	; 1
    47d6:	0b c0       	rjmp	.+22     	; 0x47ee <disk_initialize+0x16e>
			for (n = 0; n < 4; n++) ocr[n] = spi_rwSPI(0xFF);		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = spi_rwSPI(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    47d8:	8c e0       	ldi	r24, 0x0C	; 12
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    47da:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <CardType>
	deselect();
    47de:	0e 94 3b 22 	call	0x4476	; 0x4476 <deselect>
    47e2:	ee cf       	rjmp	.-36     	; 0x47c0 <disk_initialize+0x140>
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
    47e4:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <CardType>
	deselect();
    47e8:	0e 94 3b 22 	call	0x4476	; 0x4476 <deselect>
    47ec:	f0 cf       	rjmp	.-32     	; 0x47ce <disk_initialize+0x14e>
	} else {			/* Initialization failed */
		//power_off();
	}

	return Stat;
}
    47ee:	0f 90       	pop	r0
    47f0:	0f 90       	pop	r0
    47f2:	0f 90       	pop	r0
    47f4:	0f 90       	pop	r0
    47f6:	df 91       	pop	r29
    47f8:	cf 91       	pop	r28
    47fa:	1f 91       	pop	r17
    47fc:	0f 91       	pop	r16
    47fe:	ff 90       	pop	r15
    4800:	ef 90       	pop	r14
    4802:	df 90       	pop	r13
    4804:	cf 90       	pop	r12
    4806:	08 95       	ret

00004808 <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    4808:	81 11       	cpse	r24, r1
    480a:	03 c0       	rjmp	.+6      	; 0x4812 <disk_status+0xa>
	return Stat;
    480c:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <Stat>
    4810:	08 95       	ret

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0) */
)
{
	if (pdrv) return STA_NOINIT;	/* Supports only single drive */
    4812:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
    4814:	08 95       	ret

00004816 <disk_read>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    4816:	ff 92       	push	r15
    4818:	0f 93       	push	r16
    481a:	1f 93       	push	r17
    481c:	cf 93       	push	r28
    481e:	df 93       	push	r29
    4820:	eb 01       	movw	r28, r22
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    4822:	81 11       	cpse	r24, r1
    4824:	43 c0       	rjmp	.+134    	; 0x48ac <disk_read+0x96>
    4826:	01 15       	cp	r16, r1
    4828:	11 05       	cpc	r17, r1
    482a:	09 f4       	brne	.+2      	; 0x482e <disk_read+0x18>
    482c:	41 c0       	rjmp	.+130    	; 0x48b0 <disk_read+0x9a>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    482e:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <Stat>
    4832:	80 fd       	sbrc	r24, 0
    4834:	3f c0       	rjmp	.+126    	; 0x48b4 <disk_read+0x9e>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    4836:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <CardType>
    483a:	83 fd       	sbrc	r24, 3
    483c:	09 c0       	rjmp	.+18     	; 0x4850 <disk_read+0x3a>
    483e:	01 2e       	mov	r0, r17
    4840:	19 e0       	ldi	r17, 0x09	; 9
    4842:	22 0f       	add	r18, r18
    4844:	33 1f       	adc	r19, r19
    4846:	44 1f       	adc	r20, r20
    4848:	55 1f       	adc	r21, r21
    484a:	1a 95       	dec	r17
    484c:	d1 f7       	brne	.-12     	; 0x4842 <disk_read+0x2c>
    484e:	10 2d       	mov	r17, r0

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    4850:	02 30       	cpi	r16, 0x02	; 2
    4852:	11 05       	cpc	r17, r1
    4854:	28 f4       	brcc	.+10     	; 0x4860 <disk_read+0x4a>
    4856:	0f 2e       	mov	r0, r31
    4858:	f1 e1       	ldi	r31, 0x11	; 17
    485a:	ff 2e       	mov	r15, r31
    485c:	f0 2d       	mov	r31, r0
    485e:	04 c0       	rjmp	.+8      	; 0x4868 <disk_read+0x52>
    4860:	0f 2e       	mov	r0, r31
    4862:	f2 e1       	ldi	r31, 0x12	; 18
    4864:	ff 2e       	mov	r15, r31
    4866:	f0 2d       	mov	r31, r0
	if (send_cmd(cmd, sector) == 0) {
    4868:	ba 01       	movw	r22, r20
    486a:	a9 01       	movw	r20, r18
    486c:	8f 2d       	mov	r24, r15
    486e:	0e 94 58 22 	call	0x44b0	; 0x44b0 <send_cmd>
    4872:	81 11       	cpse	r24, r1
    4874:	14 c0       	rjmp	.+40     	; 0x489e <disk_read+0x88>
		do {
			if (!rcvr_datablock(buff, 512)) break;
    4876:	60 e0       	ldi	r22, 0x00	; 0
    4878:	72 e0       	ldi	r23, 0x02	; 2
    487a:	ce 01       	movw	r24, r28
    487c:	0e 94 c1 22 	call	0x4582	; 0x4582 <rcvr_datablock>
    4880:	89 2b       	or	r24, r25
    4882:	21 f0       	breq	.+8      	; 0x488c <disk_read+0x76>
			buff += 512;
    4884:	de 5f       	subi	r29, 0xFE	; 254
		} while (--count);
    4886:	01 50       	subi	r16, 0x01	; 1
    4888:	11 09       	sbc	r17, r1
    488a:	a9 f7       	brne	.-22     	; 0x4876 <disk_read+0x60>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    488c:	82 e1       	ldi	r24, 0x12	; 18
    488e:	f8 12       	cpse	r15, r24
    4890:	06 c0       	rjmp	.+12     	; 0x489e <disk_read+0x88>
    4892:	40 e0       	ldi	r20, 0x00	; 0
    4894:	50 e0       	ldi	r21, 0x00	; 0
    4896:	ba 01       	movw	r22, r20
    4898:	8c e0       	ldi	r24, 0x0C	; 12
    489a:	0e 94 58 22 	call	0x44b0	; 0x44b0 <send_cmd>
	}
	deselect();
    489e:	0e 94 3b 22 	call	0x4476	; 0x4476 <deselect>

	return count ? RES_ERROR : RES_OK;
    48a2:	81 e0       	ldi	r24, 0x01	; 1
    48a4:	01 2b       	or	r16, r17
    48a6:	39 f4       	brne	.+14     	; 0x48b6 <disk_read+0xa0>
    48a8:	80 e0       	ldi	r24, 0x00	; 0
    48aa:	05 c0       	rjmp	.+10     	; 0x48b6 <disk_read+0xa0>
)
{
	BYTE cmd;


	if (pdrv || !count) return RES_PARERR;
    48ac:	84 e0       	ldi	r24, 0x04	; 4
    48ae:	03 c0       	rjmp	.+6      	; 0x48b6 <disk_read+0xa0>
    48b0:	84 e0       	ldi	r24, 0x04	; 4
    48b2:	01 c0       	rjmp	.+2      	; 0x48b6 <disk_read+0xa0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    48b4:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    48b6:	df 91       	pop	r29
    48b8:	cf 91       	pop	r28
    48ba:	1f 91       	pop	r17
    48bc:	0f 91       	pop	r16
    48be:	ff 90       	pop	r15
    48c0:	08 95       	ret

000048c2 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    48c2:	cf 92       	push	r12
    48c4:	df 92       	push	r13
    48c6:	ef 92       	push	r14
    48c8:	ff 92       	push	r15
    48ca:	0f 93       	push	r16
    48cc:	1f 93       	push	r17
    48ce:	cf 93       	push	r28
    48d0:	df 93       	push	r29
    48d2:	eb 01       	movw	r28, r22
    48d4:	69 01       	movw	r12, r18
    48d6:	7a 01       	movw	r14, r20
	if (pdrv || !count) return RES_PARERR;
    48d8:	81 11       	cpse	r24, r1
    48da:	58 c0       	rjmp	.+176    	; 0x498c <disk_write+0xca>
    48dc:	01 15       	cp	r16, r1
    48de:	11 05       	cpc	r17, r1
    48e0:	09 f4       	brne	.+2      	; 0x48e4 <disk_write+0x22>
    48e2:	56 c0       	rjmp	.+172    	; 0x4990 <disk_write+0xce>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    48e4:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <Stat>
    48e8:	80 fd       	sbrc	r24, 0
    48ea:	54 c0       	rjmp	.+168    	; 0x4994 <disk_write+0xd2>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    48ec:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <Stat>
    48f0:	82 fd       	sbrc	r24, 2
    48f2:	52 c0       	rjmp	.+164    	; 0x4998 <disk_write+0xd6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    48f4:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <CardType>
    48f8:	83 fd       	sbrc	r24, 3
    48fa:	09 c0       	rjmp	.+18     	; 0x490e <disk_write+0x4c>
    48fc:	0b 2e       	mov	r0, r27
    48fe:	b9 e0       	ldi	r27, 0x09	; 9
    4900:	cc 0c       	add	r12, r12
    4902:	dd 1c       	adc	r13, r13
    4904:	ee 1c       	adc	r14, r14
    4906:	ff 1c       	adc	r15, r15
    4908:	ba 95       	dec	r27
    490a:	d1 f7       	brne	.-12     	; 0x4900 <disk_write+0x3e>
    490c:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
    490e:	01 30       	cpi	r16, 0x01	; 1
    4910:	11 05       	cpc	r17, r1
    4912:	99 f4       	brne	.+38     	; 0x493a <disk_write+0x78>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    4914:	b7 01       	movw	r22, r14
    4916:	a6 01       	movw	r20, r12
    4918:	88 e1       	ldi	r24, 0x18	; 24
    491a:	0e 94 58 22 	call	0x44b0	; 0x44b0 <send_cmd>
    491e:	81 11       	cpse	r24, r1
    4920:	2e c0       	rjmp	.+92     	; 0x497e <disk_write+0xbc>
			&& xmit_datablock(buff, 0xFE))
    4922:	6e ef       	ldi	r22, 0xFE	; 254
    4924:	ce 01       	movw	r24, r28
    4926:	0e 94 fe 22 	call	0x45fc	; 0x45fc <xmit_datablock>
    492a:	31 e0       	ldi	r19, 0x01	; 1
    492c:	20 e0       	ldi	r18, 0x00	; 0
    492e:	89 2b       	or	r24, r25
    4930:	09 f0       	breq	.+2      	; 0x4934 <disk_write+0x72>
    4932:	30 e0       	ldi	r19, 0x00	; 0
    4934:	03 2f       	mov	r16, r19
    4936:	12 2f       	mov	r17, r18
    4938:	22 c0       	rjmp	.+68     	; 0x497e <disk_write+0xbc>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    493a:	86 70       	andi	r24, 0x06	; 6
    493c:	31 f0       	breq	.+12     	; 0x494a <disk_write+0x88>
    493e:	a8 01       	movw	r20, r16
    4940:	60 e0       	ldi	r22, 0x00	; 0
    4942:	70 e0       	ldi	r23, 0x00	; 0
    4944:	87 e9       	ldi	r24, 0x97	; 151
    4946:	0e 94 58 22 	call	0x44b0	; 0x44b0 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    494a:	b7 01       	movw	r22, r14
    494c:	a6 01       	movw	r20, r12
    494e:	89 e1       	ldi	r24, 0x19	; 25
    4950:	0e 94 58 22 	call	0x44b0	; 0x44b0 <send_cmd>
    4954:	81 11       	cpse	r24, r1
    4956:	13 c0       	rjmp	.+38     	; 0x497e <disk_write+0xbc>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    4958:	6c ef       	ldi	r22, 0xFC	; 252
    495a:	ce 01       	movw	r24, r28
    495c:	0e 94 fe 22 	call	0x45fc	; 0x45fc <xmit_datablock>
    4960:	89 2b       	or	r24, r25
    4962:	21 f0       	breq	.+8      	; 0x496c <disk_write+0xaa>
				buff += 512;
    4964:	de 5f       	subi	r29, 0xFE	; 254
			} while (--count);
    4966:	01 50       	subi	r16, 0x01	; 1
    4968:	11 09       	sbc	r17, r1
    496a:	b1 f7       	brne	.-20     	; 0x4958 <disk_write+0x96>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    496c:	6d ef       	ldi	r22, 0xFD	; 253
    496e:	80 e0       	ldi	r24, 0x00	; 0
    4970:	90 e0       	ldi	r25, 0x00	; 0
    4972:	0e 94 fe 22 	call	0x45fc	; 0x45fc <xmit_datablock>
    4976:	89 2b       	or	r24, r25
    4978:	11 f4       	brne	.+4      	; 0x497e <disk_write+0xbc>
				count = 1;
    497a:	01 e0       	ldi	r16, 0x01	; 1
    497c:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	deselect();
    497e:	0e 94 3b 22 	call	0x4476	; 0x4476 <deselect>

	return count ? RES_ERROR : RES_OK;
    4982:	81 e0       	ldi	r24, 0x01	; 1
    4984:	01 2b       	or	r16, r17
    4986:	49 f4       	brne	.+18     	; 0x499a <disk_write+0xd8>
    4988:	80 e0       	ldi	r24, 0x00	; 0
    498a:	07 c0       	rjmp	.+14     	; 0x499a <disk_write+0xd8>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (pdrv || !count) return RES_PARERR;
    498c:	84 e0       	ldi	r24, 0x04	; 4
    498e:	05 c0       	rjmp	.+10     	; 0x499a <disk_write+0xd8>
    4990:	84 e0       	ldi	r24, 0x04	; 4
    4992:	03 c0       	rjmp	.+6      	; 0x499a <disk_write+0xd8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    4994:	83 e0       	ldi	r24, 0x03	; 3
    4996:	01 c0       	rjmp	.+2      	; 0x499a <disk_write+0xd8>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    4998:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    499a:	df 91       	pop	r29
    499c:	cf 91       	pop	r28
    499e:	1f 91       	pop	r17
    49a0:	0f 91       	pop	r16
    49a2:	ff 90       	pop	r15
    49a4:	ef 90       	pop	r14
    49a6:	df 90       	pop	r13
    49a8:	cf 90       	pop	r12
    49aa:	08 95       	ret

000049ac <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    49ac:	ef 92       	push	r14
    49ae:	ff 92       	push	r15
    49b0:	0f 93       	push	r16
    49b2:	1f 93       	push	r17
    49b4:	cf 93       	push	r28
    49b6:	df 93       	push	r29
    49b8:	cd b7       	in	r28, 0x3d	; 61
    49ba:	de b7       	in	r29, 0x3e	; 62
    49bc:	60 97       	sbiw	r28, 0x10	; 16
    49be:	0f b6       	in	r0, 0x3f	; 63
    49c0:	f8 94       	cli
    49c2:	de bf       	out	0x3e, r29	; 62
    49c4:	0f be       	out	0x3f, r0	; 63
    49c6:	cd bf       	out	0x3d, r28	; 61
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    49c8:	81 11       	cpse	r24, r1
    49ca:	94 c1       	rjmp	.+808    	; 0x4cf4 <disk_ioctl+0x348>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    49cc:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <Stat>
    49d0:	80 fd       	sbrc	r24, 0
    49d2:	92 c1       	rjmp	.+804    	; 0x4cf8 <disk_ioctl+0x34c>
    49d4:	8a 01       	movw	r16, r20

	switch (cmd) {
    49d6:	86 2f       	mov	r24, r22
    49d8:	90 e0       	ldi	r25, 0x00	; 0
    49da:	87 33       	cpi	r24, 0x37	; 55
    49dc:	91 05       	cpc	r25, r1
    49de:	08 f0       	brcs	.+2      	; 0x49e2 <disk_ioctl+0x36>
    49e0:	70 c1       	rjmp	.+736    	; 0x4cc2 <disk_ioctl+0x316>
    49e2:	fc 01       	movw	r30, r24
    49e4:	ec 5c       	subi	r30, 0xCC	; 204
    49e6:	ff 4f       	sbci	r31, 0xFF	; 255
    49e8:	0c 94 9e 2f 	jmp	0x5f3c	; 0x5f3c <__tablejump2__>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    49ec:	0e 94 40 22 	call	0x4480	; 0x4480 <select>
    49f0:	11 e0       	ldi	r17, 0x01	; 1
    49f2:	89 2b       	or	r24, r25
    49f4:	09 f4       	brne	.+2      	; 0x49f8 <disk_ioctl+0x4c>
    49f6:	7a c1       	rjmp	.+756    	; 0x4cec <disk_ioctl+0x340>
    49f8:	10 e0       	ldi	r17, 0x00	; 0
    49fa:	78 c1       	rjmp	.+752    	; 0x4cec <disk_ioctl+0x340>
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    49fc:	40 e0       	ldi	r20, 0x00	; 0
    49fe:	50 e0       	ldi	r21, 0x00	; 0
    4a00:	ba 01       	movw	r22, r20
    4a02:	89 e0       	ldi	r24, 0x09	; 9
    4a04:	0e 94 58 22 	call	0x44b0	; 0x44b0 <send_cmd>
    4a08:	81 11       	cpse	r24, r1
    4a0a:	5d c1       	rjmp	.+698    	; 0x4cc6 <disk_ioctl+0x31a>
    4a0c:	60 e1       	ldi	r22, 0x10	; 16
    4a0e:	70 e0       	ldi	r23, 0x00	; 0
    4a10:	ce 01       	movw	r24, r28
    4a12:	01 96       	adiw	r24, 0x01	; 1
    4a14:	0e 94 c1 22 	call	0x4582	; 0x4582 <rcvr_datablock>
    4a18:	89 2b       	or	r24, r25
    4a1a:	09 f4       	brne	.+2      	; 0x4a1e <disk_ioctl+0x72>
    4a1c:	56 c1       	rjmp	.+684    	; 0x4cca <disk_ioctl+0x31e>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    4a1e:	89 81       	ldd	r24, Y+1	; 0x01
    4a20:	82 95       	swap	r24
    4a22:	86 95       	lsr	r24
    4a24:	86 95       	lsr	r24
    4a26:	83 70       	andi	r24, 0x03	; 3
    4a28:	81 30       	cpi	r24, 0x01	; 1
    4a2a:	31 f5       	brne	.+76     	; 0x4a78 <disk_ioctl+0xcc>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
    4a2c:	29 85       	ldd	r18, Y+9	; 0x09
    4a2e:	30 e0       	ldi	r19, 0x00	; 0
    4a30:	32 2f       	mov	r19, r18
    4a32:	22 27       	eor	r18, r18
    4a34:	8a 85       	ldd	r24, Y+10	; 0x0a
    4a36:	28 0f       	add	r18, r24
    4a38:	31 1d       	adc	r19, r1
    4a3a:	88 85       	ldd	r24, Y+8	; 0x08
    4a3c:	8f 73       	andi	r24, 0x3F	; 63
    4a3e:	90 e0       	ldi	r25, 0x00	; 0
    4a40:	a0 e0       	ldi	r26, 0x00	; 0
    4a42:	b0 e0       	ldi	r27, 0x00	; 0
    4a44:	dc 01       	movw	r26, r24
    4a46:	99 27       	eor	r25, r25
    4a48:	88 27       	eor	r24, r24
    4a4a:	01 96       	adiw	r24, 0x01	; 1
    4a4c:	a1 1d       	adc	r26, r1
    4a4e:	b1 1d       	adc	r27, r1
    4a50:	82 0f       	add	r24, r18
    4a52:	93 1f       	adc	r25, r19
    4a54:	a1 1d       	adc	r26, r1
    4a56:	b1 1d       	adc	r27, r1
    4a58:	07 2e       	mov	r0, r23
    4a5a:	7a e0       	ldi	r23, 0x0A	; 10
    4a5c:	88 0f       	add	r24, r24
    4a5e:	99 1f       	adc	r25, r25
    4a60:	aa 1f       	adc	r26, r26
    4a62:	bb 1f       	adc	r27, r27
    4a64:	7a 95       	dec	r23
    4a66:	d1 f7       	brne	.-12     	; 0x4a5c <disk_ioctl+0xb0>
    4a68:	70 2d       	mov	r23, r0
    4a6a:	f8 01       	movw	r30, r16
    4a6c:	80 83       	st	Z, r24
    4a6e:	91 83       	std	Z+1, r25	; 0x01
    4a70:	a2 83       	std	Z+2, r26	; 0x02
    4a72:	b3 83       	std	Z+3, r27	; 0x03
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
			}
			res = RES_OK;
    4a74:	10 e0       	ldi	r17, 0x00	; 0
    4a76:	3a c1       	rjmp	.+628    	; 0x4cec <disk_ioctl+0x340>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
    4a78:	89 85       	ldd	r24, Y+9	; 0x09
    4a7a:	82 95       	swap	r24
    4a7c:	86 95       	lsr	r24
    4a7e:	86 95       	lsr	r24
    4a80:	83 70       	andi	r24, 0x03	; 3
    4a82:	28 85       	ldd	r18, Y+8	; 0x08
    4a84:	90 e0       	ldi	r25, 0x00	; 0
    4a86:	f4 e0       	ldi	r31, 0x04	; 4
    4a88:	2f 9f       	mul	r18, r31
    4a8a:	80 0d       	add	r24, r0
    4a8c:	91 1d       	adc	r25, r1
    4a8e:	11 24       	eor	r1, r1
    4a90:	9c 01       	movw	r18, r24
    4a92:	2f 5f       	subi	r18, 0xFF	; 255
    4a94:	3f 4f       	sbci	r19, 0xFF	; 255
    4a96:	8f 81       	ldd	r24, Y+7	; 0x07
    4a98:	83 70       	andi	r24, 0x03	; 3
    4a9a:	90 e0       	ldi	r25, 0x00	; 0
    4a9c:	98 2f       	mov	r25, r24
    4a9e:	88 27       	eor	r24, r24
    4aa0:	99 0f       	add	r25, r25
    4aa2:	99 0f       	add	r25, r25
    4aa4:	82 0f       	add	r24, r18
    4aa6:	93 1f       	adc	r25, r19
    4aa8:	a0 e0       	ldi	r26, 0x00	; 0
    4aaa:	b0 e0       	ldi	r27, 0x00	; 0
    4aac:	3e 81       	ldd	r19, Y+6	; 0x06
    4aae:	3f 70       	andi	r19, 0x0F	; 15
    4ab0:	2b 85       	ldd	r18, Y+11	; 0x0b
    4ab2:	22 1f       	adc	r18, r18
    4ab4:	22 27       	eor	r18, r18
    4ab6:	22 1f       	adc	r18, r18
    4ab8:	32 0f       	add	r19, r18
    4aba:	2a 85       	ldd	r18, Y+10	; 0x0a
    4abc:	23 70       	andi	r18, 0x03	; 3
    4abe:	22 0f       	add	r18, r18
    4ac0:	23 0f       	add	r18, r19
    4ac2:	27 50       	subi	r18, 0x07	; 7
    4ac4:	04 c0       	rjmp	.+8      	; 0x4ace <disk_ioctl+0x122>
    4ac6:	88 0f       	add	r24, r24
    4ac8:	99 1f       	adc	r25, r25
    4aca:	aa 1f       	adc	r26, r26
    4acc:	bb 1f       	adc	r27, r27
    4ace:	2a 95       	dec	r18
    4ad0:	d2 f7       	brpl	.-12     	; 0x4ac6 <disk_ioctl+0x11a>
    4ad2:	f8 01       	movw	r30, r16
    4ad4:	80 83       	st	Z, r24
    4ad6:	91 83       	std	Z+1, r25	; 0x01
    4ad8:	a2 83       	std	Z+2, r26	; 0x02
    4ada:	b3 83       	std	Z+3, r27	; 0x03
			}
			res = RES_OK;
    4adc:	10 e0       	ldi	r17, 0x00	; 0
    4ade:	06 c1       	rjmp	.+524    	; 0x4cec <disk_ioctl+0x340>
		}
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
    4ae0:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <CardType>
    4ae4:	82 ff       	sbrs	r24, 2
    4ae6:	33 c0       	rjmp	.+102    	; 0x4b4e <disk_ioctl+0x1a2>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    4ae8:	40 e0       	ldi	r20, 0x00	; 0
    4aea:	50 e0       	ldi	r21, 0x00	; 0
    4aec:	ba 01       	movw	r22, r20
    4aee:	8d e8       	ldi	r24, 0x8D	; 141
    4af0:	0e 94 58 22 	call	0x44b0	; 0x44b0 <send_cmd>
    4af4:	81 11       	cpse	r24, r1
    4af6:	eb c0       	rjmp	.+470    	; 0x4cce <disk_ioctl+0x322>
				spi_rwSPI(0xFF);
    4af8:	8f ef       	ldi	r24, 0xFF	; 255
    4afa:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    4afe:	60 e1       	ldi	r22, 0x10	; 16
    4b00:	70 e0       	ldi	r23, 0x00	; 0
    4b02:	ce 01       	movw	r24, r28
    4b04:	01 96       	adiw	r24, 0x01	; 1
    4b06:	0e 94 c1 22 	call	0x4582	; 0x4582 <rcvr_datablock>
    4b0a:	89 2b       	or	r24, r25
    4b0c:	09 f4       	brne	.+2      	; 0x4b10 <disk_ioctl+0x164>
    4b0e:	e1 c0       	rjmp	.+450    	; 0x4cd2 <disk_ioctl+0x326>
    4b10:	0f 2e       	mov	r0, r31
    4b12:	f0 e3       	ldi	r31, 0x30	; 48
    4b14:	ff 2e       	mov	r15, r31
    4b16:	f0 2d       	mov	r31, r0
					for (n = 64 - 16; n; n--) spi_rwSPI(0xFF);	/* Purge trailing data */
    4b18:	8f ef       	ldi	r24, 0xFF	; 255
    4b1a:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
    4b1e:	fa 94       	dec	r15
    4b20:	f1 10       	cpse	r15, r1
    4b22:	fa cf       	rjmp	.-12     	; 0x4b18 <disk_ioctl+0x16c>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
    4b24:	2b 85       	ldd	r18, Y+11	; 0x0b
    4b26:	22 95       	swap	r18
    4b28:	2f 70       	andi	r18, 0x0F	; 15
    4b2a:	80 e1       	ldi	r24, 0x10	; 16
    4b2c:	90 e0       	ldi	r25, 0x00	; 0
    4b2e:	a0 e0       	ldi	r26, 0x00	; 0
    4b30:	b0 e0       	ldi	r27, 0x00	; 0
    4b32:	04 c0       	rjmp	.+8      	; 0x4b3c <disk_ioctl+0x190>
    4b34:	88 0f       	add	r24, r24
    4b36:	99 1f       	adc	r25, r25
    4b38:	aa 1f       	adc	r26, r26
    4b3a:	bb 1f       	adc	r27, r27
    4b3c:	2a 95       	dec	r18
    4b3e:	d2 f7       	brpl	.-12     	; 0x4b34 <disk_ioctl+0x188>
    4b40:	f8 01       	movw	r30, r16
    4b42:	80 83       	st	Z, r24
    4b44:	91 83       	std	Z+1, r25	; 0x01
    4b46:	a2 83       	std	Z+2, r26	; 0x02
    4b48:	b3 83       	std	Z+3, r27	; 0x03
					res = RES_OK;
    4b4a:	10 e0       	ldi	r17, 0x00	; 0
    4b4c:	cf c0       	rjmp	.+414    	; 0x4cec <disk_ioctl+0x340>
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    4b4e:	40 e0       	ldi	r20, 0x00	; 0
    4b50:	50 e0       	ldi	r21, 0x00	; 0
    4b52:	ba 01       	movw	r22, r20
    4b54:	89 e0       	ldi	r24, 0x09	; 9
    4b56:	0e 94 58 22 	call	0x44b0	; 0x44b0 <send_cmd>
    4b5a:	81 11       	cpse	r24, r1
    4b5c:	bc c0       	rjmp	.+376    	; 0x4cd6 <disk_ioctl+0x32a>
    4b5e:	60 e1       	ldi	r22, 0x10	; 16
    4b60:	70 e0       	ldi	r23, 0x00	; 0
    4b62:	ce 01       	movw	r24, r28
    4b64:	01 96       	adiw	r24, 0x01	; 1
    4b66:	0e 94 c1 22 	call	0x4582	; 0x4582 <rcvr_datablock>
    4b6a:	89 2b       	or	r24, r25
    4b6c:	09 f4       	brne	.+2      	; 0x4b70 <disk_ioctl+0x1c4>
    4b6e:	b5 c0       	rjmp	.+362    	; 0x4cda <disk_ioctl+0x32e>
				if (CardType & CT_SD1) {	/* SDv1 */
    4b70:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <CardType>
    4b74:	81 ff       	sbrs	r24, 1
    4b76:	20 c0       	rjmp	.+64     	; 0x4bb8 <disk_ioctl+0x20c>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    4b78:	2b 85       	ldd	r18, Y+11	; 0x0b
    4b7a:	2f 73       	andi	r18, 0x3F	; 63
    4b7c:	8c 85       	ldd	r24, Y+12	; 0x0c
    4b7e:	88 1f       	adc	r24, r24
    4b80:	88 27       	eor	r24, r24
    4b82:	88 1f       	adc	r24, r24
    4b84:	90 e0       	ldi	r25, 0x00	; 0
    4b86:	01 96       	adiw	r24, 0x01	; 1
    4b88:	82 0f       	add	r24, r18
    4b8a:	91 1d       	adc	r25, r1
    4b8c:	82 0f       	add	r24, r18
    4b8e:	91 1d       	adc	r25, r1
    4b90:	2e 85       	ldd	r18, Y+14	; 0x0e
    4b92:	22 95       	swap	r18
    4b94:	26 95       	lsr	r18
    4b96:	26 95       	lsr	r18
    4b98:	23 70       	andi	r18, 0x03	; 3
    4b9a:	21 50       	subi	r18, 0x01	; 1
    4b9c:	02 c0       	rjmp	.+4      	; 0x4ba2 <disk_ioctl+0x1f6>
    4b9e:	88 0f       	add	r24, r24
    4ba0:	99 1f       	adc	r25, r25
    4ba2:	2a 95       	dec	r18
    4ba4:	e2 f7       	brpl	.-8      	; 0x4b9e <disk_ioctl+0x1f2>
    4ba6:	a0 e0       	ldi	r26, 0x00	; 0
    4ba8:	b0 e0       	ldi	r27, 0x00	; 0
    4baa:	f8 01       	movw	r30, r16
    4bac:	80 83       	st	Z, r24
    4bae:	91 83       	std	Z+1, r25	; 0x01
    4bb0:	a2 83       	std	Z+2, r26	; 0x02
    4bb2:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
    4bb4:	10 e0       	ldi	r17, 0x00	; 0
    4bb6:	9a c0       	rjmp	.+308    	; 0x4cec <disk_ioctl+0x340>
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
				if (CardType & CT_SD1) {	/* SDv1 */
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    4bb8:	8c 85       	ldd	r24, Y+12	; 0x0c
    4bba:	28 2f       	mov	r18, r24
    4bbc:	23 70       	andi	r18, 0x03	; 3
    4bbe:	82 95       	swap	r24
    4bc0:	86 95       	lsr	r24
    4bc2:	87 70       	andi	r24, 0x07	; 7
    4bc4:	90 e0       	ldi	r25, 0x00	; 0
    4bc6:	f8 e0       	ldi	r31, 0x08	; 8
    4bc8:	2f 9f       	mul	r18, r31
    4bca:	80 0d       	add	r24, r0
    4bcc:	91 1d       	adc	r25, r1
    4bce:	11 24       	eor	r1, r1
    4bd0:	01 96       	adiw	r24, 0x01	; 1
    4bd2:	2b 85       	ldd	r18, Y+11	; 0x0b
    4bd4:	2c 77       	andi	r18, 0x7C	; 124
    4bd6:	30 e0       	ldi	r19, 0x00	; 0
    4bd8:	35 95       	asr	r19
    4bda:	27 95       	ror	r18
    4bdc:	35 95       	asr	r19
    4bde:	27 95       	ror	r18
    4be0:	2f 5f       	subi	r18, 0xFF	; 255
    4be2:	3f 4f       	sbci	r19, 0xFF	; 255
    4be4:	82 9f       	mul	r24, r18
    4be6:	a0 01       	movw	r20, r0
    4be8:	83 9f       	mul	r24, r19
    4bea:	50 0d       	add	r21, r0
    4bec:	92 9f       	mul	r25, r18
    4bee:	50 0d       	add	r21, r0
    4bf0:	11 24       	eor	r1, r1
    4bf2:	ca 01       	movw	r24, r20
    4bf4:	a0 e0       	ldi	r26, 0x00	; 0
    4bf6:	b0 e0       	ldi	r27, 0x00	; 0
    4bf8:	f8 01       	movw	r30, r16
    4bfa:	80 83       	st	Z, r24
    4bfc:	91 83       	std	Z+1, r25	; 0x01
    4bfe:	a2 83       	std	Z+2, r26	; 0x02
    4c00:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
    4c02:	10 e0       	ldi	r17, 0x00	; 0
    4c04:	73 c0       	rjmp	.+230    	; 0x4cec <disk_ioctl+0x340>
		break;

	/* Following commands are never used by FatFs module */

	case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
		*ptr = CardType;
    4c06:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <CardType>
    4c0a:	fa 01       	movw	r30, r20
    4c0c:	80 83       	st	Z, r24
		res = RES_OK;
    4c0e:	10 e0       	ldi	r17, 0x00	; 0
		break;
    4c10:	6d c0       	rjmp	.+218    	; 0x4cec <disk_ioctl+0x340>

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
    4c12:	40 e0       	ldi	r20, 0x00	; 0
    4c14:	50 e0       	ldi	r21, 0x00	; 0
    4c16:	ba 01       	movw	r22, r20
    4c18:	89 e0       	ldi	r24, 0x09	; 9
    4c1a:	0e 94 58 22 	call	0x44b0	; 0x44b0 <send_cmd>
    4c1e:	81 11       	cpse	r24, r1
    4c20:	5e c0       	rjmp	.+188    	; 0x4cde <disk_ioctl+0x332>
			&& rcvr_datablock(ptr, 16))
    4c22:	60 e1       	ldi	r22, 0x10	; 16
    4c24:	70 e0       	ldi	r23, 0x00	; 0
    4c26:	c8 01       	movw	r24, r16
    4c28:	0e 94 c1 22 	call	0x4582	; 0x4582 <rcvr_datablock>

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	switch (cmd) {
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    4c2c:	11 e0       	ldi	r17, 0x01	; 1
    4c2e:	89 2b       	or	r24, r25
    4c30:	09 f4       	brne	.+2      	; 0x4c34 <disk_ioctl+0x288>
    4c32:	5c c0       	rjmp	.+184    	; 0x4cec <disk_ioctl+0x340>
    4c34:	10 e0       	ldi	r17, 0x00	; 0
    4c36:	5a c0       	rjmp	.+180    	; 0x4cec <disk_ioctl+0x340>
			&& rcvr_datablock(ptr, 16))
			res = RES_OK;
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0		/* READ_CID */
    4c38:	40 e0       	ldi	r20, 0x00	; 0
    4c3a:	50 e0       	ldi	r21, 0x00	; 0
    4c3c:	ba 01       	movw	r22, r20
    4c3e:	8a e0       	ldi	r24, 0x0A	; 10
    4c40:	0e 94 58 22 	call	0x44b0	; 0x44b0 <send_cmd>
    4c44:	81 11       	cpse	r24, r1
    4c46:	4d c0       	rjmp	.+154    	; 0x4ce2 <disk_ioctl+0x336>
			&& rcvr_datablock(ptr, 16))
    4c48:	60 e1       	ldi	r22, 0x10	; 16
    4c4a:	70 e0       	ldi	r23, 0x00	; 0
    4c4c:	c8 01       	movw	r24, r16
    4c4e:	0e 94 c1 22 	call	0x4582	; 0x4582 <rcvr_datablock>

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	switch (cmd) {
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    4c52:	11 e0       	ldi	r17, 0x01	; 1
    4c54:	89 2b       	or	r24, r25
    4c56:	09 f4       	brne	.+2      	; 0x4c5a <disk_ioctl+0x2ae>
    4c58:	49 c0       	rjmp	.+146    	; 0x4cec <disk_ioctl+0x340>
    4c5a:	10 e0       	ldi	r17, 0x00	; 0
    4c5c:	47 c0       	rjmp	.+142    	; 0x4cec <disk_ioctl+0x340>
			&& rcvr_datablock(ptr, 16))
			res = RES_OK;
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    4c5e:	40 e0       	ldi	r20, 0x00	; 0
    4c60:	50 e0       	ldi	r21, 0x00	; 0
    4c62:	ba 01       	movw	r22, r20
    4c64:	8a e3       	ldi	r24, 0x3A	; 58
    4c66:	0e 94 58 22 	call	0x44b0	; 0x44b0 <send_cmd>
    4c6a:	81 11       	cpse	r24, r1
    4c6c:	3c c0       	rjmp	.+120    	; 0x4ce6 <disk_ioctl+0x33a>
    4c6e:	78 01       	movw	r14, r16
    4c70:	0c 5f       	subi	r16, 0xFC	; 252
    4c72:	1f 4f       	sbci	r17, 0xFF	; 255
			for (n = 4; n; n--) *ptr++ = spi_rwSPI(0xFF);
    4c74:	8f ef       	ldi	r24, 0xFF	; 255
    4c76:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
    4c7a:	f7 01       	movw	r30, r14
    4c7c:	81 93       	st	Z+, r24
    4c7e:	7f 01       	movw	r14, r30
    4c80:	0e 17       	cp	r16, r30
    4c82:	1f 07       	cpc	r17, r31
    4c84:	b9 f7       	brne	.-18     	; 0x4c74 <disk_ioctl+0x2c8>
			res = RES_OK;
    4c86:	10 e0       	ldi	r17, 0x00	; 0
    4c88:	31 c0       	rjmp	.+98     	; 0x4cec <disk_ioctl+0x340>
		}
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    4c8a:	40 e0       	ldi	r20, 0x00	; 0
    4c8c:	50 e0       	ldi	r21, 0x00	; 0
    4c8e:	ba 01       	movw	r22, r20
    4c90:	8d e8       	ldi	r24, 0x8D	; 141
    4c92:	0e 94 58 22 	call	0x44b0	; 0x44b0 <send_cmd>
    4c96:	81 11       	cpse	r24, r1
    4c98:	28 c0       	rjmp	.+80     	; 0x4cea <disk_ioctl+0x33e>
			spi_rwSPI(0xFF);
    4c9a:	8f ef       	ldi	r24, 0xFF	; 255
    4c9c:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
			if (rcvr_datablock(ptr, 64))
    4ca0:	60 e4       	ldi	r22, 0x40	; 64
    4ca2:	70 e0       	ldi	r23, 0x00	; 0
    4ca4:	c8 01       	movw	r24, r16
    4ca6:	0e 94 c1 22 	call	0x4582	; 0x4582 <rcvr_datablock>

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	switch (cmd) {
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    4caa:	11 e0       	ldi	r17, 0x01	; 1
    4cac:	89 2b       	or	r24, r25
    4cae:	f1 f0       	breq	.+60     	; 0x4cec <disk_ioctl+0x340>
    4cb0:	10 e0       	ldi	r17, 0x00	; 0
    4cb2:	1c c0       	rjmp	.+56     	; 0x4cec <disk_ioctl+0x340>
				res = RES_OK;
		}
		break;

	case CTRL_POWER_OFF :	/* Power off */
		Stat |= STA_NOINIT;
    4cb4:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <Stat>
    4cb8:	81 60       	ori	r24, 0x01	; 1
    4cba:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <Stat>
		res = RES_OK;
    4cbe:	10 e0       	ldi	r17, 0x00	; 0
		break;
    4cc0:	15 c0       	rjmp	.+42     	; 0x4cec <disk_ioctl+0x340>

	default:
		res = RES_PARERR;
    4cc2:	14 e0       	ldi	r17, 0x04	; 4
    4cc4:	13 c0       	rjmp	.+38     	; 0x4cec <disk_ioctl+0x340>
	DWORD csize;


	if (pdrv) return RES_PARERR;

	res = RES_ERROR;
    4cc6:	11 e0       	ldi	r17, 0x01	; 1
    4cc8:	11 c0       	rjmp	.+34     	; 0x4cec <disk_ioctl+0x340>
    4cca:	11 e0       	ldi	r17, 0x01	; 1
    4ccc:	0f c0       	rjmp	.+30     	; 0x4cec <disk_ioctl+0x340>
    4cce:	11 e0       	ldi	r17, 0x01	; 1
    4cd0:	0d c0       	rjmp	.+26     	; 0x4cec <disk_ioctl+0x340>
    4cd2:	11 e0       	ldi	r17, 0x01	; 1
    4cd4:	0b c0       	rjmp	.+22     	; 0x4cec <disk_ioctl+0x340>
    4cd6:	11 e0       	ldi	r17, 0x01	; 1
    4cd8:	09 c0       	rjmp	.+18     	; 0x4cec <disk_ioctl+0x340>
    4cda:	11 e0       	ldi	r17, 0x01	; 1
    4cdc:	07 c0       	rjmp	.+14     	; 0x4cec <disk_ioctl+0x340>
    4cde:	11 e0       	ldi	r17, 0x01	; 1
    4ce0:	05 c0       	rjmp	.+10     	; 0x4cec <disk_ioctl+0x340>
    4ce2:	11 e0       	ldi	r17, 0x01	; 1
    4ce4:	03 c0       	rjmp	.+6      	; 0x4cec <disk_ioctl+0x340>
    4ce6:	11 e0       	ldi	r17, 0x01	; 1
    4ce8:	01 c0       	rjmp	.+2      	; 0x4cec <disk_ioctl+0x340>
    4cea:	11 e0       	ldi	r17, 0x01	; 1

	default:
		res = RES_PARERR;
	}

	deselect();
    4cec:	0e 94 3b 22 	call	0x4476	; 0x4476 <deselect>

	return res;
    4cf0:	81 2f       	mov	r24, r17
    4cf2:	03 c0       	rjmp	.+6      	; 0x4cfa <disk_ioctl+0x34e>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	DWORD csize;


	if (pdrv) return RES_PARERR;
    4cf4:	84 e0       	ldi	r24, 0x04	; 4
    4cf6:	01 c0       	rjmp	.+2      	; 0x4cfa <disk_ioctl+0x34e>

	res = RES_ERROR;

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    4cf8:	83 e0       	ldi	r24, 0x03	; 3
	}

	deselect();

	return res;
}
    4cfa:	60 96       	adiw	r28, 0x10	; 16
    4cfc:	0f b6       	in	r0, 0x3f	; 63
    4cfe:	f8 94       	cli
    4d00:	de bf       	out	0x3e, r29	; 62
    4d02:	0f be       	out	0x3f, r0	; 63
    4d04:	cd bf       	out	0x3d, r28	; 61
    4d06:	df 91       	pop	r29
    4d08:	cf 91       	pop	r28
    4d0a:	1f 91       	pop	r17
    4d0c:	0f 91       	pop	r16
    4d0e:	ff 90       	pop	r15
    4d10:	ef 90       	pop	r14
    4d12:	08 95       	ret

00004d14 <hih8120_measure>:

float hih8120_humidity = 1;
float hih8120_temperature_C = 1;

void hih8120_measure()
{
    4d14:	0f 93       	push	r16
    4d16:	1f 93       	push	r17
    4d18:	cf 93       	push	r28
    4d1a:	df 93       	push	r29
	i2c_start_wait(0x27 << 1);
    4d1c:	8e e4       	ldi	r24, 0x4E	; 78
    4d1e:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <i2c_start_wait>
	i2c_write((uint8_t) 0x01);
    4d22:	81 e0       	ldi	r24, 0x01	; 1
    4d24:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <i2c_write>
	i2c_stop();
    4d28:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <i2c_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4d2c:	2f ef       	ldi	r18, 0xFF	; 255
    4d2e:	80 e7       	ldi	r24, 0x70	; 112
    4d30:	92 e0       	ldi	r25, 0x02	; 2
    4d32:	21 50       	subi	r18, 0x01	; 1
    4d34:	80 40       	sbci	r24, 0x00	; 0
    4d36:	90 40       	sbci	r25, 0x00	; 0
    4d38:	e1 f7       	brne	.-8      	; 0x4d32 <hih8120_measure+0x1e>
    4d3a:	00 c0       	rjmp	.+0      	; 0x4d3c <hih8120_measure+0x28>
    4d3c:	00 00       	nop
	
	_delay_ms(100);
	
	i2c_start_wait((0x27 << 1) | I2C_READ);
    4d3e:	8f e4       	ldi	r24, 0x4F	; 79
    4d40:	0e 94 05 27 	call	0x4e0a	; 0x4e0a <i2c_start_wait>
	
	uint8_t humidity_hi = i2c_readAck();
    4d44:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <i2c_readAck>
    4d48:	18 2f       	mov	r17, r24
	uint8_t humidity_lo = i2c_readAck();
    4d4a:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <i2c_readAck>
    4d4e:	d8 2f       	mov	r29, r24
	uint8_t temp_hi = i2c_readAck();
    4d50:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <i2c_readAck>
    4d54:	08 2f       	mov	r16, r24
	uint8_t temp_lo = i2c_readNak();
    4d56:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <i2c_readNak>
    4d5a:	c8 2f       	mov	r28, r24
	
	i2c_stop();
    4d5c:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <i2c_stop>
	
	// Calculate Relative Humidity
	hih8120_humidity = (float)((((humidity_hi & 0x3f) << 8) | humidity_lo) / ((pow(2,14) - 2)) * 100);
    4d60:	1f 73       	andi	r17, 0x3F	; 63
    4d62:	6d 2f       	mov	r22, r29
    4d64:	70 e0       	ldi	r23, 0x00	; 0
    4d66:	71 2b       	or	r23, r17
    4d68:	07 2e       	mov	r0, r23
    4d6a:	00 0c       	add	r0, r0
    4d6c:	88 0b       	sbc	r24, r24
    4d6e:	99 0b       	sbc	r25, r25
    4d70:	0e 94 fc 2d 	call	0x5bf8	; 0x5bf8 <__floatsisf>
    4d74:	20 e0       	ldi	r18, 0x00	; 0
    4d76:	38 ef       	ldi	r19, 0xF8	; 248
    4d78:	4f e7       	ldi	r20, 0x7F	; 127
    4d7a:	56 e4       	ldi	r21, 0x46	; 70
    4d7c:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__divsf3>
    4d80:	20 e0       	ldi	r18, 0x00	; 0
    4d82:	30 e0       	ldi	r19, 0x00	; 0
    4d84:	48 ec       	ldi	r20, 0xC8	; 200
    4d86:	52 e4       	ldi	r21, 0x42	; 66
    4d88:	0e 94 ff 2e 	call	0x5dfe	; 0x5dfe <__mulsf3>
    4d8c:	60 93 2d 01 	sts	0x012D, r22	; 0x80012d <hih8120_humidity>
    4d90:	70 93 2e 01 	sts	0x012E, r23	; 0x80012e <hih8120_humidity+0x1>
    4d94:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <hih8120_humidity+0x2>
    4d98:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <hih8120_humidity+0x3>

	// Calculate Temperature
	hih8120_temperature_C = (float) ((((temp_hi << 6) + (temp_lo >> 2)) / (pow(2, 14) - 2)) * 165 - 40);
    4d9c:	c6 95       	lsr	r28
    4d9e:	c6 95       	lsr	r28
    4da0:	6c 2f       	mov	r22, r28
    4da2:	70 e0       	ldi	r23, 0x00	; 0
    4da4:	20 e4       	ldi	r18, 0x40	; 64
    4da6:	02 9f       	mul	r16, r18
    4da8:	60 0d       	add	r22, r0
    4daa:	71 1d       	adc	r23, r1
    4dac:	11 24       	eor	r1, r1
    4dae:	07 2e       	mov	r0, r23
    4db0:	00 0c       	add	r0, r0
    4db2:	88 0b       	sbc	r24, r24
    4db4:	99 0b       	sbc	r25, r25
    4db6:	0e 94 fc 2d 	call	0x5bf8	; 0x5bf8 <__floatsisf>
    4dba:	20 e0       	ldi	r18, 0x00	; 0
    4dbc:	38 ef       	ldi	r19, 0xF8	; 248
    4dbe:	4f e7       	ldi	r20, 0x7F	; 127
    4dc0:	56 e4       	ldi	r21, 0x46	; 70
    4dc2:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__divsf3>
    4dc6:	20 e0       	ldi	r18, 0x00	; 0
    4dc8:	30 e0       	ldi	r19, 0x00	; 0
    4dca:	45 e2       	ldi	r20, 0x25	; 37
    4dcc:	53 e4       	ldi	r21, 0x43	; 67
    4dce:	0e 94 ff 2e 	call	0x5dfe	; 0x5dfe <__mulsf3>
    4dd2:	20 e0       	ldi	r18, 0x00	; 0
    4dd4:	30 e0       	ldi	r19, 0x00	; 0
    4dd6:	40 e2       	ldi	r20, 0x20	; 32
    4dd8:	52 e4       	ldi	r21, 0x42	; 66
    4dda:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <__subsf3>
    4dde:	60 93 29 01 	sts	0x0129, r22	; 0x800129 <hih8120_temperature_C>
    4de2:	70 93 2a 01 	sts	0x012A, r23	; 0x80012a <hih8120_temperature_C+0x1>
    4de6:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <hih8120_temperature_C+0x2>
    4dea:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <hih8120_temperature_C+0x3>
}
    4dee:	df 91       	pop	r29
    4df0:	cf 91       	pop	r28
    4df2:	1f 91       	pop	r17
    4df4:	0f 91       	pop	r16
    4df6:	08 95       	ret

00004df8 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    4df8:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    4dfc:	88 e4       	ldi	r24, 0x48	; 72
    4dfe:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    4e02:	84 e0       	ldi	r24, 0x04	; 4
    4e04:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    4e08:	08 95       	ret

00004e0a <i2c_start_wait>:
    4e0a:	cf 93       	push	r28
    4e0c:	df 93       	push	r29
    4e0e:	ec eb       	ldi	r30, 0xBC	; 188
    4e10:	f0 e0       	ldi	r31, 0x00	; 0
    4e12:	24 ea       	ldi	r18, 0xA4	; 164
    4e14:	a9 eb       	ldi	r26, 0xB9	; 185
    4e16:	b0 e0       	ldi	r27, 0x00	; 0
    4e18:	cb eb       	ldi	r28, 0xBB	; 187
    4e1a:	d0 e0       	ldi	r29, 0x00	; 0
    4e1c:	34 e8       	ldi	r19, 0x84	; 132
    4e1e:	44 e9       	ldi	r20, 0x94	; 148
    4e20:	20 83       	st	Z, r18
    4e22:	90 81       	ld	r25, Z
    4e24:	99 23       	and	r25, r25
    4e26:	ec f7       	brge	.-6      	; 0x4e22 <i2c_start_wait+0x18>
    4e28:	9c 91       	ld	r25, X
    4e2a:	98 7f       	andi	r25, 0xF8	; 248
    4e2c:	98 30       	cpi	r25, 0x08	; 8
    4e2e:	11 f0       	breq	.+4      	; 0x4e34 <i2c_start_wait+0x2a>
    4e30:	90 31       	cpi	r25, 0x10	; 16
    4e32:	b1 f7       	brne	.-20     	; 0x4e20 <i2c_start_wait+0x16>
    4e34:	88 83       	st	Y, r24
    4e36:	30 83       	st	Z, r19
    4e38:	90 81       	ld	r25, Z
    4e3a:	99 23       	and	r25, r25
    4e3c:	ec f7       	brge	.-6      	; 0x4e38 <i2c_start_wait+0x2e>
    4e3e:	9c 91       	ld	r25, X
    4e40:	98 7f       	andi	r25, 0xF8	; 248
    4e42:	90 32       	cpi	r25, 0x20	; 32
    4e44:	11 f0       	breq	.+4      	; 0x4e4a <i2c_start_wait+0x40>
    4e46:	98 35       	cpi	r25, 0x58	; 88
    4e48:	29 f4       	brne	.+10     	; 0x4e54 <i2c_start_wait+0x4a>
    4e4a:	40 83       	st	Z, r20
    4e4c:	90 81       	ld	r25, Z
    4e4e:	94 fd       	sbrc	r25, 4
    4e50:	fd cf       	rjmp	.-6      	; 0x4e4c <i2c_start_wait+0x42>
    4e52:	e6 cf       	rjmp	.-52     	; 0x4e20 <i2c_start_wait+0x16>
    4e54:	df 91       	pop	r29
    4e56:	cf 91       	pop	r28
    4e58:	08 95       	ret

00004e5a <rtc_I2C_Start>:

void rtc_I2C_Start()
{
	TWCR = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));
    4e5a:	84 ea       	ldi	r24, 0xA4	; 164
    4e5c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!(TWCR & (1<<TWINT)));
    4e60:	ec eb       	ldi	r30, 0xBC	; 188
    4e62:	f0 e0       	ldi	r31, 0x00	; 0
    4e64:	80 81       	ld	r24, Z
    4e66:	88 23       	and	r24, r24
    4e68:	ec f7       	brge	.-6      	; 0x4e64 <rtc_I2C_Start+0xa>
}
    4e6a:	08 95       	ret

00004e6c <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    4e6c:	84 e9       	ldi	r24, 0x94	; 148
    4e6e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    4e72:	ec eb       	ldi	r30, 0xBC	; 188
    4e74:	f0 e0       	ldi	r31, 0x00	; 0
    4e76:	80 81       	ld	r24, Z
    4e78:	84 fd       	sbrc	r24, 4
    4e7a:	fd cf       	rjmp	.-6      	; 0x4e76 <i2c_stop+0xa>

}/* i2c_stop */
    4e7c:	08 95       	ret

00004e7e <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    4e7e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    4e82:	84 e8       	ldi	r24, 0x84	; 132
    4e84:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    4e88:	ec eb       	ldi	r30, 0xBC	; 188
    4e8a:	f0 e0       	ldi	r31, 0x00	; 0
    4e8c:	80 81       	ld	r24, Z
    4e8e:	88 23       	and	r24, r24
    4e90:	ec f7       	brge	.-6      	; 0x4e8c <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    4e92:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    4e96:	98 7f       	andi	r25, 0xF8	; 248
    4e98:	81 e0       	ldi	r24, 0x01	; 1
    4e9a:	98 32       	cpi	r25, 0x28	; 40
    4e9c:	09 f4       	brne	.+2      	; 0x4ea0 <i2c_write+0x22>
    4e9e:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    4ea0:	08 95       	ret

00004ea2 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    4ea2:	84 ec       	ldi	r24, 0xC4	; 196
    4ea4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));    
    4ea8:	ec eb       	ldi	r30, 0xBC	; 188
    4eaa:	f0 e0       	ldi	r31, 0x00	; 0
    4eac:	80 81       	ld	r24, Z
    4eae:	88 23       	and	r24, r24
    4eb0:	ec f7       	brge	.-6      	; 0x4eac <i2c_readAck+0xa>

    return TWDR;
    4eb2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readAck */
    4eb6:	08 95       	ret

00004eb8 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    4eb8:	84 e8       	ldi	r24, 0x84	; 132
    4eba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
    4ebe:	ec eb       	ldi	r30, 0xBC	; 188
    4ec0:	f0 e0       	ldi	r31, 0x00	; 0
    4ec2:	80 81       	ld	r24, Z
    4ec4:	88 23       	and	r24, r24
    4ec6:	ec f7       	brge	.-6      	; 0x4ec2 <i2c_readNak+0xa>
	
    return TWDR;
    4ec8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readNak */
    4ecc:	08 95       	ret

00004ece <RTC_SetDateTime>:
{
	return ((num/10 * 16) + (num % 10));
}

void RTC_SetDateTime(rtc_t *rtc)
{
    4ece:	0f 93       	push	r16
    4ed0:	1f 93       	push	r17
    4ed2:	cf 93       	push	r28
    4ed4:	8c 01       	movw	r16, r24
    rtc_I2C_Start();                          // Start I2C communication
    4ed6:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <rtc_I2C_Start>
	
	//i2c_write(0x00);
	//i2c_write(0x80);
    i2c_write(C_Ds1307WriteMode_U8);      // connect to DS1307 by sending its ID on I2c Bus
    4eda:	80 ed       	ldi	r24, 0xD0	; 208
    4edc:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <i2c_write>
    i2c_write(C_Ds1307SecondRegAddress_U8); // Request sec RAM address at 00H
    4ee0:	80 e0       	ldi	r24, 0x00	; 0
    4ee2:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <i2c_write>

    i2c_write(dec2bcd(rtc->sec));                    // Write sec from RAM address 00H
    4ee6:	f8 01       	movw	r30, r16
    4ee8:	80 81       	ld	r24, Z
    4eea:	cd ec       	ldi	r28, 0xCD	; 205
    4eec:	8c 9f       	mul	r24, r28
    4eee:	91 2d       	mov	r25, r1
    4ef0:	11 24       	eor	r1, r1
    4ef2:	96 95       	lsr	r25
    4ef4:	96 95       	lsr	r25
    4ef6:	96 95       	lsr	r25
    4ef8:	39 2f       	mov	r19, r25
    4efa:	33 0f       	add	r19, r19
    4efc:	23 2f       	mov	r18, r19
    4efe:	22 0f       	add	r18, r18
    4f00:	22 0f       	add	r18, r18
    4f02:	23 0f       	add	r18, r19
    4f04:	82 1b       	sub	r24, r18
    4f06:	f0 e1       	ldi	r31, 0x10	; 16
    4f08:	9f 9f       	mul	r25, r31
    4f0a:	80 0d       	add	r24, r0
    4f0c:	11 24       	eor	r1, r1
    4f0e:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <i2c_write>
    i2c_write(dec2bcd(rtc->min));                    // Write min from RAM address 01H
    4f12:	f8 01       	movw	r30, r16
    4f14:	81 81       	ldd	r24, Z+1	; 0x01
    4f16:	8c 9f       	mul	r24, r28
    4f18:	91 2d       	mov	r25, r1
    4f1a:	11 24       	eor	r1, r1
    4f1c:	96 95       	lsr	r25
    4f1e:	96 95       	lsr	r25
    4f20:	96 95       	lsr	r25
    4f22:	39 2f       	mov	r19, r25
    4f24:	33 0f       	add	r19, r19
    4f26:	23 2f       	mov	r18, r19
    4f28:	22 0f       	add	r18, r18
    4f2a:	22 0f       	add	r18, r18
    4f2c:	23 0f       	add	r18, r19
    4f2e:	82 1b       	sub	r24, r18
    4f30:	f0 e1       	ldi	r31, 0x10	; 16
    4f32:	9f 9f       	mul	r25, r31
    4f34:	80 0d       	add	r24, r0
    4f36:	11 24       	eor	r1, r1
    4f38:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <i2c_write>
    i2c_write(dec2bcd(rtc->hour));                    // Write hour from RAM address 02H
    4f3c:	f8 01       	movw	r30, r16
    4f3e:	82 81       	ldd	r24, Z+2	; 0x02
    4f40:	8c 9f       	mul	r24, r28
    4f42:	91 2d       	mov	r25, r1
    4f44:	11 24       	eor	r1, r1
    4f46:	96 95       	lsr	r25
    4f48:	96 95       	lsr	r25
    4f4a:	96 95       	lsr	r25
    4f4c:	39 2f       	mov	r19, r25
    4f4e:	33 0f       	add	r19, r19
    4f50:	23 2f       	mov	r18, r19
    4f52:	22 0f       	add	r18, r18
    4f54:	22 0f       	add	r18, r18
    4f56:	23 0f       	add	r18, r19
    4f58:	82 1b       	sub	r24, r18
    4f5a:	f0 e1       	ldi	r31, 0x10	; 16
    4f5c:	9f 9f       	mul	r25, r31
    4f5e:	80 0d       	add	r24, r0
    4f60:	11 24       	eor	r1, r1
    4f62:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <i2c_write>
    i2c_write(dec2bcd(rtc->weekDay));                // Write weekDay on RAM address 03H
    4f66:	f8 01       	movw	r30, r16
    4f68:	83 81       	ldd	r24, Z+3	; 0x03
    4f6a:	8c 9f       	mul	r24, r28
    4f6c:	91 2d       	mov	r25, r1
    4f6e:	11 24       	eor	r1, r1
    4f70:	96 95       	lsr	r25
    4f72:	96 95       	lsr	r25
    4f74:	96 95       	lsr	r25
    4f76:	39 2f       	mov	r19, r25
    4f78:	33 0f       	add	r19, r19
    4f7a:	23 2f       	mov	r18, r19
    4f7c:	22 0f       	add	r18, r18
    4f7e:	22 0f       	add	r18, r18
    4f80:	23 0f       	add	r18, r19
    4f82:	82 1b       	sub	r24, r18
    4f84:	f0 e1       	ldi	r31, 0x10	; 16
    4f86:	9f 9f       	mul	r25, r31
    4f88:	80 0d       	add	r24, r0
    4f8a:	11 24       	eor	r1, r1
    4f8c:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <i2c_write>
    i2c_write(dec2bcd(rtc->date));                    // Write date on RAM address 04H
    4f90:	f8 01       	movw	r30, r16
    4f92:	84 81       	ldd	r24, Z+4	; 0x04
    4f94:	8c 9f       	mul	r24, r28
    4f96:	91 2d       	mov	r25, r1
    4f98:	11 24       	eor	r1, r1
    4f9a:	96 95       	lsr	r25
    4f9c:	96 95       	lsr	r25
    4f9e:	96 95       	lsr	r25
    4fa0:	39 2f       	mov	r19, r25
    4fa2:	33 0f       	add	r19, r19
    4fa4:	23 2f       	mov	r18, r19
    4fa6:	22 0f       	add	r18, r18
    4fa8:	22 0f       	add	r18, r18
    4faa:	23 0f       	add	r18, r19
    4fac:	82 1b       	sub	r24, r18
    4fae:	f0 e1       	ldi	r31, 0x10	; 16
    4fb0:	9f 9f       	mul	r25, r31
    4fb2:	80 0d       	add	r24, r0
    4fb4:	11 24       	eor	r1, r1
    4fb6:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <i2c_write>
    i2c_write(dec2bcd(rtc->month));                    // Write month on RAM address 05H
    4fba:	f8 01       	movw	r30, r16
    4fbc:	85 81       	ldd	r24, Z+5	; 0x05
    4fbe:	8c 9f       	mul	r24, r28
    4fc0:	91 2d       	mov	r25, r1
    4fc2:	11 24       	eor	r1, r1
    4fc4:	96 95       	lsr	r25
    4fc6:	96 95       	lsr	r25
    4fc8:	96 95       	lsr	r25
    4fca:	39 2f       	mov	r19, r25
    4fcc:	33 0f       	add	r19, r19
    4fce:	23 2f       	mov	r18, r19
    4fd0:	22 0f       	add	r18, r18
    4fd2:	22 0f       	add	r18, r18
    4fd4:	23 0f       	add	r18, r19
    4fd6:	82 1b       	sub	r24, r18
    4fd8:	f0 e1       	ldi	r31, 0x10	; 16
    4fda:	9f 9f       	mul	r25, r31
    4fdc:	80 0d       	add	r24, r0
    4fde:	11 24       	eor	r1, r1
    4fe0:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <i2c_write>
    i2c_write(dec2bcd(rtc->year));                    // Write year on RAM address 06h*/
    4fe4:	f8 01       	movw	r30, r16
    4fe6:	86 81       	ldd	r24, Z+6	; 0x06
    4fe8:	8c 9f       	mul	r24, r28
    4fea:	c1 2d       	mov	r28, r1
    4fec:	11 24       	eor	r1, r1
    4fee:	c6 95       	lsr	r28
    4ff0:	c6 95       	lsr	r28
    4ff2:	c6 95       	lsr	r28
    4ff4:	2c 2f       	mov	r18, r28
    4ff6:	22 0f       	add	r18, r18
    4ff8:	92 2f       	mov	r25, r18
    4ffa:	99 0f       	add	r25, r25
    4ffc:	99 0f       	add	r25, r25
    4ffe:	92 0f       	add	r25, r18
    5000:	89 1b       	sub	r24, r25
    5002:	f0 e1       	ldi	r31, 0x10	; 16
    5004:	cf 9f       	mul	r28, r31
    5006:	80 0d       	add	r24, r0
    5008:	11 24       	eor	r1, r1
    500a:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <i2c_write>

    i2c_stop();                              // Stop I2C communication after Setting the Date
    500e:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <i2c_stop>
}
    5012:	cf 91       	pop	r28
    5014:	1f 91       	pop	r17
    5016:	0f 91       	pop	r16
    5018:	08 95       	ret

0000501a <RTC_GetDateTime>:
    Note: The date and time read from Ds1307 will be of BCD format, 
          like 0x12,0x39,0x26 for 12hr,39min and 26sec.    
               0x15,0x08,0x47 for 15th day,8th month and 47th year.              
***************************************************************************************************/
void RTC_GetDateTime(rtc_t *rtc)
{
    501a:	cf 93       	push	r28
    501c:	df 93       	push	r29
    501e:	ec 01       	movw	r28, r24
    rtc_I2C_Start();                            // Start I2C communication
    5020:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <rtc_I2C_Start>

    i2c_write(C_Ds1307WriteMode_U8);        // connect to DS1307 by sending its ID on I2c Bus
    5024:	80 ed       	ldi	r24, 0xD0	; 208
    5026:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <i2c_write>
    i2c_write(C_Ds1307SecondRegAddress_U8); // Request Sec RAM address at 00H
    502a:	80 e0       	ldi	r24, 0x00	; 0
    502c:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <i2c_write>

    i2c_stop();                                // Stop I2C communication after selecting Sec Register
    5030:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <i2c_stop>
    5034:	2f ef       	ldi	r18, 0xFF	; 255
    5036:	81 ee       	ldi	r24, 0xE1	; 225
    5038:	94 e0       	ldi	r25, 0x04	; 4
    503a:	21 50       	subi	r18, 0x01	; 1
    503c:	80 40       	sbci	r24, 0x00	; 0
    503e:	90 40       	sbci	r25, 0x00	; 0
    5040:	e1 f7       	brne	.-8      	; 0x503a <RTC_GetDateTime+0x20>
    5042:	00 c0       	rjmp	.+0      	; 0x5044 <RTC_GetDateTime+0x2a>
    5044:	00 00       	nop
	_delay_ms(100);
    rtc_I2C_Start();                            // Start I2C communication
    5046:	0e 94 2d 27 	call	0x4e5a	; 0x4e5a <rtc_I2C_Start>
    i2c_write(C_Ds1307ReadMode_U8);            // connect to DS1307(Read mode) by sending its ID
    504a:	81 ed       	ldi	r24, 0xD1	; 209
    504c:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <i2c_write>

    rtc->sec = bcd2dec(i2c_readAck());                // read second and return Positive ACK
    5050:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <i2c_readAck>
    5054:	98 2f       	mov	r25, r24
    5056:	92 95       	swap	r25
    5058:	9f 70       	andi	r25, 0x0F	; 15
    505a:	99 0f       	add	r25, r25
    505c:	29 2f       	mov	r18, r25
    505e:	22 0f       	add	r18, r18
    5060:	22 0f       	add	r18, r18
    5062:	92 0f       	add	r25, r18
    5064:	8f 70       	andi	r24, 0x0F	; 15
    5066:	89 0f       	add	r24, r25
    5068:	88 83       	st	Y, r24
    rtc->min = bcd2dec(i2c_readAck());                   // read minute and return Positive ACK
    506a:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <i2c_readAck>
    506e:	98 2f       	mov	r25, r24
    5070:	92 95       	swap	r25
    5072:	9f 70       	andi	r25, 0x0F	; 15
    5074:	99 0f       	add	r25, r25
    5076:	29 2f       	mov	r18, r25
    5078:	22 0f       	add	r18, r18
    507a:	22 0f       	add	r18, r18
    507c:	92 0f       	add	r25, r18
    507e:	8f 70       	andi	r24, 0x0F	; 15
    5080:	89 0f       	add	r24, r25
    5082:	89 83       	std	Y+1, r24	; 0x01
    rtc->hour= bcd2dec(i2c_readAck());                  // read hour and return Negative/No ACK
    5084:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <i2c_readAck>
    5088:	98 2f       	mov	r25, r24
    508a:	92 95       	swap	r25
    508c:	9f 70       	andi	r25, 0x0F	; 15
    508e:	99 0f       	add	r25, r25
    5090:	29 2f       	mov	r18, r25
    5092:	22 0f       	add	r18, r18
    5094:	22 0f       	add	r18, r18
    5096:	92 0f       	add	r25, r18
    5098:	8f 70       	andi	r24, 0x0F	; 15
    509a:	89 0f       	add	r24, r25
    509c:	8a 83       	std	Y+2, r24	; 0x02
    rtc->weekDay = bcd2dec(i2c_readAck());              // read weekDay and return Positive ACK
    509e:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <i2c_readAck>
    50a2:	98 2f       	mov	r25, r24
    50a4:	92 95       	swap	r25
    50a6:	9f 70       	andi	r25, 0x0F	; 15
    50a8:	99 0f       	add	r25, r25
    50aa:	29 2f       	mov	r18, r25
    50ac:	22 0f       	add	r18, r18
    50ae:	22 0f       	add	r18, r18
    50b0:	92 0f       	add	r25, r18
    50b2:	8f 70       	andi	r24, 0x0F	; 15
    50b4:	89 0f       	add	r24, r25
    50b6:	8b 83       	std	Y+3, r24	; 0x03
    rtc->date= bcd2dec(i2c_readAck());                // read Date and return Positive ACK
    50b8:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <i2c_readAck>
    50bc:	98 2f       	mov	r25, r24
    50be:	92 95       	swap	r25
    50c0:	9f 70       	andi	r25, 0x0F	; 15
    50c2:	99 0f       	add	r25, r25
    50c4:	29 2f       	mov	r18, r25
    50c6:	22 0f       	add	r18, r18
    50c8:	22 0f       	add	r18, r18
    50ca:	92 0f       	add	r25, r18
    50cc:	8f 70       	andi	r24, 0x0F	; 15
    50ce:	89 0f       	add	r24, r25
    50d0:	8c 83       	std	Y+4, r24	; 0x04
    rtc->month=bcd2dec(i2c_readAck());               // read Month and return Positive ACK
    50d2:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <i2c_readAck>
    50d6:	98 2f       	mov	r25, r24
    50d8:	92 95       	swap	r25
    50da:	9f 70       	andi	r25, 0x0F	; 15
    50dc:	99 0f       	add	r25, r25
    50de:	29 2f       	mov	r18, r25
    50e0:	22 0f       	add	r18, r18
    50e2:	22 0f       	add	r18, r18
    50e4:	92 0f       	add	r25, r18
    50e6:	8f 70       	andi	r24, 0x0F	; 15
    50e8:	89 0f       	add	r24, r25
    50ea:	8d 83       	std	Y+5, r24	; 0x05
    rtc->year =bcd2dec(i2c_readNak());                // read Year and return Negative/No ACK
    50ec:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <i2c_readNak>
    50f0:	98 2f       	mov	r25, r24
    50f2:	92 95       	swap	r25
    50f4:	9f 70       	andi	r25, 0x0F	; 15
    50f6:	99 0f       	add	r25, r25
    50f8:	29 2f       	mov	r18, r25
    50fa:	22 0f       	add	r18, r18
    50fc:	22 0f       	add	r18, r18
    50fe:	92 0f       	add	r25, r18
    5100:	8f 70       	andi	r24, 0x0F	; 15
    5102:	89 0f       	add	r24, r25
    5104:	8e 83       	std	Y+6, r24	; 0x06

    i2c_stop();                             // Stop I2C communication after reading the Date
    5106:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <i2c_stop>
}
    510a:	df 91       	pop	r29
    510c:	cf 91       	pop	r28
    510e:	08 95       	ret

00005110 <spi_init_master>:

// SPI
// Initialize SPI Master Device (with SPI interrupt)
void spi_init_master (void)
{
	DDRB |= (1<<MOSI)|(1<<SCK);
    5110:	84 b1       	in	r24, 0x04	; 4
    5112:	88 62       	ori	r24, 0x28	; 40
    5114:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<MISO);
    5116:	24 98       	cbi	0x04, 4	; 4
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0);
    5118:	8c b5       	in	r24, 0x2c	; 44
    511a:	83 65       	ori	r24, 0x53	; 83
    511c:	8c bd       	out	0x2c, r24	; 44
	PORTB |= (1<<MISO);
    511e:	2c 9a       	sbi	0x05, 4	; 5
	PORTB &= ~(1<<MISO);
    5120:	2c 98       	cbi	0x05, 4	; 5
    5122:	08 95       	ret

00005124 <spi_rwSPI>:
SPI READ/WRITE
********************************************/

uint8_t spi_rwSPI( uint8_t byteword)
{
	SPDR = byteword; // put the byteword into data register
    5124:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    5126:	0d b4       	in	r0, 0x2d	; 45
    5128:	07 fe       	sbrs	r0, 7
    512a:	fd cf       	rjmp	.-6      	; 0x5126 <spi_rwSPI+0x2>
	return SPDR;
    512c:	8e b5       	in	r24, 0x2e	; 46
}
    512e:	08 95       	ret

00005130 <spi_BurstRead>:

/********************************************
BURST READ
********************************************/

void spi_BurstRead(uint8_t addr, uint8_t buffer[], uint8_t countdown, int pin) {
    5130:	df 92       	push	r13
    5132:	ef 92       	push	r14
    5134:	ff 92       	push	r15
    5136:	0f 93       	push	r16
    5138:	1f 93       	push	r17
    513a:	cf 93       	push	r28
    513c:	df 93       	push	r29
    513e:	8b 01       	movw	r16, r22
    5140:	d4 2e       	mov	r13, r20

	PORT_CS &= ~(1<<pin);
    5142:	9b b1       	in	r25, 0x0b	; 11
    5144:	41 e0       	ldi	r20, 0x01	; 1
    5146:	50 e0       	ldi	r21, 0x00	; 0
    5148:	7a 01       	movw	r14, r20
    514a:	02 c0       	rjmp	.+4      	; 0x5150 <spi_BurstRead+0x20>
    514c:	ee 0c       	add	r14, r14
    514e:	ff 1c       	adc	r15, r15
    5150:	2a 95       	dec	r18
    5152:	e2 f7       	brpl	.-8      	; 0x514c <spi_BurstRead+0x1c>
    5154:	2e 2d       	mov	r18, r14
    5156:	20 95       	com	r18
    5158:	92 23       	and	r25, r18
    515a:	9b b9       	out	0x0b, r25	; 11
	spi_rwSPI(addr);
    515c:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
	for (int i = 0; i < countdown; i++) {
    5160:	dd 20       	and	r13, r13
    5162:	51 f0       	breq	.+20     	; 0x5178 <spi_BurstRead+0x48>
    5164:	e8 01       	movw	r28, r16
    5166:	0d 0d       	add	r16, r13
    5168:	11 1d       	adc	r17, r1
		*buffer++ = spi_rwSPI(0x00);
    516a:	80 e0       	ldi	r24, 0x00	; 0
    516c:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
    5170:	89 93       	st	Y+, r24

void spi_BurstRead(uint8_t addr, uint8_t buffer[], uint8_t countdown, int pin) {

	PORT_CS &= ~(1<<pin);
	spi_rwSPI(addr);
	for (int i = 0; i < countdown; i++) {
    5172:	c0 17       	cp	r28, r16
    5174:	d1 07       	cpc	r29, r17
    5176:	c9 f7       	brne	.-14     	; 0x516a <spi_BurstRead+0x3a>
		*buffer++ = spi_rwSPI(0x00);
	}
	PORT_CS |= (1<<pin);
    5178:	8b b1       	in	r24, 0x0b	; 11
    517a:	e8 2a       	or	r14, r24
    517c:	eb b8       	out	0x0b, r14	; 11
}
    517e:	df 91       	pop	r29
    5180:	cf 91       	pop	r28
    5182:	1f 91       	pop	r17
    5184:	0f 91       	pop	r16
    5186:	ff 90       	pop	r15
    5188:	ef 90       	pop	r14
    518a:	df 90       	pop	r13
    518c:	08 95       	ret

0000518e <spi_read16>:

uint16_t spi_read16(uint8_t addr, int pin)
{
    518e:	cf 93       	push	r28
    5190:	df 93       	push	r29
	PORT_CS &= ~(1<<pin);
    5192:	9b b1       	in	r25, 0x0b	; 11
    5194:	c1 e0       	ldi	r28, 0x01	; 1
    5196:	d0 e0       	ldi	r29, 0x00	; 0
    5198:	02 c0       	rjmp	.+4      	; 0x519e <spi_read16+0x10>
    519a:	cc 0f       	add	r28, r28
    519c:	dd 1f       	adc	r29, r29
    519e:	6a 95       	dec	r22
    51a0:	e2 f7       	brpl	.-8      	; 0x519a <spi_read16+0xc>
    51a2:	2c 2f       	mov	r18, r28
    51a4:	20 95       	com	r18
    51a6:	92 23       	and	r25, r18
    51a8:	9b b9       	out	0x0b, r25	; 11
	spi_rwSPI(addr);
    51aa:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
	uint8_t buffer[2];
	buffer[0] = spi_rwSPI(0x00);
    51ae:	80 e0       	ldi	r24, 0x00	; 0
    51b0:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
    51b4:	d8 2f       	mov	r29, r24
	buffer[1] = spi_rwSPI(0x00);
    51b6:	80 e0       	ldi	r24, 0x00	; 0
    51b8:	0e 94 92 28 	call	0x5124	; 0x5124 <spi_rwSPI>
	uint16_t receivedVal = (buffer[1] << 8) | buffer[0];
	PORT_CS |= (1<<pin);
    51bc:	9b b1       	in	r25, 0x0b	; 11
    51be:	c9 2b       	or	r28, r25
    51c0:	cb b9       	out	0x0b, r28	; 11
	return receivedVal;
    51c2:	2d 2f       	mov	r18, r29
    51c4:	30 e0       	ldi	r19, 0x00	; 0
}
    51c6:	a9 01       	movw	r20, r18
    51c8:	58 2b       	or	r21, r24
    51ca:	ca 01       	movw	r24, r20
    51cc:	df 91       	pop	r29
    51ce:	cf 91       	pop	r28
    51d0:	08 95       	ret

000051d2 <spi_readS16>:

int16_t spi_readS16(uint8_t addr, int pin)
{
	return (int16_t)spi_read16(addr, pin);
    51d2:	0e 94 c7 28 	call	0x518e	; 0x518e <spi_read16>
}
    51d6:	08 95       	ret

000051d8 <uart_init>:
#define loop_until_bit_is_set(sfr,bit) \
do { } while (bit_is_clear(sfr, bit))

// UART
void uart_init(void) {
	UBRR0H = UBRRH_VALUE;
    51d8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
    51dc:	87 e6       	ldi	r24, 0x67	; 103
    51de:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	#if USE_2X
	UCSR0A |= _BV(U2X0);
	#else
	UCSR0A &= ~(_BV(U2X0));
    51e2:	e0 ec       	ldi	r30, 0xC0	; 192
    51e4:	f0 e0       	ldi	r31, 0x00	; 0
    51e6:	80 81       	ld	r24, Z
    51e8:	8d 7f       	andi	r24, 0xFD	; 253
    51ea:	80 83       	st	Z, r24
	#endif

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
    51ec:	86 e0       	ldi	r24, 0x06	; 6
    51ee:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
    51f2:	88 e1       	ldi	r24, 0x18	; 24
    51f4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    51f8:	08 95       	ret

000051fa <uart_putchar>:
}

int uart_putchar(char c, FILE *stream) {
    51fa:	cf 93       	push	r28
    51fc:	c8 2f       	mov	r28, r24
	if (c == '\n') {
    51fe:	8a 30       	cpi	r24, 0x0A	; 10
    5200:	19 f4       	brne	.+6      	; 0x5208 <uart_putchar+0xe>
		uart_putchar('\r', stream);
    5202:	8d e0       	ldi	r24, 0x0D	; 13
    5204:	0e 94 fd 28 	call	0x51fa	; 0x51fa <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
    5208:	e0 ec       	ldi	r30, 0xC0	; 192
    520a:	f0 e0       	ldi	r31, 0x00	; 0
    520c:	80 81       	ld	r24, Z
    520e:	85 ff       	sbrs	r24, 5
    5210:	fd cf       	rjmp	.-6      	; 0x520c <uart_putchar+0x12>
	UDR0 = c;
    5212:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 0;
}
    5216:	80 e0       	ldi	r24, 0x00	; 0
    5218:	90 e0       	ldi	r25, 0x00	; 0
    521a:	cf 91       	pop	r28
    521c:	08 95       	ret

0000521e <uart_getchar>:

int uart_getchar(FILE *stream) {
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
    521e:	e0 ec       	ldi	r30, 0xC0	; 192
    5220:	f0 e0       	ldi	r31, 0x00	; 0
    5222:	80 81       	ld	r24, Z
    5224:	88 23       	and	r24, r24
    5226:	ec f7       	brge	.-6      	; 0x5222 <uart_getchar+0x4>
	return UDR0;
    5228:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
    522c:	90 e0       	ldi	r25, 0x00	; 0
    522e:	08 95       	ret

00005230 <wind_initWindSpeed>:

static void timer1_init()
{
	
	// Starting timer 1 in normal mode
	TCCR1B= 0x00;
    5230:	e1 e8       	ldi	r30, 0x81	; 129
    5232:	f0 e0       	ldi	r31, 0x00	; 0
    5234:	10 82       	st	Z, r1
	TCCR1A= 0x00;
    5236:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	// setting interrupt flag register to 0.
	TIFR1=0x00;
    523a:	16 ba       	out	0x16, r1	; 22
	// timer 1 setup with a pre-scalar of 256
	TCCR1B |=(1<<CS12);
    523c:	80 81       	ld	r24, Z
    523e:	84 60       	ori	r24, 0x04	; 4
    5240:	80 83       	st	Z, r24
	//Input capture on rising edge
	TCCR1B|=(1<<ICES1);
    5242:	80 81       	ld	r24, Z
    5244:	80 64       	ori	r24, 0x40	; 64
    5246:	80 83       	st	Z, r24
	
	// setting the timer/counter i/o locations to 0.
	TCNT1H=0x00;
    5248:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	TCNT1L=0x00;
    524c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	// enabling input capture
	TIMSK1=(1<<ICIE1);
    5250:	80 e2       	ldi	r24, 0x20	; 32
    5252:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	// enabling global interrupt
	sei();
    5256:	78 94       	sei
{
	// initialize timer
	timer1_init();

	// setting PB0 as input for
	DDRD |= (0<<PORTD5);
    5258:	8a b1       	in	r24, 0x0a	; 10
    525a:	8a b9       	out	0x0a, r24	; 10
	//Enable PB0 pull up resistor
	PORTD |= (1<<5);
    525c:	5d 9a       	sbi	0x0b, 5	; 11
    525e:	08 95       	ret

00005260 <wind_measureFrequency>:
}

float wind_measureFrequency()
{
	if (flag>=2)
    5260:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <flag>
    5264:	82 30       	cpi	r24, 0x02	; 2
    5266:	18 f1       	brcs	.+70     	; 0x52ae <wind_measureFrequency+0x4e>
	{
		flag =0;
    5268:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <flag>
		period= (t_2-t_1);
    526c:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <t_2>
    5270:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <t_2+0x1>
    5274:	20 91 96 03 	lds	r18, 0x0396	; 0x800396 <t_1>
    5278:	30 91 97 03 	lds	r19, 0x0397	; 0x800397 <t_1+0x1>
    527c:	82 1b       	sub	r24, r18
    527e:	93 0b       	sbc	r25, r19
    5280:	90 93 93 03 	sts	0x0393, r25	; 0x800393 <period+0x1>
    5284:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <period>
		TIFR1=(1<<ICF1);
    5288:	80 e2       	ldi	r24, 0x20	; 32
    528a:	86 bb       	out	0x16, r24	; 22
		
		return (16000000UL/period)/256;
    528c:	20 91 92 03 	lds	r18, 0x0392	; 0x800392 <period>
    5290:	30 91 93 03 	lds	r19, 0x0393	; 0x800393 <period+0x1>
    5294:	40 e0       	ldi	r20, 0x00	; 0
    5296:	50 e0       	ldi	r21, 0x00	; 0
    5298:	64 e2       	ldi	r22, 0x24	; 36
    529a:	74 ef       	ldi	r23, 0xF4	; 244
    529c:	80 e0       	ldi	r24, 0x00	; 0
    529e:	90 e0       	ldi	r25, 0x00	; 0
    52a0:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <__udivmodsi4>
    52a4:	ca 01       	movw	r24, r20
    52a6:	b9 01       	movw	r22, r18
    52a8:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <__floatunsisf>
    52ac:	08 95       	ret
	}
	return -1;
    52ae:	60 e0       	ldi	r22, 0x00	; 0
    52b0:	70 e0       	ldi	r23, 0x00	; 0
    52b2:	80 e8       	ldi	r24, 0x80	; 128
    52b4:	9f eb       	ldi	r25, 0xBF	; 191
}
    52b6:	08 95       	ret

000052b8 <__vector_10>:

ISR (TIMER1_CAPT_vect)
{
    52b8:	1f 92       	push	r1
    52ba:	0f 92       	push	r0
    52bc:	0f b6       	in	r0, 0x3f	; 63
    52be:	0f 92       	push	r0
    52c0:	11 24       	eor	r1, r1
    52c2:	8f 93       	push	r24
    52c4:	9f 93       	push	r25
	if (flag==0)
    52c6:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <flag>
    52ca:	81 11       	cpse	r24, r1
    52cc:	0b c0       	rjmp	.+22     	; 0x52e4 <__vector_10+0x2c>
	{
		t_1=ICR1;
    52ce:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    52d2:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    52d6:	90 93 97 03 	sts	0x0397, r25	; 0x800397 <t_1+0x1>
    52da:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <t_1>
		TIFR1=(1<<ICF1);
    52de:	80 e2       	ldi	r24, 0x20	; 32
    52e0:	86 bb       	out	0x16, r24	; 22
    52e2:	0e c0       	rjmp	.+28     	; 0x5300 <__vector_10+0x48>

	}
	else if (flag==1)
    52e4:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <flag>
    52e8:	81 30       	cpi	r24, 0x01	; 1
    52ea:	51 f4       	brne	.+20     	; 0x5300 <__vector_10+0x48>
	{
		t_2= ICR1;
    52ec:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    52f0:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    52f4:	90 93 95 03 	sts	0x0395, r25	; 0x800395 <t_2+0x1>
    52f8:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <t_2>
		TIFR1=(1<<ICF1);
    52fc:	80 e2       	ldi	r24, 0x20	; 32
    52fe:	86 bb       	out	0x16, r24	; 22
		
	}
	flag ++;
    5300:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <flag>
    5304:	8f 5f       	subi	r24, 0xFF	; 255
    5306:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <flag>
    530a:	9f 91       	pop	r25
    530c:	8f 91       	pop	r24
    530e:	0f 90       	pop	r0
    5310:	0f be       	out	0x3f, r0	; 63
    5312:	0f 90       	pop	r0
    5314:	1f 90       	pop	r1
    5316:	18 95       	reti

00005318 <adc_read>:
	ADMUX |= (1 << REFS0) | (1 << MUX1);
}

static uint16_t adc_read()
{
	ADCSRA |= (1<<ADSC);
    5318:	ea e7       	ldi	r30, 0x7A	; 122
    531a:	f0 e0       	ldi	r31, 0x00	; 0
    531c:	80 81       	ld	r24, Z
    531e:	80 64       	ori	r24, 0x40	; 64
    5320:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));
    5322:	80 81       	ld	r24, Z
    5324:	86 fd       	sbrc	r24, 6
    5326:	fd cf       	rjmp	.-6      	; 0x5322 <adc_read+0xa>
	
	return (ADC);
    5328:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    532c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
    5330:	08 95       	ret

00005332 <getInput>:
		}
	}
}

static void getInput(char *input)
{
    5332:	cf 92       	push	r12
    5334:	df 92       	push	r13
    5336:	ef 92       	push	r14
    5338:	ff 92       	push	r15
    533a:	1f 93       	push	r17
    533c:	cf 93       	push	r28
    533e:	df 93       	push	r29
    5340:	ec 01       	movw	r28, r24
    5342:	7c 01       	movw	r14, r24
	char c;
	uint8_t i;
	for(i = 0; i < 16; i++) {
    5344:	10 e0       	ldi	r17, 0x00	; 0
		c = getchar();
    5346:	0f 2e       	mov	r0, r31
    5348:	f0 eb       	ldi	r31, 0xB0	; 176
    534a:	cf 2e       	mov	r12, r31
    534c:	f6 e0       	ldi	r31, 0x06	; 6
    534e:	df 2e       	mov	r13, r31
    5350:	f0 2d       	mov	r31, r0
    5352:	f6 01       	movw	r30, r12
    5354:	80 81       	ld	r24, Z
    5356:	91 81       	ldd	r25, Z+1	; 0x01
    5358:	0e 94 02 33 	call	0x6604	; 0x6604 <fgetc>
		if (c == '\n') break;
    535c:	8a 30       	cpi	r24, 0x0A	; 10
    535e:	31 f0       	breq	.+12     	; 0x536c <getInput+0x3a>
		input[i] = c;
    5360:	f7 01       	movw	r30, r14
    5362:	81 93       	st	Z+, r24
    5364:	7f 01       	movw	r14, r30

static void getInput(char *input)
{
	char c;
	uint8_t i;
	for(i = 0; i < 16; i++) {
    5366:	1f 5f       	subi	r17, 0xFF	; 255
    5368:	10 31       	cpi	r17, 0x10	; 16
    536a:	99 f7       	brne	.-26     	; 0x5352 <getInput+0x20>
		c = getchar();
		if (c == '\n') break;
		input[i] = c;
	}
	input[i] = '\0';
    536c:	c1 0f       	add	r28, r17
    536e:	d1 1d       	adc	r29, r1
    5370:	18 82       	st	Y, r1
}
    5372:	df 91       	pop	r29
    5374:	cf 91       	pop	r28
    5376:	1f 91       	pop	r17
    5378:	ff 90       	pop	r15
    537a:	ef 90       	pop	r14
    537c:	df 90       	pop	r13
    537e:	cf 90       	pop	r12
    5380:	08 95       	ret

00005382 <stringToIntArray>:
	eeprom_write_float(0, LargestDirectionValue);
	printf_P(PSTR("Calibration complete!"));
}

static void stringToIntArray(uint8_t * array, char * string, uint8_t * eepromAddr)
{
    5382:	8f 92       	push	r8
    5384:	9f 92       	push	r9
    5386:	af 92       	push	r10
    5388:	bf 92       	push	r11
    538a:	df 92       	push	r13
    538c:	ef 92       	push	r14
    538e:	ff 92       	push	r15
    5390:	0f 93       	push	r16
    5392:	1f 93       	push	r17
    5394:	cf 93       	push	r28
    5396:	df 93       	push	r29
    5398:	00 d0       	rcall	.+0      	; 0x539a <stringToIntArray+0x18>
    539a:	cd b7       	in	r28, 0x3d	; 61
    539c:	de b7       	in	r29, 0x3e	; 62
    539e:	7c 01       	movw	r14, r24
    53a0:	8a 01       	movw	r16, r20
	uint8_t i = 0;
	char * p = string;
    53a2:	7a 83       	std	Y+2, r23	; 0x02
    53a4:	69 83       	std	Y+1, r22	; 0x01
	printf_P(PSTR("Calibration complete!"));
}

static void stringToIntArray(uint8_t * array, char * string, uint8_t * eepromAddr)
{
	uint8_t i = 0;
    53a6:	d1 2c       	mov	r13, r1
	char * p = string;
	while(*p) {
    53a8:	2b c0       	rjmp	.+86     	; 0x5400 <stringToIntArray+0x7e>
		if ( isdigit(*p) || ( (*p=='-'||*p=='+') && isdigit(*(p+1)) )) {
    53aa:	42 2f       	mov	r20, r18
    53ac:	50 e0       	ldi	r21, 0x00	; 0
    53ae:	40 53       	subi	r20, 0x30	; 48
    53b0:	51 09       	sbc	r21, r1
    53b2:	4a 30       	cpi	r20, 0x0A	; 10
    53b4:	51 05       	cpc	r21, r1
    53b6:	60 f0       	brcs	.+24     	; 0x53d0 <stringToIntArray+0x4e>
    53b8:	2d 32       	cpi	r18, 0x2D	; 45
    53ba:	11 f0       	breq	.+4      	; 0x53c0 <stringToIntArray+0x3e>
    53bc:	2b 32       	cpi	r18, 0x2B	; 43
    53be:	e9 f4       	brne	.+58     	; 0x53fa <stringToIntArray+0x78>
    53c0:	fc 01       	movw	r30, r24
    53c2:	21 81       	ldd	r18, Z+1	; 0x01
    53c4:	30 e0       	ldi	r19, 0x00	; 0
    53c6:	20 53       	subi	r18, 0x30	; 48
    53c8:	31 09       	sbc	r19, r1
    53ca:	2a 30       	cpi	r18, 0x0A	; 10
    53cc:	31 05       	cpc	r19, r1
    53ce:	a8 f4       	brcc	.+42     	; 0x53fa <stringToIntArray+0x78>
			array[i] = strtol(p, &p, 10);
    53d0:	8d 2c       	mov	r8, r13
    53d2:	91 2c       	mov	r9, r1
    53d4:	57 01       	movw	r10, r14
    53d6:	a8 0c       	add	r10, r8
    53d8:	b9 1c       	adc	r11, r9
    53da:	4a e0       	ldi	r20, 0x0A	; 10
    53dc:	50 e0       	ldi	r21, 0x00	; 0
    53de:	be 01       	movw	r22, r28
    53e0:	6f 5f       	subi	r22, 0xFF	; 255
    53e2:	7f 4f       	sbci	r23, 0xFF	; 255
    53e4:	0e 94 6b 31 	call	0x62d6	; 0x62d6 <strtol>
    53e8:	f5 01       	movw	r30, r10
    53ea:	60 83       	st	Z, r22
			eeprom_write_byte((uint8_t*)eepromAddr+i, array[i]);
    53ec:	c8 01       	movw	r24, r16
    53ee:	88 0d       	add	r24, r8
    53f0:	99 1d       	adc	r25, r9
    53f2:	0e 94 1a 3c 	call	0x7834	; 0x7834 <eeprom_write_byte>
			i++;
    53f6:	d3 94       	inc	r13
    53f8:	03 c0       	rjmp	.+6      	; 0x5400 <stringToIntArray+0x7e>
			} else {
			p++;
    53fa:	01 96       	adiw	r24, 0x01	; 1
    53fc:	9a 83       	std	Y+2, r25	; 0x02
    53fe:	89 83       	std	Y+1, r24	; 0x01

static void stringToIntArray(uint8_t * array, char * string, uint8_t * eepromAddr)
{
	uint8_t i = 0;
	char * p = string;
	while(*p) {
    5400:	89 81       	ldd	r24, Y+1	; 0x01
    5402:	9a 81       	ldd	r25, Y+2	; 0x02
    5404:	fc 01       	movw	r30, r24
    5406:	20 81       	ld	r18, Z
    5408:	21 11       	cpse	r18, r1
    540a:	cf cf       	rjmp	.-98     	; 0x53aa <stringToIntArray+0x28>
			i++;
			} else {
			p++;
		}
	}
}
    540c:	0f 90       	pop	r0
    540e:	0f 90       	pop	r0
    5410:	df 91       	pop	r29
    5412:	cf 91       	pop	r28
    5414:	1f 91       	pop	r17
    5416:	0f 91       	pop	r16
    5418:	ff 90       	pop	r15
    541a:	ef 90       	pop	r14
    541c:	df 90       	pop	r13
    541e:	bf 90       	pop	r11
    5420:	af 90       	pop	r10
    5422:	9f 90       	pop	r9
    5424:	8f 90       	pop	r8
    5426:	08 95       	ret

00005428 <main>:
}

char packetStr[128];
uint8_t runOnce = 0;
int main(void)
{	
    5428:	cf 93       	push	r28
    542a:	df 93       	push	r29
    542c:	cd b7       	in	r28, 0x3d	; 61
    542e:	de b7       	in	r29, 0x3e	; 62
    5430:	c6 54       	subi	r28, 0x46	; 70
    5432:	d1 09       	sbc	r29, r1
    5434:	0f b6       	in	r0, 0x3f	; 63
    5436:	f8 94       	cli
    5438:	de bf       	out	0x3e, r29	; 62
    543a:	0f be       	out	0x3f, r0	; 63
    543c:	cd bf       	out	0x3d, r28	; 61
 	
	 
	uart_init();
    543e:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <uart_init>
	stdout = &uart_output;
    5442:	e0 eb       	ldi	r30, 0xB0	; 176
    5444:	f6 e0       	ldi	r31, 0x06	; 6
    5446:	8f e3       	ldi	r24, 0x3F	; 63
    5448:	91 e0       	ldi	r25, 0x01	; 1
    544a:	93 83       	std	Z+3, r25	; 0x03
    544c:	82 83       	std	Z+2, r24	; 0x02
	stdin  = &uart_input;
    544e:	81 e3       	ldi	r24, 0x31	; 49
    5450:	91 e0       	ldi	r25, 0x01	; 1
    5452:	91 83       	std	Z+1, r25	; 0x01
    5454:	80 83       	st	Z, r24
	puts_P(PSTR("Initializing"));
    5456:	83 ee       	ldi	r24, 0xE3	; 227
    5458:	92 e0       	ldi	r25, 0x02	; 2
    545a:	0e 94 ac 33 	call	0x6758	; 0x6758 <puts_P>

	i2c_init();
    545e:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <i2c_init>
	spi_init_master();
    5462:	0e 94 88 28 	call	0x5110	; 0x5110 <spi_init_master>
	bmp280_init();
    5466:	0e 94 97 01 	call	0x32e	; 0x32e <bmp280_init>
	
	wind_initWindSpeed();
    546a:	0e 94 18 29 	call	0x5230	; 0x5230 <wind_initWindSpeed>
unsigned int timeout;
rtc_t rtc;

static void initADC()
{
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
    546e:	ea e7       	ldi	r30, 0x7A	; 122
    5470:	f0 e0       	ldi	r31, 0x00	; 0
    5472:	80 81       	ld	r24, Z
    5474:	87 68       	ori	r24, 0x87	; 135
    5476:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS0) | (1 << MUX1);
    5478:	ec e7       	ldi	r30, 0x7C	; 124
    547a:	f0 e0       	ldi	r31, 0x00	; 0
    547c:	80 81       	ld	r24, Z
    547e:	82 64       	ori	r24, 0x42	; 66
    5480:	80 83       	st	Z, r24
    5482:	0f 2e       	mov	r0, r31
    5484:	fe e1       	ldi	r31, 0x1E	; 30
    5486:	cf 2e       	mov	r12, r31
    5488:	f1 e0       	ldi	r31, 0x01	; 1
    548a:	df 2e       	mov	r13, r31
    548c:	f0 2d       	mov	r31, r0
    548e:	0f 2e       	mov	r0, r31
    5490:	fa e0       	ldi	r31, 0x0A	; 10
    5492:	ef 2e       	mov	r14, r31
    5494:	f1 e0       	ldi	r31, 0x01	; 1
    5496:	ff 2e       	mov	r15, r31
    5498:	f0 2d       	mov	r31, r0
    549a:	00 e2       	ldi	r16, 0x20	; 32
    549c:	10 e0       	ldi	r17, 0x00	; 0
	
	initADC();
	// Read IP values from eeprom
	for(uint8_t i = 0; i<4; i++)
	{
		myip[i] = eeprom_read_byte((uint8_t*)0x20+i);
    549e:	c8 01       	movw	r24, r16
    54a0:	0e 94 fc 3b 	call	0x77f8	; 0x77f8 <eeprom_read_byte>
    54a4:	f6 01       	movw	r30, r12
    54a6:	81 93       	st	Z+, r24
    54a8:	6f 01       	movw	r12, r30
		gwip[i] = eeprom_read_byte((uint8_t*)0x40+i);
    54aa:	c8 01       	movw	r24, r16
    54ac:	80 96       	adiw	r24, 0x20	; 32
    54ae:	0e 94 fc 3b 	call	0x77f8	; 0x77f8 <eeprom_read_byte>
    54b2:	f7 01       	movw	r30, r14
    54b4:	81 93       	st	Z+, r24
    54b6:	7f 01       	movw	r14, r30
    54b8:	0f 5f       	subi	r16, 0xFF	; 255
    54ba:	1f 4f       	sbci	r17, 0xFF	; 255
	wind_initWindSpeed();
	
	
	initADC();
	// Read IP values from eeprom
	for(uint8_t i = 0; i<4; i++)
    54bc:	04 32       	cpi	r16, 0x24	; 36
    54be:	11 05       	cpc	r17, r1
    54c0:	71 f7       	brne	.-36     	; 0x549e <main+0x76>
	{
		myip[i] = eeprom_read_byte((uint8_t*)0x20+i);
		gwip[i] = eeprom_read_byte((uint8_t*)0x40+i);
	}
	eeprom_read_block((void*)serverip, (const void*)0x30, 16);
    54c2:	40 e1       	ldi	r20, 0x10	; 16
    54c4:	50 e0       	ldi	r21, 0x00	; 0
    54c6:	60 e3       	ldi	r22, 0x30	; 48
    54c8:	70 e0       	ldi	r23, 0x00	; 0
    54ca:	8e e0       	ldi	r24, 0x0E	; 14
    54cc:	91 e0       	ldi	r25, 0x01	; 1
    54ce:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <eeprom_read_block>
	//
	
	// calibration
	DDRD |= (0 << PIND5);
    54d2:	8a b1       	in	r24, 0x0a	; 10
    54d4:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PIND5);
    54d6:	5d 9a       	sbi	0x0b, 5	; 11
	if((PIND&(1 << PIND5)) == 0)
    54d8:	4d 99       	sbic	0x09, 5	; 9
    54da:	3d c0       	rjmp	.+122    	; 0x5556 <main+0x12e>
}

int16_t LargestDirectionValue;
static void calibration()
{
	printf_P(PSTR("Calibration started!"));
    54dc:	8e ec       	ldi	r24, 0xCE	; 206
    54de:	92 e0       	ldi	r25, 0x02	; 2
    54e0:	9f 93       	push	r25
    54e2:	8f 93       	push	r24
    54e4:	0e 94 56 33 	call	0x66ac	; 0x66ac <printf_P>
    54e8:	0f 90       	pop	r0
    54ea:	0f 90       	pop	r0
    54ec:	15 c0       	rjmp	.+42     	; 0x5518 <main+0xf0>
	while(adc_read()+50 >= LargestDirectionValue)
	{
		if(adc_read() > LargestDirectionValue)
    54ee:	0e 94 8c 29 	call	0x5318	; 0x5318 <adc_read>
    54f2:	20 91 03 06 	lds	r18, 0x0603	; 0x800603 <LargestDirectionValue>
    54f6:	30 91 04 06 	lds	r19, 0x0604	; 0x800604 <LargestDirectionValue+0x1>
    54fa:	28 17       	cp	r18, r24
    54fc:	39 07       	cpc	r19, r25
    54fe:	30 f4       	brcc	.+12     	; 0x550c <main+0xe4>
		{
			LargestDirectionValue = adc_read();
    5500:	0e 94 8c 29 	call	0x5318	; 0x5318 <adc_read>
    5504:	90 93 04 06 	sts	0x0604, r25	; 0x800604 <LargestDirectionValue+0x1>
    5508:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <LargestDirectionValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    550c:	87 ee       	ldi	r24, 0xE7	; 231
    550e:	93 e0       	ldi	r25, 0x03	; 3
    5510:	01 97       	sbiw	r24, 0x01	; 1
    5512:	f1 f7       	brne	.-4      	; 0x5510 <main+0xe8>
    5514:	00 c0       	rjmp	.+0      	; 0x5516 <main+0xee>
    5516:	00 00       	nop

int16_t LargestDirectionValue;
static void calibration()
{
	printf_P(PSTR("Calibration started!"));
	while(adc_read()+50 >= LargestDirectionValue)
    5518:	0e 94 8c 29 	call	0x5318	; 0x5318 <adc_read>
    551c:	60 91 03 06 	lds	r22, 0x0603	; 0x800603 <LargestDirectionValue>
    5520:	70 91 04 06 	lds	r23, 0x0604	; 0x800604 <LargestDirectionValue+0x1>
    5524:	c2 96       	adiw	r24, 0x32	; 50
    5526:	86 17       	cp	r24, r22
    5528:	97 07       	cpc	r25, r23
    552a:	08 f7       	brcc	.-62     	; 0x54ee <main+0xc6>
		{
			LargestDirectionValue = adc_read();
		}
		_delay_us(250);
	}
	eeprom_write_float(0, LargestDirectionValue);
    552c:	07 2e       	mov	r0, r23
    552e:	00 0c       	add	r0, r0
    5530:	88 0b       	sbc	r24, r24
    5532:	99 0b       	sbc	r25, r25
    5534:	0e 94 fc 2d 	call	0x5bf8	; 0x5bf8 <__floatsisf>
    5538:	ab 01       	movw	r20, r22
    553a:	bc 01       	movw	r22, r24
    553c:	80 e0       	ldi	r24, 0x00	; 0
    553e:	90 e0       	ldi	r25, 0x00	; 0
    5540:	0e 94 28 3c 	call	0x7850	; 0x7850 <eeprom_write_dword>
	printf_P(PSTR("Calibration complete!"));
    5544:	88 eb       	ldi	r24, 0xB8	; 184
    5546:	92 e0       	ldi	r25, 0x02	; 2
    5548:	9f 93       	push	r25
    554a:	8f 93       	push	r24
    554c:	0e 94 56 33 	call	0x66ac	; 0x66ac <printf_P>
    5550:	0f 90       	pop	r0
    5552:	0f 90       	pop	r0
    5554:	0a c0       	rjmp	.+20     	; 0x556a <main+0x142>
	if((PIND&(1 << PIND5)) == 0)
	{
		calibration();
	}
	else {
		LargestDirectionValue = eeprom_read_float(0);
    5556:	80 e0       	ldi	r24, 0x00	; 0
    5558:	90 e0       	ldi	r25, 0x00	; 0
    555a:	0e 94 04 3c 	call	0x7808	; 0x7808 <eeprom_read_dword>
    555e:	0e 94 be 2d 	call	0x5b7c	; 0x5b7c <__fixsfsi>
    5562:	70 93 04 06 	sts	0x0604, r23	; 0x800604 <LargestDirectionValue+0x1>
    5566:	60 93 03 06 	sts	0x0603, r22	; 0x800603 <LargestDirectionValue>
	}
	DDRD |= (0 << PIND6);
    556a:	8a b1       	in	r24, 0x0a	; 10
    556c:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << PIND6);
    556e:	5e 9a       	sbi	0x0b, 6	; 11
	if((PIND&(1 << PIND6)) == 0)
    5570:	4e 99       	sbic	0x09, 6	; 9
    5572:	52 c0       	rjmp	.+164    	; 0x5618 <main+0x1f0>
static void ipconfig()
{
	static char input[16];
	

	puts("Input arduino IP");
    5574:	87 eb       	ldi	r24, 0xB7	; 183
    5576:	91 e0       	ldi	r25, 0x01	; 1
    5578:	0e 94 7c 33 	call	0x66f8	; 0x66f8 <puts>
	getInput(input);
    557c:	88 e9       	ldi	r24, 0x98	; 152
    557e:	93 e0       	ldi	r25, 0x03	; 3
    5580:	0e 94 99 29 	call	0x5332	; 0x5332 <getInput>
	printf("Arduino IP: %s\n", input);
    5584:	08 e9       	ldi	r16, 0x98	; 152
    5586:	13 e0       	ldi	r17, 0x03	; 3
    5588:	1f 93       	push	r17
    558a:	0f 93       	push	r16
    558c:	88 ec       	ldi	r24, 0xC8	; 200
    558e:	91 e0       	ldi	r25, 0x01	; 1
    5590:	9f 93       	push	r25
    5592:	8f 93       	push	r24
    5594:	0e 94 40 33 	call	0x6680	; 0x6680 <printf>
	stringToIntArray(myip, input, (uint8_t*)0x20);
    5598:	40 e2       	ldi	r20, 0x20	; 32
    559a:	50 e0       	ldi	r21, 0x00	; 0
    559c:	b8 01       	movw	r22, r16
    559e:	8e e1       	ldi	r24, 0x1E	; 30
    55a0:	91 e0       	ldi	r25, 0x01	; 1
    55a2:	0e 94 c1 29 	call	0x5382	; 0x5382 <stringToIntArray>
	
	puts("Input server IP");
    55a6:	88 ed       	ldi	r24, 0xD8	; 216
    55a8:	91 e0       	ldi	r25, 0x01	; 1
    55aa:	0e 94 7c 33 	call	0x66f8	; 0x66f8 <puts>
	getInput(input);
    55ae:	c8 01       	movw	r24, r16
    55b0:	0e 94 99 29 	call	0x5332	; 0x5332 <getInput>
	printf("Server IP: %s\n", input);
    55b4:	1f 93       	push	r17
    55b6:	0f 93       	push	r16
    55b8:	88 ee       	ldi	r24, 0xE8	; 232
    55ba:	91 e0       	ldi	r25, 0x01	; 1
    55bc:	9f 93       	push	r25
    55be:	8f 93       	push	r24
    55c0:	0e 94 40 33 	call	0x6680	; 0x6680 <printf>
	sprintf(serverip, "%s", input);
    55c4:	b8 01       	movw	r22, r16
    55c6:	8e e0       	ldi	r24, 0x0E	; 14
    55c8:	91 e0       	ldi	r25, 0x01	; 1
    55ca:	0e 94 c0 32 	call	0x6580	; 0x6580 <strcpy>
	eeprom_write_block((const void*)input, (void*)0x30, 16);
    55ce:	40 e1       	ldi	r20, 0x10	; 16
    55d0:	50 e0       	ldi	r21, 0x00	; 0
    55d2:	60 e3       	ldi	r22, 0x30	; 48
    55d4:	70 e0       	ldi	r23, 0x00	; 0
    55d6:	c8 01       	movw	r24, r16
    55d8:	0e 94 10 3c 	call	0x7820	; 0x7820 <eeprom_write_block>
	
	puts("Input gateway IP");
    55dc:	87 ef       	ldi	r24, 0xF7	; 247
    55de:	91 e0       	ldi	r25, 0x01	; 1
    55e0:	0e 94 7c 33 	call	0x66f8	; 0x66f8 <puts>
	getInput(input);
    55e4:	c8 01       	movw	r24, r16
    55e6:	0e 94 99 29 	call	0x5332	; 0x5332 <getInput>
	printf("Gateway IP: %s\n", input);
    55ea:	1f 93       	push	r17
    55ec:	0f 93       	push	r16
    55ee:	88 e0       	ldi	r24, 0x08	; 8
    55f0:	92 e0       	ldi	r25, 0x02	; 2
    55f2:	9f 93       	push	r25
    55f4:	8f 93       	push	r24
    55f6:	0e 94 40 33 	call	0x6680	; 0x6680 <printf>
	stringToIntArray(gwip, input, (uint8_t*)0x40);
    55fa:	40 e4       	ldi	r20, 0x40	; 64
    55fc:	50 e0       	ldi	r21, 0x00	; 0
    55fe:	b8 01       	movw	r22, r16
    5600:	8a e0       	ldi	r24, 0x0A	; 10
    5602:	91 e0       	ldi	r25, 0x01	; 1
    5604:	0e 94 c1 29 	call	0x5382	; 0x5382 <stringToIntArray>
    5608:	ed b7       	in	r30, 0x3d	; 61
    560a:	fe b7       	in	r31, 0x3e	; 62
    560c:	3c 96       	adiw	r30, 0x0c	; 12
    560e:	0f b6       	in	r0, 0x3f	; 63
    5610:	f8 94       	cli
    5612:	fe bf       	out	0x3e, r31	; 62
    5614:	0f be       	out	0x3f, r0	; 63
    5616:	ed bf       	out	0x3d, r30	; 61
	if((PIND&(1 << PIND6)) == 0)
	{
		ipconfig();
	}
	//
	timeout = eeprom_read_word((uint16_t*)0x10);
    5618:	80 e1       	ldi	r24, 0x10	; 16
    561a:	90 e0       	ldi	r25, 0x00	; 0
    561c:	0e 94 0a 3c 	call	0x7814	; 0x7814 <eeprom_read_word>
    5620:	90 93 0d 06 	sts	0x060D, r25	; 0x80060d <timeout+0x1>
    5624:	80 93 0c 06 	sts	0x060C, r24	; 0x80060c <timeout>
	DDRB |= (1 << SD_CS);
    5628:	21 9a       	sbi	0x04, 1	; 4
	f_mount(&FatFs, "", 0);
    562a:	40 e0       	ldi	r20, 0x00	; 0
    562c:	69 eb       	ldi	r22, 0xB9	; 185
    562e:	72 e0       	ldi	r23, 0x02	; 2
    5630:	85 ed       	ldi	r24, 0xD5	; 213
    5632:	93 e0       	ldi	r25, 0x03	; 3
    5634:	0e 94 91 1a 	call	0x3522	; 0x3522 <f_mount>
	Ether_init();
    5638:	0e 94 2b 10 	call	0x2056	; 0x2056 <Ether_init>
			angle = 360;
		
		hih8120_measure();
		
		char humidChar[10],tempChar[10],pressChar[10],anglChar[10],speedChar[10];
		dtostrf(hih8120_humidity,1,2,humidChar);
    563c:	7e 01       	movw	r14, r28
    563e:	f9 e3       	ldi	r31, 0x39	; 57
    5640:	ef 0e       	add	r14, r31
    5642:	f1 1c       	adc	r15, r1
		dtostrf(hih8120_temperature_C,1,2,tempChar);
    5644:	3e 01       	movw	r6, r28
    5646:	2f e2       	ldi	r18, 0x2F	; 47
    5648:	62 0e       	add	r6, r18
    564a:	71 1c       	adc	r7, r1
		dtostrf(bmp280_readPressure(),1,2,pressChar);
    564c:	2e 01       	movw	r4, r28
    564e:	35 e2       	ldi	r19, 0x25	; 37
    5650:	43 0e       	add	r4, r19
    5652:	51 1c       	adc	r5, r1
		dtostrf(angle,1,2,anglChar);
    5654:	1e 01       	movw	r2, r28
    5656:	8b e1       	ldi	r24, 0x1B	; 27
    5658:	28 0e       	add	r2, r24
    565a:	31 1c       	adc	r3, r1
		dtostrf(wind_speed,1,2,speedChar);
    565c:	6e 01       	movw	r12, r28
    565e:	91 e1       	ldi	r25, 0x11	; 17
    5660:	c9 0e       	add	r12, r25
    5662:	d1 1c       	adc	r13, r1
	f_mount(&FatFs, "", 0);
	Ether_init();

	while(1) {	
		float wind_speed;
		if(sendingPacket == 1)
    5664:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <sendingPacket>
    5668:	81 30       	cpi	r24, 0x01	; 1
    566a:	29 f4       	brne	.+10     	; 0x5676 <main+0x24e>
		{
			Ether_SendPacket(packetStr);
    566c:	80 e3       	ldi	r24, 0x30	; 48
    566e:	96 e0       	ldi	r25, 0x06	; 6
    5670:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <Ether_SendPacket>
			continue;
    5674:	f7 cf       	rjmp	.-18     	; 0x5664 <main+0x23c>
		}	
		if(runOnce == 0) {
    5676:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <runOnce>
    567a:	81 11       	cpse	r24, r1
    567c:	09 c0       	rjmp	.+18     	; 0x5690 <main+0x268>
			flag =0;
    567e:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <flag>
			TIFR1=(1<<ICF1);
    5682:	e0 e2       	ldi	r30, 0x20	; 32
    5684:	e6 bb       	out	0x16, r30	; 22
			runOnce = 1;
    5686:	81 e0       	ldi	r24, 0x01	; 1
    5688:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <runOnce>
			sec = 0;
    568c:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <sec>
		}
		if(flag < 2 && sec < 1) {
    5690:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <flag>
    5694:	82 30       	cpi	r24, 0x02	; 2
    5696:	20 f4       	brcc	.+8      	; 0x56a0 <main+0x278>
    5698:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <sec>
    569c:	88 23       	and	r24, r24
    569e:	11 f3       	breq	.-60     	; 0x5664 <main+0x23c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    56a0:	ff ef       	ldi	r31, 0xFF	; 255
    56a2:	23 ed       	ldi	r18, 0xD3	; 211
    56a4:	30 e3       	ldi	r19, 0x30	; 48
    56a6:	f1 50       	subi	r31, 0x01	; 1
    56a8:	20 40       	sbci	r18, 0x00	; 0
    56aa:	30 40       	sbci	r19, 0x00	; 0
    56ac:	e1 f7       	brne	.-8      	; 0x56a6 <main+0x27e>
    56ae:	00 c0       	rjmp	.+0      	; 0x56b0 <main+0x288>
    56b0:	00 00       	nop
			continue;
		}

		_delay_ms(1000);
		runOnce = 0;
    56b2:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <runOnce>
		wind_speed = 0.765 * wind_measureFrequency() + 0.35;
    56b6:	0e 94 30 29 	call	0x5260	; 0x5260 <wind_measureFrequency>
    56ba:	2a e0       	ldi	r18, 0x0A	; 10
    56bc:	37 ed       	ldi	r19, 0xD7	; 215
    56be:	43 e4       	ldi	r20, 0x43	; 67
    56c0:	5f e3       	ldi	r21, 0x3F	; 63
    56c2:	0e 94 ff 2e 	call	0x5dfe	; 0x5dfe <__mulsf3>
    56c6:	23 e3       	ldi	r18, 0x33	; 51
    56c8:	33 e3       	ldi	r19, 0x33	; 51
    56ca:	43 eb       	ldi	r20, 0xB3	; 179
    56cc:	5e e3       	ldi	r21, 0x3E	; 62
    56ce:	0e 94 db 2c 	call	0x59b6	; 0x59b6 <__addsf3>
    56d2:	27 96       	adiw	r28, 0x07	; 7
    56d4:	6c af       	std	Y+60, r22	; 0x3c
    56d6:	7d af       	std	Y+61, r23	; 0x3d
    56d8:	8e af       	std	Y+62, r24	; 0x3e
    56da:	9f af       	std	Y+63, r25	; 0x3f
    56dc:	27 97       	sbiw	r28, 0x07	; 7
		if(wind_speed < 0 || wind_speed > 1000)
    56de:	20 e0       	ldi	r18, 0x00	; 0
    56e0:	30 e0       	ldi	r19, 0x00	; 0
    56e2:	a9 01       	movw	r20, r18
    56e4:	0e 94 47 2d 	call	0x5a8e	; 0x5a8e <__cmpsf2>
    56e8:	88 23       	and	r24, r24
    56ea:	ac f0       	brlt	.+42     	; 0x5716 <main+0x2ee>
    56ec:	20 e0       	ldi	r18, 0x00	; 0
    56ee:	30 e0       	ldi	r19, 0x00	; 0
    56f0:	4a e7       	ldi	r20, 0x7A	; 122
    56f2:	54 e4       	ldi	r21, 0x44	; 68
    56f4:	27 96       	adiw	r28, 0x07	; 7
    56f6:	6c ad       	ldd	r22, Y+60	; 0x3c
    56f8:	7d ad       	ldd	r23, Y+61	; 0x3d
    56fa:	8e ad       	ldd	r24, Y+62	; 0x3e
    56fc:	9f ad       	ldd	r25, Y+63	; 0x3f
    56fe:	27 97       	sbiw	r28, 0x07	; 7
    5700:	0e 94 fa 2e 	call	0x5df4	; 0x5df4 <__gesf2>
    5704:	18 16       	cp	r1, r24
    5706:	6c f4       	brge	.+26     	; 0x5722 <main+0x2fa>
			wind_speed = 0;
    5708:	27 96       	adiw	r28, 0x07	; 7
    570a:	1c ae       	std	Y+60, r1	; 0x3c
    570c:	1d ae       	std	Y+61, r1	; 0x3d
    570e:	1e ae       	std	Y+62, r1	; 0x3e
    5710:	1f ae       	std	Y+63, r1	; 0x3f
    5712:	27 97       	sbiw	r28, 0x07	; 7
    5714:	06 c0       	rjmp	.+12     	; 0x5722 <main+0x2fa>
    5716:	27 96       	adiw	r28, 0x07	; 7
    5718:	1c ae       	std	Y+60, r1	; 0x3c
    571a:	1d ae       	std	Y+61, r1	; 0x3d
    571c:	1e ae       	std	Y+62, r1	; 0x3e
    571e:	1f ae       	std	Y+63, r1	; 0x3f
    5720:	27 97       	sbiw	r28, 0x07	; 7

		RTC_GetDateTime(&rtc);
    5722:	85 e0       	ldi	r24, 0x05	; 5
    5724:	96 e0       	ldi	r25, 0x06	; 6
    5726:	0e 94 0d 28 	call	0x501a	; 0x501a <RTC_GetDateTime>
		
		float angle = ((float)adc_read() / (float)LargestDirectionValue) * 360.0;
    572a:	0e 94 8c 29 	call	0x5318	; 0x5318 <adc_read>
    572e:	bc 01       	movw	r22, r24
    5730:	80 e0       	ldi	r24, 0x00	; 0
    5732:	90 e0       	ldi	r25, 0x00	; 0
    5734:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <__floatunsisf>
    5738:	4b 01       	movw	r8, r22
    573a:	5c 01       	movw	r10, r24
    573c:	60 91 03 06 	lds	r22, 0x0603	; 0x800603 <LargestDirectionValue>
    5740:	70 91 04 06 	lds	r23, 0x0604	; 0x800604 <LargestDirectionValue+0x1>
    5744:	07 2e       	mov	r0, r23
    5746:	00 0c       	add	r0, r0
    5748:	88 0b       	sbc	r24, r24
    574a:	99 0b       	sbc	r25, r25
    574c:	0e 94 fc 2d 	call	0x5bf8	; 0x5bf8 <__floatsisf>
    5750:	9b 01       	movw	r18, r22
    5752:	ac 01       	movw	r20, r24
    5754:	c5 01       	movw	r24, r10
    5756:	b4 01       	movw	r22, r8
    5758:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__divsf3>
    575c:	20 e0       	ldi	r18, 0x00	; 0
    575e:	30 e0       	ldi	r19, 0x00	; 0
    5760:	44 eb       	ldi	r20, 0xB4	; 180
    5762:	53 e4       	ldi	r21, 0x43	; 67
    5764:	0e 94 ff 2e 	call	0x5dfe	; 0x5dfe <__mulsf3>
    5768:	4b 01       	movw	r8, r22
    576a:	5c 01       	movw	r10, r24
		if(angle > 360)
    576c:	20 e0       	ldi	r18, 0x00	; 0
    576e:	30 e0       	ldi	r19, 0x00	; 0
    5770:	44 eb       	ldi	r20, 0xB4	; 180
    5772:	53 e4       	ldi	r21, 0x43	; 67
    5774:	0e 94 fa 2e 	call	0x5df4	; 0x5df4 <__gesf2>
    5778:	18 16       	cp	r1, r24
    577a:	44 f4       	brge	.+16     	; 0x578c <main+0x364>
			angle = 360;
    577c:	0f 2e       	mov	r0, r31
    577e:	81 2c       	mov	r8, r1
    5780:	91 2c       	mov	r9, r1
    5782:	f4 eb       	ldi	r31, 0xB4	; 180
    5784:	af 2e       	mov	r10, r31
    5786:	f3 e4       	ldi	r31, 0x43	; 67
    5788:	bf 2e       	mov	r11, r31
    578a:	f0 2d       	mov	r31, r0
		
		hih8120_measure();
    578c:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <hih8120_measure>
		
		char humidChar[10],tempChar[10],pressChar[10],anglChar[10],speedChar[10];
		dtostrf(hih8120_humidity,1,2,humidChar);
    5790:	60 91 2d 01 	lds	r22, 0x012D	; 0x80012d <hih8120_humidity>
    5794:	70 91 2e 01 	lds	r23, 0x012E	; 0x80012e <hih8120_humidity+0x1>
    5798:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <hih8120_humidity+0x2>
    579c:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <hih8120_humidity+0x3>
    57a0:	87 01       	movw	r16, r14
    57a2:	22 e0       	ldi	r18, 0x02	; 2
    57a4:	41 e0       	ldi	r20, 0x01	; 1
    57a6:	0e 94 4b 31 	call	0x6296	; 0x6296 <dtostrf>
		dtostrf(hih8120_temperature_C,1,2,tempChar);
    57aa:	60 91 29 01 	lds	r22, 0x0129	; 0x800129 <hih8120_temperature_C>
    57ae:	70 91 2a 01 	lds	r23, 0x012A	; 0x80012a <hih8120_temperature_C+0x1>
    57b2:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <hih8120_temperature_C+0x2>
    57b6:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <hih8120_temperature_C+0x3>
    57ba:	83 01       	movw	r16, r6
    57bc:	22 e0       	ldi	r18, 0x02	; 2
    57be:	41 e0       	ldi	r20, 0x01	; 1
    57c0:	0e 94 4b 31 	call	0x6296	; 0x6296 <dtostrf>
		dtostrf(bmp280_readPressure(),1,2,pressChar);
    57c4:	0e 94 01 02 	call	0x402	; 0x402 <bmp280_readPressure>
    57c8:	82 01       	movw	r16, r4
    57ca:	22 e0       	ldi	r18, 0x02	; 2
    57cc:	41 e0       	ldi	r20, 0x01	; 1
    57ce:	0e 94 4b 31 	call	0x6296	; 0x6296 <dtostrf>
		dtostrf(angle,1,2,anglChar);
    57d2:	81 01       	movw	r16, r2
    57d4:	22 e0       	ldi	r18, 0x02	; 2
    57d6:	41 e0       	ldi	r20, 0x01	; 1
    57d8:	c5 01       	movw	r24, r10
    57da:	b4 01       	movw	r22, r8
    57dc:	0e 94 4b 31 	call	0x6296	; 0x6296 <dtostrf>
		dtostrf(wind_speed,1,2,speedChar);
    57e0:	86 01       	movw	r16, r12
    57e2:	22 e0       	ldi	r18, 0x02	; 2
    57e4:	41 e0       	ldi	r20, 0x01	; 1
    57e6:	27 96       	adiw	r28, 0x07	; 7
    57e8:	6c ad       	ldd	r22, Y+60	; 0x3c
    57ea:	7d ad       	ldd	r23, Y+61	; 0x3d
    57ec:	8e ad       	ldd	r24, Y+62	; 0x3e
    57ee:	9f ad       	ldd	r25, Y+63	; 0x3f
    57f0:	27 97       	sbiw	r28, 0x07	; 7
    57f2:	0e 94 4b 31 	call	0x6296	; 0x6296 <dtostrf>
		sprintf(packetStr, "[%02d:%02d:%02d] %s C , %s %% , %s Pa , %s , %s m/s", rtc.hour, rtc.min, rtc.sec,tempChar, humidChar, pressChar, anglChar, speedChar);
    57f6:	df 92       	push	r13
    57f8:	cf 92       	push	r12
    57fa:	3f 92       	push	r3
    57fc:	2f 92       	push	r2
    57fe:	5f 92       	push	r5
    5800:	4f 92       	push	r4
    5802:	ff 92       	push	r15
    5804:	ef 92       	push	r14
    5806:	7f 92       	push	r7
    5808:	6f 92       	push	r6
    580a:	05 e0       	ldi	r16, 0x05	; 5
    580c:	16 e0       	ldi	r17, 0x06	; 6
    580e:	f8 01       	movw	r30, r16
    5810:	80 81       	ld	r24, Z
    5812:	1f 92       	push	r1
    5814:	8f 93       	push	r24
    5816:	81 81       	ldd	r24, Z+1	; 0x01
    5818:	1f 92       	push	r1
    581a:	8f 93       	push	r24
    581c:	82 81       	ldd	r24, Z+2	; 0x02
    581e:	1f 92       	push	r1
    5820:	8f 93       	push	r24
    5822:	28 e1       	ldi	r18, 0x18	; 24
    5824:	32 e0       	ldi	r19, 0x02	; 2
    5826:	3f 93       	push	r19
    5828:	2f 93       	push	r18
    582a:	e0 e3       	ldi	r30, 0x30	; 48
    582c:	f6 e0       	ldi	r31, 0x06	; 6
    582e:	ff 93       	push	r31
    5830:	ef 93       	push	r30
    5832:	0e 94 0d 34 	call	0x681a	; 0x681a <sprintf>
		
		char fileName[16];
		sprintf(fileName, "%02d-%02d-%02d.CSV", rtc.date, rtc.month, rtc.year);
    5836:	f8 01       	movw	r30, r16
    5838:	86 81       	ldd	r24, Z+6	; 0x06
    583a:	1f 92       	push	r1
    583c:	8f 93       	push	r24
    583e:	85 81       	ldd	r24, Z+5	; 0x05
    5840:	1f 92       	push	r1
    5842:	8f 93       	push	r24
    5844:	84 81       	ldd	r24, Z+4	; 0x04
    5846:	1f 92       	push	r1
    5848:	8f 93       	push	r24
    584a:	2c e4       	ldi	r18, 0x4C	; 76
    584c:	32 e0       	ldi	r19, 0x02	; 2
    584e:	3f 93       	push	r19
    5850:	2f 93       	push	r18
    5852:	e1 e0       	ldi	r30, 0x01	; 1
    5854:	f0 e0       	ldi	r31, 0x00	; 0
    5856:	ec 0f       	add	r30, r28
    5858:	fd 1f       	adc	r31, r29
    585a:	ff 93       	push	r31
    585c:	ef 93       	push	r30
    585e:	0e 94 0d 34 	call	0x681a	; 0x681a <sprintf>

		if(f_open(&Fil, fileName, FA_WRITE) == FR_OK)
    5862:	42 e0       	ldi	r20, 0x02	; 2
    5864:	be 01       	movw	r22, r28
    5866:	6f 5f       	subi	r22, 0xFF	; 255
    5868:	7f 4f       	sbci	r23, 0xFF	; 255
    586a:	80 e1       	ldi	r24, 0x10	; 16
    586c:	96 e0       	ldi	r25, 0x06	; 6
    586e:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <f_open>
    5872:	2d b7       	in	r18, 0x3d	; 61
    5874:	3e b7       	in	r19, 0x3e	; 62
    5876:	22 5e       	subi	r18, 0xE2	; 226
    5878:	3f 4f       	sbci	r19, 0xFF	; 255
    587a:	0f b6       	in	r0, 0x3f	; 63
    587c:	f8 94       	cli
    587e:	3e bf       	out	0x3e, r19	; 62
    5880:	0f be       	out	0x3f, r0	; 63
    5882:	2d bf       	out	0x3d, r18	; 61
    5884:	81 11       	cpse	r24, r1
    5886:	77 c0       	rjmp	.+238    	; 0x5976 <main+0x54e>
		{
    5888:	8d b6       	in	r8, 0x3d	; 61
    588a:	9e b6       	in	r9, 0x3e	; 62
			f_lseek(&Fil, Fil.fsize);
    588c:	40 91 1a 06 	lds	r20, 0x061A	; 0x80061a <Fil+0xa>
    5890:	50 91 1b 06 	lds	r21, 0x061B	; 0x80061b <Fil+0xb>
    5894:	60 91 1c 06 	lds	r22, 0x061C	; 0x80061c <Fil+0xc>
    5898:	70 91 1d 06 	lds	r23, 0x061D	; 0x80061d <Fil+0xd>
    589c:	80 e1       	ldi	r24, 0x10	; 16
    589e:	96 e0       	ldi	r25, 0x06	; 6
    58a0:	0e 94 74 20 	call	0x40e8	; 0x40e8 <f_lseek>
			char sdData[snprintf(NULL,0,"%02d:%02d:%02d,%s,%s,%s,%s,%s\r\n", rtc.hour, rtc.min, rtc.sec, pressChar, anglChar, speedChar, humidChar, tempChar)];
    58a4:	7f 92       	push	r7
    58a6:	6f 92       	push	r6
    58a8:	ff 92       	push	r15
    58aa:	ef 92       	push	r14
    58ac:	df 92       	push	r13
    58ae:	cf 92       	push	r12
    58b0:	3f 92       	push	r3
    58b2:	2f 92       	push	r2
    58b4:	5f 92       	push	r5
    58b6:	4f 92       	push	r4
    58b8:	f8 01       	movw	r30, r16
    58ba:	80 81       	ld	r24, Z
    58bc:	1f 92       	push	r1
    58be:	8f 93       	push	r24
    58c0:	81 81       	ldd	r24, Z+1	; 0x01
    58c2:	1f 92       	push	r1
    58c4:	8f 93       	push	r24
    58c6:	82 81       	ldd	r24, Z+2	; 0x02
    58c8:	1f 92       	push	r1
    58ca:	8f 93       	push	r24
    58cc:	2f e5       	ldi	r18, 0x5F	; 95
    58ce:	32 e0       	ldi	r19, 0x02	; 2
    58d0:	3f 93       	push	r19
    58d2:	2f 93       	push	r18
    58d4:	1f 92       	push	r1
    58d6:	1f 92       	push	r1
    58d8:	1f 92       	push	r1
    58da:	1f 92       	push	r1
    58dc:	0e 94 dd 33 	call	0x67ba	; 0x67ba <snprintf>
    58e0:	25 96       	adiw	r28, 0x05	; 5
    58e2:	9f af       	std	Y+63, r25	; 0x3f
    58e4:	8e af       	std	Y+62, r24	; 0x3e
    58e6:	25 97       	sbiw	r28, 0x05	; 5
    58e8:	ed b7       	in	r30, 0x3d	; 61
    58ea:	fe b7       	in	r31, 0x3e	; 62
    58ec:	76 96       	adiw	r30, 0x16	; 22
    58ee:	0f b6       	in	r0, 0x3f	; 63
    58f0:	f8 94       	cli
    58f2:	fe bf       	out	0x3e, r31	; 62
    58f4:	0f be       	out	0x3f, r0	; 63
    58f6:	ed bf       	out	0x3d, r30	; 61
    58f8:	2d b7       	in	r18, 0x3d	; 61
    58fa:	3e b7       	in	r19, 0x3e	; 62
    58fc:	28 1b       	sub	r18, r24
    58fe:	39 0b       	sbc	r19, r25
    5900:	0f b6       	in	r0, 0x3f	; 63
    5902:	f8 94       	cli
    5904:	3e bf       	out	0x3e, r19	; 62
    5906:	0f be       	out	0x3f, r0	; 63
    5908:	2d bf       	out	0x3d, r18	; 61
    590a:	8d b7       	in	r24, 0x3d	; 61
    590c:	9e b7       	in	r25, 0x3e	; 62
    590e:	01 96       	adiw	r24, 0x01	; 1
    5910:	5c 01       	movw	r10, r24
			sprintf(sdData, "%02d:%02d:%02d,%s,%s,%s,%s,%s\r\n", rtc.hour, rtc.min, rtc.sec, pressChar, anglChar, speedChar, humidChar, tempChar);
    5912:	7f 92       	push	r7
    5914:	6f 92       	push	r6
    5916:	ff 92       	push	r15
    5918:	ef 92       	push	r14
    591a:	df 92       	push	r13
    591c:	cf 92       	push	r12
    591e:	3f 92       	push	r3
    5920:	2f 92       	push	r2
    5922:	5f 92       	push	r5
    5924:	4f 92       	push	r4
    5926:	f8 01       	movw	r30, r16
    5928:	80 81       	ld	r24, Z
    592a:	1f 92       	push	r1
    592c:	8f 93       	push	r24
    592e:	81 81       	ldd	r24, Z+1	; 0x01
    5930:	1f 92       	push	r1
    5932:	8f 93       	push	r24
    5934:	82 81       	ldd	r24, Z+2	; 0x02
    5936:	1f 92       	push	r1
    5938:	8f 93       	push	r24
    593a:	2f e5       	ldi	r18, 0x5F	; 95
    593c:	32 e0       	ldi	r19, 0x02	; 2
    593e:	3f 93       	push	r19
    5940:	2f 93       	push	r18
    5942:	bf 92       	push	r11
    5944:	af 92       	push	r10
    5946:	0e 94 0d 34 	call	0x681a	; 0x681a <sprintf>
			f_write(&Fil, sdData, sizeof(sdData), &bw);	// Write Data to the file
    594a:	2e e0       	ldi	r18, 0x0E	; 14
    594c:	36 e0       	ldi	r19, 0x06	; 6
    594e:	25 96       	adiw	r28, 0x05	; 5
    5950:	4e ad       	ldd	r20, Y+62	; 0x3e
    5952:	5f ad       	ldd	r21, Y+63	; 0x3f
    5954:	25 97       	sbiw	r28, 0x05	; 5
    5956:	6a 2d       	mov	r22, r10
    5958:	7b 2d       	mov	r23, r11
    595a:	80 e1       	ldi	r24, 0x10	; 16
    595c:	96 e0       	ldi	r25, 0x06	; 6
    595e:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <f_write>
			f_close(&Fil);
    5962:	80 e1       	ldi	r24, 0x10	; 16
    5964:	96 e0       	ldi	r25, 0x06	; 6
    5966:	0e 94 63 20 	call	0x40c6	; 0x40c6 <f_close>
    596a:	0f b6       	in	r0, 0x3f	; 63
    596c:	f8 94       	cli
    596e:	9e be       	out	0x3e, r9	; 62
    5970:	0f be       	out	0x3f, r0	; 63
    5972:	8d be       	out	0x3d, r8	; 61
    5974:	18 c0       	rjmp	.+48     	; 0x59a6 <main+0x57e>
		}
		else
		{
			if (f_open(&Fil, fileName, FA_WRITE | FA_CREATE_ALWAYS) == FR_OK) {	/* Create a file */
    5976:	4a e0       	ldi	r20, 0x0A	; 10
    5978:	be 01       	movw	r22, r28
    597a:	6f 5f       	subi	r22, 0xFF	; 255
    597c:	7f 4f       	sbci	r23, 0xFF	; 255
    597e:	80 e1       	ldi	r24, 0x10	; 16
    5980:	96 e0       	ldi	r25, 0x06	; 6
    5982:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <f_open>
    5986:	81 11       	cpse	r24, r1
    5988:	0e c0       	rjmp	.+28     	; 0x59a6 <main+0x57e>
				f_write(&Fil, "Time,Pressure,Wind Angle,Wind Speed,Humidity,Temperature\r\n", 58, &bw);	// Create CSV header
    598a:	2e e0       	ldi	r18, 0x0E	; 14
    598c:	36 e0       	ldi	r19, 0x06	; 6
    598e:	4a e3       	ldi	r20, 0x3A	; 58
    5990:	50 e0       	ldi	r21, 0x00	; 0
    5992:	6f e7       	ldi	r22, 0x7F	; 127
    5994:	72 e0       	ldi	r23, 0x02	; 2
    5996:	80 e1       	ldi	r24, 0x10	; 16
    5998:	96 e0       	ldi	r25, 0x06	; 6
    599a:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <f_write>
				f_close(&Fil);								/* Close the file */
    599e:	80 e1       	ldi	r24, 0x10	; 16
    59a0:	96 e0       	ldi	r25, 0x06	; 6
    59a2:	0e 94 63 20 	call	0x40c6	; 0x40c6 <f_close>
			}
		}

 		sec = 0;
    59a6:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <sec>
 		Ether_SendPacket(packetStr);
    59aa:	80 e3       	ldi	r24, 0x30	; 48
    59ac:	96 e0       	ldi	r25, 0x06	; 6
    59ae:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <Ether_SendPacket>
    59b2:	58 ce       	rjmp	.-848    	; 0x5664 <main+0x23c>

000059b4 <__subsf3>:
    59b4:	50 58       	subi	r21, 0x80	; 128

000059b6 <__addsf3>:
    59b6:	bb 27       	eor	r27, r27
    59b8:	aa 27       	eor	r26, r26
    59ba:	0e 94 f2 2c 	call	0x59e4	; 0x59e4 <__addsf3x>
    59be:	0c 94 c0 2e 	jmp	0x5d80	; 0x5d80 <__fp_round>
    59c2:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__fp_pscA>
    59c6:	38 f0       	brcs	.+14     	; 0x59d6 <__addsf3+0x20>
    59c8:	0e 94 b9 2e 	call	0x5d72	; 0x5d72 <__fp_pscB>
    59cc:	20 f0       	brcs	.+8      	; 0x59d6 <__addsf3+0x20>
    59ce:	39 f4       	brne	.+14     	; 0x59de <__addsf3+0x28>
    59d0:	9f 3f       	cpi	r25, 0xFF	; 255
    59d2:	19 f4       	brne	.+6      	; 0x59da <__addsf3+0x24>
    59d4:	26 f4       	brtc	.+8      	; 0x59de <__addsf3+0x28>
    59d6:	0c 94 9f 2e 	jmp	0x5d3e	; 0x5d3e <__fp_nan>
    59da:	0e f4       	brtc	.+2      	; 0x59de <__addsf3+0x28>
    59dc:	e0 95       	com	r30
    59de:	e7 fb       	bst	r30, 7
    59e0:	0c 94 99 2e 	jmp	0x5d32	; 0x5d32 <__fp_inf>

000059e4 <__addsf3x>:
    59e4:	e9 2f       	mov	r30, r25
    59e6:	0e 94 d1 2e 	call	0x5da2	; 0x5da2 <__fp_split3>
    59ea:	58 f3       	brcs	.-42     	; 0x59c2 <__addsf3+0xc>
    59ec:	ba 17       	cp	r27, r26
    59ee:	62 07       	cpc	r22, r18
    59f0:	73 07       	cpc	r23, r19
    59f2:	84 07       	cpc	r24, r20
    59f4:	95 07       	cpc	r25, r21
    59f6:	20 f0       	brcs	.+8      	; 0x5a00 <__addsf3x+0x1c>
    59f8:	79 f4       	brne	.+30     	; 0x5a18 <__addsf3x+0x34>
    59fa:	a6 f5       	brtc	.+104    	; 0x5a64 <__addsf3x+0x80>
    59fc:	0c 94 f3 2e 	jmp	0x5de6	; 0x5de6 <__fp_zero>
    5a00:	0e f4       	brtc	.+2      	; 0x5a04 <__addsf3x+0x20>
    5a02:	e0 95       	com	r30
    5a04:	0b 2e       	mov	r0, r27
    5a06:	ba 2f       	mov	r27, r26
    5a08:	a0 2d       	mov	r26, r0
    5a0a:	0b 01       	movw	r0, r22
    5a0c:	b9 01       	movw	r22, r18
    5a0e:	90 01       	movw	r18, r0
    5a10:	0c 01       	movw	r0, r24
    5a12:	ca 01       	movw	r24, r20
    5a14:	a0 01       	movw	r20, r0
    5a16:	11 24       	eor	r1, r1
    5a18:	ff 27       	eor	r31, r31
    5a1a:	59 1b       	sub	r21, r25
    5a1c:	99 f0       	breq	.+38     	; 0x5a44 <__addsf3x+0x60>
    5a1e:	59 3f       	cpi	r21, 0xF9	; 249
    5a20:	50 f4       	brcc	.+20     	; 0x5a36 <__addsf3x+0x52>
    5a22:	50 3e       	cpi	r21, 0xE0	; 224
    5a24:	68 f1       	brcs	.+90     	; 0x5a80 <__addsf3x+0x9c>
    5a26:	1a 16       	cp	r1, r26
    5a28:	f0 40       	sbci	r31, 0x00	; 0
    5a2a:	a2 2f       	mov	r26, r18
    5a2c:	23 2f       	mov	r18, r19
    5a2e:	34 2f       	mov	r19, r20
    5a30:	44 27       	eor	r20, r20
    5a32:	58 5f       	subi	r21, 0xF8	; 248
    5a34:	f3 cf       	rjmp	.-26     	; 0x5a1c <__addsf3x+0x38>
    5a36:	46 95       	lsr	r20
    5a38:	37 95       	ror	r19
    5a3a:	27 95       	ror	r18
    5a3c:	a7 95       	ror	r26
    5a3e:	f0 40       	sbci	r31, 0x00	; 0
    5a40:	53 95       	inc	r21
    5a42:	c9 f7       	brne	.-14     	; 0x5a36 <__addsf3x+0x52>
    5a44:	7e f4       	brtc	.+30     	; 0x5a64 <__addsf3x+0x80>
    5a46:	1f 16       	cp	r1, r31
    5a48:	ba 0b       	sbc	r27, r26
    5a4a:	62 0b       	sbc	r22, r18
    5a4c:	73 0b       	sbc	r23, r19
    5a4e:	84 0b       	sbc	r24, r20
    5a50:	ba f0       	brmi	.+46     	; 0x5a80 <__addsf3x+0x9c>
    5a52:	91 50       	subi	r25, 0x01	; 1
    5a54:	a1 f0       	breq	.+40     	; 0x5a7e <__addsf3x+0x9a>
    5a56:	ff 0f       	add	r31, r31
    5a58:	bb 1f       	adc	r27, r27
    5a5a:	66 1f       	adc	r22, r22
    5a5c:	77 1f       	adc	r23, r23
    5a5e:	88 1f       	adc	r24, r24
    5a60:	c2 f7       	brpl	.-16     	; 0x5a52 <__addsf3x+0x6e>
    5a62:	0e c0       	rjmp	.+28     	; 0x5a80 <__addsf3x+0x9c>
    5a64:	ba 0f       	add	r27, r26
    5a66:	62 1f       	adc	r22, r18
    5a68:	73 1f       	adc	r23, r19
    5a6a:	84 1f       	adc	r24, r20
    5a6c:	48 f4       	brcc	.+18     	; 0x5a80 <__addsf3x+0x9c>
    5a6e:	87 95       	ror	r24
    5a70:	77 95       	ror	r23
    5a72:	67 95       	ror	r22
    5a74:	b7 95       	ror	r27
    5a76:	f7 95       	ror	r31
    5a78:	9e 3f       	cpi	r25, 0xFE	; 254
    5a7a:	08 f0       	brcs	.+2      	; 0x5a7e <__addsf3x+0x9a>
    5a7c:	b0 cf       	rjmp	.-160    	; 0x59de <__addsf3+0x28>
    5a7e:	93 95       	inc	r25
    5a80:	88 0f       	add	r24, r24
    5a82:	08 f0       	brcs	.+2      	; 0x5a86 <__addsf3x+0xa2>
    5a84:	99 27       	eor	r25, r25
    5a86:	ee 0f       	add	r30, r30
    5a88:	97 95       	ror	r25
    5a8a:	87 95       	ror	r24
    5a8c:	08 95       	ret

00005a8e <__cmpsf2>:
    5a8e:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__fp_cmp>
    5a92:	08 f4       	brcc	.+2      	; 0x5a96 <__cmpsf2+0x8>
    5a94:	81 e0       	ldi	r24, 0x01	; 1
    5a96:	08 95       	ret

00005a98 <__divsf3>:
    5a98:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <__divsf3x>
    5a9c:	0c 94 c0 2e 	jmp	0x5d80	; 0x5d80 <__fp_round>
    5aa0:	0e 94 b9 2e 	call	0x5d72	; 0x5d72 <__fp_pscB>
    5aa4:	58 f0       	brcs	.+22     	; 0x5abc <__divsf3+0x24>
    5aa6:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__fp_pscA>
    5aaa:	40 f0       	brcs	.+16     	; 0x5abc <__divsf3+0x24>
    5aac:	29 f4       	brne	.+10     	; 0x5ab8 <__divsf3+0x20>
    5aae:	5f 3f       	cpi	r21, 0xFF	; 255
    5ab0:	29 f0       	breq	.+10     	; 0x5abc <__divsf3+0x24>
    5ab2:	0c 94 99 2e 	jmp	0x5d32	; 0x5d32 <__fp_inf>
    5ab6:	51 11       	cpse	r21, r1
    5ab8:	0c 94 f4 2e 	jmp	0x5de8	; 0x5de8 <__fp_szero>
    5abc:	0c 94 9f 2e 	jmp	0x5d3e	; 0x5d3e <__fp_nan>

00005ac0 <__divsf3x>:
    5ac0:	0e 94 d1 2e 	call	0x5da2	; 0x5da2 <__fp_split3>
    5ac4:	68 f3       	brcs	.-38     	; 0x5aa0 <__divsf3+0x8>

00005ac6 <__divsf3_pse>:
    5ac6:	99 23       	and	r25, r25
    5ac8:	b1 f3       	breq	.-20     	; 0x5ab6 <__divsf3+0x1e>
    5aca:	55 23       	and	r21, r21
    5acc:	91 f3       	breq	.-28     	; 0x5ab2 <__divsf3+0x1a>
    5ace:	95 1b       	sub	r25, r21
    5ad0:	55 0b       	sbc	r21, r21
    5ad2:	bb 27       	eor	r27, r27
    5ad4:	aa 27       	eor	r26, r26
    5ad6:	62 17       	cp	r22, r18
    5ad8:	73 07       	cpc	r23, r19
    5ada:	84 07       	cpc	r24, r20
    5adc:	38 f0       	brcs	.+14     	; 0x5aec <__divsf3_pse+0x26>
    5ade:	9f 5f       	subi	r25, 0xFF	; 255
    5ae0:	5f 4f       	sbci	r21, 0xFF	; 255
    5ae2:	22 0f       	add	r18, r18
    5ae4:	33 1f       	adc	r19, r19
    5ae6:	44 1f       	adc	r20, r20
    5ae8:	aa 1f       	adc	r26, r26
    5aea:	a9 f3       	breq	.-22     	; 0x5ad6 <__divsf3_pse+0x10>
    5aec:	35 d0       	rcall	.+106    	; 0x5b58 <__divsf3_pse+0x92>
    5aee:	0e 2e       	mov	r0, r30
    5af0:	3a f0       	brmi	.+14     	; 0x5b00 <__divsf3_pse+0x3a>
    5af2:	e0 e8       	ldi	r30, 0x80	; 128
    5af4:	32 d0       	rcall	.+100    	; 0x5b5a <__divsf3_pse+0x94>
    5af6:	91 50       	subi	r25, 0x01	; 1
    5af8:	50 40       	sbci	r21, 0x00	; 0
    5afa:	e6 95       	lsr	r30
    5afc:	00 1c       	adc	r0, r0
    5afe:	ca f7       	brpl	.-14     	; 0x5af2 <__divsf3_pse+0x2c>
    5b00:	2b d0       	rcall	.+86     	; 0x5b58 <__divsf3_pse+0x92>
    5b02:	fe 2f       	mov	r31, r30
    5b04:	29 d0       	rcall	.+82     	; 0x5b58 <__divsf3_pse+0x92>
    5b06:	66 0f       	add	r22, r22
    5b08:	77 1f       	adc	r23, r23
    5b0a:	88 1f       	adc	r24, r24
    5b0c:	bb 1f       	adc	r27, r27
    5b0e:	26 17       	cp	r18, r22
    5b10:	37 07       	cpc	r19, r23
    5b12:	48 07       	cpc	r20, r24
    5b14:	ab 07       	cpc	r26, r27
    5b16:	b0 e8       	ldi	r27, 0x80	; 128
    5b18:	09 f0       	breq	.+2      	; 0x5b1c <__divsf3_pse+0x56>
    5b1a:	bb 0b       	sbc	r27, r27
    5b1c:	80 2d       	mov	r24, r0
    5b1e:	bf 01       	movw	r22, r30
    5b20:	ff 27       	eor	r31, r31
    5b22:	93 58       	subi	r25, 0x83	; 131
    5b24:	5f 4f       	sbci	r21, 0xFF	; 255
    5b26:	3a f0       	brmi	.+14     	; 0x5b36 <__divsf3_pse+0x70>
    5b28:	9e 3f       	cpi	r25, 0xFE	; 254
    5b2a:	51 05       	cpc	r21, r1
    5b2c:	78 f0       	brcs	.+30     	; 0x5b4c <__divsf3_pse+0x86>
    5b2e:	0c 94 99 2e 	jmp	0x5d32	; 0x5d32 <__fp_inf>
    5b32:	0c 94 f4 2e 	jmp	0x5de8	; 0x5de8 <__fp_szero>
    5b36:	5f 3f       	cpi	r21, 0xFF	; 255
    5b38:	e4 f3       	brlt	.-8      	; 0x5b32 <__divsf3_pse+0x6c>
    5b3a:	98 3e       	cpi	r25, 0xE8	; 232
    5b3c:	d4 f3       	brlt	.-12     	; 0x5b32 <__divsf3_pse+0x6c>
    5b3e:	86 95       	lsr	r24
    5b40:	77 95       	ror	r23
    5b42:	67 95       	ror	r22
    5b44:	b7 95       	ror	r27
    5b46:	f7 95       	ror	r31
    5b48:	9f 5f       	subi	r25, 0xFF	; 255
    5b4a:	c9 f7       	brne	.-14     	; 0x5b3e <__divsf3_pse+0x78>
    5b4c:	88 0f       	add	r24, r24
    5b4e:	91 1d       	adc	r25, r1
    5b50:	96 95       	lsr	r25
    5b52:	87 95       	ror	r24
    5b54:	97 f9       	bld	r25, 7
    5b56:	08 95       	ret
    5b58:	e1 e0       	ldi	r30, 0x01	; 1
    5b5a:	66 0f       	add	r22, r22
    5b5c:	77 1f       	adc	r23, r23
    5b5e:	88 1f       	adc	r24, r24
    5b60:	bb 1f       	adc	r27, r27
    5b62:	62 17       	cp	r22, r18
    5b64:	73 07       	cpc	r23, r19
    5b66:	84 07       	cpc	r24, r20
    5b68:	ba 07       	cpc	r27, r26
    5b6a:	20 f0       	brcs	.+8      	; 0x5b74 <__divsf3_pse+0xae>
    5b6c:	62 1b       	sub	r22, r18
    5b6e:	73 0b       	sbc	r23, r19
    5b70:	84 0b       	sbc	r24, r20
    5b72:	ba 0b       	sbc	r27, r26
    5b74:	ee 1f       	adc	r30, r30
    5b76:	88 f7       	brcc	.-30     	; 0x5b5a <__divsf3_pse+0x94>
    5b78:	e0 95       	com	r30
    5b7a:	08 95       	ret

00005b7c <__fixsfsi>:
    5b7c:	0e 94 c5 2d 	call	0x5b8a	; 0x5b8a <__fixunssfsi>
    5b80:	68 94       	set
    5b82:	b1 11       	cpse	r27, r1
    5b84:	0c 94 f4 2e 	jmp	0x5de8	; 0x5de8 <__fp_szero>
    5b88:	08 95       	ret

00005b8a <__fixunssfsi>:
    5b8a:	0e 94 d9 2e 	call	0x5db2	; 0x5db2 <__fp_splitA>
    5b8e:	88 f0       	brcs	.+34     	; 0x5bb2 <__fixunssfsi+0x28>
    5b90:	9f 57       	subi	r25, 0x7F	; 127
    5b92:	98 f0       	brcs	.+38     	; 0x5bba <__fixunssfsi+0x30>
    5b94:	b9 2f       	mov	r27, r25
    5b96:	99 27       	eor	r25, r25
    5b98:	b7 51       	subi	r27, 0x17	; 23
    5b9a:	b0 f0       	brcs	.+44     	; 0x5bc8 <__fixunssfsi+0x3e>
    5b9c:	e1 f0       	breq	.+56     	; 0x5bd6 <__fixunssfsi+0x4c>
    5b9e:	66 0f       	add	r22, r22
    5ba0:	77 1f       	adc	r23, r23
    5ba2:	88 1f       	adc	r24, r24
    5ba4:	99 1f       	adc	r25, r25
    5ba6:	1a f0       	brmi	.+6      	; 0x5bae <__fixunssfsi+0x24>
    5ba8:	ba 95       	dec	r27
    5baa:	c9 f7       	brne	.-14     	; 0x5b9e <__fixunssfsi+0x14>
    5bac:	14 c0       	rjmp	.+40     	; 0x5bd6 <__fixunssfsi+0x4c>
    5bae:	b1 30       	cpi	r27, 0x01	; 1
    5bb0:	91 f0       	breq	.+36     	; 0x5bd6 <__fixunssfsi+0x4c>
    5bb2:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <__fp_zero>
    5bb6:	b1 e0       	ldi	r27, 0x01	; 1
    5bb8:	08 95       	ret
    5bba:	0c 94 f3 2e 	jmp	0x5de6	; 0x5de6 <__fp_zero>
    5bbe:	67 2f       	mov	r22, r23
    5bc0:	78 2f       	mov	r23, r24
    5bc2:	88 27       	eor	r24, r24
    5bc4:	b8 5f       	subi	r27, 0xF8	; 248
    5bc6:	39 f0       	breq	.+14     	; 0x5bd6 <__fixunssfsi+0x4c>
    5bc8:	b9 3f       	cpi	r27, 0xF9	; 249
    5bca:	cc f3       	brlt	.-14     	; 0x5bbe <__fixunssfsi+0x34>
    5bcc:	86 95       	lsr	r24
    5bce:	77 95       	ror	r23
    5bd0:	67 95       	ror	r22
    5bd2:	b3 95       	inc	r27
    5bd4:	d9 f7       	brne	.-10     	; 0x5bcc <__fixunssfsi+0x42>
    5bd6:	3e f4       	brtc	.+14     	; 0x5be6 <__fixunssfsi+0x5c>
    5bd8:	90 95       	com	r25
    5bda:	80 95       	com	r24
    5bdc:	70 95       	com	r23
    5bde:	61 95       	neg	r22
    5be0:	7f 4f       	sbci	r23, 0xFF	; 255
    5be2:	8f 4f       	sbci	r24, 0xFF	; 255
    5be4:	9f 4f       	sbci	r25, 0xFF	; 255
    5be6:	08 95       	ret

00005be8 <__floatdisf>:
    5be8:	97 fb       	bst	r25, 7
    5bea:	16 f4       	brtc	.+4      	; 0x5bf0 <__floatdisf+0x8>
    5bec:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <__fp_negdi>
    5bf0:	0c 94 38 2e 	jmp	0x5c70	; 0x5c70 <__fp_di2sf>

00005bf4 <__floatunsisf>:
    5bf4:	e8 94       	clt
    5bf6:	09 c0       	rjmp	.+18     	; 0x5c0a <__floatsisf+0x12>

00005bf8 <__floatsisf>:
    5bf8:	97 fb       	bst	r25, 7
    5bfa:	3e f4       	brtc	.+14     	; 0x5c0a <__floatsisf+0x12>
    5bfc:	90 95       	com	r25
    5bfe:	80 95       	com	r24
    5c00:	70 95       	com	r23
    5c02:	61 95       	neg	r22
    5c04:	7f 4f       	sbci	r23, 0xFF	; 255
    5c06:	8f 4f       	sbci	r24, 0xFF	; 255
    5c08:	9f 4f       	sbci	r25, 0xFF	; 255
    5c0a:	99 23       	and	r25, r25
    5c0c:	a9 f0       	breq	.+42     	; 0x5c38 <__floatsisf+0x40>
    5c0e:	f9 2f       	mov	r31, r25
    5c10:	96 e9       	ldi	r25, 0x96	; 150
    5c12:	bb 27       	eor	r27, r27
    5c14:	93 95       	inc	r25
    5c16:	f6 95       	lsr	r31
    5c18:	87 95       	ror	r24
    5c1a:	77 95       	ror	r23
    5c1c:	67 95       	ror	r22
    5c1e:	b7 95       	ror	r27
    5c20:	f1 11       	cpse	r31, r1
    5c22:	f8 cf       	rjmp	.-16     	; 0x5c14 <__floatsisf+0x1c>
    5c24:	fa f4       	brpl	.+62     	; 0x5c64 <__floatsisf+0x6c>
    5c26:	bb 0f       	add	r27, r27
    5c28:	11 f4       	brne	.+4      	; 0x5c2e <__floatsisf+0x36>
    5c2a:	60 ff       	sbrs	r22, 0
    5c2c:	1b c0       	rjmp	.+54     	; 0x5c64 <__floatsisf+0x6c>
    5c2e:	6f 5f       	subi	r22, 0xFF	; 255
    5c30:	7f 4f       	sbci	r23, 0xFF	; 255
    5c32:	8f 4f       	sbci	r24, 0xFF	; 255
    5c34:	9f 4f       	sbci	r25, 0xFF	; 255
    5c36:	16 c0       	rjmp	.+44     	; 0x5c64 <__floatsisf+0x6c>
    5c38:	88 23       	and	r24, r24
    5c3a:	11 f0       	breq	.+4      	; 0x5c40 <__floatsisf+0x48>
    5c3c:	96 e9       	ldi	r25, 0x96	; 150
    5c3e:	11 c0       	rjmp	.+34     	; 0x5c62 <__floatsisf+0x6a>
    5c40:	77 23       	and	r23, r23
    5c42:	21 f0       	breq	.+8      	; 0x5c4c <__floatsisf+0x54>
    5c44:	9e e8       	ldi	r25, 0x8E	; 142
    5c46:	87 2f       	mov	r24, r23
    5c48:	76 2f       	mov	r23, r22
    5c4a:	05 c0       	rjmp	.+10     	; 0x5c56 <__floatsisf+0x5e>
    5c4c:	66 23       	and	r22, r22
    5c4e:	71 f0       	breq	.+28     	; 0x5c6c <__floatsisf+0x74>
    5c50:	96 e8       	ldi	r25, 0x86	; 134
    5c52:	86 2f       	mov	r24, r22
    5c54:	70 e0       	ldi	r23, 0x00	; 0
    5c56:	60 e0       	ldi	r22, 0x00	; 0
    5c58:	2a f0       	brmi	.+10     	; 0x5c64 <__floatsisf+0x6c>
    5c5a:	9a 95       	dec	r25
    5c5c:	66 0f       	add	r22, r22
    5c5e:	77 1f       	adc	r23, r23
    5c60:	88 1f       	adc	r24, r24
    5c62:	da f7       	brpl	.-10     	; 0x5c5a <__floatsisf+0x62>
    5c64:	88 0f       	add	r24, r24
    5c66:	96 95       	lsr	r25
    5c68:	87 95       	ror	r24
    5c6a:	97 f9       	bld	r25, 7
    5c6c:	08 95       	ret

00005c6e <__floatundisf>:
    5c6e:	e8 94       	clt

00005c70 <__fp_di2sf>:
    5c70:	f9 2f       	mov	r31, r25
    5c72:	96 eb       	ldi	r25, 0xB6	; 182
    5c74:	ff 23       	and	r31, r31
    5c76:	81 f0       	breq	.+32     	; 0x5c98 <__fp_di2sf+0x28>
    5c78:	12 16       	cp	r1, r18
    5c7a:	13 06       	cpc	r1, r19
    5c7c:	14 06       	cpc	r1, r20
    5c7e:	44 0b       	sbc	r20, r20
    5c80:	93 95       	inc	r25
    5c82:	f6 95       	lsr	r31
    5c84:	87 95       	ror	r24
    5c86:	77 95       	ror	r23
    5c88:	67 95       	ror	r22
    5c8a:	57 95       	ror	r21
    5c8c:	40 40       	sbci	r20, 0x00	; 0
    5c8e:	ff 23       	and	r31, r31
    5c90:	b9 f7       	brne	.-18     	; 0x5c80 <__fp_di2sf+0x10>
    5c92:	1b c0       	rjmp	.+54     	; 0x5cca <__fp_di2sf+0x5a>
    5c94:	99 27       	eor	r25, r25
    5c96:	08 95       	ret
    5c98:	88 23       	and	r24, r24
    5c9a:	51 f4       	brne	.+20     	; 0x5cb0 <__fp_di2sf+0x40>
    5c9c:	98 50       	subi	r25, 0x08	; 8
    5c9e:	d2 f7       	brpl	.-12     	; 0x5c94 <__fp_di2sf+0x24>
    5ca0:	87 2b       	or	r24, r23
    5ca2:	76 2f       	mov	r23, r22
    5ca4:	65 2f       	mov	r22, r21
    5ca6:	54 2f       	mov	r21, r20
    5ca8:	43 2f       	mov	r20, r19
    5caa:	32 2f       	mov	r19, r18
    5cac:	20 e0       	ldi	r18, 0x00	; 0
    5cae:	b1 f3       	breq	.-20     	; 0x5c9c <__fp_di2sf+0x2c>
    5cb0:	12 16       	cp	r1, r18
    5cb2:	13 06       	cpc	r1, r19
    5cb4:	14 06       	cpc	r1, r20
    5cb6:	44 0b       	sbc	r20, r20
    5cb8:	88 23       	and	r24, r24
    5cba:	3a f0       	brmi	.+14     	; 0x5cca <__fp_di2sf+0x5a>
    5cbc:	9a 95       	dec	r25
    5cbe:	44 0f       	add	r20, r20
    5cc0:	55 1f       	adc	r21, r21
    5cc2:	66 1f       	adc	r22, r22
    5cc4:	77 1f       	adc	r23, r23
    5cc6:	88 1f       	adc	r24, r24
    5cc8:	ca f7       	brpl	.-14     	; 0x5cbc <__fp_di2sf+0x4c>
    5cca:	55 23       	and	r21, r21
    5ccc:	4a f4       	brpl	.+18     	; 0x5ce0 <__fp_di2sf+0x70>
    5cce:	44 0f       	add	r20, r20
    5cd0:	55 1f       	adc	r21, r21
    5cd2:	11 f4       	brne	.+4      	; 0x5cd8 <__fp_di2sf+0x68>
    5cd4:	60 ff       	sbrs	r22, 0
    5cd6:	04 c0       	rjmp	.+8      	; 0x5ce0 <__fp_di2sf+0x70>
    5cd8:	6f 5f       	subi	r22, 0xFF	; 255
    5cda:	7f 4f       	sbci	r23, 0xFF	; 255
    5cdc:	8f 4f       	sbci	r24, 0xFF	; 255
    5cde:	9f 4f       	sbci	r25, 0xFF	; 255
    5ce0:	88 0f       	add	r24, r24
    5ce2:	96 95       	lsr	r25
    5ce4:	87 95       	ror	r24
    5ce6:	97 f9       	bld	r25, 7
    5ce8:	08 95       	ret

00005cea <__fp_cmp>:
    5cea:	99 0f       	add	r25, r25
    5cec:	00 08       	sbc	r0, r0
    5cee:	55 0f       	add	r21, r21
    5cf0:	aa 0b       	sbc	r26, r26
    5cf2:	e0 e8       	ldi	r30, 0x80	; 128
    5cf4:	fe ef       	ldi	r31, 0xFE	; 254
    5cf6:	16 16       	cp	r1, r22
    5cf8:	17 06       	cpc	r1, r23
    5cfa:	e8 07       	cpc	r30, r24
    5cfc:	f9 07       	cpc	r31, r25
    5cfe:	c0 f0       	brcs	.+48     	; 0x5d30 <__fp_cmp+0x46>
    5d00:	12 16       	cp	r1, r18
    5d02:	13 06       	cpc	r1, r19
    5d04:	e4 07       	cpc	r30, r20
    5d06:	f5 07       	cpc	r31, r21
    5d08:	98 f0       	brcs	.+38     	; 0x5d30 <__fp_cmp+0x46>
    5d0a:	62 1b       	sub	r22, r18
    5d0c:	73 0b       	sbc	r23, r19
    5d0e:	84 0b       	sbc	r24, r20
    5d10:	95 0b       	sbc	r25, r21
    5d12:	39 f4       	brne	.+14     	; 0x5d22 <__fp_cmp+0x38>
    5d14:	0a 26       	eor	r0, r26
    5d16:	61 f0       	breq	.+24     	; 0x5d30 <__fp_cmp+0x46>
    5d18:	23 2b       	or	r18, r19
    5d1a:	24 2b       	or	r18, r20
    5d1c:	25 2b       	or	r18, r21
    5d1e:	21 f4       	brne	.+8      	; 0x5d28 <__fp_cmp+0x3e>
    5d20:	08 95       	ret
    5d22:	0a 26       	eor	r0, r26
    5d24:	09 f4       	brne	.+2      	; 0x5d28 <__fp_cmp+0x3e>
    5d26:	a1 40       	sbci	r26, 0x01	; 1
    5d28:	a6 95       	lsr	r26
    5d2a:	8f ef       	ldi	r24, 0xFF	; 255
    5d2c:	81 1d       	adc	r24, r1
    5d2e:	81 1d       	adc	r24, r1
    5d30:	08 95       	ret

00005d32 <__fp_inf>:
    5d32:	97 f9       	bld	r25, 7
    5d34:	9f 67       	ori	r25, 0x7F	; 127
    5d36:	80 e8       	ldi	r24, 0x80	; 128
    5d38:	70 e0       	ldi	r23, 0x00	; 0
    5d3a:	60 e0       	ldi	r22, 0x00	; 0
    5d3c:	08 95       	ret

00005d3e <__fp_nan>:
    5d3e:	9f ef       	ldi	r25, 0xFF	; 255
    5d40:	80 ec       	ldi	r24, 0xC0	; 192
    5d42:	08 95       	ret

00005d44 <__fp_negdi>:
    5d44:	90 95       	com	r25
    5d46:	80 95       	com	r24
    5d48:	70 95       	com	r23
    5d4a:	60 95       	com	r22
    5d4c:	50 95       	com	r21
    5d4e:	40 95       	com	r20
    5d50:	30 95       	com	r19
    5d52:	21 95       	neg	r18
    5d54:	3f 4f       	sbci	r19, 0xFF	; 255
    5d56:	4f 4f       	sbci	r20, 0xFF	; 255
    5d58:	5f 4f       	sbci	r21, 0xFF	; 255
    5d5a:	6f 4f       	sbci	r22, 0xFF	; 255
    5d5c:	7f 4f       	sbci	r23, 0xFF	; 255
    5d5e:	8f 4f       	sbci	r24, 0xFF	; 255
    5d60:	9f 4f       	sbci	r25, 0xFF	; 255
    5d62:	08 95       	ret

00005d64 <__fp_pscA>:
    5d64:	00 24       	eor	r0, r0
    5d66:	0a 94       	dec	r0
    5d68:	16 16       	cp	r1, r22
    5d6a:	17 06       	cpc	r1, r23
    5d6c:	18 06       	cpc	r1, r24
    5d6e:	09 06       	cpc	r0, r25
    5d70:	08 95       	ret

00005d72 <__fp_pscB>:
    5d72:	00 24       	eor	r0, r0
    5d74:	0a 94       	dec	r0
    5d76:	12 16       	cp	r1, r18
    5d78:	13 06       	cpc	r1, r19
    5d7a:	14 06       	cpc	r1, r20
    5d7c:	05 06       	cpc	r0, r21
    5d7e:	08 95       	ret

00005d80 <__fp_round>:
    5d80:	09 2e       	mov	r0, r25
    5d82:	03 94       	inc	r0
    5d84:	00 0c       	add	r0, r0
    5d86:	11 f4       	brne	.+4      	; 0x5d8c <__fp_round+0xc>
    5d88:	88 23       	and	r24, r24
    5d8a:	52 f0       	brmi	.+20     	; 0x5da0 <__fp_round+0x20>
    5d8c:	bb 0f       	add	r27, r27
    5d8e:	40 f4       	brcc	.+16     	; 0x5da0 <__fp_round+0x20>
    5d90:	bf 2b       	or	r27, r31
    5d92:	11 f4       	brne	.+4      	; 0x5d98 <__fp_round+0x18>
    5d94:	60 ff       	sbrs	r22, 0
    5d96:	04 c0       	rjmp	.+8      	; 0x5da0 <__fp_round+0x20>
    5d98:	6f 5f       	subi	r22, 0xFF	; 255
    5d9a:	7f 4f       	sbci	r23, 0xFF	; 255
    5d9c:	8f 4f       	sbci	r24, 0xFF	; 255
    5d9e:	9f 4f       	sbci	r25, 0xFF	; 255
    5da0:	08 95       	ret

00005da2 <__fp_split3>:
    5da2:	57 fd       	sbrc	r21, 7
    5da4:	90 58       	subi	r25, 0x80	; 128
    5da6:	44 0f       	add	r20, r20
    5da8:	55 1f       	adc	r21, r21
    5daa:	59 f0       	breq	.+22     	; 0x5dc2 <__fp_splitA+0x10>
    5dac:	5f 3f       	cpi	r21, 0xFF	; 255
    5dae:	71 f0       	breq	.+28     	; 0x5dcc <__fp_splitA+0x1a>
    5db0:	47 95       	ror	r20

00005db2 <__fp_splitA>:
    5db2:	88 0f       	add	r24, r24
    5db4:	97 fb       	bst	r25, 7
    5db6:	99 1f       	adc	r25, r25
    5db8:	61 f0       	breq	.+24     	; 0x5dd2 <__fp_splitA+0x20>
    5dba:	9f 3f       	cpi	r25, 0xFF	; 255
    5dbc:	79 f0       	breq	.+30     	; 0x5ddc <__fp_splitA+0x2a>
    5dbe:	87 95       	ror	r24
    5dc0:	08 95       	ret
    5dc2:	12 16       	cp	r1, r18
    5dc4:	13 06       	cpc	r1, r19
    5dc6:	14 06       	cpc	r1, r20
    5dc8:	55 1f       	adc	r21, r21
    5dca:	f2 cf       	rjmp	.-28     	; 0x5db0 <__fp_split3+0xe>
    5dcc:	46 95       	lsr	r20
    5dce:	f1 df       	rcall	.-30     	; 0x5db2 <__fp_splitA>
    5dd0:	08 c0       	rjmp	.+16     	; 0x5de2 <__fp_splitA+0x30>
    5dd2:	16 16       	cp	r1, r22
    5dd4:	17 06       	cpc	r1, r23
    5dd6:	18 06       	cpc	r1, r24
    5dd8:	99 1f       	adc	r25, r25
    5dda:	f1 cf       	rjmp	.-30     	; 0x5dbe <__fp_splitA+0xc>
    5ddc:	86 95       	lsr	r24
    5dde:	71 05       	cpc	r23, r1
    5de0:	61 05       	cpc	r22, r1
    5de2:	08 94       	sec
    5de4:	08 95       	ret

00005de6 <__fp_zero>:
    5de6:	e8 94       	clt

00005de8 <__fp_szero>:
    5de8:	bb 27       	eor	r27, r27
    5dea:	66 27       	eor	r22, r22
    5dec:	77 27       	eor	r23, r23
    5dee:	cb 01       	movw	r24, r22
    5df0:	97 f9       	bld	r25, 7
    5df2:	08 95       	ret

00005df4 <__gesf2>:
    5df4:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__fp_cmp>
    5df8:	08 f4       	brcc	.+2      	; 0x5dfc <__gesf2+0x8>
    5dfa:	8f ef       	ldi	r24, 0xFF	; 255
    5dfc:	08 95       	ret

00005dfe <__mulsf3>:
    5dfe:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__mulsf3x>
    5e02:	0c 94 c0 2e 	jmp	0x5d80	; 0x5d80 <__fp_round>
    5e06:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__fp_pscA>
    5e0a:	38 f0       	brcs	.+14     	; 0x5e1a <__mulsf3+0x1c>
    5e0c:	0e 94 b9 2e 	call	0x5d72	; 0x5d72 <__fp_pscB>
    5e10:	20 f0       	brcs	.+8      	; 0x5e1a <__mulsf3+0x1c>
    5e12:	95 23       	and	r25, r21
    5e14:	11 f0       	breq	.+4      	; 0x5e1a <__mulsf3+0x1c>
    5e16:	0c 94 99 2e 	jmp	0x5d32	; 0x5d32 <__fp_inf>
    5e1a:	0c 94 9f 2e 	jmp	0x5d3e	; 0x5d3e <__fp_nan>
    5e1e:	11 24       	eor	r1, r1
    5e20:	0c 94 f4 2e 	jmp	0x5de8	; 0x5de8 <__fp_szero>

00005e24 <__mulsf3x>:
    5e24:	0e 94 d1 2e 	call	0x5da2	; 0x5da2 <__fp_split3>
    5e28:	70 f3       	brcs	.-36     	; 0x5e06 <__mulsf3+0x8>

00005e2a <__mulsf3_pse>:
    5e2a:	95 9f       	mul	r25, r21
    5e2c:	c1 f3       	breq	.-16     	; 0x5e1e <__mulsf3+0x20>
    5e2e:	95 0f       	add	r25, r21
    5e30:	50 e0       	ldi	r21, 0x00	; 0
    5e32:	55 1f       	adc	r21, r21
    5e34:	62 9f       	mul	r22, r18
    5e36:	f0 01       	movw	r30, r0
    5e38:	72 9f       	mul	r23, r18
    5e3a:	bb 27       	eor	r27, r27
    5e3c:	f0 0d       	add	r31, r0
    5e3e:	b1 1d       	adc	r27, r1
    5e40:	63 9f       	mul	r22, r19
    5e42:	aa 27       	eor	r26, r26
    5e44:	f0 0d       	add	r31, r0
    5e46:	b1 1d       	adc	r27, r1
    5e48:	aa 1f       	adc	r26, r26
    5e4a:	64 9f       	mul	r22, r20
    5e4c:	66 27       	eor	r22, r22
    5e4e:	b0 0d       	add	r27, r0
    5e50:	a1 1d       	adc	r26, r1
    5e52:	66 1f       	adc	r22, r22
    5e54:	82 9f       	mul	r24, r18
    5e56:	22 27       	eor	r18, r18
    5e58:	b0 0d       	add	r27, r0
    5e5a:	a1 1d       	adc	r26, r1
    5e5c:	62 1f       	adc	r22, r18
    5e5e:	73 9f       	mul	r23, r19
    5e60:	b0 0d       	add	r27, r0
    5e62:	a1 1d       	adc	r26, r1
    5e64:	62 1f       	adc	r22, r18
    5e66:	83 9f       	mul	r24, r19
    5e68:	a0 0d       	add	r26, r0
    5e6a:	61 1d       	adc	r22, r1
    5e6c:	22 1f       	adc	r18, r18
    5e6e:	74 9f       	mul	r23, r20
    5e70:	33 27       	eor	r19, r19
    5e72:	a0 0d       	add	r26, r0
    5e74:	61 1d       	adc	r22, r1
    5e76:	23 1f       	adc	r18, r19
    5e78:	84 9f       	mul	r24, r20
    5e7a:	60 0d       	add	r22, r0
    5e7c:	21 1d       	adc	r18, r1
    5e7e:	82 2f       	mov	r24, r18
    5e80:	76 2f       	mov	r23, r22
    5e82:	6a 2f       	mov	r22, r26
    5e84:	11 24       	eor	r1, r1
    5e86:	9f 57       	subi	r25, 0x7F	; 127
    5e88:	50 40       	sbci	r21, 0x00	; 0
    5e8a:	9a f0       	brmi	.+38     	; 0x5eb2 <__mulsf3_pse+0x88>
    5e8c:	f1 f0       	breq	.+60     	; 0x5eca <__mulsf3_pse+0xa0>
    5e8e:	88 23       	and	r24, r24
    5e90:	4a f0       	brmi	.+18     	; 0x5ea4 <__mulsf3_pse+0x7a>
    5e92:	ee 0f       	add	r30, r30
    5e94:	ff 1f       	adc	r31, r31
    5e96:	bb 1f       	adc	r27, r27
    5e98:	66 1f       	adc	r22, r22
    5e9a:	77 1f       	adc	r23, r23
    5e9c:	88 1f       	adc	r24, r24
    5e9e:	91 50       	subi	r25, 0x01	; 1
    5ea0:	50 40       	sbci	r21, 0x00	; 0
    5ea2:	a9 f7       	brne	.-22     	; 0x5e8e <__mulsf3_pse+0x64>
    5ea4:	9e 3f       	cpi	r25, 0xFE	; 254
    5ea6:	51 05       	cpc	r21, r1
    5ea8:	80 f0       	brcs	.+32     	; 0x5eca <__mulsf3_pse+0xa0>
    5eaa:	0c 94 99 2e 	jmp	0x5d32	; 0x5d32 <__fp_inf>
    5eae:	0c 94 f4 2e 	jmp	0x5de8	; 0x5de8 <__fp_szero>
    5eb2:	5f 3f       	cpi	r21, 0xFF	; 255
    5eb4:	e4 f3       	brlt	.-8      	; 0x5eae <__mulsf3_pse+0x84>
    5eb6:	98 3e       	cpi	r25, 0xE8	; 232
    5eb8:	d4 f3       	brlt	.-12     	; 0x5eae <__mulsf3_pse+0x84>
    5eba:	86 95       	lsr	r24
    5ebc:	77 95       	ror	r23
    5ebe:	67 95       	ror	r22
    5ec0:	b7 95       	ror	r27
    5ec2:	f7 95       	ror	r31
    5ec4:	e7 95       	ror	r30
    5ec6:	9f 5f       	subi	r25, 0xFF	; 255
    5ec8:	c1 f7       	brne	.-16     	; 0x5eba <__mulsf3_pse+0x90>
    5eca:	fe 2b       	or	r31, r30
    5ecc:	88 0f       	add	r24, r24
    5ece:	91 1d       	adc	r25, r1
    5ed0:	96 95       	lsr	r25
    5ed2:	87 95       	ror	r24
    5ed4:	97 f9       	bld	r25, 7
    5ed6:	08 95       	ret

00005ed8 <__mulsi3>:
    5ed8:	db 01       	movw	r26, r22
    5eda:	8f 93       	push	r24
    5edc:	9f 93       	push	r25
    5ede:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <__muluhisi3>
    5ee2:	bf 91       	pop	r27
    5ee4:	af 91       	pop	r26
    5ee6:	a2 9f       	mul	r26, r18
    5ee8:	80 0d       	add	r24, r0
    5eea:	91 1d       	adc	r25, r1
    5eec:	a3 9f       	mul	r26, r19
    5eee:	90 0d       	add	r25, r0
    5ef0:	b2 9f       	mul	r27, r18
    5ef2:	90 0d       	add	r25, r0
    5ef4:	11 24       	eor	r1, r1
    5ef6:	08 95       	ret

00005ef8 <__udivmodsi4>:
    5ef8:	a1 e2       	ldi	r26, 0x21	; 33
    5efa:	1a 2e       	mov	r1, r26
    5efc:	aa 1b       	sub	r26, r26
    5efe:	bb 1b       	sub	r27, r27
    5f00:	fd 01       	movw	r30, r26
    5f02:	0d c0       	rjmp	.+26     	; 0x5f1e <__udivmodsi4_ep>

00005f04 <__udivmodsi4_loop>:
    5f04:	aa 1f       	adc	r26, r26
    5f06:	bb 1f       	adc	r27, r27
    5f08:	ee 1f       	adc	r30, r30
    5f0a:	ff 1f       	adc	r31, r31
    5f0c:	a2 17       	cp	r26, r18
    5f0e:	b3 07       	cpc	r27, r19
    5f10:	e4 07       	cpc	r30, r20
    5f12:	f5 07       	cpc	r31, r21
    5f14:	20 f0       	brcs	.+8      	; 0x5f1e <__udivmodsi4_ep>
    5f16:	a2 1b       	sub	r26, r18
    5f18:	b3 0b       	sbc	r27, r19
    5f1a:	e4 0b       	sbc	r30, r20
    5f1c:	f5 0b       	sbc	r31, r21

00005f1e <__udivmodsi4_ep>:
    5f1e:	66 1f       	adc	r22, r22
    5f20:	77 1f       	adc	r23, r23
    5f22:	88 1f       	adc	r24, r24
    5f24:	99 1f       	adc	r25, r25
    5f26:	1a 94       	dec	r1
    5f28:	69 f7       	brne	.-38     	; 0x5f04 <__udivmodsi4_loop>
    5f2a:	60 95       	com	r22
    5f2c:	70 95       	com	r23
    5f2e:	80 95       	com	r24
    5f30:	90 95       	com	r25
    5f32:	9b 01       	movw	r18, r22
    5f34:	ac 01       	movw	r20, r24
    5f36:	bd 01       	movw	r22, r26
    5f38:	cf 01       	movw	r24, r30
    5f3a:	08 95       	ret

00005f3c <__tablejump2__>:
    5f3c:	ee 0f       	add	r30, r30
    5f3e:	ff 1f       	adc	r31, r31
    5f40:	05 90       	lpm	r0, Z+
    5f42:	f4 91       	lpm	r31, Z
    5f44:	e0 2d       	mov	r30, r0
    5f46:	09 94       	ijmp

00005f48 <__muluhisi3>:
    5f48:	0e 94 3c 31 	call	0x6278	; 0x6278 <__umulhisi3>
    5f4c:	a5 9f       	mul	r26, r21
    5f4e:	90 0d       	add	r25, r0
    5f50:	b4 9f       	mul	r27, r20
    5f52:	90 0d       	add	r25, r0
    5f54:	a4 9f       	mul	r26, r20
    5f56:	80 0d       	add	r24, r0
    5f58:	91 1d       	adc	r25, r1
    5f5a:	11 24       	eor	r1, r1
    5f5c:	08 95       	ret

00005f5e <__mulshisi3>:
    5f5e:	b7 ff       	sbrs	r27, 7
    5f60:	0c 94 a4 2f 	jmp	0x5f48	; 0x5f48 <__muluhisi3>

00005f64 <__mulohisi3>:
    5f64:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <__muluhisi3>
    5f68:	82 1b       	sub	r24, r18
    5f6a:	93 0b       	sbc	r25, r19
    5f6c:	08 95       	ret

00005f6e <__muldi3>:
    5f6e:	df 93       	push	r29
    5f70:	cf 93       	push	r28
    5f72:	1f 93       	push	r17
    5f74:	0f 93       	push	r16
    5f76:	9a 9d       	mul	r25, r10
    5f78:	f0 2d       	mov	r31, r0
    5f7a:	21 9f       	mul	r18, r17
    5f7c:	f0 0d       	add	r31, r0
    5f7e:	8b 9d       	mul	r24, r11
    5f80:	f0 0d       	add	r31, r0
    5f82:	8a 9d       	mul	r24, r10
    5f84:	e0 2d       	mov	r30, r0
    5f86:	f1 0d       	add	r31, r1
    5f88:	03 9f       	mul	r16, r19
    5f8a:	f0 0d       	add	r31, r0
    5f8c:	02 9f       	mul	r16, r18
    5f8e:	e0 0d       	add	r30, r0
    5f90:	f1 1d       	adc	r31, r1
    5f92:	4e 9d       	mul	r20, r14
    5f94:	e0 0d       	add	r30, r0
    5f96:	f1 1d       	adc	r31, r1
    5f98:	5e 9d       	mul	r21, r14
    5f9a:	f0 0d       	add	r31, r0
    5f9c:	4f 9d       	mul	r20, r15
    5f9e:	f0 0d       	add	r31, r0
    5fa0:	7f 93       	push	r23
    5fa2:	6f 93       	push	r22
    5fa4:	bf 92       	push	r11
    5fa6:	af 92       	push	r10
    5fa8:	5f 93       	push	r21
    5faa:	4f 93       	push	r20
    5fac:	d5 01       	movw	r26, r10
    5fae:	0e 94 3c 31 	call	0x6278	; 0x6278 <__umulhisi3>
    5fb2:	8b 01       	movw	r16, r22
    5fb4:	ac 01       	movw	r20, r24
    5fb6:	d7 01       	movw	r26, r14
    5fb8:	0e 94 3c 31 	call	0x6278	; 0x6278 <__umulhisi3>
    5fbc:	eb 01       	movw	r28, r22
    5fbe:	e8 0f       	add	r30, r24
    5fc0:	f9 1f       	adc	r31, r25
    5fc2:	d6 01       	movw	r26, r12
    5fc4:	0e 94 07 30 	call	0x600e	; 0x600e <__muldi3_6>
    5fc8:	2f 91       	pop	r18
    5fca:	3f 91       	pop	r19
    5fcc:	d6 01       	movw	r26, r12
    5fce:	0e 94 3c 31 	call	0x6278	; 0x6278 <__umulhisi3>
    5fd2:	c6 0f       	add	r28, r22
    5fd4:	d7 1f       	adc	r29, r23
    5fd6:	e8 1f       	adc	r30, r24
    5fd8:	f9 1f       	adc	r31, r25
    5fda:	af 91       	pop	r26
    5fdc:	bf 91       	pop	r27
    5fde:	0e 94 07 30 	call	0x600e	; 0x600e <__muldi3_6>
    5fe2:	2f 91       	pop	r18
    5fe4:	3f 91       	pop	r19
    5fe6:	0e 94 3c 31 	call	0x6278	; 0x6278 <__umulhisi3>
    5fea:	c6 0f       	add	r28, r22
    5fec:	d7 1f       	adc	r29, r23
    5fee:	e8 1f       	adc	r30, r24
    5ff0:	f9 1f       	adc	r31, r25
    5ff2:	d6 01       	movw	r26, r12
    5ff4:	0e 94 3c 31 	call	0x6278	; 0x6278 <__umulhisi3>
    5ff8:	e6 0f       	add	r30, r22
    5ffa:	f7 1f       	adc	r31, r23
    5ffc:	98 01       	movw	r18, r16
    5ffe:	be 01       	movw	r22, r28
    6000:	cf 01       	movw	r24, r30
    6002:	11 24       	eor	r1, r1
    6004:	0f 91       	pop	r16
    6006:	1f 91       	pop	r17
    6008:	cf 91       	pop	r28
    600a:	df 91       	pop	r29
    600c:	08 95       	ret

0000600e <__muldi3_6>:
    600e:	0e 94 3c 31 	call	0x6278	; 0x6278 <__umulhisi3>
    6012:	46 0f       	add	r20, r22
    6014:	57 1f       	adc	r21, r23
    6016:	c8 1f       	adc	r28, r24
    6018:	d9 1f       	adc	r29, r25
    601a:	08 f4       	brcc	.+2      	; 0x601e <__muldi3_6+0x10>
    601c:	31 96       	adiw	r30, 0x01	; 1
    601e:	08 95       	ret

00006020 <__moddi3>:
    6020:	68 94       	set
    6022:	01 c0       	rjmp	.+2      	; 0x6026 <__divdi3_moddi3>

00006024 <__divdi3>:
    6024:	e8 94       	clt

00006026 <__divdi3_moddi3>:
    6026:	f9 2f       	mov	r31, r25
    6028:	f1 2b       	or	r31, r17
    602a:	12 f0       	brmi	.+4      	; 0x6030 <__divdi3_moddi3+0xa>
    602c:	0c 94 44 30 	jmp	0x6088	; 0x6088 <__udivdi3_umoddi3>
    6030:	a0 e0       	ldi	r26, 0x00	; 0
    6032:	b0 e0       	ldi	r27, 0x00	; 0
    6034:	ee e1       	ldi	r30, 0x1E	; 30
    6036:	f0 e3       	ldi	r31, 0x30	; 48
    6038:	0c 94 b6 30 	jmp	0x616c	; 0x616c <__prologue_saves__+0xc>
    603c:	09 2e       	mov	r0, r25
    603e:	05 94       	asr	r0
    6040:	22 f4       	brpl	.+8      	; 0x604a <__divdi3_moddi3+0x24>
    6042:	0e 94 a0 30 	call	0x6140	; 0x6140 <__negdi2>
    6046:	11 23       	and	r17, r17
    6048:	92 f4       	brpl	.+36     	; 0x606e <__divdi3_moddi3+0x48>
    604a:	f0 e8       	ldi	r31, 0x80	; 128
    604c:	0f 26       	eor	r0, r31
    604e:	ff ef       	ldi	r31, 0xFF	; 255
    6050:	e0 94       	com	r14
    6052:	f0 94       	com	r15
    6054:	00 95       	com	r16
    6056:	10 95       	com	r17
    6058:	b0 94       	com	r11
    605a:	c0 94       	com	r12
    605c:	d0 94       	com	r13
    605e:	a1 94       	neg	r10
    6060:	bf 0a       	sbc	r11, r31
    6062:	cf 0a       	sbc	r12, r31
    6064:	df 0a       	sbc	r13, r31
    6066:	ef 0a       	sbc	r14, r31
    6068:	ff 0a       	sbc	r15, r31
    606a:	0f 0b       	sbc	r16, r31
    606c:	1f 0b       	sbc	r17, r31
    606e:	0e 94 4f 30 	call	0x609e	; 0x609e <__udivmod64>
    6072:	07 fc       	sbrc	r0, 7
    6074:	0e 94 a0 30 	call	0x6140	; 0x6140 <__negdi2>
    6078:	cd b7       	in	r28, 0x3d	; 61
    607a:	de b7       	in	r29, 0x3e	; 62
    607c:	ec e0       	ldi	r30, 0x0C	; 12
    607e:	0c 94 d2 30 	jmp	0x61a4	; 0x61a4 <__epilogue_restores__+0xc>

00006082 <__umoddi3>:
    6082:	68 94       	set
    6084:	01 c0       	rjmp	.+2      	; 0x6088 <__udivdi3_umoddi3>

00006086 <__udivdi3>:
    6086:	e8 94       	clt

00006088 <__udivdi3_umoddi3>:
    6088:	8f 92       	push	r8
    608a:	9f 92       	push	r9
    608c:	cf 93       	push	r28
    608e:	df 93       	push	r29
    6090:	0e 94 4f 30 	call	0x609e	; 0x609e <__udivmod64>
    6094:	df 91       	pop	r29
    6096:	cf 91       	pop	r28
    6098:	9f 90       	pop	r9
    609a:	8f 90       	pop	r8
    609c:	08 95       	ret

0000609e <__udivmod64>:
    609e:	88 24       	eor	r8, r8
    60a0:	99 24       	eor	r9, r9
    60a2:	f4 01       	movw	r30, r8
    60a4:	e4 01       	movw	r28, r8
    60a6:	b0 e4       	ldi	r27, 0x40	; 64
    60a8:	9f 93       	push	r25
    60aa:	aa 27       	eor	r26, r26
    60ac:	9a 15       	cp	r25, r10
    60ae:	8b 04       	cpc	r8, r11
    60b0:	9c 04       	cpc	r9, r12
    60b2:	ed 05       	cpc	r30, r13
    60b4:	fe 05       	cpc	r31, r14
    60b6:	cf 05       	cpc	r28, r15
    60b8:	d0 07       	cpc	r29, r16
    60ba:	a1 07       	cpc	r26, r17
    60bc:	98 f4       	brcc	.+38     	; 0x60e4 <__udivmod64+0x46>
    60be:	ad 2f       	mov	r26, r29
    60c0:	dc 2f       	mov	r29, r28
    60c2:	cf 2f       	mov	r28, r31
    60c4:	fe 2f       	mov	r31, r30
    60c6:	e9 2d       	mov	r30, r9
    60c8:	98 2c       	mov	r9, r8
    60ca:	89 2e       	mov	r8, r25
    60cc:	98 2f       	mov	r25, r24
    60ce:	87 2f       	mov	r24, r23
    60d0:	76 2f       	mov	r23, r22
    60d2:	65 2f       	mov	r22, r21
    60d4:	54 2f       	mov	r21, r20
    60d6:	43 2f       	mov	r20, r19
    60d8:	32 2f       	mov	r19, r18
    60da:	22 27       	eor	r18, r18
    60dc:	b8 50       	subi	r27, 0x08	; 8
    60de:	31 f7       	brne	.-52     	; 0x60ac <__udivmod64+0xe>
    60e0:	bf 91       	pop	r27
    60e2:	27 c0       	rjmp	.+78     	; 0x6132 <__udivmod64+0x94>
    60e4:	1b 2e       	mov	r1, r27
    60e6:	bf 91       	pop	r27
    60e8:	bb 27       	eor	r27, r27
    60ea:	22 0f       	add	r18, r18
    60ec:	33 1f       	adc	r19, r19
    60ee:	44 1f       	adc	r20, r20
    60f0:	55 1f       	adc	r21, r21
    60f2:	66 1f       	adc	r22, r22
    60f4:	77 1f       	adc	r23, r23
    60f6:	88 1f       	adc	r24, r24
    60f8:	99 1f       	adc	r25, r25
    60fa:	88 1c       	adc	r8, r8
    60fc:	99 1c       	adc	r9, r9
    60fe:	ee 1f       	adc	r30, r30
    6100:	ff 1f       	adc	r31, r31
    6102:	cc 1f       	adc	r28, r28
    6104:	dd 1f       	adc	r29, r29
    6106:	aa 1f       	adc	r26, r26
    6108:	bb 1f       	adc	r27, r27
    610a:	8a 14       	cp	r8, r10
    610c:	9b 04       	cpc	r9, r11
    610e:	ec 05       	cpc	r30, r12
    6110:	fd 05       	cpc	r31, r13
    6112:	ce 05       	cpc	r28, r14
    6114:	df 05       	cpc	r29, r15
    6116:	a0 07       	cpc	r26, r16
    6118:	b1 07       	cpc	r27, r17
    611a:	48 f0       	brcs	.+18     	; 0x612e <__udivmod64+0x90>
    611c:	8a 18       	sub	r8, r10
    611e:	9b 08       	sbc	r9, r11
    6120:	ec 09       	sbc	r30, r12
    6122:	fd 09       	sbc	r31, r13
    6124:	ce 09       	sbc	r28, r14
    6126:	df 09       	sbc	r29, r15
    6128:	a0 0b       	sbc	r26, r16
    612a:	b1 0b       	sbc	r27, r17
    612c:	21 60       	ori	r18, 0x01	; 1
    612e:	1a 94       	dec	r1
    6130:	e1 f6       	brne	.-72     	; 0x60ea <__udivmod64+0x4c>
    6132:	2e f4       	brtc	.+10     	; 0x613e <__udivmod64+0xa0>
    6134:	94 01       	movw	r18, r8
    6136:	af 01       	movw	r20, r30
    6138:	be 01       	movw	r22, r28
    613a:	cd 01       	movw	r24, r26
    613c:	00 0c       	add	r0, r0
    613e:	08 95       	ret

00006140 <__negdi2>:
    6140:	60 95       	com	r22
    6142:	70 95       	com	r23
    6144:	80 95       	com	r24
    6146:	90 95       	com	r25
    6148:	30 95       	com	r19
    614a:	40 95       	com	r20
    614c:	50 95       	com	r21
    614e:	21 95       	neg	r18
    6150:	3f 4f       	sbci	r19, 0xFF	; 255
    6152:	4f 4f       	sbci	r20, 0xFF	; 255
    6154:	5f 4f       	sbci	r21, 0xFF	; 255
    6156:	6f 4f       	sbci	r22, 0xFF	; 255
    6158:	7f 4f       	sbci	r23, 0xFF	; 255
    615a:	8f 4f       	sbci	r24, 0xFF	; 255
    615c:	9f 4f       	sbci	r25, 0xFF	; 255
    615e:	08 95       	ret

00006160 <__prologue_saves__>:
    6160:	2f 92       	push	r2
    6162:	3f 92       	push	r3
    6164:	4f 92       	push	r4
    6166:	5f 92       	push	r5
    6168:	6f 92       	push	r6
    616a:	7f 92       	push	r7
    616c:	8f 92       	push	r8
    616e:	9f 92       	push	r9
    6170:	af 92       	push	r10
    6172:	bf 92       	push	r11
    6174:	cf 92       	push	r12
    6176:	df 92       	push	r13
    6178:	ef 92       	push	r14
    617a:	ff 92       	push	r15
    617c:	0f 93       	push	r16
    617e:	1f 93       	push	r17
    6180:	cf 93       	push	r28
    6182:	df 93       	push	r29
    6184:	cd b7       	in	r28, 0x3d	; 61
    6186:	de b7       	in	r29, 0x3e	; 62
    6188:	ca 1b       	sub	r28, r26
    618a:	db 0b       	sbc	r29, r27
    618c:	0f b6       	in	r0, 0x3f	; 63
    618e:	f8 94       	cli
    6190:	de bf       	out	0x3e, r29	; 62
    6192:	0f be       	out	0x3f, r0	; 63
    6194:	cd bf       	out	0x3d, r28	; 61
    6196:	09 94       	ijmp

00006198 <__epilogue_restores__>:
    6198:	2a 88       	ldd	r2, Y+18	; 0x12
    619a:	39 88       	ldd	r3, Y+17	; 0x11
    619c:	48 88       	ldd	r4, Y+16	; 0x10
    619e:	5f 84       	ldd	r5, Y+15	; 0x0f
    61a0:	6e 84       	ldd	r6, Y+14	; 0x0e
    61a2:	7d 84       	ldd	r7, Y+13	; 0x0d
    61a4:	8c 84       	ldd	r8, Y+12	; 0x0c
    61a6:	9b 84       	ldd	r9, Y+11	; 0x0b
    61a8:	aa 84       	ldd	r10, Y+10	; 0x0a
    61aa:	b9 84       	ldd	r11, Y+9	; 0x09
    61ac:	c8 84       	ldd	r12, Y+8	; 0x08
    61ae:	df 80       	ldd	r13, Y+7	; 0x07
    61b0:	ee 80       	ldd	r14, Y+6	; 0x06
    61b2:	fd 80       	ldd	r15, Y+5	; 0x05
    61b4:	0c 81       	ldd	r16, Y+4	; 0x04
    61b6:	1b 81       	ldd	r17, Y+3	; 0x03
    61b8:	aa 81       	ldd	r26, Y+2	; 0x02
    61ba:	b9 81       	ldd	r27, Y+1	; 0x01
    61bc:	ce 0f       	add	r28, r30
    61be:	d1 1d       	adc	r29, r1
    61c0:	0f b6       	in	r0, 0x3f	; 63
    61c2:	f8 94       	cli
    61c4:	de bf       	out	0x3e, r29	; 62
    61c6:	0f be       	out	0x3f, r0	; 63
    61c8:	cd bf       	out	0x3d, r28	; 61
    61ca:	ed 01       	movw	r28, r26
    61cc:	08 95       	ret

000061ce <__ashldi3>:
    61ce:	0f 93       	push	r16
    61d0:	08 30       	cpi	r16, 0x08	; 8
    61d2:	90 f0       	brcs	.+36     	; 0x61f8 <__ashldi3+0x2a>
    61d4:	98 2f       	mov	r25, r24
    61d6:	87 2f       	mov	r24, r23
    61d8:	76 2f       	mov	r23, r22
    61da:	65 2f       	mov	r22, r21
    61dc:	54 2f       	mov	r21, r20
    61de:	43 2f       	mov	r20, r19
    61e0:	32 2f       	mov	r19, r18
    61e2:	22 27       	eor	r18, r18
    61e4:	08 50       	subi	r16, 0x08	; 8
    61e6:	f4 cf       	rjmp	.-24     	; 0x61d0 <__ashldi3+0x2>
    61e8:	22 0f       	add	r18, r18
    61ea:	33 1f       	adc	r19, r19
    61ec:	44 1f       	adc	r20, r20
    61ee:	55 1f       	adc	r21, r21
    61f0:	66 1f       	adc	r22, r22
    61f2:	77 1f       	adc	r23, r23
    61f4:	88 1f       	adc	r24, r24
    61f6:	99 1f       	adc	r25, r25
    61f8:	0a 95       	dec	r16
    61fa:	b2 f7       	brpl	.-20     	; 0x61e8 <__ashldi3+0x1a>
    61fc:	0f 91       	pop	r16
    61fe:	08 95       	ret

00006200 <__ashrdi3>:
    6200:	97 fb       	bst	r25, 7
    6202:	10 f8       	bld	r1, 0

00006204 <__lshrdi3>:
    6204:	16 94       	lsr	r1
    6206:	00 08       	sbc	r0, r0
    6208:	0f 93       	push	r16
    620a:	08 30       	cpi	r16, 0x08	; 8
    620c:	98 f0       	brcs	.+38     	; 0x6234 <__lshrdi3+0x30>
    620e:	08 50       	subi	r16, 0x08	; 8
    6210:	23 2f       	mov	r18, r19
    6212:	34 2f       	mov	r19, r20
    6214:	45 2f       	mov	r20, r21
    6216:	56 2f       	mov	r21, r22
    6218:	67 2f       	mov	r22, r23
    621a:	78 2f       	mov	r23, r24
    621c:	89 2f       	mov	r24, r25
    621e:	90 2d       	mov	r25, r0
    6220:	f4 cf       	rjmp	.-24     	; 0x620a <__lshrdi3+0x6>
    6222:	05 94       	asr	r0
    6224:	97 95       	ror	r25
    6226:	87 95       	ror	r24
    6228:	77 95       	ror	r23
    622a:	67 95       	ror	r22
    622c:	57 95       	ror	r21
    622e:	47 95       	ror	r20
    6230:	37 95       	ror	r19
    6232:	27 95       	ror	r18
    6234:	0a 95       	dec	r16
    6236:	aa f7       	brpl	.-22     	; 0x6222 <__lshrdi3+0x1e>
    6238:	0f 91       	pop	r16
    623a:	08 95       	ret

0000623c <__adddi3>:
    623c:	2a 0d       	add	r18, r10
    623e:	3b 1d       	adc	r19, r11
    6240:	4c 1d       	adc	r20, r12
    6242:	5d 1d       	adc	r21, r13
    6244:	6e 1d       	adc	r22, r14
    6246:	7f 1d       	adc	r23, r15
    6248:	80 1f       	adc	r24, r16
    624a:	91 1f       	adc	r25, r17
    624c:	08 95       	ret

0000624e <__subdi3>:
    624e:	2a 19       	sub	r18, r10
    6250:	3b 09       	sbc	r19, r11
    6252:	4c 09       	sbc	r20, r12
    6254:	5d 09       	sbc	r21, r13
    6256:	6e 09       	sbc	r22, r14
    6258:	7f 09       	sbc	r23, r15
    625a:	80 0b       	sbc	r24, r16
    625c:	91 0b       	sbc	r25, r17
    625e:	08 95       	ret

00006260 <__cmpdi2_s8>:
    6260:	00 24       	eor	r0, r0
    6262:	a7 fd       	sbrc	r26, 7
    6264:	00 94       	com	r0
    6266:	2a 17       	cp	r18, r26
    6268:	30 05       	cpc	r19, r0
    626a:	40 05       	cpc	r20, r0
    626c:	50 05       	cpc	r21, r0
    626e:	60 05       	cpc	r22, r0
    6270:	70 05       	cpc	r23, r0
    6272:	80 05       	cpc	r24, r0
    6274:	90 05       	cpc	r25, r0
    6276:	08 95       	ret

00006278 <__umulhisi3>:
    6278:	a2 9f       	mul	r26, r18
    627a:	b0 01       	movw	r22, r0
    627c:	b3 9f       	mul	r27, r19
    627e:	c0 01       	movw	r24, r0
    6280:	a3 9f       	mul	r26, r19
    6282:	70 0d       	add	r23, r0
    6284:	81 1d       	adc	r24, r1
    6286:	11 24       	eor	r1, r1
    6288:	91 1d       	adc	r25, r1
    628a:	b2 9f       	mul	r27, r18
    628c:	70 0d       	add	r23, r0
    628e:	81 1d       	adc	r24, r1
    6290:	11 24       	eor	r1, r1
    6292:	91 1d       	adc	r25, r1
    6294:	08 95       	ret

00006296 <dtostrf>:
    6296:	ef 92       	push	r14
    6298:	0f 93       	push	r16
    629a:	1f 93       	push	r17
    629c:	cf 93       	push	r28
    629e:	df 93       	push	r29
    62a0:	e8 01       	movw	r28, r16
    62a2:	47 fd       	sbrc	r20, 7
    62a4:	02 c0       	rjmp	.+4      	; 0x62aa <dtostrf+0x14>
    62a6:	34 e0       	ldi	r19, 0x04	; 4
    62a8:	01 c0       	rjmp	.+2      	; 0x62ac <dtostrf+0x16>
    62aa:	34 e1       	ldi	r19, 0x14	; 20
    62ac:	04 2e       	mov	r0, r20
    62ae:	00 0c       	add	r0, r0
    62b0:	55 0b       	sbc	r21, r21
    62b2:	57 ff       	sbrs	r21, 7
    62b4:	03 c0       	rjmp	.+6      	; 0x62bc <dtostrf+0x26>
    62b6:	51 95       	neg	r21
    62b8:	41 95       	neg	r20
    62ba:	51 09       	sbc	r21, r1
    62bc:	e3 2e       	mov	r14, r19
    62be:	02 2f       	mov	r16, r18
    62c0:	24 2f       	mov	r18, r20
    62c2:	ae 01       	movw	r20, r28
    62c4:	0e 94 d6 38 	call	0x71ac	; 0x71ac <dtoa_prf>
    62c8:	ce 01       	movw	r24, r28
    62ca:	df 91       	pop	r29
    62cc:	cf 91       	pop	r28
    62ce:	1f 91       	pop	r17
    62d0:	0f 91       	pop	r16
    62d2:	ef 90       	pop	r14
    62d4:	08 95       	ret

000062d6 <strtol>:
    62d6:	a0 e0       	ldi	r26, 0x00	; 0
    62d8:	b0 e0       	ldi	r27, 0x00	; 0
    62da:	e1 e7       	ldi	r30, 0x71	; 113
    62dc:	f1 e3       	ldi	r31, 0x31	; 49
    62de:	0c 94 b1 30 	jmp	0x6162	; 0x6162 <__prologue_saves__+0x2>
    62e2:	5c 01       	movw	r10, r24
    62e4:	6b 01       	movw	r12, r22
    62e6:	7a 01       	movw	r14, r20
    62e8:	61 15       	cp	r22, r1
    62ea:	71 05       	cpc	r23, r1
    62ec:	19 f0       	breq	.+6      	; 0x62f4 <strtol+0x1e>
    62ee:	fb 01       	movw	r30, r22
    62f0:	91 83       	std	Z+1, r25	; 0x01
    62f2:	80 83       	st	Z, r24
    62f4:	e1 14       	cp	r14, r1
    62f6:	f1 04       	cpc	r15, r1
    62f8:	29 f0       	breq	.+10     	; 0x6304 <strtol+0x2e>
    62fa:	c7 01       	movw	r24, r14
    62fc:	02 97       	sbiw	r24, 0x02	; 2
    62fe:	83 97       	sbiw	r24, 0x23	; 35
    6300:	08 f0       	brcs	.+2      	; 0x6304 <strtol+0x2e>
    6302:	e5 c0       	rjmp	.+458    	; 0x64ce <strtol+0x1f8>
    6304:	e5 01       	movw	r28, r10
    6306:	21 96       	adiw	r28, 0x01	; 1
    6308:	f5 01       	movw	r30, r10
    630a:	10 81       	ld	r17, Z
    630c:	81 2f       	mov	r24, r17
    630e:	90 e0       	ldi	r25, 0x00	; 0
    6310:	0e 94 a2 32 	call	0x6544	; 0x6544 <isspace>
    6314:	89 2b       	or	r24, r25
    6316:	11 f0       	breq	.+4      	; 0x631c <strtol+0x46>
    6318:	5e 01       	movw	r10, r28
    631a:	f4 cf       	rjmp	.-24     	; 0x6304 <strtol+0x2e>
    631c:	1d 32       	cpi	r17, 0x2D	; 45
    631e:	29 f4       	brne	.+10     	; 0x632a <strtol+0x54>
    6320:	21 96       	adiw	r28, 0x01	; 1
    6322:	f5 01       	movw	r30, r10
    6324:	11 81       	ldd	r17, Z+1	; 0x01
    6326:	01 e0       	ldi	r16, 0x01	; 1
    6328:	07 c0       	rjmp	.+14     	; 0x6338 <strtol+0x62>
    632a:	1b 32       	cpi	r17, 0x2B	; 43
    632c:	21 f4       	brne	.+8      	; 0x6336 <strtol+0x60>
    632e:	e5 01       	movw	r28, r10
    6330:	22 96       	adiw	r28, 0x02	; 2
    6332:	f5 01       	movw	r30, r10
    6334:	11 81       	ldd	r17, Z+1	; 0x01
    6336:	00 e0       	ldi	r16, 0x00	; 0
    6338:	e1 14       	cp	r14, r1
    633a:	f1 04       	cpc	r15, r1
    633c:	09 f1       	breq	.+66     	; 0x6380 <strtol+0xaa>
    633e:	f0 e1       	ldi	r31, 0x10	; 16
    6340:	ef 16       	cp	r14, r31
    6342:	f1 04       	cpc	r15, r1
    6344:	29 f4       	brne	.+10     	; 0x6350 <strtol+0x7a>
    6346:	3f c0       	rjmp	.+126    	; 0x63c6 <strtol+0xf0>
    6348:	10 e3       	ldi	r17, 0x30	; 48
    634a:	e1 14       	cp	r14, r1
    634c:	f1 04       	cpc	r15, r1
    634e:	21 f1       	breq	.+72     	; 0x6398 <strtol+0xc2>
    6350:	28 e0       	ldi	r18, 0x08	; 8
    6352:	e2 16       	cp	r14, r18
    6354:	f1 04       	cpc	r15, r1
    6356:	01 f1       	breq	.+64     	; 0x6398 <strtol+0xc2>
    6358:	54 f4       	brge	.+20     	; 0x636e <strtol+0x98>
    635a:	e2 e0       	ldi	r30, 0x02	; 2
    635c:	ee 16       	cp	r14, r30
    635e:	f1 04       	cpc	r15, r1
    6360:	21 f5       	brne	.+72     	; 0x63aa <strtol+0xd4>
    6362:	81 2c       	mov	r8, r1
    6364:	91 2c       	mov	r9, r1
    6366:	a1 2c       	mov	r10, r1
    6368:	b0 e4       	ldi	r27, 0x40	; 64
    636a:	bb 2e       	mov	r11, r27
    636c:	3e c0       	rjmp	.+124    	; 0x63ea <strtol+0x114>
    636e:	fa e0       	ldi	r31, 0x0A	; 10
    6370:	ef 16       	cp	r14, r31
    6372:	f1 04       	cpc	r15, r1
    6374:	39 f0       	breq	.+14     	; 0x6384 <strtol+0xae>
    6376:	20 e1       	ldi	r18, 0x10	; 16
    6378:	e2 16       	cp	r14, r18
    637a:	f1 04       	cpc	r15, r1
    637c:	b1 f4       	brne	.+44     	; 0x63aa <strtol+0xd4>
    637e:	30 c0       	rjmp	.+96     	; 0x63e0 <strtol+0x10a>
    6380:	10 33       	cpi	r17, 0x30	; 48
    6382:	19 f1       	breq	.+70     	; 0x63ca <strtol+0xf4>
    6384:	fa e0       	ldi	r31, 0x0A	; 10
    6386:	ef 2e       	mov	r14, r31
    6388:	f1 2c       	mov	r15, r1
    638a:	ac ec       	ldi	r26, 0xCC	; 204
    638c:	8a 2e       	mov	r8, r26
    638e:	98 2c       	mov	r9, r8
    6390:	a8 2c       	mov	r10, r8
    6392:	ac e0       	ldi	r26, 0x0C	; 12
    6394:	ba 2e       	mov	r11, r26
    6396:	29 c0       	rjmp	.+82     	; 0x63ea <strtol+0x114>
    6398:	78 e0       	ldi	r23, 0x08	; 8
    639a:	e7 2e       	mov	r14, r23
    639c:	f1 2c       	mov	r15, r1
    639e:	81 2c       	mov	r8, r1
    63a0:	91 2c       	mov	r9, r1
    63a2:	a1 2c       	mov	r10, r1
    63a4:	e0 e1       	ldi	r30, 0x10	; 16
    63a6:	be 2e       	mov	r11, r30
    63a8:	20 c0       	rjmp	.+64     	; 0x63ea <strtol+0x114>
    63aa:	60 e0       	ldi	r22, 0x00	; 0
    63ac:	70 e0       	ldi	r23, 0x00	; 0
    63ae:	80 e0       	ldi	r24, 0x00	; 0
    63b0:	90 e8       	ldi	r25, 0x80	; 128
    63b2:	97 01       	movw	r18, r14
    63b4:	0f 2c       	mov	r0, r15
    63b6:	00 0c       	add	r0, r0
    63b8:	44 0b       	sbc	r20, r20
    63ba:	55 0b       	sbc	r21, r21
    63bc:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <__udivmodsi4>
    63c0:	49 01       	movw	r8, r18
    63c2:	5a 01       	movw	r10, r20
    63c4:	12 c0       	rjmp	.+36     	; 0x63ea <strtol+0x114>
    63c6:	10 33       	cpi	r17, 0x30	; 48
    63c8:	59 f4       	brne	.+22     	; 0x63e0 <strtol+0x10a>
    63ca:	88 81       	ld	r24, Y
    63cc:	8f 7d       	andi	r24, 0xDF	; 223
    63ce:	88 35       	cpi	r24, 0x58	; 88
    63d0:	09 f0       	breq	.+2      	; 0x63d4 <strtol+0xfe>
    63d2:	ba cf       	rjmp	.-140    	; 0x6348 <strtol+0x72>
    63d4:	19 81       	ldd	r17, Y+1	; 0x01
    63d6:	22 96       	adiw	r28, 0x02	; 2
    63d8:	02 60       	ori	r16, 0x02	; 2
    63da:	80 e1       	ldi	r24, 0x10	; 16
    63dc:	e8 2e       	mov	r14, r24
    63de:	f1 2c       	mov	r15, r1
    63e0:	81 2c       	mov	r8, r1
    63e2:	91 2c       	mov	r9, r1
    63e4:	a1 2c       	mov	r10, r1
    63e6:	68 e0       	ldi	r22, 0x08	; 8
    63e8:	b6 2e       	mov	r11, r22
    63ea:	40 e0       	ldi	r20, 0x00	; 0
    63ec:	60 e0       	ldi	r22, 0x00	; 0
    63ee:	70 e0       	ldi	r23, 0x00	; 0
    63f0:	cb 01       	movw	r24, r22
    63f2:	27 01       	movw	r4, r14
    63f4:	0f 2c       	mov	r0, r15
    63f6:	00 0c       	add	r0, r0
    63f8:	66 08       	sbc	r6, r6
    63fa:	77 08       	sbc	r7, r7
    63fc:	fe 01       	movw	r30, r28
    63fe:	50 ed       	ldi	r21, 0xD0	; 208
    6400:	35 2e       	mov	r3, r21
    6402:	31 0e       	add	r3, r17
    6404:	29 e0       	ldi	r18, 0x09	; 9
    6406:	23 15       	cp	r18, r3
    6408:	70 f4       	brcc	.+28     	; 0x6426 <strtol+0x150>
    640a:	2f eb       	ldi	r18, 0xBF	; 191
    640c:	21 0f       	add	r18, r17
    640e:	2a 31       	cpi	r18, 0x1A	; 26
    6410:	18 f4       	brcc	.+6      	; 0x6418 <strtol+0x142>
    6412:	39 ec       	ldi	r19, 0xC9	; 201
    6414:	33 2e       	mov	r3, r19
    6416:	06 c0       	rjmp	.+12     	; 0x6424 <strtol+0x14e>
    6418:	2f e9       	ldi	r18, 0x9F	; 159
    641a:	21 0f       	add	r18, r17
    641c:	2a 31       	cpi	r18, 0x1A	; 26
    641e:	18 f5       	brcc	.+70     	; 0x6466 <strtol+0x190>
    6420:	29 ea       	ldi	r18, 0xA9	; 169
    6422:	32 2e       	mov	r3, r18
    6424:	31 0e       	add	r3, r17
    6426:	23 2d       	mov	r18, r3
    6428:	30 e0       	ldi	r19, 0x00	; 0
    642a:	2e 15       	cp	r18, r14
    642c:	3f 05       	cpc	r19, r15
    642e:	dc f4       	brge	.+54     	; 0x6466 <strtol+0x190>
    6430:	47 fd       	sbrc	r20, 7
    6432:	16 c0       	rjmp	.+44     	; 0x6460 <strtol+0x18a>
    6434:	86 16       	cp	r8, r22
    6436:	97 06       	cpc	r9, r23
    6438:	a8 06       	cpc	r10, r24
    643a:	b9 06       	cpc	r11, r25
    643c:	70 f0       	brcs	.+28     	; 0x645a <strtol+0x184>
    643e:	a3 01       	movw	r20, r6
    6440:	92 01       	movw	r18, r4
    6442:	0e 94 6c 2f 	call	0x5ed8	; 0x5ed8 <__mulsi3>
    6446:	63 0d       	add	r22, r3
    6448:	71 1d       	adc	r23, r1
    644a:	81 1d       	adc	r24, r1
    644c:	91 1d       	adc	r25, r1
    644e:	61 30       	cpi	r22, 0x01	; 1
    6450:	71 05       	cpc	r23, r1
    6452:	81 05       	cpc	r24, r1
    6454:	20 e8       	ldi	r18, 0x80	; 128
    6456:	92 07       	cpc	r25, r18
    6458:	10 f0       	brcs	.+4      	; 0x645e <strtol+0x188>
    645a:	4f ef       	ldi	r20, 0xFF	; 255
    645c:	01 c0       	rjmp	.+2      	; 0x6460 <strtol+0x18a>
    645e:	41 e0       	ldi	r20, 0x01	; 1
    6460:	21 96       	adiw	r28, 0x01	; 1
    6462:	10 81       	ld	r17, Z
    6464:	cb cf       	rjmp	.-106    	; 0x63fc <strtol+0x126>
    6466:	20 2f       	mov	r18, r16
    6468:	21 70       	andi	r18, 0x01	; 1
    646a:	c1 14       	cp	r12, r1
    646c:	d1 04       	cpc	r13, r1
    646e:	71 f0       	breq	.+28     	; 0x648c <strtol+0x1b6>
    6470:	44 23       	and	r20, r20
    6472:	29 f0       	breq	.+10     	; 0x647e <strtol+0x1a8>
    6474:	21 97       	sbiw	r28, 0x01	; 1
    6476:	f6 01       	movw	r30, r12
    6478:	d1 83       	std	Z+1, r29	; 0x01
    647a:	c0 83       	st	Z, r28
    647c:	07 c0       	rjmp	.+14     	; 0x648c <strtol+0x1b6>
    647e:	01 ff       	sbrs	r16, 1
    6480:	19 c0       	rjmp	.+50     	; 0x64b4 <strtol+0x1de>
    6482:	22 97       	sbiw	r28, 0x02	; 2
    6484:	f6 01       	movw	r30, r12
    6486:	d1 83       	std	Z+1, r29	; 0x01
    6488:	c0 83       	st	Z, r28
    648a:	14 c0       	rjmp	.+40     	; 0x64b4 <strtol+0x1de>
    648c:	47 ff       	sbrs	r20, 7
    648e:	12 c0       	rjmp	.+36     	; 0x64b4 <strtol+0x1de>
    6490:	22 23       	and	r18, r18
    6492:	29 f0       	breq	.+10     	; 0x649e <strtol+0x1c8>
    6494:	60 e0       	ldi	r22, 0x00	; 0
    6496:	70 e0       	ldi	r23, 0x00	; 0
    6498:	80 e0       	ldi	r24, 0x00	; 0
    649a:	90 e8       	ldi	r25, 0x80	; 128
    649c:	04 c0       	rjmp	.+8      	; 0x64a6 <strtol+0x1d0>
    649e:	6f ef       	ldi	r22, 0xFF	; 255
    64a0:	7f ef       	ldi	r23, 0xFF	; 255
    64a2:	8f ef       	ldi	r24, 0xFF	; 255
    64a4:	9f e7       	ldi	r25, 0x7F	; 127
    64a6:	22 e2       	ldi	r18, 0x22	; 34
    64a8:	30 e0       	ldi	r19, 0x00	; 0
    64aa:	30 93 b7 06 	sts	0x06B7, r19	; 0x8006b7 <errno+0x1>
    64ae:	20 93 b6 06 	sts	0x06B6, r18	; 0x8006b6 <errno>
    64b2:	09 c0       	rjmp	.+18     	; 0x64c6 <strtol+0x1f0>
    64b4:	22 23       	and	r18, r18
    64b6:	81 f0       	breq	.+32     	; 0x64d8 <strtol+0x202>
    64b8:	90 95       	com	r25
    64ba:	80 95       	com	r24
    64bc:	70 95       	com	r23
    64be:	61 95       	neg	r22
    64c0:	7f 4f       	sbci	r23, 0xFF	; 255
    64c2:	8f 4f       	sbci	r24, 0xFF	; 255
    64c4:	9f 4f       	sbci	r25, 0xFF	; 255
    64c6:	46 2f       	mov	r20, r22
    64c8:	37 2f       	mov	r19, r23
    64ca:	28 2f       	mov	r18, r24
    64cc:	12 c0       	rjmp	.+36     	; 0x64f2 <strtol+0x21c>
    64ce:	40 e0       	ldi	r20, 0x00	; 0
    64d0:	30 e0       	ldi	r19, 0x00	; 0
    64d2:	20 e0       	ldi	r18, 0x00	; 0
    64d4:	90 e0       	ldi	r25, 0x00	; 0
    64d6:	0d c0       	rjmp	.+26     	; 0x64f2 <strtol+0x21c>
    64d8:	97 ff       	sbrs	r25, 7
    64da:	f5 cf       	rjmp	.-22     	; 0x64c6 <strtol+0x1f0>
    64dc:	82 e2       	ldi	r24, 0x22	; 34
    64de:	90 e0       	ldi	r25, 0x00	; 0
    64e0:	90 93 b7 06 	sts	0x06B7, r25	; 0x8006b7 <errno+0x1>
    64e4:	80 93 b6 06 	sts	0x06B6, r24	; 0x8006b6 <errno>
    64e8:	6f ef       	ldi	r22, 0xFF	; 255
    64ea:	7f ef       	ldi	r23, 0xFF	; 255
    64ec:	8f ef       	ldi	r24, 0xFF	; 255
    64ee:	9f e7       	ldi	r25, 0x7F	; 127
    64f0:	ea cf       	rjmp	.-44     	; 0x64c6 <strtol+0x1f0>
    64f2:	64 2f       	mov	r22, r20
    64f4:	73 2f       	mov	r23, r19
    64f6:	82 2f       	mov	r24, r18
    64f8:	cd b7       	in	r28, 0x3d	; 61
    64fa:	de b7       	in	r29, 0x3e	; 62
    64fc:	e1 e1       	ldi	r30, 0x11	; 17
    64fe:	0c 94 cd 30 	jmp	0x619a	; 0x619a <__epilogue_restores__+0x2>

00006502 <atoi>:
    6502:	fc 01       	movw	r30, r24
    6504:	88 27       	eor	r24, r24
    6506:	99 27       	eor	r25, r25
    6508:	e8 94       	clt
    650a:	21 91       	ld	r18, Z+
    650c:	20 32       	cpi	r18, 0x20	; 32
    650e:	e9 f3       	breq	.-6      	; 0x650a <atoi+0x8>
    6510:	29 30       	cpi	r18, 0x09	; 9
    6512:	10 f0       	brcs	.+4      	; 0x6518 <atoi+0x16>
    6514:	2e 30       	cpi	r18, 0x0E	; 14
    6516:	c8 f3       	brcs	.-14     	; 0x650a <atoi+0x8>
    6518:	2b 32       	cpi	r18, 0x2B	; 43
    651a:	41 f0       	breq	.+16     	; 0x652c <atoi+0x2a>
    651c:	2d 32       	cpi	r18, 0x2D	; 45
    651e:	39 f4       	brne	.+14     	; 0x652e <atoi+0x2c>
    6520:	68 94       	set
    6522:	04 c0       	rjmp	.+8      	; 0x652c <atoi+0x2a>
    6524:	0e 94 e0 32 	call	0x65c0	; 0x65c0 <__mulhi_const_10>
    6528:	82 0f       	add	r24, r18
    652a:	91 1d       	adc	r25, r1
    652c:	21 91       	ld	r18, Z+
    652e:	20 53       	subi	r18, 0x30	; 48
    6530:	2a 30       	cpi	r18, 0x0A	; 10
    6532:	c0 f3       	brcs	.-16     	; 0x6524 <atoi+0x22>
    6534:	1e f4       	brtc	.+6      	; 0x653c <atoi+0x3a>
    6536:	90 95       	com	r25
    6538:	81 95       	neg	r24
    653a:	9f 4f       	sbci	r25, 0xFF	; 255
    653c:	08 95       	ret

0000653e <__ctype_isfalse>:
    653e:	99 27       	eor	r25, r25
    6540:	88 27       	eor	r24, r24

00006542 <__ctype_istrue>:
    6542:	08 95       	ret

00006544 <isspace>:
    6544:	91 11       	cpse	r25, r1
    6546:	0c 94 9f 32 	jmp	0x653e	; 0x653e <__ctype_isfalse>
    654a:	80 32       	cpi	r24, 0x20	; 32
    654c:	19 f0       	breq	.+6      	; 0x6554 <isspace+0x10>
    654e:	89 50       	subi	r24, 0x09	; 9
    6550:	85 50       	subi	r24, 0x05	; 5
    6552:	c8 f7       	brcc	.-14     	; 0x6546 <isspace+0x2>
    6554:	08 95       	ret

00006556 <isblank>:
    6556:	91 11       	cpse	r25, r1
    6558:	0c 94 9f 32 	jmp	0x653e	; 0x653e <__ctype_isfalse>
    655c:	80 32       	cpi	r24, 0x20	; 32
    655e:	11 f0       	breq	.+4      	; 0x6564 <isblank+0xe>
    6560:	89 30       	cpi	r24, 0x09	; 9
    6562:	d1 f7       	brne	.-12     	; 0x6558 <isblank+0x2>
    6564:	08 95       	ret

00006566 <memcmp>:
    6566:	fb 01       	movw	r30, r22
    6568:	dc 01       	movw	r26, r24
    656a:	04 c0       	rjmp	.+8      	; 0x6574 <memcmp+0xe>
    656c:	8d 91       	ld	r24, X+
    656e:	01 90       	ld	r0, Z+
    6570:	80 19       	sub	r24, r0
    6572:	21 f4       	brne	.+8      	; 0x657c <memcmp+0x16>
    6574:	41 50       	subi	r20, 0x01	; 1
    6576:	50 40       	sbci	r21, 0x00	; 0
    6578:	c8 f7       	brcc	.-14     	; 0x656c <memcmp+0x6>
    657a:	88 1b       	sub	r24, r24
    657c:	99 0b       	sbc	r25, r25
    657e:	08 95       	ret

00006580 <strcpy>:
    6580:	fb 01       	movw	r30, r22
    6582:	dc 01       	movw	r26, r24
    6584:	01 90       	ld	r0, Z+
    6586:	0d 92       	st	X+, r0
    6588:	00 20       	and	r0, r0
    658a:	e1 f7       	brne	.-8      	; 0x6584 <strcpy+0x4>
    658c:	08 95       	ret

0000658e <strncmp>:
    658e:	fb 01       	movw	r30, r22
    6590:	dc 01       	movw	r26, r24
    6592:	41 50       	subi	r20, 0x01	; 1
    6594:	50 40       	sbci	r21, 0x00	; 0
    6596:	30 f0       	brcs	.+12     	; 0x65a4 <strncmp+0x16>
    6598:	8d 91       	ld	r24, X+
    659a:	01 90       	ld	r0, Z+
    659c:	80 19       	sub	r24, r0
    659e:	19 f4       	brne	.+6      	; 0x65a6 <strncmp+0x18>
    65a0:	00 20       	and	r0, r0
    65a2:	b9 f7       	brne	.-18     	; 0x6592 <strncmp+0x4>
    65a4:	88 1b       	sub	r24, r24
    65a6:	99 0b       	sbc	r25, r25
    65a8:	08 95       	ret

000065aa <__itoa_ncheck>:
    65aa:	bb 27       	eor	r27, r27
    65ac:	4a 30       	cpi	r20, 0x0A	; 10
    65ae:	31 f4       	brne	.+12     	; 0x65bc <__itoa_ncheck+0x12>
    65b0:	99 23       	and	r25, r25
    65b2:	22 f4       	brpl	.+8      	; 0x65bc <__itoa_ncheck+0x12>
    65b4:	bd e2       	ldi	r27, 0x2D	; 45
    65b6:	90 95       	com	r25
    65b8:	81 95       	neg	r24
    65ba:	9f 4f       	sbci	r25, 0xFF	; 255
    65bc:	0c 94 e9 32 	jmp	0x65d2	; 0x65d2 <__utoa_common>

000065c0 <__mulhi_const_10>:
    65c0:	7a e0       	ldi	r23, 0x0A	; 10
    65c2:	97 9f       	mul	r25, r23
    65c4:	90 2d       	mov	r25, r0
    65c6:	87 9f       	mul	r24, r23
    65c8:	80 2d       	mov	r24, r0
    65ca:	91 0d       	add	r25, r1
    65cc:	11 24       	eor	r1, r1
    65ce:	08 95       	ret

000065d0 <__utoa_ncheck>:
    65d0:	bb 27       	eor	r27, r27

000065d2 <__utoa_common>:
    65d2:	fb 01       	movw	r30, r22
    65d4:	55 27       	eor	r21, r21
    65d6:	aa 27       	eor	r26, r26
    65d8:	88 0f       	add	r24, r24
    65da:	99 1f       	adc	r25, r25
    65dc:	aa 1f       	adc	r26, r26
    65de:	a4 17       	cp	r26, r20
    65e0:	10 f0       	brcs	.+4      	; 0x65e6 <__utoa_common+0x14>
    65e2:	a4 1b       	sub	r26, r20
    65e4:	83 95       	inc	r24
    65e6:	50 51       	subi	r21, 0x10	; 16
    65e8:	b9 f7       	brne	.-18     	; 0x65d8 <__utoa_common+0x6>
    65ea:	a0 5d       	subi	r26, 0xD0	; 208
    65ec:	aa 33       	cpi	r26, 0x3A	; 58
    65ee:	08 f0       	brcs	.+2      	; 0x65f2 <__utoa_common+0x20>
    65f0:	a9 5d       	subi	r26, 0xD9	; 217
    65f2:	a1 93       	st	Z+, r26
    65f4:	00 97       	sbiw	r24, 0x00	; 0
    65f6:	79 f7       	brne	.-34     	; 0x65d6 <__utoa_common+0x4>
    65f8:	b1 11       	cpse	r27, r1
    65fa:	b1 93       	st	Z+, r27
    65fc:	11 92       	st	Z+, r1
    65fe:	cb 01       	movw	r24, r22
    6600:	0c 94 29 3b 	jmp	0x7652	; 0x7652 <strrev>

00006604 <fgetc>:
    6604:	cf 93       	push	r28
    6606:	df 93       	push	r29
    6608:	ec 01       	movw	r28, r24
    660a:	2b 81       	ldd	r18, Y+3	; 0x03
    660c:	20 ff       	sbrs	r18, 0
    660e:	33 c0       	rjmp	.+102    	; 0x6676 <fgetc+0x72>
    6610:	26 ff       	sbrs	r18, 6
    6612:	0a c0       	rjmp	.+20     	; 0x6628 <fgetc+0x24>
    6614:	2f 7b       	andi	r18, 0xBF	; 191
    6616:	2b 83       	std	Y+3, r18	; 0x03
    6618:	8e 81       	ldd	r24, Y+6	; 0x06
    661a:	9f 81       	ldd	r25, Y+7	; 0x07
    661c:	01 96       	adiw	r24, 0x01	; 1
    661e:	9f 83       	std	Y+7, r25	; 0x07
    6620:	8e 83       	std	Y+6, r24	; 0x06
    6622:	8a 81       	ldd	r24, Y+2	; 0x02
    6624:	90 e0       	ldi	r25, 0x00	; 0
    6626:	29 c0       	rjmp	.+82     	; 0x667a <fgetc+0x76>
    6628:	22 ff       	sbrs	r18, 2
    662a:	0f c0       	rjmp	.+30     	; 0x664a <fgetc+0x46>
    662c:	e8 81       	ld	r30, Y
    662e:	f9 81       	ldd	r31, Y+1	; 0x01
    6630:	80 81       	ld	r24, Z
    6632:	08 2e       	mov	r0, r24
    6634:	00 0c       	add	r0, r0
    6636:	99 0b       	sbc	r25, r25
    6638:	00 97       	sbiw	r24, 0x00	; 0
    663a:	19 f4       	brne	.+6      	; 0x6642 <fgetc+0x3e>
    663c:	20 62       	ori	r18, 0x20	; 32
    663e:	2b 83       	std	Y+3, r18	; 0x03
    6640:	1a c0       	rjmp	.+52     	; 0x6676 <fgetc+0x72>
    6642:	31 96       	adiw	r30, 0x01	; 1
    6644:	f9 83       	std	Y+1, r31	; 0x01
    6646:	e8 83       	st	Y, r30
    6648:	0e c0       	rjmp	.+28     	; 0x6666 <fgetc+0x62>
    664a:	ea 85       	ldd	r30, Y+10	; 0x0a
    664c:	fb 85       	ldd	r31, Y+11	; 0x0b
    664e:	09 95       	icall
    6650:	97 ff       	sbrs	r25, 7
    6652:	09 c0       	rjmp	.+18     	; 0x6666 <fgetc+0x62>
    6654:	2b 81       	ldd	r18, Y+3	; 0x03
    6656:	01 96       	adiw	r24, 0x01	; 1
    6658:	11 f0       	breq	.+4      	; 0x665e <fgetc+0x5a>
    665a:	80 e2       	ldi	r24, 0x20	; 32
    665c:	01 c0       	rjmp	.+2      	; 0x6660 <fgetc+0x5c>
    665e:	80 e1       	ldi	r24, 0x10	; 16
    6660:	82 2b       	or	r24, r18
    6662:	8b 83       	std	Y+3, r24	; 0x03
    6664:	08 c0       	rjmp	.+16     	; 0x6676 <fgetc+0x72>
    6666:	2e 81       	ldd	r18, Y+6	; 0x06
    6668:	3f 81       	ldd	r19, Y+7	; 0x07
    666a:	2f 5f       	subi	r18, 0xFF	; 255
    666c:	3f 4f       	sbci	r19, 0xFF	; 255
    666e:	3f 83       	std	Y+7, r19	; 0x07
    6670:	2e 83       	std	Y+6, r18	; 0x06
    6672:	99 27       	eor	r25, r25
    6674:	02 c0       	rjmp	.+4      	; 0x667a <fgetc+0x76>
    6676:	8f ef       	ldi	r24, 0xFF	; 255
    6678:	9f ef       	ldi	r25, 0xFF	; 255
    667a:	df 91       	pop	r29
    667c:	cf 91       	pop	r28
    667e:	08 95       	ret

00006680 <printf>:
    6680:	a0 e0       	ldi	r26, 0x00	; 0
    6682:	b0 e0       	ldi	r27, 0x00	; 0
    6684:	e6 e4       	ldi	r30, 0x46	; 70
    6686:	f3 e3       	ldi	r31, 0x33	; 51
    6688:	0c 94 c0 30 	jmp	0x6180	; 0x6180 <__prologue_saves__+0x20>
    668c:	ae 01       	movw	r20, r28
    668e:	4b 5f       	subi	r20, 0xFB	; 251
    6690:	5f 4f       	sbci	r21, 0xFF	; 255
    6692:	fa 01       	movw	r30, r20
    6694:	61 91       	ld	r22, Z+
    6696:	71 91       	ld	r23, Z+
    6698:	af 01       	movw	r20, r30
    669a:	80 91 b2 06 	lds	r24, 0x06B2	; 0x8006b2 <__iob+0x2>
    669e:	90 91 b3 06 	lds	r25, 0x06B3	; 0x8006b3 <__iob+0x3>
    66a2:	0e 94 48 34 	call	0x6890	; 0x6890 <vfprintf>
    66a6:	e2 e0       	ldi	r30, 0x02	; 2
    66a8:	0c 94 dc 30 	jmp	0x61b8	; 0x61b8 <__epilogue_restores__+0x20>

000066ac <printf_P>:
    66ac:	a0 e0       	ldi	r26, 0x00	; 0
    66ae:	b0 e0       	ldi	r27, 0x00	; 0
    66b0:	ec e5       	ldi	r30, 0x5C	; 92
    66b2:	f3 e3       	ldi	r31, 0x33	; 51
    66b4:	0c 94 be 30 	jmp	0x617c	; 0x617c <__prologue_saves__+0x1c>
    66b8:	ae 01       	movw	r20, r28
    66ba:	49 5f       	subi	r20, 0xF9	; 249
    66bc:	5f 4f       	sbci	r21, 0xFF	; 255
    66be:	da 01       	movw	r26, r20
    66c0:	6d 91       	ld	r22, X+
    66c2:	7d 91       	ld	r23, X+
    66c4:	ad 01       	movw	r20, r26
    66c6:	00 eb       	ldi	r16, 0xB0	; 176
    66c8:	16 e0       	ldi	r17, 0x06	; 6
    66ca:	f8 01       	movw	r30, r16
    66cc:	82 81       	ldd	r24, Z+2	; 0x02
    66ce:	93 81       	ldd	r25, Z+3	; 0x03
    66d0:	dc 01       	movw	r26, r24
    66d2:	13 96       	adiw	r26, 0x03	; 3
    66d4:	2c 91       	ld	r18, X
    66d6:	13 97       	sbiw	r26, 0x03	; 3
    66d8:	28 60       	ori	r18, 0x08	; 8
    66da:	13 96       	adiw	r26, 0x03	; 3
    66dc:	2c 93       	st	X, r18
    66de:	0e 94 48 34 	call	0x6890	; 0x6890 <vfprintf>
    66e2:	d8 01       	movw	r26, r16
    66e4:	12 96       	adiw	r26, 0x02	; 2
    66e6:	ed 91       	ld	r30, X+
    66e8:	fc 91       	ld	r31, X
    66ea:	13 97       	sbiw	r26, 0x03	; 3
    66ec:	23 81       	ldd	r18, Z+3	; 0x03
    66ee:	27 7f       	andi	r18, 0xF7	; 247
    66f0:	23 83       	std	Z+3, r18	; 0x03
    66f2:	e4 e0       	ldi	r30, 0x04	; 4
    66f4:	0c 94 da 30 	jmp	0x61b4	; 0x61b4 <__epilogue_restores__+0x1c>

000066f8 <puts>:
    66f8:	0f 93       	push	r16
    66fa:	1f 93       	push	r17
    66fc:	cf 93       	push	r28
    66fe:	df 93       	push	r29
    6700:	e0 91 b2 06 	lds	r30, 0x06B2	; 0x8006b2 <__iob+0x2>
    6704:	f0 91 b3 06 	lds	r31, 0x06B3	; 0x8006b3 <__iob+0x3>
    6708:	23 81       	ldd	r18, Z+3	; 0x03
    670a:	21 ff       	sbrs	r18, 1
    670c:	1b c0       	rjmp	.+54     	; 0x6744 <puts+0x4c>
    670e:	8c 01       	movw	r16, r24
    6710:	d0 e0       	ldi	r29, 0x00	; 0
    6712:	c0 e0       	ldi	r28, 0x00	; 0
    6714:	f8 01       	movw	r30, r16
    6716:	81 91       	ld	r24, Z+
    6718:	8f 01       	movw	r16, r30
    671a:	60 91 b2 06 	lds	r22, 0x06B2	; 0x8006b2 <__iob+0x2>
    671e:	70 91 b3 06 	lds	r23, 0x06B3	; 0x8006b3 <__iob+0x3>
    6722:	db 01       	movw	r26, r22
    6724:	18 96       	adiw	r26, 0x08	; 8
    6726:	ed 91       	ld	r30, X+
    6728:	fc 91       	ld	r31, X
    672a:	19 97       	sbiw	r26, 0x09	; 9
    672c:	88 23       	and	r24, r24
    672e:	31 f0       	breq	.+12     	; 0x673c <puts+0x44>
    6730:	09 95       	icall
    6732:	89 2b       	or	r24, r25
    6734:	79 f3       	breq	.-34     	; 0x6714 <puts+0x1c>
    6736:	df ef       	ldi	r29, 0xFF	; 255
    6738:	cf ef       	ldi	r28, 0xFF	; 255
    673a:	ec cf       	rjmp	.-40     	; 0x6714 <puts+0x1c>
    673c:	8a e0       	ldi	r24, 0x0A	; 10
    673e:	09 95       	icall
    6740:	89 2b       	or	r24, r25
    6742:	19 f0       	breq	.+6      	; 0x674a <puts+0x52>
    6744:	8f ef       	ldi	r24, 0xFF	; 255
    6746:	9f ef       	ldi	r25, 0xFF	; 255
    6748:	02 c0       	rjmp	.+4      	; 0x674e <puts+0x56>
    674a:	8d 2f       	mov	r24, r29
    674c:	9c 2f       	mov	r25, r28
    674e:	df 91       	pop	r29
    6750:	cf 91       	pop	r28
    6752:	1f 91       	pop	r17
    6754:	0f 91       	pop	r16
    6756:	08 95       	ret

00006758 <puts_P>:
    6758:	0f 93       	push	r16
    675a:	1f 93       	push	r17
    675c:	cf 93       	push	r28
    675e:	df 93       	push	r29
    6760:	8c 01       	movw	r16, r24
    6762:	e0 91 b2 06 	lds	r30, 0x06B2	; 0x8006b2 <__iob+0x2>
    6766:	f0 91 b3 06 	lds	r31, 0x06B3	; 0x8006b3 <__iob+0x3>
    676a:	83 81       	ldd	r24, Z+3	; 0x03
    676c:	81 ff       	sbrs	r24, 1
    676e:	1b c0       	rjmp	.+54     	; 0x67a6 <puts_P+0x4e>
    6770:	d0 e0       	ldi	r29, 0x00	; 0
    6772:	c0 e0       	ldi	r28, 0x00	; 0
    6774:	f8 01       	movw	r30, r16
    6776:	84 91       	lpm	r24, Z
    6778:	60 91 b2 06 	lds	r22, 0x06B2	; 0x8006b2 <__iob+0x2>
    677c:	70 91 b3 06 	lds	r23, 0x06B3	; 0x8006b3 <__iob+0x3>
    6780:	db 01       	movw	r26, r22
    6782:	18 96       	adiw	r26, 0x08	; 8
    6784:	ed 91       	ld	r30, X+
    6786:	fc 91       	ld	r31, X
    6788:	19 97       	sbiw	r26, 0x09	; 9
    678a:	88 23       	and	r24, r24
    678c:	41 f0       	breq	.+16     	; 0x679e <puts_P+0x46>
    678e:	09 95       	icall
    6790:	89 2b       	or	r24, r25
    6792:	11 f0       	breq	.+4      	; 0x6798 <puts_P+0x40>
    6794:	df ef       	ldi	r29, 0xFF	; 255
    6796:	cf ef       	ldi	r28, 0xFF	; 255
    6798:	0f 5f       	subi	r16, 0xFF	; 255
    679a:	1f 4f       	sbci	r17, 0xFF	; 255
    679c:	eb cf       	rjmp	.-42     	; 0x6774 <puts_P+0x1c>
    679e:	8a e0       	ldi	r24, 0x0A	; 10
    67a0:	09 95       	icall
    67a2:	89 2b       	or	r24, r25
    67a4:	19 f0       	breq	.+6      	; 0x67ac <puts_P+0x54>
    67a6:	8f ef       	ldi	r24, 0xFF	; 255
    67a8:	9f ef       	ldi	r25, 0xFF	; 255
    67aa:	02 c0       	rjmp	.+4      	; 0x67b0 <puts_P+0x58>
    67ac:	8d 2f       	mov	r24, r29
    67ae:	9c 2f       	mov	r25, r28
    67b0:	df 91       	pop	r29
    67b2:	cf 91       	pop	r28
    67b4:	1f 91       	pop	r17
    67b6:	0f 91       	pop	r16
    67b8:	08 95       	ret

000067ba <snprintf>:
    67ba:	ae e0       	ldi	r26, 0x0E	; 14
    67bc:	b0 e0       	ldi	r27, 0x00	; 0
    67be:	e3 ee       	ldi	r30, 0xE3	; 227
    67c0:	f3 e3       	ldi	r31, 0x33	; 51
    67c2:	0c 94 be 30 	jmp	0x617c	; 0x617c <__prologue_saves__+0x1c>
    67c6:	0d 89       	ldd	r16, Y+21	; 0x15
    67c8:	1e 89       	ldd	r17, Y+22	; 0x16
    67ca:	8f 89       	ldd	r24, Y+23	; 0x17
    67cc:	98 8d       	ldd	r25, Y+24	; 0x18
    67ce:	26 e0       	ldi	r18, 0x06	; 6
    67d0:	2c 83       	std	Y+4, r18	; 0x04
    67d2:	1a 83       	std	Y+2, r17	; 0x02
    67d4:	09 83       	std	Y+1, r16	; 0x01
    67d6:	97 ff       	sbrs	r25, 7
    67d8:	02 c0       	rjmp	.+4      	; 0x67de <snprintf+0x24>
    67da:	80 e0       	ldi	r24, 0x00	; 0
    67dc:	90 e8       	ldi	r25, 0x80	; 128
    67de:	01 97       	sbiw	r24, 0x01	; 1
    67e0:	9e 83       	std	Y+6, r25	; 0x06
    67e2:	8d 83       	std	Y+5, r24	; 0x05
    67e4:	ae 01       	movw	r20, r28
    67e6:	45 5e       	subi	r20, 0xE5	; 229
    67e8:	5f 4f       	sbci	r21, 0xFF	; 255
    67ea:	69 8d       	ldd	r22, Y+25	; 0x19
    67ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    67ee:	ce 01       	movw	r24, r28
    67f0:	01 96       	adiw	r24, 0x01	; 1
    67f2:	0e 94 48 34 	call	0x6890	; 0x6890 <vfprintf>
    67f6:	4d 81       	ldd	r20, Y+5	; 0x05
    67f8:	5e 81       	ldd	r21, Y+6	; 0x06
    67fa:	57 fd       	sbrc	r21, 7
    67fc:	0a c0       	rjmp	.+20     	; 0x6812 <snprintf+0x58>
    67fe:	2f 81       	ldd	r18, Y+7	; 0x07
    6800:	38 85       	ldd	r19, Y+8	; 0x08
    6802:	42 17       	cp	r20, r18
    6804:	53 07       	cpc	r21, r19
    6806:	0c f4       	brge	.+2      	; 0x680a <snprintf+0x50>
    6808:	9a 01       	movw	r18, r20
    680a:	f8 01       	movw	r30, r16
    680c:	e2 0f       	add	r30, r18
    680e:	f3 1f       	adc	r31, r19
    6810:	10 82       	st	Z, r1
    6812:	2e 96       	adiw	r28, 0x0e	; 14
    6814:	e4 e0       	ldi	r30, 0x04	; 4
    6816:	0c 94 da 30 	jmp	0x61b4	; 0x61b4 <__epilogue_restores__+0x1c>

0000681a <sprintf>:
    681a:	ae e0       	ldi	r26, 0x0E	; 14
    681c:	b0 e0       	ldi	r27, 0x00	; 0
    681e:	e3 e1       	ldi	r30, 0x13	; 19
    6820:	f4 e3       	ldi	r31, 0x34	; 52
    6822:	0c 94 be 30 	jmp	0x617c	; 0x617c <__prologue_saves__+0x1c>
    6826:	0d 89       	ldd	r16, Y+21	; 0x15
    6828:	1e 89       	ldd	r17, Y+22	; 0x16
    682a:	86 e0       	ldi	r24, 0x06	; 6
    682c:	8c 83       	std	Y+4, r24	; 0x04
    682e:	1a 83       	std	Y+2, r17	; 0x02
    6830:	09 83       	std	Y+1, r16	; 0x01
    6832:	8f ef       	ldi	r24, 0xFF	; 255
    6834:	9f e7       	ldi	r25, 0x7F	; 127
    6836:	9e 83       	std	Y+6, r25	; 0x06
    6838:	8d 83       	std	Y+5, r24	; 0x05
    683a:	ae 01       	movw	r20, r28
    683c:	47 5e       	subi	r20, 0xE7	; 231
    683e:	5f 4f       	sbci	r21, 0xFF	; 255
    6840:	6f 89       	ldd	r22, Y+23	; 0x17
    6842:	78 8d       	ldd	r23, Y+24	; 0x18
    6844:	ce 01       	movw	r24, r28
    6846:	01 96       	adiw	r24, 0x01	; 1
    6848:	0e 94 48 34 	call	0x6890	; 0x6890 <vfprintf>
    684c:	ef 81       	ldd	r30, Y+7	; 0x07
    684e:	f8 85       	ldd	r31, Y+8	; 0x08
    6850:	e0 0f       	add	r30, r16
    6852:	f1 1f       	adc	r31, r17
    6854:	10 82       	st	Z, r1
    6856:	2e 96       	adiw	r28, 0x0e	; 14
    6858:	e4 e0       	ldi	r30, 0x04	; 4
    685a:	0c 94 da 30 	jmp	0x61b4	; 0x61b4 <__epilogue_restores__+0x1c>

0000685e <sscanf>:
    685e:	ae e0       	ldi	r26, 0x0E	; 14
    6860:	b0 e0       	ldi	r27, 0x00	; 0
    6862:	e5 e3       	ldi	r30, 0x35	; 53
    6864:	f4 e3       	ldi	r31, 0x34	; 52
    6866:	0c 94 c0 30 	jmp	0x6180	; 0x6180 <__prologue_saves__+0x20>
    686a:	85 e0       	ldi	r24, 0x05	; 5
    686c:	8c 83       	std	Y+4, r24	; 0x04
    686e:	8b 89       	ldd	r24, Y+19	; 0x13
    6870:	9c 89       	ldd	r25, Y+20	; 0x14
    6872:	9a 83       	std	Y+2, r25	; 0x02
    6874:	89 83       	std	Y+1, r24	; 0x01
    6876:	ae 01       	movw	r20, r28
    6878:	49 5e       	subi	r20, 0xE9	; 233
    687a:	5f 4f       	sbci	r21, 0xFF	; 255
    687c:	6d 89       	ldd	r22, Y+21	; 0x15
    687e:	7e 89       	ldd	r23, Y+22	; 0x16
    6880:	ce 01       	movw	r24, r28
    6882:	01 96       	adiw	r24, 0x01	; 1
    6884:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <vfscanf>
    6888:	2e 96       	adiw	r28, 0x0e	; 14
    688a:	e2 e0       	ldi	r30, 0x02	; 2
    688c:	0c 94 dc 30 	jmp	0x61b8	; 0x61b8 <__epilogue_restores__+0x20>

00006890 <vfprintf>:
    6890:	ab e0       	ldi	r26, 0x0B	; 11
    6892:	b0 e0       	ldi	r27, 0x00	; 0
    6894:	ee e4       	ldi	r30, 0x4E	; 78
    6896:	f4 e3       	ldi	r31, 0x34	; 52
    6898:	0c 94 b0 30 	jmp	0x6160	; 0x6160 <__prologue_saves__>
    689c:	6c 01       	movw	r12, r24
    689e:	7b 01       	movw	r14, r22
    68a0:	8a 01       	movw	r16, r20
    68a2:	fc 01       	movw	r30, r24
    68a4:	17 82       	std	Z+7, r1	; 0x07
    68a6:	16 82       	std	Z+6, r1	; 0x06
    68a8:	83 81       	ldd	r24, Z+3	; 0x03
    68aa:	81 ff       	sbrs	r24, 1
    68ac:	cc c1       	rjmp	.+920    	; 0x6c46 <vfprintf+0x3b6>
    68ae:	ce 01       	movw	r24, r28
    68b0:	01 96       	adiw	r24, 0x01	; 1
    68b2:	3c 01       	movw	r6, r24
    68b4:	f6 01       	movw	r30, r12
    68b6:	93 81       	ldd	r25, Z+3	; 0x03
    68b8:	f7 01       	movw	r30, r14
    68ba:	93 fd       	sbrc	r25, 3
    68bc:	85 91       	lpm	r24, Z+
    68be:	93 ff       	sbrs	r25, 3
    68c0:	81 91       	ld	r24, Z+
    68c2:	7f 01       	movw	r14, r30
    68c4:	88 23       	and	r24, r24
    68c6:	09 f4       	brne	.+2      	; 0x68ca <vfprintf+0x3a>
    68c8:	ba c1       	rjmp	.+884    	; 0x6c3e <vfprintf+0x3ae>
    68ca:	85 32       	cpi	r24, 0x25	; 37
    68cc:	39 f4       	brne	.+14     	; 0x68dc <vfprintf+0x4c>
    68ce:	93 fd       	sbrc	r25, 3
    68d0:	85 91       	lpm	r24, Z+
    68d2:	93 ff       	sbrs	r25, 3
    68d4:	81 91       	ld	r24, Z+
    68d6:	7f 01       	movw	r14, r30
    68d8:	85 32       	cpi	r24, 0x25	; 37
    68da:	29 f4       	brne	.+10     	; 0x68e6 <vfprintf+0x56>
    68dc:	b6 01       	movw	r22, r12
    68de:	90 e0       	ldi	r25, 0x00	; 0
    68e0:	0e 94 39 3b 	call	0x7672	; 0x7672 <fputc>
    68e4:	e7 cf       	rjmp	.-50     	; 0x68b4 <vfprintf+0x24>
    68e6:	91 2c       	mov	r9, r1
    68e8:	21 2c       	mov	r2, r1
    68ea:	31 2c       	mov	r3, r1
    68ec:	ff e1       	ldi	r31, 0x1F	; 31
    68ee:	f3 15       	cp	r31, r3
    68f0:	d8 f0       	brcs	.+54     	; 0x6928 <vfprintf+0x98>
    68f2:	8b 32       	cpi	r24, 0x2B	; 43
    68f4:	79 f0       	breq	.+30     	; 0x6914 <vfprintf+0x84>
    68f6:	38 f4       	brcc	.+14     	; 0x6906 <vfprintf+0x76>
    68f8:	80 32       	cpi	r24, 0x20	; 32
    68fa:	79 f0       	breq	.+30     	; 0x691a <vfprintf+0x8a>
    68fc:	83 32       	cpi	r24, 0x23	; 35
    68fe:	a1 f4       	brne	.+40     	; 0x6928 <vfprintf+0x98>
    6900:	23 2d       	mov	r18, r3
    6902:	20 61       	ori	r18, 0x10	; 16
    6904:	1d c0       	rjmp	.+58     	; 0x6940 <vfprintf+0xb0>
    6906:	8d 32       	cpi	r24, 0x2D	; 45
    6908:	61 f0       	breq	.+24     	; 0x6922 <vfprintf+0x92>
    690a:	80 33       	cpi	r24, 0x30	; 48
    690c:	69 f4       	brne	.+26     	; 0x6928 <vfprintf+0x98>
    690e:	23 2d       	mov	r18, r3
    6910:	21 60       	ori	r18, 0x01	; 1
    6912:	16 c0       	rjmp	.+44     	; 0x6940 <vfprintf+0xb0>
    6914:	83 2d       	mov	r24, r3
    6916:	82 60       	ori	r24, 0x02	; 2
    6918:	38 2e       	mov	r3, r24
    691a:	e3 2d       	mov	r30, r3
    691c:	e4 60       	ori	r30, 0x04	; 4
    691e:	3e 2e       	mov	r3, r30
    6920:	2a c0       	rjmp	.+84     	; 0x6976 <vfprintf+0xe6>
    6922:	f3 2d       	mov	r31, r3
    6924:	f8 60       	ori	r31, 0x08	; 8
    6926:	1d c0       	rjmp	.+58     	; 0x6962 <vfprintf+0xd2>
    6928:	37 fc       	sbrc	r3, 7
    692a:	2d c0       	rjmp	.+90     	; 0x6986 <vfprintf+0xf6>
    692c:	20 ed       	ldi	r18, 0xD0	; 208
    692e:	28 0f       	add	r18, r24
    6930:	2a 30       	cpi	r18, 0x0A	; 10
    6932:	40 f0       	brcs	.+16     	; 0x6944 <vfprintf+0xb4>
    6934:	8e 32       	cpi	r24, 0x2E	; 46
    6936:	b9 f4       	brne	.+46     	; 0x6966 <vfprintf+0xd6>
    6938:	36 fc       	sbrc	r3, 6
    693a:	81 c1       	rjmp	.+770    	; 0x6c3e <vfprintf+0x3ae>
    693c:	23 2d       	mov	r18, r3
    693e:	20 64       	ori	r18, 0x40	; 64
    6940:	32 2e       	mov	r3, r18
    6942:	19 c0       	rjmp	.+50     	; 0x6976 <vfprintf+0xe6>
    6944:	36 fe       	sbrs	r3, 6
    6946:	06 c0       	rjmp	.+12     	; 0x6954 <vfprintf+0xc4>
    6948:	8a e0       	ldi	r24, 0x0A	; 10
    694a:	98 9e       	mul	r9, r24
    694c:	20 0d       	add	r18, r0
    694e:	11 24       	eor	r1, r1
    6950:	92 2e       	mov	r9, r18
    6952:	11 c0       	rjmp	.+34     	; 0x6976 <vfprintf+0xe6>
    6954:	ea e0       	ldi	r30, 0x0A	; 10
    6956:	2e 9e       	mul	r2, r30
    6958:	20 0d       	add	r18, r0
    695a:	11 24       	eor	r1, r1
    695c:	22 2e       	mov	r2, r18
    695e:	f3 2d       	mov	r31, r3
    6960:	f0 62       	ori	r31, 0x20	; 32
    6962:	3f 2e       	mov	r3, r31
    6964:	08 c0       	rjmp	.+16     	; 0x6976 <vfprintf+0xe6>
    6966:	8c 36       	cpi	r24, 0x6C	; 108
    6968:	21 f4       	brne	.+8      	; 0x6972 <vfprintf+0xe2>
    696a:	83 2d       	mov	r24, r3
    696c:	80 68       	ori	r24, 0x80	; 128
    696e:	38 2e       	mov	r3, r24
    6970:	02 c0       	rjmp	.+4      	; 0x6976 <vfprintf+0xe6>
    6972:	88 36       	cpi	r24, 0x68	; 104
    6974:	41 f4       	brne	.+16     	; 0x6986 <vfprintf+0xf6>
    6976:	f7 01       	movw	r30, r14
    6978:	93 fd       	sbrc	r25, 3
    697a:	85 91       	lpm	r24, Z+
    697c:	93 ff       	sbrs	r25, 3
    697e:	81 91       	ld	r24, Z+
    6980:	7f 01       	movw	r14, r30
    6982:	81 11       	cpse	r24, r1
    6984:	b3 cf       	rjmp	.-154    	; 0x68ec <vfprintf+0x5c>
    6986:	98 2f       	mov	r25, r24
    6988:	9f 7d       	andi	r25, 0xDF	; 223
    698a:	95 54       	subi	r25, 0x45	; 69
    698c:	93 30       	cpi	r25, 0x03	; 3
    698e:	28 f4       	brcc	.+10     	; 0x699a <vfprintf+0x10a>
    6990:	0c 5f       	subi	r16, 0xFC	; 252
    6992:	1f 4f       	sbci	r17, 0xFF	; 255
    6994:	9f e3       	ldi	r25, 0x3F	; 63
    6996:	99 83       	std	Y+1, r25	; 0x01
    6998:	0d c0       	rjmp	.+26     	; 0x69b4 <vfprintf+0x124>
    699a:	83 36       	cpi	r24, 0x63	; 99
    699c:	31 f0       	breq	.+12     	; 0x69aa <vfprintf+0x11a>
    699e:	83 37       	cpi	r24, 0x73	; 115
    69a0:	71 f0       	breq	.+28     	; 0x69be <vfprintf+0x12e>
    69a2:	83 35       	cpi	r24, 0x53	; 83
    69a4:	09 f0       	breq	.+2      	; 0x69a8 <vfprintf+0x118>
    69a6:	59 c0       	rjmp	.+178    	; 0x6a5a <vfprintf+0x1ca>
    69a8:	21 c0       	rjmp	.+66     	; 0x69ec <vfprintf+0x15c>
    69aa:	f8 01       	movw	r30, r16
    69ac:	80 81       	ld	r24, Z
    69ae:	89 83       	std	Y+1, r24	; 0x01
    69b0:	0e 5f       	subi	r16, 0xFE	; 254
    69b2:	1f 4f       	sbci	r17, 0xFF	; 255
    69b4:	88 24       	eor	r8, r8
    69b6:	83 94       	inc	r8
    69b8:	91 2c       	mov	r9, r1
    69ba:	53 01       	movw	r10, r6
    69bc:	13 c0       	rjmp	.+38     	; 0x69e4 <vfprintf+0x154>
    69be:	28 01       	movw	r4, r16
    69c0:	f2 e0       	ldi	r31, 0x02	; 2
    69c2:	4f 0e       	add	r4, r31
    69c4:	51 1c       	adc	r5, r1
    69c6:	f8 01       	movw	r30, r16
    69c8:	a0 80       	ld	r10, Z
    69ca:	b1 80       	ldd	r11, Z+1	; 0x01
    69cc:	36 fe       	sbrs	r3, 6
    69ce:	03 c0       	rjmp	.+6      	; 0x69d6 <vfprintf+0x146>
    69d0:	69 2d       	mov	r22, r9
    69d2:	70 e0       	ldi	r23, 0x00	; 0
    69d4:	02 c0       	rjmp	.+4      	; 0x69da <vfprintf+0x14a>
    69d6:	6f ef       	ldi	r22, 0xFF	; 255
    69d8:	7f ef       	ldi	r23, 0xFF	; 255
    69da:	c5 01       	movw	r24, r10
    69dc:	0e 94 1e 3b 	call	0x763c	; 0x763c <strnlen>
    69e0:	4c 01       	movw	r8, r24
    69e2:	82 01       	movw	r16, r4
    69e4:	f3 2d       	mov	r31, r3
    69e6:	ff 77       	andi	r31, 0x7F	; 127
    69e8:	3f 2e       	mov	r3, r31
    69ea:	16 c0       	rjmp	.+44     	; 0x6a18 <vfprintf+0x188>
    69ec:	28 01       	movw	r4, r16
    69ee:	22 e0       	ldi	r18, 0x02	; 2
    69f0:	42 0e       	add	r4, r18
    69f2:	51 1c       	adc	r5, r1
    69f4:	f8 01       	movw	r30, r16
    69f6:	a0 80       	ld	r10, Z
    69f8:	b1 80       	ldd	r11, Z+1	; 0x01
    69fa:	36 fe       	sbrs	r3, 6
    69fc:	03 c0       	rjmp	.+6      	; 0x6a04 <vfprintf+0x174>
    69fe:	69 2d       	mov	r22, r9
    6a00:	70 e0       	ldi	r23, 0x00	; 0
    6a02:	02 c0       	rjmp	.+4      	; 0x6a08 <vfprintf+0x178>
    6a04:	6f ef       	ldi	r22, 0xFF	; 255
    6a06:	7f ef       	ldi	r23, 0xFF	; 255
    6a08:	c5 01       	movw	r24, r10
    6a0a:	0e 94 13 3b 	call	0x7626	; 0x7626 <strnlen_P>
    6a0e:	4c 01       	movw	r8, r24
    6a10:	f3 2d       	mov	r31, r3
    6a12:	f0 68       	ori	r31, 0x80	; 128
    6a14:	3f 2e       	mov	r3, r31
    6a16:	82 01       	movw	r16, r4
    6a18:	33 fc       	sbrc	r3, 3
    6a1a:	1b c0       	rjmp	.+54     	; 0x6a52 <vfprintf+0x1c2>
    6a1c:	82 2d       	mov	r24, r2
    6a1e:	90 e0       	ldi	r25, 0x00	; 0
    6a20:	88 16       	cp	r8, r24
    6a22:	99 06       	cpc	r9, r25
    6a24:	b0 f4       	brcc	.+44     	; 0x6a52 <vfprintf+0x1c2>
    6a26:	b6 01       	movw	r22, r12
    6a28:	80 e2       	ldi	r24, 0x20	; 32
    6a2a:	90 e0       	ldi	r25, 0x00	; 0
    6a2c:	0e 94 39 3b 	call	0x7672	; 0x7672 <fputc>
    6a30:	2a 94       	dec	r2
    6a32:	f4 cf       	rjmp	.-24     	; 0x6a1c <vfprintf+0x18c>
    6a34:	f5 01       	movw	r30, r10
    6a36:	37 fc       	sbrc	r3, 7
    6a38:	85 91       	lpm	r24, Z+
    6a3a:	37 fe       	sbrs	r3, 7
    6a3c:	81 91       	ld	r24, Z+
    6a3e:	5f 01       	movw	r10, r30
    6a40:	b6 01       	movw	r22, r12
    6a42:	90 e0       	ldi	r25, 0x00	; 0
    6a44:	0e 94 39 3b 	call	0x7672	; 0x7672 <fputc>
    6a48:	21 10       	cpse	r2, r1
    6a4a:	2a 94       	dec	r2
    6a4c:	21 e0       	ldi	r18, 0x01	; 1
    6a4e:	82 1a       	sub	r8, r18
    6a50:	91 08       	sbc	r9, r1
    6a52:	81 14       	cp	r8, r1
    6a54:	91 04       	cpc	r9, r1
    6a56:	71 f7       	brne	.-36     	; 0x6a34 <vfprintf+0x1a4>
    6a58:	e8 c0       	rjmp	.+464    	; 0x6c2a <vfprintf+0x39a>
    6a5a:	84 36       	cpi	r24, 0x64	; 100
    6a5c:	11 f0       	breq	.+4      	; 0x6a62 <vfprintf+0x1d2>
    6a5e:	89 36       	cpi	r24, 0x69	; 105
    6a60:	41 f5       	brne	.+80     	; 0x6ab2 <vfprintf+0x222>
    6a62:	f8 01       	movw	r30, r16
    6a64:	37 fe       	sbrs	r3, 7
    6a66:	07 c0       	rjmp	.+14     	; 0x6a76 <vfprintf+0x1e6>
    6a68:	60 81       	ld	r22, Z
    6a6a:	71 81       	ldd	r23, Z+1	; 0x01
    6a6c:	82 81       	ldd	r24, Z+2	; 0x02
    6a6e:	93 81       	ldd	r25, Z+3	; 0x03
    6a70:	0c 5f       	subi	r16, 0xFC	; 252
    6a72:	1f 4f       	sbci	r17, 0xFF	; 255
    6a74:	08 c0       	rjmp	.+16     	; 0x6a86 <vfprintf+0x1f6>
    6a76:	60 81       	ld	r22, Z
    6a78:	71 81       	ldd	r23, Z+1	; 0x01
    6a7a:	07 2e       	mov	r0, r23
    6a7c:	00 0c       	add	r0, r0
    6a7e:	88 0b       	sbc	r24, r24
    6a80:	99 0b       	sbc	r25, r25
    6a82:	0e 5f       	subi	r16, 0xFE	; 254
    6a84:	1f 4f       	sbci	r17, 0xFF	; 255
    6a86:	f3 2d       	mov	r31, r3
    6a88:	ff 76       	andi	r31, 0x6F	; 111
    6a8a:	3f 2e       	mov	r3, r31
    6a8c:	97 ff       	sbrs	r25, 7
    6a8e:	09 c0       	rjmp	.+18     	; 0x6aa2 <vfprintf+0x212>
    6a90:	90 95       	com	r25
    6a92:	80 95       	com	r24
    6a94:	70 95       	com	r23
    6a96:	61 95       	neg	r22
    6a98:	7f 4f       	sbci	r23, 0xFF	; 255
    6a9a:	8f 4f       	sbci	r24, 0xFF	; 255
    6a9c:	9f 4f       	sbci	r25, 0xFF	; 255
    6a9e:	f0 68       	ori	r31, 0x80	; 128
    6aa0:	3f 2e       	mov	r3, r31
    6aa2:	2a e0       	ldi	r18, 0x0A	; 10
    6aa4:	30 e0       	ldi	r19, 0x00	; 0
    6aa6:	a3 01       	movw	r20, r6
    6aa8:	0e 94 8e 3b 	call	0x771c	; 0x771c <__ultoa_invert>
    6aac:	88 2e       	mov	r8, r24
    6aae:	86 18       	sub	r8, r6
    6ab0:	45 c0       	rjmp	.+138    	; 0x6b3c <vfprintf+0x2ac>
    6ab2:	85 37       	cpi	r24, 0x75	; 117
    6ab4:	31 f4       	brne	.+12     	; 0x6ac2 <vfprintf+0x232>
    6ab6:	23 2d       	mov	r18, r3
    6ab8:	2f 7e       	andi	r18, 0xEF	; 239
    6aba:	b2 2e       	mov	r11, r18
    6abc:	2a e0       	ldi	r18, 0x0A	; 10
    6abe:	30 e0       	ldi	r19, 0x00	; 0
    6ac0:	25 c0       	rjmp	.+74     	; 0x6b0c <vfprintf+0x27c>
    6ac2:	93 2d       	mov	r25, r3
    6ac4:	99 7f       	andi	r25, 0xF9	; 249
    6ac6:	b9 2e       	mov	r11, r25
    6ac8:	8f 36       	cpi	r24, 0x6F	; 111
    6aca:	c1 f0       	breq	.+48     	; 0x6afc <vfprintf+0x26c>
    6acc:	18 f4       	brcc	.+6      	; 0x6ad4 <vfprintf+0x244>
    6ace:	88 35       	cpi	r24, 0x58	; 88
    6ad0:	79 f0       	breq	.+30     	; 0x6af0 <vfprintf+0x260>
    6ad2:	b5 c0       	rjmp	.+362    	; 0x6c3e <vfprintf+0x3ae>
    6ad4:	80 37       	cpi	r24, 0x70	; 112
    6ad6:	19 f0       	breq	.+6      	; 0x6ade <vfprintf+0x24e>
    6ad8:	88 37       	cpi	r24, 0x78	; 120
    6ada:	21 f0       	breq	.+8      	; 0x6ae4 <vfprintf+0x254>
    6adc:	b0 c0       	rjmp	.+352    	; 0x6c3e <vfprintf+0x3ae>
    6ade:	e9 2f       	mov	r30, r25
    6ae0:	e0 61       	ori	r30, 0x10	; 16
    6ae2:	be 2e       	mov	r11, r30
    6ae4:	b4 fe       	sbrs	r11, 4
    6ae6:	0d c0       	rjmp	.+26     	; 0x6b02 <vfprintf+0x272>
    6ae8:	fb 2d       	mov	r31, r11
    6aea:	f4 60       	ori	r31, 0x04	; 4
    6aec:	bf 2e       	mov	r11, r31
    6aee:	09 c0       	rjmp	.+18     	; 0x6b02 <vfprintf+0x272>
    6af0:	34 fe       	sbrs	r3, 4
    6af2:	0a c0       	rjmp	.+20     	; 0x6b08 <vfprintf+0x278>
    6af4:	29 2f       	mov	r18, r25
    6af6:	26 60       	ori	r18, 0x06	; 6
    6af8:	b2 2e       	mov	r11, r18
    6afa:	06 c0       	rjmp	.+12     	; 0x6b08 <vfprintf+0x278>
    6afc:	28 e0       	ldi	r18, 0x08	; 8
    6afe:	30 e0       	ldi	r19, 0x00	; 0
    6b00:	05 c0       	rjmp	.+10     	; 0x6b0c <vfprintf+0x27c>
    6b02:	20 e1       	ldi	r18, 0x10	; 16
    6b04:	30 e0       	ldi	r19, 0x00	; 0
    6b06:	02 c0       	rjmp	.+4      	; 0x6b0c <vfprintf+0x27c>
    6b08:	20 e1       	ldi	r18, 0x10	; 16
    6b0a:	32 e0       	ldi	r19, 0x02	; 2
    6b0c:	f8 01       	movw	r30, r16
    6b0e:	b7 fe       	sbrs	r11, 7
    6b10:	07 c0       	rjmp	.+14     	; 0x6b20 <vfprintf+0x290>
    6b12:	60 81       	ld	r22, Z
    6b14:	71 81       	ldd	r23, Z+1	; 0x01
    6b16:	82 81       	ldd	r24, Z+2	; 0x02
    6b18:	93 81       	ldd	r25, Z+3	; 0x03
    6b1a:	0c 5f       	subi	r16, 0xFC	; 252
    6b1c:	1f 4f       	sbci	r17, 0xFF	; 255
    6b1e:	06 c0       	rjmp	.+12     	; 0x6b2c <vfprintf+0x29c>
    6b20:	60 81       	ld	r22, Z
    6b22:	71 81       	ldd	r23, Z+1	; 0x01
    6b24:	80 e0       	ldi	r24, 0x00	; 0
    6b26:	90 e0       	ldi	r25, 0x00	; 0
    6b28:	0e 5f       	subi	r16, 0xFE	; 254
    6b2a:	1f 4f       	sbci	r17, 0xFF	; 255
    6b2c:	a3 01       	movw	r20, r6
    6b2e:	0e 94 8e 3b 	call	0x771c	; 0x771c <__ultoa_invert>
    6b32:	88 2e       	mov	r8, r24
    6b34:	86 18       	sub	r8, r6
    6b36:	fb 2d       	mov	r31, r11
    6b38:	ff 77       	andi	r31, 0x7F	; 127
    6b3a:	3f 2e       	mov	r3, r31
    6b3c:	36 fe       	sbrs	r3, 6
    6b3e:	0d c0       	rjmp	.+26     	; 0x6b5a <vfprintf+0x2ca>
    6b40:	23 2d       	mov	r18, r3
    6b42:	2e 7f       	andi	r18, 0xFE	; 254
    6b44:	a2 2e       	mov	r10, r18
    6b46:	89 14       	cp	r8, r9
    6b48:	58 f4       	brcc	.+22     	; 0x6b60 <vfprintf+0x2d0>
    6b4a:	34 fe       	sbrs	r3, 4
    6b4c:	0b c0       	rjmp	.+22     	; 0x6b64 <vfprintf+0x2d4>
    6b4e:	32 fc       	sbrc	r3, 2
    6b50:	09 c0       	rjmp	.+18     	; 0x6b64 <vfprintf+0x2d4>
    6b52:	83 2d       	mov	r24, r3
    6b54:	8e 7e       	andi	r24, 0xEE	; 238
    6b56:	a8 2e       	mov	r10, r24
    6b58:	05 c0       	rjmp	.+10     	; 0x6b64 <vfprintf+0x2d4>
    6b5a:	b8 2c       	mov	r11, r8
    6b5c:	a3 2c       	mov	r10, r3
    6b5e:	03 c0       	rjmp	.+6      	; 0x6b66 <vfprintf+0x2d6>
    6b60:	b8 2c       	mov	r11, r8
    6b62:	01 c0       	rjmp	.+2      	; 0x6b66 <vfprintf+0x2d6>
    6b64:	b9 2c       	mov	r11, r9
    6b66:	a4 fe       	sbrs	r10, 4
    6b68:	0f c0       	rjmp	.+30     	; 0x6b88 <vfprintf+0x2f8>
    6b6a:	fe 01       	movw	r30, r28
    6b6c:	e8 0d       	add	r30, r8
    6b6e:	f1 1d       	adc	r31, r1
    6b70:	80 81       	ld	r24, Z
    6b72:	80 33       	cpi	r24, 0x30	; 48
    6b74:	21 f4       	brne	.+8      	; 0x6b7e <vfprintf+0x2ee>
    6b76:	9a 2d       	mov	r25, r10
    6b78:	99 7e       	andi	r25, 0xE9	; 233
    6b7a:	a9 2e       	mov	r10, r25
    6b7c:	09 c0       	rjmp	.+18     	; 0x6b90 <vfprintf+0x300>
    6b7e:	a2 fe       	sbrs	r10, 2
    6b80:	06 c0       	rjmp	.+12     	; 0x6b8e <vfprintf+0x2fe>
    6b82:	b3 94       	inc	r11
    6b84:	b3 94       	inc	r11
    6b86:	04 c0       	rjmp	.+8      	; 0x6b90 <vfprintf+0x300>
    6b88:	8a 2d       	mov	r24, r10
    6b8a:	86 78       	andi	r24, 0x86	; 134
    6b8c:	09 f0       	breq	.+2      	; 0x6b90 <vfprintf+0x300>
    6b8e:	b3 94       	inc	r11
    6b90:	a3 fc       	sbrc	r10, 3
    6b92:	11 c0       	rjmp	.+34     	; 0x6bb6 <vfprintf+0x326>
    6b94:	a0 fe       	sbrs	r10, 0
    6b96:	06 c0       	rjmp	.+12     	; 0x6ba4 <vfprintf+0x314>
    6b98:	b2 14       	cp	r11, r2
    6b9a:	88 f4       	brcc	.+34     	; 0x6bbe <vfprintf+0x32e>
    6b9c:	28 0c       	add	r2, r8
    6b9e:	92 2c       	mov	r9, r2
    6ba0:	9b 18       	sub	r9, r11
    6ba2:	0e c0       	rjmp	.+28     	; 0x6bc0 <vfprintf+0x330>
    6ba4:	b2 14       	cp	r11, r2
    6ba6:	60 f4       	brcc	.+24     	; 0x6bc0 <vfprintf+0x330>
    6ba8:	b6 01       	movw	r22, r12
    6baa:	80 e2       	ldi	r24, 0x20	; 32
    6bac:	90 e0       	ldi	r25, 0x00	; 0
    6bae:	0e 94 39 3b 	call	0x7672	; 0x7672 <fputc>
    6bb2:	b3 94       	inc	r11
    6bb4:	f7 cf       	rjmp	.-18     	; 0x6ba4 <vfprintf+0x314>
    6bb6:	b2 14       	cp	r11, r2
    6bb8:	18 f4       	brcc	.+6      	; 0x6bc0 <vfprintf+0x330>
    6bba:	2b 18       	sub	r2, r11
    6bbc:	02 c0       	rjmp	.+4      	; 0x6bc2 <vfprintf+0x332>
    6bbe:	98 2c       	mov	r9, r8
    6bc0:	21 2c       	mov	r2, r1
    6bc2:	a4 fe       	sbrs	r10, 4
    6bc4:	10 c0       	rjmp	.+32     	; 0x6be6 <vfprintf+0x356>
    6bc6:	b6 01       	movw	r22, r12
    6bc8:	80 e3       	ldi	r24, 0x30	; 48
    6bca:	90 e0       	ldi	r25, 0x00	; 0
    6bcc:	0e 94 39 3b 	call	0x7672	; 0x7672 <fputc>
    6bd0:	a2 fe       	sbrs	r10, 2
    6bd2:	17 c0       	rjmp	.+46     	; 0x6c02 <vfprintf+0x372>
    6bd4:	a1 fc       	sbrc	r10, 1
    6bd6:	03 c0       	rjmp	.+6      	; 0x6bde <vfprintf+0x34e>
    6bd8:	88 e7       	ldi	r24, 0x78	; 120
    6bda:	90 e0       	ldi	r25, 0x00	; 0
    6bdc:	02 c0       	rjmp	.+4      	; 0x6be2 <vfprintf+0x352>
    6bde:	88 e5       	ldi	r24, 0x58	; 88
    6be0:	90 e0       	ldi	r25, 0x00	; 0
    6be2:	b6 01       	movw	r22, r12
    6be4:	0c c0       	rjmp	.+24     	; 0x6bfe <vfprintf+0x36e>
    6be6:	8a 2d       	mov	r24, r10
    6be8:	86 78       	andi	r24, 0x86	; 134
    6bea:	59 f0       	breq	.+22     	; 0x6c02 <vfprintf+0x372>
    6bec:	a1 fe       	sbrs	r10, 1
    6bee:	02 c0       	rjmp	.+4      	; 0x6bf4 <vfprintf+0x364>
    6bf0:	8b e2       	ldi	r24, 0x2B	; 43
    6bf2:	01 c0       	rjmp	.+2      	; 0x6bf6 <vfprintf+0x366>
    6bf4:	80 e2       	ldi	r24, 0x20	; 32
    6bf6:	a7 fc       	sbrc	r10, 7
    6bf8:	8d e2       	ldi	r24, 0x2D	; 45
    6bfa:	b6 01       	movw	r22, r12
    6bfc:	90 e0       	ldi	r25, 0x00	; 0
    6bfe:	0e 94 39 3b 	call	0x7672	; 0x7672 <fputc>
    6c02:	89 14       	cp	r8, r9
    6c04:	38 f4       	brcc	.+14     	; 0x6c14 <vfprintf+0x384>
    6c06:	b6 01       	movw	r22, r12
    6c08:	80 e3       	ldi	r24, 0x30	; 48
    6c0a:	90 e0       	ldi	r25, 0x00	; 0
    6c0c:	0e 94 39 3b 	call	0x7672	; 0x7672 <fputc>
    6c10:	9a 94       	dec	r9
    6c12:	f7 cf       	rjmp	.-18     	; 0x6c02 <vfprintf+0x372>
    6c14:	8a 94       	dec	r8
    6c16:	f3 01       	movw	r30, r6
    6c18:	e8 0d       	add	r30, r8
    6c1a:	f1 1d       	adc	r31, r1
    6c1c:	80 81       	ld	r24, Z
    6c1e:	b6 01       	movw	r22, r12
    6c20:	90 e0       	ldi	r25, 0x00	; 0
    6c22:	0e 94 39 3b 	call	0x7672	; 0x7672 <fputc>
    6c26:	81 10       	cpse	r8, r1
    6c28:	f5 cf       	rjmp	.-22     	; 0x6c14 <vfprintf+0x384>
    6c2a:	22 20       	and	r2, r2
    6c2c:	09 f4       	brne	.+2      	; 0x6c30 <vfprintf+0x3a0>
    6c2e:	42 ce       	rjmp	.-892    	; 0x68b4 <vfprintf+0x24>
    6c30:	b6 01       	movw	r22, r12
    6c32:	80 e2       	ldi	r24, 0x20	; 32
    6c34:	90 e0       	ldi	r25, 0x00	; 0
    6c36:	0e 94 39 3b 	call	0x7672	; 0x7672 <fputc>
    6c3a:	2a 94       	dec	r2
    6c3c:	f6 cf       	rjmp	.-20     	; 0x6c2a <vfprintf+0x39a>
    6c3e:	f6 01       	movw	r30, r12
    6c40:	86 81       	ldd	r24, Z+6	; 0x06
    6c42:	97 81       	ldd	r25, Z+7	; 0x07
    6c44:	02 c0       	rjmp	.+4      	; 0x6c4a <vfprintf+0x3ba>
    6c46:	8f ef       	ldi	r24, 0xFF	; 255
    6c48:	9f ef       	ldi	r25, 0xFF	; 255
    6c4a:	2b 96       	adiw	r28, 0x0b	; 11
    6c4c:	e2 e1       	ldi	r30, 0x12	; 18
    6c4e:	0c 94 cc 30 	jmp	0x6198	; 0x6198 <__epilogue_restores__>

00006c52 <putval>:
    6c52:	20 fd       	sbrc	r18, 0
    6c54:	09 c0       	rjmp	.+18     	; 0x6c68 <putval+0x16>
    6c56:	fc 01       	movw	r30, r24
    6c58:	23 fd       	sbrc	r18, 3
    6c5a:	05 c0       	rjmp	.+10     	; 0x6c66 <putval+0x14>
    6c5c:	22 ff       	sbrs	r18, 2
    6c5e:	02 c0       	rjmp	.+4      	; 0x6c64 <putval+0x12>
    6c60:	73 83       	std	Z+3, r23	; 0x03
    6c62:	62 83       	std	Z+2, r22	; 0x02
    6c64:	51 83       	std	Z+1, r21	; 0x01
    6c66:	40 83       	st	Z, r20
    6c68:	08 95       	ret

00006c6a <mulacc>:
    6c6a:	44 fd       	sbrc	r20, 4
    6c6c:	17 c0       	rjmp	.+46     	; 0x6c9c <mulacc+0x32>
    6c6e:	46 fd       	sbrc	r20, 6
    6c70:	17 c0       	rjmp	.+46     	; 0x6ca0 <mulacc+0x36>
    6c72:	ab 01       	movw	r20, r22
    6c74:	bc 01       	movw	r22, r24
    6c76:	da 01       	movw	r26, r20
    6c78:	fb 01       	movw	r30, r22
    6c7a:	aa 0f       	add	r26, r26
    6c7c:	bb 1f       	adc	r27, r27
    6c7e:	ee 1f       	adc	r30, r30
    6c80:	ff 1f       	adc	r31, r31
    6c82:	10 94       	com	r1
    6c84:	d1 f7       	brne	.-12     	; 0x6c7a <mulacc+0x10>
    6c86:	4a 0f       	add	r20, r26
    6c88:	5b 1f       	adc	r21, r27
    6c8a:	6e 1f       	adc	r22, r30
    6c8c:	7f 1f       	adc	r23, r31
    6c8e:	cb 01       	movw	r24, r22
    6c90:	ba 01       	movw	r22, r20
    6c92:	66 0f       	add	r22, r22
    6c94:	77 1f       	adc	r23, r23
    6c96:	88 1f       	adc	r24, r24
    6c98:	99 1f       	adc	r25, r25
    6c9a:	09 c0       	rjmp	.+18     	; 0x6cae <mulacc+0x44>
    6c9c:	33 e0       	ldi	r19, 0x03	; 3
    6c9e:	01 c0       	rjmp	.+2      	; 0x6ca2 <mulacc+0x38>
    6ca0:	34 e0       	ldi	r19, 0x04	; 4
    6ca2:	66 0f       	add	r22, r22
    6ca4:	77 1f       	adc	r23, r23
    6ca6:	88 1f       	adc	r24, r24
    6ca8:	99 1f       	adc	r25, r25
    6caa:	31 50       	subi	r19, 0x01	; 1
    6cac:	d1 f7       	brne	.-12     	; 0x6ca2 <mulacc+0x38>
    6cae:	62 0f       	add	r22, r18
    6cb0:	71 1d       	adc	r23, r1
    6cb2:	81 1d       	adc	r24, r1
    6cb4:	91 1d       	adc	r25, r1
    6cb6:	08 95       	ret

00006cb8 <skip_spaces>:
    6cb8:	0f 93       	push	r16
    6cba:	1f 93       	push	r17
    6cbc:	cf 93       	push	r28
    6cbe:	df 93       	push	r29
    6cc0:	8c 01       	movw	r16, r24
    6cc2:	c8 01       	movw	r24, r16
    6cc4:	0e 94 02 33 	call	0x6604	; 0x6604 <fgetc>
    6cc8:	ec 01       	movw	r28, r24
    6cca:	97 fd       	sbrc	r25, 7
    6ccc:	08 c0       	rjmp	.+16     	; 0x6cde <skip_spaces+0x26>
    6cce:	0e 94 a2 32 	call	0x6544	; 0x6544 <isspace>
    6cd2:	89 2b       	or	r24, r25
    6cd4:	b1 f7       	brne	.-20     	; 0x6cc2 <skip_spaces+0xa>
    6cd6:	b8 01       	movw	r22, r16
    6cd8:	ce 01       	movw	r24, r28
    6cda:	0e 94 75 3b 	call	0x76ea	; 0x76ea <ungetc>
    6cde:	ce 01       	movw	r24, r28
    6ce0:	df 91       	pop	r29
    6ce2:	cf 91       	pop	r28
    6ce4:	1f 91       	pop	r17
    6ce6:	0f 91       	pop	r16
    6ce8:	08 95       	ret

00006cea <conv_int>:
    6cea:	8f 92       	push	r8
    6cec:	9f 92       	push	r9
    6cee:	af 92       	push	r10
    6cf0:	bf 92       	push	r11
    6cf2:	ef 92       	push	r14
    6cf4:	ff 92       	push	r15
    6cf6:	0f 93       	push	r16
    6cf8:	1f 93       	push	r17
    6cfa:	cf 93       	push	r28
    6cfc:	df 93       	push	r29
    6cfe:	8c 01       	movw	r16, r24
    6d00:	d6 2f       	mov	r29, r22
    6d02:	7a 01       	movw	r14, r20
    6d04:	b2 2e       	mov	r11, r18
    6d06:	0e 94 02 33 	call	0x6604	; 0x6604 <fgetc>
    6d0a:	9c 01       	movw	r18, r24
    6d0c:	33 27       	eor	r19, r19
    6d0e:	2b 32       	cpi	r18, 0x2B	; 43
    6d10:	31 05       	cpc	r19, r1
    6d12:	31 f0       	breq	.+12     	; 0x6d20 <conv_int+0x36>
    6d14:	2d 32       	cpi	r18, 0x2D	; 45
    6d16:	31 05       	cpc	r19, r1
    6d18:	61 f4       	brne	.+24     	; 0x6d32 <conv_int+0x48>
    6d1a:	8b 2d       	mov	r24, r11
    6d1c:	80 68       	ori	r24, 0x80	; 128
    6d1e:	b8 2e       	mov	r11, r24
    6d20:	d1 50       	subi	r29, 0x01	; 1
    6d22:	11 f4       	brne	.+4      	; 0x6d28 <conv_int+0x3e>
    6d24:	80 e0       	ldi	r24, 0x00	; 0
    6d26:	68 c0       	rjmp	.+208    	; 0x6df8 <conv_int+0x10e>
    6d28:	c8 01       	movw	r24, r16
    6d2a:	0e 94 02 33 	call	0x6604	; 0x6604 <fgetc>
    6d2e:	97 fd       	sbrc	r25, 7
    6d30:	f9 cf       	rjmp	.-14     	; 0x6d24 <conv_int+0x3a>
    6d32:	cb 2d       	mov	r28, r11
    6d34:	cd 7f       	andi	r28, 0xFD	; 253
    6d36:	2b 2d       	mov	r18, r11
    6d38:	20 73       	andi	r18, 0x30	; 48
    6d3a:	09 f5       	brne	.+66     	; 0x6d7e <conv_int+0x94>
    6d3c:	80 33       	cpi	r24, 0x30	; 48
    6d3e:	f9 f4       	brne	.+62     	; 0x6d7e <conv_int+0x94>
    6d40:	aa 24       	eor	r10, r10
    6d42:	aa 94       	dec	r10
    6d44:	ad 0e       	add	r10, r29
    6d46:	09 f4       	brne	.+2      	; 0x6d4a <conv_int+0x60>
    6d48:	43 c0       	rjmp	.+134    	; 0x6dd0 <conv_int+0xe6>
    6d4a:	c8 01       	movw	r24, r16
    6d4c:	0e 94 02 33 	call	0x6604	; 0x6604 <fgetc>
    6d50:	97 fd       	sbrc	r25, 7
    6d52:	3e c0       	rjmp	.+124    	; 0x6dd0 <conv_int+0xe6>
    6d54:	9c 01       	movw	r18, r24
    6d56:	2f 7d       	andi	r18, 0xDF	; 223
    6d58:	33 27       	eor	r19, r19
    6d5a:	28 35       	cpi	r18, 0x58	; 88
    6d5c:	31 05       	cpc	r19, r1
    6d5e:	49 f4       	brne	.+18     	; 0x6d72 <conv_int+0x88>
    6d60:	c2 64       	ori	r28, 0x42	; 66
    6d62:	d2 50       	subi	r29, 0x02	; 2
    6d64:	a9 f1       	breq	.+106    	; 0x6dd0 <conv_int+0xe6>
    6d66:	c8 01       	movw	r24, r16
    6d68:	0e 94 02 33 	call	0x6604	; 0x6604 <fgetc>
    6d6c:	97 ff       	sbrs	r25, 7
    6d6e:	07 c0       	rjmp	.+14     	; 0x6d7e <conv_int+0x94>
    6d70:	2f c0       	rjmp	.+94     	; 0x6dd0 <conv_int+0xe6>
    6d72:	b6 fe       	sbrs	r11, 6
    6d74:	02 c0       	rjmp	.+4      	; 0x6d7a <conv_int+0x90>
    6d76:	c2 60       	ori	r28, 0x02	; 2
    6d78:	01 c0       	rjmp	.+2      	; 0x6d7c <conv_int+0x92>
    6d7a:	c2 61       	ori	r28, 0x12	; 18
    6d7c:	da 2d       	mov	r29, r10
    6d7e:	81 2c       	mov	r8, r1
    6d80:	91 2c       	mov	r9, r1
    6d82:	54 01       	movw	r10, r8
    6d84:	20 ed       	ldi	r18, 0xD0	; 208
    6d86:	28 0f       	add	r18, r24
    6d88:	28 30       	cpi	r18, 0x08	; 8
    6d8a:	80 f0       	brcs	.+32     	; 0x6dac <conv_int+0xc2>
    6d8c:	c4 ff       	sbrs	r28, 4
    6d8e:	04 c0       	rjmp	.+8      	; 0x6d98 <conv_int+0xae>
    6d90:	b8 01       	movw	r22, r16
    6d92:	0e 94 75 3b 	call	0x76ea	; 0x76ea <ungetc>
    6d96:	19 c0       	rjmp	.+50     	; 0x6dca <conv_int+0xe0>
    6d98:	2a 30       	cpi	r18, 0x0A	; 10
    6d9a:	40 f0       	brcs	.+16     	; 0x6dac <conv_int+0xc2>
    6d9c:	c6 ff       	sbrs	r28, 6
    6d9e:	f8 cf       	rjmp	.-16     	; 0x6d90 <conv_int+0xa6>
    6da0:	2f 7d       	andi	r18, 0xDF	; 223
    6da2:	3f ee       	ldi	r19, 0xEF	; 239
    6da4:	32 0f       	add	r19, r18
    6da6:	36 30       	cpi	r19, 0x06	; 6
    6da8:	98 f7       	brcc	.-26     	; 0x6d90 <conv_int+0xa6>
    6daa:	27 50       	subi	r18, 0x07	; 7
    6dac:	4c 2f       	mov	r20, r28
    6dae:	c5 01       	movw	r24, r10
    6db0:	b4 01       	movw	r22, r8
    6db2:	0e 94 35 36 	call	0x6c6a	; 0x6c6a <mulacc>
    6db6:	4b 01       	movw	r8, r22
    6db8:	5c 01       	movw	r10, r24
    6dba:	c2 60       	ori	r28, 0x02	; 2
    6dbc:	d1 50       	subi	r29, 0x01	; 1
    6dbe:	59 f0       	breq	.+22     	; 0x6dd6 <conv_int+0xec>
    6dc0:	c8 01       	movw	r24, r16
    6dc2:	0e 94 02 33 	call	0x6604	; 0x6604 <fgetc>
    6dc6:	97 ff       	sbrs	r25, 7
    6dc8:	dd cf       	rjmp	.-70     	; 0x6d84 <conv_int+0x9a>
    6dca:	c1 fd       	sbrc	r28, 1
    6dcc:	04 c0       	rjmp	.+8      	; 0x6dd6 <conv_int+0xec>
    6dce:	aa cf       	rjmp	.-172    	; 0x6d24 <conv_int+0x3a>
    6dd0:	81 2c       	mov	r8, r1
    6dd2:	91 2c       	mov	r9, r1
    6dd4:	54 01       	movw	r10, r8
    6dd6:	c7 ff       	sbrs	r28, 7
    6dd8:	08 c0       	rjmp	.+16     	; 0x6dea <conv_int+0x100>
    6dda:	b0 94       	com	r11
    6ddc:	a0 94       	com	r10
    6dde:	90 94       	com	r9
    6de0:	80 94       	com	r8
    6de2:	81 1c       	adc	r8, r1
    6de4:	91 1c       	adc	r9, r1
    6de6:	a1 1c       	adc	r10, r1
    6de8:	b1 1c       	adc	r11, r1
    6dea:	2c 2f       	mov	r18, r28
    6dec:	b5 01       	movw	r22, r10
    6dee:	a4 01       	movw	r20, r8
    6df0:	c7 01       	movw	r24, r14
    6df2:	0e 94 29 36 	call	0x6c52	; 0x6c52 <putval>
    6df6:	81 e0       	ldi	r24, 0x01	; 1
    6df8:	df 91       	pop	r29
    6dfa:	cf 91       	pop	r28
    6dfc:	1f 91       	pop	r17
    6dfe:	0f 91       	pop	r16
    6e00:	ff 90       	pop	r15
    6e02:	ef 90       	pop	r14
    6e04:	bf 90       	pop	r11
    6e06:	af 90       	pop	r10
    6e08:	9f 90       	pop	r9
    6e0a:	8f 90       	pop	r8
    6e0c:	08 95       	ret

00006e0e <conv_brk>:
    6e0e:	a0 e2       	ldi	r26, 0x20	; 32
    6e10:	b0 e0       	ldi	r27, 0x00	; 0
    6e12:	ed e0       	ldi	r30, 0x0D	; 13
    6e14:	f7 e3       	ldi	r31, 0x37	; 55
    6e16:	0c 94 b3 30 	jmp	0x6166	; 0x6166 <__prologue_saves__+0x6>
    6e1a:	5c 01       	movw	r10, r24
    6e1c:	96 2e       	mov	r9, r22
    6e1e:	7a 01       	movw	r14, r20
    6e20:	f9 01       	movw	r30, r18
    6e22:	8e 01       	movw	r16, r28
    6e24:	0f 5f       	subi	r16, 0xFF	; 255
    6e26:	1f 4f       	sbci	r17, 0xFF	; 255
    6e28:	68 01       	movw	r12, r16
    6e2a:	80 e2       	ldi	r24, 0x20	; 32
    6e2c:	d8 01       	movw	r26, r16
    6e2e:	1d 92       	st	X+, r1
    6e30:	8a 95       	dec	r24
    6e32:	e9 f7       	brne	.-6      	; 0x6e2e <conv_brk+0x20>
    6e34:	d5 01       	movw	r26, r10
    6e36:	13 96       	adiw	r26, 0x03	; 3
    6e38:	8c 90       	ld	r8, X
    6e3a:	80 e0       	ldi	r24, 0x00	; 0
    6e3c:	90 e0       	ldi	r25, 0x00	; 0
    6e3e:	61 2c       	mov	r6, r1
    6e40:	71 2c       	mov	r7, r1
    6e42:	30 e0       	ldi	r19, 0x00	; 0
    6e44:	61 e0       	ldi	r22, 0x01	; 1
    6e46:	70 e0       	ldi	r23, 0x00	; 0
    6e48:	83 fc       	sbrc	r8, 3
    6e4a:	25 91       	lpm	r18, Z+
    6e4c:	83 fe       	sbrs	r8, 3
    6e4e:	21 91       	ld	r18, Z+
    6e50:	8f 01       	movw	r16, r30
    6e52:	52 2e       	mov	r5, r18
    6e54:	21 11       	cpse	r18, r1
    6e56:	03 c0       	rjmp	.+6      	; 0x6e5e <conv_brk+0x50>
    6e58:	80 e0       	ldi	r24, 0x00	; 0
    6e5a:	90 e0       	ldi	r25, 0x00	; 0
    6e5c:	92 c0       	rjmp	.+292    	; 0x6f82 <conv_brk+0x174>
    6e5e:	2e 35       	cpi	r18, 0x5E	; 94
    6e60:	11 f4       	brne	.+4      	; 0x6e66 <conv_brk+0x58>
    6e62:	00 97       	sbiw	r24, 0x00	; 0
    6e64:	51 f1       	breq	.+84     	; 0x6eba <conv_brk+0xac>
    6e66:	43 2f       	mov	r20, r19
    6e68:	50 e0       	ldi	r21, 0x00	; 0
    6e6a:	48 17       	cp	r20, r24
    6e6c:	59 07       	cpc	r21, r25
    6e6e:	3c f4       	brge	.+14     	; 0x6e7e <conv_brk+0x70>
    6e70:	2d 35       	cpi	r18, 0x5D	; 93
    6e72:	59 f1       	breq	.+86     	; 0x6eca <conv_brk+0xbc>
    6e74:	2d 32       	cpi	r18, 0x2D	; 45
    6e76:	19 f4       	brne	.+6      	; 0x6e7e <conv_brk+0x70>
    6e78:	77 20       	and	r7, r7
    6e7a:	09 f1       	breq	.+66     	; 0x6ebe <conv_brk+0xb0>
    6e7c:	03 c0       	rjmp	.+6      	; 0x6e84 <conv_brk+0x76>
    6e7e:	77 20       	and	r7, r7
    6e80:	09 f4       	brne	.+2      	; 0x6e84 <conv_brk+0x76>
    6e82:	6a c0       	rjmp	.+212    	; 0x6f58 <conv_brk+0x14a>
    6e84:	45 2d       	mov	r20, r5
    6e86:	46 95       	lsr	r20
    6e88:	46 95       	lsr	r20
    6e8a:	46 95       	lsr	r20
    6e8c:	d6 01       	movw	r26, r12
    6e8e:	a4 0f       	add	r26, r20
    6e90:	b1 1d       	adc	r27, r1
    6e92:	45 2d       	mov	r20, r5
    6e94:	47 70       	andi	r20, 0x07	; 7
    6e96:	8b 01       	movw	r16, r22
    6e98:	02 c0       	rjmp	.+4      	; 0x6e9e <conv_brk+0x90>
    6e9a:	00 0f       	add	r16, r16
    6e9c:	11 1f       	adc	r17, r17
    6e9e:	4a 95       	dec	r20
    6ea0:	e2 f7       	brpl	.-8      	; 0x6e9a <conv_brk+0x8c>
    6ea2:	a8 01       	movw	r20, r16
    6ea4:	5c 91       	ld	r21, X
    6ea6:	45 2b       	or	r20, r21
    6ea8:	4c 93       	st	X, r20
    6eaa:	65 14       	cp	r6, r5
    6eac:	59 f0       	breq	.+22     	; 0x6ec4 <conv_brk+0xb6>
    6eae:	56 14       	cp	r5, r6
    6eb0:	10 f4       	brcc	.+4      	; 0x6eb6 <conv_brk+0xa8>
    6eb2:	53 94       	inc	r5
    6eb4:	e7 cf       	rjmp	.-50     	; 0x6e84 <conv_brk+0x76>
    6eb6:	5a 94       	dec	r5
    6eb8:	e5 cf       	rjmp	.-54     	; 0x6e84 <conv_brk+0x76>
    6eba:	31 e0       	ldi	r19, 0x01	; 1
    6ebc:	04 c0       	rjmp	.+8      	; 0x6ec6 <conv_brk+0xb8>
    6ebe:	77 24       	eor	r7, r7
    6ec0:	73 94       	inc	r7
    6ec2:	01 c0       	rjmp	.+2      	; 0x6ec6 <conv_brk+0xb8>
    6ec4:	71 2c       	mov	r7, r1
    6ec6:	01 96       	adiw	r24, 0x01	; 1
    6ec8:	bf cf       	rjmp	.-130    	; 0x6e48 <conv_brk+0x3a>
    6eca:	77 20       	and	r7, r7
    6ecc:	19 f0       	breq	.+6      	; 0x6ed4 <conv_brk+0xc6>
    6ece:	8e 81       	ldd	r24, Y+6	; 0x06
    6ed0:	80 62       	ori	r24, 0x20	; 32
    6ed2:	8e 83       	std	Y+6, r24	; 0x06
    6ed4:	31 11       	cpse	r19, r1
    6ed6:	03 c0       	rjmp	.+6      	; 0x6ede <conv_brk+0xd0>
    6ed8:	88 24       	eor	r8, r8
    6eda:	83 94       	inc	r8
    6edc:	17 c0       	rjmp	.+46     	; 0x6f0c <conv_brk+0xfe>
    6ede:	f6 01       	movw	r30, r12
    6ee0:	9e 01       	movw	r18, r28
    6ee2:	2f 5d       	subi	r18, 0xDF	; 223
    6ee4:	3f 4f       	sbci	r19, 0xFF	; 255
    6ee6:	80 81       	ld	r24, Z
    6ee8:	80 95       	com	r24
    6eea:	81 93       	st	Z+, r24
    6eec:	2e 17       	cp	r18, r30
    6eee:	3f 07       	cpc	r19, r31
    6ef0:	d1 f7       	brne	.-12     	; 0x6ee6 <conv_brk+0xd8>
    6ef2:	f2 cf       	rjmp	.-28     	; 0x6ed8 <conv_brk+0xca>
    6ef4:	e1 14       	cp	r14, r1
    6ef6:	f1 04       	cpc	r15, r1
    6ef8:	29 f0       	breq	.+10     	; 0x6f04 <conv_brk+0xf6>
    6efa:	d7 01       	movw	r26, r14
    6efc:	8c 93       	st	X, r24
    6efe:	f7 01       	movw	r30, r14
    6f00:	31 96       	adiw	r30, 0x01	; 1
    6f02:	7f 01       	movw	r14, r30
    6f04:	9a 94       	dec	r9
    6f06:	81 2c       	mov	r8, r1
    6f08:	99 20       	and	r9, r9
    6f0a:	f9 f0       	breq	.+62     	; 0x6f4a <conv_brk+0x13c>
    6f0c:	c5 01       	movw	r24, r10
    6f0e:	0e 94 02 33 	call	0x6604	; 0x6604 <fgetc>
    6f12:	97 fd       	sbrc	r25, 7
    6f14:	18 c0       	rjmp	.+48     	; 0x6f46 <conv_brk+0x138>
    6f16:	fc 01       	movw	r30, r24
    6f18:	ff 27       	eor	r31, r31
    6f1a:	23 e0       	ldi	r18, 0x03	; 3
    6f1c:	f5 95       	asr	r31
    6f1e:	e7 95       	ror	r30
    6f20:	2a 95       	dec	r18
    6f22:	e1 f7       	brne	.-8      	; 0x6f1c <conv_brk+0x10e>
    6f24:	ec 0d       	add	r30, r12
    6f26:	fd 1d       	adc	r31, r13
    6f28:	20 81       	ld	r18, Z
    6f2a:	30 e0       	ldi	r19, 0x00	; 0
    6f2c:	ac 01       	movw	r20, r24
    6f2e:	47 70       	andi	r20, 0x07	; 7
    6f30:	55 27       	eor	r21, r21
    6f32:	02 c0       	rjmp	.+4      	; 0x6f38 <conv_brk+0x12a>
    6f34:	35 95       	asr	r19
    6f36:	27 95       	ror	r18
    6f38:	4a 95       	dec	r20
    6f3a:	e2 f7       	brpl	.-8      	; 0x6f34 <conv_brk+0x126>
    6f3c:	20 fd       	sbrc	r18, 0
    6f3e:	da cf       	rjmp	.-76     	; 0x6ef4 <conv_brk+0xe6>
    6f40:	b5 01       	movw	r22, r10
    6f42:	0e 94 75 3b 	call	0x76ea	; 0x76ea <ungetc>
    6f46:	81 10       	cpse	r8, r1
    6f48:	87 cf       	rjmp	.-242    	; 0x6e58 <conv_brk+0x4a>
    6f4a:	e1 14       	cp	r14, r1
    6f4c:	f1 04       	cpc	r15, r1
    6f4e:	11 f0       	breq	.+4      	; 0x6f54 <conv_brk+0x146>
    6f50:	d7 01       	movw	r26, r14
    6f52:	1c 92       	st	X, r1
    6f54:	c8 01       	movw	r24, r16
    6f56:	15 c0       	rjmp	.+42     	; 0x6f82 <conv_brk+0x174>
    6f58:	42 2f       	mov	r20, r18
    6f5a:	46 95       	lsr	r20
    6f5c:	46 95       	lsr	r20
    6f5e:	46 95       	lsr	r20
    6f60:	d6 01       	movw	r26, r12
    6f62:	a4 0f       	add	r26, r20
    6f64:	b1 1d       	adc	r27, r1
    6f66:	42 2f       	mov	r20, r18
    6f68:	47 70       	andi	r20, 0x07	; 7
    6f6a:	8b 01       	movw	r16, r22
    6f6c:	02 c0       	rjmp	.+4      	; 0x6f72 <conv_brk+0x164>
    6f6e:	00 0f       	add	r16, r16
    6f70:	11 1f       	adc	r17, r17
    6f72:	4a 95       	dec	r20
    6f74:	e2 f7       	brpl	.-8      	; 0x6f6e <conv_brk+0x160>
    6f76:	a8 01       	movw	r20, r16
    6f78:	5c 91       	ld	r21, X
    6f7a:	45 2b       	or	r20, r21
    6f7c:	4c 93       	st	X, r20
    6f7e:	62 2e       	mov	r6, r18
    6f80:	a2 cf       	rjmp	.-188    	; 0x6ec6 <conv_brk+0xb8>
    6f82:	a0 96       	adiw	r28, 0x20	; 32
    6f84:	ef e0       	ldi	r30, 0x0F	; 15
    6f86:	0c 94 cf 30 	jmp	0x619e	; 0x619e <__epilogue_restores__+0x6>

00006f8a <vfscanf>:
    6f8a:	a0 e0       	ldi	r26, 0x00	; 0
    6f8c:	b0 e0       	ldi	r27, 0x00	; 0
    6f8e:	eb ec       	ldi	r30, 0xCB	; 203
    6f90:	f7 e3       	ldi	r31, 0x37	; 55
    6f92:	0c 94 b3 30 	jmp	0x6166	; 0x6166 <__prologue_saves__+0x6>
    6f96:	6c 01       	movw	r12, r24
    6f98:	eb 01       	movw	r28, r22
    6f9a:	5a 01       	movw	r10, r20
    6f9c:	fc 01       	movw	r30, r24
    6f9e:	17 82       	std	Z+7, r1	; 0x07
    6fa0:	16 82       	std	Z+6, r1	; 0x06
    6fa2:	51 2c       	mov	r5, r1
    6fa4:	f6 01       	movw	r30, r12
    6fa6:	e3 80       	ldd	r14, Z+3	; 0x03
    6fa8:	fe 01       	movw	r30, r28
    6faa:	e3 fc       	sbrc	r14, 3
    6fac:	85 91       	lpm	r24, Z+
    6fae:	e3 fe       	sbrs	r14, 3
    6fb0:	81 91       	ld	r24, Z+
    6fb2:	18 2f       	mov	r17, r24
    6fb4:	ef 01       	movw	r28, r30
    6fb6:	88 23       	and	r24, r24
    6fb8:	09 f4       	brne	.+2      	; 0x6fbc <vfscanf+0x32>
    6fba:	ee c0       	rjmp	.+476    	; 0x7198 <vfscanf+0x20e>
    6fbc:	90 e0       	ldi	r25, 0x00	; 0
    6fbe:	0e 94 a2 32 	call	0x6544	; 0x6544 <isspace>
    6fc2:	89 2b       	or	r24, r25
    6fc4:	21 f0       	breq	.+8      	; 0x6fce <vfscanf+0x44>
    6fc6:	c6 01       	movw	r24, r12
    6fc8:	0e 94 5c 36 	call	0x6cb8	; 0x6cb8 <skip_spaces>
    6fcc:	eb cf       	rjmp	.-42     	; 0x6fa4 <vfscanf+0x1a>
    6fce:	15 32       	cpi	r17, 0x25	; 37
    6fd0:	41 f4       	brne	.+16     	; 0x6fe2 <vfscanf+0x58>
    6fd2:	fe 01       	movw	r30, r28
    6fd4:	e3 fc       	sbrc	r14, 3
    6fd6:	15 91       	lpm	r17, Z+
    6fd8:	e3 fe       	sbrs	r14, 3
    6fda:	11 91       	ld	r17, Z+
    6fdc:	ef 01       	movw	r28, r30
    6fde:	15 32       	cpi	r17, 0x25	; 37
    6fe0:	81 f4       	brne	.+32     	; 0x7002 <vfscanf+0x78>
    6fe2:	c6 01       	movw	r24, r12
    6fe4:	0e 94 02 33 	call	0x6604	; 0x6604 <fgetc>
    6fe8:	97 fd       	sbrc	r25, 7
    6fea:	d4 c0       	rjmp	.+424    	; 0x7194 <vfscanf+0x20a>
    6fec:	41 2f       	mov	r20, r17
    6fee:	50 e0       	ldi	r21, 0x00	; 0
    6ff0:	9c 01       	movw	r18, r24
    6ff2:	33 27       	eor	r19, r19
    6ff4:	24 17       	cp	r18, r20
    6ff6:	35 07       	cpc	r19, r21
    6ff8:	a9 f2       	breq	.-86     	; 0x6fa4 <vfscanf+0x1a>
    6ffa:	b6 01       	movw	r22, r12
    6ffc:	0e 94 75 3b 	call	0x76ea	; 0x76ea <ungetc>
    7000:	cb c0       	rjmp	.+406    	; 0x7198 <vfscanf+0x20e>
    7002:	1a 32       	cpi	r17, 0x2A	; 42
    7004:	39 f4       	brne	.+14     	; 0x7014 <vfscanf+0x8a>
    7006:	e3 fc       	sbrc	r14, 3
    7008:	15 91       	lpm	r17, Z+
    700a:	e3 fe       	sbrs	r14, 3
    700c:	11 91       	ld	r17, Z+
    700e:	ef 01       	movw	r28, r30
    7010:	01 e0       	ldi	r16, 0x01	; 1
    7012:	01 c0       	rjmp	.+2      	; 0x7016 <vfscanf+0x8c>
    7014:	00 e0       	ldi	r16, 0x00	; 0
    7016:	f1 2c       	mov	r15, r1
    7018:	20 ed       	ldi	r18, 0xD0	; 208
    701a:	21 0f       	add	r18, r17
    701c:	2a 30       	cpi	r18, 0x0A	; 10
    701e:	80 f4       	brcc	.+32     	; 0x7040 <vfscanf+0xb6>
    7020:	02 60       	ori	r16, 0x02	; 2
    7022:	6f 2d       	mov	r22, r15
    7024:	70 e0       	ldi	r23, 0x00	; 0
    7026:	80 e0       	ldi	r24, 0x00	; 0
    7028:	90 e0       	ldi	r25, 0x00	; 0
    702a:	40 e2       	ldi	r20, 0x20	; 32
    702c:	0e 94 35 36 	call	0x6c6a	; 0x6c6a <mulacc>
    7030:	f6 2e       	mov	r15, r22
    7032:	fe 01       	movw	r30, r28
    7034:	e3 fc       	sbrc	r14, 3
    7036:	15 91       	lpm	r17, Z+
    7038:	e3 fe       	sbrs	r14, 3
    703a:	11 91       	ld	r17, Z+
    703c:	ef 01       	movw	r28, r30
    703e:	ec cf       	rjmp	.-40     	; 0x7018 <vfscanf+0x8e>
    7040:	01 ff       	sbrs	r16, 1
    7042:	03 c0       	rjmp	.+6      	; 0x704a <vfscanf+0xc0>
    7044:	f1 10       	cpse	r15, r1
    7046:	03 c0       	rjmp	.+6      	; 0x704e <vfscanf+0xc4>
    7048:	a7 c0       	rjmp	.+334    	; 0x7198 <vfscanf+0x20e>
    704a:	ff 24       	eor	r15, r15
    704c:	fa 94       	dec	r15
    704e:	18 36       	cpi	r17, 0x68	; 104
    7050:	19 f0       	breq	.+6      	; 0x7058 <vfscanf+0xce>
    7052:	1c 36       	cpi	r17, 0x6C	; 108
    7054:	51 f0       	breq	.+20     	; 0x706a <vfscanf+0xe0>
    7056:	10 c0       	rjmp	.+32     	; 0x7078 <vfscanf+0xee>
    7058:	fe 01       	movw	r30, r28
    705a:	e3 fc       	sbrc	r14, 3
    705c:	15 91       	lpm	r17, Z+
    705e:	e3 fe       	sbrs	r14, 3
    7060:	11 91       	ld	r17, Z+
    7062:	ef 01       	movw	r28, r30
    7064:	18 36       	cpi	r17, 0x68	; 104
    7066:	41 f4       	brne	.+16     	; 0x7078 <vfscanf+0xee>
    7068:	08 60       	ori	r16, 0x08	; 8
    706a:	04 60       	ori	r16, 0x04	; 4
    706c:	fe 01       	movw	r30, r28
    706e:	e3 fc       	sbrc	r14, 3
    7070:	15 91       	lpm	r17, Z+
    7072:	e3 fe       	sbrs	r14, 3
    7074:	11 91       	ld	r17, Z+
    7076:	ef 01       	movw	r28, r30
    7078:	11 23       	and	r17, r17
    707a:	09 f4       	brne	.+2      	; 0x707e <vfscanf+0xf4>
    707c:	8d c0       	rjmp	.+282    	; 0x7198 <vfscanf+0x20e>
    707e:	61 2f       	mov	r22, r17
    7080:	70 e0       	ldi	r23, 0x00	; 0
    7082:	86 ed       	ldi	r24, 0xD6	; 214
    7084:	90 e0       	ldi	r25, 0x00	; 0
    7086:	0e 94 08 3b 	call	0x7610	; 0x7610 <strchr_P>
    708a:	89 2b       	or	r24, r25
    708c:	09 f4       	brne	.+2      	; 0x7090 <vfscanf+0x106>
    708e:	84 c0       	rjmp	.+264    	; 0x7198 <vfscanf+0x20e>
    7090:	00 fd       	sbrc	r16, 0
    7092:	07 c0       	rjmp	.+14     	; 0x70a2 <vfscanf+0x118>
    7094:	f5 01       	movw	r30, r10
    7096:	80 80       	ld	r8, Z
    7098:	91 80       	ldd	r9, Z+1	; 0x01
    709a:	c5 01       	movw	r24, r10
    709c:	02 96       	adiw	r24, 0x02	; 2
    709e:	5c 01       	movw	r10, r24
    70a0:	02 c0       	rjmp	.+4      	; 0x70a6 <vfscanf+0x11c>
    70a2:	81 2c       	mov	r8, r1
    70a4:	91 2c       	mov	r9, r1
    70a6:	1e 36       	cpi	r17, 0x6E	; 110
    70a8:	51 f4       	brne	.+20     	; 0x70be <vfscanf+0x134>
    70aa:	f6 01       	movw	r30, r12
    70ac:	46 81       	ldd	r20, Z+6	; 0x06
    70ae:	57 81       	ldd	r21, Z+7	; 0x07
    70b0:	60 e0       	ldi	r22, 0x00	; 0
    70b2:	70 e0       	ldi	r23, 0x00	; 0
    70b4:	20 2f       	mov	r18, r16
    70b6:	c4 01       	movw	r24, r8
    70b8:	0e 94 29 36 	call	0x6c52	; 0x6c52 <putval>
    70bc:	73 cf       	rjmp	.-282    	; 0x6fa4 <vfscanf+0x1a>
    70be:	13 36       	cpi	r17, 0x63	; 99
    70c0:	a9 f4       	brne	.+42     	; 0x70ec <vfscanf+0x162>
    70c2:	01 fd       	sbrc	r16, 1
    70c4:	02 c0       	rjmp	.+4      	; 0x70ca <vfscanf+0x140>
    70c6:	ff 24       	eor	r15, r15
    70c8:	f3 94       	inc	r15
    70ca:	c6 01       	movw	r24, r12
    70cc:	0e 94 02 33 	call	0x6604	; 0x6604 <fgetc>
    70d0:	97 fd       	sbrc	r25, 7
    70d2:	60 c0       	rjmp	.+192    	; 0x7194 <vfscanf+0x20a>
    70d4:	81 14       	cp	r8, r1
    70d6:	91 04       	cpc	r9, r1
    70d8:	29 f0       	breq	.+10     	; 0x70e4 <vfscanf+0x15a>
    70da:	f4 01       	movw	r30, r8
    70dc:	80 83       	st	Z, r24
    70de:	c4 01       	movw	r24, r8
    70e0:	01 96       	adiw	r24, 0x01	; 1
    70e2:	4c 01       	movw	r8, r24
    70e4:	fa 94       	dec	r15
    70e6:	f1 10       	cpse	r15, r1
    70e8:	f0 cf       	rjmp	.-32     	; 0x70ca <vfscanf+0x140>
    70ea:	50 c0       	rjmp	.+160    	; 0x718c <vfscanf+0x202>
    70ec:	1b 35       	cpi	r17, 0x5B	; 91
    70ee:	59 f4       	brne	.+22     	; 0x7106 <vfscanf+0x17c>
    70f0:	9e 01       	movw	r18, r28
    70f2:	a4 01       	movw	r20, r8
    70f4:	6f 2d       	mov	r22, r15
    70f6:	c6 01       	movw	r24, r12
    70f8:	0e 94 07 37 	call	0x6e0e	; 0x6e0e <conv_brk>
    70fc:	ec 01       	movw	r28, r24
    70fe:	89 2b       	or	r24, r25
    7100:	09 f0       	breq	.+2      	; 0x7104 <vfscanf+0x17a>
    7102:	44 c0       	rjmp	.+136    	; 0x718c <vfscanf+0x202>
    7104:	3e c0       	rjmp	.+124    	; 0x7182 <vfscanf+0x1f8>
    7106:	c6 01       	movw	r24, r12
    7108:	0e 94 5c 36 	call	0x6cb8	; 0x6cb8 <skip_spaces>
    710c:	97 fd       	sbrc	r25, 7
    710e:	42 c0       	rjmp	.+132    	; 0x7194 <vfscanf+0x20a>
    7110:	1f 36       	cpi	r17, 0x6F	; 111
    7112:	61 f1       	breq	.+88     	; 0x716c <vfscanf+0x1e2>
    7114:	28 f4       	brcc	.+10     	; 0x7120 <vfscanf+0x196>
    7116:	14 36       	cpi	r17, 0x64	; 100
    7118:	39 f1       	breq	.+78     	; 0x7168 <vfscanf+0x1de>
    711a:	19 36       	cpi	r17, 0x69	; 105
    711c:	51 f1       	breq	.+84     	; 0x7172 <vfscanf+0x1e8>
    711e:	28 c0       	rjmp	.+80     	; 0x7170 <vfscanf+0x1e6>
    7120:	13 37       	cpi	r17, 0x73	; 115
    7122:	71 f0       	breq	.+28     	; 0x7140 <vfscanf+0x1b6>
    7124:	15 37       	cpi	r17, 0x75	; 117
    7126:	01 f1       	breq	.+64     	; 0x7168 <vfscanf+0x1de>
    7128:	23 c0       	rjmp	.+70     	; 0x7170 <vfscanf+0x1e6>
    712a:	81 14       	cp	r8, r1
    712c:	91 04       	cpc	r9, r1
    712e:	29 f0       	breq	.+10     	; 0x713a <vfscanf+0x1b0>
    7130:	f4 01       	movw	r30, r8
    7132:	60 82       	st	Z, r6
    7134:	c4 01       	movw	r24, r8
    7136:	01 96       	adiw	r24, 0x01	; 1
    7138:	4c 01       	movw	r8, r24
    713a:	fa 94       	dec	r15
    713c:	ff 20       	and	r15, r15
    713e:	71 f0       	breq	.+28     	; 0x715c <vfscanf+0x1d2>
    7140:	c6 01       	movw	r24, r12
    7142:	0e 94 02 33 	call	0x6604	; 0x6604 <fgetc>
    7146:	3c 01       	movw	r6, r24
    7148:	97 fd       	sbrc	r25, 7
    714a:	08 c0       	rjmp	.+16     	; 0x715c <vfscanf+0x1d2>
    714c:	0e 94 a2 32 	call	0x6544	; 0x6544 <isspace>
    7150:	89 2b       	or	r24, r25
    7152:	59 f3       	breq	.-42     	; 0x712a <vfscanf+0x1a0>
    7154:	b6 01       	movw	r22, r12
    7156:	c3 01       	movw	r24, r6
    7158:	0e 94 75 3b 	call	0x76ea	; 0x76ea <ungetc>
    715c:	81 14       	cp	r8, r1
    715e:	91 04       	cpc	r9, r1
    7160:	a9 f0       	breq	.+42     	; 0x718c <vfscanf+0x202>
    7162:	f4 01       	movw	r30, r8
    7164:	10 82       	st	Z, r1
    7166:	12 c0       	rjmp	.+36     	; 0x718c <vfscanf+0x202>
    7168:	00 62       	ori	r16, 0x20	; 32
    716a:	03 c0       	rjmp	.+6      	; 0x7172 <vfscanf+0x1e8>
    716c:	00 61       	ori	r16, 0x10	; 16
    716e:	01 c0       	rjmp	.+2      	; 0x7172 <vfscanf+0x1e8>
    7170:	00 64       	ori	r16, 0x40	; 64
    7172:	20 2f       	mov	r18, r16
    7174:	a4 01       	movw	r20, r8
    7176:	6f 2d       	mov	r22, r15
    7178:	c6 01       	movw	r24, r12
    717a:	0e 94 75 36 	call	0x6cea	; 0x6cea <conv_int>
    717e:	81 11       	cpse	r24, r1
    7180:	05 c0       	rjmp	.+10     	; 0x718c <vfscanf+0x202>
    7182:	f6 01       	movw	r30, r12
    7184:	83 81       	ldd	r24, Z+3	; 0x03
    7186:	80 73       	andi	r24, 0x30	; 48
    7188:	29 f4       	brne	.+10     	; 0x7194 <vfscanf+0x20a>
    718a:	06 c0       	rjmp	.+12     	; 0x7198 <vfscanf+0x20e>
    718c:	00 fd       	sbrc	r16, 0
    718e:	0a cf       	rjmp	.-492    	; 0x6fa4 <vfscanf+0x1a>
    7190:	53 94       	inc	r5
    7192:	08 cf       	rjmp	.-496    	; 0x6fa4 <vfscanf+0x1a>
    7194:	55 20       	and	r5, r5
    7196:	19 f0       	breq	.+6      	; 0x719e <vfscanf+0x214>
    7198:	85 2d       	mov	r24, r5
    719a:	90 e0       	ldi	r25, 0x00	; 0
    719c:	02 c0       	rjmp	.+4      	; 0x71a2 <vfscanf+0x218>
    719e:	8f ef       	ldi	r24, 0xFF	; 255
    71a0:	9f ef       	ldi	r25, 0xFF	; 255
    71a2:	cd b7       	in	r28, 0x3d	; 61
    71a4:	de b7       	in	r29, 0x3e	; 62
    71a6:	ef e0       	ldi	r30, 0x0F	; 15
    71a8:	0c 94 cf 30 	jmp	0x619e	; 0x619e <__epilogue_restores__+0x6>

000071ac <dtoa_prf>:
    71ac:	a9 e0       	ldi	r26, 0x09	; 9
    71ae:	b0 e0       	ldi	r27, 0x00	; 0
    71b0:	ec ed       	ldi	r30, 0xDC	; 220
    71b2:	f8 e3       	ldi	r31, 0x38	; 56
    71b4:	0c 94 b6 30 	jmp	0x616c	; 0x616c <__prologue_saves__+0xc>
    71b8:	6a 01       	movw	r12, r20
    71ba:	12 2f       	mov	r17, r18
    71bc:	b0 2e       	mov	r11, r16
    71be:	2b e3       	ldi	r18, 0x3B	; 59
    71c0:	20 17       	cp	r18, r16
    71c2:	20 f0       	brcs	.+8      	; 0x71cc <dtoa_prf+0x20>
    71c4:	ff 24       	eor	r15, r15
    71c6:	f3 94       	inc	r15
    71c8:	f0 0e       	add	r15, r16
    71ca:	02 c0       	rjmp	.+4      	; 0x71d0 <dtoa_prf+0x24>
    71cc:	2c e3       	ldi	r18, 0x3C	; 60
    71ce:	f2 2e       	mov	r15, r18
    71d0:	0f 2d       	mov	r16, r15
    71d2:	27 e0       	ldi	r18, 0x07	; 7
    71d4:	ae 01       	movw	r20, r28
    71d6:	4f 5f       	subi	r20, 0xFF	; 255
    71d8:	5f 4f       	sbci	r21, 0xFF	; 255
    71da:	0e 94 30 3a 	call	0x7460	; 0x7460 <__ftoa_engine>
    71de:	bc 01       	movw	r22, r24
    71e0:	49 81       	ldd	r20, Y+1	; 0x01
    71e2:	84 2f       	mov	r24, r20
    71e4:	89 70       	andi	r24, 0x09	; 9
    71e6:	81 30       	cpi	r24, 0x01	; 1
    71e8:	31 f0       	breq	.+12     	; 0x71f6 <dtoa_prf+0x4a>
    71ea:	e1 fc       	sbrc	r14, 1
    71ec:	06 c0       	rjmp	.+12     	; 0x71fa <dtoa_prf+0x4e>
    71ee:	e0 fe       	sbrs	r14, 0
    71f0:	06 c0       	rjmp	.+12     	; 0x71fe <dtoa_prf+0x52>
    71f2:	90 e2       	ldi	r25, 0x20	; 32
    71f4:	05 c0       	rjmp	.+10     	; 0x7200 <dtoa_prf+0x54>
    71f6:	9d e2       	ldi	r25, 0x2D	; 45
    71f8:	03 c0       	rjmp	.+6      	; 0x7200 <dtoa_prf+0x54>
    71fa:	9b e2       	ldi	r25, 0x2B	; 43
    71fc:	01 c0       	rjmp	.+2      	; 0x7200 <dtoa_prf+0x54>
    71fe:	90 e0       	ldi	r25, 0x00	; 0
    7200:	5e 2d       	mov	r21, r14
    7202:	50 71       	andi	r21, 0x10	; 16
    7204:	43 ff       	sbrs	r20, 3
    7206:	3c c0       	rjmp	.+120    	; 0x7280 <dtoa_prf+0xd4>
    7208:	91 11       	cpse	r25, r1
    720a:	02 c0       	rjmp	.+4      	; 0x7210 <dtoa_prf+0x64>
    720c:	83 e0       	ldi	r24, 0x03	; 3
    720e:	01 c0       	rjmp	.+2      	; 0x7212 <dtoa_prf+0x66>
    7210:	84 e0       	ldi	r24, 0x04	; 4
    7212:	81 17       	cp	r24, r17
    7214:	18 f4       	brcc	.+6      	; 0x721c <dtoa_prf+0x70>
    7216:	21 2f       	mov	r18, r17
    7218:	28 1b       	sub	r18, r24
    721a:	01 c0       	rjmp	.+2      	; 0x721e <dtoa_prf+0x72>
    721c:	20 e0       	ldi	r18, 0x00	; 0
    721e:	51 11       	cpse	r21, r1
    7220:	0b c0       	rjmp	.+22     	; 0x7238 <dtoa_prf+0x8c>
    7222:	f6 01       	movw	r30, r12
    7224:	82 2f       	mov	r24, r18
    7226:	30 e2       	ldi	r19, 0x20	; 32
    7228:	88 23       	and	r24, r24
    722a:	19 f0       	breq	.+6      	; 0x7232 <dtoa_prf+0x86>
    722c:	31 93       	st	Z+, r19
    722e:	81 50       	subi	r24, 0x01	; 1
    7230:	fb cf       	rjmp	.-10     	; 0x7228 <dtoa_prf+0x7c>
    7232:	c2 0e       	add	r12, r18
    7234:	d1 1c       	adc	r13, r1
    7236:	20 e0       	ldi	r18, 0x00	; 0
    7238:	99 23       	and	r25, r25
    723a:	29 f0       	breq	.+10     	; 0x7246 <dtoa_prf+0x9a>
    723c:	d6 01       	movw	r26, r12
    723e:	9c 93       	st	X, r25
    7240:	f6 01       	movw	r30, r12
    7242:	31 96       	adiw	r30, 0x01	; 1
    7244:	6f 01       	movw	r12, r30
    7246:	c6 01       	movw	r24, r12
    7248:	03 96       	adiw	r24, 0x03	; 3
    724a:	e2 fe       	sbrs	r14, 2
    724c:	0a c0       	rjmp	.+20     	; 0x7262 <dtoa_prf+0xb6>
    724e:	3e e4       	ldi	r19, 0x4E	; 78
    7250:	d6 01       	movw	r26, r12
    7252:	3c 93       	st	X, r19
    7254:	41 e4       	ldi	r20, 0x41	; 65
    7256:	11 96       	adiw	r26, 0x01	; 1
    7258:	4c 93       	st	X, r20
    725a:	11 97       	sbiw	r26, 0x01	; 1
    725c:	12 96       	adiw	r26, 0x02	; 2
    725e:	3c 93       	st	X, r19
    7260:	06 c0       	rjmp	.+12     	; 0x726e <dtoa_prf+0xc2>
    7262:	3e e6       	ldi	r19, 0x6E	; 110
    7264:	f6 01       	movw	r30, r12
    7266:	30 83       	st	Z, r19
    7268:	41 e6       	ldi	r20, 0x61	; 97
    726a:	41 83       	std	Z+1, r20	; 0x01
    726c:	32 83       	std	Z+2, r19	; 0x02
    726e:	fc 01       	movw	r30, r24
    7270:	32 2f       	mov	r19, r18
    7272:	40 e2       	ldi	r20, 0x20	; 32
    7274:	33 23       	and	r19, r19
    7276:	09 f4       	brne	.+2      	; 0x727a <dtoa_prf+0xce>
    7278:	42 c0       	rjmp	.+132    	; 0x72fe <dtoa_prf+0x152>
    727a:	41 93       	st	Z+, r20
    727c:	31 50       	subi	r19, 0x01	; 1
    727e:	fa cf       	rjmp	.-12     	; 0x7274 <dtoa_prf+0xc8>
    7280:	42 ff       	sbrs	r20, 2
    7282:	44 c0       	rjmp	.+136    	; 0x730c <dtoa_prf+0x160>
    7284:	91 11       	cpse	r25, r1
    7286:	02 c0       	rjmp	.+4      	; 0x728c <dtoa_prf+0xe0>
    7288:	83 e0       	ldi	r24, 0x03	; 3
    728a:	01 c0       	rjmp	.+2      	; 0x728e <dtoa_prf+0xe2>
    728c:	84 e0       	ldi	r24, 0x04	; 4
    728e:	81 17       	cp	r24, r17
    7290:	18 f4       	brcc	.+6      	; 0x7298 <dtoa_prf+0xec>
    7292:	21 2f       	mov	r18, r17
    7294:	28 1b       	sub	r18, r24
    7296:	01 c0       	rjmp	.+2      	; 0x729a <dtoa_prf+0xee>
    7298:	20 e0       	ldi	r18, 0x00	; 0
    729a:	51 11       	cpse	r21, r1
    729c:	0b c0       	rjmp	.+22     	; 0x72b4 <dtoa_prf+0x108>
    729e:	f6 01       	movw	r30, r12
    72a0:	82 2f       	mov	r24, r18
    72a2:	30 e2       	ldi	r19, 0x20	; 32
    72a4:	88 23       	and	r24, r24
    72a6:	19 f0       	breq	.+6      	; 0x72ae <dtoa_prf+0x102>
    72a8:	31 93       	st	Z+, r19
    72aa:	81 50       	subi	r24, 0x01	; 1
    72ac:	fb cf       	rjmp	.-10     	; 0x72a4 <dtoa_prf+0xf8>
    72ae:	c2 0e       	add	r12, r18
    72b0:	d1 1c       	adc	r13, r1
    72b2:	20 e0       	ldi	r18, 0x00	; 0
    72b4:	99 23       	and	r25, r25
    72b6:	29 f0       	breq	.+10     	; 0x72c2 <dtoa_prf+0x116>
    72b8:	d6 01       	movw	r26, r12
    72ba:	9c 93       	st	X, r25
    72bc:	f6 01       	movw	r30, r12
    72be:	31 96       	adiw	r30, 0x01	; 1
    72c0:	6f 01       	movw	r12, r30
    72c2:	c6 01       	movw	r24, r12
    72c4:	03 96       	adiw	r24, 0x03	; 3
    72c6:	e2 fe       	sbrs	r14, 2
    72c8:	0b c0       	rjmp	.+22     	; 0x72e0 <dtoa_prf+0x134>
    72ca:	39 e4       	ldi	r19, 0x49	; 73
    72cc:	d6 01       	movw	r26, r12
    72ce:	3c 93       	st	X, r19
    72d0:	3e e4       	ldi	r19, 0x4E	; 78
    72d2:	11 96       	adiw	r26, 0x01	; 1
    72d4:	3c 93       	st	X, r19
    72d6:	11 97       	sbiw	r26, 0x01	; 1
    72d8:	36 e4       	ldi	r19, 0x46	; 70
    72da:	12 96       	adiw	r26, 0x02	; 2
    72dc:	3c 93       	st	X, r19
    72de:	07 c0       	rjmp	.+14     	; 0x72ee <dtoa_prf+0x142>
    72e0:	39 e6       	ldi	r19, 0x69	; 105
    72e2:	f6 01       	movw	r30, r12
    72e4:	30 83       	st	Z, r19
    72e6:	3e e6       	ldi	r19, 0x6E	; 110
    72e8:	31 83       	std	Z+1, r19	; 0x01
    72ea:	36 e6       	ldi	r19, 0x66	; 102
    72ec:	32 83       	std	Z+2, r19	; 0x02
    72ee:	fc 01       	movw	r30, r24
    72f0:	32 2f       	mov	r19, r18
    72f2:	40 e2       	ldi	r20, 0x20	; 32
    72f4:	33 23       	and	r19, r19
    72f6:	19 f0       	breq	.+6      	; 0x72fe <dtoa_prf+0x152>
    72f8:	41 93       	st	Z+, r20
    72fa:	31 50       	subi	r19, 0x01	; 1
    72fc:	fb cf       	rjmp	.-10     	; 0x72f4 <dtoa_prf+0x148>
    72fe:	fc 01       	movw	r30, r24
    7300:	e2 0f       	add	r30, r18
    7302:	f1 1d       	adc	r31, r1
    7304:	10 82       	st	Z, r1
    7306:	8e ef       	ldi	r24, 0xFE	; 254
    7308:	9f ef       	ldi	r25, 0xFF	; 255
    730a:	a6 c0       	rjmp	.+332    	; 0x7458 <dtoa_prf+0x2ac>
    730c:	21 e0       	ldi	r18, 0x01	; 1
    730e:	30 e0       	ldi	r19, 0x00	; 0
    7310:	91 11       	cpse	r25, r1
    7312:	02 c0       	rjmp	.+4      	; 0x7318 <dtoa_prf+0x16c>
    7314:	20 e0       	ldi	r18, 0x00	; 0
    7316:	30 e0       	ldi	r19, 0x00	; 0
    7318:	16 16       	cp	r1, r22
    731a:	17 06       	cpc	r1, r23
    731c:	1c f4       	brge	.+6      	; 0x7324 <dtoa_prf+0x178>
    731e:	fb 01       	movw	r30, r22
    7320:	31 96       	adiw	r30, 0x01	; 1
    7322:	02 c0       	rjmp	.+4      	; 0x7328 <dtoa_prf+0x17c>
    7324:	e1 e0       	ldi	r30, 0x01	; 1
    7326:	f0 e0       	ldi	r31, 0x00	; 0
    7328:	2e 0f       	add	r18, r30
    732a:	3f 1f       	adc	r19, r31
    732c:	bb 20       	and	r11, r11
    732e:	21 f0       	breq	.+8      	; 0x7338 <dtoa_prf+0x18c>
    7330:	eb 2d       	mov	r30, r11
    7332:	f0 e0       	ldi	r31, 0x00	; 0
    7334:	31 96       	adiw	r30, 0x01	; 1
    7336:	02 c0       	rjmp	.+4      	; 0x733c <dtoa_prf+0x190>
    7338:	e0 e0       	ldi	r30, 0x00	; 0
    733a:	f0 e0       	ldi	r31, 0x00	; 0
    733c:	2e 0f       	add	r18, r30
    733e:	3f 1f       	adc	r19, r31
    7340:	e1 2f       	mov	r30, r17
    7342:	f0 e0       	ldi	r31, 0x00	; 0
    7344:	2e 17       	cp	r18, r30
    7346:	3f 07       	cpc	r19, r31
    7348:	1c f4       	brge	.+6      	; 0x7350 <dtoa_prf+0x1a4>
    734a:	12 1b       	sub	r17, r18
    734c:	21 2f       	mov	r18, r17
    734e:	01 c0       	rjmp	.+2      	; 0x7352 <dtoa_prf+0x1a6>
    7350:	20 e0       	ldi	r18, 0x00	; 0
    7352:	8e 2d       	mov	r24, r14
    7354:	88 71       	andi	r24, 0x18	; 24
    7356:	59 f4       	brne	.+22     	; 0x736e <dtoa_prf+0x1c2>
    7358:	f6 01       	movw	r30, r12
    735a:	82 2f       	mov	r24, r18
    735c:	30 e2       	ldi	r19, 0x20	; 32
    735e:	88 23       	and	r24, r24
    7360:	19 f0       	breq	.+6      	; 0x7368 <dtoa_prf+0x1bc>
    7362:	31 93       	st	Z+, r19
    7364:	81 50       	subi	r24, 0x01	; 1
    7366:	fb cf       	rjmp	.-10     	; 0x735e <dtoa_prf+0x1b2>
    7368:	c2 0e       	add	r12, r18
    736a:	d1 1c       	adc	r13, r1
    736c:	20 e0       	ldi	r18, 0x00	; 0
    736e:	99 23       	and	r25, r25
    7370:	29 f0       	breq	.+10     	; 0x737c <dtoa_prf+0x1d0>
    7372:	d6 01       	movw	r26, r12
    7374:	9c 93       	st	X, r25
    7376:	f6 01       	movw	r30, r12
    7378:	31 96       	adiw	r30, 0x01	; 1
    737a:	6f 01       	movw	r12, r30
    737c:	51 11       	cpse	r21, r1
    737e:	0b c0       	rjmp	.+22     	; 0x7396 <dtoa_prf+0x1ea>
    7380:	f6 01       	movw	r30, r12
    7382:	82 2f       	mov	r24, r18
    7384:	90 e3       	ldi	r25, 0x30	; 48
    7386:	88 23       	and	r24, r24
    7388:	19 f0       	breq	.+6      	; 0x7390 <dtoa_prf+0x1e4>
    738a:	91 93       	st	Z+, r25
    738c:	81 50       	subi	r24, 0x01	; 1
    738e:	fb cf       	rjmp	.-10     	; 0x7386 <dtoa_prf+0x1da>
    7390:	c2 0e       	add	r12, r18
    7392:	d1 1c       	adc	r13, r1
    7394:	20 e0       	ldi	r18, 0x00	; 0
    7396:	0f 2d       	mov	r16, r15
    7398:	06 0f       	add	r16, r22
    739a:	9a 81       	ldd	r25, Y+2	; 0x02
    739c:	34 2f       	mov	r19, r20
    739e:	30 71       	andi	r19, 0x10	; 16
    73a0:	44 ff       	sbrs	r20, 4
    73a2:	03 c0       	rjmp	.+6      	; 0x73aa <dtoa_prf+0x1fe>
    73a4:	91 33       	cpi	r25, 0x31	; 49
    73a6:	09 f4       	brne	.+2      	; 0x73aa <dtoa_prf+0x1fe>
    73a8:	01 50       	subi	r16, 0x01	; 1
    73aa:	10 16       	cp	r1, r16
    73ac:	24 f4       	brge	.+8      	; 0x73b6 <dtoa_prf+0x20a>
    73ae:	09 30       	cpi	r16, 0x09	; 9
    73b0:	18 f0       	brcs	.+6      	; 0x73b8 <dtoa_prf+0x20c>
    73b2:	08 e0       	ldi	r16, 0x08	; 8
    73b4:	01 c0       	rjmp	.+2      	; 0x73b8 <dtoa_prf+0x20c>
    73b6:	01 e0       	ldi	r16, 0x01	; 1
    73b8:	ab 01       	movw	r20, r22
    73ba:	77 ff       	sbrs	r23, 7
    73bc:	02 c0       	rjmp	.+4      	; 0x73c2 <dtoa_prf+0x216>
    73be:	40 e0       	ldi	r20, 0x00	; 0
    73c0:	50 e0       	ldi	r21, 0x00	; 0
    73c2:	fb 01       	movw	r30, r22
    73c4:	e4 1b       	sub	r30, r20
    73c6:	f5 0b       	sbc	r31, r21
    73c8:	a1 e0       	ldi	r26, 0x01	; 1
    73ca:	b0 e0       	ldi	r27, 0x00	; 0
    73cc:	ac 0f       	add	r26, r28
    73ce:	bd 1f       	adc	r27, r29
    73d0:	ea 0f       	add	r30, r26
    73d2:	fb 1f       	adc	r31, r27
    73d4:	8e e2       	ldi	r24, 0x2E	; 46
    73d6:	a8 2e       	mov	r10, r24
    73d8:	4b 01       	movw	r8, r22
    73da:	80 1a       	sub	r8, r16
    73dc:	91 08       	sbc	r9, r1
    73de:	0b 2d       	mov	r16, r11
    73e0:	10 e0       	ldi	r17, 0x00	; 0
    73e2:	11 95       	neg	r17
    73e4:	01 95       	neg	r16
    73e6:	11 09       	sbc	r17, r1
    73e8:	4f 3f       	cpi	r20, 0xFF	; 255
    73ea:	bf ef       	ldi	r27, 0xFF	; 255
    73ec:	5b 07       	cpc	r21, r27
    73ee:	21 f4       	brne	.+8      	; 0x73f8 <dtoa_prf+0x24c>
    73f0:	d6 01       	movw	r26, r12
    73f2:	ac 92       	st	X, r10
    73f4:	11 96       	adiw	r26, 0x01	; 1
    73f6:	6d 01       	movw	r12, r26
    73f8:	64 17       	cp	r22, r20
    73fa:	75 07       	cpc	r23, r21
    73fc:	2c f0       	brlt	.+10     	; 0x7408 <dtoa_prf+0x25c>
    73fe:	84 16       	cp	r8, r20
    7400:	95 06       	cpc	r9, r21
    7402:	14 f4       	brge	.+4      	; 0x7408 <dtoa_prf+0x25c>
    7404:	81 81       	ldd	r24, Z+1	; 0x01
    7406:	01 c0       	rjmp	.+2      	; 0x740a <dtoa_prf+0x25e>
    7408:	80 e3       	ldi	r24, 0x30	; 48
    740a:	41 50       	subi	r20, 0x01	; 1
    740c:	51 09       	sbc	r21, r1
    740e:	31 96       	adiw	r30, 0x01	; 1
    7410:	d6 01       	movw	r26, r12
    7412:	11 96       	adiw	r26, 0x01	; 1
    7414:	7d 01       	movw	r14, r26
    7416:	40 17       	cp	r20, r16
    7418:	51 07       	cpc	r21, r17
    741a:	24 f0       	brlt	.+8      	; 0x7424 <dtoa_prf+0x278>
    741c:	d6 01       	movw	r26, r12
    741e:	8c 93       	st	X, r24
    7420:	67 01       	movw	r12, r14
    7422:	e2 cf       	rjmp	.-60     	; 0x73e8 <dtoa_prf+0x23c>
    7424:	64 17       	cp	r22, r20
    7426:	75 07       	cpc	r23, r21
    7428:	39 f4       	brne	.+14     	; 0x7438 <dtoa_prf+0x28c>
    742a:	96 33       	cpi	r25, 0x36	; 54
    742c:	20 f4       	brcc	.+8      	; 0x7436 <dtoa_prf+0x28a>
    742e:	95 33       	cpi	r25, 0x35	; 53
    7430:	19 f4       	brne	.+6      	; 0x7438 <dtoa_prf+0x28c>
    7432:	31 11       	cpse	r19, r1
    7434:	01 c0       	rjmp	.+2      	; 0x7438 <dtoa_prf+0x28c>
    7436:	81 e3       	ldi	r24, 0x31	; 49
    7438:	f6 01       	movw	r30, r12
    743a:	80 83       	st	Z, r24
    743c:	f7 01       	movw	r30, r14
    743e:	82 2f       	mov	r24, r18
    7440:	90 e2       	ldi	r25, 0x20	; 32
    7442:	88 23       	and	r24, r24
    7444:	19 f0       	breq	.+6      	; 0x744c <dtoa_prf+0x2a0>
    7446:	91 93       	st	Z+, r25
    7448:	81 50       	subi	r24, 0x01	; 1
    744a:	fb cf       	rjmp	.-10     	; 0x7442 <dtoa_prf+0x296>
    744c:	f7 01       	movw	r30, r14
    744e:	e2 0f       	add	r30, r18
    7450:	f1 1d       	adc	r31, r1
    7452:	10 82       	st	Z, r1
    7454:	80 e0       	ldi	r24, 0x00	; 0
    7456:	90 e0       	ldi	r25, 0x00	; 0
    7458:	29 96       	adiw	r28, 0x09	; 9
    745a:	ec e0       	ldi	r30, 0x0C	; 12
    745c:	0c 94 d2 30 	jmp	0x61a4	; 0x61a4 <__epilogue_restores__+0xc>

00007460 <__ftoa_engine>:
    7460:	28 30       	cpi	r18, 0x08	; 8
    7462:	08 f0       	brcs	.+2      	; 0x7466 <__ftoa_engine+0x6>
    7464:	27 e0       	ldi	r18, 0x07	; 7
    7466:	33 27       	eor	r19, r19
    7468:	da 01       	movw	r26, r20
    746a:	99 0f       	add	r25, r25
    746c:	31 1d       	adc	r19, r1
    746e:	87 fd       	sbrc	r24, 7
    7470:	91 60       	ori	r25, 0x01	; 1
    7472:	00 96       	adiw	r24, 0x00	; 0
    7474:	61 05       	cpc	r22, r1
    7476:	71 05       	cpc	r23, r1
    7478:	39 f4       	brne	.+14     	; 0x7488 <__ftoa_engine+0x28>
    747a:	32 60       	ori	r19, 0x02	; 2
    747c:	2e 5f       	subi	r18, 0xFE	; 254
    747e:	3d 93       	st	X+, r19
    7480:	30 e3       	ldi	r19, 0x30	; 48
    7482:	2a 95       	dec	r18
    7484:	e1 f7       	brne	.-8      	; 0x747e <__ftoa_engine+0x1e>
    7486:	08 95       	ret
    7488:	9f 3f       	cpi	r25, 0xFF	; 255
    748a:	30 f0       	brcs	.+12     	; 0x7498 <__ftoa_engine+0x38>
    748c:	80 38       	cpi	r24, 0x80	; 128
    748e:	71 05       	cpc	r23, r1
    7490:	61 05       	cpc	r22, r1
    7492:	09 f0       	breq	.+2      	; 0x7496 <__ftoa_engine+0x36>
    7494:	3c 5f       	subi	r19, 0xFC	; 252
    7496:	3c 5f       	subi	r19, 0xFC	; 252
    7498:	3d 93       	st	X+, r19
    749a:	91 30       	cpi	r25, 0x01	; 1
    749c:	08 f0       	brcs	.+2      	; 0x74a0 <__ftoa_engine+0x40>
    749e:	80 68       	ori	r24, 0x80	; 128
    74a0:	91 1d       	adc	r25, r1
    74a2:	df 93       	push	r29
    74a4:	cf 93       	push	r28
    74a6:	1f 93       	push	r17
    74a8:	0f 93       	push	r16
    74aa:	ff 92       	push	r15
    74ac:	ef 92       	push	r14
    74ae:	19 2f       	mov	r17, r25
    74b0:	98 7f       	andi	r25, 0xF8	; 248
    74b2:	96 95       	lsr	r25
    74b4:	e9 2f       	mov	r30, r25
    74b6:	96 95       	lsr	r25
    74b8:	96 95       	lsr	r25
    74ba:	e9 0f       	add	r30, r25
    74bc:	ff 27       	eor	r31, r31
    74be:	e4 5c       	subi	r30, 0xC4	; 196
    74c0:	fe 4f       	sbci	r31, 0xFE	; 254
    74c2:	99 27       	eor	r25, r25
    74c4:	33 27       	eor	r19, r19
    74c6:	ee 24       	eor	r14, r14
    74c8:	ff 24       	eor	r15, r15
    74ca:	a7 01       	movw	r20, r14
    74cc:	e7 01       	movw	r28, r14
    74ce:	05 90       	lpm	r0, Z+
    74d0:	08 94       	sec
    74d2:	07 94       	ror	r0
    74d4:	28 f4       	brcc	.+10     	; 0x74e0 <__ftoa_engine+0x80>
    74d6:	36 0f       	add	r19, r22
    74d8:	e7 1e       	adc	r14, r23
    74da:	f8 1e       	adc	r15, r24
    74dc:	49 1f       	adc	r20, r25
    74de:	51 1d       	adc	r21, r1
    74e0:	66 0f       	add	r22, r22
    74e2:	77 1f       	adc	r23, r23
    74e4:	88 1f       	adc	r24, r24
    74e6:	99 1f       	adc	r25, r25
    74e8:	06 94       	lsr	r0
    74ea:	a1 f7       	brne	.-24     	; 0x74d4 <__ftoa_engine+0x74>
    74ec:	05 90       	lpm	r0, Z+
    74ee:	07 94       	ror	r0
    74f0:	28 f4       	brcc	.+10     	; 0x74fc <__ftoa_engine+0x9c>
    74f2:	e7 0e       	add	r14, r23
    74f4:	f8 1e       	adc	r15, r24
    74f6:	49 1f       	adc	r20, r25
    74f8:	56 1f       	adc	r21, r22
    74fa:	c1 1d       	adc	r28, r1
    74fc:	77 0f       	add	r23, r23
    74fe:	88 1f       	adc	r24, r24
    7500:	99 1f       	adc	r25, r25
    7502:	66 1f       	adc	r22, r22
    7504:	06 94       	lsr	r0
    7506:	a1 f7       	brne	.-24     	; 0x74f0 <__ftoa_engine+0x90>
    7508:	05 90       	lpm	r0, Z+
    750a:	07 94       	ror	r0
    750c:	28 f4       	brcc	.+10     	; 0x7518 <__ftoa_engine+0xb8>
    750e:	f8 0e       	add	r15, r24
    7510:	49 1f       	adc	r20, r25
    7512:	56 1f       	adc	r21, r22
    7514:	c7 1f       	adc	r28, r23
    7516:	d1 1d       	adc	r29, r1
    7518:	88 0f       	add	r24, r24
    751a:	99 1f       	adc	r25, r25
    751c:	66 1f       	adc	r22, r22
    751e:	77 1f       	adc	r23, r23
    7520:	06 94       	lsr	r0
    7522:	a1 f7       	brne	.-24     	; 0x750c <__ftoa_engine+0xac>
    7524:	05 90       	lpm	r0, Z+
    7526:	07 94       	ror	r0
    7528:	20 f4       	brcc	.+8      	; 0x7532 <__ftoa_engine+0xd2>
    752a:	49 0f       	add	r20, r25
    752c:	56 1f       	adc	r21, r22
    752e:	c7 1f       	adc	r28, r23
    7530:	d8 1f       	adc	r29, r24
    7532:	99 0f       	add	r25, r25
    7534:	66 1f       	adc	r22, r22
    7536:	77 1f       	adc	r23, r23
    7538:	88 1f       	adc	r24, r24
    753a:	06 94       	lsr	r0
    753c:	a9 f7       	brne	.-22     	; 0x7528 <__ftoa_engine+0xc8>
    753e:	84 91       	lpm	r24, Z
    7540:	10 95       	com	r17
    7542:	17 70       	andi	r17, 0x07	; 7
    7544:	41 f0       	breq	.+16     	; 0x7556 <__ftoa_engine+0xf6>
    7546:	d6 95       	lsr	r29
    7548:	c7 95       	ror	r28
    754a:	57 95       	ror	r21
    754c:	47 95       	ror	r20
    754e:	f7 94       	ror	r15
    7550:	e7 94       	ror	r14
    7552:	1a 95       	dec	r17
    7554:	c1 f7       	brne	.-16     	; 0x7546 <__ftoa_engine+0xe6>
    7556:	e2 ee       	ldi	r30, 0xE2	; 226
    7558:	f0 e0       	ldi	r31, 0x00	; 0
    755a:	68 94       	set
    755c:	15 90       	lpm	r1, Z+
    755e:	15 91       	lpm	r17, Z+
    7560:	35 91       	lpm	r19, Z+
    7562:	65 91       	lpm	r22, Z+
    7564:	95 91       	lpm	r25, Z+
    7566:	05 90       	lpm	r0, Z+
    7568:	7f e2       	ldi	r23, 0x2F	; 47
    756a:	73 95       	inc	r23
    756c:	e1 18       	sub	r14, r1
    756e:	f1 0a       	sbc	r15, r17
    7570:	43 0b       	sbc	r20, r19
    7572:	56 0b       	sbc	r21, r22
    7574:	c9 0b       	sbc	r28, r25
    7576:	d0 09       	sbc	r29, r0
    7578:	c0 f7       	brcc	.-16     	; 0x756a <__ftoa_engine+0x10a>
    757a:	e1 0c       	add	r14, r1
    757c:	f1 1e       	adc	r15, r17
    757e:	43 1f       	adc	r20, r19
    7580:	56 1f       	adc	r21, r22
    7582:	c9 1f       	adc	r28, r25
    7584:	d0 1d       	adc	r29, r0
    7586:	7e f4       	brtc	.+30     	; 0x75a6 <__ftoa_engine+0x146>
    7588:	70 33       	cpi	r23, 0x30	; 48
    758a:	11 f4       	brne	.+4      	; 0x7590 <__ftoa_engine+0x130>
    758c:	8a 95       	dec	r24
    758e:	e6 cf       	rjmp	.-52     	; 0x755c <__ftoa_engine+0xfc>
    7590:	e8 94       	clt
    7592:	01 50       	subi	r16, 0x01	; 1
    7594:	30 f0       	brcs	.+12     	; 0x75a2 <__ftoa_engine+0x142>
    7596:	08 0f       	add	r16, r24
    7598:	0a f4       	brpl	.+2      	; 0x759c <__ftoa_engine+0x13c>
    759a:	00 27       	eor	r16, r16
    759c:	02 17       	cp	r16, r18
    759e:	08 f4       	brcc	.+2      	; 0x75a2 <__ftoa_engine+0x142>
    75a0:	20 2f       	mov	r18, r16
    75a2:	23 95       	inc	r18
    75a4:	02 2f       	mov	r16, r18
    75a6:	7a 33       	cpi	r23, 0x3A	; 58
    75a8:	28 f0       	brcs	.+10     	; 0x75b4 <__ftoa_engine+0x154>
    75aa:	79 e3       	ldi	r23, 0x39	; 57
    75ac:	7d 93       	st	X+, r23
    75ae:	2a 95       	dec	r18
    75b0:	e9 f7       	brne	.-6      	; 0x75ac <__ftoa_engine+0x14c>
    75b2:	10 c0       	rjmp	.+32     	; 0x75d4 <__ftoa_engine+0x174>
    75b4:	7d 93       	st	X+, r23
    75b6:	2a 95       	dec	r18
    75b8:	89 f6       	brne	.-94     	; 0x755c <__ftoa_engine+0xfc>
    75ba:	06 94       	lsr	r0
    75bc:	97 95       	ror	r25
    75be:	67 95       	ror	r22
    75c0:	37 95       	ror	r19
    75c2:	17 95       	ror	r17
    75c4:	17 94       	ror	r1
    75c6:	e1 18       	sub	r14, r1
    75c8:	f1 0a       	sbc	r15, r17
    75ca:	43 0b       	sbc	r20, r19
    75cc:	56 0b       	sbc	r21, r22
    75ce:	c9 0b       	sbc	r28, r25
    75d0:	d0 09       	sbc	r29, r0
    75d2:	98 f0       	brcs	.+38     	; 0x75fa <__ftoa_engine+0x19a>
    75d4:	23 95       	inc	r18
    75d6:	7e 91       	ld	r23, -X
    75d8:	73 95       	inc	r23
    75da:	7a 33       	cpi	r23, 0x3A	; 58
    75dc:	08 f0       	brcs	.+2      	; 0x75e0 <__ftoa_engine+0x180>
    75de:	70 e3       	ldi	r23, 0x30	; 48
    75e0:	7c 93       	st	X, r23
    75e2:	20 13       	cpse	r18, r16
    75e4:	b8 f7       	brcc	.-18     	; 0x75d4 <__ftoa_engine+0x174>
    75e6:	7e 91       	ld	r23, -X
    75e8:	70 61       	ori	r23, 0x10	; 16
    75ea:	7d 93       	st	X+, r23
    75ec:	30 f0       	brcs	.+12     	; 0x75fa <__ftoa_engine+0x19a>
    75ee:	83 95       	inc	r24
    75f0:	71 e3       	ldi	r23, 0x31	; 49
    75f2:	7d 93       	st	X+, r23
    75f4:	70 e3       	ldi	r23, 0x30	; 48
    75f6:	2a 95       	dec	r18
    75f8:	e1 f7       	brne	.-8      	; 0x75f2 <__ftoa_engine+0x192>
    75fa:	11 24       	eor	r1, r1
    75fc:	ef 90       	pop	r14
    75fe:	ff 90       	pop	r15
    7600:	0f 91       	pop	r16
    7602:	1f 91       	pop	r17
    7604:	cf 91       	pop	r28
    7606:	df 91       	pop	r29
    7608:	99 27       	eor	r25, r25
    760a:	87 fd       	sbrc	r24, 7
    760c:	90 95       	com	r25
    760e:	08 95       	ret

00007610 <strchr_P>:
    7610:	fc 01       	movw	r30, r24
    7612:	05 90       	lpm	r0, Z+
    7614:	06 16       	cp	r0, r22
    7616:	21 f0       	breq	.+8      	; 0x7620 <strchr_P+0x10>
    7618:	00 20       	and	r0, r0
    761a:	d9 f7       	brne	.-10     	; 0x7612 <strchr_P+0x2>
    761c:	c0 01       	movw	r24, r0
    761e:	08 95       	ret
    7620:	31 97       	sbiw	r30, 0x01	; 1
    7622:	cf 01       	movw	r24, r30
    7624:	08 95       	ret

00007626 <strnlen_P>:
    7626:	fc 01       	movw	r30, r24
    7628:	05 90       	lpm	r0, Z+
    762a:	61 50       	subi	r22, 0x01	; 1
    762c:	70 40       	sbci	r23, 0x00	; 0
    762e:	01 10       	cpse	r0, r1
    7630:	d8 f7       	brcc	.-10     	; 0x7628 <strnlen_P+0x2>
    7632:	80 95       	com	r24
    7634:	90 95       	com	r25
    7636:	8e 0f       	add	r24, r30
    7638:	9f 1f       	adc	r25, r31
    763a:	08 95       	ret

0000763c <strnlen>:
    763c:	fc 01       	movw	r30, r24
    763e:	61 50       	subi	r22, 0x01	; 1
    7640:	70 40       	sbci	r23, 0x00	; 0
    7642:	01 90       	ld	r0, Z+
    7644:	01 10       	cpse	r0, r1
    7646:	d8 f7       	brcc	.-10     	; 0x763e <strnlen+0x2>
    7648:	80 95       	com	r24
    764a:	90 95       	com	r25
    764c:	8e 0f       	add	r24, r30
    764e:	9f 1f       	adc	r25, r31
    7650:	08 95       	ret

00007652 <strrev>:
    7652:	dc 01       	movw	r26, r24
    7654:	fc 01       	movw	r30, r24
    7656:	67 2f       	mov	r22, r23
    7658:	71 91       	ld	r23, Z+
    765a:	77 23       	and	r23, r23
    765c:	e1 f7       	brne	.-8      	; 0x7656 <strrev+0x4>
    765e:	32 97       	sbiw	r30, 0x02	; 2
    7660:	04 c0       	rjmp	.+8      	; 0x766a <strrev+0x18>
    7662:	7c 91       	ld	r23, X
    7664:	6d 93       	st	X+, r22
    7666:	70 83       	st	Z, r23
    7668:	62 91       	ld	r22, -Z
    766a:	ae 17       	cp	r26, r30
    766c:	bf 07       	cpc	r27, r31
    766e:	c8 f3       	brcs	.-14     	; 0x7662 <strrev+0x10>
    7670:	08 95       	ret

00007672 <fputc>:
    7672:	0f 93       	push	r16
    7674:	1f 93       	push	r17
    7676:	cf 93       	push	r28
    7678:	df 93       	push	r29
    767a:	fb 01       	movw	r30, r22
    767c:	23 81       	ldd	r18, Z+3	; 0x03
    767e:	21 fd       	sbrc	r18, 1
    7680:	03 c0       	rjmp	.+6      	; 0x7688 <fputc+0x16>
    7682:	8f ef       	ldi	r24, 0xFF	; 255
    7684:	9f ef       	ldi	r25, 0xFF	; 255
    7686:	2c c0       	rjmp	.+88     	; 0x76e0 <fputc+0x6e>
    7688:	22 ff       	sbrs	r18, 2
    768a:	16 c0       	rjmp	.+44     	; 0x76b8 <fputc+0x46>
    768c:	46 81       	ldd	r20, Z+6	; 0x06
    768e:	57 81       	ldd	r21, Z+7	; 0x07
    7690:	24 81       	ldd	r18, Z+4	; 0x04
    7692:	35 81       	ldd	r19, Z+5	; 0x05
    7694:	42 17       	cp	r20, r18
    7696:	53 07       	cpc	r21, r19
    7698:	44 f4       	brge	.+16     	; 0x76aa <fputc+0x38>
    769a:	a0 81       	ld	r26, Z
    769c:	b1 81       	ldd	r27, Z+1	; 0x01
    769e:	9d 01       	movw	r18, r26
    76a0:	2f 5f       	subi	r18, 0xFF	; 255
    76a2:	3f 4f       	sbci	r19, 0xFF	; 255
    76a4:	31 83       	std	Z+1, r19	; 0x01
    76a6:	20 83       	st	Z, r18
    76a8:	8c 93       	st	X, r24
    76aa:	26 81       	ldd	r18, Z+6	; 0x06
    76ac:	37 81       	ldd	r19, Z+7	; 0x07
    76ae:	2f 5f       	subi	r18, 0xFF	; 255
    76b0:	3f 4f       	sbci	r19, 0xFF	; 255
    76b2:	37 83       	std	Z+7, r19	; 0x07
    76b4:	26 83       	std	Z+6, r18	; 0x06
    76b6:	14 c0       	rjmp	.+40     	; 0x76e0 <fputc+0x6e>
    76b8:	8b 01       	movw	r16, r22
    76ba:	ec 01       	movw	r28, r24
    76bc:	fb 01       	movw	r30, r22
    76be:	00 84       	ldd	r0, Z+8	; 0x08
    76c0:	f1 85       	ldd	r31, Z+9	; 0x09
    76c2:	e0 2d       	mov	r30, r0
    76c4:	09 95       	icall
    76c6:	89 2b       	or	r24, r25
    76c8:	e1 f6       	brne	.-72     	; 0x7682 <fputc+0x10>
    76ca:	d8 01       	movw	r26, r16
    76cc:	16 96       	adiw	r26, 0x06	; 6
    76ce:	8d 91       	ld	r24, X+
    76d0:	9c 91       	ld	r25, X
    76d2:	17 97       	sbiw	r26, 0x07	; 7
    76d4:	01 96       	adiw	r24, 0x01	; 1
    76d6:	17 96       	adiw	r26, 0x07	; 7
    76d8:	9c 93       	st	X, r25
    76da:	8e 93       	st	-X, r24
    76dc:	16 97       	sbiw	r26, 0x06	; 6
    76de:	ce 01       	movw	r24, r28
    76e0:	df 91       	pop	r29
    76e2:	cf 91       	pop	r28
    76e4:	1f 91       	pop	r17
    76e6:	0f 91       	pop	r16
    76e8:	08 95       	ret

000076ea <ungetc>:
    76ea:	fb 01       	movw	r30, r22
    76ec:	23 81       	ldd	r18, Z+3	; 0x03
    76ee:	20 ff       	sbrs	r18, 0
    76f0:	12 c0       	rjmp	.+36     	; 0x7716 <ungetc+0x2c>
    76f2:	26 fd       	sbrc	r18, 6
    76f4:	10 c0       	rjmp	.+32     	; 0x7716 <ungetc+0x2c>
    76f6:	8f 3f       	cpi	r24, 0xFF	; 255
    76f8:	3f ef       	ldi	r19, 0xFF	; 255
    76fa:	93 07       	cpc	r25, r19
    76fc:	61 f0       	breq	.+24     	; 0x7716 <ungetc+0x2c>
    76fe:	82 83       	std	Z+2, r24	; 0x02
    7700:	2f 7d       	andi	r18, 0xDF	; 223
    7702:	20 64       	ori	r18, 0x40	; 64
    7704:	23 83       	std	Z+3, r18	; 0x03
    7706:	26 81       	ldd	r18, Z+6	; 0x06
    7708:	37 81       	ldd	r19, Z+7	; 0x07
    770a:	21 50       	subi	r18, 0x01	; 1
    770c:	31 09       	sbc	r19, r1
    770e:	37 83       	std	Z+7, r19	; 0x07
    7710:	26 83       	std	Z+6, r18	; 0x06
    7712:	99 27       	eor	r25, r25
    7714:	08 95       	ret
    7716:	8f ef       	ldi	r24, 0xFF	; 255
    7718:	9f ef       	ldi	r25, 0xFF	; 255
    771a:	08 95       	ret

0000771c <__ultoa_invert>:
    771c:	fa 01       	movw	r30, r20
    771e:	aa 27       	eor	r26, r26
    7720:	28 30       	cpi	r18, 0x08	; 8
    7722:	51 f1       	breq	.+84     	; 0x7778 <__ultoa_invert+0x5c>
    7724:	20 31       	cpi	r18, 0x10	; 16
    7726:	81 f1       	breq	.+96     	; 0x7788 <__ultoa_invert+0x6c>
    7728:	e8 94       	clt
    772a:	6f 93       	push	r22
    772c:	6e 7f       	andi	r22, 0xFE	; 254
    772e:	6e 5f       	subi	r22, 0xFE	; 254
    7730:	7f 4f       	sbci	r23, 0xFF	; 255
    7732:	8f 4f       	sbci	r24, 0xFF	; 255
    7734:	9f 4f       	sbci	r25, 0xFF	; 255
    7736:	af 4f       	sbci	r26, 0xFF	; 255
    7738:	b1 e0       	ldi	r27, 0x01	; 1
    773a:	3e d0       	rcall	.+124    	; 0x77b8 <__ultoa_invert+0x9c>
    773c:	b4 e0       	ldi	r27, 0x04	; 4
    773e:	3c d0       	rcall	.+120    	; 0x77b8 <__ultoa_invert+0x9c>
    7740:	67 0f       	add	r22, r23
    7742:	78 1f       	adc	r23, r24
    7744:	89 1f       	adc	r24, r25
    7746:	9a 1f       	adc	r25, r26
    7748:	a1 1d       	adc	r26, r1
    774a:	68 0f       	add	r22, r24
    774c:	79 1f       	adc	r23, r25
    774e:	8a 1f       	adc	r24, r26
    7750:	91 1d       	adc	r25, r1
    7752:	a1 1d       	adc	r26, r1
    7754:	6a 0f       	add	r22, r26
    7756:	71 1d       	adc	r23, r1
    7758:	81 1d       	adc	r24, r1
    775a:	91 1d       	adc	r25, r1
    775c:	a1 1d       	adc	r26, r1
    775e:	20 d0       	rcall	.+64     	; 0x77a0 <__ultoa_invert+0x84>
    7760:	09 f4       	brne	.+2      	; 0x7764 <__ultoa_invert+0x48>
    7762:	68 94       	set
    7764:	3f 91       	pop	r19
    7766:	2a e0       	ldi	r18, 0x0A	; 10
    7768:	26 9f       	mul	r18, r22
    776a:	11 24       	eor	r1, r1
    776c:	30 19       	sub	r19, r0
    776e:	30 5d       	subi	r19, 0xD0	; 208
    7770:	31 93       	st	Z+, r19
    7772:	de f6       	brtc	.-74     	; 0x772a <__ultoa_invert+0xe>
    7774:	cf 01       	movw	r24, r30
    7776:	08 95       	ret
    7778:	46 2f       	mov	r20, r22
    777a:	47 70       	andi	r20, 0x07	; 7
    777c:	40 5d       	subi	r20, 0xD0	; 208
    777e:	41 93       	st	Z+, r20
    7780:	b3 e0       	ldi	r27, 0x03	; 3
    7782:	0f d0       	rcall	.+30     	; 0x77a2 <__ultoa_invert+0x86>
    7784:	c9 f7       	brne	.-14     	; 0x7778 <__ultoa_invert+0x5c>
    7786:	f6 cf       	rjmp	.-20     	; 0x7774 <__ultoa_invert+0x58>
    7788:	46 2f       	mov	r20, r22
    778a:	4f 70       	andi	r20, 0x0F	; 15
    778c:	40 5d       	subi	r20, 0xD0	; 208
    778e:	4a 33       	cpi	r20, 0x3A	; 58
    7790:	18 f0       	brcs	.+6      	; 0x7798 <__ultoa_invert+0x7c>
    7792:	49 5d       	subi	r20, 0xD9	; 217
    7794:	31 fd       	sbrc	r19, 1
    7796:	40 52       	subi	r20, 0x20	; 32
    7798:	41 93       	st	Z+, r20
    779a:	02 d0       	rcall	.+4      	; 0x77a0 <__ultoa_invert+0x84>
    779c:	a9 f7       	brne	.-22     	; 0x7788 <__ultoa_invert+0x6c>
    779e:	ea cf       	rjmp	.-44     	; 0x7774 <__ultoa_invert+0x58>
    77a0:	b4 e0       	ldi	r27, 0x04	; 4
    77a2:	a6 95       	lsr	r26
    77a4:	97 95       	ror	r25
    77a6:	87 95       	ror	r24
    77a8:	77 95       	ror	r23
    77aa:	67 95       	ror	r22
    77ac:	ba 95       	dec	r27
    77ae:	c9 f7       	brne	.-14     	; 0x77a2 <__ultoa_invert+0x86>
    77b0:	00 97       	sbiw	r24, 0x00	; 0
    77b2:	61 05       	cpc	r22, r1
    77b4:	71 05       	cpc	r23, r1
    77b6:	08 95       	ret
    77b8:	9b 01       	movw	r18, r22
    77ba:	ac 01       	movw	r20, r24
    77bc:	0a 2e       	mov	r0, r26
    77be:	06 94       	lsr	r0
    77c0:	57 95       	ror	r21
    77c2:	47 95       	ror	r20
    77c4:	37 95       	ror	r19
    77c6:	27 95       	ror	r18
    77c8:	ba 95       	dec	r27
    77ca:	c9 f7       	brne	.-14     	; 0x77be <__ultoa_invert+0xa2>
    77cc:	62 0f       	add	r22, r18
    77ce:	73 1f       	adc	r23, r19
    77d0:	84 1f       	adc	r24, r20
    77d2:	95 1f       	adc	r25, r21
    77d4:	a0 1d       	adc	r26, r0
    77d6:	08 95       	ret

000077d8 <eeprom_read_block>:
    77d8:	dc 01       	movw	r26, r24
    77da:	cb 01       	movw	r24, r22

000077dc <eeprom_read_blraw>:
    77dc:	fc 01       	movw	r30, r24
    77de:	f9 99       	sbic	0x1f, 1	; 31
    77e0:	fe cf       	rjmp	.-4      	; 0x77de <eeprom_read_blraw+0x2>
    77e2:	06 c0       	rjmp	.+12     	; 0x77f0 <eeprom_read_blraw+0x14>
    77e4:	f2 bd       	out	0x22, r31	; 34
    77e6:	e1 bd       	out	0x21, r30	; 33
    77e8:	f8 9a       	sbi	0x1f, 0	; 31
    77ea:	31 96       	adiw	r30, 0x01	; 1
    77ec:	00 b4       	in	r0, 0x20	; 32
    77ee:	0d 92       	st	X+, r0
    77f0:	41 50       	subi	r20, 0x01	; 1
    77f2:	50 40       	sbci	r21, 0x00	; 0
    77f4:	b8 f7       	brcc	.-18     	; 0x77e4 <eeprom_read_blraw+0x8>
    77f6:	08 95       	ret

000077f8 <eeprom_read_byte>:
    77f8:	f9 99       	sbic	0x1f, 1	; 31
    77fa:	fe cf       	rjmp	.-4      	; 0x77f8 <eeprom_read_byte>
    77fc:	92 bd       	out	0x22, r25	; 34
    77fe:	81 bd       	out	0x21, r24	; 33
    7800:	f8 9a       	sbi	0x1f, 0	; 31
    7802:	99 27       	eor	r25, r25
    7804:	80 b5       	in	r24, 0x20	; 32
    7806:	08 95       	ret

00007808 <eeprom_read_dword>:
    7808:	a6 e1       	ldi	r26, 0x16	; 22
    780a:	b0 e0       	ldi	r27, 0x00	; 0
    780c:	44 e0       	ldi	r20, 0x04	; 4
    780e:	50 e0       	ldi	r21, 0x00	; 0
    7810:	0c 94 ee 3b 	jmp	0x77dc	; 0x77dc <eeprom_read_blraw>

00007814 <eeprom_read_word>:
    7814:	a8 e1       	ldi	r26, 0x18	; 24
    7816:	b0 e0       	ldi	r27, 0x00	; 0
    7818:	42 e0       	ldi	r20, 0x02	; 2
    781a:	50 e0       	ldi	r21, 0x00	; 0
    781c:	0c 94 ee 3b 	jmp	0x77dc	; 0x77dc <eeprom_read_blraw>

00007820 <eeprom_write_block>:
    7820:	dc 01       	movw	r26, r24
    7822:	cb 01       	movw	r24, r22
    7824:	03 c0       	rjmp	.+6      	; 0x782c <eeprom_write_block+0xc>
    7826:	2d 91       	ld	r18, X+
    7828:	0e 94 1b 3c 	call	0x7836	; 0x7836 <eeprom_write_r18>
    782c:	41 50       	subi	r20, 0x01	; 1
    782e:	50 40       	sbci	r21, 0x00	; 0
    7830:	d0 f7       	brcc	.-12     	; 0x7826 <eeprom_write_block+0x6>
    7832:	08 95       	ret

00007834 <eeprom_write_byte>:
    7834:	26 2f       	mov	r18, r22

00007836 <eeprom_write_r18>:
    7836:	f9 99       	sbic	0x1f, 1	; 31
    7838:	fe cf       	rjmp	.-4      	; 0x7836 <eeprom_write_r18>
    783a:	1f ba       	out	0x1f, r1	; 31
    783c:	92 bd       	out	0x22, r25	; 34
    783e:	81 bd       	out	0x21, r24	; 33
    7840:	20 bd       	out	0x20, r18	; 32
    7842:	0f b6       	in	r0, 0x3f	; 63
    7844:	f8 94       	cli
    7846:	fa 9a       	sbi	0x1f, 2	; 31
    7848:	f9 9a       	sbi	0x1f, 1	; 31
    784a:	0f be       	out	0x3f, r0	; 63
    784c:	01 96       	adiw	r24, 0x01	; 1
    784e:	08 95       	ret

00007850 <eeprom_write_dword>:
    7850:	24 2f       	mov	r18, r20
    7852:	0e 94 1b 3c 	call	0x7836	; 0x7836 <eeprom_write_r18>
    7856:	25 2f       	mov	r18, r21
    7858:	0e 94 1b 3c 	call	0x7836	; 0x7836 <eeprom_write_r18>
    785c:	0c 94 30 3c 	jmp	0x7860	; 0x7860 <eeprom_write_word>

00007860 <eeprom_write_word>:
    7860:	0e 94 1a 3c 	call	0x7834	; 0x7834 <eeprom_write_byte>
    7864:	27 2f       	mov	r18, r23
    7866:	0c 94 1b 3c 	jmp	0x7836	; 0x7836 <eeprom_write_r18>

0000786a <_exit>:
    786a:	f8 94       	cli

0000786c <__stop_program>:
    786c:	ff cf       	rjmp	.-2      	; 0x786c <__stop_program>
